# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AmiVariableArgs',
    'AmiVariableArgsDict',
    'CodedeployVariableArgs',
    'CodedeployVariableArgsDict',
    'EcsVariableArgs',
    'EcsVariableArgsDict',
    'HelmVariableArgs',
    'HelmVariableArgsDict',
    'KubernetesVariableArgs',
    'KubernetesVariableArgsDict',
    'LambdaVariableArgs',
    'LambdaVariableArgsDict',
    'SshVariableArgs',
    'SshVariableArgsDict',
    'TanzuVariableArgs',
    'TanzuVariableArgsDict',
    'WinrmVariableArgs',
    'WinrmVariableArgsDict',
]

MYPY = False

if not MYPY:
    class AmiVariableArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        Name of the variable
        """
        type: pulumi.Input[builtins.str]
        """
        Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        """
        value: pulumi.Input[builtins.str]
        """
        Value of the variable
        """
elif False:
    AmiVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AmiVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 type: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] name: Name of the variable
        :param pulumi.Input[builtins.str] type: Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        :param pulumi.Input[builtins.str] value: Value of the variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        Value of the variable
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class CodedeployVariableArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        Name of the variable
        """
        type: pulumi.Input[builtins.str]
        """
        Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        """
        value: pulumi.Input[builtins.str]
        """
        Value of the variable
        """
elif False:
    CodedeployVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CodedeployVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 type: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] name: Name of the variable
        :param pulumi.Input[builtins.str] type: Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        :param pulumi.Input[builtins.str] value: Value of the variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        Value of the variable
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class EcsVariableArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        Name of the variable
        """
        type: pulumi.Input[builtins.str]
        """
        Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        """
        value: pulumi.Input[builtins.str]
        """
        Value of the variable
        """
elif False:
    EcsVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EcsVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 type: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] name: Name of the variable
        :param pulumi.Input[builtins.str] type: Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        :param pulumi.Input[builtins.str] value: Value of the variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        Value of the variable
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class HelmVariableArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        Name of the variable
        """
        type: pulumi.Input[builtins.str]
        """
        Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        """
        value: pulumi.Input[builtins.str]
        """
        Value of the variable
        """
elif False:
    HelmVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HelmVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 type: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] name: Name of the variable
        :param pulumi.Input[builtins.str] type: Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        :param pulumi.Input[builtins.str] value: Value of the variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        Value of the variable
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class KubernetesVariableArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        Name of the variable
        """
        type: pulumi.Input[builtins.str]
        """
        Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        """
        value: pulumi.Input[builtins.str]
        """
        Value of the variable
        """
elif False:
    KubernetesVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KubernetesVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 type: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] name: Name of the variable
        :param pulumi.Input[builtins.str] type: Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        :param pulumi.Input[builtins.str] value: Value of the variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        Value of the variable
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LambdaVariableArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        Name of the variable
        """
        type: pulumi.Input[builtins.str]
        """
        Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        """
        value: pulumi.Input[builtins.str]
        """
        Value of the variable
        """
elif False:
    LambdaVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LambdaVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 type: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] name: Name of the variable
        :param pulumi.Input[builtins.str] type: Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        :param pulumi.Input[builtins.str] value: Value of the variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        Value of the variable
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class SshVariableArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        Name of the variable
        """
        type: pulumi.Input[builtins.str]
        """
        Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        """
        value: pulumi.Input[builtins.str]
        """
        Value of the variable
        """
elif False:
    SshVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SshVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 type: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] name: Name of the variable
        :param pulumi.Input[builtins.str] type: Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        :param pulumi.Input[builtins.str] value: Value of the variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        Value of the variable
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TanzuVariableArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        Name of the variable
        """
        type: pulumi.Input[builtins.str]
        """
        Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        """
        value: pulumi.Input[builtins.str]
        """
        Value of the variable
        """
elif False:
    TanzuVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TanzuVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 type: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] name: Name of the variable
        :param pulumi.Input[builtins.str] type: Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        :param pulumi.Input[builtins.str] value: Value of the variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        Value of the variable
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class WinrmVariableArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        Name of the variable
        """
        type: pulumi.Input[builtins.str]
        """
        Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        """
        value: pulumi.Input[builtins.str]
        """
        Value of the variable
        """
elif False:
    WinrmVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WinrmVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 type: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] name: Name of the variable
        :param pulumi.Input[builtins.str] type: Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        :param pulumi.Input[builtins.str] value: Value of the variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        Value of the variable
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


