# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetInfraVariableSetResult',
    'AwaitableGetInfraVariableSetResult',
    'get_infra_variable_set',
    'get_infra_variable_set_output',
]

@pulumi.output_type
class GetInfraVariableSetResult:
    """
    A collection of values returned by getInfraVariableSet.
    """
    def __init__(__self__, connectors=None, description=None, environment_variables=None, id=None, identifier=None, name=None, org_id=None, project_id=None, tags=None, terraform_variable_files=None, terraform_variables=None):
        if connectors and not isinstance(connectors, list):
            raise TypeError("Expected argument 'connectors' to be a list")
        pulumi.set(__self__, "connectors", connectors)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if environment_variables and not isinstance(environment_variables, list):
            raise TypeError("Expected argument 'environment_variables' to be a list")
        pulumi.set(__self__, "environment_variables", environment_variables)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if terraform_variable_files and not isinstance(terraform_variable_files, list):
            raise TypeError("Expected argument 'terraform_variable_files' to be a list")
        pulumi.set(__self__, "terraform_variable_files", terraform_variable_files)
        if terraform_variables and not isinstance(terraform_variables, list):
            raise TypeError("Expected argument 'terraform_variables' to be a list")
        pulumi.set(__self__, "terraform_variables", terraform_variables)

    @property
    @pulumi.getter
    def connectors(self) -> Sequence['outputs.GetInfraVariableSetConnectorResult']:
        """
        Provider connector configured on the variable set
        """
        return pulumi.get(self, "connectors")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the Variable Set
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Sequence['outputs.GetInfraVariableSetEnvironmentVariableResult']:
        """
        Environment variables configured on the variable set
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Identifier of the Variable Set
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the Variable Set
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[str]:
        """
        Organization Identifier
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        Project Identifier
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="terraformVariableFiles")
    def terraform_variable_files(self) -> Sequence['outputs.GetInfraVariableSetTerraformVariableFileResult']:
        return pulumi.get(self, "terraform_variable_files")

    @property
    @pulumi.getter(name="terraformVariables")
    def terraform_variables(self) -> Sequence['outputs.GetInfraVariableSetTerraformVariableResult']:
        return pulumi.get(self, "terraform_variables")


class AwaitableGetInfraVariableSetResult(GetInfraVariableSetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInfraVariableSetResult(
            connectors=self.connectors,
            description=self.description,
            environment_variables=self.environment_variables,
            id=self.id,
            identifier=self.identifier,
            name=self.name,
            org_id=self.org_id,
            project_id=self.project_id,
            tags=self.tags,
            terraform_variable_files=self.terraform_variable_files,
            terraform_variables=self.terraform_variables)


def get_infra_variable_set(connectors: Optional[Sequence[Union['GetInfraVariableSetConnectorArgs', 'GetInfraVariableSetConnectorArgsDict']]] = None,
                           environment_variables: Optional[Sequence[Union['GetInfraVariableSetEnvironmentVariableArgs', 'GetInfraVariableSetEnvironmentVariableArgsDict']]] = None,
                           identifier: Optional[str] = None,
                           name: Optional[str] = None,
                           org_id: Optional[str] = None,
                           project_id: Optional[str] = None,
                           terraform_variable_files: Optional[Sequence[Union['GetInfraVariableSetTerraformVariableFileArgs', 'GetInfraVariableSetTerraformVariableFileArgsDict']]] = None,
                           terraform_variables: Optional[Sequence[Union['GetInfraVariableSetTerraformVariableArgs', 'GetInfraVariableSetTerraformVariableArgsDict']]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInfraVariableSetResult:
    """
    Data source for retrieving Variable Sets.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_harness as harness

    test = harness.platform.get_infra_variable_set(identifier="identifier",
        org_id="org_id",
        project_id="project_id")
    ```


    :param Sequence[Union['GetInfraVariableSetConnectorArgs', 'GetInfraVariableSetConnectorArgsDict']] connectors: Provider connector configured on the variable set
    :param Sequence[Union['GetInfraVariableSetEnvironmentVariableArgs', 'GetInfraVariableSetEnvironmentVariableArgsDict']] environment_variables: Environment variables configured on the variable set
    :param str identifier: Identifier of the Variable Set
    :param str name: Name of the Variable Set
    :param str org_id: Organization Identifier
    :param str project_id: Project Identifier
    """
    __args__ = dict()
    __args__['connectors'] = connectors
    __args__['environmentVariables'] = environment_variables
    __args__['identifier'] = identifier
    __args__['name'] = name
    __args__['orgId'] = org_id
    __args__['projectId'] = project_id
    __args__['terraformVariableFiles'] = terraform_variable_files
    __args__['terraformVariables'] = terraform_variables
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('harness:platform/getInfraVariableSet:getInfraVariableSet', __args__, opts=opts, typ=GetInfraVariableSetResult).value

    return AwaitableGetInfraVariableSetResult(
        connectors=pulumi.get(__ret__, 'connectors'),
        description=pulumi.get(__ret__, 'description'),
        environment_variables=pulumi.get(__ret__, 'environment_variables'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        name=pulumi.get(__ret__, 'name'),
        org_id=pulumi.get(__ret__, 'org_id'),
        project_id=pulumi.get(__ret__, 'project_id'),
        tags=pulumi.get(__ret__, 'tags'),
        terraform_variable_files=pulumi.get(__ret__, 'terraform_variable_files'),
        terraform_variables=pulumi.get(__ret__, 'terraform_variables'))
def get_infra_variable_set_output(connectors: Optional[pulumi.Input[Optional[Sequence[Union['GetInfraVariableSetConnectorArgs', 'GetInfraVariableSetConnectorArgsDict']]]]] = None,
                                  environment_variables: Optional[pulumi.Input[Optional[Sequence[Union['GetInfraVariableSetEnvironmentVariableArgs', 'GetInfraVariableSetEnvironmentVariableArgsDict']]]]] = None,
                                  identifier: Optional[pulumi.Input[str]] = None,
                                  name: Optional[pulumi.Input[Optional[str]]] = None,
                                  org_id: Optional[pulumi.Input[Optional[str]]] = None,
                                  project_id: Optional[pulumi.Input[Optional[str]]] = None,
                                  terraform_variable_files: Optional[pulumi.Input[Optional[Sequence[Union['GetInfraVariableSetTerraformVariableFileArgs', 'GetInfraVariableSetTerraformVariableFileArgsDict']]]]] = None,
                                  terraform_variables: Optional[pulumi.Input[Optional[Sequence[Union['GetInfraVariableSetTerraformVariableArgs', 'GetInfraVariableSetTerraformVariableArgsDict']]]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInfraVariableSetResult]:
    """
    Data source for retrieving Variable Sets.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_harness as harness

    test = harness.platform.get_infra_variable_set(identifier="identifier",
        org_id="org_id",
        project_id="project_id")
    ```


    :param Sequence[Union['GetInfraVariableSetConnectorArgs', 'GetInfraVariableSetConnectorArgsDict']] connectors: Provider connector configured on the variable set
    :param Sequence[Union['GetInfraVariableSetEnvironmentVariableArgs', 'GetInfraVariableSetEnvironmentVariableArgsDict']] environment_variables: Environment variables configured on the variable set
    :param str identifier: Identifier of the Variable Set
    :param str name: Name of the Variable Set
    :param str org_id: Organization Identifier
    :param str project_id: Project Identifier
    """
    __args__ = dict()
    __args__['connectors'] = connectors
    __args__['environmentVariables'] = environment_variables
    __args__['identifier'] = identifier
    __args__['name'] = name
    __args__['orgId'] = org_id
    __args__['projectId'] = project_id
    __args__['terraformVariableFiles'] = terraform_variable_files
    __args__['terraformVariables'] = terraform_variables
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('harness:platform/getInfraVariableSet:getInfraVariableSet', __args__, opts=opts, typ=GetInfraVariableSetResult)
    return __ret__.apply(lambda __response__: GetInfraVariableSetResult(
        connectors=pulumi.get(__response__, 'connectors'),
        description=pulumi.get(__response__, 'description'),
        environment_variables=pulumi.get(__response__, 'environment_variables'),
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        name=pulumi.get(__response__, 'name'),
        org_id=pulumi.get(__response__, 'org_id'),
        project_id=pulumi.get(__response__, 'project_id'),
        tags=pulumi.get(__response__, 'tags'),
        terraform_variable_files=pulumi.get(__response__, 'terraform_variable_files'),
        terraform_variables=pulumi.get(__response__, 'terraform_variables')))
