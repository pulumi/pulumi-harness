# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetIacmDefaultPipelineResult',
    'AwaitableGetIacmDefaultPipelineResult',
    'get_iacm_default_pipeline',
    'get_iacm_default_pipeline_output',
]

@pulumi.output_type
class GetIacmDefaultPipelineResult:
    """
    A collection of values returned by getIacmDefaultPipeline.
    """
    def __init__(__self__, id=None, operation=None, org_id=None, pipeline=None, project_id=None, provisioner_type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if operation and not isinstance(operation, str):
            raise TypeError("Expected argument 'operation' to be a str")
        pulumi.set(__self__, "operation", operation)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if pipeline and not isinstance(pipeline, str):
            raise TypeError("Expected argument 'pipeline' to be a str")
        pulumi.set(__self__, "pipeline", pipeline)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if provisioner_type and not isinstance(provisioner_type, str):
            raise TypeError("Expected argument 'provisioner_type' to be a str")
        pulumi.set(__self__, "provisioner_type", provisioner_type)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def operation(self) -> builtins.str:
        """
        The operation associated with this default.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> builtins.str:
        """
        Organization identifier of the organization the default pipelines resides in.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def pipeline(self) -> builtins.str:
        """
        The pipeline associated with this default.
        """
        return pulumi.get(self, "pipeline")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> builtins.str:
        """
        Project identifier of the project the default pipelines resides in.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="provisionerType")
    def provisioner_type(self) -> builtins.str:
        """
        The provisioner associated with this default.
        """
        return pulumi.get(self, "provisioner_type")


class AwaitableGetIacmDefaultPipelineResult(GetIacmDefaultPipelineResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIacmDefaultPipelineResult(
            id=self.id,
            operation=self.operation,
            org_id=self.org_id,
            pipeline=self.pipeline,
            project_id=self.project_id,
            provisioner_type=self.provisioner_type)


def get_iacm_default_pipeline(operation: Optional[builtins.str] = None,
                              org_id: Optional[builtins.str] = None,
                              project_id: Optional[builtins.str] = None,
                              provisioner_type: Optional[builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIacmDefaultPipelineResult:
    """
    Data source for retrieving IACM default pipelines.


    :param builtins.str operation: The operation associated with this default.
    :param builtins.str org_id: Organization identifier of the organization the default pipelines resides in.
    :param builtins.str project_id: Project identifier of the project the default pipelines resides in.
    :param builtins.str provisioner_type: The provisioner associated with this default.
    """
    __args__ = dict()
    __args__['operation'] = operation
    __args__['orgId'] = org_id
    __args__['projectId'] = project_id
    __args__['provisionerType'] = provisioner_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('harness:platform/getIacmDefaultPipeline:getIacmDefaultPipeline', __args__, opts=opts, typ=GetIacmDefaultPipelineResult).value

    return AwaitableGetIacmDefaultPipelineResult(
        id=pulumi.get(__ret__, 'id'),
        operation=pulumi.get(__ret__, 'operation'),
        org_id=pulumi.get(__ret__, 'org_id'),
        pipeline=pulumi.get(__ret__, 'pipeline'),
        project_id=pulumi.get(__ret__, 'project_id'),
        provisioner_type=pulumi.get(__ret__, 'provisioner_type'))
def get_iacm_default_pipeline_output(operation: Optional[pulumi.Input[builtins.str]] = None,
                                     org_id: Optional[pulumi.Input[builtins.str]] = None,
                                     project_id: Optional[pulumi.Input[builtins.str]] = None,
                                     provisioner_type: Optional[pulumi.Input[builtins.str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIacmDefaultPipelineResult]:
    """
    Data source for retrieving IACM default pipelines.


    :param builtins.str operation: The operation associated with this default.
    :param builtins.str org_id: Organization identifier of the organization the default pipelines resides in.
    :param builtins.str project_id: Project identifier of the project the default pipelines resides in.
    :param builtins.str provisioner_type: The provisioner associated with this default.
    """
    __args__ = dict()
    __args__['operation'] = operation
    __args__['orgId'] = org_id
    __args__['projectId'] = project_id
    __args__['provisionerType'] = provisioner_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('harness:platform/getIacmDefaultPipeline:getIacmDefaultPipeline', __args__, opts=opts, typ=GetIacmDefaultPipelineResult)
    return __ret__.apply(lambda __response__: GetIacmDefaultPipelineResult(
        id=pulumi.get(__response__, 'id'),
        operation=pulumi.get(__response__, 'operation'),
        org_id=pulumi.get(__response__, 'org_id'),
        pipeline=pulumi.get(__response__, 'pipeline'),
        project_id=pulumi.get(__response__, 'project_id'),
        provisioner_type=pulumi.get(__response__, 'provisioner_type')))
