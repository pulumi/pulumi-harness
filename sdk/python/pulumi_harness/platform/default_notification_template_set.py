# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DefaultNotificationTemplateSetArgs', 'DefaultNotificationTemplateSet']

@pulumi.input_type
class DefaultNotificationTemplateSetArgs:
    def __init__(__self__, *,
                 event_template_configuration_sets: pulumi.Input[Sequence[pulumi.Input['DefaultNotificationTemplateSetEventTemplateConfigurationSetArgs']]],
                 identifier: pulumi.Input[_builtins.str],
                 notification_channel_type: pulumi.Input[_builtins.str],
                 notification_entity: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a DefaultNotificationTemplateSet resource.
        :param pulumi.Input[Sequence[pulumi.Input['DefaultNotificationTemplateSetEventTemplateConfigurationSetArgs']]] event_template_configuration_sets: Set of event-template configurations
        :param pulumi.Input[_builtins.str] identifier: Identifier of Default Notification Template Set
        :param pulumi.Input[_builtins.str] notification_channel_type: Type of channel (e.g. SLACK, EMAIL, etc.)
        :param pulumi.Input[_builtins.str] notification_entity: Type of the entity (e.g. PIPELINE, SERVICE, etc.)
        :param pulumi.Input[_builtins.str] description: Description for Default Notification Template Set
        :param pulumi.Input[_builtins.str] name: Name of Default Notification Template Set
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Key-value tags
        """
        pulumi.set(__self__, "event_template_configuration_sets", event_template_configuration_sets)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "notification_channel_type", notification_channel_type)
        pulumi.set(__self__, "notification_entity", notification_entity)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="eventTemplateConfigurationSets")
    def event_template_configuration_sets(self) -> pulumi.Input[Sequence[pulumi.Input['DefaultNotificationTemplateSetEventTemplateConfigurationSetArgs']]]:
        """
        Set of event-template configurations
        """
        return pulumi.get(self, "event_template_configuration_sets")

    @event_template_configuration_sets.setter
    def event_template_configuration_sets(self, value: pulumi.Input[Sequence[pulumi.Input['DefaultNotificationTemplateSetEventTemplateConfigurationSetArgs']]]):
        pulumi.set(self, "event_template_configuration_sets", value)

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[_builtins.str]:
        """
        Identifier of Default Notification Template Set
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "identifier", value)

    @_builtins.property
    @pulumi.getter(name="notificationChannelType")
    def notification_channel_type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of channel (e.g. SLACK, EMAIL, etc.)
        """
        return pulumi.get(self, "notification_channel_type")

    @notification_channel_type.setter
    def notification_channel_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "notification_channel_type", value)

    @_builtins.property
    @pulumi.getter(name="notificationEntity")
    def notification_entity(self) -> pulumi.Input[_builtins.str]:
        """
        Type of the entity (e.g. PIPELINE, SERVICE, etc.)
        """
        return pulumi.get(self, "notification_entity")

    @notification_entity.setter
    def notification_entity(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "notification_entity", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description for Default Notification Template Set
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of Default Notification Template Set
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Key-value tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _DefaultNotificationTemplateSetState:
    def __init__(__self__, *,
                 created: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 event_template_configuration_sets: Optional[pulumi.Input[Sequence[pulumi.Input['DefaultNotificationTemplateSetEventTemplateConfigurationSetArgs']]]] = None,
                 identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 last_modified: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_channel_type: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_entity: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering DefaultNotificationTemplateSet resources.
        :param pulumi.Input[_builtins.int] created: Timestamp when the default notification template set was created.
        :param pulumi.Input[_builtins.str] description: Description for Default Notification Template Set
        :param pulumi.Input[Sequence[pulumi.Input['DefaultNotificationTemplateSetEventTemplateConfigurationSetArgs']]] event_template_configuration_sets: Set of event-template configurations
        :param pulumi.Input[_builtins.str] identifier: Identifier of Default Notification Template Set
        :param pulumi.Input[_builtins.int] last_modified: Timestamp when the default notification template set was last modified.
        :param pulumi.Input[_builtins.str] name: Name of Default Notification Template Set
        :param pulumi.Input[_builtins.str] notification_channel_type: Type of channel (e.g. SLACK, EMAIL, etc.)
        :param pulumi.Input[_builtins.str] notification_entity: Type of the entity (e.g. PIPELINE, SERVICE, etc.)
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Key-value tags
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if event_template_configuration_sets is not None:
            pulumi.set(__self__, "event_template_configuration_sets", event_template_configuration_sets)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_channel_type is not None:
            pulumi.set(__self__, "notification_channel_type", notification_channel_type)
        if notification_entity is not None:
            pulumi.set(__self__, "notification_entity", notification_entity)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Timestamp when the default notification template set was created.
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "created", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description for Default Notification Template Set
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="eventTemplateConfigurationSets")
    def event_template_configuration_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DefaultNotificationTemplateSetEventTemplateConfigurationSetArgs']]]]:
        """
        Set of event-template configurations
        """
        return pulumi.get(self, "event_template_configuration_sets")

    @event_template_configuration_sets.setter
    def event_template_configuration_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DefaultNotificationTemplateSetEventTemplateConfigurationSetArgs']]]]):
        pulumi.set(self, "event_template_configuration_sets", value)

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identifier of Default Notification Template Set
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "identifier", value)

    @_builtins.property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Timestamp when the default notification template set was last modified.
        """
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "last_modified", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of Default Notification Template Set
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="notificationChannelType")
    def notification_channel_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of channel (e.g. SLACK, EMAIL, etc.)
        """
        return pulumi.get(self, "notification_channel_type")

    @notification_channel_type.setter
    def notification_channel_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notification_channel_type", value)

    @_builtins.property
    @pulumi.getter(name="notificationEntity")
    def notification_entity(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of the entity (e.g. PIPELINE, SERVICE, etc.)
        """
        return pulumi.get(self, "notification_entity")

    @notification_entity.setter
    def notification_entity(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notification_entity", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Key-value tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("harness:platform/defaultNotificationTemplateSet:DefaultNotificationTemplateSet")
class DefaultNotificationTemplateSet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 event_template_configuration_sets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DefaultNotificationTemplateSetEventTemplateConfigurationSetArgs', 'DefaultNotificationTemplateSetEventTemplateConfigurationSetArgsDict']]]]] = None,
                 identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_channel_type: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_entity: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Resource for creating a Harness Default Notification Template Set

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Description for Default Notification Template Set
        :param pulumi.Input[Sequence[pulumi.Input[Union['DefaultNotificationTemplateSetEventTemplateConfigurationSetArgs', 'DefaultNotificationTemplateSetEventTemplateConfigurationSetArgsDict']]]] event_template_configuration_sets: Set of event-template configurations
        :param pulumi.Input[_builtins.str] identifier: Identifier of Default Notification Template Set
        :param pulumi.Input[_builtins.str] name: Name of Default Notification Template Set
        :param pulumi.Input[_builtins.str] notification_channel_type: Type of channel (e.g. SLACK, EMAIL, etc.)
        :param pulumi.Input[_builtins.str] notification_entity: Type of the entity (e.g. PIPELINE, SERVICE, etc.)
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Key-value tags
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DefaultNotificationTemplateSetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource for creating a Harness Default Notification Template Set

        :param str resource_name: The name of the resource.
        :param DefaultNotificationTemplateSetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DefaultNotificationTemplateSetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 event_template_configuration_sets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DefaultNotificationTemplateSetEventTemplateConfigurationSetArgs', 'DefaultNotificationTemplateSetEventTemplateConfigurationSetArgsDict']]]]] = None,
                 identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_channel_type: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_entity: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DefaultNotificationTemplateSetArgs.__new__(DefaultNotificationTemplateSetArgs)

            __props__.__dict__["description"] = description
            if event_template_configuration_sets is None and not opts.urn:
                raise TypeError("Missing required property 'event_template_configuration_sets'")
            __props__.__dict__["event_template_configuration_sets"] = event_template_configuration_sets
            if identifier is None and not opts.urn:
                raise TypeError("Missing required property 'identifier'")
            __props__.__dict__["identifier"] = identifier
            __props__.__dict__["name"] = name
            if notification_channel_type is None and not opts.urn:
                raise TypeError("Missing required property 'notification_channel_type'")
            __props__.__dict__["notification_channel_type"] = notification_channel_type
            if notification_entity is None and not opts.urn:
                raise TypeError("Missing required property 'notification_entity'")
            __props__.__dict__["notification_entity"] = notification_entity
            __props__.__dict__["tags"] = tags
            __props__.__dict__["created"] = None
            __props__.__dict__["last_modified"] = None
        super(DefaultNotificationTemplateSet, __self__).__init__(
            'harness:platform/defaultNotificationTemplateSet:DefaultNotificationTemplateSet',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created: Optional[pulumi.Input[_builtins.int]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            event_template_configuration_sets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DefaultNotificationTemplateSetEventTemplateConfigurationSetArgs', 'DefaultNotificationTemplateSetEventTemplateConfigurationSetArgsDict']]]]] = None,
            identifier: Optional[pulumi.Input[_builtins.str]] = None,
            last_modified: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            notification_channel_type: Optional[pulumi.Input[_builtins.str]] = None,
            notification_entity: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None) -> 'DefaultNotificationTemplateSet':
        """
        Get an existing DefaultNotificationTemplateSet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] created: Timestamp when the default notification template set was created.
        :param pulumi.Input[_builtins.str] description: Description for Default Notification Template Set
        :param pulumi.Input[Sequence[pulumi.Input[Union['DefaultNotificationTemplateSetEventTemplateConfigurationSetArgs', 'DefaultNotificationTemplateSetEventTemplateConfigurationSetArgsDict']]]] event_template_configuration_sets: Set of event-template configurations
        :param pulumi.Input[_builtins.str] identifier: Identifier of Default Notification Template Set
        :param pulumi.Input[_builtins.int] last_modified: Timestamp when the default notification template set was last modified.
        :param pulumi.Input[_builtins.str] name: Name of Default Notification Template Set
        :param pulumi.Input[_builtins.str] notification_channel_type: Type of channel (e.g. SLACK, EMAIL, etc.)
        :param pulumi.Input[_builtins.str] notification_entity: Type of the entity (e.g. PIPELINE, SERVICE, etc.)
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Key-value tags
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DefaultNotificationTemplateSetState.__new__(_DefaultNotificationTemplateSetState)

        __props__.__dict__["created"] = created
        __props__.__dict__["description"] = description
        __props__.__dict__["event_template_configuration_sets"] = event_template_configuration_sets
        __props__.__dict__["identifier"] = identifier
        __props__.__dict__["last_modified"] = last_modified
        __props__.__dict__["name"] = name
        __props__.__dict__["notification_channel_type"] = notification_channel_type
        __props__.__dict__["notification_entity"] = notification_entity
        __props__.__dict__["tags"] = tags
        return DefaultNotificationTemplateSet(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def created(self) -> pulumi.Output[_builtins.int]:
        """
        Timestamp when the default notification template set was created.
        """
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description for Default Notification Template Set
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="eventTemplateConfigurationSets")
    def event_template_configuration_sets(self) -> pulumi.Output[Sequence['outputs.DefaultNotificationTemplateSetEventTemplateConfigurationSet']]:
        """
        Set of event-template configurations
        """
        return pulumi.get(self, "event_template_configuration_sets")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> pulumi.Output[_builtins.str]:
        """
        Identifier of Default Notification Template Set
        """
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> pulumi.Output[_builtins.int]:
        """
        Timestamp when the default notification template set was last modified.
        """
        return pulumi.get(self, "last_modified")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of Default Notification Template Set
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="notificationChannelType")
    def notification_channel_type(self) -> pulumi.Output[_builtins.str]:
        """
        Type of channel (e.g. SLACK, EMAIL, etc.)
        """
        return pulumi.get(self, "notification_channel_type")

    @_builtins.property
    @pulumi.getter(name="notificationEntity")
    def notification_entity(self) -> pulumi.Output[_builtins.str]:
        """
        Type of the entity (e.g. PIPELINE, SERVICE, etc.)
        """
        return pulumi.get(self, "notification_entity")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Key-value tags
        """
        return pulumi.get(self, "tags")

