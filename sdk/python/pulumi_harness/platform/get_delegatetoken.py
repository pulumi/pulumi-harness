# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetDelegatetokenResult',
    'AwaitableGetDelegatetokenResult',
    'get_delegatetoken',
    'get_delegatetoken_output',
]

@pulumi.output_type
class GetDelegatetokenResult:
    """
    A collection of values returned by getDelegatetoken.
    """
    def __init__(__self__, account_id=None, created_at=None, id=None, name=None, org_id=None, project_id=None, token_status=None, value=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if created_at and not isinstance(created_at, int):
            raise TypeError("Expected argument 'created_at' to be a int")
        pulumi.set(__self__, "created_at", created_at)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if token_status and not isinstance(token_status, str):
            raise TypeError("Expected argument 'token_status' to be a str")
        pulumi.set(__self__, "token_status", token_status)
        if value and not isinstance(value, str):
            raise TypeError("Expected argument 'value' to be a str")
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> builtins.str:
        """
        Account Identifier for the Entity
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.int]:
        """
        Time when the delegate token is created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[builtins.str]:
        """
        Unique identifier of the organization.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[builtins.str]:
        """
        Unique identifier of the project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="tokenStatus")
    def token_status(self) -> Optional[builtins.str]:
        """
        Status of Delegate Token (ACTIVE or REVOKED). If left empty both active and revoked tokens will be assumed.
        """
        return pulumi.get(self, "token_status")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        Value of the delegate Token
        """
        return pulumi.get(self, "value")


class AwaitableGetDelegatetokenResult(GetDelegatetokenResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDelegatetokenResult(
            account_id=self.account_id,
            created_at=self.created_at,
            id=self.id,
            name=self.name,
            org_id=self.org_id,
            project_id=self.project_id,
            token_status=self.token_status,
            value=self.value)


def get_delegatetoken(account_id: Optional[builtins.str] = None,
                      created_at: Optional[builtins.int] = None,
                      name: Optional[builtins.str] = None,
                      org_id: Optional[builtins.str] = None,
                      project_id: Optional[builtins.str] = None,
                      token_status: Optional[builtins.str] = None,
                      value: Optional[builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDelegatetokenResult:
    """
    Data Source for retrieving delegate tokens.


    :param builtins.str account_id: Account Identifier for the Entity
    :param builtins.int created_at: Time when the delegate token is created.
    :param builtins.str name: Name of the resource.
    :param builtins.str org_id: Unique identifier of the organization.
    :param builtins.str project_id: Unique identifier of the project.
    :param builtins.str token_status: Status of Delegate Token (ACTIVE or REVOKED). If left empty both active and revoked tokens will be assumed.
    :param builtins.str value: Value of the delegate Token
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['createdAt'] = created_at
    __args__['name'] = name
    __args__['orgId'] = org_id
    __args__['projectId'] = project_id
    __args__['tokenStatus'] = token_status
    __args__['value'] = value
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('harness:platform/getDelegatetoken:getDelegatetoken', __args__, opts=opts, typ=GetDelegatetokenResult).value

    return AwaitableGetDelegatetokenResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        created_at=pulumi.get(__ret__, 'created_at'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        org_id=pulumi.get(__ret__, 'org_id'),
        project_id=pulumi.get(__ret__, 'project_id'),
        token_status=pulumi.get(__ret__, 'token_status'),
        value=pulumi.get(__ret__, 'value'))
def get_delegatetoken_output(account_id: Optional[pulumi.Input[builtins.str]] = None,
                             created_at: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                             name: Optional[pulumi.Input[builtins.str]] = None,
                             org_id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                             project_id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                             token_status: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                             value: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDelegatetokenResult]:
    """
    Data Source for retrieving delegate tokens.


    :param builtins.str account_id: Account Identifier for the Entity
    :param builtins.int created_at: Time when the delegate token is created.
    :param builtins.str name: Name of the resource.
    :param builtins.str org_id: Unique identifier of the organization.
    :param builtins.str project_id: Unique identifier of the project.
    :param builtins.str token_status: Status of Delegate Token (ACTIVE or REVOKED). If left empty both active and revoked tokens will be assumed.
    :param builtins.str value: Value of the delegate Token
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['createdAt'] = created_at
    __args__['name'] = name
    __args__['orgId'] = org_id
    __args__['projectId'] = project_id
    __args__['tokenStatus'] = token_status
    __args__['value'] = value
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('harness:platform/getDelegatetoken:getDelegatetoken', __args__, opts=opts, typ=GetDelegatetokenResult)
    return __ret__.apply(lambda __response__: GetDelegatetokenResult(
        account_id=pulumi.get(__response__, 'account_id'),
        created_at=pulumi.get(__response__, 'created_at'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        org_id=pulumi.get(__response__, 'org_id'),
        project_id=pulumi.get(__response__, 'project_id'),
        token_status=pulumi.get(__response__, 'token_status'),
        value=pulumi.get(__response__, 'value')))
