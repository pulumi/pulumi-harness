# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CentralNotificationRuleArgs', 'CentralNotificationRule']

@pulumi.input_type
class CentralNotificationRuleArgs:
    def __init__(__self__, *,
                 identifier: pulumi.Input[_builtins.str],
                 notification_channel_refs: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 notification_conditions: pulumi.Input[Sequence[pulumi.Input['CentralNotificationRuleNotificationConditionArgs']]],
                 project: pulumi.Input[_builtins.str],
                 custom_notification_template_ref: Optional[pulumi.Input['CentralNotificationRuleCustomNotificationTemplateRefArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 org: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CentralNotificationRule resource.
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "notification_channel_refs", notification_channel_refs)
        pulumi.set(__self__, "notification_conditions", notification_conditions)
        pulumi.set(__self__, "project", project)
        if custom_notification_template_ref is not None:
            pulumi.set(__self__, "custom_notification_template_ref", custom_notification_template_ref)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "identifier", value)

    @_builtins.property
    @pulumi.getter(name="notificationChannelRefs")
    def notification_channel_refs(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "notification_channel_refs")

    @notification_channel_refs.setter
    def notification_channel_refs(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "notification_channel_refs", value)

    @_builtins.property
    @pulumi.getter(name="notificationConditions")
    def notification_conditions(self) -> pulumi.Input[Sequence[pulumi.Input['CentralNotificationRuleNotificationConditionArgs']]]:
        return pulumi.get(self, "notification_conditions")

    @notification_conditions.setter
    def notification_conditions(self, value: pulumi.Input[Sequence[pulumi.Input['CentralNotificationRuleNotificationConditionArgs']]]):
        pulumi.set(self, "notification_conditions", value)

    @_builtins.property
    @pulumi.getter
    def project(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project", value)

    @_builtins.property
    @pulumi.getter(name="customNotificationTemplateRef")
    def custom_notification_template_ref(self) -> Optional[pulumi.Input['CentralNotificationRuleCustomNotificationTemplateRefArgs']]:
        return pulumi.get(self, "custom_notification_template_ref")

    @custom_notification_template_ref.setter
    def custom_notification_template_ref(self, value: Optional[pulumi.Input['CentralNotificationRuleCustomNotificationTemplateRefArgs']]):
        pulumi.set(self, "custom_notification_template_ref", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "org", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _CentralNotificationRuleState:
    def __init__(__self__, *,
                 account: Optional[pulumi.Input[_builtins.str]] = None,
                 created: Optional[pulumi.Input[_builtins.int]] = None,
                 custom_notification_template_ref: Optional[pulumi.Input['CentralNotificationRuleCustomNotificationTemplateRefArgs']] = None,
                 identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 last_modified: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_channel_refs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 notification_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['CentralNotificationRuleNotificationConditionArgs']]]] = None,
                 org: Optional[pulumi.Input[_builtins.str]] = None,
                 project: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CentralNotificationRule resources.
        :param pulumi.Input[_builtins.str] account: Account identifier associated with this notification channel.
        :param pulumi.Input[_builtins.int] created: Timestamp when the notification rule was created.
        :param pulumi.Input[_builtins.int] last_modified: Timestamp when the notification rule was last modified.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if custom_notification_template_ref is not None:
            pulumi.set(__self__, "custom_notification_template_ref", custom_notification_template_ref)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_channel_refs is not None:
            pulumi.set(__self__, "notification_channel_refs", notification_channel_refs)
        if notification_conditions is not None:
            pulumi.set(__self__, "notification_conditions", notification_conditions)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Account identifier associated with this notification channel.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account", value)

    @_builtins.property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Timestamp when the notification rule was created.
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "created", value)

    @_builtins.property
    @pulumi.getter(name="customNotificationTemplateRef")
    def custom_notification_template_ref(self) -> Optional[pulumi.Input['CentralNotificationRuleCustomNotificationTemplateRefArgs']]:
        return pulumi.get(self, "custom_notification_template_ref")

    @custom_notification_template_ref.setter
    def custom_notification_template_ref(self, value: Optional[pulumi.Input['CentralNotificationRuleCustomNotificationTemplateRefArgs']]):
        pulumi.set(self, "custom_notification_template_ref", value)

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "identifier", value)

    @_builtins.property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Timestamp when the notification rule was last modified.
        """
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "last_modified", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="notificationChannelRefs")
    def notification_channel_refs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "notification_channel_refs")

    @notification_channel_refs.setter
    def notification_channel_refs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "notification_channel_refs", value)

    @_builtins.property
    @pulumi.getter(name="notificationConditions")
    def notification_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CentralNotificationRuleNotificationConditionArgs']]]]:
        return pulumi.get(self, "notification_conditions")

    @notification_conditions.setter
    def notification_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CentralNotificationRuleNotificationConditionArgs']]]]):
        pulumi.set(self, "notification_conditions", value)

    @_builtins.property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "org", value)

    @_builtins.property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("harness:platform/centralNotificationRule:CentralNotificationRule")
class CentralNotificationRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_notification_template_ref: Optional[pulumi.Input[Union['CentralNotificationRuleCustomNotificationTemplateRefArgs', 'CentralNotificationRuleCustomNotificationTemplateRefArgsDict']]] = None,
                 identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_channel_refs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 notification_conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CentralNotificationRuleNotificationConditionArgs', 'CentralNotificationRuleNotificationConditionArgsDict']]]]] = None,
                 org: Optional[pulumi.Input[_builtins.str]] = None,
                 project: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Resource for creating a Harness Notification Rule

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CentralNotificationRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource for creating a Harness Notification Rule

        :param str resource_name: The name of the resource.
        :param CentralNotificationRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CentralNotificationRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_notification_template_ref: Optional[pulumi.Input[Union['CentralNotificationRuleCustomNotificationTemplateRefArgs', 'CentralNotificationRuleCustomNotificationTemplateRefArgsDict']]] = None,
                 identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_channel_refs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 notification_conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CentralNotificationRuleNotificationConditionArgs', 'CentralNotificationRuleNotificationConditionArgsDict']]]]] = None,
                 org: Optional[pulumi.Input[_builtins.str]] = None,
                 project: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CentralNotificationRuleArgs.__new__(CentralNotificationRuleArgs)

            __props__.__dict__["custom_notification_template_ref"] = custom_notification_template_ref
            if identifier is None and not opts.urn:
                raise TypeError("Missing required property 'identifier'")
            __props__.__dict__["identifier"] = identifier
            __props__.__dict__["name"] = name
            if notification_channel_refs is None and not opts.urn:
                raise TypeError("Missing required property 'notification_channel_refs'")
            __props__.__dict__["notification_channel_refs"] = notification_channel_refs
            if notification_conditions is None and not opts.urn:
                raise TypeError("Missing required property 'notification_conditions'")
            __props__.__dict__["notification_conditions"] = notification_conditions
            __props__.__dict__["org"] = org
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            __props__.__dict__["status"] = status
            __props__.__dict__["account"] = None
            __props__.__dict__["created"] = None
            __props__.__dict__["last_modified"] = None
        super(CentralNotificationRule, __self__).__init__(
            'harness:platform/centralNotificationRule:CentralNotificationRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account: Optional[pulumi.Input[_builtins.str]] = None,
            created: Optional[pulumi.Input[_builtins.int]] = None,
            custom_notification_template_ref: Optional[pulumi.Input[Union['CentralNotificationRuleCustomNotificationTemplateRefArgs', 'CentralNotificationRuleCustomNotificationTemplateRefArgsDict']]] = None,
            identifier: Optional[pulumi.Input[_builtins.str]] = None,
            last_modified: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            notification_channel_refs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            notification_conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CentralNotificationRuleNotificationConditionArgs', 'CentralNotificationRuleNotificationConditionArgsDict']]]]] = None,
            org: Optional[pulumi.Input[_builtins.str]] = None,
            project: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'CentralNotificationRule':
        """
        Get an existing CentralNotificationRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account: Account identifier associated with this notification channel.
        :param pulumi.Input[_builtins.int] created: Timestamp when the notification rule was created.
        :param pulumi.Input[_builtins.int] last_modified: Timestamp when the notification rule was last modified.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CentralNotificationRuleState.__new__(_CentralNotificationRuleState)

        __props__.__dict__["account"] = account
        __props__.__dict__["created"] = created
        __props__.__dict__["custom_notification_template_ref"] = custom_notification_template_ref
        __props__.__dict__["identifier"] = identifier
        __props__.__dict__["last_modified"] = last_modified
        __props__.__dict__["name"] = name
        __props__.__dict__["notification_channel_refs"] = notification_channel_refs
        __props__.__dict__["notification_conditions"] = notification_conditions
        __props__.__dict__["org"] = org
        __props__.__dict__["project"] = project
        __props__.__dict__["status"] = status
        return CentralNotificationRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def account(self) -> pulumi.Output[_builtins.str]:
        """
        Account identifier associated with this notification channel.
        """
        return pulumi.get(self, "account")

    @_builtins.property
    @pulumi.getter
    def created(self) -> pulumi.Output[_builtins.int]:
        """
        Timestamp when the notification rule was created.
        """
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter(name="customNotificationTemplateRef")
    def custom_notification_template_ref(self) -> pulumi.Output[Optional['outputs.CentralNotificationRuleCustomNotificationTemplateRef']]:
        return pulumi.get(self, "custom_notification_template_ref")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> pulumi.Output[_builtins.int]:
        """
        Timestamp when the notification rule was last modified.
        """
        return pulumi.get(self, "last_modified")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="notificationChannelRefs")
    def notification_channel_refs(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "notification_channel_refs")

    @_builtins.property
    @pulumi.getter(name="notificationConditions")
    def notification_conditions(self) -> pulumi.Output[Sequence['outputs.CentralNotificationRuleNotificationCondition']]:
        return pulumi.get(self, "notification_conditions")

    @_builtins.property
    @pulumi.getter
    def org(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "org")

    @_builtins.property
    @pulumi.getter
    def project(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "project")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "status")

