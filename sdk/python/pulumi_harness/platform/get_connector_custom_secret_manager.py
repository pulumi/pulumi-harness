# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetConnectorCustomSecretManagerResult',
    'AwaitableGetConnectorCustomSecretManagerResult',
    'get_connector_custom_secret_manager',
    'get_connector_custom_secret_manager_output',
]

@pulumi.output_type
class GetConnectorCustomSecretManagerResult:
    """
    A collection of values returned by getConnectorCustomSecretManager.
    """
    def __init__(__self__, delegate_selectors=None, description=None, id=None, identifier=None, name=None, on_delegate=None, org_id=None, project_id=None, ssh_secret_ref=None, tags=None, target_host=None, template_inputs=None, template_ref=None, timeout=None, type=None, version_label=None, working_directory=None):
        if delegate_selectors and not isinstance(delegate_selectors, list):
            raise TypeError("Expected argument 'delegate_selectors' to be a list")
        pulumi.set(__self__, "delegate_selectors", delegate_selectors)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if on_delegate and not isinstance(on_delegate, bool):
            raise TypeError("Expected argument 'on_delegate' to be a bool")
        pulumi.set(__self__, "on_delegate", on_delegate)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if ssh_secret_ref and not isinstance(ssh_secret_ref, str):
            raise TypeError("Expected argument 'ssh_secret_ref' to be a str")
        pulumi.set(__self__, "ssh_secret_ref", ssh_secret_ref)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if target_host and not isinstance(target_host, str):
            raise TypeError("Expected argument 'target_host' to be a str")
        pulumi.set(__self__, "target_host", target_host)
        if template_inputs and not isinstance(template_inputs, list):
            raise TypeError("Expected argument 'template_inputs' to be a list")
        pulumi.set(__self__, "template_inputs", template_inputs)
        if template_ref and not isinstance(template_ref, str):
            raise TypeError("Expected argument 'template_ref' to be a str")
        pulumi.set(__self__, "template_ref", template_ref)
        if timeout and not isinstance(timeout, int):
            raise TypeError("Expected argument 'timeout' to be a int")
        pulumi.set(__self__, "timeout", timeout)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if version_label and not isinstance(version_label, str):
            raise TypeError("Expected argument 'version_label' to be a str")
        pulumi.set(__self__, "version_label", version_label)
        if working_directory and not isinstance(working_directory, str):
            raise TypeError("Expected argument 'working_directory' to be a str")
        pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="delegateSelectors")
    def delegate_selectors(self) -> Optional[Sequence[builtins.str]]:
        """
        Tags to filter delegates for connection.
        """
        return pulumi.get(self, "delegate_selectors")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        : A brief description of what the resource does or is used for.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identifier(self) -> builtins.str:
        """
        : Unique identifier of the resource.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        : Name of the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="onDelegate")
    def on_delegate(self) -> builtins.bool:
        """
        : Specifies whether the secrets manager runs on a Harness delegate.
        """
        return pulumi.get(self, "on_delegate")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="sshSecretRef")
    def ssh_secret_ref(self) -> builtins.str:
        """
        : Reference to the Harness secret containing SSH credentials for the target host. Required if `on_delegate` is set to false.
        """
        return pulumi.get(self, "ssh_secret_ref")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[builtins.str]:
        """
        : Tags to associate with the resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetHost")
    def target_host(self) -> builtins.str:
        """
        : Host address where secrets will be managed. Required if `on_delegate` is set to false.
        """
        return pulumi.get(self, "target_host")

    @property
    @pulumi.getter(name="templateInputs")
    def template_inputs(self) -> Sequence['outputs.GetConnectorCustomSecretManagerTemplateInputResult']:
        return pulumi.get(self, "template_inputs")

    @property
    @pulumi.getter(name="templateRef")
    def template_ref(self) -> builtins.str:
        """
        : Reference to the template used for managing secrets.
        """
        return pulumi.get(self, "template_ref")

    @property
    @pulumi.getter
    def timeout(self) -> builtins.int:
        """
        : Timeout in seconds for secrets management operations.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        : Type of the custom secrets manager, typically set to `CustomSecretManager`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="versionLabel")
    def version_label(self) -> builtins.str:
        """
        : Version identifier of the secrets management template.
        """
        return pulumi.get(self, "version_label")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> builtins.str:
        """
        : Directory path on the target host where secrets management tasks are performed. Required if `on_delegate` is set to false.
        """
        return pulumi.get(self, "working_directory")


class AwaitableGetConnectorCustomSecretManagerResult(GetConnectorCustomSecretManagerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectorCustomSecretManagerResult(
            delegate_selectors=self.delegate_selectors,
            description=self.description,
            id=self.id,
            identifier=self.identifier,
            name=self.name,
            on_delegate=self.on_delegate,
            org_id=self.org_id,
            project_id=self.project_id,
            ssh_secret_ref=self.ssh_secret_ref,
            tags=self.tags,
            target_host=self.target_host,
            template_inputs=self.template_inputs,
            template_ref=self.template_ref,
            timeout=self.timeout,
            type=self.type,
            version_label=self.version_label,
            working_directory=self.working_directory)


def get_connector_custom_secret_manager(delegate_selectors: Optional[Sequence[builtins.str]] = None,
                                        identifier: Optional[builtins.str] = None,
                                        name: Optional[builtins.str] = None,
                                        org_id: Optional[builtins.str] = None,
                                        project_id: Optional[builtins.str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConnectorCustomSecretManagerResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_harness as harness

    example = harness.platform.get_connector_custom_secret_manager(identifier="identifier")
    ```


    :param Sequence[builtins.str] delegate_selectors: Tags to filter delegates for connection.
    :param builtins.str identifier: : Unique identifier of the resource.
    :param builtins.str name: : Name of the resource.
    """
    __args__ = dict()
    __args__['delegateSelectors'] = delegate_selectors
    __args__['identifier'] = identifier
    __args__['name'] = name
    __args__['orgId'] = org_id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('harness:platform/getConnectorCustomSecretManager:getConnectorCustomSecretManager', __args__, opts=opts, typ=GetConnectorCustomSecretManagerResult).value

    return AwaitableGetConnectorCustomSecretManagerResult(
        delegate_selectors=pulumi.get(__ret__, 'delegate_selectors'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        name=pulumi.get(__ret__, 'name'),
        on_delegate=pulumi.get(__ret__, 'on_delegate'),
        org_id=pulumi.get(__ret__, 'org_id'),
        project_id=pulumi.get(__ret__, 'project_id'),
        ssh_secret_ref=pulumi.get(__ret__, 'ssh_secret_ref'),
        tags=pulumi.get(__ret__, 'tags'),
        target_host=pulumi.get(__ret__, 'target_host'),
        template_inputs=pulumi.get(__ret__, 'template_inputs'),
        template_ref=pulumi.get(__ret__, 'template_ref'),
        timeout=pulumi.get(__ret__, 'timeout'),
        type=pulumi.get(__ret__, 'type'),
        version_label=pulumi.get(__ret__, 'version_label'),
        working_directory=pulumi.get(__ret__, 'working_directory'))
def get_connector_custom_secret_manager_output(delegate_selectors: Optional[pulumi.Input[Optional[Sequence[builtins.str]]]] = None,
                                               identifier: Optional[pulumi.Input[builtins.str]] = None,
                                               name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                               org_id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                               project_id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetConnectorCustomSecretManagerResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_harness as harness

    example = harness.platform.get_connector_custom_secret_manager(identifier="identifier")
    ```


    :param Sequence[builtins.str] delegate_selectors: Tags to filter delegates for connection.
    :param builtins.str identifier: : Unique identifier of the resource.
    :param builtins.str name: : Name of the resource.
    """
    __args__ = dict()
    __args__['delegateSelectors'] = delegate_selectors
    __args__['identifier'] = identifier
    __args__['name'] = name
    __args__['orgId'] = org_id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('harness:platform/getConnectorCustomSecretManager:getConnectorCustomSecretManager', __args__, opts=opts, typ=GetConnectorCustomSecretManagerResult)
    return __ret__.apply(lambda __response__: GetConnectorCustomSecretManagerResult(
        delegate_selectors=pulumi.get(__response__, 'delegate_selectors'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        name=pulumi.get(__response__, 'name'),
        on_delegate=pulumi.get(__response__, 'on_delegate'),
        org_id=pulumi.get(__response__, 'org_id'),
        project_id=pulumi.get(__response__, 'project_id'),
        ssh_secret_ref=pulumi.get(__response__, 'ssh_secret_ref'),
        tags=pulumi.get(__response__, 'tags'),
        target_host=pulumi.get(__response__, 'target_host'),
        template_inputs=pulumi.get(__response__, 'template_inputs'),
        template_ref=pulumi.get(__response__, 'template_ref'),
        timeout=pulumi.get(__response__, 'timeout'),
        type=pulumi.get(__response__, 'type'),
        version_label=pulumi.get(__response__, 'version_label'),
        working_directory=pulumi.get(__response__, 'working_directory')))
