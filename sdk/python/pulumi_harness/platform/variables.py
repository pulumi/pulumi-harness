# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VariablesArgs', 'Variables']

@pulumi.input_type
class VariablesArgs:
    def __init__(__self__, *,
                 identifier: pulumi.Input[builtins.str],
                 spec: pulumi.Input['VariablesSpecArgs'],
                 type: pulumi.Input[builtins.str],
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 org_id: Optional[pulumi.Input[builtins.str]] = None,
                 project_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Variables resource.
        :param pulumi.Input[builtins.str] identifier: Unique identifier of the resource
        :param pulumi.Input['VariablesSpecArgs'] spec: List of Spec Fields.
        :param pulumi.Input[builtins.str] type: Type of Variable
        :param pulumi.Input[builtins.str] description: Description of the entity
        :param pulumi.Input[builtins.str] name: Name of the Variable
        :param pulumi.Input[builtins.str] org_id: Organization Identifier for the Entity
        :param pulumi.Input[builtins.str] project_id: Project Identifier for the Entity
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "spec", spec)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[builtins.str]:
        """
        Unique identifier of the resource
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Input['VariablesSpecArgs']:
        """
        List of Spec Fields.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input['VariablesSpecArgs']):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        Type of Variable
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Description of the entity
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the Variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Organization Identifier for the Entity
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Project Identifier for the Entity
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class _VariablesState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 identifier: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 org_id: Optional[pulumi.Input[builtins.str]] = None,
                 project_id: Optional[pulumi.Input[builtins.str]] = None,
                 spec: Optional[pulumi.Input['VariablesSpecArgs']] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Variables resources.
        :param pulumi.Input[builtins.str] description: Description of the entity
        :param pulumi.Input[builtins.str] identifier: Unique identifier of the resource
        :param pulumi.Input[builtins.str] name: Name of the Variable
        :param pulumi.Input[builtins.str] org_id: Organization Identifier for the Entity
        :param pulumi.Input[builtins.str] project_id: Project Identifier for the Entity
        :param pulumi.Input['VariablesSpecArgs'] spec: List of Spec Fields.
        :param pulumi.Input[builtins.str] type: Type of Variable
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Description of the entity
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Unique identifier of the resource
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the Variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Organization Identifier for the Entity
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Project Identifier for the Entity
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['VariablesSpecArgs']]:
        """
        List of Spec Fields.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['VariablesSpecArgs']]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Type of Variable
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


class Variables(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 identifier: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 org_id: Optional[pulumi.Input[builtins.str]] = None,
                 project_id: Optional[pulumi.Input[builtins.str]] = None,
                 spec: Optional[pulumi.Input[Union['VariablesSpecArgs', 'VariablesSpecArgsDict']]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_harness as harness

        test = harness.platform.Variables("test",
            identifier="identifier",
            name="name",
            org_id="org_id",
            project_id="project_id",
            type="String",
            spec={
                "value_type": "FIXED",
                "fixed_value": "fixedValue",
            })
        ```

        ## Import

        Import account level variables

        ```sh
        $ pulumi import harness:platform/variables:Variables example <variable_id>
        ```

        Import org level variables

        ```sh
        $ pulumi import harness:platform/variables:Variables example <ord_id>/<variable_id>
        ```

        Import project level variables

        ```sh
        $ pulumi import harness:platform/variables:Variables example <org_id>/<project_id>/<variable_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: Description of the entity
        :param pulumi.Input[builtins.str] identifier: Unique identifier of the resource
        :param pulumi.Input[builtins.str] name: Name of the Variable
        :param pulumi.Input[builtins.str] org_id: Organization Identifier for the Entity
        :param pulumi.Input[builtins.str] project_id: Project Identifier for the Entity
        :param pulumi.Input[Union['VariablesSpecArgs', 'VariablesSpecArgsDict']] spec: List of Spec Fields.
        :param pulumi.Input[builtins.str] type: Type of Variable
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VariablesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_harness as harness

        test = harness.platform.Variables("test",
            identifier="identifier",
            name="name",
            org_id="org_id",
            project_id="project_id",
            type="String",
            spec={
                "value_type": "FIXED",
                "fixed_value": "fixedValue",
            })
        ```

        ## Import

        Import account level variables

        ```sh
        $ pulumi import harness:platform/variables:Variables example <variable_id>
        ```

        Import org level variables

        ```sh
        $ pulumi import harness:platform/variables:Variables example <ord_id>/<variable_id>
        ```

        Import project level variables

        ```sh
        $ pulumi import harness:platform/variables:Variables example <org_id>/<project_id>/<variable_id>
        ```

        :param str resource_name: The name of the resource.
        :param VariablesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VariablesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 identifier: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 org_id: Optional[pulumi.Input[builtins.str]] = None,
                 project_id: Optional[pulumi.Input[builtins.str]] = None,
                 spec: Optional[pulumi.Input[Union['VariablesSpecArgs', 'VariablesSpecArgsDict']]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VariablesArgs.__new__(VariablesArgs)

            __props__.__dict__["description"] = description
            if identifier is None and not opts.urn:
                raise TypeError("Missing required property 'identifier'")
            __props__.__dict__["identifier"] = identifier
            __props__.__dict__["name"] = name
            __props__.__dict__["org_id"] = org_id
            __props__.__dict__["project_id"] = project_id
            if spec is None and not opts.urn:
                raise TypeError("Missing required property 'spec'")
            __props__.__dict__["spec"] = spec
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(Variables, __self__).__init__(
            'harness:platform/variables:Variables',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            identifier: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            org_id: Optional[pulumi.Input[builtins.str]] = None,
            project_id: Optional[pulumi.Input[builtins.str]] = None,
            spec: Optional[pulumi.Input[Union['VariablesSpecArgs', 'VariablesSpecArgsDict']]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None) -> 'Variables':
        """
        Get an existing Variables resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: Description of the entity
        :param pulumi.Input[builtins.str] identifier: Unique identifier of the resource
        :param pulumi.Input[builtins.str] name: Name of the Variable
        :param pulumi.Input[builtins.str] org_id: Organization Identifier for the Entity
        :param pulumi.Input[builtins.str] project_id: Project Identifier for the Entity
        :param pulumi.Input[Union['VariablesSpecArgs', 'VariablesSpecArgsDict']] spec: List of Spec Fields.
        :param pulumi.Input[builtins.str] type: Type of Variable
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VariablesState.__new__(_VariablesState)

        __props__.__dict__["description"] = description
        __props__.__dict__["identifier"] = identifier
        __props__.__dict__["name"] = name
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["spec"] = spec
        __props__.__dict__["type"] = type
        return Variables(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Description of the entity
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Output[builtins.str]:
        """
        Unique identifier of the resource
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the Variable
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Organization Identifier for the Entity
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Project Identifier for the Entity
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Output['outputs.VariablesSpec']:
        """
        List of Spec Fields.
        """
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        Type of Variable
        """
        return pulumi.get(self, "type")

