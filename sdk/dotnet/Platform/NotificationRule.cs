// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating a Notification Rule.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Sample resource for SLO
    ///     var example = new Harness.Platform.NotificationRule("example", new()
    ///     {
    ///         OrgId = "org_id",
    ///         ProjectId = "project_id",
    ///         Identifier = "identifier",
    ///         Request = new Harness.Platform.Inputs.NotificationRuleRequestArgs
    ///         {
    ///             Name = "name",
    ///             NotificationMethod = new Harness.Platform.Inputs.NotificationRuleRequestNotificationMethodArgs
    ///             {
    ///                 Type = "Slack",
    ///                 Spec = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["webhook_url"] = "http://myslackwebhookurl.com",
    ///                     ["user_groups"] = new[]
    ///                     {
    ///                         "account.test",
    ///                     },
    ///                 }),
    ///             },
    ///             Type = "ServiceLevelObjective",
    ///             Conditions = new[]
    ///             {
    ///                 new Harness.Platform.Inputs.NotificationRuleRequestConditionArgs
    ///                 {
    ///                     Type = "ErrorBudgetBurnRate",
    ///                     Spec = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["threshold"] = 1,
    ///                     }),
    ///                 },
    ///                 new Harness.Platform.Inputs.NotificationRuleRequestConditionArgs
    ///                 {
    ///                     Type = "ErrorBudgetRemainingPercentage",
    ///                     Spec = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["threshold"] = 30,
    ///                     }),
    ///                 },
    ///                 new Harness.Platform.Inputs.NotificationRuleRequestConditionArgs
    ///                 {
    ///                     Type = "ErrorBudgetRemainingMinutes",
    ///                     Spec = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["threshold"] = 300,
    ///                     }),
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Sample resource for Monitored Service
    ///     var example1 = new Harness.Platform.NotificationRule("example1", new()
    ///     {
    ///         OrgId = "org_id",
    ///         ProjectId = "project_id",
    ///         Identifier = "identifier",
    ///         Request = new Harness.Platform.Inputs.NotificationRuleRequestArgs
    ///         {
    ///             Name = "name",
    ///             NotificationMethod = new Harness.Platform.Inputs.NotificationRuleRequestNotificationMethodArgs
    ///             {
    ///                 Type = "Slack",
    ///                 Spec = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["webhook_url"] = "http://myslackwebhookurl.com",
    ///                     ["user_groups"] = new[]
    ///                     {
    ///                         "account.test",
    ///                     },
    ///                 }),
    ///             },
    ///             Type = "MonitoredService",
    ///             Conditions = new[]
    ///             {
    ///                 new Harness.Platform.Inputs.NotificationRuleRequestConditionArgs
    ///                 {
    ///                     Type = "ChangeImpact",
    ///                     Spec = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["threshold"] = 33,
    ///                         ["period"] = "30m",
    ///                         ["changeCategories"] = new[]
    ///                         {
    ///                             "Deployment",
    ///                             "Infrastructure",
    ///                         },
    ///                     }),
    ///                 },
    ///                 new Harness.Platform.Inputs.NotificationRuleRequestConditionArgs
    ///                 {
    ///                     Type = "HealthScore",
    ///                     Spec = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["threshold"] = 33,
    ///                         ["period"] = "30m",
    ///                     }),
    ///                 },
    ///                 new Harness.Platform.Inputs.NotificationRuleRequestConditionArgs
    ///                 {
    ///                     Type = "ChangeObserved",
    ///                     Spec = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["changeCategories"] = new[]
    ///                         {
    ///                             "Deployment",
    ///                             "Alert",
    ///                             "ChaosExperiment",
    ///                         },
    ///                     }),
    ///                 },
    ///                 new Harness.Platform.Inputs.NotificationRuleRequestConditionArgs
    ///                 {
    ///                     Type = "DeploymentImpactReport",
    ///                     Spec = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                     }),
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import account level Notification Rule
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/notificationRule:NotificationRule example &lt;notification_rule_id&gt;
    /// ```
    /// 
    /// Import organization level Notification Rule
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/notificationRule:NotificationRule example &lt;org_id&gt;/&lt;notification_rule_id&gt;
    /// ```
    /// 
    /// Import project level Notification Rule
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/notificationRule:NotificationRule example &lt;org_id&gt;/&lt;project_id&gt;/&lt;notification_rule_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/notificationRule:NotificationRule")]
    public partial class NotificationRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier of the Notification Rule.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Identifier of the organization in which the Notification Rule is configured.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// Identifier of the project in which the Notification Rule is configured.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Request for creating or updating Notification Rule.
        /// </summary>
        [Output("request")]
        public Output<Outputs.NotificationRuleRequest?> Request { get; private set; } = null!;


        /// <summary>
        /// Create a NotificationRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NotificationRule(string name, NotificationRuleArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/notificationRule:NotificationRule", name, args ?? new NotificationRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NotificationRule(string name, Input<string> id, NotificationRuleState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/notificationRule:NotificationRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NotificationRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NotificationRule Get(string name, Input<string> id, NotificationRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new NotificationRule(name, id, state, options);
        }
    }

    public sealed class NotificationRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier of the Notification Rule.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Identifier of the organization in which the Notification Rule is configured.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// Identifier of the project in which the Notification Rule is configured.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Request for creating or updating Notification Rule.
        /// </summary>
        [Input("request")]
        public Input<Inputs.NotificationRuleRequestArgs>? Request { get; set; }

        public NotificationRuleArgs()
        {
        }
        public static new NotificationRuleArgs Empty => new NotificationRuleArgs();
    }

    public sealed class NotificationRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier of the Notification Rule.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Identifier of the organization in which the Notification Rule is configured.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Identifier of the project in which the Notification Rule is configured.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Request for creating or updating Notification Rule.
        /// </summary>
        [Input("request")]
        public Input<Inputs.NotificationRuleRequestGetArgs>? Request { get; set; }

        public NotificationRuleState()
        {
        }
        public static new NotificationRuleState Empty => new NotificationRuleState();
    }
}
