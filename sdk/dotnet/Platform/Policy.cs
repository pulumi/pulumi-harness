// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating a Harness Policy.
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import using the organization id
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/policy:Policy example &lt;organization_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/policy:Policy")]
    public partial class Policy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Base branch for the new git branch.
        /// </summary>
        [Output("gitBaseBranch")]
        public Output<string?> GitBaseBranch { get; private set; } = null!;

        /// <summary>
        /// Git branch for the policy.
        /// </summary>
        [Output("gitBranch")]
        public Output<string?> GitBranch { get; private set; } = null!;

        /// <summary>
        /// Git commit message for the policy.
        /// </summary>
        [Output("gitCommitMsg")]
        public Output<string?> GitCommitMsg { get; private set; } = null!;

        /// <summary>
        /// The existing commit sha of the file being updated
        /// </summary>
        [Output("gitCommitSha")]
        public Output<string> GitCommitSha { get; private set; } = null!;

        /// <summary>
        /// Git connector reference for the policy.
        /// </summary>
        [Output("gitConnectorRef")]
        public Output<string?> GitConnectorRef { get; private set; } = null!;

        /// <summary>
        /// The existing file id of the file being updated, not required for bitbucket files
        /// </summary>
        [Output("gitFileId")]
        public Output<string> GitFileId { get; private set; } = null!;

        /// <summary>
        /// Flag to import the policy from git.
        /// </summary>
        [Output("gitImport")]
        public Output<bool?> GitImport { get; private set; } = null!;

        /// <summary>
        /// Flag to create a new branch for the policy.
        /// </summary>
        [Output("gitIsNewBranch")]
        public Output<bool?> GitIsNewBranch { get; private set; } = null!;

        /// <summary>
        /// Git path for the policy.
        /// </summary>
        [Output("gitPath")]
        public Output<string?> GitPath { get; private set; } = null!;

        /// <summary>
        /// Git repository for the policy.
        /// </summary>
        [Output("gitRepo")]
        public Output<string?> GitRepo { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Rego code for the policy.
        /// </summary>
        [Output("rego")]
        public Output<string> Rego { get; private set; } = null!;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Policy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Policy(string name, PolicyArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/policy:Policy", name, args ?? new PolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Policy(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/policy:Policy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Policy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Policy Get(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new Policy(name, id, state, options);
        }
    }

    public sealed class PolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Base branch for the new git branch.
        /// </summary>
        [Input("gitBaseBranch")]
        public Input<string>? GitBaseBranch { get; set; }

        /// <summary>
        /// Git branch for the policy.
        /// </summary>
        [Input("gitBranch")]
        public Input<string>? GitBranch { get; set; }

        /// <summary>
        /// Git commit message for the policy.
        /// </summary>
        [Input("gitCommitMsg")]
        public Input<string>? GitCommitMsg { get; set; }

        /// <summary>
        /// The existing commit sha of the file being updated
        /// </summary>
        [Input("gitCommitSha")]
        public Input<string>? GitCommitSha { get; set; }

        /// <summary>
        /// Git connector reference for the policy.
        /// </summary>
        [Input("gitConnectorRef")]
        public Input<string>? GitConnectorRef { get; set; }

        /// <summary>
        /// The existing file id of the file being updated, not required for bitbucket files
        /// </summary>
        [Input("gitFileId")]
        public Input<string>? GitFileId { get; set; }

        /// <summary>
        /// Flag to import the policy from git.
        /// </summary>
        [Input("gitImport")]
        public Input<bool>? GitImport { get; set; }

        /// <summary>
        /// Flag to create a new branch for the policy.
        /// </summary>
        [Input("gitIsNewBranch")]
        public Input<bool>? GitIsNewBranch { get; set; }

        /// <summary>
        /// Git path for the policy.
        /// </summary>
        [Input("gitPath")]
        public Input<string>? GitPath { get; set; }

        /// <summary>
        /// Git repository for the policy.
        /// </summary>
        [Input("gitRepo")]
        public Input<string>? GitRepo { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Rego code for the policy.
        /// </summary>
        [Input("rego", required: true)]
        public Input<string> Rego { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public PolicyArgs()
        {
        }
        public static new PolicyArgs Empty => new PolicyArgs();
    }

    public sealed class PolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Base branch for the new git branch.
        /// </summary>
        [Input("gitBaseBranch")]
        public Input<string>? GitBaseBranch { get; set; }

        /// <summary>
        /// Git branch for the policy.
        /// </summary>
        [Input("gitBranch")]
        public Input<string>? GitBranch { get; set; }

        /// <summary>
        /// Git commit message for the policy.
        /// </summary>
        [Input("gitCommitMsg")]
        public Input<string>? GitCommitMsg { get; set; }

        /// <summary>
        /// The existing commit sha of the file being updated
        /// </summary>
        [Input("gitCommitSha")]
        public Input<string>? GitCommitSha { get; set; }

        /// <summary>
        /// Git connector reference for the policy.
        /// </summary>
        [Input("gitConnectorRef")]
        public Input<string>? GitConnectorRef { get; set; }

        /// <summary>
        /// The existing file id of the file being updated, not required for bitbucket files
        /// </summary>
        [Input("gitFileId")]
        public Input<string>? GitFileId { get; set; }

        /// <summary>
        /// Flag to import the policy from git.
        /// </summary>
        [Input("gitImport")]
        public Input<bool>? GitImport { get; set; }

        /// <summary>
        /// Flag to create a new branch for the policy.
        /// </summary>
        [Input("gitIsNewBranch")]
        public Input<bool>? GitIsNewBranch { get; set; }

        /// <summary>
        /// Git path for the policy.
        /// </summary>
        [Input("gitPath")]
        public Input<string>? GitPath { get; set; }

        /// <summary>
        /// Git repository for the policy.
        /// </summary>
        [Input("gitRepo")]
        public Input<string>? GitRepo { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Rego code for the policy.
        /// </summary>
        [Input("rego")]
        public Input<string>? Rego { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public PolicyState()
        {
        }
        public static new PolicyState Empty => new PolicyState();
    }
}
