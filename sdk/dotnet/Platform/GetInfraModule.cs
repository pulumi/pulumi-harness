// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetInfraModule
    {
        /// <summary>
        /// Data source for retrieving modules from the module registry.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Task<GetInfraModuleResult> InvokeAsync(GetInfraModuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInfraModuleResult>("harness:platform/getInfraModule:getInfraModule", args ?? new GetInfraModuleArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving modules from the module registry.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetInfraModuleResult> Invoke(GetInfraModuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInfraModuleResult>("harness:platform/getInfraModule:getInfraModule", args ?? new GetInfraModuleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving modules from the module registry.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetInfraModuleResult> Invoke(GetInfraModuleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInfraModuleResult>("harness:platform/getInfraModule:getInfraModule", args ?? new GetInfraModuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInfraModuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account that owns the module
        /// </summary>
        [Input("account", required: true)]
        public string Account { get; set; } = null!;

        /// <summary>
        /// Timestamp when the module was created
        /// </summary>
        [Input("created")]
        public int? Created { get; set; }

        /// <summary>
        /// Description of the module
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Git Tag Style
        /// </summary>
        [Input("gitTagStyle")]
        public string? GitTagStyle { get; set; }

        /// <summary>
        /// Identifier of the module
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// Error while retrieving the module
        /// </summary>
        [Input("moduleError")]
        public string? ModuleError { get; set; }

        /// <summary>
        /// Name of the module
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Organization that owns the module
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        /// <summary>
        /// Project that owns the module
        /// </summary>
        [Input("project")]
        public string? Project { get; set; }

        /// <summary>
        /// For account connectors, the repository where the module is stored
        /// </summary>
        [Input("repository")]
        public string? Repository { get; set; }

        /// <summary>
        /// Repository Branch in which the module should be accessed
        /// </summary>
        [Input("repositoryBranch")]
        public string? RepositoryBranch { get; set; }

        /// <summary>
        /// Repository Commit in which the module should be accessed
        /// </summary>
        [Input("repositoryCommit")]
        public string? RepositoryCommit { get; set; }

        /// <summary>
        /// Repository Connector is the reference to the connector for the repository
        /// </summary>
        [Input("repositoryConnector")]
        public string? RepositoryConnector { get; set; }

        /// <summary>
        /// Repository Path is the path in which the module resides
        /// </summary>
        [Input("repositoryPath")]
        public string? RepositoryPath { get; set; }

        /// <summary>
        /// URL where the module is stored
        /// </summary>
        [Input("repositoryUrl")]
        public string? RepositoryUrl { get; set; }

        /// <summary>
        /// Timestamp when the module was last synced
        /// </summary>
        [Input("synced")]
        public int? Synced { get; set; }

        /// <summary>
        /// Provider of the module
        /// </summary>
        [Input("system", required: true)]
        public string System { get; set; } = null!;

        /// <summary>
        /// Tags associated with the module
        /// </summary>
        [Input("tags")]
        public string? Tags { get; set; }

        /// <summary>
        /// Whether testing is enabled for the module
        /// </summary>
        [Input("testingEnabled")]
        public bool? TestingEnabled { get; set; }

        /// <summary>
        /// Testing metadata for the module
        /// </summary>
        [Input("testingMetadata")]
        public Inputs.GetInfraModuleTestingMetadataArgs? TestingMetadata { get; set; }

        /// <summary>
        /// Timestamp when the module was last modified
        /// </summary>
        [Input("updated")]
        public int? Updated { get; set; }

        [Input("versions")]
        private List<string>? _versions;

        /// <summary>
        /// Versions of the module
        /// </summary>
        public List<string> Versions
        {
            get => _versions ?? (_versions = new List<string>());
            set => _versions = value;
        }

        public GetInfraModuleArgs()
        {
        }
        public static new GetInfraModuleArgs Empty => new GetInfraModuleArgs();
    }

    public sealed class GetInfraModuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account that owns the module
        /// </summary>
        [Input("account", required: true)]
        public Input<string> Account { get; set; } = null!;

        /// <summary>
        /// Timestamp when the module was created
        /// </summary>
        [Input("created")]
        public Input<int>? Created { get; set; }

        /// <summary>
        /// Description of the module
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Git Tag Style
        /// </summary>
        [Input("gitTagStyle")]
        public Input<string>? GitTagStyle { get; set; }

        /// <summary>
        /// Identifier of the module
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// Error while retrieving the module
        /// </summary>
        [Input("moduleError")]
        public Input<string>? ModuleError { get; set; }

        /// <summary>
        /// Name of the module
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Organization that owns the module
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Project that owns the module
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// For account connectors, the repository where the module is stored
        /// </summary>
        [Input("repository")]
        public Input<string>? Repository { get; set; }

        /// <summary>
        /// Repository Branch in which the module should be accessed
        /// </summary>
        [Input("repositoryBranch")]
        public Input<string>? RepositoryBranch { get; set; }

        /// <summary>
        /// Repository Commit in which the module should be accessed
        /// </summary>
        [Input("repositoryCommit")]
        public Input<string>? RepositoryCommit { get; set; }

        /// <summary>
        /// Repository Connector is the reference to the connector for the repository
        /// </summary>
        [Input("repositoryConnector")]
        public Input<string>? RepositoryConnector { get; set; }

        /// <summary>
        /// Repository Path is the path in which the module resides
        /// </summary>
        [Input("repositoryPath")]
        public Input<string>? RepositoryPath { get; set; }

        /// <summary>
        /// URL where the module is stored
        /// </summary>
        [Input("repositoryUrl")]
        public Input<string>? RepositoryUrl { get; set; }

        /// <summary>
        /// Timestamp when the module was last synced
        /// </summary>
        [Input("synced")]
        public Input<int>? Synced { get; set; }

        /// <summary>
        /// Provider of the module
        /// </summary>
        [Input("system", required: true)]
        public Input<string> System { get; set; } = null!;

        /// <summary>
        /// Tags associated with the module
        /// </summary>
        [Input("tags")]
        public Input<string>? Tags { get; set; }

        /// <summary>
        /// Whether testing is enabled for the module
        /// </summary>
        [Input("testingEnabled")]
        public Input<bool>? TestingEnabled { get; set; }

        /// <summary>
        /// Testing metadata for the module
        /// </summary>
        [Input("testingMetadata")]
        public Input<Inputs.GetInfraModuleTestingMetadataInputArgs>? TestingMetadata { get; set; }

        /// <summary>
        /// Timestamp when the module was last modified
        /// </summary>
        [Input("updated")]
        public Input<int>? Updated { get; set; }

        [Input("versions")]
        private InputList<string>? _versions;

        /// <summary>
        /// Versions of the module
        /// </summary>
        public InputList<string> Versions
        {
            get => _versions ?? (_versions = new InputList<string>());
            set => _versions = value;
        }

        public GetInfraModuleInvokeArgs()
        {
        }
        public static new GetInfraModuleInvokeArgs Empty => new GetInfraModuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetInfraModuleResult
    {
        /// <summary>
        /// Account that owns the module
        /// </summary>
        public readonly string Account;
        /// <summary>
        /// Timestamp when the module was created
        /// </summary>
        public readonly int Created;
        /// <summary>
        /// Description of the module
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Git Tag Style
        /// </summary>
        public readonly string GitTagStyle;
        /// <summary>
        /// Identifier of the module
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Error while retrieving the module
        /// </summary>
        public readonly string ModuleError;
        /// <summary>
        /// Name of the module
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Organization that owns the module
        /// </summary>
        public readonly string Org;
        /// <summary>
        /// Project that owns the module
        /// </summary>
        public readonly string Project;
        /// <summary>
        /// For account connectors, the repository where the module is stored
        /// </summary>
        public readonly string Repository;
        /// <summary>
        /// Repository Branch in which the module should be accessed
        /// </summary>
        public readonly string RepositoryBranch;
        /// <summary>
        /// Repository Commit in which the module should be accessed
        /// </summary>
        public readonly string RepositoryCommit;
        /// <summary>
        /// Repository Connector is the reference to the connector for the repository
        /// </summary>
        public readonly string RepositoryConnector;
        /// <summary>
        /// Repository Path is the path in which the module resides
        /// </summary>
        public readonly string RepositoryPath;
        /// <summary>
        /// URL where the module is stored
        /// </summary>
        public readonly string RepositoryUrl;
        /// <summary>
        /// Timestamp when the module was last synced
        /// </summary>
        public readonly int Synced;
        /// <summary>
        /// Provider of the module
        /// </summary>
        public readonly string System;
        /// <summary>
        /// Tags associated with the module
        /// </summary>
        public readonly string Tags;
        /// <summary>
        /// Whether testing is enabled for the module
        /// </summary>
        public readonly bool TestingEnabled;
        /// <summary>
        /// Testing metadata for the module
        /// </summary>
        public readonly Outputs.GetInfraModuleTestingMetadataResult TestingMetadata;
        /// <summary>
        /// Timestamp when the module was last modified
        /// </summary>
        public readonly int Updated;
        /// <summary>
        /// Versions of the module
        /// </summary>
        public readonly ImmutableArray<string> Versions;

        [OutputConstructor]
        private GetInfraModuleResult(
            string account,

            int created,

            string description,

            string gitTagStyle,

            string id,

            string moduleError,

            string name,

            string org,

            string project,

            string repository,

            string repositoryBranch,

            string repositoryCommit,

            string repositoryConnector,

            string repositoryPath,

            string repositoryUrl,

            int synced,

            string system,

            string tags,

            bool testingEnabled,

            Outputs.GetInfraModuleTestingMetadataResult testingMetadata,

            int updated,

            ImmutableArray<string> versions)
        {
            Account = account;
            Created = created;
            Description = description;
            GitTagStyle = gitTagStyle;
            Id = id;
            ModuleError = moduleError;
            Name = name;
            Org = org;
            Project = project;
            Repository = repository;
            RepositoryBranch = repositoryBranch;
            RepositoryCommit = repositoryCommit;
            RepositoryConnector = repositoryConnector;
            RepositoryPath = repositoryPath;
            RepositoryUrl = repositoryUrl;
            Synced = synced;
            System = system;
            Tags = tags;
            TestingEnabled = testingEnabled;
            TestingMetadata = testingMetadata;
            Updated = updated;
            Versions = versions;
        }
    }
}
