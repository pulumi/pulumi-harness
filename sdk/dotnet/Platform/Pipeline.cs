// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating a Harness pipeline.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Harness.Platform.Pipeline("example", new()
    ///     {
    ///         Identifier = "identifier",
    ///         OrgId = "orgIdentifier",
    ///         ProjectId = "projectIdentifier",
    ///         Name = "name",
    ///         GitDetails = new Harness.Platform.Inputs.PipelineGitDetailsArgs
    ///         {
    ///             BranchName = "branchName",
    ///             CommitMessage = "commitMessage",
    ///             FilePath = "filePath",
    ///             ConnectorRef = "connectorRef",
    ///             StoreType = "REMOTE",
    ///             RepoName = "repoName",
    ///         },
    ///         Tags = null,
    ///         Yaml = @"pipeline:
    ///     name: name
    ///     identifier: identifier
    ///     allowStageExecutions: false
    ///     projectIdentifier: projectIdentifier
    ///     orgIdentifier: orgIdentifier
    ///     tags: {}
    ///     stages:
    ///         - stage:
    ///             name: dep
    ///             identifier: dep
    ///             description: """"
    ///             type: Deployment
    ///             spec:
    ///                 serviceConfig:
    ///                     serviceRef: service
    ///                     serviceDefinition:
    ///                         type: Kubernetes
    ///                         spec:
    ///                             variables: []
    ///                 infrastructure:
    ///                     environmentRef: testenv
    ///                     infrastructureDefinition:
    ///                         type: KubernetesDirect
    ///                         spec:
    ///                             connectorRef: testconf
    ///                             namespace: test
    ///                             releaseName: release-&lt;+INFRA_KEY&gt;
    ///                     allowSimultaneousDeployments: false
    ///                 execution:
    ///                     steps:
    ///                         - stepGroup:
    ///                                 name: Canary Deployment
    ///                                 identifier: canaryDepoyment
    ///                                 steps:
    ///                                     - step:
    ///                                         name: Canary Deployment
    ///                                         identifier: canaryDeployment
    ///                                         type: K8sCanaryDeploy
    ///                                         timeout: 10m
    ///                                         spec:
    ///                                             instanceSelection:
    ///                                                 type: Count
    ///                                                 spec:
    ///                                                     count: 1
    ///                                             skipDryRun: false
    ///                                     - step:
    ///                                         name: Canary Delete
    ///                                         identifier: canaryDelete
    ///                                         type: K8sCanaryDelete
    ///                                         timeout: 10m
    ///                                         spec: {}
    ///                                 rollbackSteps:
    ///                                     - step:
    ///                                         name: Canary Delete
    ///                                         identifier: rollbackCanaryDelete
    ///                                         type: K8sCanaryDelete
    ///                                         timeout: 10m
    ///                                         spec: {}
    ///                         - stepGroup:
    ///                                 name: Primary Deployment
    ///                                 identifier: primaryDepoyment
    ///                                 steps:
    ///                                     - step:
    ///                                         name: Rolling Deployment
    ///                                         identifier: rollingDeployment
    ///                                         type: K8sRollingDeploy
    ///                                         timeout: 10m
    ///                                         spec:
    ///                                             skipDryRun: false
    ///                                 rollbackSteps:
    ///                                     - step:
    ///                                         name: Rolling Rollback
    ///                                         identifier: rollingRollback
    ///                                         type: K8sRollingRollback
    ///                                         timeout: 10m
    ///                                         spec: {}
    ///                     rollbackSteps: []
    ///             tags: {}
    ///             failureStrategies:
    ///                 - onFailure:
    ///                         errors:
    ///                             - AllErrors
    ///                         action:
    ///                             type: StageRollback
    /// ",
    ///     });
    /// 
    ///     //## Importing Pipeline from Git
    ///     var test = new Harness.Platform.Organization("test", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///     });
    /// 
    ///     var testPipeline = new Harness.Platform.Pipeline("test", new()
    ///     {
    ///         Identifier = "gitx",
    ///         OrgId = "default",
    ///         ProjectId = "V",
    ///         Name = "gitx",
    ///         ImportFromGit = true,
    ///         GitImportInfo = new Harness.Platform.Inputs.PipelineGitImportInfoArgs
    ///         {
    ///             BranchName = "main",
    ///             FilePath = ".harness/gitx.yaml",
    ///             ConnectorRef = "account.DoNotDeleteGithub",
    ///             RepoName = "open-repo",
    ///         },
    ///         PipelineImportRequest = new Harness.Platform.Inputs.PipelinePipelineImportRequestArgs
    ///         {
    ///             PipelineName = "gitx",
    ///             PipelineDescription = "Pipeline Description",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import pipeline from default branch
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/pipeline:Pipeline example &lt;org_id&gt;/&lt;project_id&gt;/&lt;pipeline_id&gt;
    /// ```
    /// 
    /// Import pipeline from non default branch
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/pipeline:Pipeline example &lt;org_id&gt;/&lt;project_id&gt;/&lt;pipeline_id&gt;/&lt;branch&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/pipeline:Pipeline")]
    public partial class Pipeline : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Contains parameters related to creating an Entity for Git Experience.
        /// </summary>
        [Output("gitDetails")]
        public Output<Outputs.PipelineGitDetails> GitDetails { get; private set; } = null!;

        /// <summary>
        /// Contains Git Information for importing entities from Git
        /// </summary>
        [Output("gitImportInfo")]
        public Output<Outputs.PipelineGitImportInfo?> GitImportInfo { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Flag to set if importing from Git
        /// </summary>
        [Output("importFromGit")]
        public Output<bool?> ImportFromGit { get; private set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// Contains parameters for importing a pipeline
        /// </summary>
        [Output("pipelineImportRequest")]
        public Output<Outputs.PipelinePipelineImportRequest?> PipelineImportRequest { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Tags to associate with the resource. These should match the tag value passed in the YAML; if this parameter is null or not passed, the tags specified in YAML should also be null.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// If true, returns Pipeline YAML with Templates applied on it.
        /// </summary>
        [Output("templateApplied")]
        public Output<bool?> TemplateApplied { get; private set; } = null!;

        /// <summary>
        /// Pipeline YAML after resolving Templates (returned as a String).
        /// </summary>
        [Output("templateAppliedPipelineYaml")]
        public Output<string?> TemplateAppliedPipelineYaml { get; private set; } = null!;

        /// <summary>
        /// YAML of the pipeline. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
        /// </summary>
        [Output("yaml")]
        public Output<string> Yaml { get; private set; } = null!;


        /// <summary>
        /// Create a Pipeline resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pipeline(string name, PipelineArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/pipeline:Pipeline", name, args ?? new PipelineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Pipeline(string name, Input<string> id, PipelineState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/pipeline:Pipeline", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pipeline resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pipeline Get(string name, Input<string> id, PipelineState? state = null, CustomResourceOptions? options = null)
        {
            return new Pipeline(name, id, state, options);
        }
    }

    public sealed class PipelineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Contains parameters related to creating an Entity for Git Experience.
        /// </summary>
        [Input("gitDetails")]
        public Input<Inputs.PipelineGitDetailsArgs>? GitDetails { get; set; }

        /// <summary>
        /// Contains Git Information for importing entities from Git
        /// </summary>
        [Input("gitImportInfo")]
        public Input<Inputs.PipelineGitImportInfoArgs>? GitImportInfo { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Flag to set if importing from Git
        /// </summary>
        [Input("importFromGit")]
        public Input<bool>? ImportFromGit { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// Contains parameters for importing a pipeline
        /// </summary>
        [Input("pipelineImportRequest")]
        public Input<Inputs.PipelinePipelineImportRequestArgs>? PipelineImportRequest { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource. These should match the tag value passed in the YAML; if this parameter is null or not passed, the tags specified in YAML should also be null.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// If true, returns Pipeline YAML with Templates applied on it.
        /// </summary>
        [Input("templateApplied")]
        public Input<bool>? TemplateApplied { get; set; }

        /// <summary>
        /// Pipeline YAML after resolving Templates (returned as a String).
        /// </summary>
        [Input("templateAppliedPipelineYaml")]
        public Input<string>? TemplateAppliedPipelineYaml { get; set; }

        /// <summary>
        /// YAML of the pipeline. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
        /// </summary>
        [Input("yaml")]
        public Input<string>? Yaml { get; set; }

        public PipelineArgs()
        {
        }
        public static new PipelineArgs Empty => new PipelineArgs();
    }

    public sealed class PipelineState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Contains parameters related to creating an Entity for Git Experience.
        /// </summary>
        [Input("gitDetails")]
        public Input<Inputs.PipelineGitDetailsGetArgs>? GitDetails { get; set; }

        /// <summary>
        /// Contains Git Information for importing entities from Git
        /// </summary>
        [Input("gitImportInfo")]
        public Input<Inputs.PipelineGitImportInfoGetArgs>? GitImportInfo { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Flag to set if importing from Git
        /// </summary>
        [Input("importFromGit")]
        public Input<bool>? ImportFromGit { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Contains parameters for importing a pipeline
        /// </summary>
        [Input("pipelineImportRequest")]
        public Input<Inputs.PipelinePipelineImportRequestGetArgs>? PipelineImportRequest { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource. These should match the tag value passed in the YAML; if this parameter is null or not passed, the tags specified in YAML should also be null.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// If true, returns Pipeline YAML with Templates applied on it.
        /// </summary>
        [Input("templateApplied")]
        public Input<bool>? TemplateApplied { get; set; }

        /// <summary>
        /// Pipeline YAML after resolving Templates (returned as a String).
        /// </summary>
        [Input("templateAppliedPipelineYaml")]
        public Input<string>? TemplateAppliedPipelineYaml { get; set; }

        /// <summary>
        /// YAML of the pipeline. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
        /// </summary>
        [Input("yaml")]
        public Input<string>? Yaml { get; set; }

        public PipelineState()
        {
        }
        public static new PipelineState Empty => new PipelineState();
    }
}
