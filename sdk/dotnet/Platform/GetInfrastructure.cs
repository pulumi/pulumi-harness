// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetInfrastructure
    {
        /// <summary>
        /// Data source for retrieving a Harness Infrastructure.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetInfrastructure.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         Name = "name",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///         EnvId = "env_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetInfrastructureResult> InvokeAsync(GetInfrastructureArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInfrastructureResult>("harness:platform/getInfrastructure:getInfrastructure", args ?? new GetInfrastructureArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Infrastructure.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetInfrastructure.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         Name = "name",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///         EnvId = "env_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInfrastructureResult> Invoke(GetInfrastructureInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInfrastructureResult>("harness:platform/getInfrastructure:getInfrastructure", args ?? new GetInfrastructureInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Infrastructure.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetInfrastructure.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         Name = "name",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///         EnvId = "env_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInfrastructureResult> Invoke(GetInfrastructureInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInfrastructureResult>("harness:platform/getInfrastructure:getInfrastructure", args ?? new GetInfrastructureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInfrastructureArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// environment identifier.
        /// </summary>
        [Input("envId", required: true)]
        public string EnvId { get; set; } = null!;

        /// <summary>
        /// Contains parameters related to Git Experience for remote entities
        /// </summary>
        [Input("gitDetails")]
        public Inputs.GetInfrastructureGitDetailsArgs? GitDetails { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetInfrastructureArgs()
        {
        }
        public static new GetInfrastructureArgs Empty => new GetInfrastructureArgs();
    }

    public sealed class GetInfrastructureInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// environment identifier.
        /// </summary>
        [Input("envId", required: true)]
        public Input<string> EnvId { get; set; } = null!;

        /// <summary>
        /// Contains parameters related to Git Experience for remote entities
        /// </summary>
        [Input("gitDetails")]
        public Input<Inputs.GetInfrastructureGitDetailsInputArgs>? GitDetails { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetInfrastructureInvokeArgs()
        {
        }
        public static new GetInfrastructureInvokeArgs Empty => new GetInfrastructureInvokeArgs();
    }


    [OutputType]
    public sealed class GetInfrastructureResult
    {
        /// <summary>
        /// Infrastructure deployment type. Valid values are Kubernetes, NativeHelm, Ssh, WinRm, ServerlessAwsLambda, AzureWebApp, Custom, ECS.
        /// </summary>
        public readonly string DeploymentType;
        /// <summary>
        /// Description of the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// environment identifier.
        /// </summary>
        public readonly string EnvId;
        /// <summary>
        /// Contains parameters related to Git Experience for remote entities
        /// </summary>
        public readonly Outputs.GetInfrastructureGitDetailsResult GitDetails;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Type of Infrastructure. Valid values are KubernetesDirect, KubernetesGcp, ServerlessAwsLambda, Pdc, KubernetesAzure, SshWinRmAzure, SshWinRmAws, AzureWebApp, ECS, GitOps, CustomDeployment, TAS, KubernetesRancher, AWS_SAM.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Infrastructure YAML
        /// </summary>
        public readonly string Yaml;

        [OutputConstructor]
        private GetInfrastructureResult(
            string deploymentType,

            string description,

            string envId,

            Outputs.GetInfrastructureGitDetailsResult gitDetails,

            string id,

            string identifier,

            string? name,

            string? orgId,

            string? projectId,

            ImmutableArray<string> tags,

            string type,

            string yaml)
        {
            DeploymentType = deploymentType;
            Description = description;
            EnvId = envId;
            GitDetails = gitDetails;
            Id = id;
            Identifier = identifier;
            Name = name;
            OrgId = orgId;
            ProjectId = projectId;
            Tags = tags;
            Type = type;
            Yaml = yaml;
        }
    }
}
