// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetGitopsAgentOperatorYaml
    {
        /// <summary>
        /// Datasource for fetching a Harness Gitops Agent operator manifest YAML.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Task<GetGitopsAgentOperatorYamlResult> InvokeAsync(GetGitopsAgentOperatorYamlArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGitopsAgentOperatorYamlResult>("harness:platform/getGitopsAgentOperatorYaml:getGitopsAgentOperatorYaml", args ?? new GetGitopsAgentOperatorYamlArgs(), options.WithDefaults());

        /// <summary>
        /// Datasource for fetching a Harness Gitops Agent operator manifest YAML.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetGitopsAgentOperatorYamlResult> Invoke(GetGitopsAgentOperatorYamlInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGitopsAgentOperatorYamlResult>("harness:platform/getGitopsAgentOperatorYaml:getGitopsAgentOperatorYaml", args ?? new GetGitopsAgentOperatorYamlInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Datasource for fetching a Harness Gitops Agent operator manifest YAML.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetGitopsAgentOperatorYamlResult> Invoke(GetGitopsAgentOperatorYamlInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGitopsAgentOperatorYamlResult>("harness:platform/getGitopsAgentOperatorYaml:getGitopsAgentOperatorYaml", args ?? new GetGitopsAgentOperatorYamlInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGitopsAgentOperatorYamlArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// CA data of the GitOps agent, base64 encoded content of ca chain.
        /// </summary>
        [Input("caData")]
        public string? CaData { get; set; }

        /// <summary>
        /// Identifier of the GitOps agent.
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        /// <summary>
        /// The kubernetes namespace where the agent is installed.
        /// </summary>
        [Input("namespace", required: true)]
        public string Namespace { get; set; } = null!;

        /// <summary>
        /// Organization identifier of the GitOps agent.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Private key for the GitOps agent. If provided authentication token will not be regenerated. Must be base64 encoded.
        /// </summary>
        [Input("privateKey")]
        public string? PrivateKey { get; set; }

        /// <summary>
        /// Project identifier of the GitOps agent.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        [Input("proxies")]
        private List<Inputs.GetGitopsAgentOperatorYamlProxyArgs>? _proxies;

        /// <summary>
        /// Proxy settings for the GitOps agent.
        /// </summary>
        public List<Inputs.GetGitopsAgentOperatorYamlProxyArgs> Proxies
        {
            get => _proxies ?? (_proxies = new List<Inputs.GetGitopsAgentOperatorYamlProxyArgs>());
            set => _proxies = value;
        }

        /// <summary>
        /// Skip CRDs for the GitOps agent.
        /// </summary>
        [Input("skipCrds")]
        public bool? SkipCrds { get; set; }

        public GetGitopsAgentOperatorYamlArgs()
        {
        }
        public static new GetGitopsAgentOperatorYamlArgs Empty => new GetGitopsAgentOperatorYamlArgs();
    }

    public sealed class GetGitopsAgentOperatorYamlInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// CA data of the GitOps agent, base64 encoded content of ca chain.
        /// </summary>
        [Input("caData")]
        public Input<string>? CaData { get; set; }

        /// <summary>
        /// Identifier of the GitOps agent.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// The kubernetes namespace where the agent is installed.
        /// </summary>
        [Input("namespace", required: true)]
        public Input<string> Namespace { get; set; } = null!;

        /// <summary>
        /// Organization identifier of the GitOps agent.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Private key for the GitOps agent. If provided authentication token will not be regenerated. Must be base64 encoded.
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// Project identifier of the GitOps agent.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("proxies")]
        private InputList<Inputs.GetGitopsAgentOperatorYamlProxyInputArgs>? _proxies;

        /// <summary>
        /// Proxy settings for the GitOps agent.
        /// </summary>
        public InputList<Inputs.GetGitopsAgentOperatorYamlProxyInputArgs> Proxies
        {
            get => _proxies ?? (_proxies = new InputList<Inputs.GetGitopsAgentOperatorYamlProxyInputArgs>());
            set => _proxies = value;
        }

        /// <summary>
        /// Skip CRDs for the GitOps agent.
        /// </summary>
        [Input("skipCrds")]
        public Input<bool>? SkipCrds { get; set; }

        public GetGitopsAgentOperatorYamlInvokeArgs()
        {
        }
        public static new GetGitopsAgentOperatorYamlInvokeArgs Empty => new GetGitopsAgentOperatorYamlInvokeArgs();
    }


    [OutputType]
    public sealed class GetGitopsAgentOperatorYamlResult
    {
        /// <summary>
        /// CA data of the GitOps agent, base64 encoded content of ca chain.
        /// </summary>
        public readonly string? CaData;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identifier of the GitOps agent.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// The kubernetes namespace where the agent is installed.
        /// </summary>
        public readonly string Namespace;
        /// <summary>
        /// Organization identifier of the GitOps agent.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Private key for the GitOps agent. If provided authentication token will not be regenerated. Must be base64 encoded.
        /// </summary>
        public readonly string? PrivateKey;
        /// <summary>
        /// Project identifier of the GitOps agent.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Proxy settings for the GitOps agent.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGitopsAgentOperatorYamlProxyResult> Proxies;
        /// <summary>
        /// Skip CRDs for the GitOps agent.
        /// </summary>
        public readonly bool? SkipCrds;
        /// <summary>
        /// The operator manifest YAML of the GitOps agent.
        /// </summary>
        public readonly string Yaml;

        [OutputConstructor]
        private GetGitopsAgentOperatorYamlResult(
            string? caData,

            string id,

            string identifier,

            string @namespace,

            string? orgId,

            string? privateKey,

            string? projectId,

            ImmutableArray<Outputs.GetGitopsAgentOperatorYamlProxyResult> proxies,

            bool? skipCrds,

            string yaml)
        {
            CaData = caData;
            Id = id;
            Identifier = identifier;
            Namespace = @namespace;
            OrgId = orgId;
            PrivateKey = privateKey;
            ProjectId = projectId;
            Proxies = proxies;
            SkipCrds = skipCrds;
            Yaml = yaml;
        }
    }
}
