// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetDbSchema
    {
        /// <summary>
        /// Data source for retrieving a Harness DBDevOps Schema.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetDbSchema.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDbSchemaResult> InvokeAsync(GetDbSchemaArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDbSchemaResult>("harness:platform/getDbSchema:getDbSchema", args ?? new GetDbSchemaArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness DBDevOps Schema.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetDbSchema.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDbSchemaResult> Invoke(GetDbSchemaInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDbSchemaResult>("harness:platform/getDbSchema:getDbSchema", args ?? new GetDbSchemaInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness DBDevOps Schema.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetDbSchema.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDbSchemaResult> Invoke(GetDbSchemaInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDbSchemaResult>("harness:platform/getDbSchema:getDbSchema", args ?? new GetDbSchemaInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDbSchemaArgs : global::Pulumi.InvokeArgs
    {
        [Input("changelogScript")]
        public Inputs.GetDbSchemaChangelogScriptArgs? ChangelogScript { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId", required: true)]
        public string OrgId { get; set; } = null!;

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        [Input("schemaSources")]
        private List<Inputs.GetDbSchemaSchemaSourceArgs>? _schemaSources;

        /// <summary>
        /// Provides a connector and path at which to find the database schema representation
        /// </summary>
        public List<Inputs.GetDbSchemaSchemaSourceArgs> SchemaSources
        {
            get => _schemaSources ?? (_schemaSources = new List<Inputs.GetDbSchemaSchemaSourceArgs>());
            set => _schemaSources = value;
        }

        [Input("type")]
        public string? Type { get; set; }

        public GetDbSchemaArgs()
        {
        }
        public static new GetDbSchemaArgs Empty => new GetDbSchemaArgs();
    }

    public sealed class GetDbSchemaInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("changelogScript")]
        public Input<Inputs.GetDbSchemaChangelogScriptInputArgs>? ChangelogScript { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("schemaSources")]
        private InputList<Inputs.GetDbSchemaSchemaSourceInputArgs>? _schemaSources;

        /// <summary>
        /// Provides a connector and path at which to find the database schema representation
        /// </summary>
        public InputList<Inputs.GetDbSchemaSchemaSourceInputArgs> SchemaSources
        {
            get => _schemaSources ?? (_schemaSources = new InputList<Inputs.GetDbSchemaSchemaSourceInputArgs>());
            set => _schemaSources = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetDbSchemaInvokeArgs()
        {
        }
        public static new GetDbSchemaInvokeArgs Empty => new GetDbSchemaInvokeArgs();
    }


    [OutputType]
    public sealed class GetDbSchemaResult
    {
        public readonly Outputs.GetDbSchemaChangelogScriptResult? ChangelogScript;
        /// <summary>
        /// Description of the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        public readonly string OrgId;
        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Provides a connector and path at which to find the database schema representation
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDbSchemaSchemaSourceResult> SchemaSources;
        /// <summary>
        /// The service associated with schema
        /// </summary>
        public readonly string Service;
        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        public readonly string? Type;

        [OutputConstructor]
        private GetDbSchemaResult(
            Outputs.GetDbSchemaChangelogScriptResult? changelogScript,

            string description,

            string id,

            string identifier,

            string? name,

            string orgId,

            string projectId,

            ImmutableArray<Outputs.GetDbSchemaSchemaSourceResult> schemaSources,

            string service,

            ImmutableArray<string> tags,

            string? type)
        {
            ChangelogScript = changelogScript;
            Description = description;
            Id = id;
            Identifier = identifier;
            Name = name;
            OrgId = orgId;
            ProjectId = projectId;
            SchemaSources = schemaSources;
            Service = service;
            Tags = tags;
            Type = type;
        }
    }
}
