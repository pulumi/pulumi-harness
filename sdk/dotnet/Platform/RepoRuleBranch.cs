// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating a Harness Repo Branch Rule.
    /// </summary>
    [HarnessResourceType("harness:platform/repoRuleBranch:RepoRuleBranch")]
    public partial class RepoRuleBranch : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of users who can bypass this rule.
        /// </summary>
        [Output("bypasses")]
        public Output<ImmutableArray<Outputs.RepoRuleBranchBypass>> Bypasses { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the rule was created.
        /// </summary>
        [Output("created")]
        public Output<int> Created { get; private set; } = null!;

        /// <summary>
        /// ID of the user who created the rule.
        /// </summary>
        [Output("createdBy")]
        public Output<int> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// Description of the rule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Identifier of the rule.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Pattern of branch to which rule will apply.
        /// </summary>
        [Output("patterns")]
        public Output<ImmutableArray<Outputs.RepoRuleBranchPattern>> Patterns { get; private set; } = null!;

        /// <summary>
        /// Policies to be applied for this rule.
        /// </summary>
        [Output("policies")]
        public Output<ImmutableArray<Outputs.RepoRuleBranchPolicy>> Policies { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Repo identifier of the repository.
        /// </summary>
        [Output("repoIdentifier")]
        public Output<string> RepoIdentifier { get; private set; } = null!;

        /// <summary>
        /// State of the rule (active, disable, monitor).
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the rule was updated.
        /// </summary>
        [Output("updated")]
        public Output<int> Updated { get; private set; } = null!;

        /// <summary>
        /// ID of the user who updated the rule.
        /// </summary>
        [Output("updatedBy")]
        public Output<int> UpdatedBy { get; private set; } = null!;


        /// <summary>
        /// Create a RepoRuleBranch resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RepoRuleBranch(string name, RepoRuleBranchArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/repoRuleBranch:RepoRuleBranch", name, args ?? new RepoRuleBranchArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RepoRuleBranch(string name, Input<string> id, RepoRuleBranchState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/repoRuleBranch:RepoRuleBranch", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RepoRuleBranch resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RepoRuleBranch Get(string name, Input<string> id, RepoRuleBranchState? state = null, CustomResourceOptions? options = null)
        {
            return new RepoRuleBranch(name, id, state, options);
        }
    }

    public sealed class RepoRuleBranchArgs : global::Pulumi.ResourceArgs
    {
        [Input("bypasses", required: true)]
        private InputList<Inputs.RepoRuleBranchBypassArgs>? _bypasses;

        /// <summary>
        /// List of users who can bypass this rule.
        /// </summary>
        public InputList<Inputs.RepoRuleBranchBypassArgs> Bypasses
        {
            get => _bypasses ?? (_bypasses = new InputList<Inputs.RepoRuleBranchBypassArgs>());
            set => _bypasses = value;
        }

        /// <summary>
        /// Description of the rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Identifier of the rule.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        [Input("patterns")]
        private InputList<Inputs.RepoRuleBranchPatternArgs>? _patterns;

        /// <summary>
        /// Pattern of branch to which rule will apply.
        /// </summary>
        public InputList<Inputs.RepoRuleBranchPatternArgs> Patterns
        {
            get => _patterns ?? (_patterns = new InputList<Inputs.RepoRuleBranchPatternArgs>());
            set => _patterns = value;
        }

        [Input("policies", required: true)]
        private InputList<Inputs.RepoRuleBranchPolicyArgs>? _policies;

        /// <summary>
        /// Policies to be applied for this rule.
        /// </summary>
        public InputList<Inputs.RepoRuleBranchPolicyArgs> Policies
        {
            get => _policies ?? (_policies = new InputList<Inputs.RepoRuleBranchPolicyArgs>());
            set => _policies = value;
        }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Repo identifier of the repository.
        /// </summary>
        [Input("repoIdentifier", required: true)]
        public Input<string> RepoIdentifier { get; set; } = null!;

        /// <summary>
        /// State of the rule (active, disable, monitor).
        /// </summary>
        [Input("state", required: true)]
        public Input<string> State { get; set; } = null!;

        public RepoRuleBranchArgs()
        {
        }
        public static new RepoRuleBranchArgs Empty => new RepoRuleBranchArgs();
    }

    public sealed class RepoRuleBranchState : global::Pulumi.ResourceArgs
    {
        [Input("bypasses")]
        private InputList<Inputs.RepoRuleBranchBypassGetArgs>? _bypasses;

        /// <summary>
        /// List of users who can bypass this rule.
        /// </summary>
        public InputList<Inputs.RepoRuleBranchBypassGetArgs> Bypasses
        {
            get => _bypasses ?? (_bypasses = new InputList<Inputs.RepoRuleBranchBypassGetArgs>());
            set => _bypasses = value;
        }

        /// <summary>
        /// Timestamp when the rule was created.
        /// </summary>
        [Input("created")]
        public Input<int>? Created { get; set; }

        /// <summary>
        /// ID of the user who created the rule.
        /// </summary>
        [Input("createdBy")]
        public Input<int>? CreatedBy { get; set; }

        /// <summary>
        /// Description of the rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Identifier of the rule.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        [Input("patterns")]
        private InputList<Inputs.RepoRuleBranchPatternGetArgs>? _patterns;

        /// <summary>
        /// Pattern of branch to which rule will apply.
        /// </summary>
        public InputList<Inputs.RepoRuleBranchPatternGetArgs> Patterns
        {
            get => _patterns ?? (_patterns = new InputList<Inputs.RepoRuleBranchPatternGetArgs>());
            set => _patterns = value;
        }

        [Input("policies")]
        private InputList<Inputs.RepoRuleBranchPolicyGetArgs>? _policies;

        /// <summary>
        /// Policies to be applied for this rule.
        /// </summary>
        public InputList<Inputs.RepoRuleBranchPolicyGetArgs> Policies
        {
            get => _policies ?? (_policies = new InputList<Inputs.RepoRuleBranchPolicyGetArgs>());
            set => _policies = value;
        }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Repo identifier of the repository.
        /// </summary>
        [Input("repoIdentifier")]
        public Input<string>? RepoIdentifier { get; set; }

        /// <summary>
        /// State of the rule (active, disable, monitor).
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Timestamp when the rule was updated.
        /// </summary>
        [Input("updated")]
        public Input<int>? Updated { get; set; }

        /// <summary>
        /// ID of the user who updated the rule.
        /// </summary>
        [Input("updatedBy")]
        public Input<int>? UpdatedBy { get; set; }

        public RepoRuleBranchState()
        {
        }
        public static new RepoRuleBranchState Empty => new RepoRuleBranchState();
    }
}
