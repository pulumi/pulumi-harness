// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetConnectorCustomSecretManager
    {
        /// <summary>
        /// Datasource for looking up a Custom Secret Manager connector.
        /// </summary>
        public static Task<GetConnectorCustomSecretManagerResult> InvokeAsync(GetConnectorCustomSecretManagerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConnectorCustomSecretManagerResult>("harness:platform/getConnectorCustomSecretManager:getConnectorCustomSecretManager", args ?? new GetConnectorCustomSecretManagerArgs(), options.WithDefaults());

        /// <summary>
        /// Datasource for looking up a Custom Secret Manager connector.
        /// </summary>
        public static Output<GetConnectorCustomSecretManagerResult> Invoke(GetConnectorCustomSecretManagerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectorCustomSecretManagerResult>("harness:platform/getConnectorCustomSecretManager:getConnectorCustomSecretManager", args ?? new GetConnectorCustomSecretManagerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Datasource for looking up a Custom Secret Manager connector.
        /// </summary>
        public static Output<GetConnectorCustomSecretManagerResult> Invoke(GetConnectorCustomSecretManagerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectorCustomSecretManagerResult>("harness:platform/getConnectorCustomSecretManager:getConnectorCustomSecretManager", args ?? new GetConnectorCustomSecretManagerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectorCustomSecretManagerArgs : global::Pulumi.InvokeArgs
    {
        [Input("delegateSelectors")]
        private List<string>? _delegateSelectors;

        /// <summary>
        /// Tags to filter delegates for connection.
        /// </summary>
        public List<string> DelegateSelectors
        {
            get => _delegateSelectors ?? (_delegateSelectors = new List<string>());
            set => _delegateSelectors = value;
        }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetConnectorCustomSecretManagerArgs()
        {
        }
        public static new GetConnectorCustomSecretManagerArgs Empty => new GetConnectorCustomSecretManagerArgs();
    }

    public sealed class GetConnectorCustomSecretManagerInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("delegateSelectors")]
        private InputList<string>? _delegateSelectors;

        /// <summary>
        /// Tags to filter delegates for connection.
        /// </summary>
        public InputList<string> DelegateSelectors
        {
            get => _delegateSelectors ?? (_delegateSelectors = new InputList<string>());
            set => _delegateSelectors = value;
        }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetConnectorCustomSecretManagerInvokeArgs()
        {
        }
        public static new GetConnectorCustomSecretManagerInvokeArgs Empty => new GetConnectorCustomSecretManagerInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectorCustomSecretManagerResult
    {
        /// <summary>
        /// Tags to filter delegates for connection.
        /// </summary>
        public readonly ImmutableArray<string> DelegateSelectors;
        /// <summary>
        /// Description of the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Specifies whether the secrets manager runs on a Harness delegate.
        /// </summary>
        public readonly bool OnDelegate;
        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// SSH secret reference for the custom secrets manager, Computed if 'on_delegate' is false.
        /// </summary>
        public readonly string SshSecretRef;
        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Host where the custom secrets manager is located, Computed if 'on_delegate' is false.
        /// </summary>
        public readonly string TargetHost;
        public readonly ImmutableArray<Outputs.GetConnectorCustomSecretManagerTemplateInputResult> TemplateInputs;
        /// <summary>
        /// Reference to the template used for managing secrets.
        /// </summary>
        public readonly string TemplateRef;
        /// <summary>
        /// Timeout in seconds for secrets management operations.
        /// </summary>
        public readonly int Timeout;
        /// <summary>
        /// Type of the custom secrets manager, typically set to 'CustomSecretManager'.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Version identifier of the secrets management template.
        /// </summary>
        public readonly string VersionLabel;
        /// <summary>
        /// The working directory for operations, Computed if 'on_delegate' is false.
        /// </summary>
        public readonly string WorkingDirectory;

        [OutputConstructor]
        private GetConnectorCustomSecretManagerResult(
            ImmutableArray<string> delegateSelectors,

            string description,

            string id,

            string identifier,

            string? name,

            bool onDelegate,

            string? orgId,

            string? projectId,

            string sshSecretRef,

            ImmutableArray<string> tags,

            string targetHost,

            ImmutableArray<Outputs.GetConnectorCustomSecretManagerTemplateInputResult> templateInputs,

            string templateRef,

            int timeout,

            string type,

            string versionLabel,

            string workingDirectory)
        {
            DelegateSelectors = delegateSelectors;
            Description = description;
            Id = id;
            Identifier = identifier;
            Name = name;
            OnDelegate = onDelegate;
            OrgId = orgId;
            ProjectId = projectId;
            SshSecretRef = sshSecretRef;
            Tags = tags;
            TargetHost = targetHost;
            TemplateInputs = templateInputs;
            TemplateRef = templateRef;
            Timeout = timeout;
            Type = type;
            VersionLabel = versionLabel;
            WorkingDirectory = workingDirectory;
        }
    }
}
