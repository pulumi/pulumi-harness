// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for managing Feature Flags.
    /// </summary>
    [HarnessResourceType("harness:platform/featureFlag:FeatureFlag")]
    public partial class FeatureFlag : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether or not the flag is archived.
        /// </summary>
        [Output("archived")]
        public Output<bool?> Archived { get; private set; } = null!;

        /// <summary>
        /// Which of the variations to use when the flag is toggled to off state
        /// </summary>
        [Output("defaultOffVariation")]
        public Output<string> DefaultOffVariation { get; private set; } = null!;

        /// <summary>
        /// Which of the variations to use when the flag is toggled to on state
        /// </summary>
        [Output("defaultOnVariation")]
        public Output<string> DefaultOnVariation { get; private set; } = null!;

        /// <summary>
        /// Description of the Feature Flag
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Environment Identifier
        /// </summary>
        [Output("environments")]
        public Output<ImmutableArray<Outputs.FeatureFlagEnvironment>> Environments { get; private set; } = null!;

        /// <summary>
        /// Identifier of the Feature Flag
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// The type of data the flag represents. Valid values are `Boolean`, `Int`, `String`, `Json`
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// Name of the Feature Flag
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Organization Identifier
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// The owner of the flag
        /// </summary>
        [Output("owner")]
        public Output<string?> Owner { get; private set; } = null!;

        /// <summary>
        /// Whether or not the flag is permanent. If it is, it will never be flagged as stale
        /// </summary>
        [Output("permanent")]
        public Output<bool> Permanent { get; private set; } = null!;

        /// <summary>
        /// Project Identifier
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The tags for the flag
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.FeatureFlagTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The options available for your flag
        /// </summary>
        [Output("variations")]
        public Output<ImmutableArray<Outputs.FeatureFlagVariation>> Variations { get; private set; } = null!;


        /// <summary>
        /// Create a FeatureFlag resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FeatureFlag(string name, FeatureFlagArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/featureFlag:FeatureFlag", name, args ?? new FeatureFlagArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FeatureFlag(string name, Input<string> id, FeatureFlagState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/featureFlag:FeatureFlag", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FeatureFlag resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FeatureFlag Get(string name, Input<string> id, FeatureFlagState? state = null, CustomResourceOptions? options = null)
        {
            return new FeatureFlag(name, id, state, options);
        }
    }

    public sealed class FeatureFlagArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether or not the flag is archived.
        /// </summary>
        [Input("archived")]
        public Input<bool>? Archived { get; set; }

        /// <summary>
        /// Which of the variations to use when the flag is toggled to off state
        /// </summary>
        [Input("defaultOffVariation", required: true)]
        public Input<string> DefaultOffVariation { get; set; } = null!;

        /// <summary>
        /// Which of the variations to use when the flag is toggled to on state
        /// </summary>
        [Input("defaultOnVariation", required: true)]
        public Input<string> DefaultOnVariation { get; set; } = null!;

        /// <summary>
        /// Description of the Feature Flag
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("environments")]
        private InputList<Inputs.FeatureFlagEnvironmentArgs>? _environments;

        /// <summary>
        /// Environment Identifier
        /// </summary>
        public InputList<Inputs.FeatureFlagEnvironmentArgs> Environments
        {
            get => _environments ?? (_environments = new InputList<Inputs.FeatureFlagEnvironmentArgs>());
            set => _environments = value;
        }

        /// <summary>
        /// Identifier of the Feature Flag
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// The type of data the flag represents. Valid values are `Boolean`, `Int`, `String`, `Json`
        /// </summary>
        [Input("kind", required: true)]
        public Input<string> Kind { get; set; } = null!;

        /// <summary>
        /// Name of the Feature Flag
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Organization Identifier
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// The owner of the flag
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// Whether or not the flag is permanent. If it is, it will never be flagged as stale
        /// </summary>
        [Input("permanent", required: true)]
        public Input<bool> Permanent { get; set; } = null!;

        /// <summary>
        /// Project Identifier
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.FeatureFlagTagArgs>? _tags;

        /// <summary>
        /// The tags for the flag
        /// </summary>
        public InputList<Inputs.FeatureFlagTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.FeatureFlagTagArgs>());
            set => _tags = value;
        }

        [Input("variations", required: true)]
        private InputList<Inputs.FeatureFlagVariationArgs>? _variations;

        /// <summary>
        /// The options available for your flag
        /// </summary>
        public InputList<Inputs.FeatureFlagVariationArgs> Variations
        {
            get => _variations ?? (_variations = new InputList<Inputs.FeatureFlagVariationArgs>());
            set => _variations = value;
        }

        public FeatureFlagArgs()
        {
        }
        public static new FeatureFlagArgs Empty => new FeatureFlagArgs();
    }

    public sealed class FeatureFlagState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether or not the flag is archived.
        /// </summary>
        [Input("archived")]
        public Input<bool>? Archived { get; set; }

        /// <summary>
        /// Which of the variations to use when the flag is toggled to off state
        /// </summary>
        [Input("defaultOffVariation")]
        public Input<string>? DefaultOffVariation { get; set; }

        /// <summary>
        /// Which of the variations to use when the flag is toggled to on state
        /// </summary>
        [Input("defaultOnVariation")]
        public Input<string>? DefaultOnVariation { get; set; }

        /// <summary>
        /// Description of the Feature Flag
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("environments")]
        private InputList<Inputs.FeatureFlagEnvironmentGetArgs>? _environments;

        /// <summary>
        /// Environment Identifier
        /// </summary>
        public InputList<Inputs.FeatureFlagEnvironmentGetArgs> Environments
        {
            get => _environments ?? (_environments = new InputList<Inputs.FeatureFlagEnvironmentGetArgs>());
            set => _environments = value;
        }

        /// <summary>
        /// Identifier of the Feature Flag
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// The type of data the flag represents. Valid values are `Boolean`, `Int`, `String`, `Json`
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Name of the Feature Flag
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Organization Identifier
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The owner of the flag
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// Whether or not the flag is permanent. If it is, it will never be flagged as stale
        /// </summary>
        [Input("permanent")]
        public Input<bool>? Permanent { get; set; }

        /// <summary>
        /// Project Identifier
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputList<Inputs.FeatureFlagTagGetArgs>? _tags;

        /// <summary>
        /// The tags for the flag
        /// </summary>
        public InputList<Inputs.FeatureFlagTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.FeatureFlagTagGetArgs>());
            set => _tags = value;
        }

        [Input("variations")]
        private InputList<Inputs.FeatureFlagVariationGetArgs>? _variations;

        /// <summary>
        /// The options available for your flag
        /// </summary>
        public InputList<Inputs.FeatureFlagVariationGetArgs> Variations
        {
            get => _variations ?? (_variations = new InputList<Inputs.FeatureFlagVariationGetArgs>());
            set => _variations = value;
        }

        public FeatureFlagState()
        {
        }
        public static new FeatureFlagState Empty => new FeatureFlagState();
    }
}
