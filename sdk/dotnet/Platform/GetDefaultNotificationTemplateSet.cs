// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetDefaultNotificationTemplateSet
    {
        /// <summary>
        /// Data source for retrieving a Default Notification Template Set.
        /// </summary>
        public static Task<GetDefaultNotificationTemplateSetResult> InvokeAsync(GetDefaultNotificationTemplateSetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDefaultNotificationTemplateSetResult>("harness:platform/getDefaultNotificationTemplateSet:getDefaultNotificationTemplateSet", args ?? new GetDefaultNotificationTemplateSetArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Default Notification Template Set.
        /// </summary>
        public static Output<GetDefaultNotificationTemplateSetResult> Invoke(GetDefaultNotificationTemplateSetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDefaultNotificationTemplateSetResult>("harness:platform/getDefaultNotificationTemplateSet:getDefaultNotificationTemplateSet", args ?? new GetDefaultNotificationTemplateSetInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Default Notification Template Set.
        /// </summary>
        public static Output<GetDefaultNotificationTemplateSetResult> Invoke(GetDefaultNotificationTemplateSetInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDefaultNotificationTemplateSetResult>("harness:platform/getDefaultNotificationTemplateSet:getDefaultNotificationTemplateSet", args ?? new GetDefaultNotificationTemplateSetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDefaultNotificationTemplateSetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Description for Default Notification Template Set
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        [Input("eventTemplateConfigurationSets", required: true)]
        private List<Inputs.GetDefaultNotificationTemplateSetEventTemplateConfigurationSetArgs>? _eventTemplateConfigurationSets;

        /// <summary>
        /// Set of event-template configurations
        /// </summary>
        public List<Inputs.GetDefaultNotificationTemplateSetEventTemplateConfigurationSetArgs> EventTemplateConfigurationSets
        {
            get => _eventTemplateConfigurationSets ?? (_eventTemplateConfigurationSets = new List<Inputs.GetDefaultNotificationTemplateSetEventTemplateConfigurationSetArgs>());
            set => _eventTemplateConfigurationSets = value;
        }

        /// <summary>
        /// Identifier of Default Notification Template Set
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        /// <summary>
        /// Name of Default Notification Template Set
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Type of channel (e.g. SLACK, EMAIL, etc.)
        /// </summary>
        [Input("notificationChannelType", required: true)]
        public string NotificationChannelType { get; set; } = null!;

        /// <summary>
        /// Type of the entity (e.g. PIPELINE, SERVICE, etc.)
        /// </summary>
        [Input("notificationEntity", required: true)]
        public string NotificationEntity { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Key-value tags
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetDefaultNotificationTemplateSetArgs()
        {
        }
        public static new GetDefaultNotificationTemplateSetArgs Empty => new GetDefaultNotificationTemplateSetArgs();
    }

    public sealed class GetDefaultNotificationTemplateSetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Description for Default Notification Template Set
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("eventTemplateConfigurationSets", required: true)]
        private InputList<Inputs.GetDefaultNotificationTemplateSetEventTemplateConfigurationSetInputArgs>? _eventTemplateConfigurationSets;

        /// <summary>
        /// Set of event-template configurations
        /// </summary>
        public InputList<Inputs.GetDefaultNotificationTemplateSetEventTemplateConfigurationSetInputArgs> EventTemplateConfigurationSets
        {
            get => _eventTemplateConfigurationSets ?? (_eventTemplateConfigurationSets = new InputList<Inputs.GetDefaultNotificationTemplateSetEventTemplateConfigurationSetInputArgs>());
            set => _eventTemplateConfigurationSets = value;
        }

        /// <summary>
        /// Identifier of Default Notification Template Set
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Name of Default Notification Template Set
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Type of channel (e.g. SLACK, EMAIL, etc.)
        /// </summary>
        [Input("notificationChannelType", required: true)]
        public Input<string> NotificationChannelType { get; set; } = null!;

        /// <summary>
        /// Type of the entity (e.g. PIPELINE, SERVICE, etc.)
        /// </summary>
        [Input("notificationEntity", required: true)]
        public Input<string> NotificationEntity { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetDefaultNotificationTemplateSetInvokeArgs()
        {
        }
        public static new GetDefaultNotificationTemplateSetInvokeArgs Empty => new GetDefaultNotificationTemplateSetInvokeArgs();
    }


    [OutputType]
    public sealed class GetDefaultNotificationTemplateSetResult
    {
        /// <summary>
        /// Timestamp when the notification rule was created.
        /// </summary>
        public readonly int Created;
        /// <summary>
        /// Description for Default Notification Template Set
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Set of event-template configurations
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDefaultNotificationTemplateSetEventTemplateConfigurationSetResult> EventTemplateConfigurationSets;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identifier of Default Notification Template Set
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// Timestamp when the notification rule was last modified.
        /// </summary>
        public readonly int LastModified;
        /// <summary>
        /// Name of Default Notification Template Set
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Type of channel (e.g. SLACK, EMAIL, etc.)
        /// </summary>
        public readonly string NotificationChannelType;
        /// <summary>
        /// Type of the entity (e.g. PIPELINE, SERVICE, etc.)
        /// </summary>
        public readonly string NotificationEntity;
        /// <summary>
        /// Key-value tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;

        [OutputConstructor]
        private GetDefaultNotificationTemplateSetResult(
            int created,

            string? description,

            ImmutableArray<Outputs.GetDefaultNotificationTemplateSetEventTemplateConfigurationSetResult> eventTemplateConfigurationSets,

            string id,

            string identifier,

            int lastModified,

            string name,

            string notificationChannelType,

            string notificationEntity,

            ImmutableDictionary<string, string>? tags)
        {
            Created = created;
            Description = description;
            EventTemplateConfigurationSets = eventTemplateConfigurationSets;
            Id = id;
            Identifier = identifier;
            LastModified = lastModified;
            Name = name;
            NotificationChannelType = notificationChannelType;
            NotificationEntity = notificationEntity;
            Tags = tags;
        }
    }
}
