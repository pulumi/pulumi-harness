// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating an AWS connector.
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import account level aws connector
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/awsConnector:AwsConnector example &lt;connector_id&gt;
    /// ```
    /// 
    /// Import organization level aws connector
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/awsConnector:AwsConnector example &lt;organization_id&gt;/&lt;connector_id&gt;
    /// ```
    /// 
    /// Import project level aws connector
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/awsConnector:AwsConnector example &lt;organization_id&gt;/&lt;project_id&gt;/&lt;connector_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/awsConnector:AwsConnector")]
    public partial class AwsConnector : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.
        /// </summary>
        [Output("crossAccountAccess")]
        public Output<Outputs.AwsConnectorCrossAccountAccess?> CrossAccountAccess { get; private set; } = null!;

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Equal Jitter BackOff Strategy.
        /// </summary>
        [Output("equalJitterBackoffStrategy")]
        public Output<Outputs.AwsConnectorEqualJitterBackoffStrategy?> EqualJitterBackoffStrategy { get; private set; } = null!;

        /// <summary>
        /// Enable this flag to execute on Delegate
        /// </summary>
        [Output("executeOnDelegate")]
        public Output<bool?> ExecuteOnDelegate { get; private set; } = null!;

        /// <summary>
        /// Fixed Delay BackOff Strategy.
        /// </summary>
        [Output("fixedDelayBackoffStrategy")]
        public Output<Outputs.AwsConnectorFixedDelayBackoffStrategy?> FixedDelayBackoffStrategy { get; private set; } = null!;

        /// <summary>
        /// Enable this flag for force deletion of connector
        /// </summary>
        [Output("forceDelete")]
        public Output<bool> ForceDelete { get; private set; } = null!;

        /// <summary>
        /// Full Jitter BackOff Strategy.
        /// </summary>
        [Output("fullJitterBackoffStrategy")]
        public Output<Outputs.AwsConnectorFullJitterBackoffStrategy?> FullJitterBackoffStrategy { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Inherit credentials from the delegate.
        /// </summary>
        [Output("inheritFromDelegate")]
        public Output<Outputs.AwsConnectorInheritFromDelegate?> InheritFromDelegate { get; private set; } = null!;

        /// <summary>
        /// Use IAM role for service accounts.
        /// </summary>
        [Output("irsa")]
        public Output<Outputs.AwsConnectorIrsa?> Irsa { get; private set; } = null!;

        /// <summary>
        /// Use IAM role for service accounts.
        /// </summary>
        [Output("manual")]
        public Output<Outputs.AwsConnectorManual?> Manual { get; private set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Authentication using harness oidc.
        /// </summary>
        [Output("oidcAuthentication")]
        public Output<Outputs.AwsConnectorOidcAuthentication?> OidcAuthentication { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a AwsConnector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AwsConnector(string name, AwsConnectorArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/awsConnector:AwsConnector", name, args ?? new AwsConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AwsConnector(string name, Input<string> id, AwsConnectorState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/awsConnector:AwsConnector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AwsConnector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AwsConnector Get(string name, Input<string> id, AwsConnectorState? state = null, CustomResourceOptions? options = null)
        {
            return new AwsConnector(name, id, state, options);
        }
    }

    public sealed class AwsConnectorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.
        /// </summary>
        [Input("crossAccountAccess")]
        public Input<Inputs.AwsConnectorCrossAccountAccessArgs>? CrossAccountAccess { get; set; }

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Equal Jitter BackOff Strategy.
        /// </summary>
        [Input("equalJitterBackoffStrategy")]
        public Input<Inputs.AwsConnectorEqualJitterBackoffStrategyArgs>? EqualJitterBackoffStrategy { get; set; }

        /// <summary>
        /// Enable this flag to execute on Delegate
        /// </summary>
        [Input("executeOnDelegate")]
        public Input<bool>? ExecuteOnDelegate { get; set; }

        /// <summary>
        /// Fixed Delay BackOff Strategy.
        /// </summary>
        [Input("fixedDelayBackoffStrategy")]
        public Input<Inputs.AwsConnectorFixedDelayBackoffStrategyArgs>? FixedDelayBackoffStrategy { get; set; }

        /// <summary>
        /// Enable this flag for force deletion of connector
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        /// <summary>
        /// Full Jitter BackOff Strategy.
        /// </summary>
        [Input("fullJitterBackoffStrategy")]
        public Input<Inputs.AwsConnectorFullJitterBackoffStrategyArgs>? FullJitterBackoffStrategy { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Inherit credentials from the delegate.
        /// </summary>
        [Input("inheritFromDelegate")]
        public Input<Inputs.AwsConnectorInheritFromDelegateArgs>? InheritFromDelegate { get; set; }

        /// <summary>
        /// Use IAM role for service accounts.
        /// </summary>
        [Input("irsa")]
        public Input<Inputs.AwsConnectorIrsaArgs>? Irsa { get; set; }

        /// <summary>
        /// Use IAM role for service accounts.
        /// </summary>
        [Input("manual")]
        public Input<Inputs.AwsConnectorManualArgs>? Manual { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Authentication using harness oidc.
        /// </summary>
        [Input("oidcAuthentication")]
        public Input<Inputs.AwsConnectorOidcAuthenticationArgs>? OidcAuthentication { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public AwsConnectorArgs()
        {
        }
        public static new AwsConnectorArgs Empty => new AwsConnectorArgs();
    }

    public sealed class AwsConnectorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.
        /// </summary>
        [Input("crossAccountAccess")]
        public Input<Inputs.AwsConnectorCrossAccountAccessGetArgs>? CrossAccountAccess { get; set; }

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Equal Jitter BackOff Strategy.
        /// </summary>
        [Input("equalJitterBackoffStrategy")]
        public Input<Inputs.AwsConnectorEqualJitterBackoffStrategyGetArgs>? EqualJitterBackoffStrategy { get; set; }

        /// <summary>
        /// Enable this flag to execute on Delegate
        /// </summary>
        [Input("executeOnDelegate")]
        public Input<bool>? ExecuteOnDelegate { get; set; }

        /// <summary>
        /// Fixed Delay BackOff Strategy.
        /// </summary>
        [Input("fixedDelayBackoffStrategy")]
        public Input<Inputs.AwsConnectorFixedDelayBackoffStrategyGetArgs>? FixedDelayBackoffStrategy { get; set; }

        /// <summary>
        /// Enable this flag for force deletion of connector
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        /// <summary>
        /// Full Jitter BackOff Strategy.
        /// </summary>
        [Input("fullJitterBackoffStrategy")]
        public Input<Inputs.AwsConnectorFullJitterBackoffStrategyGetArgs>? FullJitterBackoffStrategy { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Inherit credentials from the delegate.
        /// </summary>
        [Input("inheritFromDelegate")]
        public Input<Inputs.AwsConnectorInheritFromDelegateGetArgs>? InheritFromDelegate { get; set; }

        /// <summary>
        /// Use IAM role for service accounts.
        /// </summary>
        [Input("irsa")]
        public Input<Inputs.AwsConnectorIrsaGetArgs>? Irsa { get; set; }

        /// <summary>
        /// Use IAM role for service accounts.
        /// </summary>
        [Input("manual")]
        public Input<Inputs.AwsConnectorManualGetArgs>? Manual { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Authentication using harness oidc.
        /// </summary>
        [Input("oidcAuthentication")]
        public Input<Inputs.AwsConnectorOidcAuthenticationGetArgs>? OidcAuthentication { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public AwsConnectorState()
        {
        }
        public static new AwsConnectorState Empty => new AwsConnectorState();
    }
}
