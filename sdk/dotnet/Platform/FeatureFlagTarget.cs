// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for managing Feature Flag Targets.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var target = new Harness.Platform.FeatureFlagTarget("target", new()
    ///     {
    ///         OrgId = "test",
    ///         ProjectId = "test",
    ///         Identifier = "MY_FEATURE",
    ///         Environment = "MY_ENVIRONMENT",
    ///         Name = "MY_FEATURE",
    ///         AccountId = "MY_ACCOUNT_ID",
    ///         Attributes = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/featureFlagTarget:FeatureFlagTarget")]
    public partial class FeatureFlagTarget : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account Identifier
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Attributes
        /// </summary>
        [Output("attributes")]
        public Output<ImmutableDictionary<string, string>> Attributes { get; private set; } = null!;

        /// <summary>
        /// Environment Identifier
        /// </summary>
        [Output("environment")]
        public Output<string> Environment { get; private set; } = null!;

        /// <summary>
        /// Identifier of the Feature Flag Target
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Target Name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Organization Identifier
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// Project Identifier
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;


        /// <summary>
        /// Create a FeatureFlagTarget resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FeatureFlagTarget(string name, FeatureFlagTargetArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/featureFlagTarget:FeatureFlagTarget", name, args ?? new FeatureFlagTargetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FeatureFlagTarget(string name, Input<string> id, FeatureFlagTargetState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/featureFlagTarget:FeatureFlagTarget", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FeatureFlagTarget resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FeatureFlagTarget Get(string name, Input<string> id, FeatureFlagTargetState? state = null, CustomResourceOptions? options = null)
        {
            return new FeatureFlagTarget(name, id, state, options);
        }
    }

    public sealed class FeatureFlagTargetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("attributes")]
        private InputMap<string>? _attributes;

        /// <summary>
        /// Attributes
        /// </summary>
        public InputMap<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<string>());
            set => _attributes = value;
        }

        /// <summary>
        /// Environment Identifier
        /// </summary>
        [Input("environment", required: true)]
        public Input<string> Environment { get; set; } = null!;

        /// <summary>
        /// Identifier of the Feature Flag Target
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Target Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Organization Identifier
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// Project Identifier
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public FeatureFlagTargetArgs()
        {
        }
        public static new FeatureFlagTargetArgs Empty => new FeatureFlagTargetArgs();
    }

    public sealed class FeatureFlagTargetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account Identifier
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("attributes")]
        private InputMap<string>? _attributes;

        /// <summary>
        /// Attributes
        /// </summary>
        public InputMap<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<string>());
            set => _attributes = value;
        }

        /// <summary>
        /// Environment Identifier
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// Identifier of the Feature Flag Target
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Target Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Organization Identifier
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project Identifier
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public FeatureFlagTargetState()
        {
        }
        public static new FeatureFlagTargetState Empty => new FeatureFlagTargetState();
    }
}
