// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetCurrentUser
    {
        /// <summary>
        /// Data source for retrieving the current user based on the API key.
        /// </summary>
        public static Task<GetCurrentUserResult> InvokeAsync(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCurrentUserResult>("harness:platform/getCurrentUser:getCurrentUser", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// Data source for retrieving the current user based on the API key.
        /// </summary>
        public static Output<GetCurrentUserResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCurrentUserResult>("harness:platform/getCurrentUser:getCurrentUser", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// Data source for retrieving the current user based on the API key.
        /// </summary>
        public static Output<GetCurrentUserResult> Invoke(InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCurrentUserResult>("harness:platform/getCurrentUser:getCurrentUser", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetCurrentUserResult
    {
        /// <summary>
        /// Whether the user is an administrator.
        /// </summary>
        public readonly bool Admin;
        /// <summary>
        /// Billing frequency of the user.
        /// </summary>
        public readonly string BillingFrequency;
        /// <summary>
        /// Default account ID of the user.
        /// </summary>
        public readonly string DefaultAccountId;
        /// <summary>
        /// Edition of the platform being used.
        /// </summary>
        public readonly string Edition;
        /// <summary>
        /// Email address of the user.
        /// </summary>
        public readonly string Email;
        /// <summary>
        /// Whether the user's email address has been verified.
        /// </summary>
        public readonly bool EmailVerified;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Intent of the user.
        /// </summary>
        public readonly string Intent;
        /// <summary>
        /// Whether 2FA is enabled for the user.
        /// </summary>
        public readonly bool IsTwoFactorAuthEnabled;
        /// <summary>
        /// Whether or not the user account is locked.
        /// </summary>
        public readonly bool Locked;
        /// <summary>
        /// Name of the user.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Signup action of the user.
        /// </summary>
        public readonly string SignupAction;
        /// <summary>
        /// Token used to authenticate the user.
        /// </summary>
        public readonly string Token;
        /// <summary>
        /// Unique identifier of the user.
        /// </summary>
        public readonly string Uuid;

        [OutputConstructor]
        private GetCurrentUserResult(
            bool admin,

            string billingFrequency,

            string defaultAccountId,

            string edition,

            string email,

            bool emailVerified,

            string id,

            string intent,

            bool isTwoFactorAuthEnabled,

            bool locked,

            string name,

            string signupAction,

            string token,

            string uuid)
        {
            Admin = admin;
            BillingFrequency = billingFrequency;
            DefaultAccountId = defaultAccountId;
            Edition = edition;
            Email = email;
            EmailVerified = emailVerified;
            Id = id;
            Intent = intent;
            IsTwoFactorAuthEnabled = isTwoFactorAuthEnabled;
            Locked = locked;
            Name = name;
            SignupAction = signupAction;
            Token = token;
            Uuid = uuid;
        }
    }
}
