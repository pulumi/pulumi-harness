// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetRepoWebhook
    {
        /// <summary>
        /// Data source for retrieving a Harness Repo Webhook.
        /// </summary>
        public static Task<GetRepoWebhookResult> InvokeAsync(GetRepoWebhookArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRepoWebhookResult>("harness:platform/getRepoWebhook:getRepoWebhook", args ?? new GetRepoWebhookArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Repo Webhook.
        /// </summary>
        public static Output<GetRepoWebhookResult> Invoke(GetRepoWebhookInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRepoWebhookResult>("harness:platform/getRepoWebhook:getRepoWebhook", args ?? new GetRepoWebhookInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Repo Webhook.
        /// </summary>
        public static Output<GetRepoWebhookResult> Invoke(GetRepoWebhookInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRepoWebhookResult>("harness:platform/getRepoWebhook:getRepoWebhook", args ?? new GetRepoWebhookInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRepoWebhookArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Description of the webhook.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Webhook enabled.
        /// </summary>
        [Input("enabled", required: true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Identifier of the webhook.
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        /// <summary>
        /// Allow insecure connections for provided webhook URL.
        /// </summary>
        [Input("insecure", required: true)]
        public bool Insecure { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// Identifier of the repository.
        /// </summary>
        [Input("repoIdentifier", required: true)]
        public string RepoIdentifier { get; set; } = null!;

        [Input("secret")]
        private string? _secret;

        /// <summary>
        /// Webhook secret which will be used to sign the webhook payload.
        /// </summary>
        public string? Secret
        {
            get => _secret;
            set => _secret = value;
        }

        [Input("triggers")]
        private List<string>? _triggers;

        /// <summary>
        /// List of triggers of the webhook (keep empty for all triggers).
        /// </summary>
        public List<string> Triggers
        {
            get => _triggers ?? (_triggers = new List<string>());
            set => _triggers = value;
        }

        /// <summary>
        /// URL that's called by the webhook.
        /// </summary>
        [Input("url", required: true)]
        public string Url { get; set; } = null!;

        public GetRepoWebhookArgs()
        {
        }
        public static new GetRepoWebhookArgs Empty => new GetRepoWebhookArgs();
    }

    public sealed class GetRepoWebhookInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Description of the webhook.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Webhook enabled.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Identifier of the webhook.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Allow insecure connections for provided webhook URL.
        /// </summary>
        [Input("insecure", required: true)]
        public Input<bool> Insecure { get; set; } = null!;

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Identifier of the repository.
        /// </summary>
        [Input("repoIdentifier", required: true)]
        public Input<string> RepoIdentifier { get; set; } = null!;

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// Webhook secret which will be used to sign the webhook payload.
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("triggers")]
        private InputList<string>? _triggers;

        /// <summary>
        /// List of triggers of the webhook (keep empty for all triggers).
        /// </summary>
        public InputList<string> Triggers
        {
            get => _triggers ?? (_triggers = new InputList<string>());
            set => _triggers = value;
        }

        /// <summary>
        /// URL that's called by the webhook.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public GetRepoWebhookInvokeArgs()
        {
        }
        public static new GetRepoWebhookInvokeArgs Empty => new GetRepoWebhookInvokeArgs();
    }


    [OutputType]
    public sealed class GetRepoWebhookResult
    {
        /// <summary>
        /// Timestamp when the webhook was created.
        /// </summary>
        public readonly int Created;
        /// <summary>
        /// ID of the user who created the webhook.
        /// </summary>
        public readonly int CreatedBy;
        /// <summary>
        /// Description of the webhook.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Webhook enabled.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Created webhook has secret encoding.
        /// </summary>
        public readonly bool HasSecret;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identifier of the webhook.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// Allow insecure connections for provided webhook URL.
        /// </summary>
        public readonly bool Insecure;
        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Identifier of the repository.
        /// </summary>
        public readonly string RepoIdentifier;
        /// <summary>
        /// Webhook secret which will be used to sign the webhook payload.
        /// </summary>
        public readonly string? Secret;
        /// <summary>
        /// List of triggers of the webhook (keep empty for all triggers).
        /// </summary>
        public readonly ImmutableArray<string> Triggers;
        /// <summary>
        /// URL that's called by the webhook.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GetRepoWebhookResult(
            int created,

            int createdBy,

            string? description,

            bool enabled,

            bool hasSecret,

            string id,

            string identifier,

            bool insecure,

            string? orgId,

            string? projectId,

            string repoIdentifier,

            string? secret,

            ImmutableArray<string> triggers,

            string url)
        {
            Created = created;
            CreatedBy = createdBy;
            Description = description;
            Enabled = enabled;
            HasSecret = hasSecret;
            Id = id;
            Identifier = identifier;
            Insecure = insecure;
            OrgId = orgId;
            ProjectId = projectId;
            RepoIdentifier = repoIdentifier;
            Secret = secret;
            Triggers = triggers;
            Url = url;
        }
    }
}
