// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating a Harness Notification Rule for Pipeline
    /// </summary>
    [HarnessResourceType("harness:platform/pipelineCentralNotificationRule:PipelineCentralNotificationRule")]
    public partial class PipelineCentralNotificationRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account identifier associated with this notification channel.
        /// </summary>
        [Output("account")]
        public Output<string> Account { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the notification rule was created.
        /// </summary>
        [Output("created")]
        public Output<int> Created { get; private set; } = null!;

        [Output("customNotificationTemplateRef")]
        public Output<Outputs.PipelineCentralNotificationRuleCustomNotificationTemplateRef?> CustomNotificationTemplateRef { get; private set; } = null!;

        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the notification rule was last modified.
        /// </summary>
        [Output("lastModified")]
        public Output<int> LastModified { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("notificationChannelRefs")]
        public Output<ImmutableArray<string>> NotificationChannelRefs { get; private set; } = null!;

        [Output("notificationConditions")]
        public Output<ImmutableArray<Outputs.PipelineCentralNotificationRuleNotificationCondition>> NotificationConditions { get; private set; } = null!;

        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        [Output("project")]
        public Output<string?> Project { get; private set; } = null!;

        /// <summary>
        /// Status of the notification rule. Supported values: `ENABLED`, `DISABLED`. Default: `ENABLED`.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;


        /// <summary>
        /// Create a PipelineCentralNotificationRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PipelineCentralNotificationRule(string name, PipelineCentralNotificationRuleArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/pipelineCentralNotificationRule:PipelineCentralNotificationRule", name, args ?? new PipelineCentralNotificationRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PipelineCentralNotificationRule(string name, Input<string> id, PipelineCentralNotificationRuleState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/pipelineCentralNotificationRule:PipelineCentralNotificationRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PipelineCentralNotificationRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PipelineCentralNotificationRule Get(string name, Input<string> id, PipelineCentralNotificationRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new PipelineCentralNotificationRule(name, id, state, options);
        }
    }

    public sealed class PipelineCentralNotificationRuleArgs : global::Pulumi.ResourceArgs
    {
        [Input("customNotificationTemplateRef")]
        public Input<Inputs.PipelineCentralNotificationRuleCustomNotificationTemplateRefArgs>? CustomNotificationTemplateRef { get; set; }

        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationChannelRefs", required: true)]
        private InputList<string>? _notificationChannelRefs;
        public InputList<string> NotificationChannelRefs
        {
            get => _notificationChannelRefs ?? (_notificationChannelRefs = new InputList<string>());
            set => _notificationChannelRefs = value;
        }

        [Input("notificationConditions", required: true)]
        private InputList<Inputs.PipelineCentralNotificationRuleNotificationConditionArgs>? _notificationConditions;
        public InputList<Inputs.PipelineCentralNotificationRuleNotificationConditionArgs> NotificationConditions
        {
            get => _notificationConditions ?? (_notificationConditions = new InputList<Inputs.PipelineCentralNotificationRuleNotificationConditionArgs>());
            set => _notificationConditions = value;
        }

        [Input("org")]
        public Input<string>? Org { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Status of the notification rule. Supported values: `ENABLED`, `DISABLED`. Default: `ENABLED`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public PipelineCentralNotificationRuleArgs()
        {
        }
        public static new PipelineCentralNotificationRuleArgs Empty => new PipelineCentralNotificationRuleArgs();
    }

    public sealed class PipelineCentralNotificationRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account identifier associated with this notification channel.
        /// </summary>
        [Input("account")]
        public Input<string>? Account { get; set; }

        /// <summary>
        /// Timestamp when the notification rule was created.
        /// </summary>
        [Input("created")]
        public Input<int>? Created { get; set; }

        [Input("customNotificationTemplateRef")]
        public Input<Inputs.PipelineCentralNotificationRuleCustomNotificationTemplateRefGetArgs>? CustomNotificationTemplateRef { get; set; }

        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Timestamp when the notification rule was last modified.
        /// </summary>
        [Input("lastModified")]
        public Input<int>? LastModified { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationChannelRefs")]
        private InputList<string>? _notificationChannelRefs;
        public InputList<string> NotificationChannelRefs
        {
            get => _notificationChannelRefs ?? (_notificationChannelRefs = new InputList<string>());
            set => _notificationChannelRefs = value;
        }

        [Input("notificationConditions")]
        private InputList<Inputs.PipelineCentralNotificationRuleNotificationConditionGetArgs>? _notificationConditions;
        public InputList<Inputs.PipelineCentralNotificationRuleNotificationConditionGetArgs> NotificationConditions
        {
            get => _notificationConditions ?? (_notificationConditions = new InputList<Inputs.PipelineCentralNotificationRuleNotificationConditionGetArgs>());
            set => _notificationConditions = value;
        }

        [Input("org")]
        public Input<string>? Org { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Status of the notification rule. Supported values: `ENABLED`, `DISABLED`. Default: `ENABLED`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public PipelineCentralNotificationRuleState()
        {
        }
        public static new PipelineCentralNotificationRuleState Empty => new PipelineCentralNotificationRuleState();
    }
}
