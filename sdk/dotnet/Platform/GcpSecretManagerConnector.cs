// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var gcpSmManual = new Harness.Platform.GcpSecretManagerConnector("gcp_sm_manual", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///         Description = "test",
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///         },
    ///         DelegateSelectors = new[]
    ///         {
    ///             "harness-delegate",
    ///         },
    ///         CredentialsRef = $"account.{test.Id}",
    ///     });
    /// 
    ///     var gcpSmInherit = new Harness.Platform.GcpSecretManagerConnector("gcp_sm_inherit", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///         Description = "test",
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///         },
    ///         DelegateSelectors = new[]
    ///         {
    ///             "harness-delegate",
    ///         },
    ///         InheritFromDelegate = true,
    ///     });
    /// 
    ///     var gcpSmOidcPlatform = new Harness.Platform.GcpSecretManagerConnector("gcp_sm_oidc_platform", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///         Description = "test",
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///         },
    ///         ExecuteOnDelegate = false,
    ///         OidcAuthentications = new[]
    ///         {
    ///             new Harness.Platform.Inputs.GcpSecretManagerConnectorOidcAuthenticationArgs
    ///             {
    ///                 WorkloadPoolId = "harness-pool-test",
    ///                 ProviderId = "harness",
    ///                 GcpProjectId = "1234567",
    ///                 ServiceAccountEmail = "harness.sample@iam.gserviceaccount.com",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var gcpSmOidcDelegate = new Harness.Platform.GcpSecretManagerConnector("gcp_sm_oidc_delegate", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///         Description = "test",
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///         },
    ///         IsDefault = true,
    ///         DelegateSelectors = new[]
    ///         {
    ///             "harness-delegate",
    ///         },
    ///         OidcAuthentications = new[]
    ///         {
    ///             new Harness.Platform.Inputs.GcpSecretManagerConnectorOidcAuthenticationArgs
    ///             {
    ///                 WorkloadPoolId = "harness-pool-test",
    ///                 ProviderId = "harness",
    ///                 GcpProjectId = "1234567",
    ///                 ServiceAccountEmail = "harness.sample@iam.gserviceaccount.com",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Import account level gcp secret manager connector
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/gcpSecretManagerConnector:GcpSecretManagerConnector example &lt;connector_id&gt;
    /// ```
    /// 
    /// Import org level gcp secret manager connector
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/gcpSecretManagerConnector:GcpSecretManagerConnector example &lt;ord_id&gt;/&lt;connector_id&gt;
    /// ```
    /// 
    /// Import project level gcp secret manager connector
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/gcpSecretManagerConnector:GcpSecretManagerConnector example &lt;org_id&gt;/&lt;project_id&gt;/&lt;connector_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/gcpSecretManagerConnector:GcpSecretManagerConnector")]
    public partial class GcpSecretManagerConnector : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Reference to the secret containing credentials of IAM service account for Google Secret Manager. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        /// </summary>
        [Output("credentialsRef")]
        public Output<string?> CredentialsRef { get; private set; } = null!;

        /// <summary>
        /// The delegates to inherit the credentials from.
        /// </summary>
        [Output("delegateSelectors")]
        public Output<ImmutableArray<string>> DelegateSelectors { get; private set; } = null!;

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Execute on delegate or not.
        /// </summary>
        [Output("executeOnDelegate")]
        public Output<bool?> ExecuteOnDelegate { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Inherit configuration from delegate.
        /// </summary>
        [Output("inheritFromDelegate")]
        public Output<bool?> InheritFromDelegate { get; private set; } = null!;

        /// <summary>
        /// Set this flag to set this secret manager as default secret manager.
        /// </summary>
        [Output("isDefault")]
        public Output<bool?> IsDefault { get; private set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Authentication using harness oidc.
        /// </summary>
        [Output("oidcAuthentications")]
        public Output<ImmutableArray<Outputs.GcpSecretManagerConnectorOidcAuthentication>> OidcAuthentications { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a GcpSecretManagerConnector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GcpSecretManagerConnector(string name, GcpSecretManagerConnectorArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/gcpSecretManagerConnector:GcpSecretManagerConnector", name, args ?? new GcpSecretManagerConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GcpSecretManagerConnector(string name, Input<string> id, GcpSecretManagerConnectorState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/gcpSecretManagerConnector:GcpSecretManagerConnector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GcpSecretManagerConnector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GcpSecretManagerConnector Get(string name, Input<string> id, GcpSecretManagerConnectorState? state = null, CustomResourceOptions? options = null)
        {
            return new GcpSecretManagerConnector(name, id, state, options);
        }
    }

    public sealed class GcpSecretManagerConnectorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Reference to the secret containing credentials of IAM service account for Google Secret Manager. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        /// </summary>
        [Input("credentialsRef")]
        public Input<string>? CredentialsRef { get; set; }

        [Input("delegateSelectors")]
        private InputList<string>? _delegateSelectors;

        /// <summary>
        /// The delegates to inherit the credentials from.
        /// </summary>
        public InputList<string> DelegateSelectors
        {
            get => _delegateSelectors ?? (_delegateSelectors = new InputList<string>());
            set => _delegateSelectors = value;
        }

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Execute on delegate or not.
        /// </summary>
        [Input("executeOnDelegate")]
        public Input<bool>? ExecuteOnDelegate { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Inherit configuration from delegate.
        /// </summary>
        [Input("inheritFromDelegate")]
        public Input<bool>? InheritFromDelegate { get; set; }

        /// <summary>
        /// Set this flag to set this secret manager as default secret manager.
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("oidcAuthentications")]
        private InputList<Inputs.GcpSecretManagerConnectorOidcAuthenticationArgs>? _oidcAuthentications;

        /// <summary>
        /// Authentication using harness oidc.
        /// </summary>
        public InputList<Inputs.GcpSecretManagerConnectorOidcAuthenticationArgs> OidcAuthentications
        {
            get => _oidcAuthentications ?? (_oidcAuthentications = new InputList<Inputs.GcpSecretManagerConnectorOidcAuthenticationArgs>());
            set => _oidcAuthentications = value;
        }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public GcpSecretManagerConnectorArgs()
        {
        }
        public static new GcpSecretManagerConnectorArgs Empty => new GcpSecretManagerConnectorArgs();
    }

    public sealed class GcpSecretManagerConnectorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Reference to the secret containing credentials of IAM service account for Google Secret Manager. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        /// </summary>
        [Input("credentialsRef")]
        public Input<string>? CredentialsRef { get; set; }

        [Input("delegateSelectors")]
        private InputList<string>? _delegateSelectors;

        /// <summary>
        /// The delegates to inherit the credentials from.
        /// </summary>
        public InputList<string> DelegateSelectors
        {
            get => _delegateSelectors ?? (_delegateSelectors = new InputList<string>());
            set => _delegateSelectors = value;
        }

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Execute on delegate or not.
        /// </summary>
        [Input("executeOnDelegate")]
        public Input<bool>? ExecuteOnDelegate { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Inherit configuration from delegate.
        /// </summary>
        [Input("inheritFromDelegate")]
        public Input<bool>? InheritFromDelegate { get; set; }

        /// <summary>
        /// Set this flag to set this secret manager as default secret manager.
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("oidcAuthentications")]
        private InputList<Inputs.GcpSecretManagerConnectorOidcAuthenticationGetArgs>? _oidcAuthentications;

        /// <summary>
        /// Authentication using harness oidc.
        /// </summary>
        public InputList<Inputs.GcpSecretManagerConnectorOidcAuthenticationGetArgs> OidcAuthentications
        {
            get => _oidcAuthentications ?? (_oidcAuthentications = new InputList<Inputs.GcpSecretManagerConnectorOidcAuthenticationGetArgs>());
            set => _oidcAuthentications = value;
        }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public GcpSecretManagerConnectorState()
        {
        }
        public static new GcpSecretManagerConnectorState Empty => new GcpSecretManagerConnectorState();
    }
}
