// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for managing a Harness Gitops Cluster.
    /// 
    /// ## Import
    /// 
    /// Import an Account level Gitops Cluster
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/gitOpsCluster:GitOpsCluster example &lt;agent_id&gt;/&lt;cluster_id&gt;
    /// ```
    /// 
    /// Import an Org level Gitops Cluster
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/gitOpsCluster:GitOpsCluster example &lt;organization_id&gt;/&lt;agent_id&gt;/&lt;cluster_id&gt;
    /// ```
    /// 
    /// Import a Project level Gitops Cluster
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/gitOpsCluster:GitOpsCluster example &lt;organization_id&gt;/&lt;project_id&gt;/&lt;agent_id&gt;/&lt;cluster_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/gitOpsCluster:GitOpsCluster")]
    public partial class GitOpsCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account identifier of the GitOps cluster.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Agent identifier of the GitOps cluster. (include scope prefix)
        /// </summary>
        [Output("agentId")]
        public Output<string> AgentId { get; private set; } = null!;

        /// <summary>
        /// Indicates if the cluster should be deleted forcefully, regardless of existing applications using that cluster.
        /// </summary>
        [Output("forceDelete")]
        public Output<bool?> ForceDelete { get; private set; } = null!;

        /// <summary>
        /// Identifier of the GitOps cluster.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Organization identifier of the cluster.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Project identifier of the GitOps cluster.
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Cluster create or update request.
        /// </summary>
        [Output("requests")]
        public Output<ImmutableArray<Outputs.GitOpsClusterRequest>> Requests { get; private set; } = null!;


        /// <summary>
        /// Create a GitOpsCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GitOpsCluster(string name, GitOpsClusterArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/gitOpsCluster:GitOpsCluster", name, args ?? new GitOpsClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GitOpsCluster(string name, Input<string> id, GitOpsClusterState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/gitOpsCluster:GitOpsCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GitOpsCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GitOpsCluster Get(string name, Input<string> id, GitOpsClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new GitOpsCluster(name, id, state, options);
        }
    }

    public sealed class GitOpsClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account identifier of the GitOps cluster.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Agent identifier of the GitOps cluster. (include scope prefix)
        /// </summary>
        [Input("agentId", required: true)]
        public Input<string> AgentId { get; set; } = null!;

        /// <summary>
        /// Indicates if the cluster should be deleted forcefully, regardless of existing applications using that cluster.
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        /// <summary>
        /// Identifier of the GitOps cluster.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Organization identifier of the cluster.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the GitOps cluster.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("requests")]
        private InputList<Inputs.GitOpsClusterRequestArgs>? _requests;

        /// <summary>
        /// Cluster create or update request.
        /// </summary>
        public InputList<Inputs.GitOpsClusterRequestArgs> Requests
        {
            get => _requests ?? (_requests = new InputList<Inputs.GitOpsClusterRequestArgs>());
            set => _requests = value;
        }

        public GitOpsClusterArgs()
        {
        }
        public static new GitOpsClusterArgs Empty => new GitOpsClusterArgs();
    }

    public sealed class GitOpsClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account identifier of the GitOps cluster.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Agent identifier of the GitOps cluster. (include scope prefix)
        /// </summary>
        [Input("agentId")]
        public Input<string>? AgentId { get; set; }

        /// <summary>
        /// Indicates if the cluster should be deleted forcefully, regardless of existing applications using that cluster.
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        /// <summary>
        /// Identifier of the GitOps cluster.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Organization identifier of the cluster.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the GitOps cluster.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("requests")]
        private InputList<Inputs.GitOpsClusterRequestGetArgs>? _requests;

        /// <summary>
        /// Cluster create or update request.
        /// </summary>
        public InputList<Inputs.GitOpsClusterRequestGetArgs> Requests
        {
            get => _requests ?? (_requests = new InputList<Inputs.GitOpsClusterRequestGetArgs>());
            set => _requests = value;
        }

        public GitOpsClusterState()
        {
        }
        public static new GitOpsClusterState Empty => new GitOpsClusterState();
    }
}
