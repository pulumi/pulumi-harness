// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for a Harness Custom Dashboard.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Harness.Platform.Dashboards("example", new()
    ///     {
    ///         DashboardId = "48507",
    ///         Description = "Example dashboard description",
    ///         ResourceIdentifier = "shared",
    ///         Title = "Example Dashboard",
    ///         DataSources = new[] {},
    ///         Models = new[] {},
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/dashboards:Dashboards")]
    public partial class Dashboards : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Created at timestamp of the Dashboard.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the Template Dashboard to create from.
        /// </summary>
        [Output("dashboardId")]
        public Output<string> DashboardId { get; private set; } = null!;

        /// <summary>
        /// Data Sources within the Dashboard.
        /// </summary>
        [Output("dataSources")]
        public Output<ImmutableArray<string>> DataSources { get; private set; } = null!;

        /// <summary>
        /// Description of the Dashboard.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Favorite count of the dashboard.
        /// </summary>
        [Output("favoriteCount")]
        public Output<int> FavoriteCount { get; private set; } = null!;

        /// <summary>
        /// The Folder ID that the Dashboard belongs to.
        /// </summary>
        [Output("folderId")]
        public Output<string?> FolderId { get; private set; } = null!;

        /// <summary>
        /// Last accessed at timestamp of the Dashboard.
        /// </summary>
        [Output("lastAccessedAt")]
        public Output<string> LastAccessedAt { get; private set; } = null!;

        /// <summary>
        /// Data Models within the Dashboard.
        /// </summary>
        [Output("models")]
        public Output<ImmutableArray<string>> Models { get; private set; } = null!;

        /// <summary>
        /// Name of the Dashboard.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Folder ID that the Dashboard belongs to.
        /// </summary>
        [Output("resourceIdentifier")]
        public Output<string> ResourceIdentifier { get; private set; } = null!;

        /// <summary>
        /// Title of the Dashboard.
        /// </summary>
        [Output("title")]
        public Output<string?> Title { get; private set; } = null!;

        /// <summary>
        /// Type of the dashboard.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// View count of the dashboard.
        /// </summary>
        [Output("viewCount")]
        public Output<int> ViewCount { get; private set; } = null!;


        /// <summary>
        /// Create a Dashboards resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Dashboards(string name, DashboardsArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/dashboards:Dashboards", name, args ?? new DashboardsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Dashboards(string name, Input<string> id, DashboardsState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/dashboards:Dashboards", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Dashboards resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Dashboards Get(string name, Input<string> id, DashboardsState? state = null, CustomResourceOptions? options = null)
        {
            return new Dashboards(name, id, state, options);
        }
    }

    public sealed class DashboardsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Created at timestamp of the Dashboard.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Unique identifier of the Template Dashboard to create from.
        /// </summary>
        [Input("dashboardId", required: true)]
        public Input<string> DashboardId { get; set; } = null!;

        [Input("dataSources")]
        private InputList<string>? _dataSources;

        /// <summary>
        /// Data Sources within the Dashboard.
        /// </summary>
        public InputList<string> DataSources
        {
            get => _dataSources ?? (_dataSources = new InputList<string>());
            set => _dataSources = value;
        }

        /// <summary>
        /// Description of the Dashboard.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Folder ID that the Dashboard belongs to.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("models")]
        private InputList<string>? _models;

        /// <summary>
        /// Data Models within the Dashboard.
        /// </summary>
        public InputList<string> Models
        {
            get => _models ?? (_models = new InputList<string>());
            set => _models = value;
        }

        /// <summary>
        /// Name of the Dashboard.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Folder ID that the Dashboard belongs to.
        /// </summary>
        [Input("resourceIdentifier", required: true)]
        public Input<string> ResourceIdentifier { get; set; } = null!;

        /// <summary>
        /// Title of the Dashboard.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// Type of the dashboard.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// View count of the dashboard.
        /// </summary>
        [Input("viewCount")]
        public Input<int>? ViewCount { get; set; }

        public DashboardsArgs()
        {
        }
        public static new DashboardsArgs Empty => new DashboardsArgs();
    }

    public sealed class DashboardsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Created at timestamp of the Dashboard.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Unique identifier of the Template Dashboard to create from.
        /// </summary>
        [Input("dashboardId")]
        public Input<string>? DashboardId { get; set; }

        [Input("dataSources")]
        private InputList<string>? _dataSources;

        /// <summary>
        /// Data Sources within the Dashboard.
        /// </summary>
        public InputList<string> DataSources
        {
            get => _dataSources ?? (_dataSources = new InputList<string>());
            set => _dataSources = value;
        }

        /// <summary>
        /// Description of the Dashboard.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Favorite count of the dashboard.
        /// </summary>
        [Input("favoriteCount")]
        public Input<int>? FavoriteCount { get; set; }

        /// <summary>
        /// The Folder ID that the Dashboard belongs to.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// Last accessed at timestamp of the Dashboard.
        /// </summary>
        [Input("lastAccessedAt")]
        public Input<string>? LastAccessedAt { get; set; }

        [Input("models")]
        private InputList<string>? _models;

        /// <summary>
        /// Data Models within the Dashboard.
        /// </summary>
        public InputList<string> Models
        {
            get => _models ?? (_models = new InputList<string>());
            set => _models = value;
        }

        /// <summary>
        /// Name of the Dashboard.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Folder ID that the Dashboard belongs to.
        /// </summary>
        [Input("resourceIdentifier")]
        public Input<string>? ResourceIdentifier { get; set; }

        /// <summary>
        /// Title of the Dashboard.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// Type of the dashboard.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// View count of the dashboard.
        /// </summary>
        [Input("viewCount")]
        public Input<int>? ViewCount { get; set; }

        public DashboardsState()
        {
        }
        public static new DashboardsState Empty => new DashboardsState();
    }
}
