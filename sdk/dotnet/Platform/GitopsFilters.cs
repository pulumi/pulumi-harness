// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating Harness GitOps Filters.
    /// </summary>
    [HarnessResourceType("harness:platform/gitopsFilters:GitopsFilters")]
    public partial class GitopsFilters : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Properties of the filters entity defined in Harness as a JSON string. All values should be arrays of strings. Example: jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})
        /// </summary>
        [Output("filterProperties")]
        public Output<string> FilterProperties { get; private set; } = null!;

        /// <summary>
        /// This indicates visibility of filters, by default it is Everyone.
        /// </summary>
        [Output("filterVisibility")]
        public Output<string?> FilterVisibility { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Name of the GitOps filters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Organization Identifier for the Entity.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// Project Identifier for the Entity.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Type of GitOps filters.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a GitopsFilters resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GitopsFilters(string name, GitopsFiltersArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/gitopsFilters:GitopsFilters", name, args ?? new GitopsFiltersArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GitopsFilters(string name, Input<string> id, GitopsFiltersState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/gitopsFilters:GitopsFilters", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GitopsFilters resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GitopsFilters Get(string name, Input<string> id, GitopsFiltersState? state = null, CustomResourceOptions? options = null)
        {
            return new GitopsFilters(name, id, state, options);
        }
    }

    public sealed class GitopsFiltersArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Properties of the filters entity defined in Harness as a JSON string. All values should be arrays of strings. Example: jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})
        /// </summary>
        [Input("filterProperties", required: true)]
        public Input<string> FilterProperties { get; set; } = null!;

        /// <summary>
        /// This indicates visibility of filters, by default it is Everyone.
        /// </summary>
        [Input("filterVisibility")]
        public Input<string>? FilterVisibility { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the GitOps filters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Organization Identifier for the Entity.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// Project Identifier for the Entity.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Type of GitOps filters.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public GitopsFiltersArgs()
        {
        }
        public static new GitopsFiltersArgs Empty => new GitopsFiltersArgs();
    }

    public sealed class GitopsFiltersState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Properties of the filters entity defined in Harness as a JSON string. All values should be arrays of strings. Example: jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})
        /// </summary>
        [Input("filterProperties")]
        public Input<string>? FilterProperties { get; set; }

        /// <summary>
        /// This indicates visibility of filters, by default it is Everyone.
        /// </summary>
        [Input("filterVisibility")]
        public Input<string>? FilterVisibility { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Name of the GitOps filters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Organization Identifier for the Entity.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project Identifier for the Entity.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Type of GitOps filters.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GitopsFiltersState()
        {
        }
        public static new GitopsFiltersState Empty => new GitopsFiltersState();
    }
}
