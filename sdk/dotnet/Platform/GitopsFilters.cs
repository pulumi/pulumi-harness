// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating and managing Harness GitOps Filters.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Harness.Platform.GitopsFilters("example", new()
    ///     {
    ///         Name = "example_filter",
    ///         OrgId = "your_org_id",
    ///         ProjectId = "your_project_id",
    ///         Identifier = "example_filter",
    ///         Type = "APPLICATION",
    ///         FilterProperties = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["agentIdentifiers"] = new[]
    ///             {
    ///                 "your_agent_identifier",
    ///             },
    ///             ["clusters"] = new[]
    ///             {
    ///                 "https://your-cluster-url",
    ///             },
    ///             ["healthStatus"] = new[]
    ///             {
    ///                 "Unknown",
    ///                 "Progressing",
    ///                 "Suspended",
    ///                 "Healthy",
    ///                 "Degraded",
    ///                 "Missing",
    ///             },
    ///             ["namespaces"] = new[]
    ///             {
    ///                 "your-namespace",
    ///             },
    ///             ["repositories"] = new[]
    ///             {
    ///                 "your-repo",
    ///             },
    ///             ["syncStatus"] = new[]
    ///             {
    ///                 "OutOfSync",
    ///                 "Synced",
    ///                 "Unknown",
    ///             },
    ///         }),
    ///         FilterVisibility = "OnlyCreator",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Filter Properties Reference
    /// 
    /// The `filter_properties` field supports the following filter types:
    /// 
    /// &gt; **Note:** The following filter properties are only valid for filter type "APPLICATION". Different filter types may support different properties.
    /// 
    /// * `agentIdentifiers` - Array of GitOps agent identifiers to filter by.
    /// * `clusters` - Array of cluster URLs to filter by.
    /// * `healthStatus` - Array of health status values to filter by. Valid values include: "Unknown", "Progressing", "Suspended", "Healthy", "Degraded", "Missing".
    /// * `namespaces` - Array of Kubernetes namespaces to filter by.
    /// * `repositories` - Array of Git repository URLs to filter by.
    /// * `syncStatus` - Array of sync status values to filter by. Valid values include: "OutOfSync", "Synced", "Unknown".
    /// 
    /// ## Schema Attributes Reference
    /// 
    /// * `id` - Identifier of the GitOps filter.
    /// 
    /// ## Import
    /// 
    /// GitOps filters can be imported using a composite ID formed of organization ID, project ID, filter ID, and filter type.
    /// 
    /// bash
    /// 
    /// Format: &lt;org_id&gt;/&lt;project_id&gt;/&lt;filter_id&gt;/&lt;filter_type&gt;
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/gitopsFilters:GitopsFilters example org_id/project_id/filter_id/APPLICATION
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/gitopsFilters:GitopsFilters")]
    public partial class GitopsFilters : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Properties of the filter entity defined in Harness as a JSON string. All values should be arrays of strings. Example: `jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})`.
        /// </summary>
        [Output("filterProperties")]
        public Output<string> FilterProperties { get; private set; } = null!;

        /// <summary>
        /// Visibility of the filter. Valid values are "EveryOne" and "OnlyCreator". Default is "EveryOne".
        /// </summary>
        [Output("filterVisibility")]
        public Output<string?> FilterVisibility { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the GitOps filter.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Name of the GitOps filter.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Organization identifier for the GitOps filter.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// Project identifier for the GitOps filter.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Type of GitOps filter. Currently, only "APPLICATION" is supported.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a GitopsFilters resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GitopsFilters(string name, GitopsFiltersArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/gitopsFilters:GitopsFilters", name, args ?? new GitopsFiltersArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GitopsFilters(string name, Input<string> id, GitopsFiltersState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/gitopsFilters:GitopsFilters", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GitopsFilters resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GitopsFilters Get(string name, Input<string> id, GitopsFiltersState? state = null, CustomResourceOptions? options = null)
        {
            return new GitopsFilters(name, id, state, options);
        }
    }

    public sealed class GitopsFiltersArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Properties of the filter entity defined in Harness as a JSON string. All values should be arrays of strings. Example: `jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})`.
        /// </summary>
        [Input("filterProperties", required: true)]
        public Input<string> FilterProperties { get; set; } = null!;

        /// <summary>
        /// Visibility of the filter. Valid values are "EveryOne" and "OnlyCreator". Default is "EveryOne".
        /// </summary>
        [Input("filterVisibility")]
        public Input<string>? FilterVisibility { get; set; }

        /// <summary>
        /// Unique identifier of the GitOps filter.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the GitOps filter.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Organization identifier for the GitOps filter.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// Project identifier for the GitOps filter.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Type of GitOps filter. Currently, only "APPLICATION" is supported.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public GitopsFiltersArgs()
        {
        }
        public static new GitopsFiltersArgs Empty => new GitopsFiltersArgs();
    }

    public sealed class GitopsFiltersState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Properties of the filter entity defined in Harness as a JSON string. All values should be arrays of strings. Example: `jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})`.
        /// </summary>
        [Input("filterProperties")]
        public Input<string>? FilterProperties { get; set; }

        /// <summary>
        /// Visibility of the filter. Valid values are "EveryOne" and "OnlyCreator". Default is "EveryOne".
        /// </summary>
        [Input("filterVisibility")]
        public Input<string>? FilterVisibility { get; set; }

        /// <summary>
        /// Unique identifier of the GitOps filter.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Name of the GitOps filter.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Organization identifier for the GitOps filter.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project identifier for the GitOps filter.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Type of GitOps filter. Currently, only "APPLICATION" is supported.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GitopsFiltersState()
        {
        }
        public static new GitopsFiltersState Empty => new GitopsFiltersState();
    }
}
