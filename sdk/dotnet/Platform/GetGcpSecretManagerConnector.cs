// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetGcpSecretManagerConnector
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetGcpSecretManagerConnector.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetGcpSecretManagerConnectorResult> InvokeAsync(GetGcpSecretManagerConnectorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGcpSecretManagerConnectorResult>("harness:platform/getGcpSecretManagerConnector:getGcpSecretManagerConnector", args ?? new GetGcpSecretManagerConnectorArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetGcpSecretManagerConnector.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGcpSecretManagerConnectorResult> Invoke(GetGcpSecretManagerConnectorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGcpSecretManagerConnectorResult>("harness:platform/getGcpSecretManagerConnector:getGcpSecretManagerConnector", args ?? new GetGcpSecretManagerConnectorInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetGcpSecretManagerConnector.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGcpSecretManagerConnectorResult> Invoke(GetGcpSecretManagerConnectorInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGcpSecretManagerConnectorResult>("harness:platform/getGcpSecretManagerConnector:getGcpSecretManagerConnector", args ?? new GetGcpSecretManagerConnectorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGcpSecretManagerConnectorArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetGcpSecretManagerConnectorArgs()
        {
        }
        public static new GetGcpSecretManagerConnectorArgs Empty => new GetGcpSecretManagerConnectorArgs();
    }

    public sealed class GetGcpSecretManagerConnectorInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetGcpSecretManagerConnectorInvokeArgs()
        {
        }
        public static new GetGcpSecretManagerConnectorInvokeArgs Empty => new GetGcpSecretManagerConnectorInvokeArgs();
    }


    [OutputType]
    public sealed class GetGcpSecretManagerConnectorResult
    {
        /// <summary>
        /// Reference to the secret containing credentials of IAM service account for Google Secret Manager. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        /// </summary>
        public readonly string CredentialsRef;
        /// <summary>
        /// The delegates to inherit the credentials from.
        /// </summary>
        public readonly ImmutableArray<string> DelegateSelectors;
        /// <summary>
        /// Description of the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Execute on delegate or not.
        /// </summary>
        public readonly bool ExecuteOnDelegate;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// Inherit configuration from delegate.
        /// </summary>
        public readonly bool InheritFromDelegate;
        /// <summary>
        /// Set this flag to set this secret manager as default secret manager.
        /// </summary>
        public readonly bool IsDefault;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Authentication using harness oidc.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGcpSecretManagerConnectorOidcAuthenticationResult> OidcAuthentications;
        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetGcpSecretManagerConnectorResult(
            string credentialsRef,

            ImmutableArray<string> delegateSelectors,

            string description,

            bool executeOnDelegate,

            string id,

            string identifier,

            bool inheritFromDelegate,

            bool isDefault,

            string? name,

            ImmutableArray<Outputs.GetGcpSecretManagerConnectorOidcAuthenticationResult> oidcAuthentications,

            string? orgId,

            string? projectId,

            ImmutableArray<string> tags)
        {
            CredentialsRef = credentialsRef;
            DelegateSelectors = delegateSelectors;
            Description = description;
            ExecuteOnDelegate = executeOnDelegate;
            Id = id;
            Identifier = identifier;
            InheritFromDelegate = inheritFromDelegate;
            IsDefault = isDefault;
            Name = name;
            OidcAuthentications = oidcAuthentications;
            OrgId = orgId;
            ProjectId = projectId;
            Tags = tags;
        }
    }
}
