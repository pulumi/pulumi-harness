// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetResourceGroup
    {
        /// <summary>
        /// DataSource for looking up resource group in harness.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Harness.Platform.GetResourceGroup.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetResourceGroupResult> InvokeAsync(GetResourceGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetResourceGroupResult>("harness:platform/getResourceGroup:getResourceGroup", args ?? new GetResourceGroupArgs(), options.WithDefaults());

        /// <summary>
        /// DataSource for looking up resource group in harness.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Harness.Platform.GetResourceGroup.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetResourceGroupResult> Invoke(GetResourceGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetResourceGroupResult>("harness:platform/getResourceGroup:getResourceGroup", args ?? new GetResourceGroupInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// DataSource for looking up resource group in harness.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Harness.Platform.GetResourceGroup.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetResourceGroupResult> Invoke(GetResourceGroupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetResourceGroupResult>("harness:platform/getResourceGroup:getResourceGroup", args ?? new GetResourceGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetResourceGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetResourceGroupArgs()
        {
        }
        public static new GetResourceGroupArgs Empty => new GetResourceGroupArgs();
    }

    public sealed class GetResourceGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetResourceGroupInvokeArgs()
        {
        }
        public static new GetResourceGroupInvokeArgs Empty => new GetResourceGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetResourceGroupResult
    {
        /// <summary>
        /// Account Identifier of the account
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// The scope levels at which this resource group can be used
        /// </summary>
        public readonly ImmutableArray<string> AllowedScopeLevels;
        /// <summary>
        /// Color of the environment.
        /// </summary>
        public readonly string Color;
        /// <summary>
        /// Description of the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// Included scopes
        /// </summary>
        public readonly ImmutableArray<Outputs.GetResourceGroupIncludedScopeResult> IncludedScopes;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Contains resource filter for a resource group
        /// </summary>
        public readonly ImmutableArray<Outputs.GetResourceGroupResourceFilterResult> ResourceFilters;
        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetResourceGroupResult(
            string accountId,

            ImmutableArray<string> allowedScopeLevels,

            string color,

            string description,

            string id,

            string identifier,

            ImmutableArray<Outputs.GetResourceGroupIncludedScopeResult> includedScopes,

            string? name,

            string? orgId,

            string? projectId,

            ImmutableArray<Outputs.GetResourceGroupResourceFilterResult> resourceFilters,

            ImmutableArray<string> tags)
        {
            AccountId = accountId;
            AllowedScopeLevels = allowedScopeLevels;
            Color = color;
            Description = description;
            Id = id;
            Identifier = identifier;
            IncludedScopes = includedScopes;
            Name = name;
            OrgId = orgId;
            ProjectId = projectId;
            ResourceFilters = resourceFilters;
            Tags = tags;
        }
    }
}
