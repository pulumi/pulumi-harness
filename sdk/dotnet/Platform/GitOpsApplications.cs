// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for managing a Harness Gitops Application.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Harness.Platform.GitOpsApplications("example", new()
    ///     {
    ///         Applications = new[]
    ///         {
    ///             new Harness.Platform.Inputs.GitOpsApplicationsApplicationArgs
    ///             {
    ///                 Metadatas = new[]
    ///                 {
    ///                     new Harness.Platform.Inputs.GitOpsApplicationsApplicationMetadataArgs
    ///                     {
    ///                         Annotations = null,
    ///                         Labels = 
    ///                         {
    ///                             { "harness.io/serviceRef", "service_id" },
    ///                             { "harness.io/envRef", "env_id" },
    ///                         },
    ///                         Name = "appname123",
    ///                     },
    ///                 },
    ///                 Specs = new[]
    ///                 {
    ///                     new Harness.Platform.Inputs.GitOpsApplicationsApplicationSpecArgs
    ///                     {
    ///                         SyncPolicies = new[]
    ///                         {
    ///                             new Harness.Platform.Inputs.GitOpsApplicationsApplicationSpecSyncPolicyArgs
    ///                             {
    ///                                 SyncOptions = new[]
    ///                                 {
    ///                                     "PrunePropagationPolicy=undefined",
    ///                                     "CreateNamespace=false",
    ///                                     "Validate=false",
    ///                                     "skipSchemaValidations=false",
    ///                                     "autoCreateNamespace=false",
    ///                                     "pruneLast=false",
    ///                                     "applyOutofSyncOnly=false",
    ///                                     "Replace=false",
    ///                                     "retry=false",
    ///                                 },
    ///                             },
    ///                         },
    ///                         Sources = new[]
    ///                         {
    ///                             new Harness.Platform.Inputs.GitOpsApplicationsApplicationSpecSourceArgs
    ///                             {
    ///                                 TargetRevision = "master",
    ///                                 RepoUrl = "https://github.com/willycoll/argocd-example-apps.git",
    ///                                 Path = "helm-guestbook",
    ///                             },
    ///                         },
    ///                         Destinations = new[]
    ///                         {
    ///                             new Harness.Platform.Inputs.GitOpsApplicationsApplicationSpecDestinationArgs
    ///                             {
    ///                                 Namespace = "namespace-123",
    ///                                 Server = "https://1.3.4.5",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         ProjectId = "project_id",
    ///         OrgId = "org_id",
    ///         AccountId = "account_id",
    ///         Identifier = "identifier",
    ///         ClusterId = "cluster_id",
    ///         RepoId = "repo_id",
    ///         AgentId = "agent_id",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Import a Project level Gitops Application
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/gitOpsApplications:GitOpsApplications example &lt;organization_id&gt;/&lt;project_id&gt;/&lt;agent_id&gt;/&lt;app_name&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/gitOpsApplications:GitOpsApplications")]
    public partial class GitOpsApplications : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account identifier of the GitOps application.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Agent identifier of the GitOps application.
        /// </summary>
        [Output("agentId")]
        public Output<string> AgentId { get; private set; } = null!;

        /// <summary>
        /// Definition of the GitOps application resource.
        /// </summary>
        [Output("applications")]
        public Output<ImmutableArray<Outputs.GitOpsApplicationsApplication>> Applications { get; private set; } = null!;

        /// <summary>
        /// Cluster identifier of the GitOps application.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Identifier of the GitOps application.
        /// </summary>
        [Output("identifier")]
        public Output<string?> Identifier { get; private set; } = null!;

        /// <summary>
        /// Kind of the GitOps application.
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// Name of the GitOps application.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Options to remove existing finalizers to delete the GitOps application.
        /// </summary>
        [Output("optionsRemoveExistingFinalizers")]
        public Output<bool?> OptionsRemoveExistingFinalizers { get; private set; } = null!;

        /// <summary>
        /// Organization identifier of the GitOps application.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// The ArgoCD project name corresponding to this GitOps application. An empty string means that the GitOps application belongs to the default project created by Harness.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Project identifier of the GitOps application.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Repository identifier of the GitOps application. When using skipRepoValidation, this field is not required.
        /// </summary>
        [Output("repoId")]
        public Output<string?> RepoId { get; private set; } = null!;

        /// <summary>
        /// List of repository identifiers of the GitOps for Multi-Source application. Not required if skipRepoValidation is set to true.
        /// </summary>
        [Output("repoIds")]
        public Output<ImmutableArray<string>> RepoIds { get; private set; } = null!;

        /// <summary>
        /// Request cascade to delete the GitOps application.
        /// </summary>
        [Output("requestCascade")]
        public Output<bool?> RequestCascade { get; private set; } = null!;

        /// <summary>
        /// Request propagation policy to delete the GitOps application.
        /// </summary>
        [Output("requestPropagationPolicy")]
        public Output<string?> RequestPropagationPolicy { get; private set; } = null!;

        /// <summary>
        /// Indicates if the GitOps application should skip validate repository definition exists.
        /// </summary>
        [Output("skipRepoValidation")]
        public Output<bool?> SkipRepoValidation { get; private set; } = null!;

        /// <summary>
        /// Indicates if the GitOps application should be updated if existing and inserted if not.
        /// </summary>
        [Output("upsert")]
        public Output<bool?> Upsert { get; private set; } = null!;

        /// <summary>
        /// Indicates if the GitOps application yaml has to be validated.
        /// </summary>
        [Output("validate")]
        public Output<bool?> Validate { get; private set; } = null!;


        /// <summary>
        /// Create a GitOpsApplications resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GitOpsApplications(string name, GitOpsApplicationsArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/gitOpsApplications:GitOpsApplications", name, args ?? new GitOpsApplicationsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GitOpsApplications(string name, Input<string> id, GitOpsApplicationsState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/gitOpsApplications:GitOpsApplications", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GitOpsApplications resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GitOpsApplications Get(string name, Input<string> id, GitOpsApplicationsState? state = null, CustomResourceOptions? options = null)
        {
            return new GitOpsApplications(name, id, state, options);
        }
    }

    public sealed class GitOpsApplicationsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account identifier of the GitOps application.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Agent identifier of the GitOps application.
        /// </summary>
        [Input("agentId", required: true)]
        public Input<string> AgentId { get; set; } = null!;

        [Input("applications", required: true)]
        private InputList<Inputs.GitOpsApplicationsApplicationArgs>? _applications;

        /// <summary>
        /// Definition of the GitOps application resource.
        /// </summary>
        public InputList<Inputs.GitOpsApplicationsApplicationArgs> Applications
        {
            get => _applications ?? (_applications = new InputList<Inputs.GitOpsApplicationsApplicationArgs>());
            set => _applications = value;
        }

        /// <summary>
        /// Cluster identifier of the GitOps application.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Identifier of the GitOps application.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Kind of the GitOps application.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Name of the GitOps application.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Options to remove existing finalizers to delete the GitOps application.
        /// </summary>
        [Input("optionsRemoveExistingFinalizers")]
        public Input<bool>? OptionsRemoveExistingFinalizers { get; set; }

        /// <summary>
        /// Organization identifier of the GitOps application.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// The ArgoCD project name corresponding to this GitOps application. An empty string means that the GitOps application belongs to the default project created by Harness.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Project identifier of the GitOps application.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Repository identifier of the GitOps application. When using skipRepoValidation, this field is not required.
        /// </summary>
        [Input("repoId")]
        public Input<string>? RepoId { get; set; }

        [Input("repoIds")]
        private InputList<string>? _repoIds;

        /// <summary>
        /// List of repository identifiers of the GitOps for Multi-Source application. Not required if skipRepoValidation is set to true.
        /// </summary>
        public InputList<string> RepoIds
        {
            get => _repoIds ?? (_repoIds = new InputList<string>());
            set => _repoIds = value;
        }

        /// <summary>
        /// Request cascade to delete the GitOps application.
        /// </summary>
        [Input("requestCascade")]
        public Input<bool>? RequestCascade { get; set; }

        /// <summary>
        /// Request propagation policy to delete the GitOps application.
        /// </summary>
        [Input("requestPropagationPolicy")]
        public Input<string>? RequestPropagationPolicy { get; set; }

        /// <summary>
        /// Indicates if the GitOps application should skip validate repository definition exists.
        /// </summary>
        [Input("skipRepoValidation")]
        public Input<bool>? SkipRepoValidation { get; set; }

        /// <summary>
        /// Indicates if the GitOps application should be updated if existing and inserted if not.
        /// </summary>
        [Input("upsert")]
        public Input<bool>? Upsert { get; set; }

        /// <summary>
        /// Indicates if the GitOps application yaml has to be validated.
        /// </summary>
        [Input("validate")]
        public Input<bool>? Validate { get; set; }

        public GitOpsApplicationsArgs()
        {
        }
        public static new GitOpsApplicationsArgs Empty => new GitOpsApplicationsArgs();
    }

    public sealed class GitOpsApplicationsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account identifier of the GitOps application.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Agent identifier of the GitOps application.
        /// </summary>
        [Input("agentId")]
        public Input<string>? AgentId { get; set; }

        [Input("applications")]
        private InputList<Inputs.GitOpsApplicationsApplicationGetArgs>? _applications;

        /// <summary>
        /// Definition of the GitOps application resource.
        /// </summary>
        public InputList<Inputs.GitOpsApplicationsApplicationGetArgs> Applications
        {
            get => _applications ?? (_applications = new InputList<Inputs.GitOpsApplicationsApplicationGetArgs>());
            set => _applications = value;
        }

        /// <summary>
        /// Cluster identifier of the GitOps application.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Identifier of the GitOps application.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Kind of the GitOps application.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Name of the GitOps application.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Options to remove existing finalizers to delete the GitOps application.
        /// </summary>
        [Input("optionsRemoveExistingFinalizers")]
        public Input<bool>? OptionsRemoveExistingFinalizers { get; set; }

        /// <summary>
        /// Organization identifier of the GitOps application.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The ArgoCD project name corresponding to this GitOps application. An empty string means that the GitOps application belongs to the default project created by Harness.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Project identifier of the GitOps application.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Repository identifier of the GitOps application. When using skipRepoValidation, this field is not required.
        /// </summary>
        [Input("repoId")]
        public Input<string>? RepoId { get; set; }

        [Input("repoIds")]
        private InputList<string>? _repoIds;

        /// <summary>
        /// List of repository identifiers of the GitOps for Multi-Source application. Not required if skipRepoValidation is set to true.
        /// </summary>
        public InputList<string> RepoIds
        {
            get => _repoIds ?? (_repoIds = new InputList<string>());
            set => _repoIds = value;
        }

        /// <summary>
        /// Request cascade to delete the GitOps application.
        /// </summary>
        [Input("requestCascade")]
        public Input<bool>? RequestCascade { get; set; }

        /// <summary>
        /// Request propagation policy to delete the GitOps application.
        /// </summary>
        [Input("requestPropagationPolicy")]
        public Input<string>? RequestPropagationPolicy { get; set; }

        /// <summary>
        /// Indicates if the GitOps application should skip validate repository definition exists.
        /// </summary>
        [Input("skipRepoValidation")]
        public Input<bool>? SkipRepoValidation { get; set; }

        /// <summary>
        /// Indicates if the GitOps application should be updated if existing and inserted if not.
        /// </summary>
        [Input("upsert")]
        public Input<bool>? Upsert { get; set; }

        /// <summary>
        /// Indicates if the GitOps application yaml has to be validated.
        /// </summary>
        [Input("validate")]
        public Input<bool>? Validate { get; set; }

        public GitOpsApplicationsState()
        {
        }
        public static new GitOpsApplicationsState Empty => new GitOpsApplicationsState();
    }
}
