// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform.Inputs
{

    public sealed class PipelineFiltersFilterPropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// description of the pipline filter.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Corresponding Entity of the filters. Currently supported types are {Connector, DelegateProfile, Delegate, PipelineSetup, PipelineExecution, Deployment, Audit, Template, EnvironmentGroup, FileStore, CCMRecommendation, Anomaly, Environment}.
        /// </summary>
        [Input("filterType", required: true)]
        public Input<string> FilterType { get; set; } = null!;

        /// <summary>
        /// module properties of the pipline filter.
        /// </summary>
        [Input("moduleProperties")]
        public Input<Inputs.PipelineFiltersFilterPropertiesModulePropertiesArgs>? ModuleProperties { get; set; }

        /// <summary>
        /// Name of the pipeline filter.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pipelineIdentifiers")]
        private InputList<string>? _pipelineIdentifiers;

        /// <summary>
        /// Pipeline identifiers to filter on.
        /// </summary>
        public InputList<string> PipelineIdentifiers
        {
            get => _pipelineIdentifiers ?? (_pipelineIdentifiers = new InputList<string>());
            set => _pipelineIdentifiers = value;
        }

        /// <summary>
        /// Name of the pipeline execution filter.
        /// </summary>
        [Input("pipelineName")]
        public Input<string>? PipelineName { get; set; }

        [Input("pipelineTags")]
        private InputList<ImmutableDictionary<string, string>>? _pipelineTags;

        /// <summary>
        /// Tags to associate with the pipeline. tags should be in the form of `{key:key1, value:key1value}`
        /// </summary>
        public InputList<ImmutableDictionary<string, string>> PipelineTags
        {
            get => _pipelineTags ?? (_pipelineTags = new InputList<ImmutableDictionary<string, string>>());
            set => _pipelineTags = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource. Tags should be in the form `name:value`.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public PipelineFiltersFilterPropertiesArgs()
        {
        }
        public static new PipelineFiltersFilterPropertiesArgs Empty => new PipelineFiltersFilterPropertiesArgs();
    }
}
