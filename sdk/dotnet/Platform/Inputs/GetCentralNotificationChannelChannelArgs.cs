// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform.Inputs
{

    public sealed class GetCentralNotificationChannelChannelInputArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// API key for the webhook or integration.
        /// </summary>
        [Input("apiKey")]
        public Input<string>? ApiKey { get; set; }

        [Input("datadogUrls")]
        private InputList<string>? _datadogUrls;

        /// <summary>
        /// List of Datadog webhook URLs.
        /// </summary>
        public InputList<string> DatadogUrls
        {
            get => _datadogUrls ?? (_datadogUrls = new InputList<string>());
            set => _datadogUrls = value;
        }

        [Input("delegateSelectors")]
        private InputList<string>? _delegateSelectors;

        /// <summary>
        /// List of delegate selectors to use for sending notifications.
        /// </summary>
        public InputList<string> DelegateSelectors
        {
            get => _delegateSelectors ?? (_delegateSelectors = new InputList<string>());
            set => _delegateSelectors = value;
        }

        [Input("emailIds")]
        private InputList<string>? _emailIds;

        /// <summary>
        /// List of email addresses to notify.
        /// </summary>
        public InputList<string> EmailIds
        {
            get => _emailIds ?? (_emailIds = new InputList<string>());
            set => _emailIds = value;
        }

        /// <summary>
        /// Whether to execute the notification logic on delegate.
        /// </summary>
        [Input("executeOnDelegate")]
        public Input<bool>? ExecuteOnDelegate { get; set; }

        [Input("headers", required: true)]
        private InputList<Inputs.GetCentralNotificationChannelChannelHeaderInputArgs>? _headers;

        /// <summary>
        /// Custom HTTP headers to include in webhook requests.
        /// </summary>
        public InputList<Inputs.GetCentralNotificationChannelChannelHeaderInputArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.GetCentralNotificationChannelChannelHeaderInputArgs>());
            set => _headers = value;
        }

        [Input("msTeamKeys")]
        private InputList<string>? _msTeamKeys;

        /// <summary>
        /// List of Microsoft Teams integration keys.
        /// </summary>
        public InputList<string> MsTeamKeys
        {
            get => _msTeamKeys ?? (_msTeamKeys = new InputList<string>());
            set => _msTeamKeys = value;
        }

        [Input("pagerDutyIntegrationKeys")]
        private InputList<string>? _pagerDutyIntegrationKeys;

        /// <summary>
        /// List of PagerDuty integration keys.
        /// </summary>
        public InputList<string> PagerDutyIntegrationKeys
        {
            get => _pagerDutyIntegrationKeys ?? (_pagerDutyIntegrationKeys = new InputList<string>());
            set => _pagerDutyIntegrationKeys = value;
        }

        [Input("slackWebhookUrls")]
        private InputList<string>? _slackWebhookUrls;

        /// <summary>
        /// List of Slack webhook URLs to send notifications to.
        /// </summary>
        public InputList<string> SlackWebhookUrls
        {
            get => _slackWebhookUrls ?? (_slackWebhookUrls = new InputList<string>());
            set => _slackWebhookUrls = value;
        }

        [Input("userGroups")]
        private InputList<Inputs.GetCentralNotificationChannelChannelUserGroupInputArgs>? _userGroups;

        /// <summary>
        /// List of user groups to notify.
        /// </summary>
        public InputList<Inputs.GetCentralNotificationChannelChannelUserGroupInputArgs> UserGroups
        {
            get => _userGroups ?? (_userGroups = new InputList<Inputs.GetCentralNotificationChannelChannelUserGroupInputArgs>());
            set => _userGroups = value;
        }

        [Input("webhookUrls")]
        private InputList<string>? _webhookUrls;

        /// <summary>
        /// List of generic webhook URLs.
        /// </summary>
        public InputList<string> WebhookUrls
        {
            get => _webhookUrls ?? (_webhookUrls = new InputList<string>());
            set => _webhookUrls = value;
        }

        public GetCentralNotificationChannelChannelInputArgs()
        {
        }
        public static new GetCentralNotificationChannelChannelInputArgs Empty => new GetCentralNotificationChannelChannelInputArgs();
    }
}
