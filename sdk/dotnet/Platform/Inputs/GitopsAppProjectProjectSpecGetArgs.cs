// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform.Inputs
{

    public sealed class GitopsAppProjectProjectSpecGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("clusterResourceBlacklists")]
        private InputList<Inputs.GitopsAppProjectProjectSpecClusterResourceBlacklistGetArgs>? _clusterResourceBlacklists;

        /// <summary>
        /// Cluster resource blacklist for the GitOps project.
        /// </summary>
        public InputList<Inputs.GitopsAppProjectProjectSpecClusterResourceBlacklistGetArgs> ClusterResourceBlacklists
        {
            get => _clusterResourceBlacklists ?? (_clusterResourceBlacklists = new InputList<Inputs.GitopsAppProjectProjectSpecClusterResourceBlacklistGetArgs>());
            set => _clusterResourceBlacklists = value;
        }

        [Input("clusterResourceWhitelists")]
        private InputList<Inputs.GitopsAppProjectProjectSpecClusterResourceWhitelistGetArgs>? _clusterResourceWhitelists;

        /// <summary>
        /// Cluster resource whitelist for the Argo project.
        /// </summary>
        public InputList<Inputs.GitopsAppProjectProjectSpecClusterResourceWhitelistGetArgs> ClusterResourceWhitelists
        {
            get => _clusterResourceWhitelists ?? (_clusterResourceWhitelists = new InputList<Inputs.GitopsAppProjectProjectSpecClusterResourceWhitelistGetArgs>());
            set => _clusterResourceWhitelists = value;
        }

        /// <summary>
        /// Description of the Argo project.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("destinations")]
        private InputList<Inputs.GitopsAppProjectProjectSpecDestinationGetArgs>? _destinations;

        /// <summary>
        /// Allowed destinations for applications in this Argo project.
        /// </summary>
        public InputList<Inputs.GitopsAppProjectProjectSpecDestinationGetArgs> Destinations
        {
            get => _destinations ?? (_destinations = new InputList<Inputs.GitopsAppProjectProjectSpecDestinationGetArgs>());
            set => _destinations = value;
        }

        [Input("namespaceResourceBlacklists")]
        private InputList<Inputs.GitopsAppProjectProjectSpecNamespaceResourceBlacklistGetArgs>? _namespaceResourceBlacklists;

        /// <summary>
        /// Namespace resource blacklist for the Argo project.
        /// </summary>
        public InputList<Inputs.GitopsAppProjectProjectSpecNamespaceResourceBlacklistGetArgs> NamespaceResourceBlacklists
        {
            get => _namespaceResourceBlacklists ?? (_namespaceResourceBlacklists = new InputList<Inputs.GitopsAppProjectProjectSpecNamespaceResourceBlacklistGetArgs>());
            set => _namespaceResourceBlacklists = value;
        }

        [Input("namespaceResourceWhitelists")]
        private InputList<Inputs.GitopsAppProjectProjectSpecNamespaceResourceWhitelistGetArgs>? _namespaceResourceWhitelists;

        /// <summary>
        /// Namespace resource whitelist for the GitOps project.
        /// </summary>
        public InputList<Inputs.GitopsAppProjectProjectSpecNamespaceResourceWhitelistGetArgs> NamespaceResourceWhitelists
        {
            get => _namespaceResourceWhitelists ?? (_namespaceResourceWhitelists = new InputList<Inputs.GitopsAppProjectProjectSpecNamespaceResourceWhitelistGetArgs>());
            set => _namespaceResourceWhitelists = value;
        }

        [Input("orphanedResources")]
        private InputList<Inputs.GitopsAppProjectProjectSpecOrphanedResourceGetArgs>? _orphanedResources;

        /// <summary>
        /// OrphanedResources specifies if agent should monitor orphaned resources of apps in this project
        /// </summary>
        public InputList<Inputs.GitopsAppProjectProjectSpecOrphanedResourceGetArgs> OrphanedResources
        {
            get => _orphanedResources ?? (_orphanedResources = new InputList<Inputs.GitopsAppProjectProjectSpecOrphanedResourceGetArgs>());
            set => _orphanedResources = value;
        }

        /// <summary>
        /// This option determines whether destinations can only reference clusters which are argo project-scoped
        /// </summary>
        [Input("permitOnlyProjectScopedClusters")]
        public Input<bool>? PermitOnlyProjectScopedClusters { get; set; }

        [Input("roles")]
        private InputList<Inputs.GitopsAppProjectProjectSpecRoleGetArgs>? _roles;

        /// <summary>
        /// Roles associated with the Argo project.
        /// </summary>
        public InputList<Inputs.GitopsAppProjectProjectSpecRoleGetArgs> Roles
        {
            get => _roles ?? (_roles = new InputList<Inputs.GitopsAppProjectProjectSpecRoleGetArgs>());
            set => _roles = value;
        }

        [Input("signatureKeys")]
        private InputList<Inputs.GitopsAppProjectProjectSpecSignatureKeyGetArgs>? _signatureKeys;

        /// <summary>
        /// Signature keys for the GitOps project.
        /// </summary>
        public InputList<Inputs.GitopsAppProjectProjectSpecSignatureKeyGetArgs> SignatureKeys
        {
            get => _signatureKeys ?? (_signatureKeys = new InputList<Inputs.GitopsAppProjectProjectSpecSignatureKeyGetArgs>());
            set => _signatureKeys = value;
        }

        [Input("sourceNamespaces")]
        private InputList<string>? _sourceNamespaces;

        /// <summary>
        /// Source namespaces defines the namespaces application resources are allowed to be created in.
        /// </summary>
        public InputList<string> SourceNamespaces
        {
            get => _sourceNamespaces ?? (_sourceNamespaces = new InputList<string>());
            set => _sourceNamespaces = value;
        }

        [Input("sourceRepos")]
        private InputList<string>? _sourceRepos;

        /// <summary>
        /// Allowed Source repositories for the Argo project.
        /// </summary>
        public InputList<string> SourceRepos
        {
            get => _sourceRepos ?? (_sourceRepos = new InputList<string>());
            set => _sourceRepos = value;
        }

        [Input("syncWindows")]
        private InputList<Inputs.GitopsAppProjectProjectSpecSyncWindowGetArgs>? _syncWindows;

        /// <summary>
        /// Synchronization windows for the GitOps project.
        /// </summary>
        public InputList<Inputs.GitopsAppProjectProjectSpecSyncWindowGetArgs> SyncWindows
        {
            get => _syncWindows ?? (_syncWindows = new InputList<Inputs.GitopsAppProjectProjectSpecSyncWindowGetArgs>());
            set => _syncWindows = value;
        }

        public GitopsAppProjectProjectSpecGetArgs()
        {
        }
        public static new GitopsAppProjectProjectSpecGetArgs Empty => new GitopsAppProjectProjectSpecGetArgs();
    }
}
