// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform.Inputs
{

    public sealed class GitOpsRepositoryRepoGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifies the authentication method used to connect to the repository. Possible values: "HTTPS" "SSH" "GITHUB" "HTTPS*ANONYMOUS", "GITHUB*ENTERPRISE".
        /// </summary>
        [Input("connectionType", required: true)]
        public Input<string> ConnectionType { get; set; } = null!;

        /// <summary>
        /// Indicates if git-lfs support must be enabled for this repo. This is valid only for Git repositories.
        /// </summary>
        [Input("enableLfs")]
        public Input<bool>? EnableLfs { get; set; }

        /// <summary>
        /// Indicates if helm-oci support must be enabled for this repo.
        /// </summary>
        [Input("enableOci")]
        public Input<bool>? EnableOci { get; set; }

        /// <summary>
        /// Base URL of GitHub Enterprise installation. If left empty, this defaults to https://api.github.com.
        /// </summary>
        [Input("githubAppEnterpriseBaseUrl")]
        public Input<string>? GithubAppEnterpriseBaseUrl { get; set; }

        [Input("githubAppId")]
        private Input<string>? _githubAppId;

        /// <summary>
        /// Id of the GitHub app used to access the repo.
        /// </summary>
        public Input<string>? GithubAppId
        {
            get => _githubAppId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _githubAppId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("githubAppInstallationId")]
        private Input<string>? _githubAppInstallationId;

        /// <summary>
        /// Installation id of the GitHub app used to access the repo.
        /// </summary>
        public Input<string>? GithubAppInstallationId
        {
            get => _githubAppInstallationId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _githubAppInstallationId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("githubAppPrivateKey")]
        private Input<string>? _githubAppPrivateKey;

        /// <summary>
        /// GitHub app private key PEM data.
        /// </summary>
        public Input<string>? GithubAppPrivateKey
        {
            get => _githubAppPrivateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _githubAppPrivateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Indicates if the credentials were inherited from a repository credential.
        /// </summary>
        [Input("inheritedCreds")]
        public Input<bool>? InheritedCreds { get; set; }

        /// <summary>
        /// Indicates if the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
        /// </summary>
        [Input("insecure")]
        public Input<bool>? Insecure { get; set; }

        /// <summary>
        /// Indicates if InsecureIgnoreHostKey should be used. Insecure is favored used only for git repos. Deprecated.
        /// </summary>
        [Input("insecureIgnoreHostKey")]
        public Input<bool>? InsecureIgnoreHostKey { get; set; }

        /// <summary>
        /// Name to be used for this repo. Only used with Helm repos.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password or PAT to be used for authenticating the remote repository.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The ArgoCD project name corresponding to this GitOps repository. An empty string means that the GitOps repository belongs to the default project created by Harness.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The HTTP/HTTPS proxy used to access the repo.
        /// </summary>
        [Input("proxy")]
        public Input<string>? Proxy { get; set; }

        /// <summary>
        /// URL to the remote repository.
        /// </summary>
        [Input("repo", required: true)]
        public Input<string> Repo { get; set; } = null!;

        [Input("sshPrivateKey")]
        private Input<string>? _sshPrivateKey;

        /// <summary>
        /// SSH Key in PEM format for authenticating the repository. Used only for Git repository.
        /// </summary>
        public Input<string>? SshPrivateKey
        {
            get => _sshPrivateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sshPrivateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tlsClientCertData")]
        private Input<string>? _tlsClientCertData;

        /// <summary>
        /// Certificate in PEM format for authenticating at the repo server. This is used for mTLS. The value should be base64 encoded.
        /// </summary>
        public Input<string>? TlsClientCertData
        {
            get => _tlsClientCertData;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tlsClientCertData = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tlsClientCertKey")]
        private Input<string>? _tlsClientCertKey;

        /// <summary>
        /// Private key in PEM format for authenticating at the repo server. This is used for mTLS. The value should be base64 encoded.
        /// </summary>
        public Input<string>? TlsClientCertKey
        {
            get => _tlsClientCertKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tlsClientCertKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Type specifies the type of the repo. Can be either "git" or "helm. "git" is assumed if empty or absent.
        /// </summary>
        [Input("type_")]
        public Input<string>? Type_ { get; set; }

        /// <summary>
        /// Username to be used for authenticating the remote repository.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public GitOpsRepositoryRepoGetArgs()
        {
        }
        public static new GitOpsRepositoryRepoGetArgs Empty => new GitOpsRepositoryRepoGetArgs();
    }
}
