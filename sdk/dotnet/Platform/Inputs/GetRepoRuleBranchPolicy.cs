// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform.Inputs
{

    public sealed class GetRepoRuleBranchPolicyArgs : global::Pulumi.InvokeArgs
    {
        [Input("allowMergeStrategies")]
        private List<string>? _allowMergeStrategies;

        /// <summary>
        /// Limit which merge strategies are available to merge a pull request(Any of squash, rebase, merge).
        /// </summary>
        public List<string> AllowMergeStrategies
        {
            get => _allowMergeStrategies ?? (_allowMergeStrategies = new List<string>());
            set => _allowMergeStrategies = value;
        }

        /// <summary>
        /// Only allow users with bypass permission to create matching branches.
        /// </summary>
        [Input("blockBranchCreation")]
        public bool? BlockBranchCreation { get; set; }

        /// <summary>
        /// Only allow users with bypass permission to delete matching branches.
        /// </summary>
        [Input("blockBranchDeletion")]
        public bool? BlockBranchDeletion { get; set; }

        /// <summary>
        /// Automatically delete the source branch of a pull request after it is merged.
        /// </summary>
        [Input("deleteBranchOnMerge")]
        public bool? DeleteBranchOnMerge { get; set; }

        /// <summary>
        /// Require approval on pull requests from one reviewer for each codeowner rule.
        /// </summary>
        [Input("requireCodeOwners")]
        public bool? RequireCodeOwners { get; set; }

        /// <summary>
        /// Require re-approval when there are new changes in the pull request.
        /// </summary>
        [Input("requireLatestCommitApproval")]
        public bool? RequireLatestCommitApproval { get; set; }

        /// <summary>
        /// Require approval on pull requests from a minimum number of reviewers.
        /// </summary>
        [Input("requireMinimumApprovalCount")]
        public int? RequireMinimumApprovalCount { get; set; }

        /// <summary>
        /// Require all request for changes have been resolved.
        /// </summary>
        [Input("requireNoChangeRequest")]
        public bool? RequireNoChangeRequest { get; set; }

        /// <summary>
        /// Do not allow any changes to matching branches without a pull request.
        /// </summary>
        [Input("requirePullRequest")]
        public bool? RequirePullRequest { get; set; }

        /// <summary>
        /// All comments on a pull request must be resolved before it can be merged.
        /// </summary>
        [Input("requireResolveAllComments")]
        public bool? RequireResolveAllComments { get; set; }

        [Input("requireStatusChecks")]
        private List<string>? _requireStatusChecks;

        /// <summary>
        /// Selected status checks must pass before a pull request can be merged.
        /// </summary>
        public List<string> RequireStatusChecks
        {
            get => _requireStatusChecks ?? (_requireStatusChecks = new List<string>());
            set => _requireStatusChecks = value;
        }

        public GetRepoRuleBranchPolicyArgs()
        {
        }
        public static new GetRepoRuleBranchPolicyArgs Empty => new GetRepoRuleBranchPolicyArgs();
    }
}
