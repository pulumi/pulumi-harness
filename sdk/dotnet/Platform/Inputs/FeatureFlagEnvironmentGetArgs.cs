// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform.Inputs
{

    public sealed class FeatureFlagEnvironmentGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("addTargetRules")]
        private InputList<Inputs.FeatureFlagEnvironmentAddTargetRuleGetArgs>? _addTargetRules;

        /// <summary>
        /// The targeting rules for the flag
        /// </summary>
        public InputList<Inputs.FeatureFlagEnvironmentAddTargetRuleGetArgs> AddTargetRules
        {
            get => _addTargetRules ?? (_addTargetRules = new InputList<Inputs.FeatureFlagEnvironmentAddTargetRuleGetArgs>());
            set => _addTargetRules = value;
        }

        /// <summary>
        /// Default variation to be served when flag is 'off'
        /// </summary>
        [Input("defaultOffVariation")]
        public Input<string>? DefaultOffVariation { get; set; }

        /// <summary>
        /// Default variation to be served when flag is 'on'
        /// </summary>
        [Input("defaultOnVariation")]
        public Input<string>? DefaultOnVariation { get; set; }

        /// <summary>
        /// Identifier of the Environment
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// State of the flag in this environment. Possible values are 'on' and 'off'
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public FeatureFlagEnvironmentGetArgs()
        {
        }
        public static new FeatureFlagEnvironmentGetArgs Empty => new FeatureFlagEnvironmentGetArgs();
    }
}
