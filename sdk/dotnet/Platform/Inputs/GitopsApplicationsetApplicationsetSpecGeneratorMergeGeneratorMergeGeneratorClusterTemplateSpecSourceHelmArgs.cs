// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform.Inputs
{

    public sealed class GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmArgs : global::Pulumi.ResourceArgs
    {
        [Input("fileParameters")]
        private InputList<Inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameterArgs>? _fileParameters;

        /// <summary>
        /// File parameters for the helm template.
        /// </summary>
        public InputList<Inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameterArgs> FileParameters
        {
            get => _fileParameters ?? (_fileParameters = new InputList<Inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameterArgs>());
            set => _fileParameters = value;
        }

        /// <summary>
        /// Prevents 'helm template' from failing when `ValueFiles` do not exist locally by not appending them to 'helm template --values'.
        /// </summary>
        [Input("ignoreMissingValueFiles")]
        public Input<bool>? IgnoreMissingValueFiles { get; set; }

        [Input("parameters")]
        private InputList<Inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameterArgs>? _parameters;

        /// <summary>
        /// Helm parameters which are passed to the helm template command upon manifest generation.
        /// </summary>
        public InputList<Inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameterArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameterArgs>());
            set => _parameters = value;
        }

        /// <summary>
        /// If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        /// </summary>
        [Input("passCredentials")]
        public Input<bool>? PassCredentials { get; set; }

        /// <summary>
        /// Helm release name. If omitted it will use the application name.
        /// </summary>
        [Input("releaseName")]
        public Input<string>? ReleaseName { get; set; }

        /// <summary>
        /// Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        /// </summary>
        [Input("skipCrds")]
        public Input<bool>? SkipCrds { get; set; }

        [Input("valueFiles")]
        private InputList<string>? _valueFiles;

        /// <summary>
        /// List of Helm value files to use when generating a template.
        /// </summary>
        public InputList<string> ValueFiles
        {
            get => _valueFiles ?? (_valueFiles = new InputList<string>());
            set => _valueFiles = value;
        }

        /// <summary>
        /// Helm values to be passed to 'helm template', typically defined as a block.
        /// </summary>
        [Input("values")]
        public Input<string>? Values { get; set; }

        public GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmArgs()
        {
        }
        public static new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmArgs Empty => new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmArgs();
    }
}
