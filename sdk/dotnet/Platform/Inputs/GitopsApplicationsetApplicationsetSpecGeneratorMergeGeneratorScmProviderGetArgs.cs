// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform.Inputs
{

    public sealed class GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
        /// </summary>
        [Input("azureDevops")]
        public Input<Inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderAzureDevopsGetArgs>? AzureDevops { get; set; }

        /// <summary>
        /// Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
        /// </summary>
        [Input("bitbucketCloud")]
        public Input<Inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderBitbucketCloudGetArgs>? BitbucketCloud { get; set; }

        /// <summary>
        /// Use the Bitbucket Server API (1.0) to scan repos in a project.
        /// </summary>
        [Input("bitbucketServer")]
        public Input<Inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderBitbucketServerGetArgs>? BitbucketServer { get; set; }

        /// <summary>
        /// Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
        /// </summary>
        [Input("cloneProtocol")]
        public Input<string>? CloneProtocol { get; set; }

        [Input("filters")]
        private InputList<Inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderFilterGetArgs>? _filters;

        /// <summary>
        /// Filters for which repos should be considered.
        /// </summary>
        public InputList<Inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderFilterGetArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderFilterGetArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Gitea mode uses the Gitea API to scan organizations in your instance.
        /// </summary>
        [Input("gitea")]
        public Input<Inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGiteaGetArgs>? Gitea { get; set; }

        /// <summary>
        /// Uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.
        /// </summary>
        [Input("github")]
        public Input<Inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGithubGetArgs>? Github { get; set; }

        /// <summary>
        /// Uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.
        /// </summary>
        [Input("gitlab")]
        public Input<Inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGitlabGetArgs>? Gitlab { get; set; }

        /// <summary>
        /// How often to check for changes (in seconds). Default: 3min.
        /// </summary>
        [Input("requeueAfterSeconds")]
        public Input<string>? RequeueAfterSeconds { get; set; }

        /// <summary>
        /// Generator template. Used to override the values of the spec-level template.
        /// </summary>
        [Input("template")]
        public Input<Inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderTemplateGetArgs>? Template { get; set; }

        public GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGetArgs()
        {
        }
        public static new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGetArgs Empty => new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGetArgs();
    }
}
