// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetDbInstance
    {
        /// <summary>
        /// Data source for retrieving a Harness DBDevOps Instance.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetDbInstance.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///         Schema = "schema1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDbInstanceResult> InvokeAsync(GetDbInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDbInstanceResult>("harness:platform/getDbInstance:getDbInstance", args ?? new GetDbInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness DBDevOps Instance.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetDbInstance.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///         Schema = "schema1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDbInstanceResult> Invoke(GetDbInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDbInstanceResult>("harness:platform/getDbInstance:getDbInstance", args ?? new GetDbInstanceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness DBDevOps Instance.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetDbInstance.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///         Schema = "schema1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDbInstanceResult> Invoke(GetDbInstanceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDbInstanceResult>("harness:platform/getDbInstance:getDbInstance", args ?? new GetDbInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDbInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        [Input("liquibaseSubstituteProperties")]
        private Dictionary<string, string>? _liquibaseSubstituteProperties;

        /// <summary>
        /// The properties to substitute in liquibase changelog
        /// </summary>
        public Dictionary<string, string> LiquibaseSubstituteProperties
        {
            get => _liquibaseSubstituteProperties ?? (_liquibaseSubstituteProperties = new Dictionary<string, string>());
            set => _liquibaseSubstituteProperties = value;
        }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId", required: true)]
        public string OrgId { get; set; } = null!;

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// The identifier of the parent database schema
        /// </summary>
        [Input("schema", required: true)]
        public string Schema { get; set; } = null!;

        public GetDbInstanceArgs()
        {
        }
        public static new GetDbInstanceArgs Empty => new GetDbInstanceArgs();
    }

    public sealed class GetDbInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        [Input("liquibaseSubstituteProperties")]
        private InputMap<string>? _liquibaseSubstituteProperties;

        /// <summary>
        /// The properties to substitute in liquibase changelog
        /// </summary>
        public InputMap<string> LiquibaseSubstituteProperties
        {
            get => _liquibaseSubstituteProperties ?? (_liquibaseSubstituteProperties = new InputMap<string>());
            set => _liquibaseSubstituteProperties = value;
        }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The identifier of the parent database schema
        /// </summary>
        [Input("schema", required: true)]
        public Input<string> Schema { get; set; } = null!;

        public GetDbInstanceInvokeArgs()
        {
        }
        public static new GetDbInstanceInvokeArgs Empty => new GetDbInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetDbInstanceResult
    {
        /// <summary>
        /// The branch of changeSet repository
        /// </summary>
        public readonly string Branch;
        /// <summary>
        /// The connector to database
        /// </summary>
        public readonly string Connector;
        /// <summary>
        /// The liquibase context
        /// </summary>
        public readonly string Context;
        /// <summary>
        /// Description of the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// The properties to substitute in liquibase changelog
        /// </summary>
        public readonly ImmutableDictionary<string, string>? LiquibaseSubstituteProperties;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        public readonly string OrgId;
        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// The identifier of the parent database schema
        /// </summary>
        public readonly string Schema;
        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetDbInstanceResult(
            string branch,

            string connector,

            string context,

            string description,

            string id,

            string identifier,

            ImmutableDictionary<string, string>? liquibaseSubstituteProperties,

            string? name,

            string orgId,

            string projectId,

            string schema,

            ImmutableArray<string> tags)
        {
            Branch = branch;
            Connector = connector;
            Context = context;
            Description = description;
            Id = id;
            Identifier = identifier;
            LiquibaseSubstituteProperties = liquibaseSubstituteProperties;
            Name = name;
            OrgId = orgId;
            ProjectId = projectId;
            Schema = schema;
            Tags = tags;
        }
    }
}
