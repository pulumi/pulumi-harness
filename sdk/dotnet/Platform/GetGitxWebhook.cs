// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetGitxWebhook
    {
        /// <summary>
        /// Resource for creating a Harness pipeline.
        /// </summary>
        public static Task<GetGitxWebhookResult> InvokeAsync(GetGitxWebhookArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGitxWebhookResult>("harness:platform/getGitxWebhook:getGitxWebhook", args ?? new GetGitxWebhookArgs(), options.WithDefaults());

        /// <summary>
        /// Resource for creating a Harness pipeline.
        /// </summary>
        public static Output<GetGitxWebhookResult> Invoke(GetGitxWebhookInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGitxWebhookResult>("harness:platform/getGitxWebhook:getGitxWebhook", args ?? new GetGitxWebhookInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Resource for creating a Harness pipeline.
        /// </summary>
        public static Output<GetGitxWebhookResult> Invoke(GetGitxWebhookInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGitxWebhookResult>("harness:platform/getGitxWebhook:getGitxWebhook", args ?? new GetGitxWebhookInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGitxWebhookArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        [Input("tags")]
        private List<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource. These should match the tag value passed in the YAML; if this parameter is null or not passed, the tags specified in YAML should also be null.
        /// </summary>
        public List<string> Tags
        {
            get => _tags ?? (_tags = new List<string>());
            set => _tags = value;
        }

        public GetGitxWebhookArgs()
        {
        }
        public static new GetGitxWebhookArgs Empty => new GetGitxWebhookArgs();
    }

    public sealed class GetGitxWebhookInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource. These should match the tag value passed in the YAML; if this parameter is null or not passed, the tags specified in YAML should also be null.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public GetGitxWebhookInvokeArgs()
        {
        }
        public static new GetGitxWebhookInvokeArgs Empty => new GetGitxWebhookInvokeArgs();
    }


    [OutputType]
    public sealed class GetGitxWebhookResult
    {
        /// <summary>
        /// Description of the resource.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Tags to associate with the resource. These should match the tag value passed in the YAML; if this parameter is null or not passed, the tags specified in YAML should also be null.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetGitxWebhookResult(
            string? description,

            string id,

            string identifier,

            string name,

            string? orgId,

            string? projectId,

            ImmutableArray<string> tags)
        {
            Description = description;
            Id = id;
            Identifier = identifier;
            Name = name;
            OrgId = orgId;
            ProjectId = projectId;
            Tags = tags;
        }
    }
}
