// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetUsergroup
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleById = Harness.Platform.GetUsergroup.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///     });
        /// 
        ///     var exampleByName = Harness.Platform.GetUsergroup.Invoke(new()
        ///     {
        ///         Name = "name",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetUsergroupResult> InvokeAsync(GetUsergroupArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUsergroupResult>("harness:platform/getUsergroup:getUsergroup", args ?? new GetUsergroupArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleById = Harness.Platform.GetUsergroup.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///     });
        /// 
        ///     var exampleByName = Harness.Platform.GetUsergroup.Invoke(new()
        ///     {
        ///         Name = "name",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUsergroupResult> Invoke(GetUsergroupInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUsergroupResult>("harness:platform/getUsergroup:getUsergroup", args ?? new GetUsergroupInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleById = Harness.Platform.GetUsergroup.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///     });
        /// 
        ///     var exampleByName = Harness.Platform.GetUsergroup.Invoke(new()
        ///     {
        ///         Name = "name",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUsergroupResult> Invoke(GetUsergroupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetUsergroupResult>("harness:platform/getUsergroup:getUsergroup", args ?? new GetUsergroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUsergroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public string? Identifier { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("notificationConfigs")]
        private List<Inputs.GetUsergroupNotificationConfigArgs>? _notificationConfigs;

        /// <summary>
        /// List of notification settings.
        /// </summary>
        public List<Inputs.GetUsergroupNotificationConfigArgs> NotificationConfigs
        {
            get => _notificationConfigs ?? (_notificationConfigs = new List<Inputs.GetUsergroupNotificationConfigArgs>());
            set => _notificationConfigs = value;
        }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetUsergroupArgs()
        {
        }
        public static new GetUsergroupArgs Empty => new GetUsergroupArgs();
    }

    public sealed class GetUsergroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationConfigs")]
        private InputList<Inputs.GetUsergroupNotificationConfigInputArgs>? _notificationConfigs;

        /// <summary>
        /// List of notification settings.
        /// </summary>
        public InputList<Inputs.GetUsergroupNotificationConfigInputArgs> NotificationConfigs
        {
            get => _notificationConfigs ?? (_notificationConfigs = new InputList<Inputs.GetUsergroupNotificationConfigInputArgs>());
            set => _notificationConfigs = value;
        }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetUsergroupInvokeArgs()
        {
        }
        public static new GetUsergroupInvokeArgs Empty => new GetUsergroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetUsergroupResult
    {
        /// <summary>
        /// Description of the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Whether the user group is externally managed.
        /// </summary>
        public readonly bool ExternallyManaged;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        public readonly string? Identifier;
        /// <summary>
        /// Name of the linked SSO.
        /// </summary>
        public readonly string LinkedSsoDisplayName;
        /// <summary>
        /// The SSO account ID that the user group is linked to.
        /// </summary>
        public readonly string LinkedSsoId;
        /// <summary>
        /// Type of linked SSO.
        /// </summary>
        public readonly string LinkedSsoType;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// List of notification settings.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUsergroupNotificationConfigResult> NotificationConfigs;
        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Identifier of the userGroup in SSO.
        /// </summary>
        public readonly string SsoGroupId;
        /// <summary>
        /// Name of the SSO userGroup.
        /// </summary>
        public readonly string SsoGroupName;
        /// <summary>
        /// Whether sso is linked or not.
        /// </summary>
        public readonly bool SsoLinked;
        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// List of users in the UserGroup.
        /// </summary>
        public readonly ImmutableArray<string> Users;

        [OutputConstructor]
        private GetUsergroupResult(
            string description,

            bool externallyManaged,

            string id,

            string? identifier,

            string linkedSsoDisplayName,

            string linkedSsoId,

            string linkedSsoType,

            string? name,

            ImmutableArray<Outputs.GetUsergroupNotificationConfigResult> notificationConfigs,

            string? orgId,

            string? projectId,

            string ssoGroupId,

            string ssoGroupName,

            bool ssoLinked,

            ImmutableArray<string> tags,

            ImmutableArray<string> users)
        {
            Description = description;
            ExternallyManaged = externallyManaged;
            Id = id;
            Identifier = identifier;
            LinkedSsoDisplayName = linkedSsoDisplayName;
            LinkedSsoId = linkedSsoId;
            LinkedSsoType = linkedSsoType;
            Name = name;
            NotificationConfigs = notificationConfigs;
            OrgId = orgId;
            ProjectId = projectId;
            SsoGroupId = ssoGroupId;
            SsoGroupName = ssoGroupName;
            SsoLinked = ssoLinked;
            Tags = tags;
            Users = users;
        }
    }
}
