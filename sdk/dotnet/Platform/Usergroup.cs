// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating a Harness User Group. Linking SSO providers with User Groups:
    /// 
    ///         The following fields need to be populated for LDAP SSO Providers:
    ///     	
    ///         - LinkedSsoId
    ///     	
    ///         - LinkedSsoDisplayName
    ///     	
    ///         - SsoGroupId
    ///     	
    ///         - SsoGroupName
    ///     	
    ///         - LinkedSsoType
    ///     	
    ///         - SsoLinked
    ///     	
    ///         The following fields need to be populated for SAML SSO Providers:
    ///     	
    ///         - LinkedSsoId
    ///     	
    ///         - LinkedSsoDisplayName
    ///     	
    ///         - SsoGroupName
    ///     	
    ///         - SsoGroupId // same as SsoGroupName
    ///     	
    ///         - LinkedSsoType
    ///     	
    ///         - SsoLinked
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var ssoTypeSaml = new Harness.Platform.Usergroup("sso_type_saml", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///         OrgId = "org_id",
    ///         ProjectId = "project_id",
    ///         LinkedSsoId = "linked_sso_id",
    ///         ExternallyManaged = false,
    ///         Users = new[]
    ///         {
    ///             "user_id",
    ///         },
    ///         NotificationConfigs = new[]
    ///         {
    ///             new Harness.Platform.Inputs.UsergroupNotificationConfigArgs
    ///             {
    ///                 Type = "SLACK",
    ///                 SlackWebhookUrl = "https://google.com",
    ///             },
    ///             new Harness.Platform.Inputs.UsergroupNotificationConfigArgs
    ///             {
    ///                 Type = "EMAIL",
    ///                 GroupEmail = "email@email.com",
    ///                 SendEmailToAllUsers = true,
    ///             },
    ///             new Harness.Platform.Inputs.UsergroupNotificationConfigArgs
    ///             {
    ///                 Type = "MSTEAMS",
    ///                 MicrosoftTeamsWebhookUrl = "https://google.com",
    ///             },
    ///             new Harness.Platform.Inputs.UsergroupNotificationConfigArgs
    ///             {
    ///                 Type = "PAGERDUTY",
    ///                 PagerDutyKey = "pagerDutyKey",
    ///             },
    ///         },
    ///         LinkedSsoDisplayName = "linked_sso_display_name",
    ///         SsoGroupId = "sso_group_name",
    ///         SsoGroupName = "sso_group_name",
    ///         LinkedSsoType = "SAML",
    ///         SsoLinked = true,
    ///     });
    /// 
    ///     var ssoTypeLdap = new Harness.Platform.Usergroup("sso_type_ldap", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///         OrgId = "org_id",
    ///         ProjectId = "project_id",
    ///         LinkedSsoId = "linked_sso_id",
    ///         ExternallyManaged = false,
    ///         Users = new[]
    ///         {
    ///             "user_id",
    ///         },
    ///         NotificationConfigs = new[]
    ///         {
    ///             new Harness.Platform.Inputs.UsergroupNotificationConfigArgs
    ///             {
    ///                 Type = "SLACK",
    ///                 SlackWebhookUrl = "https://google.com",
    ///             },
    ///             new Harness.Platform.Inputs.UsergroupNotificationConfigArgs
    ///             {
    ///                 Type = "EMAIL",
    ///                 GroupEmail = "email@email.com",
    ///                 SendEmailToAllUsers = true,
    ///             },
    ///             new Harness.Platform.Inputs.UsergroupNotificationConfigArgs
    ///             {
    ///                 Type = "MSTEAMS",
    ///                 MicrosoftTeamsWebhookUrl = "https://google.com",
    ///             },
    ///             new Harness.Platform.Inputs.UsergroupNotificationConfigArgs
    ///             {
    ///                 Type = "PAGERDUTY",
    ///                 PagerDutyKey = "pagerDutyKey",
    ///             },
    ///         },
    ///         LinkedSsoDisplayName = "linked_sso_display_name",
    ///         SsoGroupId = "sso_group_id",
    ///         SsoGroupName = "sso_group_name",
    ///         LinkedSsoType = "LDAP",
    ///         SsoLinked = true,
    ///     });
    /// 
    ///     // Create user group by adding user emails
    ///     var example = new Harness.Platform.Usergroup("example", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///         OrgId = "org_id",
    ///         ProjectId = "project_id",
    ///         LinkedSsoId = "linked_sso_id",
    ///         ExternallyManaged = false,
    ///         UserEmails = new[]
    ///         {
    ///             "user@email.com",
    ///         },
    ///         NotificationConfigs = new[]
    ///         {
    ///             new Harness.Platform.Inputs.UsergroupNotificationConfigArgs
    ///             {
    ///                 Type = "SLACK",
    ///                 SlackWebhookUrl = "https://google.com",
    ///             },
    ///             new Harness.Platform.Inputs.UsergroupNotificationConfigArgs
    ///             {
    ///                 Type = "EMAIL",
    ///                 GroupEmail = "email@email.com",
    ///                 SendEmailToAllUsers = true,
    ///             },
    ///             new Harness.Platform.Inputs.UsergroupNotificationConfigArgs
    ///             {
    ///                 Type = "MSTEAMS",
    ///                 MicrosoftTeamsWebhookUrl = "https://google.com",
    ///             },
    ///             new Harness.Platform.Inputs.UsergroupNotificationConfigArgs
    ///             {
    ///                 Type = "PAGERDUTY",
    ///                 PagerDutyKey = "pagerDutyKey",
    ///             },
    ///         },
    ///         LinkedSsoDisplayName = "linked_sso_display_name",
    ///         SsoGroupId = "sso_group_name",
    ///         SsoGroupName = "sso_group_name",
    ///         LinkedSsoType = "SAML",
    ///         SsoLinked = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import account level user group
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/usergroup:Usergroup example &lt;usergroup_id&gt;
    /// ```
    /// 
    /// Import org level user group
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/usergroup:Usergroup example &lt;ord_id&gt;/&lt;usergroup_id&gt;
    /// ```
    /// 
    /// Import project level user group
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/usergroup:Usergroup example &lt;org_id&gt;/&lt;project_id&gt;/&lt;usergroup_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/usergroup:Usergroup")]
    public partial class Usergroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether the user group is externally managed.
        /// </summary>
        [Output("externallyManaged")]
        public Output<bool?> ExternallyManaged { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Name of the linked SSO.
        /// </summary>
        [Output("linkedSsoDisplayName")]
        public Output<string?> LinkedSsoDisplayName { get; private set; } = null!;

        /// <summary>
        /// The SSO account ID that the user group is linked to.
        /// </summary>
        [Output("linkedSsoId")]
        public Output<string?> LinkedSsoId { get; private set; } = null!;

        /// <summary>
        /// Type of linked SSO.
        /// </summary>
        [Output("linkedSsoType")]
        public Output<string?> LinkedSsoType { get; private set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of notification settings.
        /// </summary>
        [Output("notificationConfigs")]
        public Output<ImmutableArray<Outputs.UsergroupNotificationConfig>> NotificationConfigs { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Identifier of the userGroup in SSO.
        /// </summary>
        [Output("ssoGroupId")]
        public Output<string?> SsoGroupId { get; private set; } = null!;

        /// <summary>
        /// Name of the SSO userGroup.
        /// </summary>
        [Output("ssoGroupName")]
        public Output<string?> SsoGroupName { get; private set; } = null!;

        /// <summary>
        /// Whether sso is linked or not.
        /// </summary>
        [Output("ssoLinked")]
        public Output<bool> SsoLinked { get; private set; } = null!;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// List of user emails in the UserGroup. Either provide list of users or list of user emails.
        /// </summary>
        [Output("userEmails")]
        public Output<ImmutableArray<string>> UserEmails { get; private set; } = null!;

        /// <summary>
        /// List of users in the UserGroup. Either provide list of users or list of user emails. (Should be null for SSO managed)
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<string>> Users { get; private set; } = null!;


        /// <summary>
        /// Create a Usergroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Usergroup(string name, UsergroupArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/usergroup:Usergroup", name, args ?? new UsergroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Usergroup(string name, Input<string> id, UsergroupState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/usergroup:Usergroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Usergroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Usergroup Get(string name, Input<string> id, UsergroupState? state = null, CustomResourceOptions? options = null)
        {
            return new Usergroup(name, id, state, options);
        }
    }

    public sealed class UsergroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the user group is externally managed.
        /// </summary>
        [Input("externallyManaged")]
        public Input<bool>? ExternallyManaged { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the linked SSO.
        /// </summary>
        [Input("linkedSsoDisplayName")]
        public Input<string>? LinkedSsoDisplayName { get; set; }

        /// <summary>
        /// The SSO account ID that the user group is linked to.
        /// </summary>
        [Input("linkedSsoId")]
        public Input<string>? LinkedSsoId { get; set; }

        /// <summary>
        /// Type of linked SSO.
        /// </summary>
        [Input("linkedSsoType")]
        public Input<string>? LinkedSsoType { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationConfigs")]
        private InputList<Inputs.UsergroupNotificationConfigArgs>? _notificationConfigs;

        /// <summary>
        /// List of notification settings.
        /// </summary>
        public InputList<Inputs.UsergroupNotificationConfigArgs> NotificationConfigs
        {
            get => _notificationConfigs ?? (_notificationConfigs = new InputList<Inputs.UsergroupNotificationConfigArgs>());
            set => _notificationConfigs = value;
        }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Identifier of the userGroup in SSO.
        /// </summary>
        [Input("ssoGroupId")]
        public Input<string>? SsoGroupId { get; set; }

        /// <summary>
        /// Name of the SSO userGroup.
        /// </summary>
        [Input("ssoGroupName")]
        public Input<string>? SsoGroupName { get; set; }

        /// <summary>
        /// Whether sso is linked or not.
        /// </summary>
        [Input("ssoLinked")]
        public Input<bool>? SsoLinked { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("userEmails")]
        private InputList<string>? _userEmails;

        /// <summary>
        /// List of user emails in the UserGroup. Either provide list of users or list of user emails.
        /// </summary>
        public InputList<string> UserEmails
        {
            get => _userEmails ?? (_userEmails = new InputList<string>());
            set => _userEmails = value;
        }

        [Input("users")]
        private InputList<string>? _users;

        /// <summary>
        /// List of users in the UserGroup. Either provide list of users or list of user emails. (Should be null for SSO managed)
        /// </summary>
        public InputList<string> Users
        {
            get => _users ?? (_users = new InputList<string>());
            set => _users = value;
        }

        public UsergroupArgs()
        {
        }
        public static new UsergroupArgs Empty => new UsergroupArgs();
    }

    public sealed class UsergroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the user group is externally managed.
        /// </summary>
        [Input("externallyManaged")]
        public Input<bool>? ExternallyManaged { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Name of the linked SSO.
        /// </summary>
        [Input("linkedSsoDisplayName")]
        public Input<string>? LinkedSsoDisplayName { get; set; }

        /// <summary>
        /// The SSO account ID that the user group is linked to.
        /// </summary>
        [Input("linkedSsoId")]
        public Input<string>? LinkedSsoId { get; set; }

        /// <summary>
        /// Type of linked SSO.
        /// </summary>
        [Input("linkedSsoType")]
        public Input<string>? LinkedSsoType { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationConfigs")]
        private InputList<Inputs.UsergroupNotificationConfigGetArgs>? _notificationConfigs;

        /// <summary>
        /// List of notification settings.
        /// </summary>
        public InputList<Inputs.UsergroupNotificationConfigGetArgs> NotificationConfigs
        {
            get => _notificationConfigs ?? (_notificationConfigs = new InputList<Inputs.UsergroupNotificationConfigGetArgs>());
            set => _notificationConfigs = value;
        }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Identifier of the userGroup in SSO.
        /// </summary>
        [Input("ssoGroupId")]
        public Input<string>? SsoGroupId { get; set; }

        /// <summary>
        /// Name of the SSO userGroup.
        /// </summary>
        [Input("ssoGroupName")]
        public Input<string>? SsoGroupName { get; set; }

        /// <summary>
        /// Whether sso is linked or not.
        /// </summary>
        [Input("ssoLinked")]
        public Input<bool>? SsoLinked { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("userEmails")]
        private InputList<string>? _userEmails;

        /// <summary>
        /// List of user emails in the UserGroup. Either provide list of users or list of user emails.
        /// </summary>
        public InputList<string> UserEmails
        {
            get => _userEmails ?? (_userEmails = new InputList<string>());
            set => _userEmails = value;
        }

        [Input("users")]
        private InputList<string>? _users;

        /// <summary>
        /// List of users in the UserGroup. Either provide list of users or list of user emails. (Should be null for SSO managed)
        /// </summary>
        public InputList<string> Users
        {
            get => _users ?? (_users = new InputList<string>());
            set => _users = value;
        }

        public UsergroupState()
        {
        }
        public static new UsergroupState Empty => new UsergroupState();
    }
}
