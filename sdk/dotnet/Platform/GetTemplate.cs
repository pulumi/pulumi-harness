// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetTemplate
    {
        /// <summary>
        /// Data source for retrieving a Harness pipeline.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     //For account level template
        ///     var example = Harness.Platform.GetTemplate.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         Version = "version",
        ///     });
        /// 
        ///     //For org level template
        ///     var example1 = Harness.Platform.GetTemplate.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         Version = "version",
        ///         OrgId = "org_id",
        ///     });
        /// 
        ///     //For project level template
        ///     var example2 = Harness.Platform.GetTemplate.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         Version = "version",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTemplateResult> InvokeAsync(GetTemplateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTemplateResult>("harness:platform/getTemplate:getTemplate", args ?? new GetTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness pipeline.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     //For account level template
        ///     var example = Harness.Platform.GetTemplate.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         Version = "version",
        ///     });
        /// 
        ///     //For org level template
        ///     var example1 = Harness.Platform.GetTemplate.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         Version = "version",
        ///         OrgId = "org_id",
        ///     });
        /// 
        ///     //For project level template
        ///     var example2 = Harness.Platform.GetTemplate.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         Version = "version",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTemplateResult> Invoke(GetTemplateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTemplateResult>("harness:platform/getTemplate:getTemplate", args ?? new GetTemplateInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness pipeline.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     //For account level template
        ///     var example = Harness.Platform.GetTemplate.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         Version = "version",
        ///     });
        /// 
        ///     //For org level template
        ///     var example1 = Harness.Platform.GetTemplate.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         Version = "version",
        ///         OrgId = "org_id",
        ///     });
        /// 
        ///     //For project level template
        ///     var example2 = Harness.Platform.GetTemplate.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         Version = "version",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTemplateResult> Invoke(GetTemplateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTemplateResult>("harness:platform/getTemplate:getTemplate", args ?? new GetTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Version Label for Template.
        /// </summary>
        [Input("branchName")]
        public string? BranchName { get; set; }

        /// <summary>
        /// Defines child template type.
        /// </summary>
        [Input("childType")]
        public string? ChildType { get; set; }

        /// <summary>
        /// Contains parameters related to creating an Entity for Git Experience.
        /// </summary>
        [Input("gitDetails")]
        public Inputs.GetTemplateGitDetailsArgs? GitDetails { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public string? Identifier { get; set; }

        /// <summary>
        /// True if given version for template to be set as stable.
        /// </summary>
        [Input("isStable")]
        public bool? IsStable { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// Scope of template.
        /// </summary>
        [Input("scope")]
        public string? Scope { get; set; }

        /// <summary>
        /// Version Label for Template.
        /// </summary>
        [Input("version")]
        public string? Version { get; set; }

        public GetTemplateArgs()
        {
        }
        public static new GetTemplateArgs Empty => new GetTemplateArgs();
    }

    public sealed class GetTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Version Label for Template.
        /// </summary>
        [Input("branchName")]
        public Input<string>? BranchName { get; set; }

        /// <summary>
        /// Defines child template type.
        /// </summary>
        [Input("childType")]
        public Input<string>? ChildType { get; set; }

        /// <summary>
        /// Contains parameters related to creating an Entity for Git Experience.
        /// </summary>
        [Input("gitDetails")]
        public Input<Inputs.GetTemplateGitDetailsInputArgs>? GitDetails { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// True if given version for template to be set as stable.
        /// </summary>
        [Input("isStable")]
        public Input<bool>? IsStable { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Scope of template.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// Version Label for Template.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public GetTemplateInvokeArgs()
        {
        }
        public static new GetTemplateInvokeArgs Empty => new GetTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetTemplateResult
    {
        /// <summary>
        /// Version Label for Template.
        /// </summary>
        public readonly string? BranchName;
        /// <summary>
        /// Defines child template type.
        /// </summary>
        public readonly string? ChildType;
        /// <summary>
        /// Identifier of the Harness Connector used for CRUD operations on the Entity.
        /// </summary>
        public readonly string ConnectorRef;
        /// <summary>
        /// Description of the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Contains parameters related to creating an Entity for Git Experience.
        /// </summary>
        public readonly Outputs.GetTemplateGitDetailsResult? GitDetails;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        public readonly string? Identifier;
        /// <summary>
        /// True if given version for template to be set as stable.
        /// </summary>
        public readonly bool? IsStable;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Scope of template.
        /// </summary>
        public readonly string? Scope;
        /// <summary>
        /// Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
        /// </summary>
        public readonly string StoreType;
        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Yaml for creating new Template.
        /// </summary>
        public readonly string TemplateYaml;
        /// <summary>
        /// Version Label for Template.
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private GetTemplateResult(
            string? branchName,

            string? childType,

            string connectorRef,

            string description,

            Outputs.GetTemplateGitDetailsResult? gitDetails,

            string id,

            string? identifier,

            bool? isStable,

            string? name,

            string? orgId,

            string? projectId,

            string? scope,

            string storeType,

            ImmutableArray<string> tags,

            string templateYaml,

            string? version)
        {
            BranchName = branchName;
            ChildType = childType;
            ConnectorRef = connectorRef;
            Description = description;
            GitDetails = gitDetails;
            Id = id;
            Identifier = identifier;
            IsStable = isStable;
            Name = name;
            OrgId = orgId;
            ProjectId = projectId;
            Scope = scope;
            StoreType = storeType;
            Tags = tags;
            TemplateYaml = templateYaml;
            Version = version;
        }
    }
}
