// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating a Harness Repo.
    /// 
    /// ## Import
    /// 
    /// Import
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/repo:Repo example &lt;identifier&gt;
    /// ```
    /// 
    /// Import using the organization id
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/repo:Repo example &lt;org_id&gt;/&lt;identifier&gt;
    /// ```
    /// 
    /// Import using the organization id and the project id
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/repo:Repo example &lt;org_id&gt;/&lt;project_id&gt;/&lt;identifier&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/repo:Repo")]
    public partial class Repo : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Timestamp when the repository was created.
        /// </summary>
        [Output("created")]
        public Output<int> Created { get; private set; } = null!;

        /// <summary>
        /// ID of the user who created the repository.
        /// </summary>
        [Output("createdBy")]
        public Output<int> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// Default branch of the repository (Applicate only for create).
        /// </summary>
        [Output("defaultBranch")]
        public Output<string?> DefaultBranch { get; private set; } = null!;

        /// <summary>
        /// Description of the repository.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Repository should be created with specified predefined gitignore file.
        /// </summary>
        [Output("gitIgnore")]
        public Output<string?> GitIgnore { get; private set; } = null!;

        /// <summary>
        /// Git URL of the repository.
        /// </summary>
        [Output("gitUrl")]
        public Output<string> GitUrl { get; private set; } = null!;

        /// <summary>
        /// Identifier of the repository.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Repository should be created with specified predefined license file.
        /// </summary>
        [Output("license")]
        public Output<string?> License { get; private set; } = null!;

        /// <summary>
        /// Name of the repository.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Path of the repository.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Repository should be created with readme file.
        /// </summary>
        [Output("readme")]
        public Output<bool?> Readme { get; private set; } = null!;

        /// <summary>
        /// Configuration for importing an existing repository from SCM provider.
        /// </summary>
        [Output("sources")]
        public Output<ImmutableArray<Outputs.RepoSource>> Sources { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the repository was last updated.
        /// </summary>
        [Output("updated")]
        public Output<int> Updated { get; private set; } = null!;


        /// <summary>
        /// Create a Repo resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Repo(string name, RepoArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/repo:Repo", name, args ?? new RepoArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Repo(string name, Input<string> id, RepoState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/repo:Repo", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Repo resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Repo Get(string name, Input<string> id, RepoState? state = null, CustomResourceOptions? options = null)
        {
            return new Repo(name, id, state, options);
        }
    }

    public sealed class RepoArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Default branch of the repository (Applicate only for create).
        /// </summary>
        [Input("defaultBranch")]
        public Input<string>? DefaultBranch { get; set; }

        /// <summary>
        /// Description of the repository.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Repository should be created with specified predefined gitignore file.
        /// </summary>
        [Input("gitIgnore")]
        public Input<string>? GitIgnore { get; set; }

        /// <summary>
        /// Identifier of the repository.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Repository should be created with specified predefined license file.
        /// </summary>
        [Input("license")]
        public Input<string>? License { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Repository should be created with readme file.
        /// </summary>
        [Input("readme")]
        public Input<bool>? Readme { get; set; }

        [Input("sources")]
        private InputList<Inputs.RepoSourceArgs>? _sources;

        /// <summary>
        /// Configuration for importing an existing repository from SCM provider.
        /// </summary>
        public InputList<Inputs.RepoSourceArgs> Sources
        {
            get => _sources ?? (_sources = new InputList<Inputs.RepoSourceArgs>());
            set => _sources = value;
        }

        public RepoArgs()
        {
        }
        public static new RepoArgs Empty => new RepoArgs();
    }

    public sealed class RepoState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Timestamp when the repository was created.
        /// </summary>
        [Input("created")]
        public Input<int>? Created { get; set; }

        /// <summary>
        /// ID of the user who created the repository.
        /// </summary>
        [Input("createdBy")]
        public Input<int>? CreatedBy { get; set; }

        /// <summary>
        /// Default branch of the repository (Applicate only for create).
        /// </summary>
        [Input("defaultBranch")]
        public Input<string>? DefaultBranch { get; set; }

        /// <summary>
        /// Description of the repository.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Repository should be created with specified predefined gitignore file.
        /// </summary>
        [Input("gitIgnore")]
        public Input<string>? GitIgnore { get; set; }

        /// <summary>
        /// Git URL of the repository.
        /// </summary>
        [Input("gitUrl")]
        public Input<string>? GitUrl { get; set; }

        /// <summary>
        /// Identifier of the repository.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Repository should be created with specified predefined license file.
        /// </summary>
        [Input("license")]
        public Input<string>? License { get; set; }

        /// <summary>
        /// Name of the repository.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Path of the repository.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Repository should be created with readme file.
        /// </summary>
        [Input("readme")]
        public Input<bool>? Readme { get; set; }

        [Input("sources")]
        private InputList<Inputs.RepoSourceGetArgs>? _sources;

        /// <summary>
        /// Configuration for importing an existing repository from SCM provider.
        /// </summary>
        public InputList<Inputs.RepoSourceGetArgs> Sources
        {
            get => _sources ?? (_sources = new InputList<Inputs.RepoSourceGetArgs>());
            set => _sources = value;
        }

        /// <summary>
        /// Timestamp when the repository was last updated.
        /// </summary>
        [Input("updated")]
        public Input<int>? Updated { get; set; }

        public RepoState()
        {
        }
        public static new RepoState Empty => new RepoState();
    }
}
