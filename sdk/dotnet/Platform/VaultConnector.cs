// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating a HashiCorp Vault Secret Manager connector.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var awsAuth = new Harness.Platform.VaultConnector("aws_auth", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///         Description = "test",
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///         },
    ///         AwsRegion = "aws_region",
    ///         BasePath = "base_path",
    ///         AccessType = "AWS_IAM",
    ///         Default = false,
    ///         XvaultAwsIamServerId = $"account.{test.Id}",
    ///         ReadOnly = true,
    ///         RenewalIntervalMinutes = 60,
    ///         SecretEngineManuallyConfigured = true,
    ///         SecretEngineName = "secret_engine_name",
    ///         SecretEngineVersion = 2,
    ///         VaultAwsIamRole = "vault_aws_iam_role",
    ///         UseAwsIam = true,
    ///         UseK8sAuth = false,
    ///         UseVaultAgent = false,
    ///         DelegateSelectors = new[]
    ///         {
    ///             "harness-delegate",
    ///         },
    ///         VaultUrl = "https://vault_url.com",
    ///         UseJwtAuth = false,
    ///     });
    /// 
    ///     var appRole = new Harness.Platform.VaultConnector("app_role", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///         Description = "test",
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///         },
    ///         AppRoleId = "app_role_id",
    ///         BasePath = "base_path",
    ///         AccessType = "APP_ROLE",
    ///         Default = false,
    ///         SecretId = $"account.{test.Id}",
    ///         ReadOnly = true,
    ///         RenewalIntervalMinutes = 60,
    ///         SecretEngineManuallyConfigured = true,
    ///         SecretEngineName = "secret_engine_name",
    ///         SecretEngineVersion = 2,
    ///         UseAwsIam = false,
    ///         UseK8sAuth = false,
    ///         UseVaultAgent = false,
    ///         RenewAppRoleToken = true,
    ///         DelegateSelectors = new[]
    ///         {
    ///             "harness-delegate",
    ///         },
    ///         VaultUrl = "https://vault_url.com",
    ///         UseJwtAuth = false,
    ///     });
    /// 
    ///     var k8sAuth = new Harness.Platform.VaultConnector("k8s_auth", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///         Description = "test",
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///         },
    ///         AuthToken = $"account.{test.Id}",
    ///         BasePath = "base_path",
    ///         AccessType = "K8s_AUTH",
    ///         Default = false,
    ///         K8sAuthEndpoint = "k8s_auth_endpoint",
    ///         Namespace = "namespace",
    ///         ReadOnly = true,
    ///         RenewalIntervalMinutes = 10,
    ///         SecretEngineManuallyConfigured = true,
    ///         SecretEngineName = "secret_engine_name",
    ///         SecretEngineVersion = 2,
    ///         ServiceAccountTokenPath = "service_account_token_path",
    ///         UseAwsIam = false,
    ///         UseK8sAuth = true,
    ///         UseVaultAgent = false,
    ///         VaultK8sAuthRole = "vault_k8s_auth_role",
    ///         VaultAwsIamRole = "vault_aws_iam_role",
    ///         DelegateSelectors = new[]
    ///         {
    ///             "harness-delegate",
    ///         },
    ///         VaultUrl = "https://vault_url.com",
    ///         UseJwtAuth = false,
    ///     });
    /// 
    ///     var vaultAgent = new Harness.Platform.VaultConnector("vault_agent", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///         Description = "test",
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///         },
    ///         AuthToken = $"account.{test.Id}",
    ///         BasePath = "base_path",
    ///         AccessType = "VAULT_AGENT",
    ///         Default = false,
    ///         Namespace = "namespace",
    ///         ReadOnly = true,
    ///         RenewalIntervalMinutes = 10,
    ///         SecretEngineManuallyConfigured = true,
    ///         SecretEngineName = "secret_engine_name",
    ///         SecretEngineVersion = 2,
    ///         UseAwsIam = false,
    ///         UseK8sAuth = false,
    ///         UseVaultAgent = true,
    ///         SinkPath = "sink_path",
    ///         DelegateSelectors = new[]
    ///         {
    ///             "harness-delegate",
    ///         },
    ///         VaultUrl = "https://vault_url.com",
    ///         UseJwtAuth = false,
    ///     });
    /// 
    ///     var token = new Harness.Platform.VaultConnector("token", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///         Description = "test",
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///         },
    ///         AuthToken = $"account.{test.Id}",
    ///         BasePath = "base_path",
    ///         AccessType = "TOKEN",
    ///         Default = false,
    ///         Namespace = "namespace",
    ///         ReadOnly = true,
    ///         RenewalIntervalMinutes = 10,
    ///         SecretEngineManuallyConfigured = true,
    ///         SecretEngineName = "secret_engine_name",
    ///         SecretEngineVersion = 2,
    ///         UseAwsIam = false,
    ///         UseK8sAuth = false,
    ///         VaultUrl = "https://vault_url.com",
    ///         UseJwtAuth = false,
    ///     });
    /// 
    ///     var jwt = new Harness.Platform.VaultConnector("jwt", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///         Description = "test",
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///         },
    ///         BasePath = "base_path",
    ///         AccessType = "JWT",
    ///         Default = false,
    ///         ReadOnly = true,
    ///         RenewalIntervalMinutes = 60,
    ///         SecretEngineManuallyConfigured = true,
    ///         SecretEngineName = "secret_engine_name",
    ///         SecretEngineVersion = 2,
    ///         UseAwsIam = false,
    ///         UseK8sAuth = false,
    ///         UseVaultAgent = false,
    ///         RenewAppRoleToken = false,
    ///         DelegateSelectors = new[]
    ///         {
    ///             "harness-delegate",
    ///         },
    ///         VaultUrl = "https://vault_url.com",
    ///         UseJwtAuth = true,
    ///         VaultJwtAuthRole = "vault_jwt_auth_role",
    ///         VaultJwtAuthPath = "vault_jwt_auth_path",
    ///         ExecuteOnDelegate = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import account level vault connector
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/vaultConnector:VaultConnector example &lt;connector_id&gt;
    /// ```
    /// 
    /// Import org level vault connector
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/vaultConnector:VaultConnector example &lt;ord_id&gt;/&lt;connector_id&gt;
    /// ```
    /// 
    /// Import project level vault connector
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/vaultConnector:VaultConnector example &lt;org_id&gt;/&lt;project_id&gt;/&lt;connector_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/vaultConnector:VaultConnector")]
    public partial class VaultConnector : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Access type.
        /// </summary>
        [Output("accessType")]
        public Output<string?> AccessType { get; private set; } = null!;

        /// <summary>
        /// ID of App Role.
        /// </summary>
        [Output("appRoleId")]
        public Output<string?> AppRoleId { get; private set; } = null!;

        /// <summary>
        /// Authentication token for Vault.
        /// </summary>
        [Output("authToken")]
        public Output<string> AuthToken { get; private set; } = null!;

        /// <summary>
        /// AWS region where the AWS IAM authentication will happen.
        /// </summary>
        [Output("awsRegion")]
        public Output<string?> AwsRegion { get; private set; } = null!;

        /// <summary>
        /// Location of the Vault directory where the secret will be stored.
        /// </summary>
        [Output("basePath")]
        public Output<string?> BasePath { get; private set; } = null!;

        /// <summary>
        /// Is default or not.
        /// </summary>
        [Output("default")]
        public Output<bool?> Default { get; private set; } = null!;

        /// <summary>
        /// List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.
        /// </summary>
        [Output("delegateSelectors")]
        public Output<ImmutableArray<string>> DelegateSelectors { get; private set; } = null!;

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Execute on delegate or not.
        /// </summary>
        [Output("executeOnDelegate")]
        public Output<bool?> ExecuteOnDelegate { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Is default or not.
        /// </summary>
        [Output("isDefault")]
        public Output<bool?> IsDefault { get; private set; } = null!;

        /// <summary>
        /// Read only or not.
        /// </summary>
        [Output("isReadOnly")]
        public Output<bool?> IsReadOnly { get; private set; } = null!;

        /// <summary>
        /// The path where Kubernetes Auth is enabled in Vault.
        /// </summary>
        [Output("k8sAuthEndpoint")]
        public Output<string?> K8sAuthEndpoint { get; private set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Vault namespace where the Secret will be created.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Read only.
        /// </summary>
        [Output("readOnly")]
        public Output<bool?> ReadOnly { get; private set; } = null!;

        /// <summary>
        /// Boolean value to indicate if AppRole token renewal is enabled or not.
        /// </summary>
        [Output("renewAppRoleToken")]
        public Output<bool> RenewAppRoleToken { get; private set; } = null!;

        /// <summary>
        /// The time interval for the token renewal.
        /// </summary>
        [Output("renewalIntervalMinutes")]
        public Output<int> RenewalIntervalMinutes { get; private set; } = null!;

        /// <summary>
        /// Manually entered Secret Engine.
        /// </summary>
        [Output("secretEngineManuallyConfigured")]
        public Output<bool?> SecretEngineManuallyConfigured { get; private set; } = null!;

        /// <summary>
        /// Name of the Secret Engine.
        /// </summary>
        [Output("secretEngineName")]
        public Output<string?> SecretEngineName { get; private set; } = null!;

        /// <summary>
        /// Version of Secret Engine.
        /// </summary>
        [Output("secretEngineVersion")]
        public Output<int?> SecretEngineVersion { get; private set; } = null!;

        /// <summary>
        /// ID of the Secret.
        /// </summary>
        [Output("secretId")]
        public Output<string?> SecretId { get; private set; } = null!;

        /// <summary>
        /// The Service Account token path in the K8s pod where the token is mounted.
        /// </summary>
        [Output("serviceAccountTokenPath")]
        public Output<string?> ServiceAccountTokenPath { get; private set; } = null!;

        /// <summary>
        /// The location from which the authentication token should be read.
        /// </summary>
        [Output("sinkPath")]
        public Output<string?> SinkPath { get; private set; } = null!;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Boolean value to indicate if AWS IAM is used for authentication.
        /// </summary>
        [Output("useAwsIam")]
        public Output<bool?> UseAwsIam { get; private set; } = null!;

        /// <summary>
        /// Boolean value to indicate if JWT is used for authentication.
        /// </summary>
        [Output("useJwtAuth")]
        public Output<bool?> UseJwtAuth { get; private set; } = null!;

        /// <summary>
        /// Boolean value to indicate if K8s Auth is used for authentication.
        /// </summary>
        [Output("useK8sAuth")]
        public Output<bool?> UseK8sAuth { get; private set; } = null!;

        /// <summary>
        /// Boolean value to indicate if Vault Agent is used for authentication.
        /// </summary>
        [Output("useVaultAgent")]
        public Output<bool?> UseVaultAgent { get; private set; } = null!;

        /// <summary>
        /// The Vault role defined to bind to aws iam account/role being accessed.
        /// </summary>
        [Output("vaultAwsIamRole")]
        public Output<string?> VaultAwsIamRole { get; private set; } = null!;

        /// <summary>
        /// Custom path at with JWT auth in enabled for Vault
        /// </summary>
        [Output("vaultJwtAuthPath")]
        public Output<string?> VaultJwtAuthPath { get; private set; } = null!;

        /// <summary>
        /// The Vault role defined with JWT auth type for accessing Vault as per policies binded.
        /// </summary>
        [Output("vaultJwtAuthRole")]
        public Output<string?> VaultJwtAuthRole { get; private set; } = null!;

        /// <summary>
        /// The role where K8s Auth will happen.
        /// </summary>
        [Output("vaultK8sAuthRole")]
        public Output<string?> VaultK8sAuthRole { get; private set; } = null!;

        /// <summary>
        /// URL of the HashiCorp Vault.
        /// </summary>
        [Output("vaultUrl")]
        public Output<string> VaultUrl { get; private set; } = null!;

        /// <summary>
        /// The AWS IAM Header Server ID that has been configured for this AWS IAM instance.
        /// </summary>
        [Output("xvaultAwsIamServerId")]
        public Output<string?> XvaultAwsIamServerId { get; private set; } = null!;


        /// <summary>
        /// Create a VaultConnector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VaultConnector(string name, VaultConnectorArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/vaultConnector:VaultConnector", name, args ?? new VaultConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VaultConnector(string name, Input<string> id, VaultConnectorState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/vaultConnector:VaultConnector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VaultConnector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VaultConnector Get(string name, Input<string> id, VaultConnectorState? state = null, CustomResourceOptions? options = null)
        {
            return new VaultConnector(name, id, state, options);
        }
    }

    public sealed class VaultConnectorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access type.
        /// </summary>
        [Input("accessType")]
        public Input<string>? AccessType { get; set; }

        /// <summary>
        /// ID of App Role.
        /// </summary>
        [Input("appRoleId")]
        public Input<string>? AppRoleId { get; set; }

        /// <summary>
        /// Authentication token for Vault.
        /// </summary>
        [Input("authToken")]
        public Input<string>? AuthToken { get; set; }

        /// <summary>
        /// AWS region where the AWS IAM authentication will happen.
        /// </summary>
        [Input("awsRegion")]
        public Input<string>? AwsRegion { get; set; }

        /// <summary>
        /// Location of the Vault directory where the secret will be stored.
        /// </summary>
        [Input("basePath")]
        public Input<string>? BasePath { get; set; }

        /// <summary>
        /// Is default or not.
        /// </summary>
        [Input("default")]
        public Input<bool>? Default { get; set; }

        [Input("delegateSelectors")]
        private InputList<string>? _delegateSelectors;

        /// <summary>
        /// List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.
        /// </summary>
        public InputList<string> DelegateSelectors
        {
            get => _delegateSelectors ?? (_delegateSelectors = new InputList<string>());
            set => _delegateSelectors = value;
        }

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Execute on delegate or not.
        /// </summary>
        [Input("executeOnDelegate")]
        public Input<bool>? ExecuteOnDelegate { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Is default or not.
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// Read only or not.
        /// </summary>
        [Input("isReadOnly")]
        public Input<bool>? IsReadOnly { get; set; }

        /// <summary>
        /// The path where Kubernetes Auth is enabled in Vault.
        /// </summary>
        [Input("k8sAuthEndpoint")]
        public Input<string>? K8sAuthEndpoint { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Vault namespace where the Secret will be created.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Read only.
        /// </summary>
        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        /// <summary>
        /// Boolean value to indicate if AppRole token renewal is enabled or not.
        /// </summary>
        [Input("renewAppRoleToken")]
        public Input<bool>? RenewAppRoleToken { get; set; }

        /// <summary>
        /// The time interval for the token renewal.
        /// </summary>
        [Input("renewalIntervalMinutes", required: true)]
        public Input<int> RenewalIntervalMinutes { get; set; } = null!;

        /// <summary>
        /// Manually entered Secret Engine.
        /// </summary>
        [Input("secretEngineManuallyConfigured")]
        public Input<bool>? SecretEngineManuallyConfigured { get; set; }

        /// <summary>
        /// Name of the Secret Engine.
        /// </summary>
        [Input("secretEngineName")]
        public Input<string>? SecretEngineName { get; set; }

        /// <summary>
        /// Version of Secret Engine.
        /// </summary>
        [Input("secretEngineVersion")]
        public Input<int>? SecretEngineVersion { get; set; }

        /// <summary>
        /// ID of the Secret.
        /// </summary>
        [Input("secretId")]
        public Input<string>? SecretId { get; set; }

        /// <summary>
        /// The Service Account token path in the K8s pod where the token is mounted.
        /// </summary>
        [Input("serviceAccountTokenPath")]
        public Input<string>? ServiceAccountTokenPath { get; set; }

        /// <summary>
        /// The location from which the authentication token should be read.
        /// </summary>
        [Input("sinkPath")]
        public Input<string>? SinkPath { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Boolean value to indicate if AWS IAM is used for authentication.
        /// </summary>
        [Input("useAwsIam")]
        public Input<bool>? UseAwsIam { get; set; }

        /// <summary>
        /// Boolean value to indicate if JWT is used for authentication.
        /// </summary>
        [Input("useJwtAuth")]
        public Input<bool>? UseJwtAuth { get; set; }

        /// <summary>
        /// Boolean value to indicate if K8s Auth is used for authentication.
        /// </summary>
        [Input("useK8sAuth")]
        public Input<bool>? UseK8sAuth { get; set; }

        /// <summary>
        /// Boolean value to indicate if Vault Agent is used for authentication.
        /// </summary>
        [Input("useVaultAgent")]
        public Input<bool>? UseVaultAgent { get; set; }

        /// <summary>
        /// The Vault role defined to bind to aws iam account/role being accessed.
        /// </summary>
        [Input("vaultAwsIamRole")]
        public Input<string>? VaultAwsIamRole { get; set; }

        /// <summary>
        /// Custom path at with JWT auth in enabled for Vault
        /// </summary>
        [Input("vaultJwtAuthPath")]
        public Input<string>? VaultJwtAuthPath { get; set; }

        /// <summary>
        /// The Vault role defined with JWT auth type for accessing Vault as per policies binded.
        /// </summary>
        [Input("vaultJwtAuthRole")]
        public Input<string>? VaultJwtAuthRole { get; set; }

        /// <summary>
        /// The role where K8s Auth will happen.
        /// </summary>
        [Input("vaultK8sAuthRole")]
        public Input<string>? VaultK8sAuthRole { get; set; }

        /// <summary>
        /// URL of the HashiCorp Vault.
        /// </summary>
        [Input("vaultUrl", required: true)]
        public Input<string> VaultUrl { get; set; } = null!;

        /// <summary>
        /// The AWS IAM Header Server ID that has been configured for this AWS IAM instance.
        /// </summary>
        [Input("xvaultAwsIamServerId")]
        public Input<string>? XvaultAwsIamServerId { get; set; }

        public VaultConnectorArgs()
        {
        }
        public static new VaultConnectorArgs Empty => new VaultConnectorArgs();
    }

    public sealed class VaultConnectorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access type.
        /// </summary>
        [Input("accessType")]
        public Input<string>? AccessType { get; set; }

        /// <summary>
        /// ID of App Role.
        /// </summary>
        [Input("appRoleId")]
        public Input<string>? AppRoleId { get; set; }

        /// <summary>
        /// Authentication token for Vault.
        /// </summary>
        [Input("authToken")]
        public Input<string>? AuthToken { get; set; }

        /// <summary>
        /// AWS region where the AWS IAM authentication will happen.
        /// </summary>
        [Input("awsRegion")]
        public Input<string>? AwsRegion { get; set; }

        /// <summary>
        /// Location of the Vault directory where the secret will be stored.
        /// </summary>
        [Input("basePath")]
        public Input<string>? BasePath { get; set; }

        /// <summary>
        /// Is default or not.
        /// </summary>
        [Input("default")]
        public Input<bool>? Default { get; set; }

        [Input("delegateSelectors")]
        private InputList<string>? _delegateSelectors;

        /// <summary>
        /// List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.
        /// </summary>
        public InputList<string> DelegateSelectors
        {
            get => _delegateSelectors ?? (_delegateSelectors = new InputList<string>());
            set => _delegateSelectors = value;
        }

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Execute on delegate or not.
        /// </summary>
        [Input("executeOnDelegate")]
        public Input<bool>? ExecuteOnDelegate { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Is default or not.
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// Read only or not.
        /// </summary>
        [Input("isReadOnly")]
        public Input<bool>? IsReadOnly { get; set; }

        /// <summary>
        /// The path where Kubernetes Auth is enabled in Vault.
        /// </summary>
        [Input("k8sAuthEndpoint")]
        public Input<string>? K8sAuthEndpoint { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Vault namespace where the Secret will be created.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Read only.
        /// </summary>
        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        /// <summary>
        /// Boolean value to indicate if AppRole token renewal is enabled or not.
        /// </summary>
        [Input("renewAppRoleToken")]
        public Input<bool>? RenewAppRoleToken { get; set; }

        /// <summary>
        /// The time interval for the token renewal.
        /// </summary>
        [Input("renewalIntervalMinutes")]
        public Input<int>? RenewalIntervalMinutes { get; set; }

        /// <summary>
        /// Manually entered Secret Engine.
        /// </summary>
        [Input("secretEngineManuallyConfigured")]
        public Input<bool>? SecretEngineManuallyConfigured { get; set; }

        /// <summary>
        /// Name of the Secret Engine.
        /// </summary>
        [Input("secretEngineName")]
        public Input<string>? SecretEngineName { get; set; }

        /// <summary>
        /// Version of Secret Engine.
        /// </summary>
        [Input("secretEngineVersion")]
        public Input<int>? SecretEngineVersion { get; set; }

        /// <summary>
        /// ID of the Secret.
        /// </summary>
        [Input("secretId")]
        public Input<string>? SecretId { get; set; }

        /// <summary>
        /// The Service Account token path in the K8s pod where the token is mounted.
        /// </summary>
        [Input("serviceAccountTokenPath")]
        public Input<string>? ServiceAccountTokenPath { get; set; }

        /// <summary>
        /// The location from which the authentication token should be read.
        /// </summary>
        [Input("sinkPath")]
        public Input<string>? SinkPath { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Boolean value to indicate if AWS IAM is used for authentication.
        /// </summary>
        [Input("useAwsIam")]
        public Input<bool>? UseAwsIam { get; set; }

        /// <summary>
        /// Boolean value to indicate if JWT is used for authentication.
        /// </summary>
        [Input("useJwtAuth")]
        public Input<bool>? UseJwtAuth { get; set; }

        /// <summary>
        /// Boolean value to indicate if K8s Auth is used for authentication.
        /// </summary>
        [Input("useK8sAuth")]
        public Input<bool>? UseK8sAuth { get; set; }

        /// <summary>
        /// Boolean value to indicate if Vault Agent is used for authentication.
        /// </summary>
        [Input("useVaultAgent")]
        public Input<bool>? UseVaultAgent { get; set; }

        /// <summary>
        /// The Vault role defined to bind to aws iam account/role being accessed.
        /// </summary>
        [Input("vaultAwsIamRole")]
        public Input<string>? VaultAwsIamRole { get; set; }

        /// <summary>
        /// Custom path at with JWT auth in enabled for Vault
        /// </summary>
        [Input("vaultJwtAuthPath")]
        public Input<string>? VaultJwtAuthPath { get; set; }

        /// <summary>
        /// The Vault role defined with JWT auth type for accessing Vault as per policies binded.
        /// </summary>
        [Input("vaultJwtAuthRole")]
        public Input<string>? VaultJwtAuthRole { get; set; }

        /// <summary>
        /// The role where K8s Auth will happen.
        /// </summary>
        [Input("vaultK8sAuthRole")]
        public Input<string>? VaultK8sAuthRole { get; set; }

        /// <summary>
        /// URL of the HashiCorp Vault.
        /// </summary>
        [Input("vaultUrl")]
        public Input<string>? VaultUrl { get; set; }

        /// <summary>
        /// The AWS IAM Header Server ID that has been configured for this AWS IAM instance.
        /// </summary>
        [Input("xvaultAwsIamServerId")]
        public Input<string>? XvaultAwsIamServerId { get; set; }

        public VaultConnectorState()
        {
        }
        public static new VaultConnectorState Empty => new VaultConnectorState();
    }
}
