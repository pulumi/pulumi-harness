// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetGitopsAgent
    {
        /// <summary>
        /// Datasource for fetching a Harness GitOps Agent.
        /// </summary>
        public static Task<GetGitopsAgentResult> InvokeAsync(GetGitopsAgentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGitopsAgentResult>("harness:platform/getGitopsAgent:getGitopsAgent", args ?? new GetGitopsAgentArgs(), options.WithDefaults());

        /// <summary>
        /// Datasource for fetching a Harness GitOps Agent.
        /// </summary>
        public static Output<GetGitopsAgentResult> Invoke(GetGitopsAgentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGitopsAgentResult>("harness:platform/getGitopsAgent:getGitopsAgent", args ?? new GetGitopsAgentInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Datasource for fetching a Harness GitOps Agent.
        /// </summary>
        public static Output<GetGitopsAgentResult> Invoke(GetGitopsAgentInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGitopsAgentResult>("harness:platform/getGitopsAgent:getGitopsAgent", args ?? new GetGitopsAgentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGitopsAgentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier of the GitOps agent.
        /// </summary>
        [Input("accountId")]
        public string? AccountId { get; set; }

        /// <summary>
        /// Identifier of the GitOps agent.
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        /// <summary>
        /// Organization identifier of the GitOps agent.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the GitOps agent.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// Specify whether to retrieve the gitops agent's token. (The field AgentToken will be populated only if the agent has never connected to Harness before). For retrieval of this information, the user associated to the token being used must have Gitops Agent Edit permissions
        /// </summary>
        [Input("withCredentials")]
        public bool? WithCredentials { get; set; }

        public GetGitopsAgentArgs()
        {
        }
        public static new GetGitopsAgentArgs Empty => new GetGitopsAgentArgs();
    }

    public sealed class GetGitopsAgentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier of the GitOps agent.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Identifier of the GitOps agent.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Organization identifier of the GitOps agent.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the GitOps agent.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Specify whether to retrieve the gitops agent's token. (The field AgentToken will be populated only if the agent has never connected to Harness before). For retrieval of this information, the user associated to the token being used must have Gitops Agent Edit permissions
        /// </summary>
        [Input("withCredentials")]
        public Input<bool>? WithCredentials { get; set; }

        public GetGitopsAgentInvokeArgs()
        {
        }
        public static new GetGitopsAgentInvokeArgs Empty => new GetGitopsAgentInvokeArgs();
    }


    [OutputType]
    public sealed class GetGitopsAgentResult
    {
        /// <summary>
        /// Account identifier of the GitOps agent.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Agent token to be used for authentication of the agent with Harness.
        /// </summary>
        public readonly string AgentToken;
        /// <summary>
        /// Description of the GitOps agent.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identifier of the GitOps agent.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// This computed field specifies if the referenced agent ever successfully connected and was authenticated to harness. Note that this is different from whether the agent is currently connected. \n\nSet WithCredentials to true to allow computing of this field.\n\n For retrieval of this information, the user associated to the token being used must have Gitops Agent Edit permissions
        /// </summary>
        public readonly bool IsAuthenticated;
        /// <summary>
        /// Metadata of the agent.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGitopsAgentMetadataResult> Metadatas;
        /// <summary>
        /// Name of the GitOps agent.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The Operator to use for the Harness GitOps agent. Enum: "ARGO" "FLAMINGO"
        /// </summary>
        public readonly string Operator;
        /// <summary>
        /// Organization identifier of the GitOps agent.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Prefixed identifier of the GitOps agent. Agent identifier prefixed with scope of the agent
        /// </summary>
        public readonly string PrefixedIdentifier;
        /// <summary>
        /// Project identifier of the GitOps agent.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Tags for the GitOps agents. These can be used to search or filter the GitOps agents.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Default: "AGENT*TYPE*UNSET"
        /// Enum: "AGENT*TYPE*UNSET" "CONNECTED*ARGO*PROVIDER" "MANAGED*ARGO*PROVIDER"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Specify whether to retrieve the gitops agent's token. (The field AgentToken will be populated only if the agent has never connected to Harness before). For retrieval of this information, the user associated to the token being used must have Gitops Agent Edit permissions
        /// </summary>
        public readonly bool? WithCredentials;

        [OutputConstructor]
        private GetGitopsAgentResult(
            string accountId,

            string agentToken,

            string description,

            string id,

            string identifier,

            bool isAuthenticated,

            ImmutableArray<Outputs.GetGitopsAgentMetadataResult> metadatas,

            string name,

            string @operator,

            string? orgId,

            string prefixedIdentifier,

            string? projectId,

            ImmutableDictionary<string, string> tags,

            string type,

            bool? withCredentials)
        {
            AccountId = accountId;
            AgentToken = agentToken;
            Description = description;
            Id = id;
            Identifier = identifier;
            IsAuthenticated = isAuthenticated;
            Metadatas = metadatas;
            Name = name;
            Operator = @operator;
            OrgId = orgId;
            PrefixedIdentifier = prefixedIdentifier;
            ProjectId = projectId;
            Tags = tags;
            Type = type;
            WithCredentials = withCredentials;
        }
    }
}
