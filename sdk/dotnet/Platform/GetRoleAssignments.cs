// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetRoleAssignments
    {
        /// <summary>
        /// Data source for retrieving role assignment.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetRoleAssignments.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRoleAssignmentsResult> InvokeAsync(GetRoleAssignmentsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRoleAssignmentsResult>("harness:platform/getRoleAssignments:getRoleAssignments", args ?? new GetRoleAssignmentsArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving role assignment.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetRoleAssignments.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRoleAssignmentsResult> Invoke(GetRoleAssignmentsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoleAssignmentsResult>("harness:platform/getRoleAssignments:getRoleAssignments", args ?? new GetRoleAssignmentsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving role assignment.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetRoleAssignments.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRoleAssignmentsResult> Invoke(GetRoleAssignmentsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoleAssignmentsResult>("harness:platform/getRoleAssignments:getRoleAssignments", args ?? new GetRoleAssignmentsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRoleAssignmentsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier for role assignment.
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        /// <summary>
        /// Org identifier.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Project Identifier
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetRoleAssignmentsArgs()
        {
        }
        public static new GetRoleAssignmentsArgs Empty => new GetRoleAssignmentsArgs();
    }

    public sealed class GetRoleAssignmentsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier for role assignment.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Org identifier.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project Identifier
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetRoleAssignmentsInvokeArgs()
        {
        }
        public static new GetRoleAssignmentsInvokeArgs Empty => new GetRoleAssignmentsInvokeArgs();
    }


    [OutputType]
    public sealed class GetRoleAssignmentsResult
    {
        /// <summary>
        /// Disabled or not.
        /// </summary>
        public readonly bool Disabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identifier for role assignment.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// Managed or not.
        /// </summary>
        public readonly bool Managed;
        /// <summary>
        /// Org identifier.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Principal.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRoleAssignmentsPrincipalResult> Principals;
        /// <summary>
        /// Project Identifier
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Resource group identifier.
        /// </summary>
        public readonly string ResourceGroupIdentifier;
        /// <summary>
        /// Role identifier.
        /// </summary>
        public readonly string RoleIdentifier;

        [OutputConstructor]
        private GetRoleAssignmentsResult(
            bool disabled,

            string id,

            string identifier,

            bool managed,

            string? orgId,

            ImmutableArray<Outputs.GetRoleAssignmentsPrincipalResult> principals,

            string? projectId,

            string resourceGroupIdentifier,

            string roleIdentifier)
        {
            Disabled = disabled;
            Id = id;
            Identifier = identifier;
            Managed = managed;
            OrgId = orgId;
            Principals = principals;
            ProjectId = projectId;
            ResourceGroupIdentifier = resourceGroupIdentifier;
            RoleIdentifier = roleIdentifier;
        }
    }
}
