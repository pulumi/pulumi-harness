// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetDashboardFolders
    {
        /// <summary>
        /// Data source for retrieving a Harness Dashboard Folder.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var folder = Harness.Platform.GetDashboardFolders.Invoke(new()
        ///     {
        ///         Id = "id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDashboardFoldersResult> InvokeAsync(GetDashboardFoldersArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDashboardFoldersResult>("harness:platform/getDashboardFolders:getDashboardFolders", args ?? new GetDashboardFoldersArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Dashboard Folder.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var folder = Harness.Platform.GetDashboardFolders.Invoke(new()
        ///     {
        ///         Id = "id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDashboardFoldersResult> Invoke(GetDashboardFoldersInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDashboardFoldersResult>("harness:platform/getDashboardFolders:getDashboardFolders", args ?? new GetDashboardFoldersInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Dashboard Folder.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var folder = Harness.Platform.GetDashboardFolders.Invoke(new()
        ///     {
        ///         Id = "id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDashboardFoldersResult> Invoke(GetDashboardFoldersInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDashboardFoldersResult>("harness:platform/getDashboardFolders:getDashboardFolders", args ?? new GetDashboardFoldersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDashboardFoldersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the folder.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public string? Identifier { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetDashboardFoldersArgs()
        {
        }
        public static new GetDashboardFoldersArgs Empty => new GetDashboardFoldersArgs();
    }

    public sealed class GetDashboardFoldersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the folder.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetDashboardFoldersInvokeArgs()
        {
        }
        public static new GetDashboardFoldersInvokeArgs Empty => new GetDashboardFoldersInvokeArgs();
    }


    [OutputType]
    public sealed class GetDashboardFoldersResult
    {
        /// <summary>
        /// Created DateTime of the folder.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Description of the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Identifier of the folder.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        public readonly string? Identifier;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetDashboardFoldersResult(
            string createdAt,

            string description,

            string id,

            string? identifier,

            string? name,

            ImmutableArray<string> tags)
        {
            CreatedAt = createdAt;
            Description = description;
            Id = id;
            Identifier = identifier;
            Name = name;
            Tags = tags;
        }
    }
}
