// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for Manual Deployment Freeze Window.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Harness.Platform.ManualFreeze("example", new()
    ///     {
    ///         Identifier = "identifier",
    ///         OrgId = "orgIdentifier",
    ///         ProjectId = "projectIdentifier",
    ///         AccountId = "accountIdentifier",
    ///         Yaml = @"freeze:
    ///   name: freezeName
    ///   identifier: identifier
    ///   entityConfigs:
    ///     - name: r1
    ///       entities:
    ///         - filterType: All
    ///           type: Org
    ///         - filterType: All
    ///           type: Project
    ///         - filterType: All
    ///           type: Service
    ///         - filterType: All
    ///           type: EnvType
    ///   status: Disabled
    ///   description: hi
    ///   windows:
    ///   - timeZone: Asia/Calcutta
    ///     startTime: 2023-05-03 04:16 PM
    ///     duration: 30m
    ///     recurrence:
    ///       type: Daily
    ///   notificationRules: []
    ///   tags: {}
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import an account level freeze
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/manualFreeze:ManualFreeze example &lt;freeze_id&gt;
    /// ```
    /// 
    /// Import an organization level freeze
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/manualFreeze:ManualFreeze example &lt;org_id&gt;/&lt;freeze_id&gt;
    /// ```
    /// 
    /// Import project level freeze
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/manualFreeze:ManualFreeze example &lt;org_id&gt;/&lt;project_id&gt;/&lt;freeze_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/manualFreeze:ManualFreeze")]
    public partial class ManualFreeze : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account Identifier of the freeze
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Current or upcoming windows
        /// </summary>
        [Output("currentOrUpcomingWindows")]
        public Output<ImmutableArray<Outputs.ManualFreezeCurrentOrUpcomingWindow>> CurrentOrUpcomingWindows { get; private set; } = null!;

        /// <summary>
        /// Description of the freeze
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Freeze windows in the freeze response
        /// </summary>
        [Output("freezeWindows")]
        public Output<ImmutableArray<Outputs.ManualFreezeFreezeWindow>> FreezeWindows { get; private set; } = null!;

        /// <summary>
        /// Identifier of the freeze
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Name of the freeze
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Organization identifier of the freeze
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Project identifier of the freeze
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Scope of the freeze
        /// </summary>
        [Output("scope")]
        public Output<string> Scope { get; private set; } = null!;

        /// <summary>
        /// Status of the freeze
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Tags associated with the freeze
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Type of freeze
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Yaml of the freeze
        /// </summary>
        [Output("yaml")]
        public Output<string> Yaml { get; private set; } = null!;


        /// <summary>
        /// Create a ManualFreeze resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManualFreeze(string name, ManualFreezeArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/manualFreeze:ManualFreeze", name, args ?? new ManualFreezeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManualFreeze(string name, Input<string> id, ManualFreezeState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/manualFreeze:ManualFreeze", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManualFreeze resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManualFreeze Get(string name, Input<string> id, ManualFreezeState? state = null, CustomResourceOptions? options = null)
        {
            return new ManualFreeze(name, id, state, options);
        }
    }

    public sealed class ManualFreezeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account Identifier of the freeze
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Identifier of the freeze
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Organization identifier of the freeze
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the freeze
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Yaml of the freeze
        /// </summary>
        [Input("yaml", required: true)]
        public Input<string> Yaml { get; set; } = null!;

        public ManualFreezeArgs()
        {
        }
        public static new ManualFreezeArgs Empty => new ManualFreezeArgs();
    }

    public sealed class ManualFreezeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account Identifier of the freeze
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("currentOrUpcomingWindows")]
        private InputList<Inputs.ManualFreezeCurrentOrUpcomingWindowGetArgs>? _currentOrUpcomingWindows;

        /// <summary>
        /// Current or upcoming windows
        /// </summary>
        public InputList<Inputs.ManualFreezeCurrentOrUpcomingWindowGetArgs> CurrentOrUpcomingWindows
        {
            get => _currentOrUpcomingWindows ?? (_currentOrUpcomingWindows = new InputList<Inputs.ManualFreezeCurrentOrUpcomingWindowGetArgs>());
            set => _currentOrUpcomingWindows = value;
        }

        /// <summary>
        /// Description of the freeze
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("freezeWindows")]
        private InputList<Inputs.ManualFreezeFreezeWindowGetArgs>? _freezeWindows;

        /// <summary>
        /// Freeze windows in the freeze response
        /// </summary>
        public InputList<Inputs.ManualFreezeFreezeWindowGetArgs> FreezeWindows
        {
            get => _freezeWindows ?? (_freezeWindows = new InputList<Inputs.ManualFreezeFreezeWindowGetArgs>());
            set => _freezeWindows = value;
        }

        /// <summary>
        /// Identifier of the freeze
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Name of the freeze
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Organization identifier of the freeze
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the freeze
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Scope of the freeze
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// Status of the freeze
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags associated with the freeze
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Type of freeze
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Yaml of the freeze
        /// </summary>
        [Input("yaml")]
        public Input<string>? Yaml { get; set; }

        public ManualFreezeState()
        {
        }
        public static new ManualFreezeState Empty => new ManualFreezeState();
    }
}
