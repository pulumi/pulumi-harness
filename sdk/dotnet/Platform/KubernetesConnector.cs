// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating a K8s connector.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var clientKeyCert = new Harness.Platform.KubernetesConnector("clientKeyCert", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///         Description = "description",
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///         },
    ///         ClientKeyCert = new Harness.Platform.Inputs.KubernetesConnectorClientKeyCertArgs
    ///         {
    ///             MasterUrl = "https://kubernetes.example.com",
    ///             CaCertRef = "account.TEST_k8ss_client_stuff",
    ///             ClientCertRef = "account.test_k8s_client_cert",
    ///             ClientKeyRef = "account.TEST_k8s_client_key",
    ///             ClientKeyPassphraseRef = "account.TEST_k8s_client_test",
    ///             ClientKeyAlgorithm = "RSA",
    ///         },
    ///         DelegateSelectors = new[]
    ///         {
    ///             "harness-delegate",
    ///         },
    ///     });
    /// 
    ///     var usernamePassword = new Harness.Platform.KubernetesConnector("usernamePassword", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///         Description = "description",
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///         },
    ///         UsernamePassword = new Harness.Platform.Inputs.KubernetesConnectorUsernamePasswordArgs
    ///         {
    ///             MasterUrl = "https://kubernetes.example.com",
    ///             Username = "admin",
    ///             PasswordRef = "account.TEST_k8s_client_test",
    ///         },
    ///         DelegateSelectors = new[]
    ///         {
    ///             "harness-delegate",
    ///         },
    ///     });
    /// 
    ///     var serviceAccount = new Harness.Platform.KubernetesConnector("serviceAccount", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///         Description = "description",
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///         },
    ///         ServiceAccount = new Harness.Platform.Inputs.KubernetesConnectorServiceAccountArgs
    ///         {
    ///             MasterUrl = "https://kubernetes.example.com",
    ///             ServiceAccountTokenRef = "account.TEST_k8s_client_test",
    ///         },
    ///         DelegateSelectors = new[]
    ///         {
    ///             "harness-delegate",
    ///         },
    ///     });
    /// 
    ///     var openIDConnect = new Harness.Platform.KubernetesConnector("openIDConnect", new()
    ///     {
    ///         Identifier = "%[1]s",
    ///         Name = "%[2]s",
    ///         Description = "description",
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///         },
    ///         OpenidConnect = new Harness.Platform.Inputs.KubernetesConnectorOpenidConnectArgs
    ///         {
    ///             MasterUrl = "https://kubernetes.example.com",
    ///             IssuerUrl = "https://oidc.example.com",
    ///             UsernameRef = "account.TEST_k8s_client_test",
    ///             ClientIdRef = "account.TEST_k8s_client_test",
    ///             PasswordRef = "account.TEST_k8s_client_test",
    ///             SecretRef = "account.TEST_k8s_client_test",
    ///             Scopes = new[]
    ///             {
    ///                 "scope1",
    ///                 "scope2",
    ///             },
    ///         },
    ///         DelegateSelectors = new[]
    ///         {
    ///             "harness-delegate",
    ///         },
    ///     });
    /// 
    ///     var inheritFromDelegate = new Harness.Platform.KubernetesConnector("inheritFromDelegate", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///         Description = "description",
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///         },
    ///         InheritFromDelegate = new Harness.Platform.Inputs.KubernetesConnectorInheritFromDelegateArgs
    ///         {
    ///             DelegateSelectors = new[]
    ///             {
    ///                 "harness-delegate",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import account level kubernetes connector
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/kubernetesConnector:KubernetesConnector example &lt;connector_id&gt;
    /// ```
    /// 
    /// Import org level kubernetes connector
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/kubernetesConnector:KubernetesConnector example &lt;ord_id&gt;/&lt;connector_id&gt;
    /// ```
    /// 
    /// Import project level kubernetes connector
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/kubernetesConnector:KubernetesConnector example &lt;org_id&gt;/&lt;project_id&gt;/&lt;connector_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/kubernetesConnector:KubernetesConnector")]
    public partial class KubernetesConnector : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Client key and certificate config for the connector.
        /// </summary>
        [Output("clientKeyCert")]
        public Output<Outputs.KubernetesConnectorClientKeyCert?> ClientKeyCert { get; private set; } = null!;

        /// <summary>
        /// Selectors to use for the delegate.
        /// </summary>
        [Output("delegateSelectors")]
        public Output<ImmutableArray<string>> DelegateSelectors { get; private set; } = null!;

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Enable this flag for force deletion of connector
        /// </summary>
        [Output("forceDelete")]
        public Output<bool> ForceDelete { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Credentials are inherited from the delegate.
        /// </summary>
        [Output("inheritFromDelegate")]
        public Output<Outputs.KubernetesConnectorInheritFromDelegate?> InheritFromDelegate { get; private set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// OpenID configuration for the connector.
        /// </summary>
        [Output("openidConnect")]
        public Output<Outputs.KubernetesConnectorOpenidConnect?> OpenidConnect { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Service account for the connector.
        /// </summary>
        [Output("serviceAccount")]
        public Output<Outputs.KubernetesConnectorServiceAccount?> ServiceAccount { get; private set; } = null!;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Username and password for the connector.
        /// </summary>
        [Output("usernamePassword")]
        public Output<Outputs.KubernetesConnectorUsernamePassword?> UsernamePassword { get; private set; } = null!;


        /// <summary>
        /// Create a KubernetesConnector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KubernetesConnector(string name, KubernetesConnectorArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/kubernetesConnector:KubernetesConnector", name, args ?? new KubernetesConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KubernetesConnector(string name, Input<string> id, KubernetesConnectorState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/kubernetesConnector:KubernetesConnector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KubernetesConnector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KubernetesConnector Get(string name, Input<string> id, KubernetesConnectorState? state = null, CustomResourceOptions? options = null)
        {
            return new KubernetesConnector(name, id, state, options);
        }
    }

    public sealed class KubernetesConnectorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Client key and certificate config for the connector.
        /// </summary>
        [Input("clientKeyCert")]
        public Input<Inputs.KubernetesConnectorClientKeyCertArgs>? ClientKeyCert { get; set; }

        [Input("delegateSelectors")]
        private InputList<string>? _delegateSelectors;

        /// <summary>
        /// Selectors to use for the delegate.
        /// </summary>
        public InputList<string> DelegateSelectors
        {
            get => _delegateSelectors ?? (_delegateSelectors = new InputList<string>());
            set => _delegateSelectors = value;
        }

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable this flag for force deletion of connector
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Credentials are inherited from the delegate.
        /// </summary>
        [Input("inheritFromDelegate")]
        public Input<Inputs.KubernetesConnectorInheritFromDelegateArgs>? InheritFromDelegate { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// OpenID configuration for the connector.
        /// </summary>
        [Input("openidConnect")]
        public Input<Inputs.KubernetesConnectorOpenidConnectArgs>? OpenidConnect { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Service account for the connector.
        /// </summary>
        [Input("serviceAccount")]
        public Input<Inputs.KubernetesConnectorServiceAccountArgs>? ServiceAccount { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Username and password for the connector.
        /// </summary>
        [Input("usernamePassword")]
        public Input<Inputs.KubernetesConnectorUsernamePasswordArgs>? UsernamePassword { get; set; }

        public KubernetesConnectorArgs()
        {
        }
        public static new KubernetesConnectorArgs Empty => new KubernetesConnectorArgs();
    }

    public sealed class KubernetesConnectorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Client key and certificate config for the connector.
        /// </summary>
        [Input("clientKeyCert")]
        public Input<Inputs.KubernetesConnectorClientKeyCertGetArgs>? ClientKeyCert { get; set; }

        [Input("delegateSelectors")]
        private InputList<string>? _delegateSelectors;

        /// <summary>
        /// Selectors to use for the delegate.
        /// </summary>
        public InputList<string> DelegateSelectors
        {
            get => _delegateSelectors ?? (_delegateSelectors = new InputList<string>());
            set => _delegateSelectors = value;
        }

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable this flag for force deletion of connector
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Credentials are inherited from the delegate.
        /// </summary>
        [Input("inheritFromDelegate")]
        public Input<Inputs.KubernetesConnectorInheritFromDelegateGetArgs>? InheritFromDelegate { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// OpenID configuration for the connector.
        /// </summary>
        [Input("openidConnect")]
        public Input<Inputs.KubernetesConnectorOpenidConnectGetArgs>? OpenidConnect { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Service account for the connector.
        /// </summary>
        [Input("serviceAccount")]
        public Input<Inputs.KubernetesConnectorServiceAccountGetArgs>? ServiceAccount { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Username and password for the connector.
        /// </summary>
        [Input("usernamePassword")]
        public Input<Inputs.KubernetesConnectorUsernamePasswordGetArgs>? UsernamePassword { get; set; }

        public KubernetesConnectorState()
        {
        }
        public static new KubernetesConnectorState Empty => new KubernetesConnectorState();
    }
}
