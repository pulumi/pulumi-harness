// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetGitopsApplications
    {
        /// <summary>
        /// Datasource for fetching a Harness GitOps Application.
        /// </summary>
        public static Task<GetGitopsApplicationsResult> InvokeAsync(GetGitopsApplicationsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGitopsApplicationsResult>("harness:platform/getGitopsApplications:getGitopsApplications", args ?? new GetGitopsApplicationsArgs(), options.WithDefaults());

        /// <summary>
        /// Datasource for fetching a Harness GitOps Application.
        /// </summary>
        public static Output<GetGitopsApplicationsResult> Invoke(GetGitopsApplicationsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGitopsApplicationsResult>("harness:platform/getGitopsApplications:getGitopsApplications", args ?? new GetGitopsApplicationsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Datasource for fetching a Harness GitOps Application.
        /// </summary>
        public static Output<GetGitopsApplicationsResult> Invoke(GetGitopsApplicationsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGitopsApplicationsResult>("harness:platform/getGitopsApplications:getGitopsApplications", args ?? new GetGitopsApplicationsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGitopsApplicationsArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId")]
        public string? AccountId { get; set; }

        /// <summary>
        /// Agent identifier of the GitOps application.
        /// </summary>
        [Input("agentId", required: true)]
        public string AgentId { get; set; } = null!;

        /// <summary>
        /// Identifier of the GitOps application.
        /// </summary>
        [Input("identifier")]
        public string? Identifier { get; set; }

        /// <summary>
        /// Name of the GitOps application.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Organization identifier of the GitOps application.
        /// </summary>
        [Input("orgId", required: true)]
        public string OrgId { get; set; } = null!;

        /// <summary>
        /// Project identifier of the GitOps application.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetGitopsApplicationsArgs()
        {
        }
        public static new GetGitopsApplicationsArgs Empty => new GetGitopsApplicationsArgs();
    }

    public sealed class GetGitopsApplicationsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Agent identifier of the GitOps application.
        /// </summary>
        [Input("agentId", required: true)]
        public Input<string> AgentId { get; set; } = null!;

        /// <summary>
        /// Identifier of the GitOps application.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Name of the GitOps application.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Organization identifier of the GitOps application.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// Project identifier of the GitOps application.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetGitopsApplicationsInvokeArgs()
        {
        }
        public static new GetGitopsApplicationsInvokeArgs Empty => new GetGitopsApplicationsInvokeArgs();
    }


    [OutputType]
    public sealed class GetGitopsApplicationsResult
    {
        public readonly string AccountId;
        /// <summary>
        /// Agent identifier of the GitOps application.
        /// </summary>
        public readonly string AgentId;
        /// <summary>
        /// Definition of the GitOps application resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGitopsApplicationsApplicationResult> Applications;
        /// <summary>
        /// Cluster identifier of the GitOps application.
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identifier of the GitOps application.
        /// </summary>
        public readonly string? Identifier;
        /// <summary>
        /// Kind of the GitOps application.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// Name of the GitOps application.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Options to remove existing finalizers to delete the GitOps application.
        /// </summary>
        public readonly bool OptionsRemoveExistingFinalizers;
        /// <summary>
        /// Organization identifier of the GitOps application.
        /// </summary>
        public readonly string OrgId;
        /// <summary>
        /// The ArgoCD project name corresponding to this GitOps application. An empty string means that the GitOps application belongs to the default project created by Harness.
        /// </summary>
        public readonly string Project;
        /// <summary>
        /// Project identifier of the GitOps application.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Repository identifier of the GitOps application.
        /// </summary>
        public readonly string RepoId;
        public readonly ImmutableArray<string> RepoIds;
        /// <summary>
        /// Request cascade to delete the GitOps application.
        /// </summary>
        public readonly bool RequestCascade;
        /// <summary>
        /// Request propagation policy to delete the GitOps application.
        /// </summary>
        public readonly string RequestPropagationPolicy;
        /// <summary>
        /// Indicates if the GitOps application should skip validate repository definition exists.
        /// </summary>
        public readonly bool SkipRepoValidation;
        /// <summary>
        /// Indicates if the GitOps application should be updated if existing and inserted if not.
        /// </summary>
        public readonly bool Upsert;
        /// <summary>
        /// Indicates if the GitOps application yaml has to be validated.
        /// </summary>
        public readonly bool Validate;

        [OutputConstructor]
        private GetGitopsApplicationsResult(
            string accountId,

            string agentId,

            ImmutableArray<Outputs.GetGitopsApplicationsApplicationResult> applications,

            string clusterId,

            string id,

            string? identifier,

            string kind,

            string name,

            bool optionsRemoveExistingFinalizers,

            string orgId,

            string project,

            string projectId,

            string repoId,

            ImmutableArray<string> repoIds,

            bool requestCascade,

            string requestPropagationPolicy,

            bool skipRepoValidation,

            bool upsert,

            bool validate)
        {
            AccountId = accountId;
            AgentId = agentId;
            Applications = applications;
            ClusterId = clusterId;
            Id = id;
            Identifier = identifier;
            Kind = kind;
            Name = name;
            OptionsRemoveExistingFinalizers = optionsRemoveExistingFinalizers;
            OrgId = orgId;
            Project = project;
            ProjectId = projectId;
            RepoId = repoId;
            RepoIds = repoIds;
            RequestCascade = requestCascade;
            RequestPropagationPolicy = requestPropagationPolicy;
            SkipRepoValidation = skipRepoValidation;
            Upsert = upsert;
            Validate = validate;
        }
    }
}
