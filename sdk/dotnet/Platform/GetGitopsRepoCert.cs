// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetGitopsRepoCert
    {
        /// <summary>
        /// Data source for retrieving a GitOps Repository Certificate. It fetches all the certificates that are added to the provided agent.
        /// </summary>
        public static Task<GetGitopsRepoCertResult> InvokeAsync(GetGitopsRepoCertArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGitopsRepoCertResult>("harness:platform/getGitopsRepoCert:getGitopsRepoCert", args ?? new GetGitopsRepoCertArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a GitOps Repository Certificate. It fetches all the certificates that are added to the provided agent.
        /// </summary>
        public static Output<GetGitopsRepoCertResult> Invoke(GetGitopsRepoCertInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGitopsRepoCertResult>("harness:platform/getGitopsRepoCert:getGitopsRepoCert", args ?? new GetGitopsRepoCertInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a GitOps Repository Certificate. It fetches all the certificates that are added to the provided agent.
        /// </summary>
        public static Output<GetGitopsRepoCertResult> Invoke(GetGitopsRepoCertInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGitopsRepoCertResult>("harness:platform/getGitopsRepoCert:getGitopsRepoCert", args ?? new GetGitopsRepoCertInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGitopsRepoCertArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier of the GitOps repository certificate.
        /// </summary>
        [Input("accountId")]
        public string? AccountId { get; set; }

        /// <summary>
        /// Agent identifier of the GitOps repository certificate.
        /// </summary>
        [Input("agentId", required: true)]
        public string AgentId { get; set; } = null!;

        /// <summary>
        /// Organization identifier of the GitOps repository certificate.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the GitOps repository certificate.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetGitopsRepoCertArgs()
        {
        }
        public static new GetGitopsRepoCertArgs Empty => new GetGitopsRepoCertArgs();
    }

    public sealed class GetGitopsRepoCertInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier of the GitOps repository certificate.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Agent identifier of the GitOps repository certificate.
        /// </summary>
        [Input("agentId", required: true)]
        public Input<string> AgentId { get; set; } = null!;

        /// <summary>
        /// Organization identifier of the GitOps repository certificate.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the GitOps repository certificate.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetGitopsRepoCertInvokeArgs()
        {
        }
        public static new GetGitopsRepoCertInvokeArgs Empty => new GetGitopsRepoCertInvokeArgs();
    }


    [OutputType]
    public sealed class GetGitopsRepoCertResult
    {
        /// <summary>
        /// Account identifier of the GitOps repository certificate.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Agent identifier of the GitOps repository certificate.
        /// </summary>
        public readonly string AgentId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Organization identifier of the GitOps repository certificate.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Project identifier of the GitOps repository certificate.
        /// </summary>
        public readonly string? ProjectId;

        [OutputConstructor]
        private GetGitopsRepoCertResult(
            string accountId,

            string agentId,

            string id,

            string? orgId,

            string? projectId)
        {
            AccountId = accountId;
            AgentId = agentId;
            Id = id;
            OrgId = orgId;
            ProjectId = projectId;
        }
    }
}
