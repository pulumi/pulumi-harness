// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating tokens.
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import account level token
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/token:Token harness_platform_token &lt;parent_id&gt;/&lt;apikey_id&gt;/&lt;apikey_type&gt;/&lt;token_id&gt;
    /// ```
    /// 
    /// Import org level token
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/token:Token harness_platform_token &lt;org_id&gt;/&lt;parent_id&gt;/&lt;apikey_id&gt;/&lt;apikey_type&gt;/&lt;token_id&gt;
    /// ```
    /// 
    /// Import project level token
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/token:Token harness_platform_token &lt;org_id&gt;/&lt;project_id&gt;/&lt;parent_id&gt;/&lt;apikey_id&gt;/&lt;apikey_type&gt;/&lt;token_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/token:Token")]
    public partial class Token : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account Identifier for the Entity
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Identifier of the API Key
        /// </summary>
        [Output("apikeyId")]
        public Output<string> ApikeyId { get; private set; } = null!;

        /// <summary>
        /// Type of the API Key
        /// </summary>
        [Output("apikeyType")]
        public Output<string> ApikeyType { get; private set; } = null!;

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Email Id of the user who created the Token
        /// </summary>
        [Output("email")]
        public Output<string?> Email { get; private set; } = null!;

        /// <summary>
        /// Encoded password of the Token
        /// </summary>
        [Output("encodedPassword")]
        public Output<string?> EncodedPassword { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Parent Entity Identifier of the API Key
        /// </summary>
        [Output("parentId")]
        public Output<string> ParentId { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Scheduled expiry time in milliseconds
        /// </summary>
        [Output("scheduledExpireTime")]
        public Output<int> ScheduledExpireTime { get; private set; } = null!;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Name of the user who created the Token
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;

        /// <summary>
        /// Boolean value to indicate if Token is valid or not.
        /// </summary>
        [Output("valid")]
        public Output<bool> Valid { get; private set; } = null!;

        /// <summary>
        /// This is the time from which the Token is valid. The time is in milliseconds
        /// </summary>
        [Output("validFrom")]
        public Output<int> ValidFrom { get; private set; } = null!;

        /// <summary>
        /// This is the time till which the Token is valid. The time is in milliseconds
        /// </summary>
        [Output("validTo")]
        public Output<int> ValidTo { get; private set; } = null!;

        /// <summary>
        /// Value of the Token
        /// </summary>
        [Output("value")]
        public Output<string> Value { get; private set; } = null!;


        /// <summary>
        /// Create a Token resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Token(string name, TokenArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/token:Token", name, args ?? new TokenArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Token(string name, Input<string> id, TokenState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/token:Token", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
                AdditionalSecretOutputs =
                {
                    "value",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Token resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Token Get(string name, Input<string> id, TokenState? state = null, CustomResourceOptions? options = null)
        {
            return new Token(name, id, state, options);
        }
    }

    public sealed class TokenArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account Identifier for the Entity
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Identifier of the API Key
        /// </summary>
        [Input("apikeyId", required: true)]
        public Input<string> ApikeyId { get; set; } = null!;

        /// <summary>
        /// Type of the API Key
        /// </summary>
        [Input("apikeyType", required: true)]
        public Input<string> ApikeyType { get; set; } = null!;

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Email Id of the user who created the Token
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// Encoded password of the Token
        /// </summary>
        [Input("encodedPassword")]
        public Input<string>? EncodedPassword { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Parent Entity Identifier of the API Key
        /// </summary>
        [Input("parentId", required: true)]
        public Input<string> ParentId { get; set; } = null!;

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Scheduled expiry time in milliseconds
        /// </summary>
        [Input("scheduledExpireTime")]
        public Input<int>? ScheduledExpireTime { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Name of the user who created the Token
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// Boolean value to indicate if Token is valid or not.
        /// </summary>
        [Input("valid")]
        public Input<bool>? Valid { get; set; }

        /// <summary>
        /// This is the time from which the Token is valid. The time is in milliseconds
        /// </summary>
        [Input("validFrom")]
        public Input<int>? ValidFrom { get; set; }

        /// <summary>
        /// This is the time till which the Token is valid. The time is in milliseconds
        /// </summary>
        [Input("validTo")]
        public Input<int>? ValidTo { get; set; }

        public TokenArgs()
        {
        }
        public static new TokenArgs Empty => new TokenArgs();
    }

    public sealed class TokenState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account Identifier for the Entity
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Identifier of the API Key
        /// </summary>
        [Input("apikeyId")]
        public Input<string>? ApikeyId { get; set; }

        /// <summary>
        /// Type of the API Key
        /// </summary>
        [Input("apikeyType")]
        public Input<string>? ApikeyType { get; set; }

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Email Id of the user who created the Token
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// Encoded password of the Token
        /// </summary>
        [Input("encodedPassword")]
        public Input<string>? EncodedPassword { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Parent Entity Identifier of the API Key
        /// </summary>
        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Scheduled expiry time in milliseconds
        /// </summary>
        [Input("scheduledExpireTime")]
        public Input<int>? ScheduledExpireTime { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Name of the user who created the Token
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// Boolean value to indicate if Token is valid or not.
        /// </summary>
        [Input("valid")]
        public Input<bool>? Valid { get; set; }

        /// <summary>
        /// This is the time from which the Token is valid. The time is in milliseconds
        /// </summary>
        [Input("validFrom")]
        public Input<int>? ValidFrom { get; set; }

        /// <summary>
        /// This is the time till which the Token is valid. The time is in milliseconds
        /// </summary>
        [Input("validTo")]
        public Input<int>? ValidTo { get; set; }

        [Input("value")]
        private Input<string>? _value;

        /// <summary>
        /// Value of the Token
        /// </summary>
        public Input<string>? Value
        {
            get => _value;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _value = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public TokenState()
        {
        }
        public static new TokenState Empty => new TokenState();
    }
}
