// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for managing a Harness GitOps Agent.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Harness.Platform.GitOpsAgent("example", new()
    ///     {
    ///         Identifier = "identifier",
    ///         AccountId = "account_id",
    ///         ProjectId = "project_id",
    ///         OrgId = "org_id",
    ///         Name = "name",
    ///         Type = "MANAGED_ARGO_PROVIDER",
    ///         Metadatas = new[]
    ///         {
    ///             new Harness.Platform.Inputs.GitOpsAgentMetadataArgs
    ///             {
    ///                 Namespace = "namespace",
    ///                 HighAvailability = true,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import an Account level Gitops Agent
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/gitOpsAgent:GitOpsAgent example &lt;agent_id&gt;
    /// ```
    /// 
    /// Import an Org level Gitops Agent
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/gitOpsAgent:GitOpsAgent example &lt;organization_id&gt;/&lt;agent_id&gt;
    /// ```
    /// 
    /// Import a Project level Gitops Agent
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/gitOpsAgent:GitOpsAgent example &lt;organization_id&gt;/&lt;project_id&gt;/&lt;agent_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/gitOpsAgent:GitOpsAgent")]
    public partial class GitOpsAgent : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account identifier of the GitOps agent.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Agent token to be used for authentication of the agent with Harness.
        /// </summary>
        [Output("agentToken")]
        public Output<string> AgentToken { get; private set; } = null!;

        /// <summary>
        /// Description of the GitOps agent.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Identifier of the GitOps agent.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Metadata of the agent.
        /// </summary>
        [Output("metadatas")]
        public Output<ImmutableArray<Outputs.GitOpsAgentMetadata>> Metadatas { get; private set; } = null!;

        /// <summary>
        /// Name of the GitOps agent.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Operator to use for the Harness GitOps agent. Enum: "ARGO" "FLAMINGO"
        /// </summary>
        [Output("operator")]
        public Output<string?> Operator { get; private set; } = null!;

        /// <summary>
        /// Organization identifier of the GitOps agent.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Prefixed identifier of the GitOps agent. Agent identifier prefixed with scope of the agent
        /// </summary>
        [Output("prefixedIdentifier")]
        public Output<string> PrefixedIdentifier { get; private set; } = null!;

        /// <summary>
        /// Project identifier of the GitOps agent.
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Tags for the GitOps agents. These can be used to search or filter the GitOps agents.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Default: "AGENT*TYPE*UNSET"
        /// Enum: "AGENT*TYPE*UNSET" "CONNECTED*ARGO*PROVIDER" "MANAGED*ARGO*PROVIDER"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a GitOpsAgent resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GitOpsAgent(string name, GitOpsAgentArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/gitOpsAgent:GitOpsAgent", name, args ?? new GitOpsAgentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GitOpsAgent(string name, Input<string> id, GitOpsAgentState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/gitOpsAgent:GitOpsAgent", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GitOpsAgent resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GitOpsAgent Get(string name, Input<string> id, GitOpsAgentState? state = null, CustomResourceOptions? options = null)
        {
            return new GitOpsAgent(name, id, state, options);
        }
    }

    public sealed class GitOpsAgentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account identifier of the GitOps agent.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Description of the GitOps agent.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Identifier of the GitOps agent.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        [Input("metadatas")]
        private InputList<Inputs.GitOpsAgentMetadataArgs>? _metadatas;

        /// <summary>
        /// Metadata of the agent.
        /// </summary>
        public InputList<Inputs.GitOpsAgentMetadataArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.GitOpsAgentMetadataArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// Name of the GitOps agent.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Operator to use for the Harness GitOps agent. Enum: "ARGO" "FLAMINGO"
        /// </summary>
        [Input("operator")]
        public Input<string>? Operator { get; set; }

        /// <summary>
        /// Organization identifier of the GitOps agent.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the GitOps agent.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags for the GitOps agents. These can be used to search or filter the GitOps agents.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Default: "AGENT*TYPE*UNSET"
        /// Enum: "AGENT*TYPE*UNSET" "CONNECTED*ARGO*PROVIDER" "MANAGED*ARGO*PROVIDER"
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public GitOpsAgentArgs()
        {
        }
        public static new GitOpsAgentArgs Empty => new GitOpsAgentArgs();
    }

    public sealed class GitOpsAgentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account identifier of the GitOps agent.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Agent token to be used for authentication of the agent with Harness.
        /// </summary>
        [Input("agentToken")]
        public Input<string>? AgentToken { get; set; }

        /// <summary>
        /// Description of the GitOps agent.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Identifier of the GitOps agent.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        [Input("metadatas")]
        private InputList<Inputs.GitOpsAgentMetadataGetArgs>? _metadatas;

        /// <summary>
        /// Metadata of the agent.
        /// </summary>
        public InputList<Inputs.GitOpsAgentMetadataGetArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.GitOpsAgentMetadataGetArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// Name of the GitOps agent.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Operator to use for the Harness GitOps agent. Enum: "ARGO" "FLAMINGO"
        /// </summary>
        [Input("operator")]
        public Input<string>? Operator { get; set; }

        /// <summary>
        /// Organization identifier of the GitOps agent.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Prefixed identifier of the GitOps agent. Agent identifier prefixed with scope of the agent
        /// </summary>
        [Input("prefixedIdentifier")]
        public Input<string>? PrefixedIdentifier { get; set; }

        /// <summary>
        /// Project identifier of the GitOps agent.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags for the GitOps agents. These can be used to search or filter the GitOps agents.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Default: "AGENT*TYPE*UNSET"
        /// Enum: "AGENT*TYPE*UNSET" "CONNECTED*ARGO*PROVIDER" "MANAGED*ARGO*PROVIDER"
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GitOpsAgentState()
        {
        }
        public static new GitOpsAgentState Empty => new GitOpsAgentState();
    }
}
