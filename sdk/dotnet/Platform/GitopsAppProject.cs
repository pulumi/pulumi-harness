// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import gitOps project with account level agent
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/gitopsAppProject:GitopsAppProject example &lt;agent_id&gt;/&lt;app_proj_name&gt;
    /// ```
    /// 
    /// Import gitOps project with org level agent
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/gitopsAppProject:GitopsAppProject example &lt;organization_id&gt;/&lt;agent_id&gt;/&lt;app_proj_name&gt;
    /// ```
    /// 
    /// Import gitOps project with project level agent
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/gitopsAppProject:GitopsAppProject example &lt;organization_id&gt;/&lt;project_id&gt;/&lt;agent_id&gt;/&lt;app_proj_name&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/gitopsAppProject:GitopsAppProject")]
    public partial class GitopsAppProject : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account identifier of the GitOps Agent where argo project will exist.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Agent identifier of the agent where argo project will exist (include scope prefix)
        /// </summary>
        [Output("agentId")]
        public Output<string> AgentId { get; private set; } = null!;

        /// <summary>
        /// Org identifier of the GitOps Agent where argo project is to be created.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Project identifier of the Gitops Agent where argo project is to be created.
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// GitOps project configuration.
        /// </summary>
        [Output("projects")]
        public Output<ImmutableArray<Outputs.GitopsAppProjectProject>> Projects { get; private set; } = null!;

        /// <summary>
        /// Identifier for the GitOps Argo project.
        /// </summary>
        [Output("queryName")]
        public Output<string> QueryName { get; private set; } = null!;

        /// <summary>
        /// Indicates if the argo project should be updated if existing and inserted if not.
        /// </summary>
        [Output("upsert")]
        public Output<bool?> Upsert { get; private set; } = null!;


        /// <summary>
        /// Create a GitopsAppProject resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GitopsAppProject(string name, GitopsAppProjectArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/gitopsAppProject:GitopsAppProject", name, args ?? new GitopsAppProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GitopsAppProject(string name, Input<string> id, GitopsAppProjectState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/gitopsAppProject:GitopsAppProject", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GitopsAppProject resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GitopsAppProject Get(string name, Input<string> id, GitopsAppProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new GitopsAppProject(name, id, state, options);
        }
    }

    public sealed class GitopsAppProjectArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account identifier of the GitOps Agent where argo project will exist.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Agent identifier of the agent where argo project will exist (include scope prefix)
        /// </summary>
        [Input("agentId", required: true)]
        public Input<string> AgentId { get; set; } = null!;

        /// <summary>
        /// Org identifier of the GitOps Agent where argo project is to be created.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the Gitops Agent where argo project is to be created.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("projects", required: true)]
        private InputList<Inputs.GitopsAppProjectProjectArgs>? _projects;

        /// <summary>
        /// GitOps project configuration.
        /// </summary>
        public InputList<Inputs.GitopsAppProjectProjectArgs> Projects
        {
            get => _projects ?? (_projects = new InputList<Inputs.GitopsAppProjectProjectArgs>());
            set => _projects = value;
        }

        /// <summary>
        /// Identifier for the GitOps Argo project.
        /// </summary>
        [Input("queryName")]
        public Input<string>? QueryName { get; set; }

        /// <summary>
        /// Indicates if the argo project should be updated if existing and inserted if not.
        /// </summary>
        [Input("upsert")]
        public Input<bool>? Upsert { get; set; }

        public GitopsAppProjectArgs()
        {
        }
        public static new GitopsAppProjectArgs Empty => new GitopsAppProjectArgs();
    }

    public sealed class GitopsAppProjectState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account identifier of the GitOps Agent where argo project will exist.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Agent identifier of the agent where argo project will exist (include scope prefix)
        /// </summary>
        [Input("agentId")]
        public Input<string>? AgentId { get; set; }

        /// <summary>
        /// Org identifier of the GitOps Agent where argo project is to be created.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the Gitops Agent where argo project is to be created.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("projects")]
        private InputList<Inputs.GitopsAppProjectProjectGetArgs>? _projects;

        /// <summary>
        /// GitOps project configuration.
        /// </summary>
        public InputList<Inputs.GitopsAppProjectProjectGetArgs> Projects
        {
            get => _projects ?? (_projects = new InputList<Inputs.GitopsAppProjectProjectGetArgs>());
            set => _projects = value;
        }

        /// <summary>
        /// Identifier for the GitOps Argo project.
        /// </summary>
        [Input("queryName")]
        public Input<string>? QueryName { get; set; }

        /// <summary>
        /// Indicates if the argo project should be updated if existing and inserted if not.
        /// </summary>
        [Input("upsert")]
        public Input<bool>? Upsert { get; set; }

        public GitopsAppProjectState()
        {
        }
        public static new GitopsAppProjectState Empty => new GitopsAppProjectState();
    }
}
