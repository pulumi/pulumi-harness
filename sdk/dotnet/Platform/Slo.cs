// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating an SLO.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Harness.Platform.Slo("example", new()
    ///     {
    ///         OrgId = "org_id",
    ///         ProjectId = "project_id",
    ///         Identifier = "identifier",
    ///         Request = new Harness.Platform.Inputs.SloRequestArgs
    ///         {
    ///             Name = "name",
    ///             Description = "description",
    ///             Tags = new[]
    ///             {
    ///                 "foo:bar",
    ///                 "bar:foo",
    ///             },
    ///             UserJourneyRefs = new[]
    ///             {
    ///                 "one",
    ///                 "two",
    ///             },
    ///             SloTarget = new Harness.Platform.Inputs.SloRequestSloTargetArgs
    ///             {
    ///                 Type = "Calender",
    ///                 SloTargetPercentage = 10,
    ///                 Spec = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["type"] = "Monthly",
    ///                     ["spec"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["dayOfMonth"] = 5,
    ///                     },
    ///                 }),
    ///             },
    ///             Type = "Simple",
    ///             Spec = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["monitoredServiceRef"] = "monitoredServiceRef",
    ///                 ["serviceLevelIndicatorType"] = "Availability",
    ///                 ["serviceLevelIndicators"] = new[]
    ///                 {
    ///                     new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["name"] = "name",
    ///                         ["identifier"] = "identifier",
    ///                         ["type"] = "Window",
    ///                         ["spec"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["type"] = "Threshold",
    ///                             ["spec"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 ["metric1"] = "metric1",
    ///                                 ["thresholdValue"] = 10,
    ///                                 ["thresholdType"] = "&gt;",
    ///                             },
    ///                             ["sliMissingDataType"] = "Good",
    ///                         },
    ///                     },
    ///                 },
    ///             }),
    ///             NotificationRuleRefs = new[]
    ///             {
    ///                 new Harness.Platform.Inputs.SloRequestNotificationRuleRefArgs
    ///                 {
    ///                     NotificationRuleRef = "notification_rule_ref",
    ///                     Enabled = true,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import account level SLO
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/slo:Slo example &lt;slo_id&gt;
    /// ```
    /// 
    /// Import organization level SLO
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/slo:Slo example &lt;org_id&gt;/&lt;slo_id&gt;
    /// ```
    /// 
    /// Import project level SLO
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/slo:Slo example &lt;org_id&gt;/&lt;project_id&gt;/&lt;slo_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/slo:Slo")]
    public partial class Slo : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier of the SLO.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Identifier of the organization in which the SLO is configured.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// Identifier of the project in which the SLO is configured.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Request for creating or updating SLO.
        /// </summary>
        [Output("request")]
        public Output<Outputs.SloRequest?> Request { get; private set; } = null!;


        /// <summary>
        /// Create a Slo resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Slo(string name, SloArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/slo:Slo", name, args ?? new SloArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Slo(string name, Input<string> id, SloState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/slo:Slo", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Slo resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Slo Get(string name, Input<string> id, SloState? state = null, CustomResourceOptions? options = null)
        {
            return new Slo(name, id, state, options);
        }
    }

    public sealed class SloArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier of the SLO.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Identifier of the organization in which the SLO is configured.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// Identifier of the project in which the SLO is configured.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Request for creating or updating SLO.
        /// </summary>
        [Input("request")]
        public Input<Inputs.SloRequestArgs>? Request { get; set; }

        public SloArgs()
        {
        }
        public static new SloArgs Empty => new SloArgs();
    }

    public sealed class SloState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier of the SLO.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Identifier of the organization in which the SLO is configured.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Identifier of the project in which the SLO is configured.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Request for creating or updating SLO.
        /// </summary>
        [Input("request")]
        public Input<Inputs.SloRequestGetArgs>? Request { get; set; }

        public SloState()
        {
        }
        public static new SloState Empty => new SloState();
    }
}
