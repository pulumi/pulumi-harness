// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/infraModuleTesting:InfraModuleTesting example &lt;module_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/infraModuleTesting:InfraModuleTesting")]
    public partial class InfraModuleTesting : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account that owns the module
        /// </summary>
        [Output("account")]
        public Output<string> Account { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the module was created
        /// </summary>
        [Output("created")]
        public Output<int> Created { get; private set; } = null!;

        /// <summary>
        /// Description of the module
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Git Tag Style
        /// </summary>
        [Output("gitTagStyle")]
        public Output<string> GitTagStyle { get; private set; } = null!;

        /// <summary>
        /// Error while retrieving the module
        /// </summary>
        [Output("moduleError")]
        public Output<string> ModuleError { get; private set; } = null!;

        /// <summary>
        /// Identifier of the module to enable testing for
        /// </summary>
        [Output("moduleId")]
        public Output<string> ModuleId { get; private set; } = null!;

        /// <summary>
        /// Name of the module
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Organization identifier
        /// </summary>
        [Output("org")]
        public Output<string> Org { get; private set; } = null!;

        /// <summary>
        /// List of pipeline IDs to create webhooks for triggering test executions
        /// </summary>
        [Output("pipelines")]
        public Output<ImmutableArray<string>> Pipelines { get; private set; } = null!;

        /// <summary>
        /// Project identifier
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Provider connector for testing purposes
        /// </summary>
        [Output("providerConnector")]
        public Output<string> ProviderConnector { get; private set; } = null!;

        [Output("provisionerType")]
        public Output<string> ProvisionerType { get; private set; } = null!;

        /// <summary>
        /// Provisioner version for testing purposes
        /// </summary>
        [Output("provisionerVersion")]
        public Output<string> ProvisionerVersion { get; private set; } = null!;

        /// <summary>
        /// Pipeline ID to create webhooks for releases
        /// </summary>
        [Output("releasePipeline")]
        public Output<string?> ReleasePipeline { get; private set; } = null!;

        /// <summary>
        /// For account connectors, the repository where the module is stored
        /// </summary>
        [Output("repository")]
        public Output<string> Repository { get; private set; } = null!;

        /// <summary>
        /// Repository Branch in which the module should be accessed
        /// </summary>
        [Output("repositoryBranch")]
        public Output<string> RepositoryBranch { get; private set; } = null!;

        /// <summary>
        /// Repository Commit in which the module should be accessed
        /// </summary>
        [Output("repositoryCommit")]
        public Output<string> RepositoryCommit { get; private set; } = null!;

        /// <summary>
        /// Repository Connector is the reference to the connector for the repository
        /// </summary>
        [Output("repositoryConnector")]
        public Output<string> RepositoryConnector { get; private set; } = null!;

        /// <summary>
        /// Repository Path is the path in which the module resides
        /// </summary>
        [Output("repositoryPath")]
        public Output<string> RepositoryPath { get; private set; } = null!;

        /// <summary>
        /// URL where the module is stored
        /// </summary>
        [Output("repositoryUrl")]
        public Output<string> RepositoryUrl { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the module was last synced
        /// </summary>
        [Output("synced")]
        public Output<int> Synced { get; private set; } = null!;

        /// <summary>
        /// Provider of the module
        /// </summary>
        [Output("system")]
        public Output<string> System { get; private set; } = null!;

        /// <summary>
        /// Tags associated with the module
        /// </summary>
        [Output("tags")]
        public Output<string> Tags { get; private set; } = null!;

        /// <summary>
        /// Whether testing is enabled for the module
        /// </summary>
        [Output("testingEnabled")]
        public Output<bool> TestingEnabled { get; private set; } = null!;

        /// <summary>
        /// Testing metadata for the module
        /// </summary>
        [Output("testingMetadata")]
        public Output<Outputs.InfraModuleTestingTestingMetadata> TestingMetadata { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the module was last modified
        /// </summary>
        [Output("updated")]
        public Output<int> Updated { get; private set; } = null!;

        /// <summary>
        /// Versions of the module
        /// </summary>
        [Output("versions")]
        public Output<ImmutableArray<string>> Versions { get; private set; } = null!;


        /// <summary>
        /// Create a InfraModuleTesting resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InfraModuleTesting(string name, InfraModuleTestingArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/infraModuleTesting:InfraModuleTesting", name, args ?? new InfraModuleTestingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InfraModuleTesting(string name, Input<string> id, InfraModuleTestingState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/infraModuleTesting:InfraModuleTesting", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InfraModuleTesting resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InfraModuleTesting Get(string name, Input<string> id, InfraModuleTestingState? state = null, CustomResourceOptions? options = null)
        {
            return new InfraModuleTesting(name, id, state, options);
        }
    }

    public sealed class InfraModuleTestingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier of the module to enable testing for
        /// </summary>
        [Input("moduleId", required: true)]
        public Input<string> ModuleId { get; set; } = null!;

        /// <summary>
        /// Organization identifier
        /// </summary>
        [Input("org", required: true)]
        public Input<string> Org { get; set; } = null!;

        [Input("pipelines", required: true)]
        private InputList<string>? _pipelines;

        /// <summary>
        /// List of pipeline IDs to create webhooks for triggering test executions
        /// </summary>
        public InputList<string> Pipelines
        {
            get => _pipelines ?? (_pipelines = new InputList<string>());
            set => _pipelines = value;
        }

        /// <summary>
        /// Project identifier
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Provider connector for testing purposes
        /// </summary>
        [Input("providerConnector", required: true)]
        public Input<string> ProviderConnector { get; set; } = null!;

        [Input("provisionerType", required: true)]
        public Input<string> ProvisionerType { get; set; } = null!;

        /// <summary>
        /// Provisioner version for testing purposes
        /// </summary>
        [Input("provisionerVersion", required: true)]
        public Input<string> ProvisionerVersion { get; set; } = null!;

        /// <summary>
        /// Pipeline ID to create webhooks for releases
        /// </summary>
        [Input("releasePipeline")]
        public Input<string>? ReleasePipeline { get; set; }

        /// <summary>
        /// Whether testing is enabled for the module
        /// </summary>
        [Input("testingEnabled")]
        public Input<bool>? TestingEnabled { get; set; }

        /// <summary>
        /// Testing metadata for the module
        /// </summary>
        [Input("testingMetadata")]
        public Input<Inputs.InfraModuleTestingTestingMetadataArgs>? TestingMetadata { get; set; }

        /// <summary>
        /// Timestamp when the module was last modified
        /// </summary>
        [Input("updated")]
        public Input<int>? Updated { get; set; }

        [Input("versions")]
        private InputList<string>? _versions;

        /// <summary>
        /// Versions of the module
        /// </summary>
        public InputList<string> Versions
        {
            get => _versions ?? (_versions = new InputList<string>());
            set => _versions = value;
        }

        public InfraModuleTestingArgs()
        {
        }
        public static new InfraModuleTestingArgs Empty => new InfraModuleTestingArgs();
    }

    public sealed class InfraModuleTestingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account that owns the module
        /// </summary>
        [Input("account")]
        public Input<string>? Account { get; set; }

        /// <summary>
        /// Timestamp when the module was created
        /// </summary>
        [Input("created")]
        public Input<int>? Created { get; set; }

        /// <summary>
        /// Description of the module
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Git Tag Style
        /// </summary>
        [Input("gitTagStyle")]
        public Input<string>? GitTagStyle { get; set; }

        /// <summary>
        /// Error while retrieving the module
        /// </summary>
        [Input("moduleError")]
        public Input<string>? ModuleError { get; set; }

        /// <summary>
        /// Identifier of the module to enable testing for
        /// </summary>
        [Input("moduleId")]
        public Input<string>? ModuleId { get; set; }

        /// <summary>
        /// Name of the module
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Organization identifier
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        [Input("pipelines")]
        private InputList<string>? _pipelines;

        /// <summary>
        /// List of pipeline IDs to create webhooks for triggering test executions
        /// </summary>
        public InputList<string> Pipelines
        {
            get => _pipelines ?? (_pipelines = new InputList<string>());
            set => _pipelines = value;
        }

        /// <summary>
        /// Project identifier
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Provider connector for testing purposes
        /// </summary>
        [Input("providerConnector")]
        public Input<string>? ProviderConnector { get; set; }

        [Input("provisionerType")]
        public Input<string>? ProvisionerType { get; set; }

        /// <summary>
        /// Provisioner version for testing purposes
        /// </summary>
        [Input("provisionerVersion")]
        public Input<string>? ProvisionerVersion { get; set; }

        /// <summary>
        /// Pipeline ID to create webhooks for releases
        /// </summary>
        [Input("releasePipeline")]
        public Input<string>? ReleasePipeline { get; set; }

        /// <summary>
        /// For account connectors, the repository where the module is stored
        /// </summary>
        [Input("repository")]
        public Input<string>? Repository { get; set; }

        /// <summary>
        /// Repository Branch in which the module should be accessed
        /// </summary>
        [Input("repositoryBranch")]
        public Input<string>? RepositoryBranch { get; set; }

        /// <summary>
        /// Repository Commit in which the module should be accessed
        /// </summary>
        [Input("repositoryCommit")]
        public Input<string>? RepositoryCommit { get; set; }

        /// <summary>
        /// Repository Connector is the reference to the connector for the repository
        /// </summary>
        [Input("repositoryConnector")]
        public Input<string>? RepositoryConnector { get; set; }

        /// <summary>
        /// Repository Path is the path in which the module resides
        /// </summary>
        [Input("repositoryPath")]
        public Input<string>? RepositoryPath { get; set; }

        /// <summary>
        /// URL where the module is stored
        /// </summary>
        [Input("repositoryUrl")]
        public Input<string>? RepositoryUrl { get; set; }

        /// <summary>
        /// Timestamp when the module was last synced
        /// </summary>
        [Input("synced")]
        public Input<int>? Synced { get; set; }

        /// <summary>
        /// Provider of the module
        /// </summary>
        [Input("system")]
        public Input<string>? System { get; set; }

        /// <summary>
        /// Tags associated with the module
        /// </summary>
        [Input("tags")]
        public Input<string>? Tags { get; set; }

        /// <summary>
        /// Whether testing is enabled for the module
        /// </summary>
        [Input("testingEnabled")]
        public Input<bool>? TestingEnabled { get; set; }

        /// <summary>
        /// Testing metadata for the module
        /// </summary>
        [Input("testingMetadata")]
        public Input<Inputs.InfraModuleTestingTestingMetadataGetArgs>? TestingMetadata { get; set; }

        /// <summary>
        /// Timestamp when the module was last modified
        /// </summary>
        [Input("updated")]
        public Input<int>? Updated { get; set; }

        [Input("versions")]
        private InputList<string>? _versions;

        /// <summary>
        /// Versions of the module
        /// </summary>
        public InputList<string> Versions
        {
            get => _versions ?? (_versions = new InputList<string>());
            set => _versions = value;
        }

        public InfraModuleTestingState()
        {
        }
        public static new InfraModuleTestingState Empty => new InfraModuleTestingState();
    }
}
