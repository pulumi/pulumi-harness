// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetDashboards
    {
        /// <summary>
        /// Data source for retrieving a Harness Dashboard.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetDashboards.Invoke(new()
        ///     {
        ///         Id = "48525",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDashboardsResult> InvokeAsync(GetDashboardsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDashboardsResult>("harness:platform/getDashboards:getDashboards", args ?? new GetDashboardsArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Dashboard.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetDashboards.Invoke(new()
        ///     {
        ///         Id = "48525",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDashboardsResult> Invoke(GetDashboardsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDashboardsResult>("harness:platform/getDashboards:getDashboards", args ?? new GetDashboardsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Dashboard.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetDashboards.Invoke(new()
        ///     {
        ///         Id = "48525",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDashboardsResult> Invoke(GetDashboardsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDashboardsResult>("harness:platform/getDashboards:getDashboards", args ?? new GetDashboardsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDashboardsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the dashboard.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        [Input("identifier")]
        public string? Identifier { get; set; }

        /// <summary>
        /// Name of the Dashboard.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetDashboardsArgs()
        {
        }
        public static new GetDashboardsArgs Empty => new GetDashboardsArgs();
    }

    public sealed class GetDashboardsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the dashboard.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Name of the Dashboard.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetDashboardsInvokeArgs()
        {
        }
        public static new GetDashboardsInvokeArgs Empty => new GetDashboardsInvokeArgs();
    }


    [OutputType]
    public sealed class GetDashboardsResult
    {
        /// <summary>
        /// Created at timestamp of the Dashboard.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Unique identifier of the Dashboard.
        /// </summary>
        public readonly string DashboardId;
        /// <summary>
        /// Data Sources within the Dashboard.
        /// </summary>
        public readonly ImmutableArray<string> DataSources;
        /// <summary>
        /// Description of the Dashboard.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Unique identifier of the Folder.
        /// </summary>
        public readonly string FolderId;
        /// <summary>
        /// Identifier of the dashboard.
        /// </summary>
        public readonly string Id;
        public readonly string? Identifier;
        /// <summary>
        /// Data Models within the Dashboard.
        /// </summary>
        public readonly ImmutableArray<string> Models;
        /// <summary>
        /// Name of the Dashboard.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Resource identifier of the dashboard.
        /// </summary>
        public readonly string ResourceIdentifier;
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Title of the Dashboard.
        /// </summary>
        public readonly string Title;
        /// <summary>
        /// Type of the dashboard.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// View count of the dashboard.
        /// </summary>
        public readonly int ViewCount;

        [OutputConstructor]
        private GetDashboardsResult(
            string createdAt,

            string dashboardId,

            ImmutableArray<string> dataSources,

            string description,

            string folderId,

            string id,

            string? identifier,

            ImmutableArray<string> models,

            string? name,

            string resourceIdentifier,

            ImmutableArray<string> tags,

            string title,

            string type,

            int viewCount)
        {
            CreatedAt = createdAt;
            DashboardId = dashboardId;
            DataSources = dataSources;
            Description = description;
            FolderId = folderId;
            Id = id;
            Identifier = identifier;
            Models = models;
            Name = name;
            ResourceIdentifier = resourceIdentifier;
            Tags = tags;
            Title = title;
            Type = type;
            ViewCount = viewCount;
        }
    }
}
