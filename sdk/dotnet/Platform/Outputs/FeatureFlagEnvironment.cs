// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform.Outputs
{

    [OutputType]
    public sealed class FeatureFlagEnvironment
    {
        /// <summary>
        /// The targeting rules for the flag
        /// </summary>
        public readonly ImmutableArray<Outputs.FeatureFlagEnvironmentAddTargetRule> AddTargetRules;
        /// <summary>
        /// Default variation to be served when flag is 'off'
        /// </summary>
        public readonly string? DefaultOffVariation;
        /// <summary>
        /// Default variation to be served when flag is 'on'
        /// </summary>
        public readonly string? DefaultOnVariation;
        /// <summary>
        /// Identifier of the Environment
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// State of the flag in this environment. Possible values are 'on' and 'off'
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private FeatureFlagEnvironment(
            ImmutableArray<Outputs.FeatureFlagEnvironmentAddTargetRule> addTargetRules,

            string? defaultOffVariation,

            string? defaultOnVariation,

            string identifier,

            string? state)
        {
            AddTargetRules = addTargetRules;
            DefaultOffVariation = defaultOffVariation;
            DefaultOnVariation = defaultOnVariation;
            Identifier = identifier;
            State = state;
        }
    }
}
