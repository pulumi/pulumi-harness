// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform.Outputs
{

    [OutputType]
    public sealed class GetGitopsRepoCredCredResult
    {
        /// <summary>
        /// Specifies whether helm-oci support should be enabled for this repo.
        /// </summary>
        public readonly bool EnableOci;
        /// <summary>
        /// Specifies the GitHub API URL for GitHub app authentication.
        /// </summary>
        public readonly string GithubAppEnterpriseBaseUrl;
        /// <summary>
        /// Specifies the Github App ID of the app used to access the repo for GitHub app authentication.
        /// </summary>
        public readonly string GithubAppId;
        /// <summary>
        /// Specifies the ID of the installed GitHub App for GitHub app authentication.
        /// </summary>
        public readonly string GithubAppInstallationId;
        /// <summary>
        /// github*app*private_key specifies the private key PEM data for authentication via GitHub app.
        /// </summary>
        public readonly string GithubAppPrivateKey;
        /// <summary>
        /// Password or PAT to be used for authenticating the remote repository.
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// SSH Key in PEM format for authenticating the repository. Used only for Git repository.
        /// </summary>
        public readonly string SshPrivateKey;
        /// <summary>
        /// Certificate in PEM format for authenticating at the repo server. This is used for mTLS.
        /// </summary>
        public readonly string TlsClientCertData;
        /// <summary>
        /// Private key in PEM format for authenticating at the repo server. This is used for mTLS.
        /// </summary>
        public readonly string TlsClientCertKey;
        /// <summary>
        /// Type specifies the type of the repoCreds.Can be either 'git' or 'helm. 'git' is assumed if empty or absent
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// URL of the remote repository. Make sure you pass at least an org, this will not work if you just provide the host, for eg. "https://github.com"
        /// </summary>
        public readonly string Url;
        /// <summary>
        /// Username to be used for authenticating the remote repository.
        /// </summary>
        public readonly string Username;

        [OutputConstructor]
        private GetGitopsRepoCredCredResult(
            bool enableOci,

            string githubAppEnterpriseBaseUrl,

            string githubAppId,

            string githubAppInstallationId,

            string githubAppPrivateKey,

            string password,

            string sshPrivateKey,

            string tlsClientCertData,

            string tlsClientCertKey,

            string type,

            string url,

            string username)
        {
            EnableOci = enableOci;
            GithubAppEnterpriseBaseUrl = githubAppEnterpriseBaseUrl;
            GithubAppId = githubAppId;
            GithubAppInstallationId = githubAppInstallationId;
            GithubAppPrivateKey = githubAppPrivateKey;
            Password = password;
            SshPrivateKey = sshPrivateKey;
            TlsClientCertData = tlsClientCertData;
            TlsClientCertKey = tlsClientCertKey;
            Type = type;
            Url = url;
            Username = username;
        }
    }
}
