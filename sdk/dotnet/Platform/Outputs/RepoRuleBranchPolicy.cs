// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform.Outputs
{

    [OutputType]
    public sealed class RepoRuleBranchPolicy
    {
        /// <summary>
        /// Limit which merge strategies are available to merge a pull request(Any of squash, rebase, merge).
        /// </summary>
        public readonly ImmutableArray<string> AllowMergeStrategies;
        /// <summary>
        /// Only allow users with bypass permission to create matching branches.
        /// </summary>
        public readonly bool? BlockBranchCreation;
        /// <summary>
        /// Only allow users with bypass permission to delete matching branches.
        /// </summary>
        public readonly bool? BlockBranchDeletion;
        /// <summary>
        /// Automatically delete the source branch of a pull request after it is merged.
        /// </summary>
        public readonly bool? DeleteBranchOnMerge;
        /// <summary>
        /// Require approval on pull requests from one reviewer for each codeowner rule.
        /// </summary>
        public readonly bool? RequireCodeOwners;
        /// <summary>
        /// Require re-approval when there are new changes in the pull request.
        /// </summary>
        public readonly bool? RequireLatestCommitApproval;
        /// <summary>
        /// Require approval on pull requests from a minimum number of reviewers.
        /// </summary>
        public readonly int? RequireMinimumApprovalCount;
        /// <summary>
        /// Require all request for changes have been resolved.
        /// </summary>
        public readonly bool? RequireNoChangeRequest;
        /// <summary>
        /// Do not allow any changes to matching branches without a pull request.
        /// </summary>
        public readonly bool? RequirePullRequest;
        /// <summary>
        /// All comments on a pull request must be resolved before it can be merged.
        /// </summary>
        public readonly bool? RequireResolveAllComments;
        /// <summary>
        /// Selected status checks must pass before a pull request can be merged.
        /// </summary>
        public readonly ImmutableArray<string> RequireStatusChecks;

        [OutputConstructor]
        private RepoRuleBranchPolicy(
            ImmutableArray<string> allowMergeStrategies,

            bool? blockBranchCreation,

            bool? blockBranchDeletion,

            bool? deleteBranchOnMerge,

            bool? requireCodeOwners,

            bool? requireLatestCommitApproval,

            int? requireMinimumApprovalCount,

            bool? requireNoChangeRequest,

            bool? requirePullRequest,

            bool? requireResolveAllComments,

            ImmutableArray<string> requireStatusChecks)
        {
            AllowMergeStrategies = allowMergeStrategies;
            BlockBranchCreation = blockBranchCreation;
            BlockBranchDeletion = blockBranchDeletion;
            DeleteBranchOnMerge = deleteBranchOnMerge;
            RequireCodeOwners = requireCodeOwners;
            RequireLatestCommitApproval = requireLatestCommitApproval;
            RequireMinimumApprovalCount = requireMinimumApprovalCount;
            RequireNoChangeRequest = requireNoChangeRequest;
            RequirePullRequest = requirePullRequest;
            RequireResolveAllComments = requireResolveAllComments;
            RequireStatusChecks = requireStatusChecks;
        }
    }
}
