// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform.Outputs
{

    [OutputType]
    public sealed class EnvironmentGitDetails
    {
        /// <summary>
        /// Name of the default branch (this checks out a new branch titled by branch_name).
        /// </summary>
        public readonly string? BaseBranch;
        /// <summary>
        /// Name of the branch.
        /// </summary>
        public readonly string? Branch;
        /// <summary>
        /// message for the commit in Git Repo.
        /// </summary>
        public readonly string? CommitMessage;
        /// <summary>
        /// Identifier of the Harness Connector used for importing entity from Git To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.
        /// </summary>
        public readonly string? ConnectorRef;
        /// <summary>
        /// File path of the Entity in the repository.
        /// </summary>
        public readonly string? FilePath;
        /// <summary>
        /// Flag to set if importing from Git
        /// </summary>
        public readonly bool? ImportFromGit;
        /// <summary>
        /// Flag to set if force importing from Git
        /// </summary>
        public readonly bool? IsForceImport;
        /// <summary>
        /// If the gitProvider is HarnessCode
        /// </summary>
        public readonly bool? IsHarnesscodeRepo;
        /// <summary>
        /// If a new branch creation is requested.
        /// </summary>
        public readonly bool? IsNewBranch;
        /// <summary>
        /// Last commit identifier (for Git Repositories other than Github). To be provided only when updating Environment.
        /// </summary>
        public readonly string? LastCommitId;
        /// <summary>
        /// Last object identifier (for Github). To be provided only when updating Environment.
        /// </summary>
        public readonly string? LastObjectId;
        /// <summary>
        /// If the Entity is to be fetched from cache
        /// </summary>
        public readonly string? LoadFromCache;
        /// <summary>
        /// Whether the file has to be get from fallback_branch.
        /// </summary>
        public readonly bool? LoadFromFallbackBranch;
        /// <summary>
        /// Identifier of the Harness Connector used for CRUD operations on the Parent Entity. To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.
        /// </summary>
        public readonly string? ParentEntityConnectorRef;
        /// <summary>
        /// Name of the repository where parent entity lies.
        /// </summary>
        public readonly string? ParentEntityRepoName;
        /// <summary>
        /// Name of the repository.
        /// </summary>
        public readonly string? RepoName;
        /// <summary>
        /// store type of the entity.
        /// </summary>
        public readonly string? StoreType;

        [OutputConstructor]
        private EnvironmentGitDetails(
            string? baseBranch,

            string? branch,

            string? commitMessage,

            string? connectorRef,

            string? filePath,

            bool? importFromGit,

            bool? isForceImport,

            bool? isHarnesscodeRepo,

            bool? isNewBranch,

            string? lastCommitId,

            string? lastObjectId,

            string? loadFromCache,

            bool? loadFromFallbackBranch,

            string? parentEntityConnectorRef,

            string? parentEntityRepoName,

            string? repoName,

            string? storeType)
        {
            BaseBranch = baseBranch;
            Branch = branch;
            CommitMessage = commitMessage;
            ConnectorRef = connectorRef;
            FilePath = filePath;
            ImportFromGit = importFromGit;
            IsForceImport = isForceImport;
            IsHarnesscodeRepo = isHarnesscodeRepo;
            IsNewBranch = isNewBranch;
            LastCommitId = lastCommitId;
            LastObjectId = lastObjectId;
            LoadFromCache = loadFromCache;
            LoadFromFallbackBranch = loadFromFallbackBranch;
            ParentEntityConnectorRef = parentEntityConnectorRef;
            ParentEntityRepoName = parentEntityRepoName;
            RepoName = repoName;
            StoreType = storeType;
        }
    }
}
