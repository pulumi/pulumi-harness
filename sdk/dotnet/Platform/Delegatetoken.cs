// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating delegate tokens.
    /// 
    /// ## Import
    /// 
    /// Import account level delegate token
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/delegatetoken:Delegatetoken harness_platform_delegatetoken &lt;token_id&gt;
    /// ```
    /// 
    /// Import org level delegate token
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/delegatetoken:Delegatetoken harness_platform_delegatetoken &lt;org_id&gt;/&lt;token_id&gt;
    /// ```
    /// 
    /// Import project level delegate token
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/delegatetoken:Delegatetoken harness_platform_delegatetoken &lt;org_id&gt;/&lt;project_id&gt;/&lt;token_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/delegatetoken:Delegatetoken")]
    public partial class Delegatetoken : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account Identifier for the Entity
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Time when the delegate token is created.
        /// </summary>
        [Output("createdAt")]
        public Output<int> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// created by details.
        /// </summary>
        [Output("createdBy")]
        public Output<ImmutableDictionary<string, string>> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Status of Delegate Token (ACTIVE or REVOKED). If left empty both active and revoked tokens will be assumed.
        /// </summary>
        [Output("tokenStatus")]
        public Output<string> TokenStatus { get; private set; } = null!;

        /// <summary>
        /// Value of the delegate Token
        /// </summary>
        [Output("value")]
        public Output<string> Value { get; private set; } = null!;


        /// <summary>
        /// Create a Delegatetoken resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Delegatetoken(string name, DelegatetokenArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/delegatetoken:Delegatetoken", name, args ?? new DelegatetokenArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Delegatetoken(string name, Input<string> id, DelegatetokenState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/delegatetoken:Delegatetoken", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Delegatetoken resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Delegatetoken Get(string name, Input<string> id, DelegatetokenState? state = null, CustomResourceOptions? options = null)
        {
            return new Delegatetoken(name, id, state, options);
        }
    }

    public sealed class DelegatetokenArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account Identifier for the Entity
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Time when the delegate token is created.
        /// </summary>
        [Input("createdAt")]
        public Input<int>? CreatedAt { get; set; }

        [Input("createdBy")]
        private InputMap<string>? _createdBy;

        /// <summary>
        /// created by details.
        /// </summary>
        public InputMap<string> CreatedBy
        {
            get => _createdBy ?? (_createdBy = new InputMap<string>());
            set => _createdBy = value;
        }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Status of Delegate Token (ACTIVE or REVOKED). If left empty both active and revoked tokens will be assumed.
        /// </summary>
        [Input("tokenStatus")]
        public Input<string>? TokenStatus { get; set; }

        /// <summary>
        /// Value of the delegate Token
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public DelegatetokenArgs()
        {
        }
        public static new DelegatetokenArgs Empty => new DelegatetokenArgs();
    }

    public sealed class DelegatetokenState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account Identifier for the Entity
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Time when the delegate token is created.
        /// </summary>
        [Input("createdAt")]
        public Input<int>? CreatedAt { get; set; }

        [Input("createdBy")]
        private InputMap<string>? _createdBy;

        /// <summary>
        /// created by details.
        /// </summary>
        public InputMap<string> CreatedBy
        {
            get => _createdBy ?? (_createdBy = new InputMap<string>());
            set => _createdBy = value;
        }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Status of Delegate Token (ACTIVE or REVOKED). If left empty both active and revoked tokens will be assumed.
        /// </summary>
        [Input("tokenStatus")]
        public Input<string>? TokenStatus { get; set; }

        /// <summary>
        /// Value of the delegate Token
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public DelegatetokenState()
        {
        }
        public static new DelegatetokenState Empty => new DelegatetokenState();
    }
}
