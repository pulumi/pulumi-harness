// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetEnvironmentClustersMapping
    {
        /// <summary>
        /// Data source for retrieving Harness Gitops clusters mapped to Harness Environment.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // data source for gitops clusters mapped to a project level env
        ///     var example = Harness.Platform.GetEnvironmentClustersMapping.Invoke(new()
        ///     {
        ///         Identifier = "mycustomidentifier",
        ///         OrgId = "orgIdentifer",
        ///         ProjectId = "projectIdentifier",
        ///         EnvId = "exampleEnvId",
        ///         Clusters = new[]
        ///         {
        ///             new Harness.Platform.Inputs.GetEnvironmentClustersMappingClusterInputArgs
        ///             {
        ///                 Identifier = "incluster",
        ///                 Name = "in-cluster",
        ///                 AgentIdentifier = "account.gitopsagentdev",
        ///                 Scope = "ACCOUNT",
        ///             },
        ///         },
        ///     });
        /// 
        ///     // data source for two gitops clusters mapped to an account level env
        ///     var example2 = Harness.Platform.GetEnvironmentClustersMapping.Invoke(new()
        ///     {
        ///         Identifier = "mycustomidentifier",
        ///         EnvId = "env1",
        ///         Clusters = new[]
        ///         {
        ///             new Harness.Platform.Inputs.GetEnvironmentClustersMappingClusterInputArgs
        ///             {
        ///                 Identifier = "clusterA",
        ///                 Name = "cluster-A",
        ///                 AgentIdentifier = "account.gitopsagentprod",
        ///                 Scope = "ACCOUNT",
        ///             },
        ///             new Harness.Platform.Inputs.GetEnvironmentClustersMappingClusterInputArgs
        ///             {
        ///                 Identifier = "clusterB",
        ///                 Name = "cluster-B",
        ///                 AgentIdentifier = "account.gitopsagentprod",
        ///                 Scope = "ACCOUNT",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetEnvironmentClustersMappingResult> InvokeAsync(GetEnvironmentClustersMappingArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEnvironmentClustersMappingResult>("harness:platform/getEnvironmentClustersMapping:getEnvironmentClustersMapping", args ?? new GetEnvironmentClustersMappingArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving Harness Gitops clusters mapped to Harness Environment.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // data source for gitops clusters mapped to a project level env
        ///     var example = Harness.Platform.GetEnvironmentClustersMapping.Invoke(new()
        ///     {
        ///         Identifier = "mycustomidentifier",
        ///         OrgId = "orgIdentifer",
        ///         ProjectId = "projectIdentifier",
        ///         EnvId = "exampleEnvId",
        ///         Clusters = new[]
        ///         {
        ///             new Harness.Platform.Inputs.GetEnvironmentClustersMappingClusterInputArgs
        ///             {
        ///                 Identifier = "incluster",
        ///                 Name = "in-cluster",
        ///                 AgentIdentifier = "account.gitopsagentdev",
        ///                 Scope = "ACCOUNT",
        ///             },
        ///         },
        ///     });
        /// 
        ///     // data source for two gitops clusters mapped to an account level env
        ///     var example2 = Harness.Platform.GetEnvironmentClustersMapping.Invoke(new()
        ///     {
        ///         Identifier = "mycustomidentifier",
        ///         EnvId = "env1",
        ///         Clusters = new[]
        ///         {
        ///             new Harness.Platform.Inputs.GetEnvironmentClustersMappingClusterInputArgs
        ///             {
        ///                 Identifier = "clusterA",
        ///                 Name = "cluster-A",
        ///                 AgentIdentifier = "account.gitopsagentprod",
        ///                 Scope = "ACCOUNT",
        ///             },
        ///             new Harness.Platform.Inputs.GetEnvironmentClustersMappingClusterInputArgs
        ///             {
        ///                 Identifier = "clusterB",
        ///                 Name = "cluster-B",
        ///                 AgentIdentifier = "account.gitopsagentprod",
        ///                 Scope = "ACCOUNT",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetEnvironmentClustersMappingResult> Invoke(GetEnvironmentClustersMappingInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEnvironmentClustersMappingResult>("harness:platform/getEnvironmentClustersMapping:getEnvironmentClustersMapping", args ?? new GetEnvironmentClustersMappingInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving Harness Gitops clusters mapped to Harness Environment.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // data source for gitops clusters mapped to a project level env
        ///     var example = Harness.Platform.GetEnvironmentClustersMapping.Invoke(new()
        ///     {
        ///         Identifier = "mycustomidentifier",
        ///         OrgId = "orgIdentifer",
        ///         ProjectId = "projectIdentifier",
        ///         EnvId = "exampleEnvId",
        ///         Clusters = new[]
        ///         {
        ///             new Harness.Platform.Inputs.GetEnvironmentClustersMappingClusterInputArgs
        ///             {
        ///                 Identifier = "incluster",
        ///                 Name = "in-cluster",
        ///                 AgentIdentifier = "account.gitopsagentdev",
        ///                 Scope = "ACCOUNT",
        ///             },
        ///         },
        ///     });
        /// 
        ///     // data source for two gitops clusters mapped to an account level env
        ///     var example2 = Harness.Platform.GetEnvironmentClustersMapping.Invoke(new()
        ///     {
        ///         Identifier = "mycustomidentifier",
        ///         EnvId = "env1",
        ///         Clusters = new[]
        ///         {
        ///             new Harness.Platform.Inputs.GetEnvironmentClustersMappingClusterInputArgs
        ///             {
        ///                 Identifier = "clusterA",
        ///                 Name = "cluster-A",
        ///                 AgentIdentifier = "account.gitopsagentprod",
        ///                 Scope = "ACCOUNT",
        ///             },
        ///             new Harness.Platform.Inputs.GetEnvironmentClustersMappingClusterInputArgs
        ///             {
        ///                 Identifier = "clusterB",
        ///                 Name = "cluster-B",
        ///                 AgentIdentifier = "account.gitopsagentprod",
        ///                 Scope = "ACCOUNT",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetEnvironmentClustersMappingResult> Invoke(GetEnvironmentClustersMappingInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEnvironmentClustersMappingResult>("harness:platform/getEnvironmentClustersMapping:getEnvironmentClustersMapping", args ?? new GetEnvironmentClustersMappingInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEnvironmentClustersMappingArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusters")]
        private List<Inputs.GetEnvironmentClustersMappingClusterArgs>? _clusters;

        /// <summary>
        /// list of cluster identifiers and names
        /// </summary>
        public List<Inputs.GetEnvironmentClustersMappingClusterArgs> Clusters
        {
            get => _clusters ?? (_clusters = new List<Inputs.GetEnvironmentClustersMappingClusterArgs>());
            set => _clusters = value;
        }

        /// <summary>
        /// environment identifier.
        /// </summary>
        [Input("envId", required: true)]
        public string EnvId { get; set; } = null!;

        /// <summary>
        /// identifier for the cluster mapping(can be given any value).
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        /// <summary>
        /// org_id of the environment.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// project_id of the environment.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetEnvironmentClustersMappingArgs()
        {
        }
        public static new GetEnvironmentClustersMappingArgs Empty => new GetEnvironmentClustersMappingArgs();
    }

    public sealed class GetEnvironmentClustersMappingInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusters")]
        private InputList<Inputs.GetEnvironmentClustersMappingClusterInputArgs>? _clusters;

        /// <summary>
        /// list of cluster identifiers and names
        /// </summary>
        public InputList<Inputs.GetEnvironmentClustersMappingClusterInputArgs> Clusters
        {
            get => _clusters ?? (_clusters = new InputList<Inputs.GetEnvironmentClustersMappingClusterInputArgs>());
            set => _clusters = value;
        }

        /// <summary>
        /// environment identifier.
        /// </summary>
        [Input("envId", required: true)]
        public Input<string> EnvId { get; set; } = null!;

        /// <summary>
        /// identifier for the cluster mapping(can be given any value).
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// org_id of the environment.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// project_id of the environment.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetEnvironmentClustersMappingInvokeArgs()
        {
        }
        public static new GetEnvironmentClustersMappingInvokeArgs Empty => new GetEnvironmentClustersMappingInvokeArgs();
    }


    [OutputType]
    public sealed class GetEnvironmentClustersMappingResult
    {
        /// <summary>
        /// list of cluster identifiers and names
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEnvironmentClustersMappingClusterResult> Clusters;
        /// <summary>
        /// environment identifier.
        /// </summary>
        public readonly string EnvId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// identifier for the cluster mapping(can be given any value).
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// org_id of the environment.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// project_id of the environment.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// scope at which the environment exists in harness.
        /// </summary>
        public readonly string Scope;

        [OutputConstructor]
        private GetEnvironmentClustersMappingResult(
            ImmutableArray<Outputs.GetEnvironmentClustersMappingClusterResult> clusters,

            string envId,

            string id,

            string identifier,

            string? orgId,

            string? projectId,

            string scope)
        {
            Clusters = clusters;
            EnvId = envId;
            Id = id;
            Identifier = identifier;
            OrgId = orgId;
            ProjectId = projectId;
            Scope = scope;
        }
    }
}
