// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for managing Workspaces
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Harness.Platform.Workspace("example", new()
    ///     {
    ///         Name = "example",
    ///         Identifier = "example",
    ///         OrgId = testHarnessPlatformOrganization.Id,
    ///         ProjectId = testHarnessPlatformProject.Id,
    ///         ProvisionerType = "terraform",
    ///         ProvisionerVersion = "1.5.6",
    ///         Repository = "https://github.com/org/repo",
    ///         RepositoryBranch = "main",
    ///         RepositoryPath = "tf/aws/basic",
    ///         CostEstimationEnabled = true,
    ///         ProviderConnector = test.Id,
    ///         RepositoryConnector = test.Id,
    ///         TerraformVariables = new[]
    ///         {
    ///             new Harness.Platform.Inputs.WorkspaceTerraformVariableArgs
    ///             {
    ///                 Key = "key1",
    ///                 Value = "val1",
    ///                 ValueType = "string",
    ///             },
    ///             new Harness.Platform.Inputs.WorkspaceTerraformVariableArgs
    ///             {
    ///                 Key = "key2",
    ///                 Value = "val2",
    ///                 ValueType = "string",
    ///             },
    ///         },
    ///         EnvironmentVariables = new[]
    ///         {
    ///             new Harness.Platform.Inputs.WorkspaceEnvironmentVariableArgs
    ///             {
    ///                 Key = "key1",
    ///                 Value = "val1",
    ///                 ValueType = "string",
    ///             },
    ///             new Harness.Platform.Inputs.WorkspaceEnvironmentVariableArgs
    ///             {
    ///                 Key = "key2",
    ///                 Value = "val2",
    ///                 ValueType = "string",
    ///             },
    ///         },
    ///         TerraformVariableFiles = new[]
    ///         {
    ///             new Harness.Platform.Inputs.WorkspaceTerraformVariableFileArgs
    ///             {
    ///                 Repository = "https://github.com/org/repo",
    ///                 RepositoryBranch = "main",
    ///                 RepositoryPath = "tf/gcp/basic",
    ///                 RepositoryConnector = test.Id,
    ///             },
    ///             new Harness.Platform.Inputs.WorkspaceTerraformVariableFileArgs
    ///             {
    ///                 Repository = "https://github.com/org/repo",
    ///                 RepositoryCommit = "v1.0.0",
    ///                 RepositoryPath = "tf/aws/basic",
    ///                 RepositoryConnector = test.Id,
    ///             },
    ///             new Harness.Platform.Inputs.WorkspaceTerraformVariableFileArgs
    ///             {
    ///                 Repository = "https://github.com/org/repo",
    ///                 RepositorySha = "349d90bb9c90f4a3482981c259080de31609e6f6",
    ///                 RepositoryPath = "tf/aws/basic",
    ///                 RepositoryConnector = test.Id,
    ///             },
    ///         },
    ///         VariableSets = new[]
    ///         {
    ///             testHarnessPlatformInfraVariableSet.Id,
    ///         },
    ///         DefaultPipelines = 
    ///         {
    ///             { "destroy", "destroy_pipeline_id" },
    ///             { "drift", "drift_pipeline_id" },
    ///             { "plan", "plan_pipeline_id" },
    ///             { "apply", "apply_pipeline_id" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/workspace:Workspace example &lt;org_id&gt;/&lt;project_id&gt;/&lt;workspace_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/workspace:Workspace")]
    public partial class Workspace : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Provider connector configured on the workspace
        /// </summary>
        [Output("connectors")]
        public Output<ImmutableArray<Outputs.WorkspaceConnector>> Connectors { get; private set; } = null!;

        /// <summary>
        /// Cost estimation enabled determines if cost estimation operations are performed.
        /// </summary>
        [Output("costEstimationEnabled")]
        public Output<bool> CostEstimationEnabled { get; private set; } = null!;

        /// <summary>
        /// Default pipelines associated with this workspace
        /// </summary>
        [Output("defaultPipelines")]
        public Output<ImmutableDictionary<string, string>?> DefaultPipelines { get; private set; } = null!;

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Environment variables configured on the workspace
        /// </summary>
        [Output("environmentVariables")]
        public Output<ImmutableArray<Outputs.WorkspaceEnvironmentVariable>> EnvironmentVariables { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Provider connector is the reference to the connector for the infrastructure provider
        /// </summary>
        [Output("providerConnector")]
        public Output<string?> ProviderConnector { get; private set; } = null!;

        [Output("provisionerType")]
        public Output<string> ProvisionerType { get; private set; } = null!;

        [Output("provisionerVersion")]
        public Output<string> ProvisionerVersion { get; private set; } = null!;

        /// <summary>
        /// Repository is the name of the repository to fetch the code from.
        /// </summary>
        [Output("repository")]
        public Output<string> Repository { get; private set; } = null!;

        /// <summary>
        /// Repository branch is the name of the branch to fetch the code from. This cannot be set if repository commit or sha is set.
        /// </summary>
        [Output("repositoryBranch")]
        public Output<string?> RepositoryBranch { get; private set; } = null!;

        /// <summary>
        /// Repository commit is tag to fetch the code from. This cannot be set if repository branch or sha is set.
        /// </summary>
        [Output("repositoryCommit")]
        public Output<string?> RepositoryCommit { get; private set; } = null!;

        /// <summary>
        /// Repository connector is the reference to the connector used to fetch the code.
        /// </summary>
        [Output("repositoryConnector")]
        public Output<string> RepositoryConnector { get; private set; } = null!;

        /// <summary>
        /// Repository path is the path in which the code resides.
        /// </summary>
        [Output("repositoryPath")]
        public Output<string> RepositoryPath { get; private set; } = null!;

        /// <summary>
        /// Repository commit is commit SHA to fetch the code from. This cannot be set if repository branch or commit is set.
        /// </summary>
        [Output("repositorySha")]
        public Output<string?> RepositorySha { get; private set; } = null!;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("terraformVariableFiles")]
        public Output<ImmutableArray<Outputs.WorkspaceTerraformVariableFile>> TerraformVariableFiles { get; private set; } = null!;

        [Output("terraformVariables")]
        public Output<ImmutableArray<Outputs.WorkspaceTerraformVariable>> TerraformVariables { get; private set; } = null!;

        /// <summary>
        /// Variable sets to use.
        /// </summary>
        [Output("variableSets")]
        public Output<ImmutableArray<string>> VariableSets { get; private set; } = null!;


        /// <summary>
        /// Create a Workspace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Workspace(string name, WorkspaceArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/workspace:Workspace", name, args ?? new WorkspaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Workspace(string name, Input<string> id, WorkspaceState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/workspace:Workspace", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Workspace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Workspace Get(string name, Input<string> id, WorkspaceState? state = null, CustomResourceOptions? options = null)
        {
            return new Workspace(name, id, state, options);
        }
    }

    public sealed class WorkspaceArgs : global::Pulumi.ResourceArgs
    {
        [Input("connectors")]
        private InputList<Inputs.WorkspaceConnectorArgs>? _connectors;

        /// <summary>
        /// Provider connector configured on the workspace
        /// </summary>
        public InputList<Inputs.WorkspaceConnectorArgs> Connectors
        {
            get => _connectors ?? (_connectors = new InputList<Inputs.WorkspaceConnectorArgs>());
            set => _connectors = value;
        }

        /// <summary>
        /// Cost estimation enabled determines if cost estimation operations are performed.
        /// </summary>
        [Input("costEstimationEnabled", required: true)]
        public Input<bool> CostEstimationEnabled { get; set; } = null!;

        [Input("defaultPipelines")]
        private InputMap<string>? _defaultPipelines;

        /// <summary>
        /// Default pipelines associated with this workspace
        /// </summary>
        public InputMap<string> DefaultPipelines
        {
            get => _defaultPipelines ?? (_defaultPipelines = new InputMap<string>());
            set => _defaultPipelines = value;
        }

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("environmentVariables")]
        private InputList<Inputs.WorkspaceEnvironmentVariableArgs>? _environmentVariables;

        /// <summary>
        /// Environment variables configured on the workspace
        /// </summary>
        public InputList<Inputs.WorkspaceEnvironmentVariableArgs> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputList<Inputs.WorkspaceEnvironmentVariableArgs>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Provider connector is the reference to the connector for the infrastructure provider
        /// </summary>
        [Input("providerConnector")]
        public Input<string>? ProviderConnector { get; set; }

        [Input("provisionerType", required: true)]
        public Input<string> ProvisionerType { get; set; } = null!;

        [Input("provisionerVersion", required: true)]
        public Input<string> ProvisionerVersion { get; set; } = null!;

        /// <summary>
        /// Repository is the name of the repository to fetch the code from.
        /// </summary>
        [Input("repository", required: true)]
        public Input<string> Repository { get; set; } = null!;

        /// <summary>
        /// Repository branch is the name of the branch to fetch the code from. This cannot be set if repository commit or sha is set.
        /// </summary>
        [Input("repositoryBranch")]
        public Input<string>? RepositoryBranch { get; set; }

        /// <summary>
        /// Repository commit is tag to fetch the code from. This cannot be set if repository branch or sha is set.
        /// </summary>
        [Input("repositoryCommit")]
        public Input<string>? RepositoryCommit { get; set; }

        /// <summary>
        /// Repository connector is the reference to the connector used to fetch the code.
        /// </summary>
        [Input("repositoryConnector", required: true)]
        public Input<string> RepositoryConnector { get; set; } = null!;

        /// <summary>
        /// Repository path is the path in which the code resides.
        /// </summary>
        [Input("repositoryPath", required: true)]
        public Input<string> RepositoryPath { get; set; } = null!;

        /// <summary>
        /// Repository commit is commit SHA to fetch the code from. This cannot be set if repository branch or commit is set.
        /// </summary>
        [Input("repositorySha")]
        public Input<string>? RepositorySha { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("terraformVariableFiles")]
        private InputList<Inputs.WorkspaceTerraformVariableFileArgs>? _terraformVariableFiles;
        public InputList<Inputs.WorkspaceTerraformVariableFileArgs> TerraformVariableFiles
        {
            get => _terraformVariableFiles ?? (_terraformVariableFiles = new InputList<Inputs.WorkspaceTerraformVariableFileArgs>());
            set => _terraformVariableFiles = value;
        }

        [Input("terraformVariables")]
        private InputList<Inputs.WorkspaceTerraformVariableArgs>? _terraformVariables;
        public InputList<Inputs.WorkspaceTerraformVariableArgs> TerraformVariables
        {
            get => _terraformVariables ?? (_terraformVariables = new InputList<Inputs.WorkspaceTerraformVariableArgs>());
            set => _terraformVariables = value;
        }

        [Input("variableSets")]
        private InputList<string>? _variableSets;

        /// <summary>
        /// Variable sets to use.
        /// </summary>
        public InputList<string> VariableSets
        {
            get => _variableSets ?? (_variableSets = new InputList<string>());
            set => _variableSets = value;
        }

        public WorkspaceArgs()
        {
        }
        public static new WorkspaceArgs Empty => new WorkspaceArgs();
    }

    public sealed class WorkspaceState : global::Pulumi.ResourceArgs
    {
        [Input("connectors")]
        private InputList<Inputs.WorkspaceConnectorGetArgs>? _connectors;

        /// <summary>
        /// Provider connector configured on the workspace
        /// </summary>
        public InputList<Inputs.WorkspaceConnectorGetArgs> Connectors
        {
            get => _connectors ?? (_connectors = new InputList<Inputs.WorkspaceConnectorGetArgs>());
            set => _connectors = value;
        }

        /// <summary>
        /// Cost estimation enabled determines if cost estimation operations are performed.
        /// </summary>
        [Input("costEstimationEnabled")]
        public Input<bool>? CostEstimationEnabled { get; set; }

        [Input("defaultPipelines")]
        private InputMap<string>? _defaultPipelines;

        /// <summary>
        /// Default pipelines associated with this workspace
        /// </summary>
        public InputMap<string> DefaultPipelines
        {
            get => _defaultPipelines ?? (_defaultPipelines = new InputMap<string>());
            set => _defaultPipelines = value;
        }

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("environmentVariables")]
        private InputList<Inputs.WorkspaceEnvironmentVariableGetArgs>? _environmentVariables;

        /// <summary>
        /// Environment variables configured on the workspace
        /// </summary>
        public InputList<Inputs.WorkspaceEnvironmentVariableGetArgs> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputList<Inputs.WorkspaceEnvironmentVariableGetArgs>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Provider connector is the reference to the connector for the infrastructure provider
        /// </summary>
        [Input("providerConnector")]
        public Input<string>? ProviderConnector { get; set; }

        [Input("provisionerType")]
        public Input<string>? ProvisionerType { get; set; }

        [Input("provisionerVersion")]
        public Input<string>? ProvisionerVersion { get; set; }

        /// <summary>
        /// Repository is the name of the repository to fetch the code from.
        /// </summary>
        [Input("repository")]
        public Input<string>? Repository { get; set; }

        /// <summary>
        /// Repository branch is the name of the branch to fetch the code from. This cannot be set if repository commit or sha is set.
        /// </summary>
        [Input("repositoryBranch")]
        public Input<string>? RepositoryBranch { get; set; }

        /// <summary>
        /// Repository commit is tag to fetch the code from. This cannot be set if repository branch or sha is set.
        /// </summary>
        [Input("repositoryCommit")]
        public Input<string>? RepositoryCommit { get; set; }

        /// <summary>
        /// Repository connector is the reference to the connector used to fetch the code.
        /// </summary>
        [Input("repositoryConnector")]
        public Input<string>? RepositoryConnector { get; set; }

        /// <summary>
        /// Repository path is the path in which the code resides.
        /// </summary>
        [Input("repositoryPath")]
        public Input<string>? RepositoryPath { get; set; }

        /// <summary>
        /// Repository commit is commit SHA to fetch the code from. This cannot be set if repository branch or commit is set.
        /// </summary>
        [Input("repositorySha")]
        public Input<string>? RepositorySha { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("terraformVariableFiles")]
        private InputList<Inputs.WorkspaceTerraformVariableFileGetArgs>? _terraformVariableFiles;
        public InputList<Inputs.WorkspaceTerraformVariableFileGetArgs> TerraformVariableFiles
        {
            get => _terraformVariableFiles ?? (_terraformVariableFiles = new InputList<Inputs.WorkspaceTerraformVariableFileGetArgs>());
            set => _terraformVariableFiles = value;
        }

        [Input("terraformVariables")]
        private InputList<Inputs.WorkspaceTerraformVariableGetArgs>? _terraformVariables;
        public InputList<Inputs.WorkspaceTerraformVariableGetArgs> TerraformVariables
        {
            get => _terraformVariables ?? (_terraformVariables = new InputList<Inputs.WorkspaceTerraformVariableGetArgs>());
            set => _terraformVariables = value;
        }

        [Input("variableSets")]
        private InputList<string>? _variableSets;

        /// <summary>
        /// Variable sets to use.
        /// </summary>
        public InputList<string> VariableSets
        {
            get => _variableSets ?? (_variableSets = new InputList<string>());
            set => _variableSets = value;
        }

        public WorkspaceState()
        {
        }
        public static new WorkspaceState Empty => new WorkspaceState();
    }
}
