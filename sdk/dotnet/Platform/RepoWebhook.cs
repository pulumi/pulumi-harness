// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating a Harness Repo Webhook.
    /// </summary>
    [HarnessResourceType("harness:platform/repoWebhook:RepoWebhook")]
    public partial class RepoWebhook : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Timestamp when the webhook was created.
        /// </summary>
        [Output("created")]
        public Output<int> Created { get; private set; } = null!;

        /// <summary>
        /// ID of the user who created the webhook.
        /// </summary>
        [Output("createdBy")]
        public Output<int> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// Description of the webhook.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Webhook enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Created webhook has secret encoding.
        /// </summary>
        [Output("hasSecret")]
        public Output<bool> HasSecret { get; private set; } = null!;

        /// <summary>
        /// Identifier of the webhook.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Allow insecure connections for provided webhook URL.
        /// </summary>
        [Output("insecure")]
        public Output<bool> Insecure { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Identifier of the repository.
        /// </summary>
        [Output("repoIdentifier")]
        public Output<string> RepoIdentifier { get; private set; } = null!;

        /// <summary>
        /// Webhook secret which will be used to sign the webhook payload.
        /// </summary>
        [Output("secret")]
        public Output<string?> Secret { get; private set; } = null!;

        /// <summary>
        /// List of triggers of the webhook (keep empty for all triggers).
        /// </summary>
        [Output("triggers")]
        public Output<ImmutableArray<string>> Triggers { get; private set; } = null!;

        /// <summary>
        /// URL that's called by the webhook.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a RepoWebhook resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RepoWebhook(string name, RepoWebhookArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/repoWebhook:RepoWebhook", name, args ?? new RepoWebhookArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RepoWebhook(string name, Input<string> id, RepoWebhookState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/repoWebhook:RepoWebhook", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
                AdditionalSecretOutputs =
                {
                    "secret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RepoWebhook resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RepoWebhook Get(string name, Input<string> id, RepoWebhookState? state = null, CustomResourceOptions? options = null)
        {
            return new RepoWebhook(name, id, state, options);
        }
    }

    public sealed class RepoWebhookArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the webhook.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Webhook enabled.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Identifier of the webhook.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Allow insecure connections for provided webhook URL.
        /// </summary>
        [Input("insecure", required: true)]
        public Input<bool> Insecure { get; set; } = null!;

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Identifier of the repository.
        /// </summary>
        [Input("repoIdentifier", required: true)]
        public Input<string> RepoIdentifier { get; set; } = null!;

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// Webhook secret which will be used to sign the webhook payload.
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("triggers")]
        private InputList<string>? _triggers;

        /// <summary>
        /// List of triggers of the webhook (keep empty for all triggers).
        /// </summary>
        public InputList<string> Triggers
        {
            get => _triggers ?? (_triggers = new InputList<string>());
            set => _triggers = value;
        }

        /// <summary>
        /// URL that's called by the webhook.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public RepoWebhookArgs()
        {
        }
        public static new RepoWebhookArgs Empty => new RepoWebhookArgs();
    }

    public sealed class RepoWebhookState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Timestamp when the webhook was created.
        /// </summary>
        [Input("created")]
        public Input<int>? Created { get; set; }

        /// <summary>
        /// ID of the user who created the webhook.
        /// </summary>
        [Input("createdBy")]
        public Input<int>? CreatedBy { get; set; }

        /// <summary>
        /// Description of the webhook.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Webhook enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Created webhook has secret encoding.
        /// </summary>
        [Input("hasSecret")]
        public Input<bool>? HasSecret { get; set; }

        /// <summary>
        /// Identifier of the webhook.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Allow insecure connections for provided webhook URL.
        /// </summary>
        [Input("insecure")]
        public Input<bool>? Insecure { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Identifier of the repository.
        /// </summary>
        [Input("repoIdentifier")]
        public Input<string>? RepoIdentifier { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// Webhook secret which will be used to sign the webhook payload.
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("triggers")]
        private InputList<string>? _triggers;

        /// <summary>
        /// List of triggers of the webhook (keep empty for all triggers).
        /// </summary>
        public InputList<string> Triggers
        {
            get => _triggers ?? (_triggers = new InputList<string>());
            set => _triggers = value;
        }

        /// <summary>
        /// URL that's called by the webhook.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public RepoWebhookState()
        {
        }
        public static new RepoWebhookState Empty => new RepoWebhookState();
    }
}
