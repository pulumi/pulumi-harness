// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating a Harness Default Notification Template Set
    /// </summary>
    [HarnessResourceType("harness:platform/defaultNotificationTemplateSet:DefaultNotificationTemplateSet")]
    public partial class DefaultNotificationTemplateSet : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Timestamp when the default notification template set was created.
        /// </summary>
        [Output("created")]
        public Output<int> Created { get; private set; } = null!;

        /// <summary>
        /// Description for Default Notification Template Set
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Set of event-template configurations
        /// </summary>
        [Output("eventTemplateConfigurationSets")]
        public Output<ImmutableArray<Outputs.DefaultNotificationTemplateSetEventTemplateConfigurationSet>> EventTemplateConfigurationSets { get; private set; } = null!;

        /// <summary>
        /// Identifier of Default Notification Template Set
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the default notification template set was last modified.
        /// </summary>
        [Output("lastModified")]
        public Output<int> LastModified { get; private set; } = null!;

        /// <summary>
        /// Name of Default Notification Template Set
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Type of channel (e.g. SLACK, EMAIL, etc.)
        /// </summary>
        [Output("notificationChannelType")]
        public Output<string> NotificationChannelType { get; private set; } = null!;

        /// <summary>
        /// Type of the entity (e.g. PIPELINE, SERVICE, etc.)
        /// </summary>
        [Output("notificationEntity")]
        public Output<string> NotificationEntity { get; private set; } = null!;

        /// <summary>
        /// Key-value tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a DefaultNotificationTemplateSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DefaultNotificationTemplateSet(string name, DefaultNotificationTemplateSetArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/defaultNotificationTemplateSet:DefaultNotificationTemplateSet", name, args ?? new DefaultNotificationTemplateSetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DefaultNotificationTemplateSet(string name, Input<string> id, DefaultNotificationTemplateSetState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/defaultNotificationTemplateSet:DefaultNotificationTemplateSet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DefaultNotificationTemplateSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DefaultNotificationTemplateSet Get(string name, Input<string> id, DefaultNotificationTemplateSetState? state = null, CustomResourceOptions? options = null)
        {
            return new DefaultNotificationTemplateSet(name, id, state, options);
        }
    }

    public sealed class DefaultNotificationTemplateSetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description for Default Notification Template Set
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("eventTemplateConfigurationSets", required: true)]
        private InputList<Inputs.DefaultNotificationTemplateSetEventTemplateConfigurationSetArgs>? _eventTemplateConfigurationSets;

        /// <summary>
        /// Set of event-template configurations
        /// </summary>
        public InputList<Inputs.DefaultNotificationTemplateSetEventTemplateConfigurationSetArgs> EventTemplateConfigurationSets
        {
            get => _eventTemplateConfigurationSets ?? (_eventTemplateConfigurationSets = new InputList<Inputs.DefaultNotificationTemplateSetEventTemplateConfigurationSetArgs>());
            set => _eventTemplateConfigurationSets = value;
        }

        /// <summary>
        /// Identifier of Default Notification Template Set
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Name of Default Notification Template Set
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Type of channel (e.g. SLACK, EMAIL, etc.)
        /// </summary>
        [Input("notificationChannelType", required: true)]
        public Input<string> NotificationChannelType { get; set; } = null!;

        /// <summary>
        /// Type of the entity (e.g. PIPELINE, SERVICE, etc.)
        /// </summary>
        [Input("notificationEntity", required: true)]
        public Input<string> NotificationEntity { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DefaultNotificationTemplateSetArgs()
        {
        }
        public static new DefaultNotificationTemplateSetArgs Empty => new DefaultNotificationTemplateSetArgs();
    }

    public sealed class DefaultNotificationTemplateSetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Timestamp when the default notification template set was created.
        /// </summary>
        [Input("created")]
        public Input<int>? Created { get; set; }

        /// <summary>
        /// Description for Default Notification Template Set
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("eventTemplateConfigurationSets")]
        private InputList<Inputs.DefaultNotificationTemplateSetEventTemplateConfigurationSetGetArgs>? _eventTemplateConfigurationSets;

        /// <summary>
        /// Set of event-template configurations
        /// </summary>
        public InputList<Inputs.DefaultNotificationTemplateSetEventTemplateConfigurationSetGetArgs> EventTemplateConfigurationSets
        {
            get => _eventTemplateConfigurationSets ?? (_eventTemplateConfigurationSets = new InputList<Inputs.DefaultNotificationTemplateSetEventTemplateConfigurationSetGetArgs>());
            set => _eventTemplateConfigurationSets = value;
        }

        /// <summary>
        /// Identifier of Default Notification Template Set
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Timestamp when the default notification template set was last modified.
        /// </summary>
        [Input("lastModified")]
        public Input<int>? LastModified { get; set; }

        /// <summary>
        /// Name of Default Notification Template Set
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Type of channel (e.g. SLACK, EMAIL, etc.)
        /// </summary>
        [Input("notificationChannelType")]
        public Input<string>? NotificationChannelType { get; set; }

        /// <summary>
        /// Type of the entity (e.g. PIPELINE, SERVICE, etc.)
        /// </summary>
        [Input("notificationEntity")]
        public Input<string>? NotificationEntity { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DefaultNotificationTemplateSetState()
        {
        }
        public static new DefaultNotificationTemplateSetState Empty => new DefaultNotificationTemplateSetState();
    }
}
