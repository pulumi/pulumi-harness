// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetGitopsRepository
    {
        /// <summary>
        /// Data source for fetching a Harness GitOps Repository.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetGitopsRepository.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         AccountId = "account_id",
        ///         ProjectId = "project_id",
        ///         OrgId = "org_id",
        ///         AgentId = "agent_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetGitopsRepositoryResult> InvokeAsync(GetGitopsRepositoryArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGitopsRepositoryResult>("harness:platform/getGitopsRepository:getGitopsRepository", args ?? new GetGitopsRepositoryArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for fetching a Harness GitOps Repository.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetGitopsRepository.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         AccountId = "account_id",
        ///         ProjectId = "project_id",
        ///         OrgId = "org_id",
        ///         AgentId = "agent_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGitopsRepositoryResult> Invoke(GetGitopsRepositoryInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGitopsRepositoryResult>("harness:platform/getGitopsRepository:getGitopsRepository", args ?? new GetGitopsRepositoryInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for fetching a Harness GitOps Repository.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetGitopsRepository.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         AccountId = "account_id",
        ///         ProjectId = "project_id",
        ///         OrgId = "org_id",
        ///         AgentId = "agent_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGitopsRepositoryResult> Invoke(GetGitopsRepositoryInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGitopsRepositoryResult>("harness:platform/getGitopsRepository:getGitopsRepository", args ?? new GetGitopsRepositoryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGitopsRepositoryArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier of the GitOps repository.
        /// </summary>
        [Input("accountId")]
        public string? AccountId { get; set; }

        /// <summary>
        /// Agent identifier of the GitOps repository.
        /// </summary>
        [Input("agentId", required: true)]
        public string AgentId { get; set; } = null!;

        /// <summary>
        /// Identifier of the GitOps repository.
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        /// <summary>
        /// Organization identifier of the GitOps repository.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the GitOps repository.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetGitopsRepositoryArgs()
        {
        }
        public static new GetGitopsRepositoryArgs Empty => new GetGitopsRepositoryArgs();
    }

    public sealed class GetGitopsRepositoryInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier of the GitOps repository.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Agent identifier of the GitOps repository.
        /// </summary>
        [Input("agentId", required: true)]
        public Input<string> AgentId { get; set; } = null!;

        /// <summary>
        /// Identifier of the GitOps repository.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Organization identifier of the GitOps repository.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the GitOps repository.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetGitopsRepositoryInvokeArgs()
        {
        }
        public static new GetGitopsRepositoryInvokeArgs Empty => new GetGitopsRepositoryInvokeArgs();
    }


    [OutputType]
    public sealed class GetGitopsRepositoryResult
    {
        /// <summary>
        /// Account identifier of the GitOps repository.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Agent identifier of the GitOps repository.
        /// </summary>
        public readonly string AgentId;
        /// <summary>
        /// Indicates if helm-oci support must be enabled for this repo.
        /// </summary>
        public readonly bool EnableOci;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identifier of the GitOps repository.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// Organization identifier of the GitOps repository.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Project identifier of the GitOps repository.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Repo details holding application configurations.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGitopsRepositoryRepoResult> Repos;

        [OutputConstructor]
        private GetGitopsRepositoryResult(
            string accountId,

            string agentId,

            bool enableOci,

            string id,

            string identifier,

            string? orgId,

            string? projectId,

            ImmutableArray<Outputs.GetGitopsRepositoryRepoResult> repos)
        {
            AccountId = accountId;
            AgentId = agentId;
            EnableOci = enableOci;
            Id = id;
            Identifier = identifier;
            OrgId = orgId;
            ProjectId = projectId;
            Repos = repos;
        }
    }
}
