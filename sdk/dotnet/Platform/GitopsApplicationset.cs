// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for managing a Harness Gitops Applicationset. Please note this resource is in an alpha/experimental state and is subject to change.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testFixed = new Harness.Platform.GitopsApplicationset("test_fixed", new()
    ///     {
    ///         OrgId = "default",
    ///         ProjectId = "projectId",
    ///         AgentId = "account.agentuseast1",
    ///         Upsert = true,
    ///         Applicationset = new Harness.Platform.Inputs.GitopsApplicationsetApplicationsetArgs
    ///         {
    ///             Metadata = new Harness.Platform.Inputs.GitopsApplicationsetApplicationsetMetadataArgs
    ///             {
    ///                 Name = "tf-appset",
    ///                 Namespace = "argocd",
    ///             },
    ///             Spec = new Harness.Platform.Inputs.GitopsApplicationsetApplicationsetSpecArgs
    ///             {
    ///                 GoTemplate = true,
    ///                 GoTemplateOptions = new[]
    ///                 {
    ///                     "missingkey=error",
    ///                 },
    ///                 Generators = new[]
    ///                 {
    ///                     new Harness.Platform.Inputs.GitopsApplicationsetApplicationsetSpecGeneratorArgs
    ///                     {
    ///                         Clusters = new[]
    ///                         {
    ///                             new Harness.Platform.Inputs.GitopsApplicationsetApplicationsetSpecGeneratorClusterArgs
    ///                             {
    ///                                 Enabled = true,
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 Template = new Harness.Platform.Inputs.GitopsApplicationsetApplicationsetSpecTemplateArgs
    ///                 {
    ///                     Metadata = new Harness.Platform.Inputs.GitopsApplicationsetApplicationsetSpecTemplateMetadataArgs
    ///                     {
    ///                         Name = "{{.name}}-guestbook",
    ///                         Labels = 
    ///                         {
    ///                             { "env", "dev" },
    ///                             { "harness.io/serviceRef", "svc1" },
    ///                         },
    ///                     },
    ///                     Spec = new Harness.Platform.Inputs.GitopsApplicationsetApplicationsetSpecTemplateSpecArgs
    ///                     {
    ///                         Project = "default",
    ///                         Sources = new[]
    ///                         {
    ///                             new Harness.Platform.Inputs.GitopsApplicationsetApplicationsetSpecTemplateSpecSourceArgs
    ///                             {
    ///                                 RepoUrl = "https://github.com/argoproj/argocd-example-apps.git",
    ///                                 Path = "helm-guestbook",
    ///                                 TargetRevision = "HEAD",
    ///                             },
    ///                         },
    ///                         Destination = new Harness.Platform.Inputs.GitopsApplicationsetApplicationsetSpecTemplateSpecDestinationArgs
    ///                         {
    ///                             Server = "{{.url}}",
    ///                             Namespace = "app-ns-{{.name}}",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/gitopsApplicationset:GitopsApplicationset")]
    public partial class GitopsApplicationset : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Agent identifier of the GitOps applicationset.
        /// </summary>
        [Output("agentId")]
        public Output<string> AgentId { get; private set; } = null!;

        /// <summary>
        /// Definition of the GitOps applicationset resource.
        /// </summary>
        [Output("applicationset")]
        public Output<Outputs.GitopsApplicationsetApplicationset> Applicationset { get; private set; } = null!;

        /// <summary>
        /// Identifier of the GitOps applicationset. This is a unique identifier for the applicationset generated automatically.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Organization identifier of the GitOps applicationset.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// Project identifier of the GitOps applicationset.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Indicates if the GitOps application should be updated if existing and inserted if not.
        /// </summary>
        [Output("upsert")]
        public Output<bool?> Upsert { get; private set; } = null!;


        /// <summary>
        /// Create a GitopsApplicationset resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GitopsApplicationset(string name, GitopsApplicationsetArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/gitopsApplicationset:GitopsApplicationset", name, args ?? new GitopsApplicationsetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GitopsApplicationset(string name, Input<string> id, GitopsApplicationsetState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/gitopsApplicationset:GitopsApplicationset", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GitopsApplicationset resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GitopsApplicationset Get(string name, Input<string> id, GitopsApplicationsetState? state = null, CustomResourceOptions? options = null)
        {
            return new GitopsApplicationset(name, id, state, options);
        }
    }

    public sealed class GitopsApplicationsetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Agent identifier of the GitOps applicationset.
        /// </summary>
        [Input("agentId", required: true)]
        public Input<string> AgentId { get; set; } = null!;

        /// <summary>
        /// Definition of the GitOps applicationset resource.
        /// </summary>
        [Input("applicationset", required: true)]
        public Input<Inputs.GitopsApplicationsetApplicationsetArgs> Applicationset { get; set; } = null!;

        /// <summary>
        /// Organization identifier of the GitOps applicationset.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// Project identifier of the GitOps applicationset.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Indicates if the GitOps application should be updated if existing and inserted if not.
        /// </summary>
        [Input("upsert")]
        public Input<bool>? Upsert { get; set; }

        public GitopsApplicationsetArgs()
        {
        }
        public static new GitopsApplicationsetArgs Empty => new GitopsApplicationsetArgs();
    }

    public sealed class GitopsApplicationsetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Agent identifier of the GitOps applicationset.
        /// </summary>
        [Input("agentId")]
        public Input<string>? AgentId { get; set; }

        /// <summary>
        /// Definition of the GitOps applicationset resource.
        /// </summary>
        [Input("applicationset")]
        public Input<Inputs.GitopsApplicationsetApplicationsetGetArgs>? Applicationset { get; set; }

        /// <summary>
        /// Identifier of the GitOps applicationset. This is a unique identifier for the applicationset generated automatically.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Organization identifier of the GitOps applicationset.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the GitOps applicationset.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Indicates if the GitOps application should be updated if existing and inserted if not.
        /// </summary>
        [Input("upsert")]
        public Input<bool>? Upsert { get; set; }

        public GitopsApplicationsetState()
        {
        }
        public static new GitopsApplicationsetState Empty => new GitopsApplicationsetState();
    }
}
