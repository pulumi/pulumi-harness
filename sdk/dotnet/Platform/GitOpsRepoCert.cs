// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for managing a Harness Gitops Repository Certificate. You can only create 1 instance per agent which has all the certificates of this resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Harness.Platform.GitOpsRepoCert("example", new()
    ///     {
    ///         Requests = new[]
    ///         {
    ///             new Harness.Platform.Inputs.GitOpsRepoCertRequestArgs
    ///             {
    ///                 Certificates = new[]
    ///                 {
    ///                     new Harness.Platform.Inputs.GitOpsRepoCertRequestCertificateArgs
    ///                     {
    ///                         Metadatas = new[]
    ///                         {
    ///                             null,
    ///                         },
    ///                         Items = new[]
    ///                         {
    ///                             new Harness.Platform.Inputs.GitOpsRepoCertRequestCertificateItemArgs
    ///                             {
    ///                                 ServerName = "github.com",
    ///                                 CertType = "ssh",
    ///                                 CertSubType = "ecdsa-sha2-nistp256",
    ///                                 CertData = "QUFBQUUyVmpaSE5oTFhOb1lUSXRibWx6ZEhBeU5UWUFBQUFJYm1semRIQXlOVFlBQUFCQkJFbUtTRU5qUUVlek9teGtaTXk3b3BLZ3dGQjlua3Q1WVJyWU1qTnVHNU44N3VSZ2c2Q0xyYm81d0FkVC95NnYwbUtWMFUydzBXWjJZQi8rK1Rwb2NrZz0=",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 Upsert = true,
    ///             },
    ///         },
    ///         AccountId = "account_id",
    ///         AgentId = "agent_id",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Import an Account level Gitops Repository Certificate
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/gitOpsRepoCert:GitOpsRepoCert example &lt;repocert_id&gt;
    /// ```
    /// 
    /// Import an Org level Gitops Repository Certificate
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/gitOpsRepoCert:GitOpsRepoCert example &lt;organization_id&gt;/&lt;repocert_id&gt;
    /// ```
    /// 
    /// Import a Project level Gitops Repository Certificate
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/gitOpsRepoCert:GitOpsRepoCert example &lt;organization_id&gt;/&lt;project_id&gt;/&lt;repocert_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/gitOpsRepoCert:GitOpsRepoCert")]
    public partial class GitOpsRepoCert : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account identifier of the GitOps repository certificate.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Agent identifier of the GitOps repository certificate.
        /// </summary>
        [Output("agentId")]
        public Output<string> AgentId { get; private set; } = null!;

        /// <summary>
        /// Organization identifier of the GitOps repository certificate.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Project identifier of the GitOps repository certificate.
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Repository Certificate create/update request.
        /// </summary>
        [Output("requests")]
        public Output<ImmutableArray<Outputs.GitOpsRepoCertRequest>> Requests { get; private set; } = null!;


        /// <summary>
        /// Create a GitOpsRepoCert resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GitOpsRepoCert(string name, GitOpsRepoCertArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/gitOpsRepoCert:GitOpsRepoCert", name, args ?? new GitOpsRepoCertArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GitOpsRepoCert(string name, Input<string> id, GitOpsRepoCertState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/gitOpsRepoCert:GitOpsRepoCert", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GitOpsRepoCert resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GitOpsRepoCert Get(string name, Input<string> id, GitOpsRepoCertState? state = null, CustomResourceOptions? options = null)
        {
            return new GitOpsRepoCert(name, id, state, options);
        }
    }

    public sealed class GitOpsRepoCertArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account identifier of the GitOps repository certificate.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Agent identifier of the GitOps repository certificate.
        /// </summary>
        [Input("agentId", required: true)]
        public Input<string> AgentId { get; set; } = null!;

        /// <summary>
        /// Organization identifier of the GitOps repository certificate.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the GitOps repository certificate.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("requests", required: true)]
        private InputList<Inputs.GitOpsRepoCertRequestArgs>? _requests;

        /// <summary>
        /// Repository Certificate create/update request.
        /// </summary>
        public InputList<Inputs.GitOpsRepoCertRequestArgs> Requests
        {
            get => _requests ?? (_requests = new InputList<Inputs.GitOpsRepoCertRequestArgs>());
            set => _requests = value;
        }

        public GitOpsRepoCertArgs()
        {
        }
        public static new GitOpsRepoCertArgs Empty => new GitOpsRepoCertArgs();
    }

    public sealed class GitOpsRepoCertState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account identifier of the GitOps repository certificate.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Agent identifier of the GitOps repository certificate.
        /// </summary>
        [Input("agentId")]
        public Input<string>? AgentId { get; set; }

        /// <summary>
        /// Organization identifier of the GitOps repository certificate.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the GitOps repository certificate.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("requests")]
        private InputList<Inputs.GitOpsRepoCertRequestGetArgs>? _requests;

        /// <summary>
        /// Repository Certificate create/update request.
        /// </summary>
        public InputList<Inputs.GitOpsRepoCertRequestGetArgs> Requests
        {
            get => _requests ?? (_requests = new InputList<Inputs.GitOpsRepoCertRequestGetArgs>());
            set => _requests = value;
        }

        public GitOpsRepoCertState()
        {
        }
        public static new GitOpsRepoCertState Empty => new GitOpsRepoCertState();
    }
}
