// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Harness.Platform.InfraModule("example", new()
    ///     {
    ///         Description = "example",
    ///         Name = "name",
    ///         System = "provider",
    ///         Repository = "https://github.com/org/repo",
    ///         RepositoryBranch = "main",
    ///         RepositoryPath = "tf/aws/basic",
    ///         RepositoryConnector = test.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/infraModule:InfraModule example &lt;module_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/infraModule:InfraModule")]
    public partial class InfraModule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Timestamp when the module was created.
        /// </summary>
        [Output("created")]
        public Output<int> Created { get; private set; } = null!;

        /// <summary>
        /// Description of the module.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Name of the module.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// For account connectors, the repository where the module can be found
        /// </summary>
        [Output("repository")]
        public Output<string?> Repository { get; private set; } = null!;

        /// <summary>
        /// Name of the branch to fetch the code from. This cannot be set if repository commit is set.
        /// </summary>
        [Output("repositoryBranch")]
        public Output<string?> RepositoryBranch { get; private set; } = null!;

        /// <summary>
        /// Tag to fetch the code from. This cannot be set if repository branch is set.
        /// </summary>
        [Output("repositoryCommit")]
        public Output<string?> RepositoryCommit { get; private set; } = null!;

        /// <summary>
        /// Reference to the connector to be used to fetch the code.
        /// </summary>
        [Output("repositoryConnector")]
        public Output<string?> RepositoryConnector { get; private set; } = null!;

        /// <summary>
        /// Path to the module within the repository.
        /// </summary>
        [Output("repositoryPath")]
        public Output<string?> RepositoryPath { get; private set; } = null!;

        /// <summary>
        /// URL of the repository where the module is stored.
        /// </summary>
        [Output("repositoryUrl")]
        public Output<string> RepositoryUrl { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the module was last synced.
        /// </summary>
        [Output("synced")]
        public Output<int> Synced { get; private set; } = null!;

        /// <summary>
        /// Provider of the module.
        /// </summary>
        [Output("system")]
        public Output<string> System { get; private set; } = null!;

        /// <summary>
        /// Git tags associated with the module.
        /// </summary>
        [Output("tags")]
        public Output<string> Tags { get; private set; } = null!;

        /// <summary>
        /// List of versions of the module.
        /// </summary>
        [Output("versions")]
        public Output<ImmutableArray<string>> Versions { get; private set; } = null!;


        /// <summary>
        /// Create a InfraModule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InfraModule(string name, InfraModuleArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/infraModule:InfraModule", name, args ?? new InfraModuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InfraModule(string name, Input<string> id, InfraModuleState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/infraModule:InfraModule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InfraModule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InfraModule Get(string name, Input<string> id, InfraModuleState? state = null, CustomResourceOptions? options = null)
        {
            return new InfraModule(name, id, state, options);
        }
    }

    public sealed class InfraModuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Timestamp when the module was created.
        /// </summary>
        [Input("created")]
        public Input<int>? Created { get; set; }

        /// <summary>
        /// Description of the module.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the module.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// For account connectors, the repository where the module can be found
        /// </summary>
        [Input("repository")]
        public Input<string>? Repository { get; set; }

        /// <summary>
        /// Name of the branch to fetch the code from. This cannot be set if repository commit is set.
        /// </summary>
        [Input("repositoryBranch")]
        public Input<string>? RepositoryBranch { get; set; }

        /// <summary>
        /// Tag to fetch the code from. This cannot be set if repository branch is set.
        /// </summary>
        [Input("repositoryCommit")]
        public Input<string>? RepositoryCommit { get; set; }

        /// <summary>
        /// Reference to the connector to be used to fetch the code.
        /// </summary>
        [Input("repositoryConnector")]
        public Input<string>? RepositoryConnector { get; set; }

        /// <summary>
        /// Path to the module within the repository.
        /// </summary>
        [Input("repositoryPath")]
        public Input<string>? RepositoryPath { get; set; }

        /// <summary>
        /// URL of the repository where the module is stored.
        /// </summary>
        [Input("repositoryUrl")]
        public Input<string>? RepositoryUrl { get; set; }

        /// <summary>
        /// Timestamp when the module was last synced.
        /// </summary>
        [Input("synced")]
        public Input<int>? Synced { get; set; }

        /// <summary>
        /// Provider of the module.
        /// </summary>
        [Input("system", required: true)]
        public Input<string> System { get; set; } = null!;

        /// <summary>
        /// Git tags associated with the module.
        /// </summary>
        [Input("tags")]
        public Input<string>? Tags { get; set; }

        [Input("versions")]
        private InputList<string>? _versions;

        /// <summary>
        /// List of versions of the module.
        /// </summary>
        public InputList<string> Versions
        {
            get => _versions ?? (_versions = new InputList<string>());
            set => _versions = value;
        }

        public InfraModuleArgs()
        {
        }
        public static new InfraModuleArgs Empty => new InfraModuleArgs();
    }

    public sealed class InfraModuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Timestamp when the module was created.
        /// </summary>
        [Input("created")]
        public Input<int>? Created { get; set; }

        /// <summary>
        /// Description of the module.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the module.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// For account connectors, the repository where the module can be found
        /// </summary>
        [Input("repository")]
        public Input<string>? Repository { get; set; }

        /// <summary>
        /// Name of the branch to fetch the code from. This cannot be set if repository commit is set.
        /// </summary>
        [Input("repositoryBranch")]
        public Input<string>? RepositoryBranch { get; set; }

        /// <summary>
        /// Tag to fetch the code from. This cannot be set if repository branch is set.
        /// </summary>
        [Input("repositoryCommit")]
        public Input<string>? RepositoryCommit { get; set; }

        /// <summary>
        /// Reference to the connector to be used to fetch the code.
        /// </summary>
        [Input("repositoryConnector")]
        public Input<string>? RepositoryConnector { get; set; }

        /// <summary>
        /// Path to the module within the repository.
        /// </summary>
        [Input("repositoryPath")]
        public Input<string>? RepositoryPath { get; set; }

        /// <summary>
        /// URL of the repository where the module is stored.
        /// </summary>
        [Input("repositoryUrl")]
        public Input<string>? RepositoryUrl { get; set; }

        /// <summary>
        /// Timestamp when the module was last synced.
        /// </summary>
        [Input("synced")]
        public Input<int>? Synced { get; set; }

        /// <summary>
        /// Provider of the module.
        /// </summary>
        [Input("system")]
        public Input<string>? System { get; set; }

        /// <summary>
        /// Git tags associated with the module.
        /// </summary>
        [Input("tags")]
        public Input<string>? Tags { get; set; }

        [Input("versions")]
        private InputList<string>? _versions;

        /// <summary>
        /// List of versions of the module.
        /// </summary>
        public InputList<string> Versions
        {
            get => _versions ?? (_versions = new InputList<string>());
            set => _versions = value;
        }

        public InfraModuleState()
        {
        }
        public static new InfraModuleState Empty => new InfraModuleState();
    }
}
