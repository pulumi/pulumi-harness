// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetManualFreeze
    {
        /// <summary>
        /// DataSource for deployment freeze in harness.
        /// </summary>
        public static Task<GetManualFreezeResult> InvokeAsync(GetManualFreezeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManualFreezeResult>("harness:platform/getManualFreeze:getManualFreeze", args ?? new GetManualFreezeArgs(), options.WithDefaults());

        /// <summary>
        /// DataSource for deployment freeze in harness.
        /// </summary>
        public static Output<GetManualFreezeResult> Invoke(GetManualFreezeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManualFreezeResult>("harness:platform/getManualFreeze:getManualFreeze", args ?? new GetManualFreezeInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// DataSource for deployment freeze in harness.
        /// </summary>
        public static Output<GetManualFreezeResult> Invoke(GetManualFreezeInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetManualFreezeResult>("harness:platform/getManualFreeze:getManualFreeze", args ?? new GetManualFreezeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManualFreezeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account Identifier of the freeze
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Identifier of the freeze
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        /// <summary>
        /// Organization identifier of the freeze
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the freeze
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetManualFreezeArgs()
        {
        }
        public static new GetManualFreezeArgs Empty => new GetManualFreezeArgs();
    }

    public sealed class GetManualFreezeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account Identifier of the freeze
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Identifier of the freeze
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Organization identifier of the freeze
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the freeze
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetManualFreezeInvokeArgs()
        {
        }
        public static new GetManualFreezeInvokeArgs Empty => new GetManualFreezeInvokeArgs();
    }


    [OutputType]
    public sealed class GetManualFreezeResult
    {
        /// <summary>
        /// Account Identifier of the freeze
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Current or upcoming windows
        /// </summary>
        public readonly ImmutableArray<Outputs.GetManualFreezeCurrentOrUpcomingWindowResult> CurrentOrUpcomingWindows;
        /// <summary>
        /// Description of the freeze
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Freeze windows in the freeze response
        /// </summary>
        public readonly ImmutableArray<Outputs.GetManualFreezeFreezeWindowResult> FreezeWindows;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identifier of the freeze
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// Name of the freeze
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Organization identifier of the freeze
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Project identifier of the freeze
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Scope of the freeze
        /// </summary>
        public readonly string Scope;
        /// <summary>
        /// Status of the freeze
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Tags associated with the freeze
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Type of freeze
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Yaml of the freeze
        /// </summary>
        public readonly string Yaml;

        [OutputConstructor]
        private GetManualFreezeResult(
            string accountId,

            ImmutableArray<Outputs.GetManualFreezeCurrentOrUpcomingWindowResult> currentOrUpcomingWindows,

            string description,

            ImmutableArray<Outputs.GetManualFreezeFreezeWindowResult> freezeWindows,

            string id,

            string identifier,

            string name,

            string? orgId,

            string? projectId,

            string scope,

            string status,

            ImmutableArray<string> tags,

            string type,

            string yaml)
        {
            AccountId = accountId;
            CurrentOrUpcomingWindows = currentOrUpcomingWindows;
            Description = description;
            FreezeWindows = freezeWindows;
            Id = id;
            Identifier = identifier;
            Name = name;
            OrgId = orgId;
            ProjectId = projectId;
            Scope = scope;
            Status = status;
            Tags = tags;
            Type = type;
            Yaml = yaml;
        }
    }
}
