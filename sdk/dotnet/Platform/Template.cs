// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating a Template. Description field is deprecated
    /// 
    /// ## Import
    /// 
    /// Import account level template
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/template:Template example &lt;template_id&gt;
    /// ```
    /// 
    /// Import org level template
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/template:Template example &lt;ord_id&gt;/&lt;template_id&gt;
    /// ```
    /// 
    /// Import project level template
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/template:Template example &lt;org_id&gt;/&lt;project_id&gt;/&lt;template_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/template:Template")]
    public partial class Template : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specify comment with respect to changes.
        /// </summary>
        [Output("comments")]
        public Output<string?> Comments { get; private set; } = null!;

        /// <summary>
        /// Description of the entity. Description field is deprecated
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// When set to true, enables force deletion of the template. It will delete the Harness entity even if your pipelines or other entities reference it.
        /// </summary>
        [Output("forceDelete")]
        public Output<bool> ForceDelete { get; private set; } = null!;

        /// <summary>
        /// Contains parameters related to creating an Entity for Git Experience.
        /// </summary>
        [Output("gitDetails")]
        public Output<Outputs.TemplateGitDetails> GitDetails { get; private set; } = null!;

        /// <summary>
        /// Contains Git Information for importing entities from Git
        /// </summary>
        [Output("gitImportDetails")]
        public Output<Outputs.TemplateGitImportDetails?> GitImportDetails { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the resource
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Flag to set if importing from Git
        /// </summary>
        [Output("importFromGit")]
        public Output<bool?> ImportFromGit { get; private set; } = null!;

        /// <summary>
        /// True if given version for template to be set as stable.
        /// </summary>
        [Output("isStable")]
        public Output<bool> IsStable { get; private set; } = null!;

        /// <summary>
        /// Name of the Variable
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Organization Identifier for the Entity
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Project Identifier for the Entity
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Contains parameters for importing template.
        /// </summary>
        [Output("templateImportRequest")]
        public Output<Outputs.TemplateTemplateImportRequest?> TemplateImportRequest { get; private set; } = null!;

        /// <summary>
        /// Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
        /// </summary>
        [Output("templateYaml")]
        public Output<string> TemplateYaml { get; private set; } = null!;

        /// <summary>
        /// Version Label for Template.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Template resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Template(string name, TemplateArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/template:Template", name, args ?? new TemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Template(string name, Input<string> id, TemplateState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/template:Template", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Template resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Template Get(string name, Input<string> id, TemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new Template(name, id, state, options);
        }
    }

    public sealed class TemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specify comment with respect to changes.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        /// <summary>
        /// Description of the entity. Description field is deprecated
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// When set to true, enables force deletion of the template. It will delete the Harness entity even if your pipelines or other entities reference it.
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        /// <summary>
        /// Contains parameters related to creating an Entity for Git Experience.
        /// </summary>
        [Input("gitDetails")]
        public Input<Inputs.TemplateGitDetailsArgs>? GitDetails { get; set; }

        /// <summary>
        /// Contains Git Information for importing entities from Git
        /// </summary>
        [Input("gitImportDetails")]
        public Input<Inputs.TemplateGitImportDetailsArgs>? GitImportDetails { get; set; }

        /// <summary>
        /// Unique identifier of the resource
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Flag to set if importing from Git
        /// </summary>
        [Input("importFromGit")]
        public Input<bool>? ImportFromGit { get; set; }

        /// <summary>
        /// True if given version for template to be set as stable.
        /// </summary>
        [Input("isStable")]
        public Input<bool>? IsStable { get; set; }

        /// <summary>
        /// Name of the Variable
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Organization Identifier for the Entity
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project Identifier for the Entity
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Contains parameters for importing template.
        /// </summary>
        [Input("templateImportRequest")]
        public Input<Inputs.TemplateTemplateImportRequestArgs>? TemplateImportRequest { get; set; }

        /// <summary>
        /// Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
        /// </summary>
        [Input("templateYaml")]
        public Input<string>? TemplateYaml { get; set; }

        /// <summary>
        /// Version Label for Template.
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public TemplateArgs()
        {
        }
        public static new TemplateArgs Empty => new TemplateArgs();
    }

    public sealed class TemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specify comment with respect to changes.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        /// <summary>
        /// Description of the entity. Description field is deprecated
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// When set to true, enables force deletion of the template. It will delete the Harness entity even if your pipelines or other entities reference it.
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        /// <summary>
        /// Contains parameters related to creating an Entity for Git Experience.
        /// </summary>
        [Input("gitDetails")]
        public Input<Inputs.TemplateGitDetailsGetArgs>? GitDetails { get; set; }

        /// <summary>
        /// Contains Git Information for importing entities from Git
        /// </summary>
        [Input("gitImportDetails")]
        public Input<Inputs.TemplateGitImportDetailsGetArgs>? GitImportDetails { get; set; }

        /// <summary>
        /// Unique identifier of the resource
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Flag to set if importing from Git
        /// </summary>
        [Input("importFromGit")]
        public Input<bool>? ImportFromGit { get; set; }

        /// <summary>
        /// True if given version for template to be set as stable.
        /// </summary>
        [Input("isStable")]
        public Input<bool>? IsStable { get; set; }

        /// <summary>
        /// Name of the Variable
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Organization Identifier for the Entity
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project Identifier for the Entity
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Contains parameters for importing template.
        /// </summary>
        [Input("templateImportRequest")]
        public Input<Inputs.TemplateTemplateImportRequestGetArgs>? TemplateImportRequest { get; set; }

        /// <summary>
        /// Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
        /// </summary>
        [Input("templateYaml")]
        public Input<string>? TemplateYaml { get; set; }

        /// <summary>
        /// Version Label for Template.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public TemplateState()
        {
        }
        public static new TemplateState Empty => new TemplateState();
    }
}
