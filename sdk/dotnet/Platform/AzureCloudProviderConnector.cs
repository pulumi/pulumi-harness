// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating an Azure Cloud Provider in Harness.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var manualConfigSecret = new Harness.Platform.AzureCloudProviderConnector("manual_config_secret", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///         Description = "example",
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///         },
    ///         Credentials = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsArgs
    ///         {
    ///             Type = "ManualConfig",
    ///             AzureManualDetails = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureManualDetailsArgs
    ///             {
    ///                 ApplicationId = "application_id",
    ///                 TenantId = "tenant_id",
    ///                 Auth = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthArgs
    ///                 {
    ///                     Type = "Secret",
    ///                     AzureClientSecretKey = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientSecretKeyArgs
    ///                     {
    ///                         SecretRef = $"account.{test.Id}",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         AzureEnvironmentType = "AZURE",
    ///         DelegateSelectors = new[]
    ///         {
    ///             "harness-delegate",
    ///         },
    ///     });
    /// 
    ///     var manualConfigCertificate = new Harness.Platform.AzureCloudProviderConnector("manual_config_certificate", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///         Description = "example",
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///         },
    ///         Credentials = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsArgs
    ///         {
    ///             Type = "ManualConfig",
    ///             AzureManualDetails = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureManualDetailsArgs
    ///             {
    ///                 ApplicationId = "application_id",
    ///                 TenantId = "tenant_id",
    ///                 Auth = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthArgs
    ///                 {
    ///                     Type = "Certificate",
    ///                     AzureClientKeyCert = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientKeyCertArgs
    ///                     {
    ///                         CertificateRef = $"account.{test.Id}",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         AzureEnvironmentType = "AZURE",
    ///         DelegateSelectors = new[]
    ///         {
    ///             "harness-delegate",
    ///         },
    ///     });
    /// 
    ///     var inheritFromDelegateUserAssignedManagedIdentity = new Harness.Platform.AzureCloudProviderConnector("inherit_from_delegate_user_assigned_managed_identity", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///         Description = "example",
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///         },
    ///         Credentials = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsArgs
    ///         {
    ///             Type = "InheritFromDelegate",
    ///             AzureInheritFromDelegateDetails = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsArgs
    ///             {
    ///                 Auth = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthArgs
    ///                 {
    ///                     AzureMsiAuthUa = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUaArgs
    ///                     {
    ///                         ClientId = "client_id",
    ///                     },
    ///                     Type = "UserAssignedManagedIdentity",
    ///                 },
    ///             },
    ///         },
    ///         AzureEnvironmentType = "AZURE",
    ///         DelegateSelectors = new[]
    ///         {
    ///             "harness-delegate",
    ///         },
    ///     });
    /// 
    ///     var inheritFromDelegateSystemAssignedManagedIdentity = new Harness.Platform.AzureCloudProviderConnector("inherit_from_delegate_system_assigned_managed_identity", new()
    ///     {
    ///         Identifier = "identifier",
    ///         Name = "name",
    ///         Description = "example",
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///         },
    ///         Credentials = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsArgs
    ///         {
    ///             Type = "InheritFromDelegate",
    ///             AzureInheritFromDelegateDetails = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsArgs
    ///             {
    ///                 Auth = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthArgs
    ///                 {
    ///                     Type = "SystemAssignedManagedIdentity",
    ///                 },
    ///             },
    ///         },
    ///         AzureEnvironmentType = "AZURE",
    ///         DelegateSelectors = new[]
    ///         {
    ///             "harness-delegate",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import account level azure cloud provider connector
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/azureCloudProviderConnector:AzureCloudProviderConnector example &lt;connector_id&gt;
    /// ```
    /// 
    /// Import org level azure cloud provider connector
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/azureCloudProviderConnector:AzureCloudProviderConnector example &lt;ord_id&gt;/&lt;connector_id&gt;
    /// ```
    /// 
    /// Import project level azure cloud provider connector
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/azureCloudProviderConnector:AzureCloudProviderConnector example &lt;org_id&gt;/&lt;project_id&gt;/&lt;connector_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/azureCloudProviderConnector:AzureCloudProviderConnector")]
    public partial class AzureCloudProviderConnector : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the Azure Environment type, which is AZURE by default. Can either be AZURE or AZURE*US*GOVERNMENT
        /// </summary>
        [Output("azureEnvironmentType")]
        public Output<string> AzureEnvironmentType { get; private set; } = null!;

        /// <summary>
        /// Contains Azure connector credentials.
        /// </summary>
        [Output("credentials")]
        public Output<Outputs.AzureCloudProviderConnectorCredentials> Credentials { get; private set; } = null!;

        /// <summary>
        /// Tags to filter delegates for connection.
        /// </summary>
        [Output("delegateSelectors")]
        public Output<ImmutableArray<string>> DelegateSelectors { get; private set; } = null!;

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Execute on delegate or not.
        /// </summary>
        [Output("executeOnDelegate")]
        public Output<bool?> ExecuteOnDelegate { get; private set; } = null!;

        /// <summary>
        /// Enable this flag for force deletion of connector
        /// </summary>
        [Output("forceDelete")]
        public Output<bool> ForceDelete { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a AzureCloudProviderConnector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AzureCloudProviderConnector(string name, AzureCloudProviderConnectorArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/azureCloudProviderConnector:AzureCloudProviderConnector", name, args ?? new AzureCloudProviderConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AzureCloudProviderConnector(string name, Input<string> id, AzureCloudProviderConnectorState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/azureCloudProviderConnector:AzureCloudProviderConnector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AzureCloudProviderConnector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AzureCloudProviderConnector Get(string name, Input<string> id, AzureCloudProviderConnectorState? state = null, CustomResourceOptions? options = null)
        {
            return new AzureCloudProviderConnector(name, id, state, options);
        }
    }

    public sealed class AzureCloudProviderConnectorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the Azure Environment type, which is AZURE by default. Can either be AZURE or AZURE*US*GOVERNMENT
        /// </summary>
        [Input("azureEnvironmentType")]
        public Input<string>? AzureEnvironmentType { get; set; }

        /// <summary>
        /// Contains Azure connector credentials.
        /// </summary>
        [Input("credentials", required: true)]
        public Input<Inputs.AzureCloudProviderConnectorCredentialsArgs> Credentials { get; set; } = null!;

        [Input("delegateSelectors")]
        private InputList<string>? _delegateSelectors;

        /// <summary>
        /// Tags to filter delegates for connection.
        /// </summary>
        public InputList<string> DelegateSelectors
        {
            get => _delegateSelectors ?? (_delegateSelectors = new InputList<string>());
            set => _delegateSelectors = value;
        }

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Execute on delegate or not.
        /// </summary>
        [Input("executeOnDelegate")]
        public Input<bool>? ExecuteOnDelegate { get; set; }

        /// <summary>
        /// Enable this flag for force deletion of connector
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public AzureCloudProviderConnectorArgs()
        {
        }
        public static new AzureCloudProviderConnectorArgs Empty => new AzureCloudProviderConnectorArgs();
    }

    public sealed class AzureCloudProviderConnectorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the Azure Environment type, which is AZURE by default. Can either be AZURE or AZURE*US*GOVERNMENT
        /// </summary>
        [Input("azureEnvironmentType")]
        public Input<string>? AzureEnvironmentType { get; set; }

        /// <summary>
        /// Contains Azure connector credentials.
        /// </summary>
        [Input("credentials")]
        public Input<Inputs.AzureCloudProviderConnectorCredentialsGetArgs>? Credentials { get; set; }

        [Input("delegateSelectors")]
        private InputList<string>? _delegateSelectors;

        /// <summary>
        /// Tags to filter delegates for connection.
        /// </summary>
        public InputList<string> DelegateSelectors
        {
            get => _delegateSelectors ?? (_delegateSelectors = new InputList<string>());
            set => _delegateSelectors = value;
        }

        /// <summary>
        /// Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Execute on delegate or not.
        /// </summary>
        [Input("executeOnDelegate")]
        public Input<bool>? ExecuteOnDelegate { get; set; }

        /// <summary>
        /// Enable this flag for force deletion of connector
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public AzureCloudProviderConnectorState()
        {
        }
        public static new AzureCloudProviderConnectorState Empty => new AzureCloudProviderConnectorState();
    }
}
