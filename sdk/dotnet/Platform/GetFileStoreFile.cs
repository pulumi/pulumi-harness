// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetFileStoreFile
    {
        /// <summary>
        /// Data source for retrieving files.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetFileStoreFile.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetFileStoreFileResult> InvokeAsync(GetFileStoreFileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFileStoreFileResult>("harness:platform/getFileStoreFile:getFileStoreFile", args ?? new GetFileStoreFileArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving files.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetFileStoreFile.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFileStoreFileResult> Invoke(GetFileStoreFileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFileStoreFileResult>("harness:platform/getFileStoreFile:getFileStoreFile", args ?? new GetFileStoreFileInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving files.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetFileStoreFile.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFileStoreFileResult> Invoke(GetFileStoreFileInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFileStoreFileResult>("harness:platform/getFileStoreFile:getFileStoreFile", args ?? new GetFileStoreFileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFileStoreFileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetFileStoreFileArgs()
        {
        }
        public static new GetFileStoreFileArgs Empty => new GetFileStoreFileArgs();
    }

    public sealed class GetFileStoreFileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetFileStoreFileInvokeArgs()
        {
        }
        public static new GetFileStoreFileInvokeArgs Empty => new GetFileStoreFileInvokeArgs();
    }


    [OutputType]
    public sealed class GetFileStoreFileResult
    {
        /// <summary>
        /// File content stored on Harness File Store
        /// </summary>
        public readonly string Content;
        /// <summary>
        /// Created by
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFileStoreFileCreatedByResult> CreatedBies;
        /// <summary>
        /// Description of the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// File content path to be upladed on Harness File Store
        /// </summary>
        public readonly string FileContentPath;
        /// <summary>
        /// File usage. Valid options are MANIFEST_FILE, CONFIG, SCRIPT
        /// </summary>
        public readonly string FileUsage;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// Last modified at
        /// </summary>
        public readonly int LastModifiedAt;
        /// <summary>
        /// Last modified by
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFileStoreFileLastModifiedByResult> LastModifiedBies;
        /// <summary>
        /// File mime type
        /// </summary>
        public readonly string MimeType;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// File parent identifier on Harness File Store
        /// </summary>
        public readonly string ParentIdentifier;
        /// <summary>
        /// Harness File Store file path
        /// </summary>
        public readonly string Path;
        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetFileStoreFileResult(
            string content,

            ImmutableArray<Outputs.GetFileStoreFileCreatedByResult> createdBies,

            string description,

            string fileContentPath,

            string fileUsage,

            string id,

            string identifier,

            int lastModifiedAt,

            ImmutableArray<Outputs.GetFileStoreFileLastModifiedByResult> lastModifiedBies,

            string mimeType,

            string? name,

            string? orgId,

            string parentIdentifier,

            string path,

            string? projectId,

            ImmutableArray<string> tags)
        {
            Content = content;
            CreatedBies = createdBies;
            Description = description;
            FileContentPath = fileContentPath;
            FileUsage = fileUsage;
            Id = id;
            Identifier = identifier;
            LastModifiedAt = lastModifiedAt;
            LastModifiedBies = lastModifiedBies;
            MimeType = mimeType;
            Name = name;
            OrgId = orgId;
            ParentIdentifier = parentIdentifier;
            Path = path;
            ProjectId = projectId;
            Tags = tags;
        }
    }
}
