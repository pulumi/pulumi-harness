// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetTemplateFilters
    {
        /// <summary>
        /// Data source for retrieving a Harness Template Filter.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Harness.Platform.GetTemplateFilters.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///         Type = "Template",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTemplateFiltersResult> InvokeAsync(GetTemplateFiltersArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTemplateFiltersResult>("harness:platform/getTemplateFilters:getTemplateFilters", args ?? new GetTemplateFiltersArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Template Filter.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Harness.Platform.GetTemplateFilters.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///         Type = "Template",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTemplateFiltersResult> Invoke(GetTemplateFiltersInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTemplateFiltersResult>("harness:platform/getTemplateFilters:getTemplateFilters", args ?? new GetTemplateFiltersInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Template Filter.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Harness.Platform.GetTemplateFilters.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///         Type = "Template",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTemplateFiltersResult> Invoke(GetTemplateFiltersInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTemplateFiltersResult>("harness:platform/getTemplateFilters:getTemplateFilters", args ?? new GetTemplateFiltersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTemplateFiltersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        /// <summary>
        /// Organization Identifier for the Entity.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Project Identifier for the Entity.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// Type of filter. Currently supported types are {TemplateSetup, TemplateExecution, Deployment, Template, EnvironmentGroup, Environment}.
        /// </summary>
        [Input("type", required: true)]
        public string Type { get; set; } = null!;

        public GetTemplateFiltersArgs()
        {
        }
        public static new GetTemplateFiltersArgs Empty => new GetTemplateFiltersArgs();
    }

    public sealed class GetTemplateFiltersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Organization Identifier for the Entity.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project Identifier for the Entity.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Type of filter. Currently supported types are {TemplateSetup, TemplateExecution, Deployment, Template, EnvironmentGroup, Environment}.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public GetTemplateFiltersInvokeArgs()
        {
        }
        public static new GetTemplateFiltersInvokeArgs Empty => new GetTemplateFiltersInvokeArgs();
    }


    [OutputType]
    public sealed class GetTemplateFiltersResult
    {
        /// <summary>
        /// Properties of the filter entity defined in Harness.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTemplateFiltersFilterPropertyResult> FilterProperties;
        /// <summary>
        /// This indicates visibility of filter. By default, everyone can view this filter.
        /// </summary>
        public readonly string FilterVisibility;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// Name of the Filter.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Organization Identifier for the Entity.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Project Identifier for the Entity.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Type of filter. Currently supported types are {TemplateSetup, TemplateExecution, Deployment, Template, EnvironmentGroup, Environment}.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetTemplateFiltersResult(
            ImmutableArray<Outputs.GetTemplateFiltersFilterPropertyResult> filterProperties,

            string filterVisibility,

            string id,

            string identifier,

            string name,

            string? orgId,

            string? projectId,

            string type)
        {
            FilterProperties = filterProperties;
            FilterVisibility = filterVisibility;
            Id = id;
            Identifier = identifier;
            Name = name;
            OrgId = orgId;
            ProjectId = projectId;
            Type = type;
        }
    }
}
