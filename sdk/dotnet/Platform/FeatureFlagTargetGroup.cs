// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating a Harness Feature Flag Target Group.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var target = new Harness.Platform.FeatureFlagTargetGroup("target", new()
    ///     {
    ///         OrgId = "test",
    ///         ProjectId = "test",
    ///         Identifier = "MY_FEATURE",
    ///         Environment = "MY_ENVIRONMENT",
    ///         Name = "MY_FEATURE",
    ///         AccountId = "MY_ACCOUNT_ID",
    ///         Includeds = new[]
    ///         {
    ///             "target_id_1",
    ///         },
    ///         Excludeds = new[]
    ///         {
    ///             "target_id_2",
    ///         },
    ///         Rules = 
    ///         {
    ///             { "attribute", "MY_ATTRIBUTE" },
    ///             { "operator", "equal" },
    ///             { "value", "MY_VALUE" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/featureFlagTargetGroup:FeatureFlagTargetGroup")]
    public partial class FeatureFlagTargetGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account Identifier
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Environment Identifier
        /// </summary>
        [Output("environment")]
        public Output<string> Environment { get; private set; } = null!;

        /// <summary>
        /// A list of targets to exclude from the target group
        /// </summary>
        [Output("excludeds")]
        public Output<ImmutableArray<string>> Excludeds { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the feature flag target group.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// A list of targets to include in the target group
        /// </summary>
        [Output("includeds")]
        public Output<ImmutableArray<string>> Includeds { get; private set; } = null!;

        /// <summary>
        /// The name of the feature flag target group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Organization Identifier
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// Project Identifier
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The list of rules used to include targets in the target group.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.FeatureFlagTargetGroupRule>> Rules { get; private set; } = null!;


        /// <summary>
        /// Create a FeatureFlagTargetGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FeatureFlagTargetGroup(string name, FeatureFlagTargetGroupArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/featureFlagTargetGroup:FeatureFlagTargetGroup", name, args ?? new FeatureFlagTargetGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FeatureFlagTargetGroup(string name, Input<string> id, FeatureFlagTargetGroupState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/featureFlagTargetGroup:FeatureFlagTargetGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FeatureFlagTargetGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FeatureFlagTargetGroup Get(string name, Input<string> id, FeatureFlagTargetGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new FeatureFlagTargetGroup(name, id, state, options);
        }
    }

    public sealed class FeatureFlagTargetGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Environment Identifier
        /// </summary>
        [Input("environment", required: true)]
        public Input<string> Environment { get; set; } = null!;

        [Input("excludeds")]
        private InputList<string>? _excludeds;

        /// <summary>
        /// A list of targets to exclude from the target group
        /// </summary>
        public InputList<string> Excludeds
        {
            get => _excludeds ?? (_excludeds = new InputList<string>());
            set => _excludeds = value;
        }

        /// <summary>
        /// The unique identifier of the feature flag target group.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        [Input("includeds")]
        private InputList<string>? _includeds;

        /// <summary>
        /// A list of targets to include in the target group
        /// </summary>
        public InputList<string> Includeds
        {
            get => _includeds ?? (_includeds = new InputList<string>());
            set => _includeds = value;
        }

        /// <summary>
        /// The name of the feature flag target group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Organization Identifier
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// Project Identifier
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("rules")]
        private InputList<Inputs.FeatureFlagTargetGroupRuleArgs>? _rules;

        /// <summary>
        /// The list of rules used to include targets in the target group.
        /// </summary>
        public InputList<Inputs.FeatureFlagTargetGroupRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.FeatureFlagTargetGroupRuleArgs>());
            set => _rules = value;
        }

        public FeatureFlagTargetGroupArgs()
        {
        }
        public static new FeatureFlagTargetGroupArgs Empty => new FeatureFlagTargetGroupArgs();
    }

    public sealed class FeatureFlagTargetGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account Identifier
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Environment Identifier
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        [Input("excludeds")]
        private InputList<string>? _excludeds;

        /// <summary>
        /// A list of targets to exclude from the target group
        /// </summary>
        public InputList<string> Excludeds
        {
            get => _excludeds ?? (_excludeds = new InputList<string>());
            set => _excludeds = value;
        }

        /// <summary>
        /// The unique identifier of the feature flag target group.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        [Input("includeds")]
        private InputList<string>? _includeds;

        /// <summary>
        /// A list of targets to include in the target group
        /// </summary>
        public InputList<string> Includeds
        {
            get => _includeds ?? (_includeds = new InputList<string>());
            set => _includeds = value;
        }

        /// <summary>
        /// The name of the feature flag target group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Organization Identifier
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project Identifier
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("rules")]
        private InputList<Inputs.FeatureFlagTargetGroupRuleGetArgs>? _rules;

        /// <summary>
        /// The list of rules used to include targets in the target group.
        /// </summary>
        public InputList<Inputs.FeatureFlagTargetGroupRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.FeatureFlagTargetGroupRuleGetArgs>());
            set => _rules = value;
        }

        public FeatureFlagTargetGroupState()
        {
        }
        public static new FeatureFlagTargetGroupState Empty => new FeatureFlagTargetGroupState();
    }
}
