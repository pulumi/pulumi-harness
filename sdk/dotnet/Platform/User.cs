// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating a Harness User. This requires your authentication mechanism to be set to SAML, LDAP, or OAuth, and the feature flag AUTO_ACCEPT_SAML_ACCOUNT_INVITES to be enabled.
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import account level
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/user:User john_doe &lt;email_id&gt;
    /// ```
    /// 
    /// Import org level
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/user:User john_doe &lt;email_id&gt;/&lt;org_id&gt;
    /// ```
    /// 
    /// Import project level
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/user:User john_doe &lt;email_id&gt;/&lt;org_id&gt;/&lt;project_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/user:User")]
    public partial class User : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether or not the user account is disabled.
        /// </summary>
        [Output("disabled")]
        public Output<bool> Disabled { get; private set; } = null!;

        /// <summary>
        /// The email of the user.
        /// </summary>
        [Output("email")]
        public Output<string> Email { get; private set; } = null!;

        /// <summary>
        /// Whether or not the user account is externally managed.
        /// </summary>
        [Output("externallyManaged")]
        public Output<bool> ExternallyManaged { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the user.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Whether or not the user account is locked.
        /// </summary>
        [Output("locked")]
        public Output<bool> Locked { get; private set; } = null!;

        /// <summary>
        /// Name of the user.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Organization identifier of the user.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Project identifier of the user.
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Role Bindings of the user. Cannot be updated.
        /// </summary>
        [Output("roleBindings")]
        public Output<ImmutableArray<Outputs.UserRoleBinding>> RoleBindings { get; private set; } = null!;

        /// <summary>
        /// The user group of the user. Cannot be updated.
        /// </summary>
        [Output("userGroups")]
        public Output<ImmutableArray<string>> UserGroups { get; private set; } = null!;


        /// <summary>
        /// Create a User resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public User(string name, UserArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/user:User", name, args ?? new UserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private User(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/user:User", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing User resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static User Get(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
        {
            return new User(name, id, state, options);
        }
    }

    public sealed class UserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The email of the user.
        /// </summary>
        [Input("email", required: true)]
        public Input<string> Email { get; set; } = null!;

        /// <summary>
        /// Organization identifier of the user.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the user.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("roleBindings")]
        private InputList<Inputs.UserRoleBindingArgs>? _roleBindings;

        /// <summary>
        /// Role Bindings of the user. Cannot be updated.
        /// </summary>
        public InputList<Inputs.UserRoleBindingArgs> RoleBindings
        {
            get => _roleBindings ?? (_roleBindings = new InputList<Inputs.UserRoleBindingArgs>());
            set => _roleBindings = value;
        }

        [Input("userGroups", required: true)]
        private InputList<string>? _userGroups;

        /// <summary>
        /// The user group of the user. Cannot be updated.
        /// </summary>
        public InputList<string> UserGroups
        {
            get => _userGroups ?? (_userGroups = new InputList<string>());
            set => _userGroups = value;
        }

        public UserArgs()
        {
        }
        public static new UserArgs Empty => new UserArgs();
    }

    public sealed class UserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether or not the user account is disabled.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// The email of the user.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// Whether or not the user account is externally managed.
        /// </summary>
        [Input("externallyManaged")]
        public Input<bool>? ExternallyManaged { get; set; }

        /// <summary>
        /// Unique identifier of the user.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Whether or not the user account is locked.
        /// </summary>
        [Input("locked")]
        public Input<bool>? Locked { get; set; }

        /// <summary>
        /// Name of the user.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Organization identifier of the user.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the user.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("roleBindings")]
        private InputList<Inputs.UserRoleBindingGetArgs>? _roleBindings;

        /// <summary>
        /// Role Bindings of the user. Cannot be updated.
        /// </summary>
        public InputList<Inputs.UserRoleBindingGetArgs> RoleBindings
        {
            get => _roleBindings ?? (_roleBindings = new InputList<Inputs.UserRoleBindingGetArgs>());
            set => _roleBindings = value;
        }

        [Input("userGroups")]
        private InputList<string>? _userGroups;

        /// <summary>
        /// The user group of the user. Cannot be updated.
        /// </summary>
        public InputList<string> UserGroups
        {
            get => _userGroups ?? (_userGroups = new InputList<string>());
            set => _userGroups = value;
        }

        public UserState()
        {
        }
        public static new UserState Empty => new UserState();
    }
}
