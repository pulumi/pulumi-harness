// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetInfraModuleTesting
    {
        /// <summary>
        /// Data source for retrieving modules testing metadata from the module registry.
        /// </summary>
        public static Task<GetInfraModuleTestingResult> InvokeAsync(GetInfraModuleTestingArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInfraModuleTestingResult>("harness:platform/getInfraModuleTesting:getInfraModuleTesting", args ?? new GetInfraModuleTestingArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving modules testing metadata from the module registry.
        /// </summary>
        public static Output<GetInfraModuleTestingResult> Invoke(GetInfraModuleTestingInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInfraModuleTestingResult>("harness:platform/getInfraModuleTesting:getInfraModuleTesting", args ?? new GetInfraModuleTestingInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving modules testing metadata from the module registry.
        /// </summary>
        public static Output<GetInfraModuleTestingResult> Invoke(GetInfraModuleTestingInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInfraModuleTestingResult>("harness:platform/getInfraModuleTesting:getInfraModuleTesting", args ?? new GetInfraModuleTestingInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInfraModuleTestingArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the module to enable testing for
        /// </summary>
        [Input("moduleId", required: true)]
        public string ModuleId { get; set; } = null!;

        /// <summary>
        /// Organization identifier
        /// </summary>
        [Input("org", required: true)]
        public string Org { get; set; } = null!;

        [Input("pipelines", required: true)]
        private List<string>? _pipelines;

        /// <summary>
        /// List of pipeline IDs to create webhooks for triggering test executions
        /// </summary>
        public List<string> Pipelines
        {
            get => _pipelines ?? (_pipelines = new List<string>());
            set => _pipelines = value;
        }

        /// <summary>
        /// Project identifier
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        /// <summary>
        /// Provider connector for testing purposes
        /// </summary>
        [Input("providerConnector", required: true)]
        public string ProviderConnector { get; set; } = null!;

        [Input("provisionerType", required: true)]
        public string ProvisionerType { get; set; } = null!;

        /// <summary>
        /// Provisioner version for testing purposes
        /// </summary>
        [Input("provisionerVersion", required: true)]
        public string ProvisionerVersion { get; set; } = null!;

        /// <summary>
        /// Pipeline ID to create webhooks for releases
        /// </summary>
        [Input("releasePipeline")]
        public string? ReleasePipeline { get; set; }

        /// <summary>
        /// Whether testing is enabled for the module
        /// </summary>
        [Input("testingEnabled")]
        public bool? TestingEnabled { get; set; }

        /// <summary>
        /// Testing metadata for the module
        /// </summary>
        [Input("testingMetadata")]
        public Inputs.GetInfraModuleTestingTestingMetadataArgs? TestingMetadata { get; set; }

        /// <summary>
        /// Timestamp when the module was last modified
        /// </summary>
        [Input("updated")]
        public int? Updated { get; set; }

        [Input("versions")]
        private List<string>? _versions;

        /// <summary>
        /// Versions of the module
        /// </summary>
        public List<string> Versions
        {
            get => _versions ?? (_versions = new List<string>());
            set => _versions = value;
        }

        public GetInfraModuleTestingArgs()
        {
        }
        public static new GetInfraModuleTestingArgs Empty => new GetInfraModuleTestingArgs();
    }

    public sealed class GetInfraModuleTestingInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the module to enable testing for
        /// </summary>
        [Input("moduleId", required: true)]
        public Input<string> ModuleId { get; set; } = null!;

        /// <summary>
        /// Organization identifier
        /// </summary>
        [Input("org", required: true)]
        public Input<string> Org { get; set; } = null!;

        [Input("pipelines", required: true)]
        private InputList<string>? _pipelines;

        /// <summary>
        /// List of pipeline IDs to create webhooks for triggering test executions
        /// </summary>
        public InputList<string> Pipelines
        {
            get => _pipelines ?? (_pipelines = new InputList<string>());
            set => _pipelines = value;
        }

        /// <summary>
        /// Project identifier
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Provider connector for testing purposes
        /// </summary>
        [Input("providerConnector", required: true)]
        public Input<string> ProviderConnector { get; set; } = null!;

        [Input("provisionerType", required: true)]
        public Input<string> ProvisionerType { get; set; } = null!;

        /// <summary>
        /// Provisioner version for testing purposes
        /// </summary>
        [Input("provisionerVersion", required: true)]
        public Input<string> ProvisionerVersion { get; set; } = null!;

        /// <summary>
        /// Pipeline ID to create webhooks for releases
        /// </summary>
        [Input("releasePipeline")]
        public Input<string>? ReleasePipeline { get; set; }

        /// <summary>
        /// Whether testing is enabled for the module
        /// </summary>
        [Input("testingEnabled")]
        public Input<bool>? TestingEnabled { get; set; }

        /// <summary>
        /// Testing metadata for the module
        /// </summary>
        [Input("testingMetadata")]
        public Input<Inputs.GetInfraModuleTestingTestingMetadataInputArgs>? TestingMetadata { get; set; }

        /// <summary>
        /// Timestamp when the module was last modified
        /// </summary>
        [Input("updated")]
        public Input<int>? Updated { get; set; }

        [Input("versions")]
        private InputList<string>? _versions;

        /// <summary>
        /// Versions of the module
        /// </summary>
        public InputList<string> Versions
        {
            get => _versions ?? (_versions = new InputList<string>());
            set => _versions = value;
        }

        public GetInfraModuleTestingInvokeArgs()
        {
        }
        public static new GetInfraModuleTestingInvokeArgs Empty => new GetInfraModuleTestingInvokeArgs();
    }


    [OutputType]
    public sealed class GetInfraModuleTestingResult
    {
        /// <summary>
        /// Account that owns the module
        /// </summary>
        public readonly string Account;
        /// <summary>
        /// Timestamp when the module was created
        /// </summary>
        public readonly int Created;
        /// <summary>
        /// Description of the module
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Git Tag Style
        /// </summary>
        public readonly string GitTagStyle;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Error while retrieving the module
        /// </summary>
        public readonly string ModuleError;
        /// <summary>
        /// Identifier of the module to enable testing for
        /// </summary>
        public readonly string ModuleId;
        /// <summary>
        /// Name of the module
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Organization identifier
        /// </summary>
        public readonly string Org;
        /// <summary>
        /// List of pipeline IDs to create webhooks for triggering test executions
        /// </summary>
        public readonly ImmutableArray<string> Pipelines;
        /// <summary>
        /// Project identifier
        /// </summary>
        public readonly string Project;
        /// <summary>
        /// Provider connector for testing purposes
        /// </summary>
        public readonly string ProviderConnector;
        public readonly string ProvisionerType;
        /// <summary>
        /// Provisioner version for testing purposes
        /// </summary>
        public readonly string ProvisionerVersion;
        /// <summary>
        /// Pipeline ID to create webhooks for releases
        /// </summary>
        public readonly string? ReleasePipeline;
        /// <summary>
        /// For account connectors, the repository where the module is stored
        /// </summary>
        public readonly string Repository;
        /// <summary>
        /// Repository Branch in which the module should be accessed
        /// </summary>
        public readonly string RepositoryBranch;
        /// <summary>
        /// Repository Commit in which the module should be accessed
        /// </summary>
        public readonly string RepositoryCommit;
        /// <summary>
        /// Repository Connector is the reference to the connector for the repository
        /// </summary>
        public readonly string RepositoryConnector;
        /// <summary>
        /// Repository Path is the path in which the module resides
        /// </summary>
        public readonly string RepositoryPath;
        /// <summary>
        /// URL where the module is stored
        /// </summary>
        public readonly string RepositoryUrl;
        /// <summary>
        /// Timestamp when the module was last synced
        /// </summary>
        public readonly int Synced;
        /// <summary>
        /// Provider of the module
        /// </summary>
        public readonly string System;
        /// <summary>
        /// Tags associated with the module
        /// </summary>
        public readonly string Tags;
        /// <summary>
        /// Whether testing is enabled for the module
        /// </summary>
        public readonly bool TestingEnabled;
        /// <summary>
        /// Testing metadata for the module
        /// </summary>
        public readonly Outputs.GetInfraModuleTestingTestingMetadataResult TestingMetadata;
        /// <summary>
        /// Timestamp when the module was last modified
        /// </summary>
        public readonly int Updated;
        /// <summary>
        /// Versions of the module
        /// </summary>
        public readonly ImmutableArray<string> Versions;

        [OutputConstructor]
        private GetInfraModuleTestingResult(
            string account,

            int created,

            string description,

            string gitTagStyle,

            string id,

            string moduleError,

            string moduleId,

            string name,

            string org,

            ImmutableArray<string> pipelines,

            string project,

            string providerConnector,

            string provisionerType,

            string provisionerVersion,

            string? releasePipeline,

            string repository,

            string repositoryBranch,

            string repositoryCommit,

            string repositoryConnector,

            string repositoryPath,

            string repositoryUrl,

            int synced,

            string system,

            string tags,

            bool testingEnabled,

            Outputs.GetInfraModuleTestingTestingMetadataResult testingMetadata,

            int updated,

            ImmutableArray<string> versions)
        {
            Account = account;
            Created = created;
            Description = description;
            GitTagStyle = gitTagStyle;
            Id = id;
            ModuleError = moduleError;
            ModuleId = moduleId;
            Name = name;
            Org = org;
            Pipelines = pipelines;
            Project = project;
            ProviderConnector = providerConnector;
            ProvisionerType = provisionerType;
            ProvisionerVersion = provisionerVersion;
            ReleasePipeline = releasePipeline;
            Repository = repository;
            RepositoryBranch = repositoryBranch;
            RepositoryCommit = repositoryCommit;
            RepositoryConnector = repositoryConnector;
            RepositoryPath = repositoryPath;
            RepositoryUrl = repositoryUrl;
            Synced = synced;
            System = system;
            Tags = tags;
            TestingEnabled = testingEnabled;
            TestingMetadata = testingMetadata;
            Updated = updated;
            Versions = versions;
        }
    }
}
