// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetGitopsRepoCred
    {
        /// <summary>
        /// Data source for fetching a GitOps Repository Credentials.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Harness.Platform.GetGitopsRepoCred.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         AccountId = "account_id",
        ///         ProjectId = "project_id",
        ///         OrgId = "org_id",
        ///         AgentId = "agent_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetGitopsRepoCredResult> InvokeAsync(GetGitopsRepoCredArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGitopsRepoCredResult>("harness:platform/getGitopsRepoCred:getGitopsRepoCred", args ?? new GetGitopsRepoCredArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for fetching a GitOps Repository Credentials.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Harness.Platform.GetGitopsRepoCred.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         AccountId = "account_id",
        ///         ProjectId = "project_id",
        ///         OrgId = "org_id",
        ///         AgentId = "agent_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGitopsRepoCredResult> Invoke(GetGitopsRepoCredInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGitopsRepoCredResult>("harness:platform/getGitopsRepoCred:getGitopsRepoCred", args ?? new GetGitopsRepoCredInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for fetching a GitOps Repository Credentials.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Harness.Platform.GetGitopsRepoCred.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         AccountId = "account_id",
        ///         ProjectId = "project_id",
        ///         OrgId = "org_id",
        ///         AgentId = "agent_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGitopsRepoCredResult> Invoke(GetGitopsRepoCredInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGitopsRepoCredResult>("harness:platform/getGitopsRepoCred:getGitopsRepoCred", args ?? new GetGitopsRepoCredInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGitopsRepoCredArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier of the Repository Credentials.
        /// </summary>
        [Input("accountId")]
        public string? AccountId { get; set; }

        /// <summary>
        /// Agent identifier of the Repository Credentials.
        /// </summary>
        [Input("agentId", required: true)]
        public string AgentId { get; set; } = null!;

        [Input("creds")]
        private List<Inputs.GetGitopsRepoCredCredArgs>? _creds;

        /// <summary>
        /// credential details.
        /// </summary>
        public List<Inputs.GetGitopsRepoCredCredArgs> Creds
        {
            get => _creds ?? (_creds = new List<Inputs.GetGitopsRepoCredCredArgs>());
            set => _creds = value;
        }

        /// <summary>
        /// Identifier of the Repository Credentials.
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        /// <summary>
        /// Organization identifier of the Repository Credentials.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the Repository Credentials.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetGitopsRepoCredArgs()
        {
        }
        public static new GetGitopsRepoCredArgs Empty => new GetGitopsRepoCredArgs();
    }

    public sealed class GetGitopsRepoCredInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier of the Repository Credentials.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Agent identifier of the Repository Credentials.
        /// </summary>
        [Input("agentId", required: true)]
        public Input<string> AgentId { get; set; } = null!;

        [Input("creds")]
        private InputList<Inputs.GetGitopsRepoCredCredInputArgs>? _creds;

        /// <summary>
        /// credential details.
        /// </summary>
        public InputList<Inputs.GetGitopsRepoCredCredInputArgs> Creds
        {
            get => _creds ?? (_creds = new InputList<Inputs.GetGitopsRepoCredCredInputArgs>());
            set => _creds = value;
        }

        /// <summary>
        /// Identifier of the Repository Credentials.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Organization identifier of the Repository Credentials.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the Repository Credentials.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetGitopsRepoCredInvokeArgs()
        {
        }
        public static new GetGitopsRepoCredInvokeArgs Empty => new GetGitopsRepoCredInvokeArgs();
    }


    [OutputType]
    public sealed class GetGitopsRepoCredResult
    {
        /// <summary>
        /// Account identifier of the Repository Credentials.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Agent identifier of the Repository Credentials.
        /// </summary>
        public readonly string AgentId;
        /// <summary>
        /// credential details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGitopsRepoCredCredResult> Creds;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identifier of the Repository Credentials.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// Organization identifier of the Repository Credentials.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Project identifier of the Repository Credentials.
        /// </summary>
        public readonly string? ProjectId;

        [OutputConstructor]
        private GetGitopsRepoCredResult(
            string accountId,

            string agentId,

            ImmutableArray<Outputs.GetGitopsRepoCredCredResult> creds,

            string id,

            string identifier,

            string? orgId,

            string? projectId)
        {
            AccountId = accountId;
            AgentId = agentId;
            Creds = creds;
            Id = id;
            Identifier = identifier;
            OrgId = orgId;
            ProjectId = projectId;
        }
    }
}
