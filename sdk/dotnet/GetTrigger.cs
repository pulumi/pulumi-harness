// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness
{
    public static class GetTrigger
    {
        /// <summary>
        /// Data source for retrieving a Harness trigger.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleByName = Harness.GetTrigger.Invoke(new()
        ///     {
        ///         AppId = "app_id",
        ///         Name = "name",
        ///     });
        /// 
        ///     var exampleById = Harness.GetTrigger.Invoke(new()
        ///     {
        ///         Id = "trigger_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTriggerResult> InvokeAsync(GetTriggerArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTriggerResult>("harness:index/getTrigger:getTrigger", args ?? new GetTriggerArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness trigger.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleByName = Harness.GetTrigger.Invoke(new()
        ///     {
        ///         AppId = "app_id",
        ///         Name = "name",
        ///     });
        /// 
        ///     var exampleById = Harness.GetTrigger.Invoke(new()
        ///     {
        ///         Id = "trigger_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTriggerResult> Invoke(GetTriggerInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTriggerResult>("harness:index/getTrigger:getTrigger", args ?? new GetTriggerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness trigger.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleByName = Harness.GetTrigger.Invoke(new()
        ///     {
        ///         AppId = "app_id",
        ///         Name = "name",
        ///     });
        /// 
        ///     var exampleById = Harness.GetTrigger.Invoke(new()
        ///     {
        ///         Id = "trigger_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTriggerResult> Invoke(GetTriggerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTriggerResult>("harness:index/getTrigger:getTrigger", args ?? new GetTriggerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTriggerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the application.
        /// </summary>
        [Input("appId")]
        public string? AppId { get; set; }

        /// <summary>
        /// The trigger description.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Unique identifier of the trigger.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the trigger.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetTriggerArgs()
        {
        }
        public static new GetTriggerArgs Empty => new GetTriggerArgs();
    }

    public sealed class GetTriggerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the application.
        /// </summary>
        [Input("appId")]
        public Input<string>? AppId { get; set; }

        /// <summary>
        /// The trigger description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Unique identifier of the trigger.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the trigger.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetTriggerInvokeArgs()
        {
        }
        public static new GetTriggerInvokeArgs Empty => new GetTriggerInvokeArgs();
    }


    [OutputType]
    public sealed class GetTriggerResult
    {
        /// <summary>
        /// The id of the application.
        /// </summary>
        public readonly string? AppId;
        /// <summary>
        /// The condition that will execute the Trigger: On new artifact, On pipeline completion, On Cron schedule, On webhook, On New Manifest.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTriggerConditionResult> Conditions;
        /// <summary>
        /// The trigger description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Unique identifier of the trigger.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The name of the trigger.
        /// </summary>
        public readonly string? Name;

        [OutputConstructor]
        private GetTriggerResult(
            string? appId,

            ImmutableArray<Outputs.GetTriggerConditionResult> conditions,

            string? description,

            string? id,

            string? name)
        {
            AppId = appId;
            Conditions = conditions;
            Description = description;
            Id = id;
            Name = name;
        }
    }
}
