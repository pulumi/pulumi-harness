// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness
{
    public static class GetEncryptedText
    {
        /// <summary>
        /// Data source for retrieving a Harness application
        /// </summary>
        public static Task<GetEncryptedTextResult> InvokeAsync(GetEncryptedTextArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEncryptedTextResult>("harness:index/getEncryptedText:getEncryptedText", args ?? new GetEncryptedTextArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness application
        /// </summary>
        public static Output<GetEncryptedTextResult> Invoke(GetEncryptedTextInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEncryptedTextResult>("harness:index/getEncryptedText:getEncryptedText", args ?? new GetEncryptedTextInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness application
        /// </summary>
        public static Output<GetEncryptedTextResult> Invoke(GetEncryptedTextInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEncryptedTextResult>("harness:index/getEncryptedText:getEncryptedText", args ?? new GetEncryptedTextInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEncryptedTextArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the encrypted secret
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the encrypted secret
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("usageScopes")]
        private List<Inputs.GetEncryptedTextUsageScopeArgs>? _usageScopes;

        /// <summary>
        /// This block is used for scoping the resource to a specific set of applications or environments.
        /// </summary>
        public List<Inputs.GetEncryptedTextUsageScopeArgs> UsageScopes
        {
            get => _usageScopes ?? (_usageScopes = new List<Inputs.GetEncryptedTextUsageScopeArgs>());
            set => _usageScopes = value;
        }

        public GetEncryptedTextArgs()
        {
        }
        public static new GetEncryptedTextArgs Empty => new GetEncryptedTextArgs();
    }

    public sealed class GetEncryptedTextInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the encrypted secret
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the encrypted secret
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("usageScopes")]
        private InputList<Inputs.GetEncryptedTextUsageScopeInputArgs>? _usageScopes;

        /// <summary>
        /// This block is used for scoping the resource to a specific set of applications or environments.
        /// </summary>
        public InputList<Inputs.GetEncryptedTextUsageScopeInputArgs> UsageScopes
        {
            get => _usageScopes ?? (_usageScopes = new InputList<Inputs.GetEncryptedTextUsageScopeInputArgs>());
            set => _usageScopes = value;
        }

        public GetEncryptedTextInvokeArgs()
        {
        }
        public static new GetEncryptedTextInvokeArgs Empty => new GetEncryptedTextInvokeArgs();
    }


    [OutputType]
    public sealed class GetEncryptedTextResult
    {
        /// <summary>
        /// Unique identifier of the encrypted secret
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The name of the encrypted secret
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The id of the associated secret manager
        /// </summary>
        public readonly string SecretManagerId;
        /// <summary>
        /// This block is used for scoping the resource to a specific set of applications or environments.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEncryptedTextUsageScopeResult> UsageScopes;

        [OutputConstructor]
        private GetEncryptedTextResult(
            string? id,

            string? name,

            string secretManagerId,

            ImmutableArray<Outputs.GetEncryptedTextUsageScopeResult> usageScopes)
        {
            Id = id;
            Name = name;
            SecretManagerId = secretManagerId;
            UsageScopes = usageScopes;
        }
    }
}
