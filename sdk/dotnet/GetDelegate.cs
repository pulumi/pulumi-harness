// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness
{
    public static class GetDelegate
    {
        /// <summary>
        /// Data source for retrieving a Harness delegate. If more than one delegate matches the query the first one will be returned.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.GetDelegate.Invoke(new()
        ///     {
        ///         Name = "harness-delegate",
        ///         Type = "KUBERNETES",
        ///         Status = "ENABLED",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDelegateResult> InvokeAsync(GetDelegateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDelegateResult>("harness:index/getDelegate:getDelegate", args ?? new GetDelegateArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness delegate. If more than one delegate matches the query the first one will be returned.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.GetDelegate.Invoke(new()
        ///     {
        ///         Name = "harness-delegate",
        ///         Type = "KUBERNETES",
        ///         Status = "ENABLED",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDelegateResult> Invoke(GetDelegateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDelegateResult>("harness:index/getDelegate:getDelegate", args ?? new GetDelegateInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness delegate. If more than one delegate matches the query the first one will be returned.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.GetDelegate.Invoke(new()
        ///     {
        ///         Name = "harness-delegate",
        ///         Type = "KUBERNETES",
        ///         Status = "ENABLED",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDelegateResult> Invoke(GetDelegateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDelegateResult>("harness:index/getDelegate:getDelegate", args ?? new GetDelegateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDelegateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The hostname of the delegate.
        /// </summary>
        [Input("hostname")]
        public string? Hostname { get; set; }

        /// <summary>
        /// Unique identifier of the delegate
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the delegate to query for.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The status of the delegate to query for. Valid values are DELETED, ENABLED, WAITING*FOR*APPROVAL
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        /// <summary>
        /// The type of the delegate to query for. Valid values are DOCKER, ECS, HELM*DELEGATE, KUBERNETES, SHELL*SCRIPT
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetDelegateArgs()
        {
        }
        public static new GetDelegateArgs Empty => new GetDelegateArgs();
    }

    public sealed class GetDelegateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The hostname of the delegate.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// Unique identifier of the delegate
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the delegate to query for.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The status of the delegate to query for. Valid values are DELETED, ENABLED, WAITING*FOR*APPROVAL
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The type of the delegate to query for. Valid values are DOCKER, ECS, HELM*DELEGATE, KUBERNETES, SHELL*SCRIPT
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetDelegateInvokeArgs()
        {
        }
        public static new GetDelegateInvokeArgs Empty => new GetDelegateInvokeArgs();
    }


    [OutputType]
    public sealed class GetDelegateResult
    {
        /// <summary>
        /// The account id the delegate belongs to.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// The description of the delegate.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The hostname of the delegate.
        /// </summary>
        public readonly string? Hostname;
        /// <summary>
        /// Unique identifier of the delegate
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The ip address of the delegate.
        /// </summary>
        public readonly string Ip;
        /// <summary>
        /// The last time the delegate was heard from.
        /// </summary>
        public readonly string LastHeartbeat;
        /// <summary>
        /// The name of the delegate to query for.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Whether the delegate is in polling mode.
        /// </summary>
        public readonly bool PollingModeEnabled;
        /// <summary>
        /// The id of the profile assigned to the delegate.
        /// </summary>
        public readonly string ProfileId;
        /// <summary>
        /// The status of the delegate to query for. Valid values are DELETED, ENABLED, WAITING*FOR*APPROVAL
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The type of the delegate to query for. Valid values are DOCKER, ECS, HELM*DELEGATE, KUBERNETES, SHELL*SCRIPT
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// The version of the delegate.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetDelegateResult(
            string accountId,

            string description,

            string? hostname,

            string? id,

            string ip,

            string lastHeartbeat,

            string? name,

            bool pollingModeEnabled,

            string profileId,

            string? status,

            string? type,

            string version)
        {
            AccountId = accountId;
            Description = description;
            Hostname = hostname;
            Id = id;
            Ip = ip;
            LastHeartbeat = lastHeartbeat;
            Name = name;
            PollingModeEnabled = pollingModeEnabled;
            ProfileId = profileId;
            Status = status;
            Type = type;
            Version = version;
        }
    }
}
