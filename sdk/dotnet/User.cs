// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness
{
    /// <summary>
    /// Resource for creating a Harness user
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var johnDoe = new Harness.User("john_doe", new()
    ///     {
    ///         Name = "John Doe",
    ///         Email = "john.doe@example.com",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import using the email address of the user
    /// 
    /// ```sh
    /// $ pulumi import harness:index/user:User john_doe john.doe@example.com
    /// ```
    /// </summary>
    [HarnessResourceType("harness:index/user:User")]
    public partial class User : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The email of the user.
        /// </summary>
        [Output("email")]
        public Output<string> Email { get; private set; } = null!;

        /// <summary>
        /// The groups the user belongs to. This is only used during the creation of the user. The groups are not updated after the user is created. When using this option you should also set `lifecycle = { ignore_changes = ["group_ids"] }`.
        /// </summary>
        [Output("groupIds")]
        public Output<ImmutableArray<string>> GroupIds { get; private set; } = null!;

        /// <summary>
        /// Flag indicating whether or not the users email has been verified.
        /// </summary>
        [Output("isEmailVerified")]
        public Output<bool> IsEmailVerified { get; private set; } = null!;

        /// <summary>
        /// Flag indicating whether or not the user was imported from an identity provider.
        /// </summary>
        [Output("isImportedFromIdentityProvider")]
        public Output<bool> IsImportedFromIdentityProvider { get; private set; } = null!;

        /// <summary>
        /// Flag indicating whether or not the users password has expired.
        /// </summary>
        [Output("isPasswordExpired")]
        public Output<bool> IsPasswordExpired { get; private set; } = null!;

        /// <summary>
        /// Flag indicating whether or not two-factor authentication is enabled for the user.
        /// </summary>
        [Output("isTwoFactorAuthEnabled")]
        public Output<bool> IsTwoFactorAuthEnabled { get; private set; } = null!;

        /// <summary>
        /// Flag indicating whether or not the user is locked out.
        /// </summary>
        [Output("isUserLocked")]
        public Output<bool> IsUserLocked { get; private set; } = null!;

        /// <summary>
        /// The name of the user.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a User resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public User(string name, UserArgs args, CustomResourceOptions? options = null)
            : base("harness:index/user:User", name, args ?? new UserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private User(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
            : base("harness:index/user:User", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing User resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static User Get(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
        {
            return new User(name, id, state, options);
        }
    }

    public sealed class UserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The email of the user.
        /// </summary>
        [Input("email", required: true)]
        public Input<string> Email { get; set; } = null!;

        [Input("groupIds")]
        private InputList<string>? _groupIds;

        /// <summary>
        /// The groups the user belongs to. This is only used during the creation of the user. The groups are not updated after the user is created. When using this option you should also set `lifecycle = { ignore_changes = ["group_ids"] }`.
        /// </summary>
        public InputList<string> GroupIds
        {
            get => _groupIds ?? (_groupIds = new InputList<string>());
            set => _groupIds = value;
        }

        /// <summary>
        /// The name of the user.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public UserArgs()
        {
        }
        public static new UserArgs Empty => new UserArgs();
    }

    public sealed class UserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The email of the user.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        [Input("groupIds")]
        private InputList<string>? _groupIds;

        /// <summary>
        /// The groups the user belongs to. This is only used during the creation of the user. The groups are not updated after the user is created. When using this option you should also set `lifecycle = { ignore_changes = ["group_ids"] }`.
        /// </summary>
        public InputList<string> GroupIds
        {
            get => _groupIds ?? (_groupIds = new InputList<string>());
            set => _groupIds = value;
        }

        /// <summary>
        /// Flag indicating whether or not the users email has been verified.
        /// </summary>
        [Input("isEmailVerified")]
        public Input<bool>? IsEmailVerified { get; set; }

        /// <summary>
        /// Flag indicating whether or not the user was imported from an identity provider.
        /// </summary>
        [Input("isImportedFromIdentityProvider")]
        public Input<bool>? IsImportedFromIdentityProvider { get; set; }

        /// <summary>
        /// Flag indicating whether or not the users password has expired.
        /// </summary>
        [Input("isPasswordExpired")]
        public Input<bool>? IsPasswordExpired { get; set; }

        /// <summary>
        /// Flag indicating whether or not two-factor authentication is enabled for the user.
        /// </summary>
        [Input("isTwoFactorAuthEnabled")]
        public Input<bool>? IsTwoFactorAuthEnabled { get; set; }

        /// <summary>
        /// Flag indicating whether or not the user is locked out.
        /// </summary>
        [Input("isUserLocked")]
        public Input<bool>? IsUserLocked { get; set; }

        /// <summary>
        /// The name of the user.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public UserState()
        {
        }
        public static new UserState Empty => new UserState();
    }
}
