// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Autostopping
{
    public static class GetAwsProxy
    {
        /// <summary>
        /// Data source for AWS Autostopping proxy
        /// 
        /// ## Example Usage
        /// </summary>
        public static Task<GetAwsProxyResult> InvokeAsync(GetAwsProxyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAwsProxyResult>("harness:autostopping/getAwsProxy:getAwsProxy", args ?? new GetAwsProxyArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for AWS Autostopping proxy
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetAwsProxyResult> Invoke(GetAwsProxyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAwsProxyResult>("harness:autostopping/getAwsProxy:getAwsProxy", args ?? new GetAwsProxyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for AWS Autostopping proxy
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetAwsProxyResult> Invoke(GetAwsProxyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAwsProxyResult>("harness:autostopping/getAwsProxy:getAwsProxy", args ?? new GetAwsProxyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAwsProxyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Boolean value to indicate if proxy vm needs to have static IP
        /// </summary>
        [Input("allocateStaticIp")]
        public bool? AllocateStaticIp { get; set; }

        [Input("apiKey", required: true)]
        private string? _apiKey;

        /// <summary>
        /// Harness NG API key
        /// </summary>
        public string? ApiKey
        {
            get => _apiKey;
            set => _apiKey = value;
        }

        [Input("certificates")]
        public Inputs.GetAwsProxyCertificatesArgs? Certificates { get; set; }

        /// <summary>
        /// Id of the cloud connector
        /// </summary>
        [Input("cloudConnectorId", required: true)]
        public string CloudConnectorId { get; set; } = null!;

        [Input("deleteCloudResourcesOnDestroy", required: true)]
        public bool DeleteCloudResourcesOnDestroy { get; set; }

        /// <summary>
        /// Hostname for the proxy
        /// </summary>
        [Input("hostName", required: true)]
        public string HostName { get; set; } = null!;

        [Input("keypair")]
        public string? Keypair { get; set; }

        /// <summary>
        /// Machine instance type
        /// </summary>
        [Input("machineType", required: true)]
        public string MachineType { get; set; } = null!;

        /// <summary>
        /// Name of the proxy
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Region in which cloud resources are hosted
        /// </summary>
        [Input("region", required: true)]
        public string Region { get; set; } = null!;

        /// <summary>
        /// Route 53 hosted zone id
        /// </summary>
        [Input("route53HostedZoneId")]
        public string? Route53HostedZoneId { get; set; }

        [Input("securityGroups")]
        private List<string>? _securityGroups;

        /// <summary>
        /// Security Group to define the security rules that determine the inbound and outbound traffic
        /// </summary>
        public List<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new List<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// VPC in which cloud resources are hosted
        /// </summary>
        [Input("vpc", required: true)]
        public string Vpc { get; set; } = null!;

        public GetAwsProxyArgs()
        {
        }
        public static new GetAwsProxyArgs Empty => new GetAwsProxyArgs();
    }

    public sealed class GetAwsProxyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Boolean value to indicate if proxy vm needs to have static IP
        /// </summary>
        [Input("allocateStaticIp")]
        public Input<bool>? AllocateStaticIp { get; set; }

        [Input("apiKey", required: true)]
        private Input<string>? _apiKey;

        /// <summary>
        /// Harness NG API key
        /// </summary>
        public Input<string>? ApiKey
        {
            get => _apiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("certificates")]
        public Input<Inputs.GetAwsProxyCertificatesInputArgs>? Certificates { get; set; }

        /// <summary>
        /// Id of the cloud connector
        /// </summary>
        [Input("cloudConnectorId", required: true)]
        public Input<string> CloudConnectorId { get; set; } = null!;

        [Input("deleteCloudResourcesOnDestroy", required: true)]
        public Input<bool> DeleteCloudResourcesOnDestroy { get; set; } = null!;

        /// <summary>
        /// Hostname for the proxy
        /// </summary>
        [Input("hostName", required: true)]
        public Input<string> HostName { get; set; } = null!;

        [Input("keypair")]
        public Input<string>? Keypair { get; set; }

        /// <summary>
        /// Machine instance type
        /// </summary>
        [Input("machineType", required: true)]
        public Input<string> MachineType { get; set; } = null!;

        /// <summary>
        /// Name of the proxy
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Region in which cloud resources are hosted
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// Route 53 hosted zone id
        /// </summary>
        [Input("route53HostedZoneId")]
        public Input<string>? Route53HostedZoneId { get; set; }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// Security Group to define the security rules that determine the inbound and outbound traffic
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// VPC in which cloud resources are hosted
        /// </summary>
        [Input("vpc", required: true)]
        public Input<string> Vpc { get; set; } = null!;

        public GetAwsProxyInvokeArgs()
        {
        }
        public static new GetAwsProxyInvokeArgs Empty => new GetAwsProxyInvokeArgs();
    }


    [OutputType]
    public sealed class GetAwsProxyResult
    {
        /// <summary>
        /// Boolean value to indicate if proxy vm needs to have static IP
        /// </summary>
        public readonly bool? AllocateStaticIp;
        /// <summary>
        /// Harness NG API key
        /// </summary>
        public readonly string ApiKey;
        public readonly Outputs.GetAwsProxyCertificatesResult? Certificates;
        /// <summary>
        /// Id of the cloud connector
        /// </summary>
        public readonly string CloudConnectorId;
        public readonly bool DeleteCloudResourcesOnDestroy;
        /// <summary>
        /// Hostname for the proxy
        /// </summary>
        public readonly string HostName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier of the resource
        /// </summary>
        public readonly string Identifier;
        public readonly string? Keypair;
        /// <summary>
        /// Machine instance type
        /// </summary>
        public readonly string MachineType;
        /// <summary>
        /// Name of the proxy
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Region in which cloud resources are hosted
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// Route 53 hosted zone id
        /// </summary>
        public readonly string? Route53HostedZoneId;
        /// <summary>
        /// Security Group to define the security rules that determine the inbound and outbound traffic
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroups;
        /// <summary>
        /// VPC in which cloud resources are hosted
        /// </summary>
        public readonly string Vpc;

        [OutputConstructor]
        private GetAwsProxyResult(
            bool? allocateStaticIp,

            string apiKey,

            Outputs.GetAwsProxyCertificatesResult? certificates,

            string cloudConnectorId,

            bool deleteCloudResourcesOnDestroy,

            string hostName,

            string id,

            string identifier,

            string? keypair,

            string machineType,

            string name,

            string region,

            string? route53HostedZoneId,

            ImmutableArray<string> securityGroups,

            string vpc)
        {
            AllocateStaticIp = allocateStaticIp;
            ApiKey = apiKey;
            Certificates = certificates;
            CloudConnectorId = cloudConnectorId;
            DeleteCloudResourcesOnDestroy = deleteCloudResourcesOnDestroy;
            HostName = hostName;
            Id = id;
            Identifier = identifier;
            Keypair = keypair;
            MachineType = machineType;
            Name = name;
            Region = region;
            Route53HostedZoneId = route53HostedZoneId;
            SecurityGroups = securityGroups;
            Vpc = vpc;
        }
    }
}
