// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Autostopping
{
    /// <summary>
    /// Resource for creating a Harness Variables.
    /// </summary>
    [HarnessResourceType("harness:autostopping/ruleEcs:RuleEcs")]
    public partial class RuleEcs : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Id of the cloud connector
        /// </summary>
        [Output("cloudConnectorId")]
        public Output<string> CloudConnectorId { get; private set; } = null!;

        [Output("container")]
        public Output<Outputs.RuleEcsContainer?> Container { get; private set; } = null!;

        /// <summary>
        /// Custom URLs used to access the instances
        /// </summary>
        [Output("customDomains")]
        public Output<ImmutableArray<string>> CustomDomains { get; private set; } = null!;

        /// <summary>
        /// Dependent rules
        /// </summary>
        [Output("depends")]
        public Output<ImmutableArray<Outputs.RuleEcsDepend>> Depends { get; private set; } = null!;

        /// <summary>
        /// Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
        /// </summary>
        [Output("dryRun")]
        public Output<bool?> DryRun { get; private set; } = null!;

        /// <summary>
        /// Http routing configuration
        /// </summary>
        [Output("https")]
        public Output<ImmutableArray<Outputs.RuleEcsHttp>> Https { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the resource
        /// </summary>
        [Output("identifier")]
        public Output<double> Identifier { get; private set; } = null!;

        /// <summary>
        /// Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
        /// </summary>
        [Output("idleTimeMins")]
        public Output<int?> IdleTimeMins { get; private set; } = null!;

        /// <summary>
        /// Name of the rule
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a RuleEcs resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RuleEcs(string name, RuleEcsArgs args, CustomResourceOptions? options = null)
            : base("harness:autostopping/ruleEcs:RuleEcs", name, args ?? new RuleEcsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RuleEcs(string name, Input<string> id, RuleEcsState? state = null, CustomResourceOptions? options = null)
            : base("harness:autostopping/ruleEcs:RuleEcs", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RuleEcs resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RuleEcs Get(string name, Input<string> id, RuleEcsState? state = null, CustomResourceOptions? options = null)
        {
            return new RuleEcs(name, id, state, options);
        }
    }

    public sealed class RuleEcsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Id of the cloud connector
        /// </summary>
        [Input("cloudConnectorId", required: true)]
        public Input<string> CloudConnectorId { get; set; } = null!;

        [Input("container")]
        public Input<Inputs.RuleEcsContainerArgs>? Container { get; set; }

        [Input("customDomains")]
        private InputList<string>? _customDomains;

        /// <summary>
        /// Custom URLs used to access the instances
        /// </summary>
        public InputList<string> CustomDomains
        {
            get => _customDomains ?? (_customDomains = new InputList<string>());
            set => _customDomains = value;
        }

        [Input("depends")]
        private InputList<Inputs.RuleEcsDependArgs>? _depends;

        /// <summary>
        /// Dependent rules
        /// </summary>
        public InputList<Inputs.RuleEcsDependArgs> Depends
        {
            get => _depends ?? (_depends = new InputList<Inputs.RuleEcsDependArgs>());
            set => _depends = value;
        }

        /// <summary>
        /// Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        [Input("https")]
        private InputList<Inputs.RuleEcsHttpArgs>? _https;

        /// <summary>
        /// Http routing configuration
        /// </summary>
        public InputList<Inputs.RuleEcsHttpArgs> Https
        {
            get => _https ?? (_https = new InputList<Inputs.RuleEcsHttpArgs>());
            set => _https = value;
        }

        /// <summary>
        /// Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
        /// </summary>
        [Input("idleTimeMins")]
        public Input<int>? IdleTimeMins { get; set; }

        /// <summary>
        /// Name of the rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public RuleEcsArgs()
        {
        }
        public static new RuleEcsArgs Empty => new RuleEcsArgs();
    }

    public sealed class RuleEcsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Id of the cloud connector
        /// </summary>
        [Input("cloudConnectorId")]
        public Input<string>? CloudConnectorId { get; set; }

        [Input("container")]
        public Input<Inputs.RuleEcsContainerGetArgs>? Container { get; set; }

        [Input("customDomains")]
        private InputList<string>? _customDomains;

        /// <summary>
        /// Custom URLs used to access the instances
        /// </summary>
        public InputList<string> CustomDomains
        {
            get => _customDomains ?? (_customDomains = new InputList<string>());
            set => _customDomains = value;
        }

        [Input("depends")]
        private InputList<Inputs.RuleEcsDependGetArgs>? _depends;

        /// <summary>
        /// Dependent rules
        /// </summary>
        public InputList<Inputs.RuleEcsDependGetArgs> Depends
        {
            get => _depends ?? (_depends = new InputList<Inputs.RuleEcsDependGetArgs>());
            set => _depends = value;
        }

        /// <summary>
        /// Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        [Input("https")]
        private InputList<Inputs.RuleEcsHttpGetArgs>? _https;

        /// <summary>
        /// Http routing configuration
        /// </summary>
        public InputList<Inputs.RuleEcsHttpGetArgs> Https
        {
            get => _https ?? (_https = new InputList<Inputs.RuleEcsHttpGetArgs>());
            set => _https = value;
        }

        /// <summary>
        /// Unique identifier of the resource
        /// </summary>
        [Input("identifier")]
        public Input<double>? Identifier { get; set; }

        /// <summary>
        /// Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
        /// </summary>
        [Input("idleTimeMins")]
        public Input<int>? IdleTimeMins { get; set; }

        /// <summary>
        /// Name of the rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public RuleEcsState()
        {
        }
        public static new RuleEcsState Empty => new RuleEcsState();
    }
}
