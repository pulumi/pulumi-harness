// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Autostopping
{
    /// <summary>
    /// Resource for creating a Harness Variables.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Harness.Autostopping.RuleRds("test", new()
    ///     {
    ///         Name = "name",
    ///         CloudConnectorId = "cloud_connector_id",
    ///         IdleTimeMins = 10,
    ///         DryRun = true,
    ///         Database = new Harness.Autostopping.Inputs.RuleRdsDatabaseArgs
    ///         {
    ///             Id = "database_id",
    ///             Region = "region",
    ///         },
    ///         Tcps = new[]
    ///         {
    ///             new Harness.Autostopping.Inputs.RuleRdsTcpArgs
    ///             {
    ///                 ProxyId = "proxy_id",
    ///                 ForwardRules = new[]
    ///                 {
    ///                     new Harness.Autostopping.Inputs.RuleRdsTcpForwardRuleArgs
    ///                     {
    ///                         Port = 2233,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [HarnessResourceType("harness:autostopping/ruleRds:RuleRds")]
    public partial class RuleRds : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Id of the cloud connector
        /// </summary>
        [Output("cloudConnectorId")]
        public Output<string> CloudConnectorId { get; private set; } = null!;

        [Output("database")]
        public Output<Outputs.RuleRdsDatabase> Database { get; private set; } = null!;

        /// <summary>
        /// Dependent rules
        /// </summary>
        [Output("depends")]
        public Output<ImmutableArray<Outputs.RuleRdsDepend>> Depends { get; private set; } = null!;

        /// <summary>
        /// Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
        /// </summary>
        [Output("dryRun")]
        public Output<bool?> DryRun { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the resource
        /// </summary>
        [Output("identifier")]
        public Output<double> Identifier { get; private set; } = null!;

        /// <summary>
        /// Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
        /// </summary>
        [Output("idleTimeMins")]
        public Output<int?> IdleTimeMins { get; private set; } = null!;

        /// <summary>
        /// Name of the rule
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// TCP routing configuration
        /// </summary>
        [Output("tcps")]
        public Output<ImmutableArray<Outputs.RuleRdsTcp>> Tcps { get; private set; } = null!;


        /// <summary>
        /// Create a RuleRds resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RuleRds(string name, RuleRdsArgs args, CustomResourceOptions? options = null)
            : base("harness:autostopping/ruleRds:RuleRds", name, args ?? new RuleRdsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RuleRds(string name, Input<string> id, RuleRdsState? state = null, CustomResourceOptions? options = null)
            : base("harness:autostopping/ruleRds:RuleRds", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RuleRds resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RuleRds Get(string name, Input<string> id, RuleRdsState? state = null, CustomResourceOptions? options = null)
        {
            return new RuleRds(name, id, state, options);
        }
    }

    public sealed class RuleRdsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Id of the cloud connector
        /// </summary>
        [Input("cloudConnectorId", required: true)]
        public Input<string> CloudConnectorId { get; set; } = null!;

        [Input("database", required: true)]
        public Input<Inputs.RuleRdsDatabaseArgs> Database { get; set; } = null!;

        [Input("depends")]
        private InputList<Inputs.RuleRdsDependArgs>? _depends;

        /// <summary>
        /// Dependent rules
        /// </summary>
        public InputList<Inputs.RuleRdsDependArgs> Depends
        {
            get => _depends ?? (_depends = new InputList<Inputs.RuleRdsDependArgs>());
            set => _depends = value;
        }

        /// <summary>
        /// Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
        /// </summary>
        [Input("idleTimeMins")]
        public Input<int>? IdleTimeMins { get; set; }

        /// <summary>
        /// Name of the rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tcps")]
        private InputList<Inputs.RuleRdsTcpArgs>? _tcps;

        /// <summary>
        /// TCP routing configuration
        /// </summary>
        public InputList<Inputs.RuleRdsTcpArgs> Tcps
        {
            get => _tcps ?? (_tcps = new InputList<Inputs.RuleRdsTcpArgs>());
            set => _tcps = value;
        }

        public RuleRdsArgs()
        {
        }
        public static new RuleRdsArgs Empty => new RuleRdsArgs();
    }

    public sealed class RuleRdsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Id of the cloud connector
        /// </summary>
        [Input("cloudConnectorId")]
        public Input<string>? CloudConnectorId { get; set; }

        [Input("database")]
        public Input<Inputs.RuleRdsDatabaseGetArgs>? Database { get; set; }

        [Input("depends")]
        private InputList<Inputs.RuleRdsDependGetArgs>? _depends;

        /// <summary>
        /// Dependent rules
        /// </summary>
        public InputList<Inputs.RuleRdsDependGetArgs> Depends
        {
            get => _depends ?? (_depends = new InputList<Inputs.RuleRdsDependGetArgs>());
            set => _depends = value;
        }

        /// <summary>
        /// Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// Unique identifier of the resource
        /// </summary>
        [Input("identifier")]
        public Input<double>? Identifier { get; set; }

        /// <summary>
        /// Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
        /// </summary>
        [Input("idleTimeMins")]
        public Input<int>? IdleTimeMins { get; set; }

        /// <summary>
        /// Name of the rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tcps")]
        private InputList<Inputs.RuleRdsTcpGetArgs>? _tcps;

        /// <summary>
        /// TCP routing configuration
        /// </summary>
        public InputList<Inputs.RuleRdsTcpGetArgs> Tcps
        {
            get => _tcps ?? (_tcps = new InputList<Inputs.RuleRdsTcpGetArgs>());
            set => _tcps = value;
        }

        public RuleRdsState()
        {
        }
        public static new RuleRdsState Empty => new RuleRdsState();
    }
}
