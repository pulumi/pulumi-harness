// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Autostopping
{
    /// <summary>
    /// Resource for creating a fixed schedule for Harness AutoStopping rule
    /// </summary>
    [HarnessResourceType("harness:autostopping/schedule:Schedule")]
    public partial class Schedule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Time until which schedule will be active. Need to be in YYYY-MM-DD HH:mm:SS format. Eg 2006-01-02 15:04:05
        /// </summary>
        [Output("endingOn")]
        public Output<string?> EndingOn { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the schedule
        /// </summary>
        [Output("identifier")]
        public Output<double> Identifier { get; private set; } = null!;

        /// <summary>
        /// Name of the schedule
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// For defining periodic schedule. Periodic nature will be applicable from the time of creation of schedule, unless specific 'time_period' is specified
        /// </summary>
        [Output("repeats")]
        public Output<ImmutableArray<Outputs.ScheduleRepeat>> Repeats { get; private set; } = null!;

        /// <summary>
        /// ID of AutoStopping rules on which the schedule applies
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<double>> Rules { get; private set; } = null!;

        /// <summary>
        /// Type of the schedule. Valid values are `uptime` and `downtime`
        /// </summary>
        [Output("scheduleType")]
        public Output<string> ScheduleType { get; private set; } = null!;

        /// <summary>
        /// Time from which schedule will be active. Schedule will take immediate effect if starting_from is not specified. Need to be in YYYY-MM-DD HH:mm:SS format. Eg 2006-01-02 15:04:05
        /// </summary>
        [Output("startingFrom")]
        public Output<string?> StartingFrom { get; private set; } = null!;

        /// <summary>
        /// Time zone in which schedule needs to be executed
        /// </summary>
        [Output("timeZone")]
        public Output<string> TimeZone { get; private set; } = null!;


        /// <summary>
        /// Create a Schedule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Schedule(string name, ScheduleArgs args, CustomResourceOptions? options = null)
            : base("harness:autostopping/schedule:Schedule", name, args ?? new ScheduleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Schedule(string name, Input<string> id, ScheduleState? state = null, CustomResourceOptions? options = null)
            : base("harness:autostopping/schedule:Schedule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Schedule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Schedule Get(string name, Input<string> id, ScheduleState? state = null, CustomResourceOptions? options = null)
        {
            return new Schedule(name, id, state, options);
        }
    }

    public sealed class ScheduleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Time until which schedule will be active. Need to be in YYYY-MM-DD HH:mm:SS format. Eg 2006-01-02 15:04:05
        /// </summary>
        [Input("endingOn")]
        public Input<string>? EndingOn { get; set; }

        /// <summary>
        /// Name of the schedule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("repeats")]
        private InputList<Inputs.ScheduleRepeatArgs>? _repeats;

        /// <summary>
        /// For defining periodic schedule. Periodic nature will be applicable from the time of creation of schedule, unless specific 'time_period' is specified
        /// </summary>
        public InputList<Inputs.ScheduleRepeatArgs> Repeats
        {
            get => _repeats ?? (_repeats = new InputList<Inputs.ScheduleRepeatArgs>());
            set => _repeats = value;
        }

        [Input("rules", required: true)]
        private InputList<double>? _rules;

        /// <summary>
        /// ID of AutoStopping rules on which the schedule applies
        /// </summary>
        public InputList<double> Rules
        {
            get => _rules ?? (_rules = new InputList<double>());
            set => _rules = value;
        }

        /// <summary>
        /// Type of the schedule. Valid values are `uptime` and `downtime`
        /// </summary>
        [Input("scheduleType", required: true)]
        public Input<string> ScheduleType { get; set; } = null!;

        /// <summary>
        /// Time from which schedule will be active. Schedule will take immediate effect if starting_from is not specified. Need to be in YYYY-MM-DD HH:mm:SS format. Eg 2006-01-02 15:04:05
        /// </summary>
        [Input("startingFrom")]
        public Input<string>? StartingFrom { get; set; }

        /// <summary>
        /// Time zone in which schedule needs to be executed
        /// </summary>
        [Input("timeZone", required: true)]
        public Input<string> TimeZone { get; set; } = null!;

        public ScheduleArgs()
        {
        }
        public static new ScheduleArgs Empty => new ScheduleArgs();
    }

    public sealed class ScheduleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Time until which schedule will be active. Need to be in YYYY-MM-DD HH:mm:SS format. Eg 2006-01-02 15:04:05
        /// </summary>
        [Input("endingOn")]
        public Input<string>? EndingOn { get; set; }

        /// <summary>
        /// Unique identifier of the schedule
        /// </summary>
        [Input("identifier")]
        public Input<double>? Identifier { get; set; }

        /// <summary>
        /// Name of the schedule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("repeats")]
        private InputList<Inputs.ScheduleRepeatGetArgs>? _repeats;

        /// <summary>
        /// For defining periodic schedule. Periodic nature will be applicable from the time of creation of schedule, unless specific 'time_period' is specified
        /// </summary>
        public InputList<Inputs.ScheduleRepeatGetArgs> Repeats
        {
            get => _repeats ?? (_repeats = new InputList<Inputs.ScheduleRepeatGetArgs>());
            set => _repeats = value;
        }

        [Input("rules")]
        private InputList<double>? _rules;

        /// <summary>
        /// ID of AutoStopping rules on which the schedule applies
        /// </summary>
        public InputList<double> Rules
        {
            get => _rules ?? (_rules = new InputList<double>());
            set => _rules = value;
        }

        /// <summary>
        /// Type of the schedule. Valid values are `uptime` and `downtime`
        /// </summary>
        [Input("scheduleType")]
        public Input<string>? ScheduleType { get; set; }

        /// <summary>
        /// Time from which schedule will be active. Schedule will take immediate effect if starting_from is not specified. Need to be in YYYY-MM-DD HH:mm:SS format. Eg 2006-01-02 15:04:05
        /// </summary>
        [Input("startingFrom")]
        public Input<string>? StartingFrom { get; set; }

        /// <summary>
        /// Time zone in which schedule needs to be executed
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        public ScheduleState()
        {
        }
        public static new ScheduleState Empty => new ScheduleState();
    }
}
