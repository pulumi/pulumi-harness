// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Autostopping
{
    public static class GetAzureProxy
    {
        /// <summary>
        /// Data source for Azure Autostopping proxy
        /// </summary>
        public static Task<GetAzureProxyResult> InvokeAsync(GetAzureProxyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAzureProxyResult>("harness:autostopping/getAzureProxy:getAzureProxy", args ?? new GetAzureProxyArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for Azure Autostopping proxy
        /// </summary>
        public static Output<GetAzureProxyResult> Invoke(GetAzureProxyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAzureProxyResult>("harness:autostopping/getAzureProxy:getAzureProxy", args ?? new GetAzureProxyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for Azure Autostopping proxy
        /// </summary>
        public static Output<GetAzureProxyResult> Invoke(GetAzureProxyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAzureProxyResult>("harness:autostopping/getAzureProxy:getAzureProxy", args ?? new GetAzureProxyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAzureProxyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Boolean value to indicate if proxy vm needs to have static IP
        /// </summary>
        [Input("allocateStaticIp")]
        public bool? AllocateStaticIp { get; set; }

        [Input("apiKey", required: true)]
        private string? _apiKey;

        /// <summary>
        /// Harness NG API key
        /// </summary>
        public string? ApiKey
        {
            get => _apiKey;
            set => _apiKey = value;
        }

        [Input("certificateId")]
        public string? CertificateId { get; set; }

        [Input("certificates")]
        public Inputs.GetAzureProxyCertificatesArgs? Certificates { get; set; }

        /// <summary>
        /// Id of the cloud connector
        /// </summary>
        [Input("cloudConnectorId", required: true)]
        public string CloudConnectorId { get; set; } = null!;

        [Input("deleteCloudResourcesOnDestroy", required: true)]
        public bool DeleteCloudResourcesOnDestroy { get; set; }

        /// <summary>
        /// Hostname for the proxy
        /// </summary>
        [Input("hostName", required: true)]
        public string HostName { get; set; } = null!;

        /// <summary>
        /// Name of SSH Key to be used for proxy VM
        /// </summary>
        [Input("keypair", required: true)]
        public string Keypair { get; set; } = null!;

        /// <summary>
        /// Type of instance to be used for proxy
        /// </summary>
        [Input("machineType", required: true)]
        public string MachineType { get; set; } = null!;

        /// <summary>
        /// Name of the proxy
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Region in which cloud resources are hosted
        /// </summary>
        [Input("region", required: true)]
        public string Region { get; set; } = null!;

        /// <summary>
        /// Resource group in which cloud resources are hosted
        /// </summary>
        [Input("resourceGroup", required: true)]
        public string ResourceGroup { get; set; } = null!;

        [Input("securityGroups")]
        private List<string>? _securityGroups;

        /// <summary>
        /// Security Group to define the security rules that determine the inbound and outbound traffic
        /// </summary>
        public List<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new List<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// Subnet in which cloud resources are hosted
        /// </summary>
        [Input("subnetId", required: true)]
        public string SubnetId { get; set; } = null!;

        /// <summary>
        /// VPC in which cloud resources are hosted
        /// </summary>
        [Input("vpc", required: true)]
        public string Vpc { get; set; } = null!;

        public GetAzureProxyArgs()
        {
        }
        public static new GetAzureProxyArgs Empty => new GetAzureProxyArgs();
    }

    public sealed class GetAzureProxyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Boolean value to indicate if proxy vm needs to have static IP
        /// </summary>
        [Input("allocateStaticIp")]
        public Input<bool>? AllocateStaticIp { get; set; }

        [Input("apiKey", required: true)]
        private Input<string>? _apiKey;

        /// <summary>
        /// Harness NG API key
        /// </summary>
        public Input<string>? ApiKey
        {
            get => _apiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        [Input("certificates")]
        public Input<Inputs.GetAzureProxyCertificatesInputArgs>? Certificates { get; set; }

        /// <summary>
        /// Id of the cloud connector
        /// </summary>
        [Input("cloudConnectorId", required: true)]
        public Input<string> CloudConnectorId { get; set; } = null!;

        [Input("deleteCloudResourcesOnDestroy", required: true)]
        public Input<bool> DeleteCloudResourcesOnDestroy { get; set; } = null!;

        /// <summary>
        /// Hostname for the proxy
        /// </summary>
        [Input("hostName", required: true)]
        public Input<string> HostName { get; set; } = null!;

        /// <summary>
        /// Name of SSH Key to be used for proxy VM
        /// </summary>
        [Input("keypair", required: true)]
        public Input<string> Keypair { get; set; } = null!;

        /// <summary>
        /// Type of instance to be used for proxy
        /// </summary>
        [Input("machineType", required: true)]
        public Input<string> MachineType { get; set; } = null!;

        /// <summary>
        /// Name of the proxy
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Region in which cloud resources are hosted
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// Resource group in which cloud resources are hosted
        /// </summary>
        [Input("resourceGroup", required: true)]
        public Input<string> ResourceGroup { get; set; } = null!;

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// Security Group to define the security rules that determine the inbound and outbound traffic
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// Subnet in which cloud resources are hosted
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        /// <summary>
        /// VPC in which cloud resources are hosted
        /// </summary>
        [Input("vpc", required: true)]
        public Input<string> Vpc { get; set; } = null!;

        public GetAzureProxyInvokeArgs()
        {
        }
        public static new GetAzureProxyInvokeArgs Empty => new GetAzureProxyInvokeArgs();
    }


    [OutputType]
    public sealed class GetAzureProxyResult
    {
        /// <summary>
        /// Boolean value to indicate if proxy vm needs to have static IP
        /// </summary>
        public readonly bool? AllocateStaticIp;
        /// <summary>
        /// Harness NG API key
        /// </summary>
        public readonly string ApiKey;
        public readonly string? CertificateId;
        public readonly Outputs.GetAzureProxyCertificatesResult? Certificates;
        /// <summary>
        /// Id of the cloud connector
        /// </summary>
        public readonly string CloudConnectorId;
        public readonly bool DeleteCloudResourcesOnDestroy;
        /// <summary>
        /// Hostname for the proxy
        /// </summary>
        public readonly string HostName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier of the resource
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// Name of SSH Key to be used for proxy VM
        /// </summary>
        public readonly string Keypair;
        /// <summary>
        /// Type of instance to be used for proxy
        /// </summary>
        public readonly string MachineType;
        /// <summary>
        /// Name of the proxy
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Region in which cloud resources are hosted
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// Resource group in which cloud resources are hosted
        /// </summary>
        public readonly string ResourceGroup;
        /// <summary>
        /// Security Group to define the security rules that determine the inbound and outbound traffic
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroups;
        /// <summary>
        /// Subnet in which cloud resources are hosted
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// VPC in which cloud resources are hosted
        /// </summary>
        public readonly string Vpc;

        [OutputConstructor]
        private GetAzureProxyResult(
            bool? allocateStaticIp,

            string apiKey,

            string? certificateId,

            Outputs.GetAzureProxyCertificatesResult? certificates,

            string cloudConnectorId,

            bool deleteCloudResourcesOnDestroy,

            string hostName,

            string id,

            string identifier,

            string keypair,

            string machineType,

            string name,

            string region,

            string resourceGroup,

            ImmutableArray<string> securityGroups,

            string subnetId,

            string vpc)
        {
            AllocateStaticIp = allocateStaticIp;
            ApiKey = apiKey;
            CertificateId = certificateId;
            Certificates = certificates;
            CloudConnectorId = cloudConnectorId;
            DeleteCloudResourcesOnDestroy = deleteCloudResourcesOnDestroy;
            HostName = hostName;
            Id = id;
            Identifier = identifier;
            Keypair = keypair;
            MachineType = machineType;
            Name = name;
            Region = region;
            ResourceGroup = resourceGroup;
            SecurityGroups = securityGroups;
            SubnetId = subnetId;
            Vpc = vpc;
        }
    }
}
