// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Autostopping
{
    public static class GetAzureGateway
    {
        /// <summary>
        /// Data source for AWS Autostopping proxy
        /// </summary>
        public static Task<GetAzureGatewayResult> InvokeAsync(GetAzureGatewayArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAzureGatewayResult>("harness:autostopping/getAzureGateway:getAzureGateway", args ?? new GetAzureGatewayArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for AWS Autostopping proxy
        /// </summary>
        public static Output<GetAzureGatewayResult> Invoke(GetAzureGatewayInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAzureGatewayResult>("harness:autostopping/getAzureGateway:getAzureGateway", args ?? new GetAzureGatewayInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for AWS Autostopping proxy
        /// </summary>
        public static Output<GetAzureGatewayResult> Invoke(GetAzureGatewayInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAzureGatewayResult>("harness:autostopping/getAzureGateway:getAzureGateway", args ?? new GetAzureGatewayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAzureGatewayArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of Azure AppGateway for importing
        /// </summary>
        [Input("appGatewayId")]
        public string? AppGatewayId { get; set; }

        /// <summary>
        /// Region in which azure cloud function will be provisioned
        /// </summary>
        [Input("azureFuncRegion", required: true)]
        public string AzureFuncRegion { get; set; } = null!;

        /// <summary>
        /// ID of existing SSL certificate from AppGateway being imported. Required only for SSL based rules
        /// </summary>
        [Input("certificateId")]
        public string? CertificateId { get; set; }

        /// <summary>
        /// Id of the cloud connector
        /// </summary>
        [Input("cloudConnectorId", required: true)]
        public string CloudConnectorId { get; set; } = null!;

        [Input("deleteCloudResourcesOnDestroy", required: true)]
        public bool DeleteCloudResourcesOnDestroy { get; set; }

        /// <summary>
        /// ID of IP address to be used. Required only for creating new AppGateway. See https://learn.microsoft.com/en-us/azure/application-gateway/application-gateway-components#static-versus-dynamic-public-ip-address for more details
        /// </summary>
        [Input("frontendIp")]
        public string? FrontendIp { get; set; }

        /// <summary>
        /// Hostname for the proxy
        /// </summary>
        [Input("hostName", required: true)]
        public string HostName { get; set; } = null!;

        /// <summary>
        /// Name of the proxy
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Region in which cloud resources are hosted
        /// </summary>
        [Input("region", required: true)]
        public string Region { get; set; } = null!;

        /// <summary>
        /// Resource group in which cloud resources are hosted
        /// </summary>
        [Input("resourceGroup", required: true)]
        public string ResourceGroup { get; set; } = null!;

        /// <summary>
        /// Size of machine used for the gateway
        /// </summary>
        [Input("skuSize")]
        public string? SkuSize { get; set; }

        /// <summary>
        /// Subnet in which cloud resources are hosted
        /// </summary>
        [Input("subnetId")]
        public string? SubnetId { get; set; }

        /// <summary>
        /// VPC in which cloud resources are hosted
        /// </summary>
        [Input("vpc", required: true)]
        public string Vpc { get; set; } = null!;

        public GetAzureGatewayArgs()
        {
        }
        public static new GetAzureGatewayArgs Empty => new GetAzureGatewayArgs();
    }

    public sealed class GetAzureGatewayInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of Azure AppGateway for importing
        /// </summary>
        [Input("appGatewayId")]
        public Input<string>? AppGatewayId { get; set; }

        /// <summary>
        /// Region in which azure cloud function will be provisioned
        /// </summary>
        [Input("azureFuncRegion", required: true)]
        public Input<string> AzureFuncRegion { get; set; } = null!;

        /// <summary>
        /// ID of existing SSL certificate from AppGateway being imported. Required only for SSL based rules
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// Id of the cloud connector
        /// </summary>
        [Input("cloudConnectorId", required: true)]
        public Input<string> CloudConnectorId { get; set; } = null!;

        [Input("deleteCloudResourcesOnDestroy", required: true)]
        public Input<bool> DeleteCloudResourcesOnDestroy { get; set; } = null!;

        /// <summary>
        /// ID of IP address to be used. Required only for creating new AppGateway. See https://learn.microsoft.com/en-us/azure/application-gateway/application-gateway-components#static-versus-dynamic-public-ip-address for more details
        /// </summary>
        [Input("frontendIp")]
        public Input<string>? FrontendIp { get; set; }

        /// <summary>
        /// Hostname for the proxy
        /// </summary>
        [Input("hostName", required: true)]
        public Input<string> HostName { get; set; } = null!;

        /// <summary>
        /// Name of the proxy
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Region in which cloud resources are hosted
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// Resource group in which cloud resources are hosted
        /// </summary>
        [Input("resourceGroup", required: true)]
        public Input<string> ResourceGroup { get; set; } = null!;

        /// <summary>
        /// Size of machine used for the gateway
        /// </summary>
        [Input("skuSize")]
        public Input<string>? SkuSize { get; set; }

        /// <summary>
        /// Subnet in which cloud resources are hosted
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// VPC in which cloud resources are hosted
        /// </summary>
        [Input("vpc", required: true)]
        public Input<string> Vpc { get; set; } = null!;

        public GetAzureGatewayInvokeArgs()
        {
        }
        public static new GetAzureGatewayInvokeArgs Empty => new GetAzureGatewayInvokeArgs();
    }


    [OutputType]
    public sealed class GetAzureGatewayResult
    {
        /// <summary>
        /// ID of Azure AppGateway for importing
        /// </summary>
        public readonly string? AppGatewayId;
        /// <summary>
        /// Region in which azure cloud function will be provisioned
        /// </summary>
        public readonly string AzureFuncRegion;
        /// <summary>
        /// ID of existing SSL certificate from AppGateway being imported. Required only for SSL based rules
        /// </summary>
        public readonly string? CertificateId;
        /// <summary>
        /// Id of the cloud connector
        /// </summary>
        public readonly string CloudConnectorId;
        public readonly bool DeleteCloudResourcesOnDestroy;
        /// <summary>
        /// ID of IP address to be used. Required only for creating new AppGateway. See https://learn.microsoft.com/en-us/azure/application-gateway/application-gateway-components#static-versus-dynamic-public-ip-address for more details
        /// </summary>
        public readonly string? FrontendIp;
        /// <summary>
        /// Hostname for the proxy
        /// </summary>
        public readonly string HostName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier of the resource
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// Name of the proxy
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Region in which cloud resources are hosted
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// Resource group in which cloud resources are hosted
        /// </summary>
        public readonly string ResourceGroup;
        /// <summary>
        /// Size of machine used for the gateway
        /// </summary>
        public readonly string? SkuSize;
        /// <summary>
        /// Subnet in which cloud resources are hosted
        /// </summary>
        public readonly string? SubnetId;
        /// <summary>
        /// VPC in which cloud resources are hosted
        /// </summary>
        public readonly string Vpc;

        [OutputConstructor]
        private GetAzureGatewayResult(
            string? appGatewayId,

            string azureFuncRegion,

            string? certificateId,

            string cloudConnectorId,

            bool deleteCloudResourcesOnDestroy,

            string? frontendIp,

            string hostName,

            string id,

            string identifier,

            string name,

            string region,

            string resourceGroup,

            string? skuSize,

            string? subnetId,

            string vpc)
        {
            AppGatewayId = appGatewayId;
            AzureFuncRegion = azureFuncRegion;
            CertificateId = certificateId;
            CloudConnectorId = cloudConnectorId;
            DeleteCloudResourcesOnDestroy = deleteCloudResourcesOnDestroy;
            FrontendIp = frontendIp;
            HostName = hostName;
            Id = id;
            Identifier = identifier;
            Name = name;
            Region = region;
            ResourceGroup = resourceGroup;
            SkuSize = skuSize;
            SubnetId = subnetId;
            Vpc = vpc;
        }
    }
}
