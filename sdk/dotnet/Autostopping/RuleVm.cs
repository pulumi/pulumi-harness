// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Autostopping
{
    /// <summary>
    /// Resource for creating a Harness Variables.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Harness.Autostopping.RuleVm("test", new()
    ///     {
    ///         Name = "name",
    ///         CloudConnectorId = "cloud_connector_id",
    ///         IdleTimeMins = 10,
    ///         DryRun = true,
    ///         Filter = new Harness.Autostopping.Inputs.RuleVmFilterArgs
    ///         {
    ///             VmIds = new[]
    ///             {
    ///                 "/subscriptions/subscription_id/resourceGroups/resource_group/providers/Microsoft.Compute/virtualMachines/virtual_machine",
    ///             },
    ///             Regions = new[]
    ///             {
    ///                 "useast2",
    ///             },
    ///         },
    ///         Https = new[]
    ///         {
    ///             new Harness.Autostopping.Inputs.RuleVmHttpArgs
    ///             {
    ///                 ProxyId = "proxy_id",
    ///                 Routings = new[]
    ///                 {
    ///                     new Harness.Autostopping.Inputs.RuleVmHttpRoutingArgs
    ///                     {
    ///                         SourceProtocol = "https",
    ///                         TargetProtocol = "https",
    ///                         SourcePort = 443,
    ///                         TargetPort = 443,
    ///                         Action = "forward",
    ///                     },
    ///                     new Harness.Autostopping.Inputs.RuleVmHttpRoutingArgs
    ///                     {
    ///                         SourceProtocol = "http",
    ///                         TargetProtocol = "http",
    ///                         SourcePort = 80,
    ///                         TargetPort = 80,
    ///                         Action = "forward",
    ///                     },
    ///                 },
    ///                 Healths = new[]
    ///                 {
    ///                     new Harness.Autostopping.Inputs.RuleVmHttpHealthArgs
    ///                     {
    ///                         Protocol = "http",
    ///                         Port = 80,
    ///                         Path = "/",
    ///                         Timeout = 30,
    ///                         StatusCodeFrom = 200,
    ///                         StatusCodeTo = 299,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Tcps = new[]
    ///         {
    ///             new Harness.Autostopping.Inputs.RuleVmTcpArgs
    ///             {
    ///                 ProxyId = "proxy_id",
    ///                 Sshes = new[]
    ///                 {
    ///                     new Harness.Autostopping.Inputs.RuleVmTcpSshArgs
    ///                     {
    ///                         Port = 22,
    ///                     },
    ///                 },
    ///                 Rdps = new[]
    ///                 {
    ///                     new Harness.Autostopping.Inputs.RuleVmTcpRdpArgs
    ///                     {
    ///                         Port = 3389,
    ///                     },
    ///                 },
    ///                 ForwardRules = new[]
    ///                 {
    ///                     new Harness.Autostopping.Inputs.RuleVmTcpForwardRuleArgs
    ///                     {
    ///                         Port = 2233,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Depends = new[]
    ///         {
    ///             new Harness.Autostopping.Inputs.RuleVmDependArgs
    ///             {
    ///                 RuleId = 24576,
    ///                 DelayInSec = 5,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [HarnessResourceType("harness:autostopping/ruleVm:RuleVm")]
    public partial class RuleVm : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Id of the cloud connector
        /// </summary>
        [Output("cloudConnectorId")]
        public Output<string> CloudConnectorId { get; private set; } = null!;

        /// <summary>
        /// Custom URLs used to access the instances
        /// </summary>
        [Output("customDomains")]
        public Output<ImmutableArray<string>> CustomDomains { get; private set; } = null!;

        /// <summary>
        /// Dependent rules
        /// </summary>
        [Output("depends")]
        public Output<ImmutableArray<Outputs.RuleVmDepend>> Depends { get; private set; } = null!;

        /// <summary>
        /// Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
        /// </summary>
        [Output("dryRun")]
        public Output<bool?> DryRun { get; private set; } = null!;

        [Output("filter")]
        public Output<Outputs.RuleVmFilter> Filter { get; private set; } = null!;

        /// <summary>
        /// Http routing configuration
        /// </summary>
        [Output("https")]
        public Output<ImmutableArray<Outputs.RuleVmHttp>> Https { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the resource
        /// </summary>
        [Output("identifier")]
        public Output<double> Identifier { get; private set; } = null!;

        /// <summary>
        /// Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
        /// </summary>
        [Output("idleTimeMins")]
        public Output<int?> IdleTimeMins { get; private set; } = null!;

        /// <summary>
        /// Name of the rule
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// TCP routing configuration
        /// </summary>
        [Output("tcps")]
        public Output<ImmutableArray<Outputs.RuleVmTcp>> Tcps { get; private set; } = null!;

        /// <summary>
        /// Boolean that indicates whether the selected instances should be converted to spot vm
        /// </summary>
        [Output("useSpot")]
        public Output<bool?> UseSpot { get; private set; } = null!;


        /// <summary>
        /// Create a RuleVm resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RuleVm(string name, RuleVmArgs args, CustomResourceOptions? options = null)
            : base("harness:autostopping/ruleVm:RuleVm", name, args ?? new RuleVmArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RuleVm(string name, Input<string> id, RuleVmState? state = null, CustomResourceOptions? options = null)
            : base("harness:autostopping/ruleVm:RuleVm", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RuleVm resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RuleVm Get(string name, Input<string> id, RuleVmState? state = null, CustomResourceOptions? options = null)
        {
            return new RuleVm(name, id, state, options);
        }
    }

    public sealed class RuleVmArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Id of the cloud connector
        /// </summary>
        [Input("cloudConnectorId", required: true)]
        public Input<string> CloudConnectorId { get; set; } = null!;

        [Input("customDomains")]
        private InputList<string>? _customDomains;

        /// <summary>
        /// Custom URLs used to access the instances
        /// </summary>
        public InputList<string> CustomDomains
        {
            get => _customDomains ?? (_customDomains = new InputList<string>());
            set => _customDomains = value;
        }

        [Input("depends")]
        private InputList<Inputs.RuleVmDependArgs>? _depends;

        /// <summary>
        /// Dependent rules
        /// </summary>
        public InputList<Inputs.RuleVmDependArgs> Depends
        {
            get => _depends ?? (_depends = new InputList<Inputs.RuleVmDependArgs>());
            set => _depends = value;
        }

        /// <summary>
        /// Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        [Input("filter", required: true)]
        public Input<Inputs.RuleVmFilterArgs> Filter { get; set; } = null!;

        [Input("https")]
        private InputList<Inputs.RuleVmHttpArgs>? _https;

        /// <summary>
        /// Http routing configuration
        /// </summary>
        public InputList<Inputs.RuleVmHttpArgs> Https
        {
            get => _https ?? (_https = new InputList<Inputs.RuleVmHttpArgs>());
            set => _https = value;
        }

        /// <summary>
        /// Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
        /// </summary>
        [Input("idleTimeMins")]
        public Input<int>? IdleTimeMins { get; set; }

        /// <summary>
        /// Name of the rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tcps")]
        private InputList<Inputs.RuleVmTcpArgs>? _tcps;

        /// <summary>
        /// TCP routing configuration
        /// </summary>
        public InputList<Inputs.RuleVmTcpArgs> Tcps
        {
            get => _tcps ?? (_tcps = new InputList<Inputs.RuleVmTcpArgs>());
            set => _tcps = value;
        }

        /// <summary>
        /// Boolean that indicates whether the selected instances should be converted to spot vm
        /// </summary>
        [Input("useSpot")]
        public Input<bool>? UseSpot { get; set; }

        public RuleVmArgs()
        {
        }
        public static new RuleVmArgs Empty => new RuleVmArgs();
    }

    public sealed class RuleVmState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Id of the cloud connector
        /// </summary>
        [Input("cloudConnectorId")]
        public Input<string>? CloudConnectorId { get; set; }

        [Input("customDomains")]
        private InputList<string>? _customDomains;

        /// <summary>
        /// Custom URLs used to access the instances
        /// </summary>
        public InputList<string> CustomDomains
        {
            get => _customDomains ?? (_customDomains = new InputList<string>());
            set => _customDomains = value;
        }

        [Input("depends")]
        private InputList<Inputs.RuleVmDependGetArgs>? _depends;

        /// <summary>
        /// Dependent rules
        /// </summary>
        public InputList<Inputs.RuleVmDependGetArgs> Depends
        {
            get => _depends ?? (_depends = new InputList<Inputs.RuleVmDependGetArgs>());
            set => _depends = value;
        }

        /// <summary>
        /// Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        [Input("filter")]
        public Input<Inputs.RuleVmFilterGetArgs>? Filter { get; set; }

        [Input("https")]
        private InputList<Inputs.RuleVmHttpGetArgs>? _https;

        /// <summary>
        /// Http routing configuration
        /// </summary>
        public InputList<Inputs.RuleVmHttpGetArgs> Https
        {
            get => _https ?? (_https = new InputList<Inputs.RuleVmHttpGetArgs>());
            set => _https = value;
        }

        /// <summary>
        /// Unique identifier of the resource
        /// </summary>
        [Input("identifier")]
        public Input<double>? Identifier { get; set; }

        /// <summary>
        /// Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
        /// </summary>
        [Input("idleTimeMins")]
        public Input<int>? IdleTimeMins { get; set; }

        /// <summary>
        /// Name of the rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tcps")]
        private InputList<Inputs.RuleVmTcpGetArgs>? _tcps;

        /// <summary>
        /// TCP routing configuration
        /// </summary>
        public InputList<Inputs.RuleVmTcpGetArgs> Tcps
        {
            get => _tcps ?? (_tcps = new InputList<Inputs.RuleVmTcpGetArgs>());
            set => _tcps = value;
        }

        /// <summary>
        /// Boolean that indicates whether the selected instances should be converted to spot vm
        /// </summary>
        [Input("useSpot")]
        public Input<bool>? UseSpot { get; set; }

        public RuleVmState()
        {
        }
        public static new RuleVmState Empty => new RuleVmState();
    }
}
