// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Outputs
{

    [OutputType]
    public sealed class InfrastructureDefinitionAwsAmi
    {
        /// <summary>
        /// The ami deployment type to use. Valid options are AWS_ASG, SPOTINST
        /// </summary>
        public readonly string AmiDeploymentType;
        /// <summary>
        /// Flag to indicate whether the autoscaling group identifies the workload.
        /// </summary>
        public readonly bool? AsgIdentifiesWorkload;
        /// <summary>
        /// The name of the autoscaling group.
        /// </summary>
        public readonly string? AutoscalingGroupName;
        /// <summary>
        /// The classic load balancers to use.
        /// </summary>
        public readonly ImmutableArray<string> ClassicLoadbalancers;
        /// <summary>
        /// The name of the cloud provider to connect with.
        /// </summary>
        public readonly string CloudProviderName;
        /// <summary>
        /// The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}
        /// </summary>
        public readonly string? HostnameConvention;
        /// <summary>
        /// The region to deploy to.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The name of the SpotInst cloud provider to connect with.
        /// </summary>
        public readonly string? SpotinstCloudProviderName;
        /// <summary>
        /// The SpotInst configuration to use.
        /// </summary>
        public readonly string? SpotinstConfigJson;
        /// <summary>
        /// The staging classic load balancers to use.
        /// </summary>
        public readonly ImmutableArray<string> StageClassicLoadbalancers;
        /// <summary>
        /// The staging classic load balancers to use.
        /// </summary>
        public readonly ImmutableArray<string> StageTargetGroupArns;
        /// <summary>
        /// The ARN's of the target groups.
        /// </summary>
        public readonly ImmutableArray<string> TargetGroupArns;
        /// <summary>
        /// Flag to enable traffic shifting.
        /// </summary>
        public readonly bool? UseTrafficShift;

        [OutputConstructor]
        private InfrastructureDefinitionAwsAmi(
            string amiDeploymentType,

            bool? asgIdentifiesWorkload,

            string? autoscalingGroupName,

            ImmutableArray<string> classicLoadbalancers,

            string cloudProviderName,

            string? hostnameConvention,

            string region,

            string? spotinstCloudProviderName,

            string? spotinstConfigJson,

            ImmutableArray<string> stageClassicLoadbalancers,

            ImmutableArray<string> stageTargetGroupArns,

            ImmutableArray<string> targetGroupArns,

            bool? useTrafficShift)
        {
            AmiDeploymentType = amiDeploymentType;
            AsgIdentifiesWorkload = asgIdentifiesWorkload;
            AutoscalingGroupName = autoscalingGroupName;
            ClassicLoadbalancers = classicLoadbalancers;
            CloudProviderName = cloudProviderName;
            HostnameConvention = hostnameConvention;
            Region = region;
            SpotinstCloudProviderName = spotinstCloudProviderName;
            SpotinstConfigJson = spotinstConfigJson;
            StageClassicLoadbalancers = stageClassicLoadbalancers;
            StageTargetGroupArns = stageTargetGroupArns;
            TargetGroupArns = targetGroupArns;
            UseTrafficShift = useTrafficShift;
        }
    }
}
