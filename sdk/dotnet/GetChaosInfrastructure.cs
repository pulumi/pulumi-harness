// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness
{
    public static class GetChaosInfrastructure
    {
        /// <summary>
        /// Data source for retrieving a chaos infrastructure.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.GetChaosInfrastructure.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///         EnvironmentId = "env_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetChaosInfrastructureResult> InvokeAsync(GetChaosInfrastructureArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetChaosInfrastructureResult>("harness:index/getChaosInfrastructure:getChaosInfrastructure", args ?? new GetChaosInfrastructureArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a chaos infrastructure.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.GetChaosInfrastructure.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///         EnvironmentId = "env_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetChaosInfrastructureResult> Invoke(GetChaosInfrastructureInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetChaosInfrastructureResult>("harness:index/getChaosInfrastructure:getChaosInfrastructure", args ?? new GetChaosInfrastructureInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a chaos infrastructure.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.GetChaosInfrastructure.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///         EnvironmentId = "env_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetChaosInfrastructureResult> Invoke(GetChaosInfrastructureInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetChaosInfrastructureResult>("harness:index/getChaosInfrastructure:getChaosInfrastructure", args ?? new GetChaosInfrastructureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetChaosInfrastructureArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Environment identifier of the chaos infrastructure.
        /// </summary>
        [Input("environmentId", required: true)]
        public string EnvironmentId { get; set; } = null!;

        /// <summary>
        /// Identifier of the chaos infrastructure.
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        /// <summary>
        /// Identifier of the organization in which the chaos infrastructure is configured.
        /// </summary>
        [Input("orgId", required: true)]
        public string OrgId { get; set; } = null!;

        /// <summary>
        /// Identifier of the project in which the chaos infrastructure is configured.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetChaosInfrastructureArgs()
        {
        }
        public static new GetChaosInfrastructureArgs Empty => new GetChaosInfrastructureArgs();
    }

    public sealed class GetChaosInfrastructureInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Environment identifier of the chaos infrastructure.
        /// </summary>
        [Input("environmentId", required: true)]
        public Input<string> EnvironmentId { get; set; } = null!;

        /// <summary>
        /// Identifier of the chaos infrastructure.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Identifier of the organization in which the chaos infrastructure is configured.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// Identifier of the project in which the chaos infrastructure is configured.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetChaosInfrastructureInvokeArgs()
        {
        }
        public static new GetChaosInfrastructureInvokeArgs Empty => new GetChaosInfrastructureInvokeArgs();
    }


    [OutputType]
    public sealed class GetChaosInfrastructureResult
    {
        /// <summary>
        /// Environment identifier of the chaos infrastructure.
        /// </summary>
        public readonly string EnvironmentId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identifier of the chaos infrastructure.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// Identifier of the organization in which the chaos infrastructure is configured.
        /// </summary>
        public readonly string OrgId;
        /// <summary>
        /// Identifier of the project in which the chaos infrastructure is configured.
        /// </summary>
        public readonly string ProjectId;

        [OutputConstructor]
        private GetChaosInfrastructureResult(
            string environmentId,

            string id,

            string identifier,

            string orgId,

            string projectId)
        {
            EnvironmentId = environmentId;
            Id = id;
            Identifier = identifier;
            OrgId = orgId;
            ProjectId = projectId;
        }
    }
}
