// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness
{
    /// <summary>
    /// Resource for creating an environment
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Harness.Application("test", new()
    ///     {
    ///         Name = "%[1]s",
    ///     });
    /// 
    ///     var testKubernetes = new Harness.Service.Kubernetes("test", new()
    ///     {
    ///         AppId = test.Id,
    ///         Name = "%[1]s",
    ///         HelmVersion = "V2",
    ///         Description = "description",
    ///         Variables = new[]
    ///         {
    ///             new Harness.Service.Inputs.KubernetesVariableArgs
    ///             {
    ///                 Name = "test",
    ///                 Value = "test_value",
    ///                 Type = "TEXT",
    ///             },
    ///             new Harness.Service.Inputs.KubernetesVariableArgs
    ///             {
    ///                 Name = "test2",
    ///                 Value = "test_value2",
    ///                 Type = "TEXT",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var testEnvironment = new Harness.Environment("test", new()
    ///     {
    ///         AppId = test.Id,
    ///         Name = "%[1]s",
    ///         Type = "%[2]s",
    ///         VariableOverrides = new[]
    ///         {
    ///             new Harness.Inputs.EnvironmentVariableOverrideArgs
    ///             {
    ///                 ServiceName = testKubernetes.Name,
    ///                 Name = "test",
    ///                 Value = "override",
    ///                 Type = "TEXT",
    ///             },
    ///             new Harness.Inputs.EnvironmentVariableOverrideArgs
    ///             {
    ///                 ServiceName = testKubernetes.Name,
    ///                 Name = "test2",
    ///                 Value = "override2",
    ///                 Type = "TEXT",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Import using the Harness application id and environment id.
    /// 
    /// ```sh
    /// $ pulumi import harness:index/environment:Environment dev &lt;application_id&gt;/&lt;environment_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:index/environment:Environment")]
    public partial class Environment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The id of the application.
        /// </summary>
        [Output("appId")]
        public Output<string> AppId { get; private set; } = null!;

        /// <summary>
        /// The description of the environment.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the environment.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The type of the environment. Valid values are `PROD` and `NON_PROD`
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Override for a service variable
        /// </summary>
        [Output("variableOverrides")]
        public Output<ImmutableArray<Outputs.EnvironmentVariableOverride>> VariableOverrides { get; private set; } = null!;


        /// <summary>
        /// Create a Environment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Environment(string name, EnvironmentArgs args, CustomResourceOptions? options = null)
            : base("harness:index/environment:Environment", name, args ?? new EnvironmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Environment(string name, Input<string> id, EnvironmentState? state = null, CustomResourceOptions? options = null)
            : base("harness:index/environment:Environment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Environment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Environment Get(string name, Input<string> id, EnvironmentState? state = null, CustomResourceOptions? options = null)
        {
            return new Environment(name, id, state, options);
        }
    }

    public sealed class EnvironmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the application.
        /// </summary>
        [Input("appId", required: true)]
        public Input<string> AppId { get; set; } = null!;

        /// <summary>
        /// The description of the environment.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the environment.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The type of the environment. Valid values are `PROD` and `NON_PROD`
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("variableOverrides")]
        private InputList<Inputs.EnvironmentVariableOverrideArgs>? _variableOverrides;

        /// <summary>
        /// Override for a service variable
        /// </summary>
        public InputList<Inputs.EnvironmentVariableOverrideArgs> VariableOverrides
        {
            get => _variableOverrides ?? (_variableOverrides = new InputList<Inputs.EnvironmentVariableOverrideArgs>());
            set => _variableOverrides = value;
        }

        public EnvironmentArgs()
        {
        }
        public static new EnvironmentArgs Empty => new EnvironmentArgs();
    }

    public sealed class EnvironmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the application.
        /// </summary>
        [Input("appId")]
        public Input<string>? AppId { get; set; }

        /// <summary>
        /// The description of the environment.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the environment.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The type of the environment. Valid values are `PROD` and `NON_PROD`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("variableOverrides")]
        private InputList<Inputs.EnvironmentVariableOverrideGetArgs>? _variableOverrides;

        /// <summary>
        /// Override for a service variable
        /// </summary>
        public InputList<Inputs.EnvironmentVariableOverrideGetArgs> VariableOverrides
        {
            get => _variableOverrides ?? (_variableOverrides = new InputList<Inputs.EnvironmentVariableOverrideGetArgs>());
            set => _variableOverrides = value;
        }

        public EnvironmentState()
        {
        }
        public static new EnvironmentState Empty => new EnvironmentState();
    }
}
