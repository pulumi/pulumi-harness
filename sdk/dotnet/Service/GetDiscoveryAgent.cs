// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Service
{
    public static class GetDiscoveryAgent
    {
        /// <summary>
        /// Data source for retrieving a Harness Service Discovery Agent.
        /// 
        /// This data source allows you to fetch details of a Service Discovery Agent using either its unique identifier or name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Data source to fetch a specific agent by name
        ///     var byName = Harness.Service.GetDiscoveryAgent.Invoke(new()
        ///     {
        ///         Name = "example-agent",
        ///         OrgIdentifier = orgIdentifier,
        ///         ProjectIdentifier = projectIdentifier,
        ///         EnvironmentIdentifier = environmentIdentifier,
        ///     });
        /// 
        ///     // Data source to fetch a specific agent by identity
        ///     var byIdentity = Harness.Service.GetDiscoveryAgent.Invoke(new()
        ///     {
        ///         Identity = "example-infra",
        ///         OrgIdentifier = orgIdentifier,
        ///         ProjectIdentifier = projectIdentifier,
        ///         EnvironmentIdentifier = environmentIdentifier,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["agentDetailsByName"] = byName,
        ///         ["agentDetailsByIdentity"] = byIdentity,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetDiscoveryAgentResult> InvokeAsync(GetDiscoveryAgentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDiscoveryAgentResult>("harness:service/getDiscoveryAgent:getDiscoveryAgent", args ?? new GetDiscoveryAgentArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Service Discovery Agent.
        /// 
        /// This data source allows you to fetch details of a Service Discovery Agent using either its unique identifier or name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Data source to fetch a specific agent by name
        ///     var byName = Harness.Service.GetDiscoveryAgent.Invoke(new()
        ///     {
        ///         Name = "example-agent",
        ///         OrgIdentifier = orgIdentifier,
        ///         ProjectIdentifier = projectIdentifier,
        ///         EnvironmentIdentifier = environmentIdentifier,
        ///     });
        /// 
        ///     // Data source to fetch a specific agent by identity
        ///     var byIdentity = Harness.Service.GetDiscoveryAgent.Invoke(new()
        ///     {
        ///         Identity = "example-infra",
        ///         OrgIdentifier = orgIdentifier,
        ///         ProjectIdentifier = projectIdentifier,
        ///         EnvironmentIdentifier = environmentIdentifier,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["agentDetailsByName"] = byName,
        ///         ["agentDetailsByIdentity"] = byIdentity,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetDiscoveryAgentResult> Invoke(GetDiscoveryAgentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDiscoveryAgentResult>("harness:service/getDiscoveryAgent:getDiscoveryAgent", args ?? new GetDiscoveryAgentInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Service Discovery Agent.
        /// 
        /// This data source allows you to fetch details of a Service Discovery Agent using either its unique identifier or name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Data source to fetch a specific agent by name
        ///     var byName = Harness.Service.GetDiscoveryAgent.Invoke(new()
        ///     {
        ///         Name = "example-agent",
        ///         OrgIdentifier = orgIdentifier,
        ///         ProjectIdentifier = projectIdentifier,
        ///         EnvironmentIdentifier = environmentIdentifier,
        ///     });
        /// 
        ///     // Data source to fetch a specific agent by identity
        ///     var byIdentity = Harness.Service.GetDiscoveryAgent.Invoke(new()
        ///     {
        ///         Identity = "example-infra",
        ///         OrgIdentifier = orgIdentifier,
        ///         ProjectIdentifier = projectIdentifier,
        ///         EnvironmentIdentifier = environmentIdentifier,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["agentDetailsByName"] = byName,
        ///         ["agentDetailsByIdentity"] = byIdentity,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetDiscoveryAgentResult> Invoke(GetDiscoveryAgentInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDiscoveryAgentResult>("harness:service/getDiscoveryAgent:getDiscoveryAgent", args ?? new GetDiscoveryAgentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDiscoveryAgentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The environment identifier of the agent. This is a required field.
        /// </summary>
        [Input("environmentIdentifier", required: true)]
        public string EnvironmentIdentifier { get; set; } = null!;

        /// <summary>
        /// The unique identity of the agent. Either this or 'name' must be provided.
        /// </summary>
        [Input("identity")]
        public string? Identity { get; set; }

        /// <summary>
        /// The name of the agent. Either this or 'identity' must be provided.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The organization identifier of the agent (optional). Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
        /// </summary>
        [Input("orgIdentifier")]
        public string? OrgIdentifier { get; set; }

        /// <summary>
        /// The project identifier of the agent (optional). Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
        /// </summary>
        [Input("projectIdentifier")]
        public string? ProjectIdentifier { get; set; }

        public GetDiscoveryAgentArgs()
        {
        }
        public static new GetDiscoveryAgentArgs Empty => new GetDiscoveryAgentArgs();
    }

    public sealed class GetDiscoveryAgentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The environment identifier of the agent. This is a required field.
        /// </summary>
        [Input("environmentIdentifier", required: true)]
        public Input<string> EnvironmentIdentifier { get; set; } = null!;

        /// <summary>
        /// The unique identity of the agent. Either this or 'name' must be provided.
        /// </summary>
        [Input("identity")]
        public Input<string>? Identity { get; set; }

        /// <summary>
        /// The name of the agent. Either this or 'identity' must be provided.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization identifier of the agent (optional). Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
        /// </summary>
        [Input("orgIdentifier")]
        public Input<string>? OrgIdentifier { get; set; }

        /// <summary>
        /// The project identifier of the agent (optional). Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
        /// </summary>
        [Input("projectIdentifier")]
        public Input<string>? ProjectIdentifier { get; set; }

        public GetDiscoveryAgentInvokeArgs()
        {
        }
        public static new GetDiscoveryAgentInvokeArgs Empty => new GetDiscoveryAgentInvokeArgs();
    }


    [OutputType]
    public sealed class GetDiscoveryAgentResult
    {
        /// <summary>
        /// Configuration for the agent.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDiscoveryAgentConfigResult> Configs;
        /// <summary>
        /// Correlation ID for the agent.
        /// </summary>
        public readonly string CorrelationId;
        /// <summary>
        /// Timestamp when the agent was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// User who created the agent.
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// Description of the agent.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The environment identifier of the agent. This is a required field.
        /// </summary>
        public readonly string EnvironmentIdentifier;
        /// <summary>
        /// The unique identifier of the agent.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The unique identity of the agent. Either this or 'name' must be provided.
        /// </summary>
        public readonly string? Identity;
        /// <summary>
        /// Installation details of the agent.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDiscoveryAgentInstallationDetailResult> InstallationDetails;
        /// <summary>
        /// Type of installation for the agent.
        /// </summary>
        public readonly string InstallationType;
        /// <summary>
        /// The name of the agent. Either this or 'identity' must be provided.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Number of network maps associated with this agent.
        /// </summary>
        public readonly int NetworkMapCount;
        /// <summary>
        /// The organization identifier of the agent (optional). Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
        /// </summary>
        public readonly string? OrgIdentifier;
        /// <summary>
        /// Whether this is a permanent installation.
        /// </summary>
        public readonly bool PermanentInstallation;
        /// <summary>
        /// The project identifier of the agent (optional). Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
        /// </summary>
        public readonly string? ProjectIdentifier;
        /// <summary>
        /// Whether the agent has been removed.
        /// </summary>
        public readonly bool Removed;
        /// <summary>
        /// Timestamp when the agent was removed.
        /// </summary>
        public readonly string RemovedAt;
        /// <summary>
        /// Number of services managed by this agent.
        /// </summary>
        public readonly int ServiceCount;
        /// <summary>
        /// Key-value list of resource tags for the agent.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Timestamp when the agent was last updated.
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// User who last updated the agent.
        /// </summary>
        public readonly string UpdatedBy;
        /// <summary>
        /// Webhook URL for the agent.
        /// </summary>
        public readonly string WebhookUrl;

        [OutputConstructor]
        private GetDiscoveryAgentResult(
            ImmutableArray<Outputs.GetDiscoveryAgentConfigResult> configs,

            string correlationId,

            string createdAt,

            string createdBy,

            string description,

            string environmentIdentifier,

            string id,

            string? identity,

            ImmutableArray<Outputs.GetDiscoveryAgentInstallationDetailResult> installationDetails,

            string installationType,

            string? name,

            int networkMapCount,

            string? orgIdentifier,

            bool permanentInstallation,

            string? projectIdentifier,

            bool removed,

            string removedAt,

            int serviceCount,

            ImmutableArray<string> tags,

            string updatedAt,

            string updatedBy,

            string webhookUrl)
        {
            Configs = configs;
            CorrelationId = correlationId;
            CreatedAt = createdAt;
            CreatedBy = createdBy;
            Description = description;
            EnvironmentIdentifier = environmentIdentifier;
            Id = id;
            Identity = identity;
            InstallationDetails = installationDetails;
            InstallationType = installationType;
            Name = name;
            NetworkMapCount = networkMapCount;
            OrgIdentifier = orgIdentifier;
            PermanentInstallation = permanentInstallation;
            ProjectIdentifier = projectIdentifier;
            Removed = removed;
            RemovedAt = removedAt;
            ServiceCount = serviceCount;
            Tags = tags;
            UpdatedAt = updatedAt;
            UpdatedBy = updatedBy;
            WebhookUrl = webhookUrl;
        }
    }
}
