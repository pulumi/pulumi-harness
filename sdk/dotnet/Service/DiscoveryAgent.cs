// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Service
{
    /// <summary>
    /// Resource for managing a Harness Service Discovery Agent.
    /// 
    /// This resource allows you to create, read, update, and delete a Service Discovery Agent in Harness.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Harness.Service.DiscoveryAgent("example", new()
    ///     {
    ///         Name = "ExampleAgent",
    ///         OrgIdentifier = "your_org_id",
    ///         ProjectIdentifier = "your_project_id",
    ///         EnvironmentIdentifier = "your_environment_id",
    ///         InfraIdentifier = "your_infra_id",
    ///         Configs = new[]
    ///         {
    ///             new Harness.Service.Inputs.DiscoveryAgentConfigArgs
    ///             {
    ///                 CollectorImage = "harness/service-discovery-collector:main-latest",
    ///                 LogWatcherImage = "harness/chaos-log-watcher:main-latest",
    ///                 Kubernetes = new[]
    ///                 {
    ///                     new Harness.Service.Inputs.DiscoveryAgentConfigKuberneteArgs
    ///                     {
    ///                         Namespace = "harness-sd",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Additional Examples
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a new service discovery agent with minimal configuration
    ///     var example = new Harness.Service.DiscoveryAgent("example", new()
    ///     {
    ///         Name = "example-agent",
    ///         OrgIdentifier = orgIdentifier,
    ///         ProjectIdentifier = projectIdentifier,
    ///         EnvironmentIdentifier = environmentIdentifier,
    ///         InfraIdentifier = "example-infra",
    ///         Configs = new[]
    ///         {
    ///             new Harness.Service.Inputs.DiscoveryAgentConfigArgs
    ///             {
    ///                 Kubernetes = new[]
    ///                 {
    ///                     new Harness.Service.Inputs.DiscoveryAgentConfigKuberneteArgs
    ///                     {
    ///                         Namespace = "harness-sd",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Create a new service discovery agent with node agent enabled
    ///     var nodeAgent = new Harness.Service.DiscoveryAgent("node_agent", new()
    ///     {
    ///         Name = "node-agent-example",
    ///         OrgIdentifier = orgIdentifier,
    ///         ProjectIdentifier = projectIdentifier,
    ///         EnvironmentIdentifier = environmentIdentifier,
    ///         InfraIdentifier = "node-agent-example",
    ///         Configs = new[]
    ///         {
    ///             new Harness.Service.Inputs.DiscoveryAgentConfigArgs
    ///             {
    ///                 Kubernetes = new[]
    ///                 {
    ///                     new Harness.Service.Inputs.DiscoveryAgentConfigKuberneteArgs
    ///                     {
    ///                         Namespace = "harness-sd",
    ///                     },
    ///                 },
    ///                 Datas = new[]
    ///                 {
    ///                     new Harness.Service.Inputs.DiscoveryAgentConfigDataArgs
    ///                     {
    ///                         EnableNodeAgent = true,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Create a new service discovery agent with full configuration
    ///     var fullConfig = new Harness.Service.DiscoveryAgent("full_config", new()
    ///     {
    ///         Name = "full-config-example",
    ///         OrgIdentifier = orgIdentifier,
    ///         ProjectIdentifier = projectIdentifier,
    ///         EnvironmentIdentifier = environmentIdentifier,
    ///         InfraIdentifier = "full-config-example",
    ///         PermanentInstallation = false,
    ///         CorrelationId = "full-config-correlation-123",
    ///         Configs = new[]
    ///         {
    ///             new Harness.Service.Inputs.DiscoveryAgentConfigArgs
    ///             {
    ///                 CollectorImage = "harness/service-discovery-collector:main-latest",
    ///                 LogWatcherImage = "harness/chaos-log-watcher:main-latest",
    ///                 SkipSecureVerify = false,
    ///                 Kubernetes = new[]
    ///                 {
    ///                     new Harness.Service.Inputs.DiscoveryAgentConfigKuberneteArgs
    ///                     {
    ///                         Namespace = "harness-sd",
    ///                         ServiceAccount = "harness-sd-sa",
    ///                         ImagePullPolicy = "IfNotPresent",
    ///                         RunAsUser = 2000,
    ///                         RunAsGroup = 2000,
    ///                         Labels = 
    ///                         {
    ///                             { "app", "service-discovery" },
    ///                             { "env", "dev" },
    ///                         },
    ///                         Annotations = 
    ///                         {
    ///                             { "example.com/annotation", "value" },
    ///                         },
    ///                         NodeSelector = 
    ///                         {
    ///                             { "kubernetes.io/os", "linux" },
    ///                         },
    ///                         Resources = new[]
    ///                         {
    ///                             new Harness.Service.Inputs.DiscoveryAgentConfigKuberneteResourceArgs
    ///                             {
    ///                                 Limits = 
    ///                                 {
    ///                                     { "cpu", "500m" },
    ///                                     { "memory", "512Mi" },
    ///                                 },
    ///                                 Requests = 
    ///                                 {
    ///                                     { "cpu", "250m" },
    ///                                     { "memory", "256Mi" },
    ///                                 },
    ///                             },
    ///                         },
    ///                         Tolerations = new[]
    ///                         {
    ///                             new Harness.Service.Inputs.DiscoveryAgentConfigKuberneteTolerationArgs
    ///                             {
    ///                                 Key = "key1",
    ///                                 Operator = "Equal",
    ///                                 Value = "value1",
    ///                                 Effect = "NoSchedule",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 Datas = new[]
    ///                 {
    ///                     new Harness.Service.Inputs.DiscoveryAgentConfigDataArgs
    ///                     {
    ///                         EnableNodeAgent = true,
    ///                         NodeAgentSelector = "node-role.kubernetes.io/worker=",
    ///                         EnableBatchResources = true,
    ///                         EnableOrphanedPod = true,
    ///                         NamespaceSelector = "environment=dev",
    ///                         CollectionWindowInMin = 15,
    ///                         BlacklistedNamespaces = new[]
    ///                         {
    ///                             "kube-system",
    ///                             "kube-public",
    ///                         },
    ///                         ObservedNamespaces = new[]
    ///                         {
    ///                             "default",
    ///                             "harness",
    ///                         },
    ///                         Crons = new[]
    ///                         {
    ///                             new Harness.Service.Inputs.DiscoveryAgentConfigDataCronArgs
    ///                             {
    ///                                 Expression = "0/10 * * * *",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 Mtls = new[]
    ///                 {
    ///                     new Harness.Service.Inputs.DiscoveryAgentConfigMtlArgs
    ///                     {
    ///                         CertPath = "/etc/certs/tls.crt",
    ///                         KeyPath = "/etc/certs/tls.key",
    ///                         SecretName = "mtls-secret",
    ///                         Url = "https://mtls.example.com:8443",
    ///                     },
    ///                 },
    ///                 Proxies = new[]
    ///                 {
    ///                     new Harness.Service.Inputs.DiscoveryAgentConfigProxyArgs
    ///                     {
    ///                         HttpProxy = "http://proxy.example.com:8080",
    ///                         HttpsProxy = "https://proxy.example.com:8080",
    ///                         NoProxy = "localhost,127.0.0.1,.svc,.cluster.local",
    ///                         Url = "https://proxy.example.com",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import Project level Service Discovery Agent
    /// 
    /// Account and Org level agents are not supported yet
    /// 
    /// ```sh
    /// $ pulumi import harness:service/discoveryAgent:DiscoveryAgent example &lt;org_identifier&gt;/&lt;project_identifier&gt;/&lt;environment_identifier&gt;/&lt;infra_identifier&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:service/discoveryAgent:DiscoveryAgent")]
    public partial class DiscoveryAgent : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration for the agent. This is a required field.
        /// </summary>
        [Output("configs")]
        public Output<ImmutableArray<Outputs.DiscoveryAgentConfig>> Configs { get; private set; } = null!;

        /// <summary>
        /// Correlation ID for the agent.
        /// </summary>
        [Output("correlationId")]
        public Output<string> CorrelationId { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the agent was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// User who created the agent.
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// Description of the agent.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The environment identifier of the agent. This is a required field.
        /// </summary>
        [Output("environmentIdentifier")]
        public Output<string> EnvironmentIdentifier { get; private set; } = null!;

        /// <summary>
        /// The unique identity of the agent.
        /// </summary>
        [Output("identity")]
        public Output<string> Identity { get; private set; } = null!;

        /// <summary>
        /// The infrastructure identifier of the agent. This is a required field.
        /// </summary>
        [Output("infraIdentifier")]
        public Output<string> InfraIdentifier { get; private set; } = null!;

        /// <summary>
        /// Installation details of the agent.
        /// </summary>
        [Output("installationDetails")]
        public Output<ImmutableArray<Outputs.DiscoveryAgentInstallationDetail>> InstallationDetails { get; private set; } = null!;

        /// <summary>
        /// Type of installation for the agent.
        /// </summary>
        [Output("installationType")]
        public Output<string?> InstallationType { get; private set; } = null!;

        /// <summary>
        /// The name of the agent. This is a required field.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Number of network maps associated with this agent.
        /// </summary>
        [Output("networkMapCount")]
        public Output<int> NetworkMapCount { get; private set; } = null!;

        /// <summary>
        /// The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
        /// </summary>
        [Output("orgIdentifier")]
        public Output<string?> OrgIdentifier { get; private set; } = null!;

        /// <summary>
        /// Whether this is a permanent installation.
        /// </summary>
        [Output("permanentInstallation")]
        public Output<bool?> PermanentInstallation { get; private set; } = null!;

        /// <summary>
        /// The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
        /// </summary>
        [Output("projectIdentifier")]
        public Output<string?> ProjectIdentifier { get; private set; } = null!;

        /// <summary>
        /// Whether the agent has been removed.
        /// </summary>
        [Output("removed")]
        public Output<bool> Removed { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the agent was removed.
        /// </summary>
        [Output("removedAt")]
        public Output<string> RemovedAt { get; private set; } = null!;

        /// <summary>
        /// Number of services managed by this agent.
        /// </summary>
        [Output("serviceCount")]
        public Output<int> ServiceCount { get; private set; } = null!;

        /// <summary>
        /// List of resource tags for the agent.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the agent was last updated.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// User who last updated the agent.
        /// </summary>
        [Output("updatedBy")]
        public Output<string> UpdatedBy { get; private set; } = null!;

        /// <summary>
        /// Webhook URL for the agent.
        /// </summary>
        [Output("webhookUrl")]
        public Output<string?> WebhookUrl { get; private set; } = null!;


        /// <summary>
        /// Create a DiscoveryAgent resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DiscoveryAgent(string name, DiscoveryAgentArgs args, CustomResourceOptions? options = null)
            : base("harness:service/discoveryAgent:DiscoveryAgent", name, args ?? new DiscoveryAgentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DiscoveryAgent(string name, Input<string> id, DiscoveryAgentState? state = null, CustomResourceOptions? options = null)
            : base("harness:service/discoveryAgent:DiscoveryAgent", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DiscoveryAgent resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DiscoveryAgent Get(string name, Input<string> id, DiscoveryAgentState? state = null, CustomResourceOptions? options = null)
        {
            return new DiscoveryAgent(name, id, state, options);
        }
    }

    public sealed class DiscoveryAgentArgs : global::Pulumi.ResourceArgs
    {
        [Input("configs", required: true)]
        private InputList<Inputs.DiscoveryAgentConfigArgs>? _configs;

        /// <summary>
        /// Configuration for the agent. This is a required field.
        /// </summary>
        public InputList<Inputs.DiscoveryAgentConfigArgs> Configs
        {
            get => _configs ?? (_configs = new InputList<Inputs.DiscoveryAgentConfigArgs>());
            set => _configs = value;
        }

        /// <summary>
        /// Correlation ID for the agent.
        /// </summary>
        [Input("correlationId")]
        public Input<string>? CorrelationId { get; set; }

        /// <summary>
        /// The environment identifier of the agent. This is a required field.
        /// </summary>
        [Input("environmentIdentifier", required: true)]
        public Input<string> EnvironmentIdentifier { get; set; } = null!;

        /// <summary>
        /// The infrastructure identifier of the agent. This is a required field.
        /// </summary>
        [Input("infraIdentifier", required: true)]
        public Input<string> InfraIdentifier { get; set; } = null!;

        /// <summary>
        /// Type of installation for the agent.
        /// </summary>
        [Input("installationType")]
        public Input<string>? InstallationType { get; set; }

        /// <summary>
        /// The name of the agent. This is a required field.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
        /// </summary>
        [Input("orgIdentifier")]
        public Input<string>? OrgIdentifier { get; set; }

        /// <summary>
        /// Whether this is a permanent installation.
        /// </summary>
        [Input("permanentInstallation")]
        public Input<bool>? PermanentInstallation { get; set; }

        /// <summary>
        /// The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
        /// </summary>
        [Input("projectIdentifier")]
        public Input<string>? ProjectIdentifier { get; set; }

        /// <summary>
        /// Webhook URL for the agent.
        /// </summary>
        [Input("webhookUrl")]
        public Input<string>? WebhookUrl { get; set; }

        public DiscoveryAgentArgs()
        {
        }
        public static new DiscoveryAgentArgs Empty => new DiscoveryAgentArgs();
    }

    public sealed class DiscoveryAgentState : global::Pulumi.ResourceArgs
    {
        [Input("configs")]
        private InputList<Inputs.DiscoveryAgentConfigGetArgs>? _configs;

        /// <summary>
        /// Configuration for the agent. This is a required field.
        /// </summary>
        public InputList<Inputs.DiscoveryAgentConfigGetArgs> Configs
        {
            get => _configs ?? (_configs = new InputList<Inputs.DiscoveryAgentConfigGetArgs>());
            set => _configs = value;
        }

        /// <summary>
        /// Correlation ID for the agent.
        /// </summary>
        [Input("correlationId")]
        public Input<string>? CorrelationId { get; set; }

        /// <summary>
        /// Timestamp when the agent was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// User who created the agent.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// Description of the agent.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The environment identifier of the agent. This is a required field.
        /// </summary>
        [Input("environmentIdentifier")]
        public Input<string>? EnvironmentIdentifier { get; set; }

        /// <summary>
        /// The unique identity of the agent.
        /// </summary>
        [Input("identity")]
        public Input<string>? Identity { get; set; }

        /// <summary>
        /// The infrastructure identifier of the agent. This is a required field.
        /// </summary>
        [Input("infraIdentifier")]
        public Input<string>? InfraIdentifier { get; set; }

        [Input("installationDetails")]
        private InputList<Inputs.DiscoveryAgentInstallationDetailGetArgs>? _installationDetails;

        /// <summary>
        /// Installation details of the agent.
        /// </summary>
        public InputList<Inputs.DiscoveryAgentInstallationDetailGetArgs> InstallationDetails
        {
            get => _installationDetails ?? (_installationDetails = new InputList<Inputs.DiscoveryAgentInstallationDetailGetArgs>());
            set => _installationDetails = value;
        }

        /// <summary>
        /// Type of installation for the agent.
        /// </summary>
        [Input("installationType")]
        public Input<string>? InstallationType { get; set; }

        /// <summary>
        /// The name of the agent. This is a required field.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Number of network maps associated with this agent.
        /// </summary>
        [Input("networkMapCount")]
        public Input<int>? NetworkMapCount { get; set; }

        /// <summary>
        /// The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
        /// </summary>
        [Input("orgIdentifier")]
        public Input<string>? OrgIdentifier { get; set; }

        /// <summary>
        /// Whether this is a permanent installation.
        /// </summary>
        [Input("permanentInstallation")]
        public Input<bool>? PermanentInstallation { get; set; }

        /// <summary>
        /// The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
        /// </summary>
        [Input("projectIdentifier")]
        public Input<string>? ProjectIdentifier { get; set; }

        /// <summary>
        /// Whether the agent has been removed.
        /// </summary>
        [Input("removed")]
        public Input<bool>? Removed { get; set; }

        /// <summary>
        /// Timestamp when the agent was removed.
        /// </summary>
        [Input("removedAt")]
        public Input<string>? RemovedAt { get; set; }

        /// <summary>
        /// Number of services managed by this agent.
        /// </summary>
        [Input("serviceCount")]
        public Input<int>? ServiceCount { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// List of resource tags for the agent.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Timestamp when the agent was last updated.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// User who last updated the agent.
        /// </summary>
        [Input("updatedBy")]
        public Input<string>? UpdatedBy { get; set; }

        /// <summary>
        /// Webhook URL for the agent.
        /// </summary>
        [Input("webhookUrl")]
        public Input<string>? WebhookUrl { get; set; }

        public DiscoveryAgentState()
        {
        }
        public static new DiscoveryAgentState Empty => new DiscoveryAgentState();
    }
}
