// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Service
{
    /// <summary>
    /// Resource for creating an AWS CodeDeploy service. This resource uses the config-as-code API's. When updating the `Name` or `Path` of this resource you should typically also set the `CreateBeforeDestroy = true` lifecycle setting.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Harness.Application("example", new()
    ///     {
    ///         Name = "example",
    ///     });
    /// 
    ///     var exampleCodedeploy = new Harness.Service.Codedeploy("example", new()
    ///     {
    ///         AppId = example.Id,
    ///         Name = "aws-codedeploy",
    ///         Description = "Service for AWS codedeploy applications.",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import using the Harness application id and service id
    /// 
    /// ```sh
    /// $ pulumi import harness:service/codedeploy:Codedeploy example &lt;app_id&gt;/&lt;svc_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:service/codedeploy:Codedeploy")]
    public partial class Codedeploy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The id of the application the service belongs to
        /// </summary>
        [Output("appId")]
        public Output<string> AppId { get; private set; } = null!;

        /// <summary>
        /// Description of th service
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Name of the service
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Variables to be used in the service
        /// </summary>
        [Output("variables")]
        public Output<ImmutableArray<Outputs.CodedeployVariable>> Variables { get; private set; } = null!;


        /// <summary>
        /// Create a Codedeploy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Codedeploy(string name, CodedeployArgs args, CustomResourceOptions? options = null)
            : base("harness:service/codedeploy:Codedeploy", name, args ?? new CodedeployArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Codedeploy(string name, Input<string> id, CodedeployState? state = null, CustomResourceOptions? options = null)
            : base("harness:service/codedeploy:Codedeploy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Codedeploy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Codedeploy Get(string name, Input<string> id, CodedeployState? state = null, CustomResourceOptions? options = null)
        {
            return new Codedeploy(name, id, state, options);
        }
    }

    public sealed class CodedeployArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the application the service belongs to
        /// </summary>
        [Input("appId", required: true)]
        public Input<string> AppId { get; set; } = null!;

        /// <summary>
        /// Description of th service
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the service
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("variables")]
        private InputList<Inputs.CodedeployVariableArgs>? _variables;

        /// <summary>
        /// Variables to be used in the service
        /// </summary>
        public InputList<Inputs.CodedeployVariableArgs> Variables
        {
            get => _variables ?? (_variables = new InputList<Inputs.CodedeployVariableArgs>());
            set => _variables = value;
        }

        public CodedeployArgs()
        {
        }
        public static new CodedeployArgs Empty => new CodedeployArgs();
    }

    public sealed class CodedeployState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the application the service belongs to
        /// </summary>
        [Input("appId")]
        public Input<string>? AppId { get; set; }

        /// <summary>
        /// Description of th service
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the service
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("variables")]
        private InputList<Inputs.CodedeployVariableGetArgs>? _variables;

        /// <summary>
        /// Variables to be used in the service
        /// </summary>
        public InputList<Inputs.CodedeployVariableGetArgs> Variables
        {
            get => _variables ?? (_variables = new InputList<Inputs.CodedeployVariableGetArgs>());
            set => _variables = value;
        }

        public CodedeployState()
        {
        }
        public static new CodedeployState Empty => new CodedeployState();
    }
}
