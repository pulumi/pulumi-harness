// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Service
{
    public static class GetDiscoverySetting
    {
        /// <summary>
        /// Data source for retrieving service discovery settings.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Data source to fetch service discovery setting by name
        ///     var example = Harness.Service.GetDiscoverySetting.Invoke(new()
        ///     {
        ///         OrgIdentifier = "&lt;org_identifier&gt;",
        ///         ProjectIdentifier = "&lt;project_identifier&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDiscoverySettingResult> InvokeAsync(GetDiscoverySettingArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDiscoverySettingResult>("harness:service/getDiscoverySetting:getDiscoverySetting", args ?? new GetDiscoverySettingArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving service discovery settings.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Data source to fetch service discovery setting by name
        ///     var example = Harness.Service.GetDiscoverySetting.Invoke(new()
        ///     {
        ///         OrgIdentifier = "&lt;org_identifier&gt;",
        ///         ProjectIdentifier = "&lt;project_identifier&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDiscoverySettingResult> Invoke(GetDiscoverySettingInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDiscoverySettingResult>("harness:service/getDiscoverySetting:getDiscoverySetting", args ?? new GetDiscoverySettingInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving service discovery settings.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Data source to fetch service discovery setting by name
        ///     var example = Harness.Service.GetDiscoverySetting.Invoke(new()
        ///     {
        ///         OrgIdentifier = "&lt;org_identifier&gt;",
        ///         ProjectIdentifier = "&lt;project_identifier&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDiscoverySettingResult> Invoke(GetDiscoverySettingInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDiscoverySettingResult>("harness:service/getDiscoverySetting:getDiscoverySetting", args ?? new GetDiscoverySettingInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDiscoverySettingArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Correlation ID for the request.
        /// </summary>
        [Input("correlationId")]
        public string? CorrelationId { get; set; }

        /// <summary>
        /// The organization identifier.
        /// </summary>
        [Input("orgIdentifier")]
        public string? OrgIdentifier { get; set; }

        /// <summary>
        /// The project identifier.
        /// </summary>
        [Input("projectIdentifier")]
        public string? ProjectIdentifier { get; set; }

        public GetDiscoverySettingArgs()
        {
        }
        public static new GetDiscoverySettingArgs Empty => new GetDiscoverySettingArgs();
    }

    public sealed class GetDiscoverySettingInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Correlation ID for the request.
        /// </summary>
        [Input("correlationId")]
        public Input<string>? CorrelationId { get; set; }

        /// <summary>
        /// The organization identifier.
        /// </summary>
        [Input("orgIdentifier")]
        public Input<string>? OrgIdentifier { get; set; }

        /// <summary>
        /// The project identifier.
        /// </summary>
        [Input("projectIdentifier")]
        public Input<string>? ProjectIdentifier { get; set; }

        public GetDiscoverySettingInvokeArgs()
        {
        }
        public static new GetDiscoverySettingInvokeArgs Empty => new GetDiscoverySettingInvokeArgs();
    }


    [OutputType]
    public sealed class GetDiscoverySettingResult
    {
        /// <summary>
        /// Correlation ID for the request.
        /// </summary>
        public readonly string? CorrelationId;
        /// <summary>
        /// Timestamp when the setting was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Image registry configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDiscoverySettingImageRegistryResult> ImageRegistries;
        /// <summary>
        /// The organization identifier.
        /// </summary>
        public readonly string? OrgIdentifier;
        /// <summary>
        /// The project identifier.
        /// </summary>
        public readonly string? ProjectIdentifier;
        /// <summary>
        /// Timestamp when the setting was last updated.
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetDiscoverySettingResult(
            string? correlationId,

            string createdAt,

            string id,

            ImmutableArray<Outputs.GetDiscoverySettingImageRegistryResult> imageRegistries,

            string? orgIdentifier,

            string? projectIdentifier,

            string updatedAt)
        {
            CorrelationId = correlationId;
            CreatedAt = createdAt;
            Id = id;
            ImageRegistries = imageRegistries;
            OrgIdentifier = orgIdentifier;
            ProjectIdentifier = projectIdentifier;
            UpdatedAt = updatedAt;
        }
    }
}
