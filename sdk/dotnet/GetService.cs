// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness
{
    public static class GetService
    {
        /// <summary>
        /// Data source for retrieving a Harness service
        /// </summary>
        public static Task<GetServiceResult> InvokeAsync(GetServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceResult>("harness:index/getService:getService", args ?? new GetServiceArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness service
        /// </summary>
        public static Output<GetServiceResult> Invoke(GetServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceResult>("harness:index/getService:getService", args ?? new GetServiceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness service
        /// </summary>
        public static Output<GetServiceResult> Invoke(GetServiceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceResult>("harness:index/getService:getService", args ?? new GetServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the application the service belongs to
        /// </summary>
        [Input("appId", required: true)]
        public string AppId { get; set; } = null!;

        /// <summary>
        /// Unique identifier of the application
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetServiceArgs()
        {
        }
        public static new GetServiceArgs Empty => new GetServiceArgs();
    }

    public sealed class GetServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the application the service belongs to
        /// </summary>
        [Input("appId", required: true)]
        public Input<string> AppId { get; set; } = null!;

        /// <summary>
        /// Unique identifier of the application
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetServiceInvokeArgs()
        {
        }
        public static new GetServiceInvokeArgs Empty => new GetServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceResult
    {
        /// <summary>
        /// The id of the application the service belongs to
        /// </summary>
        public readonly string AppId;
        /// <summary>
        /// The type of artifact deployed by the service
        /// </summary>
        public readonly string ArtifactType;
        /// <summary>
        /// The application description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The version of Helm being used by the service.
        /// </summary>
        public readonly string HelmVersion;
        /// <summary>
        /// Unique identifier of the application
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the service
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Tags for the service
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The path of the template used for the custom deployment
        /// </summary>
        public readonly string TemplateUri;
        /// <summary>
        /// The type of the deployment
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetServiceResult(
            string appId,

            string artifactType,

            string description,

            string helmVersion,

            string id,

            string name,

            ImmutableDictionary<string, string> tags,

            string templateUri,

            string type)
        {
            AppId = appId;
            ArtifactType = artifactType;
            Description = description;
            HelmVersion = helmVersion;
            Id = id;
            Name = name;
            Tags = tags;
            TemplateUri = templateUri;
            Type = type;
        }
    }
}
