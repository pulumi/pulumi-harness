// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness
{
    /// <summary>
    /// Resource for creating a git connector
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = Harness.GetSecretManager.Invoke(new()
    ///     {
    ///         Default = true,
    ///     });
    /// 
    ///     var example = new Harness.EncryptedText("example", new()
    ///     {
    ///         Name = "example-secret",
    ///         Value = "foo",
    ///         SecretManagerId = @default.Apply(@default =&gt; @default.Apply(getSecretManagerResult =&gt; getSecretManagerResult.Id)),
    ///     });
    /// 
    ///     var exampleGitConnector = new Harness.GitConnector("example", new()
    ///     {
    ///         Name = "example",
    ///         Url = "https://github.com/harness/terraform-provider-harness",
    ///         Branch = "master",
    ///         GenerateWebhookUrl = true,
    ///         PasswordSecretId = example.Id,
    ///         UrlType = "REPO",
    ///         Username = "someuser",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import using the Harness git connector id
    /// 
    /// ```sh
    /// $ pulumi import harness:index/gitConnector:GitConnector example &lt;connector_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:index/gitConnector:GitConnector")]
    public partial class GitConnector : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The branch of the git connector to use
        /// </summary>
        [Output("branch")]
        public Output<string?> Branch { get; private set; } = null!;

        /// <summary>
        /// Custom details to use when making commits using this git connector
        /// </summary>
        [Output("commitDetails")]
        public Output<Outputs.GitConnectorCommitDetails?> CommitDetails { get; private set; } = null!;

        /// <summary>
        /// The time the git connector was created
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Delegate selectors to apply to this git connector.
        /// </summary>
        [Output("delegateSelectors")]
        public Output<ImmutableArray<string>> DelegateSelectors { get; private set; } = null!;

        /// <summary>
        /// Boolean indicating whether or not to generate a webhook url.
        /// </summary>
        [Output("generateWebhookUrl")]
        public Output<bool?> GenerateWebhookUrl { get; private set; } = null!;

        /// <summary>
        /// Name of the git connector.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The id of the secret for connecting to the git repository.
        /// </summary>
        [Output("passwordSecretId")]
        public Output<string?> PasswordSecretId { get; private set; } = null!;

        /// <summary>
        /// The id of the SSH secret to use
        /// </summary>
        [Output("sshSettingId")]
        public Output<string?> SshSettingId { get; private set; } = null!;

        /// <summary>
        /// The URL of the git repository or account/organization
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// The type of git url being used. Options are `ACCOUNT`, and `REPO.`
        /// </summary>
        [Output("urlType")]
        public Output<string> UrlType { get; private set; } = null!;

        /// <summary>
        /// This block is used for scoping the resource to a specific set of applications or environments.
        /// </summary>
        [Output("usageScopes")]
        public Output<ImmutableArray<Outputs.GitConnectorUsageScope>> UsageScopes { get; private set; } = null!;

        /// <summary>
        /// The name of the user used to connect to the git repository
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;

        /// <summary>
        /// The generated webhook url
        /// </summary>
        [Output("webhookUrl")]
        public Output<string> WebhookUrl { get; private set; } = null!;


        /// <summary>
        /// Create a GitConnector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GitConnector(string name, GitConnectorArgs args, CustomResourceOptions? options = null)
            : base("harness:index/gitConnector:GitConnector", name, args ?? new GitConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GitConnector(string name, Input<string> id, GitConnectorState? state = null, CustomResourceOptions? options = null)
            : base("harness:index/gitConnector:GitConnector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GitConnector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GitConnector Get(string name, Input<string> id, GitConnectorState? state = null, CustomResourceOptions? options = null)
        {
            return new GitConnector(name, id, state, options);
        }
    }

    public sealed class GitConnectorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The branch of the git connector to use
        /// </summary>
        [Input("branch")]
        public Input<string>? Branch { get; set; }

        /// <summary>
        /// Custom details to use when making commits using this git connector
        /// </summary>
        [Input("commitDetails")]
        public Input<Inputs.GitConnectorCommitDetailsArgs>? CommitDetails { get; set; }

        [Input("delegateSelectors")]
        private InputList<string>? _delegateSelectors;

        /// <summary>
        /// Delegate selectors to apply to this git connector.
        /// </summary>
        public InputList<string> DelegateSelectors
        {
            get => _delegateSelectors ?? (_delegateSelectors = new InputList<string>());
            set => _delegateSelectors = value;
        }

        /// <summary>
        /// Boolean indicating whether or not to generate a webhook url.
        /// </summary>
        [Input("generateWebhookUrl")]
        public Input<bool>? GenerateWebhookUrl { get; set; }

        /// <summary>
        /// Name of the git connector.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The id of the secret for connecting to the git repository.
        /// </summary>
        [Input("passwordSecretId")]
        public Input<string>? PasswordSecretId { get; set; }

        /// <summary>
        /// The id of the SSH secret to use
        /// </summary>
        [Input("sshSettingId")]
        public Input<string>? SshSettingId { get; set; }

        /// <summary>
        /// The URL of the git repository or account/organization
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        /// <summary>
        /// The type of git url being used. Options are `ACCOUNT`, and `REPO.`
        /// </summary>
        [Input("urlType", required: true)]
        public Input<string> UrlType { get; set; } = null!;

        [Input("usageScopes")]
        private InputList<Inputs.GitConnectorUsageScopeArgs>? _usageScopes;

        /// <summary>
        /// This block is used for scoping the resource to a specific set of applications or environments.
        /// </summary>
        public InputList<Inputs.GitConnectorUsageScopeArgs> UsageScopes
        {
            get => _usageScopes ?? (_usageScopes = new InputList<Inputs.GitConnectorUsageScopeArgs>());
            set => _usageScopes = value;
        }

        /// <summary>
        /// The name of the user used to connect to the git repository
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public GitConnectorArgs()
        {
        }
        public static new GitConnectorArgs Empty => new GitConnectorArgs();
    }

    public sealed class GitConnectorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The branch of the git connector to use
        /// </summary>
        [Input("branch")]
        public Input<string>? Branch { get; set; }

        /// <summary>
        /// Custom details to use when making commits using this git connector
        /// </summary>
        [Input("commitDetails")]
        public Input<Inputs.GitConnectorCommitDetailsGetArgs>? CommitDetails { get; set; }

        /// <summary>
        /// The time the git connector was created
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("delegateSelectors")]
        private InputList<string>? _delegateSelectors;

        /// <summary>
        /// Delegate selectors to apply to this git connector.
        /// </summary>
        public InputList<string> DelegateSelectors
        {
            get => _delegateSelectors ?? (_delegateSelectors = new InputList<string>());
            set => _delegateSelectors = value;
        }

        /// <summary>
        /// Boolean indicating whether or not to generate a webhook url.
        /// </summary>
        [Input("generateWebhookUrl")]
        public Input<bool>? GenerateWebhookUrl { get; set; }

        /// <summary>
        /// Name of the git connector.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The id of the secret for connecting to the git repository.
        /// </summary>
        [Input("passwordSecretId")]
        public Input<string>? PasswordSecretId { get; set; }

        /// <summary>
        /// The id of the SSH secret to use
        /// </summary>
        [Input("sshSettingId")]
        public Input<string>? SshSettingId { get; set; }

        /// <summary>
        /// The URL of the git repository or account/organization
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// The type of git url being used. Options are `ACCOUNT`, and `REPO.`
        /// </summary>
        [Input("urlType")]
        public Input<string>? UrlType { get; set; }

        [Input("usageScopes")]
        private InputList<Inputs.GitConnectorUsageScopeGetArgs>? _usageScopes;

        /// <summary>
        /// This block is used for scoping the resource to a specific set of applications or environments.
        /// </summary>
        public InputList<Inputs.GitConnectorUsageScopeGetArgs> UsageScopes
        {
            get => _usageScopes ?? (_usageScopes = new InputList<Inputs.GitConnectorUsageScopeGetArgs>());
            set => _usageScopes = value;
        }

        /// <summary>
        /// The name of the user used to connect to the git repository
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// The generated webhook url
        /// </summary>
        [Input("webhookUrl")]
        public Input<string>? WebhookUrl { get; set; }

        public GitConnectorState()
        {
        }
        public static new GitConnectorState Empty => new GitConnectorState();
    }
}
