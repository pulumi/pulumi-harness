// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness
{
    /// <summary>
    /// Resource for creating an encrypted text secret
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = Harness.GetSecretManager.Invoke(new()
    ///     {
    ///         Default = true,
    ///     });
    /// 
    ///     var example = new Harness.EncryptedText("example", new()
    ///     {
    ///         Name = "example-secret",
    ///         Value = "someval",
    ///         SecretManagerId = @default.Apply(@default =&gt; @default.Apply(getSecretManagerResult =&gt; getSecretManagerResult.Id)),
    ///         UsageScopes = new[]
    ///         {
    ///             new Harness.Inputs.EncryptedTextUsageScopeArgs
    ///             {
    ///                 EnvironmentFilterType = "PRODUCTION_ENVIRONMENTS",
    ///             },
    ///             new Harness.Inputs.EncryptedTextUsageScopeArgs
    ///             {
    ///                 EnvironmentFilterType = "NON_PRODUCTION_ENVIRONMENTS",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Import using the Harness encrypted text format.
    /// 
    /// NOTE: The secret value cannot be decrypted and imported.
    /// 
    /// ```sh
    /// $ pulumi import harness:index/encryptedText:EncryptedText example &lt;secret_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:index/encryptedText:EncryptedText")]
    public partial class EncryptedText : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Boolean that indicates whether or not to inherit the usage scopes from the secret manager
        /// </summary>
        [Output("inheritScopesFromSecretManager")]
        public Output<bool?> InheritScopesFromSecretManager { get; private set; } = null!;

        /// <summary>
        /// Name of the encrypted text secret
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Boolean that indicates whether or not the secret is scoped to the account
        /// </summary>
        [Output("scopedToAccount")]
        public Output<bool?> ScopedToAccount { get; private set; } = null!;

        /// <summary>
        /// The id of the secret manager to associate the secret with. Once set, this field cannot be changed.
        /// </summary>
        [Output("secretManagerId")]
        public Output<string> SecretManagerId { get; private set; } = null!;

        /// <summary>
        /// Name of the existing secret. If you already have secrets created in a secrets manager such as HashiCorp Vault or AWS Secrets Manager, you do not need to re-create the existing secrets in Harness.
        /// </summary>
        [Output("secretReference")]
        public Output<string?> SecretReference { get; private set; } = null!;

        /// <summary>
        /// This block is used for scoping the resource to a specific set of applications or environments.
        /// </summary>
        [Output("usageScopes")]
        public Output<ImmutableArray<Outputs.EncryptedTextUsageScope>> UsageScopes { get; private set; } = null!;

        /// <summary>
        /// The value of the secret.
        /// </summary>
        [Output("value")]
        public Output<string?> Value { get; private set; } = null!;


        /// <summary>
        /// Create a EncryptedText resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EncryptedText(string name, EncryptedTextArgs args, CustomResourceOptions? options = null)
            : base("harness:index/encryptedText:EncryptedText", name, args ?? new EncryptedTextArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EncryptedText(string name, Input<string> id, EncryptedTextState? state = null, CustomResourceOptions? options = null)
            : base("harness:index/encryptedText:EncryptedText", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
                AdditionalSecretOutputs =
                {
                    "value",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EncryptedText resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EncryptedText Get(string name, Input<string> id, EncryptedTextState? state = null, CustomResourceOptions? options = null)
        {
            return new EncryptedText(name, id, state, options);
        }
    }

    public sealed class EncryptedTextArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Boolean that indicates whether or not to inherit the usage scopes from the secret manager
        /// </summary>
        [Input("inheritScopesFromSecretManager")]
        public Input<bool>? InheritScopesFromSecretManager { get; set; }

        /// <summary>
        /// Name of the encrypted text secret
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Boolean that indicates whether or not the secret is scoped to the account
        /// </summary>
        [Input("scopedToAccount")]
        public Input<bool>? ScopedToAccount { get; set; }

        /// <summary>
        /// The id of the secret manager to associate the secret with. Once set, this field cannot be changed.
        /// </summary>
        [Input("secretManagerId", required: true)]
        public Input<string> SecretManagerId { get; set; } = null!;

        /// <summary>
        /// Name of the existing secret. If you already have secrets created in a secrets manager such as HashiCorp Vault or AWS Secrets Manager, you do not need to re-create the existing secrets in Harness.
        /// </summary>
        [Input("secretReference")]
        public Input<string>? SecretReference { get; set; }

        [Input("usageScopes")]
        private InputList<Inputs.EncryptedTextUsageScopeArgs>? _usageScopes;

        /// <summary>
        /// This block is used for scoping the resource to a specific set of applications or environments.
        /// </summary>
        public InputList<Inputs.EncryptedTextUsageScopeArgs> UsageScopes
        {
            get => _usageScopes ?? (_usageScopes = new InputList<Inputs.EncryptedTextUsageScopeArgs>());
            set => _usageScopes = value;
        }

        [Input("value")]
        private Input<string>? _value;

        /// <summary>
        /// The value of the secret.
        /// </summary>
        public Input<string>? Value
        {
            get => _value;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _value = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public EncryptedTextArgs()
        {
        }
        public static new EncryptedTextArgs Empty => new EncryptedTextArgs();
    }

    public sealed class EncryptedTextState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Boolean that indicates whether or not to inherit the usage scopes from the secret manager
        /// </summary>
        [Input("inheritScopesFromSecretManager")]
        public Input<bool>? InheritScopesFromSecretManager { get; set; }

        /// <summary>
        /// Name of the encrypted text secret
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Boolean that indicates whether or not the secret is scoped to the account
        /// </summary>
        [Input("scopedToAccount")]
        public Input<bool>? ScopedToAccount { get; set; }

        /// <summary>
        /// The id of the secret manager to associate the secret with. Once set, this field cannot be changed.
        /// </summary>
        [Input("secretManagerId")]
        public Input<string>? SecretManagerId { get; set; }

        /// <summary>
        /// Name of the existing secret. If you already have secrets created in a secrets manager such as HashiCorp Vault or AWS Secrets Manager, you do not need to re-create the existing secrets in Harness.
        /// </summary>
        [Input("secretReference")]
        public Input<string>? SecretReference { get; set; }

        [Input("usageScopes")]
        private InputList<Inputs.EncryptedTextUsageScopeGetArgs>? _usageScopes;

        /// <summary>
        /// This block is used for scoping the resource to a specific set of applications or environments.
        /// </summary>
        public InputList<Inputs.EncryptedTextUsageScopeGetArgs> UsageScopes
        {
            get => _usageScopes ?? (_usageScopes = new InputList<Inputs.EncryptedTextUsageScopeGetArgs>());
            set => _usageScopes = value;
        }

        [Input("value")]
        private Input<string>? _value;

        /// <summary>
        /// The value of the secret.
        /// </summary>
        public Input<string>? Value
        {
            get => _value;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _value = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public EncryptedTextState()
        {
        }
        public static new EncryptedTextState Empty => new EncryptedTextState();
    }
}
