// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Governance
{
    /// <summary>
    /// Resource for creating, updating, and managing rule enforcement.
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import governance enforcement
    /// 
    /// ```sh
    /// $ pulumi import harness:governance/ruleEnforcement:RuleEnforcement example &lt;enforcement_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:governance/ruleEnforcement:RuleEnforcement")]
    public partial class RuleEnforcement : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The cloud provider for the rule enforcement. It should be either AWS, AZURE or GCP.
        /// </summary>
        [Output("cloudProvider")]
        public Output<string> CloudProvider { get; private set; } = null!;

        /// <summary>
        /// Description for rule enforcement.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Id of the rule enforcement.
        /// </summary>
        [Output("enforcementId")]
        public Output<string> EnforcementId { get; private set; } = null!;

        /// <summary>
        /// Execution schedule in cron format.
        /// </summary>
        [Output("executionSchedule")]
        public Output<string> ExecutionSchedule { get; private set; } = null!;

        /// <summary>
        /// Timezone for the execution schedule.
        /// </summary>
        [Output("executionTimezone")]
        public Output<string> ExecutionTimezone { get; private set; } = null!;

        /// <summary>
        /// Indicates if the rule enforcement is a dry run. This by default is set to false.
        /// </summary>
        [Output("isDryRun")]
        public Output<bool?> IsDryRun { get; private set; } = null!;

        /// <summary>
        /// Indicates if the rule enforcement is enabled. This by default is set to true.
        /// </summary>
        [Output("isEnabled")]
        public Output<bool?> IsEnabled { get; private set; } = null!;

        /// <summary>
        /// Name of the rule enforcement.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of rule IDs. Either rule*ids or rule*set_ids should be provided.
        /// </summary>
        [Output("ruleIds")]
        public Output<ImmutableArray<string>> RuleIds { get; private set; } = null!;

        /// <summary>
        /// List of rule set IDs. Either rule*ids or rule*set_ids should be provided.
        /// </summary>
        [Output("ruleSetIds")]
        public Output<ImmutableArray<string>> RuleSetIds { get; private set; } = null!;

        /// <summary>
        /// List of target account which can be either AWS Account Ids or Azure Subscription Ids or Gcp Project Ids.
        /// </summary>
        [Output("targetAccounts")]
        public Output<ImmutableArray<string>> TargetAccounts { get; private set; } = null!;

        /// <summary>
        /// List of target regions. For GCP it should be left empty but is required in case of AWS or Azure.
        /// </summary>
        [Output("targetRegions")]
        public Output<ImmutableArray<string>> TargetRegions { get; private set; } = null!;


        /// <summary>
        /// Create a RuleEnforcement resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RuleEnforcement(string name, RuleEnforcementArgs args, CustomResourceOptions? options = null)
            : base("harness:governance/ruleEnforcement:RuleEnforcement", name, args ?? new RuleEnforcementArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RuleEnforcement(string name, Input<string> id, RuleEnforcementState? state = null, CustomResourceOptions? options = null)
            : base("harness:governance/ruleEnforcement:RuleEnforcement", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RuleEnforcement resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RuleEnforcement Get(string name, Input<string> id, RuleEnforcementState? state = null, CustomResourceOptions? options = null)
        {
            return new RuleEnforcement(name, id, state, options);
        }
    }

    public sealed class RuleEnforcementArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cloud provider for the rule enforcement. It should be either AWS, AZURE or GCP.
        /// </summary>
        [Input("cloudProvider", required: true)]
        public Input<string> CloudProvider { get; set; } = null!;

        /// <summary>
        /// Description for rule enforcement.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Execution schedule in cron format.
        /// </summary>
        [Input("executionSchedule", required: true)]
        public Input<string> ExecutionSchedule { get; set; } = null!;

        /// <summary>
        /// Timezone for the execution schedule.
        /// </summary>
        [Input("executionTimezone", required: true)]
        public Input<string> ExecutionTimezone { get; set; } = null!;

        /// <summary>
        /// Indicates if the rule enforcement is a dry run. This by default is set to false.
        /// </summary>
        [Input("isDryRun")]
        public Input<bool>? IsDryRun { get; set; }

        /// <summary>
        /// Indicates if the rule enforcement is enabled. This by default is set to true.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// Name of the rule enforcement.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ruleIds")]
        private InputList<string>? _ruleIds;

        /// <summary>
        /// List of rule IDs. Either rule*ids or rule*set_ids should be provided.
        /// </summary>
        public InputList<string> RuleIds
        {
            get => _ruleIds ?? (_ruleIds = new InputList<string>());
            set => _ruleIds = value;
        }

        [Input("ruleSetIds")]
        private InputList<string>? _ruleSetIds;

        /// <summary>
        /// List of rule set IDs. Either rule*ids or rule*set_ids should be provided.
        /// </summary>
        public InputList<string> RuleSetIds
        {
            get => _ruleSetIds ?? (_ruleSetIds = new InputList<string>());
            set => _ruleSetIds = value;
        }

        [Input("targetAccounts", required: true)]
        private InputList<string>? _targetAccounts;

        /// <summary>
        /// List of target account which can be either AWS Account Ids or Azure Subscription Ids or Gcp Project Ids.
        /// </summary>
        public InputList<string> TargetAccounts
        {
            get => _targetAccounts ?? (_targetAccounts = new InputList<string>());
            set => _targetAccounts = value;
        }

        [Input("targetRegions")]
        private InputList<string>? _targetRegions;

        /// <summary>
        /// List of target regions. For GCP it should be left empty but is required in case of AWS or Azure.
        /// </summary>
        public InputList<string> TargetRegions
        {
            get => _targetRegions ?? (_targetRegions = new InputList<string>());
            set => _targetRegions = value;
        }

        public RuleEnforcementArgs()
        {
        }
        public static new RuleEnforcementArgs Empty => new RuleEnforcementArgs();
    }

    public sealed class RuleEnforcementState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cloud provider for the rule enforcement. It should be either AWS, AZURE or GCP.
        /// </summary>
        [Input("cloudProvider")]
        public Input<string>? CloudProvider { get; set; }

        /// <summary>
        /// Description for rule enforcement.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Id of the rule enforcement.
        /// </summary>
        [Input("enforcementId")]
        public Input<string>? EnforcementId { get; set; }

        /// <summary>
        /// Execution schedule in cron format.
        /// </summary>
        [Input("executionSchedule")]
        public Input<string>? ExecutionSchedule { get; set; }

        /// <summary>
        /// Timezone for the execution schedule.
        /// </summary>
        [Input("executionTimezone")]
        public Input<string>? ExecutionTimezone { get; set; }

        /// <summary>
        /// Indicates if the rule enforcement is a dry run. This by default is set to false.
        /// </summary>
        [Input("isDryRun")]
        public Input<bool>? IsDryRun { get; set; }

        /// <summary>
        /// Indicates if the rule enforcement is enabled. This by default is set to true.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// Name of the rule enforcement.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ruleIds")]
        private InputList<string>? _ruleIds;

        /// <summary>
        /// List of rule IDs. Either rule*ids or rule*set_ids should be provided.
        /// </summary>
        public InputList<string> RuleIds
        {
            get => _ruleIds ?? (_ruleIds = new InputList<string>());
            set => _ruleIds = value;
        }

        [Input("ruleSetIds")]
        private InputList<string>? _ruleSetIds;

        /// <summary>
        /// List of rule set IDs. Either rule*ids or rule*set_ids should be provided.
        /// </summary>
        public InputList<string> RuleSetIds
        {
            get => _ruleSetIds ?? (_ruleSetIds = new InputList<string>());
            set => _ruleSetIds = value;
        }

        [Input("targetAccounts")]
        private InputList<string>? _targetAccounts;

        /// <summary>
        /// List of target account which can be either AWS Account Ids or Azure Subscription Ids or Gcp Project Ids.
        /// </summary>
        public InputList<string> TargetAccounts
        {
            get => _targetAccounts ?? (_targetAccounts = new InputList<string>());
            set => _targetAccounts = value;
        }

        [Input("targetRegions")]
        private InputList<string>? _targetRegions;

        /// <summary>
        /// List of target regions. For GCP it should be left empty but is required in case of AWS or Azure.
        /// </summary>
        public InputList<string> TargetRegions
        {
            get => _targetRegions ?? (_targetRegions = new InputList<string>());
            set => _targetRegions = value;
        }

        public RuleEnforcementState()
        {
        }
        public static new RuleEnforcementState Empty => new RuleEnforcementState();
    }
}
