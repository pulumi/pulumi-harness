// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Cloudprovider
{
    /// <summary>
    /// Resource for creating a Tanzu cloud provider. This resource uses the config-as-code API's. When updating the `Name` or `Path` of this resource you should typically also set the `CreateBeforeDestroy = true` lifecycle setting.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = Harness.GetSecretManager.Invoke(new()
    ///     {
    ///         Default = true,
    ///     });
    /// 
    ///     var tanzuPassword = new Harness.EncryptedText("tanzu_password", new()
    ///     {
    ///         Name = "tanzu_password",
    ///         Value = "&lt;PASSWORD&gt;",
    ///         SecretManagerId = @default.Apply(@default =&gt; @default.Apply(getSecretManagerResult =&gt; getSecretManagerResult.Id)),
    ///     });
    /// 
    ///     var example = new Harness.Cloudprovider.Tanzu("example", new()
    ///     {
    ///         Name = "example",
    ///         Endpoint = "https://endpoint.com",
    ///         SkipValidation = true,
    ///         Username = "&lt;USERNAME&gt;",
    ///         PasswordSecretName = tanzuPassword.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import using the Harness Tanzu cloud provider id.
    /// 
    /// ```sh
    /// $ pulumi import harness:cloudprovider/tanzu:Tanzu example &lt;provider_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:cloudprovider/tanzu:Tanzu")]
    public partial class Tanzu : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The url of the Tanzu platform.
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// The name of the cloud provider.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Harness secret containing the password to use to authenticate to Tanzu.
        /// </summary>
        [Output("passwordSecretName")]
        public Output<string> PasswordSecretName { get; private set; } = null!;

        /// <summary>
        /// Skip validation of Tanzu configuration.
        /// </summary>
        [Output("skipValidation")]
        public Output<bool?> SkipValidation { get; private set; } = null!;

        /// <summary>
        /// The username to use to authenticate to Tanzu.
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;

        /// <summary>
        /// The name of the Harness secret containing the username to authenticate to Tanzu with.
        /// </summary>
        [Output("usernameSecretName")]
        public Output<string?> UsernameSecretName { get; private set; } = null!;


        /// <summary>
        /// Create a Tanzu resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Tanzu(string name, TanzuArgs args, CustomResourceOptions? options = null)
            : base("harness:cloudprovider/tanzu:Tanzu", name, args ?? new TanzuArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Tanzu(string name, Input<string> id, TanzuState? state = null, CustomResourceOptions? options = null)
            : base("harness:cloudprovider/tanzu:Tanzu", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Tanzu resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Tanzu Get(string name, Input<string> id, TanzuState? state = null, CustomResourceOptions? options = null)
        {
            return new Tanzu(name, id, state, options);
        }
    }

    public sealed class TanzuArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The url of the Tanzu platform.
        /// </summary>
        [Input("endpoint", required: true)]
        public Input<string> Endpoint { get; set; } = null!;

        /// <summary>
        /// The name of the cloud provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Harness secret containing the password to use to authenticate to Tanzu.
        /// </summary>
        [Input("passwordSecretName", required: true)]
        public Input<string> PasswordSecretName { get; set; } = null!;

        /// <summary>
        /// Skip validation of Tanzu configuration.
        /// </summary>
        [Input("skipValidation")]
        public Input<bool>? SkipValidation { get; set; }

        /// <summary>
        /// The username to use to authenticate to Tanzu.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// The name of the Harness secret containing the username to authenticate to Tanzu with.
        /// </summary>
        [Input("usernameSecretName")]
        public Input<string>? UsernameSecretName { get; set; }

        public TanzuArgs()
        {
        }
        public static new TanzuArgs Empty => new TanzuArgs();
    }

    public sealed class TanzuState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The url of the Tanzu platform.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// The name of the cloud provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Harness secret containing the password to use to authenticate to Tanzu.
        /// </summary>
        [Input("passwordSecretName")]
        public Input<string>? PasswordSecretName { get; set; }

        /// <summary>
        /// Skip validation of Tanzu configuration.
        /// </summary>
        [Input("skipValidation")]
        public Input<bool>? SkipValidation { get; set; }

        /// <summary>
        /// The username to use to authenticate to Tanzu.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// The name of the Harness secret containing the username to authenticate to Tanzu with.
        /// </summary>
        [Input("usernameSecretName")]
        public Input<string>? UsernameSecretName { get; set; }

        public TanzuState()
        {
        }
        public static new TanzuState Empty => new TanzuState();
    }
}
