// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Cloudprovider
{
    /// <summary>
    /// Resource for creating a GCP cloud provider. This resource uses the config-as-code API's. When updating the `Name` or `Path` of this resource you should typically also set the `CreateBeforeDestroy = true` lifecycle setting.
    /// </summary>
    [HarnessResourceType("harness:cloudprovider/gcp:Gcp")]
    public partial class Gcp : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Delegate selectors to use for this provider.
        /// </summary>
        [Output("delegateSelectors")]
        public Output<ImmutableArray<string>> DelegateSelectors { get; private set; } = null!;

        /// <summary>
        /// The name of the cloud provider.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The id of the secret containing the GCP credentials
        /// </summary>
        [Output("secretFileId")]
        public Output<string?> SecretFileId { get; private set; } = null!;

        /// <summary>
        /// Skip validation of GCP configuration.
        /// </summary>
        [Output("skipValidation")]
        public Output<bool?> SkipValidation { get; private set; } = null!;

        /// <summary>
        /// This block is used for scoping the resource to a specific set of applications or environments.
        /// </summary>
        [Output("usageScopes")]
        public Output<ImmutableArray<Outputs.GcpUsageScope>> UsageScopes { get; private set; } = null!;


        /// <summary>
        /// Create a Gcp resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Gcp(string name, GcpArgs? args = null, CustomResourceOptions? options = null)
            : base("harness:cloudprovider/gcp:Gcp", name, args ?? new GcpArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Gcp(string name, Input<string> id, GcpState? state = null, CustomResourceOptions? options = null)
            : base("harness:cloudprovider/gcp:Gcp", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Gcp resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Gcp Get(string name, Input<string> id, GcpState? state = null, CustomResourceOptions? options = null)
        {
            return new Gcp(name, id, state, options);
        }
    }

    public sealed class GcpArgs : global::Pulumi.ResourceArgs
    {
        [Input("delegateSelectors")]
        private InputList<string>? _delegateSelectors;

        /// <summary>
        /// Delegate selectors to use for this provider.
        /// </summary>
        public InputList<string> DelegateSelectors
        {
            get => _delegateSelectors ?? (_delegateSelectors = new InputList<string>());
            set => _delegateSelectors = value;
        }

        /// <summary>
        /// The name of the cloud provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The id of the secret containing the GCP credentials
        /// </summary>
        [Input("secretFileId")]
        public Input<string>? SecretFileId { get; set; }

        /// <summary>
        /// Skip validation of GCP configuration.
        /// </summary>
        [Input("skipValidation")]
        public Input<bool>? SkipValidation { get; set; }

        [Input("usageScopes")]
        private InputList<Inputs.GcpUsageScopeArgs>? _usageScopes;

        /// <summary>
        /// This block is used for scoping the resource to a specific set of applications or environments.
        /// </summary>
        public InputList<Inputs.GcpUsageScopeArgs> UsageScopes
        {
            get => _usageScopes ?? (_usageScopes = new InputList<Inputs.GcpUsageScopeArgs>());
            set => _usageScopes = value;
        }

        public GcpArgs()
        {
        }
        public static new GcpArgs Empty => new GcpArgs();
    }

    public sealed class GcpState : global::Pulumi.ResourceArgs
    {
        [Input("delegateSelectors")]
        private InputList<string>? _delegateSelectors;

        /// <summary>
        /// Delegate selectors to use for this provider.
        /// </summary>
        public InputList<string> DelegateSelectors
        {
            get => _delegateSelectors ?? (_delegateSelectors = new InputList<string>());
            set => _delegateSelectors = value;
        }

        /// <summary>
        /// The name of the cloud provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The id of the secret containing the GCP credentials
        /// </summary>
        [Input("secretFileId")]
        public Input<string>? SecretFileId { get; set; }

        /// <summary>
        /// Skip validation of GCP configuration.
        /// </summary>
        [Input("skipValidation")]
        public Input<bool>? SkipValidation { get; set; }

        [Input("usageScopes")]
        private InputList<Inputs.GcpUsageScopeGetArgs>? _usageScopes;

        /// <summary>
        /// This block is used for scoping the resource to a specific set of applications or environments.
        /// </summary>
        public InputList<Inputs.GcpUsageScopeGetArgs> UsageScopes
        {
            get => _usageScopes ?? (_usageScopes = new InputList<Inputs.GcpUsageScopeGetArgs>());
            set => _usageScopes = value;
        }

        public GcpState()
        {
        }
        public static new GcpState Empty => new GcpState();
    }
}
