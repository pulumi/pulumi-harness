// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Cloudprovider
{
    /// <summary>
    /// Resource for creating a Spot cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = Harness.GetSecretManager.Invoke(new()
    ///     {
    ///         Default = true,
    ///     });
    /// 
    ///     var spotToken = new Harness.EncryptedText("spot_token", new()
    ///     {
    ///         Name = "spot_token",
    ///         SecretManagerId = @default.Apply(@default =&gt; @default.Apply(getSecretManagerResult =&gt; getSecretManagerResult.Id)),
    ///         Value = "&lt;SPOT_TOKEN&gt;",
    ///     });
    /// 
    ///     var example = new Harness.Cloudprovider.Spot("example", new()
    ///     {
    ///         Name = "example",
    ///         AccountId = "&lt;SPOT_ACCOUNT_ID&gt;",
    ///         TokenSecretName = spotToken.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Import using the Harness Spot cloud provider id.
    /// 
    /// ```sh
    /// $ pulumi import harness:cloudprovider/spot:Spot example &lt;provider_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:cloudprovider/spot:Spot")]
    public partial class Spot : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Spot account ID
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The name of the cloud provider.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Harness secret containing the spot account token
        /// </summary>
        [Output("tokenSecretName")]
        public Output<string> TokenSecretName { get; private set; } = null!;


        /// <summary>
        /// Create a Spot resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Spot(string name, SpotArgs args, CustomResourceOptions? options = null)
            : base("harness:cloudprovider/spot:Spot", name, args ?? new SpotArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Spot(string name, Input<string> id, SpotState? state = null, CustomResourceOptions? options = null)
            : base("harness:cloudprovider/spot:Spot", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Spot resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Spot Get(string name, Input<string> id, SpotState? state = null, CustomResourceOptions? options = null)
        {
            return new Spot(name, id, state, options);
        }
    }

    public sealed class SpotArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Spot account ID
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The name of the cloud provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Harness secret containing the spot account token
        /// </summary>
        [Input("tokenSecretName", required: true)]
        public Input<string> TokenSecretName { get; set; } = null!;

        public SpotArgs()
        {
        }
        public static new SpotArgs Empty => new SpotArgs();
    }

    public sealed class SpotState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Spot account ID
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The name of the cloud provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Harness secret containing the spot account token
        /// </summary>
        [Input("tokenSecretName")]
        public Input<string>? TokenSecretName { get; set; }

        public SpotState()
        {
        }
        public static new SpotState Empty => new SpotState();
    }
}
