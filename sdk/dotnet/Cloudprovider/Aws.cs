// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Cloudprovider
{
    /// <summary>
    /// Resource for creating an AWS cloud provider. This resource uses the config-as-code API's. When updating the `Name` or `Path` of this resource you should typically also set the `CreateBeforeDestroy = true` lifecycle setting.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = Harness.GetSecretManager.Invoke(new()
    ///     {
    ///         Default = true,
    ///     });
    /// 
    ///     var awsAccessKey = new Harness.EncryptedText("aws_access_key", new()
    ///     {
    ///         Name = "aws_access_key",
    ///         Value = "&lt;ACCESS_KEY_ID&gt;",
    ///         SecretManagerId = @default.Apply(@default =&gt; @default.Apply(getSecretManagerResult =&gt; getSecretManagerResult.Id)),
    ///     });
    /// 
    ///     var awsSecretKey = new Harness.EncryptedText("aws_secret_key", new()
    ///     {
    ///         Name = "aws_secret_key",
    ///         Value = "&lt;SECRET_KEY_ID&gt;",
    ///         SecretManagerId = @default.Apply(@default =&gt; @default.Apply(getSecretManagerResult =&gt; getSecretManagerResult.Id)),
    ///     });
    /// 
    ///     var aws = new Harness.Cloudprovider.Aws("aws", new()
    ///     {
    ///         Name = "Example aws cloud provider",
    ///         AccessKeyIdSecretName = awsAccessKey.Name,
    ///         SecretAccessKeySecretName = awsSecretKey.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import using the Harness aws cloud provider id.
    /// 
    /// ```sh
    /// $ pulumi import harness:cloudprovider/aws:Aws example &lt;provider_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:cloudprovider/aws:Aws")]
    public partial class Aws : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The plain text AWS access key id.
        /// </summary>
        [Output("accessKeyId")]
        public Output<string?> AccessKeyId { get; private set; } = null!;

        /// <summary>
        /// The name of the Harness secret containing the AWS access key id
        /// </summary>
        [Output("accessKeyIdSecretName")]
        public Output<string?> AccessKeyIdSecretName { get; private set; } = null!;

        /// <summary>
        /// Configuration for assuming a cross account role.
        /// </summary>
        [Output("assumeCrossAccountRole")]
        public Output<Outputs.AwsAssumeCrossAccountRole?> AssumeCrossAccountRole { get; private set; } = null!;

        /// <summary>
        /// Select the Delegate to use via one of its Selectors.
        /// </summary>
        [Output("delegateSelector")]
        public Output<string?> DelegateSelector { get; private set; } = null!;

        /// <summary>
        /// The name of the cloud provider.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Harness secret containing the AWS secret access key.
        /// </summary>
        [Output("secretAccessKeySecretName")]
        public Output<string?> SecretAccessKeySecretName { get; private set; } = null!;

        /// <summary>
        /// This block is used for scoping the resource to a specific set of applications or environments.
        /// </summary>
        [Output("usageScopes")]
        public Output<ImmutableArray<Outputs.AwsUsageScope>> UsageScopes { get; private set; } = null!;

        /// <summary>
        /// Use the EC2 Instance Profile for Service Accounts.
        /// </summary>
        [Output("useEc2IamCredentials")]
        public Output<bool?> UseEc2IamCredentials { get; private set; } = null!;

        /// <summary>
        /// Use the AWS IAM Role for Service Accounts.
        /// </summary>
        [Output("useIrsa")]
        public Output<bool?> UseIrsa { get; private set; } = null!;


        /// <summary>
        /// Create a Aws resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Aws(string name, AwsArgs? args = null, CustomResourceOptions? options = null)
            : base("harness:cloudprovider/aws:Aws", name, args ?? new AwsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Aws(string name, Input<string> id, AwsState? state = null, CustomResourceOptions? options = null)
            : base("harness:cloudprovider/aws:Aws", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Aws resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Aws Get(string name, Input<string> id, AwsState? state = null, CustomResourceOptions? options = null)
        {
            return new Aws(name, id, state, options);
        }
    }

    public sealed class AwsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The plain text AWS access key id.
        /// </summary>
        [Input("accessKeyId")]
        public Input<string>? AccessKeyId { get; set; }

        /// <summary>
        /// The name of the Harness secret containing the AWS access key id
        /// </summary>
        [Input("accessKeyIdSecretName")]
        public Input<string>? AccessKeyIdSecretName { get; set; }

        /// <summary>
        /// Configuration for assuming a cross account role.
        /// </summary>
        [Input("assumeCrossAccountRole")]
        public Input<Inputs.AwsAssumeCrossAccountRoleArgs>? AssumeCrossAccountRole { get; set; }

        /// <summary>
        /// Select the Delegate to use via one of its Selectors.
        /// </summary>
        [Input("delegateSelector")]
        public Input<string>? DelegateSelector { get; set; }

        /// <summary>
        /// The name of the cloud provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Harness secret containing the AWS secret access key.
        /// </summary>
        [Input("secretAccessKeySecretName")]
        public Input<string>? SecretAccessKeySecretName { get; set; }

        [Input("usageScopes")]
        private InputList<Inputs.AwsUsageScopeArgs>? _usageScopes;

        /// <summary>
        /// This block is used for scoping the resource to a specific set of applications or environments.
        /// </summary>
        public InputList<Inputs.AwsUsageScopeArgs> UsageScopes
        {
            get => _usageScopes ?? (_usageScopes = new InputList<Inputs.AwsUsageScopeArgs>());
            set => _usageScopes = value;
        }

        /// <summary>
        /// Use the EC2 Instance Profile for Service Accounts.
        /// </summary>
        [Input("useEc2IamCredentials")]
        public Input<bool>? UseEc2IamCredentials { get; set; }

        /// <summary>
        /// Use the AWS IAM Role for Service Accounts.
        /// </summary>
        [Input("useIrsa")]
        public Input<bool>? UseIrsa { get; set; }

        public AwsArgs()
        {
        }
        public static new AwsArgs Empty => new AwsArgs();
    }

    public sealed class AwsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The plain text AWS access key id.
        /// </summary>
        [Input("accessKeyId")]
        public Input<string>? AccessKeyId { get; set; }

        /// <summary>
        /// The name of the Harness secret containing the AWS access key id
        /// </summary>
        [Input("accessKeyIdSecretName")]
        public Input<string>? AccessKeyIdSecretName { get; set; }

        /// <summary>
        /// Configuration for assuming a cross account role.
        /// </summary>
        [Input("assumeCrossAccountRole")]
        public Input<Inputs.AwsAssumeCrossAccountRoleGetArgs>? AssumeCrossAccountRole { get; set; }

        /// <summary>
        /// Select the Delegate to use via one of its Selectors.
        /// </summary>
        [Input("delegateSelector")]
        public Input<string>? DelegateSelector { get; set; }

        /// <summary>
        /// The name of the cloud provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Harness secret containing the AWS secret access key.
        /// </summary>
        [Input("secretAccessKeySecretName")]
        public Input<string>? SecretAccessKeySecretName { get; set; }

        [Input("usageScopes")]
        private InputList<Inputs.AwsUsageScopeGetArgs>? _usageScopes;

        /// <summary>
        /// This block is used for scoping the resource to a specific set of applications or environments.
        /// </summary>
        public InputList<Inputs.AwsUsageScopeGetArgs> UsageScopes
        {
            get => _usageScopes ?? (_usageScopes = new InputList<Inputs.AwsUsageScopeGetArgs>());
            set => _usageScopes = value;
        }

        /// <summary>
        /// Use the EC2 Instance Profile for Service Accounts.
        /// </summary>
        [Input("useEc2IamCredentials")]
        public Input<bool>? UseEc2IamCredentials { get; set; }

        /// <summary>
        /// Use the AWS IAM Role for Service Accounts.
        /// </summary>
        [Input("useIrsa")]
        public Input<bool>? UseIrsa { get; set; }

        public AwsState()
        {
        }
        public static new AwsState Empty => new AwsState();
    }
}
