// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Cloudprovider
{
    /// <summary>
    /// Resource for creating an Azure cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = Harness.GetSecretManager.Invoke(new()
    ///     {
    ///         Default = true,
    ///     });
    /// 
    ///     var azureKey = new Harness.EncryptedText("azure_key", new()
    ///     {
    ///         Name = "azure_key",
    ///         Value = "&lt;AZURE_KEY&gt;",
    ///         SecretManagerId = @default.Apply(@default =&gt; @default.Apply(getSecretManagerResult =&gt; getSecretManagerResult.Id)),
    ///     });
    /// 
    ///     var azure = new Harness.Cloudprovider.Azure("azure", new()
    ///     {
    ///         Name = "azure",
    ///         ClientId = "&lt;AZURE_CLIENT_ID&gt;",
    ///         TenantId = "&lt;AZURE_TENANT_ID&gt;",
    ///         Key = azureKey.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import using the Harness azure cloud provider id.
    /// 
    /// ```sh
    /// $ pulumi import harness:cloudprovider/azure:Azure example &lt;provider_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:cloudprovider/azure:Azure")]
    public partial class Azure : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The client id for the Azure application
        /// </summary>
        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        /// <summary>
        /// The type of environment. Valid options are [AZURE AZURE*US*GOVERNMENT]
        /// </summary>
        [Output("environmentType")]
        public Output<string?> EnvironmentType { get; private set; } = null!;

        /// <summary>
        /// The Name of the Harness secret containing the key for the Azure application
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// The name of the cloud provider.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The tenant id for the Azure application
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;


        /// <summary>
        /// Create a Azure resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Azure(string name, AzureArgs args, CustomResourceOptions? options = null)
            : base("harness:cloudprovider/azure:Azure", name, args ?? new AzureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Azure(string name, Input<string> id, AzureState? state = null, CustomResourceOptions? options = null)
            : base("harness:cloudprovider/azure:Azure", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Azure resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Azure Get(string name, Input<string> id, AzureState? state = null, CustomResourceOptions? options = null)
        {
            return new Azure(name, id, state, options);
        }
    }

    public sealed class AzureArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The client id for the Azure application
        /// </summary>
        [Input("clientId", required: true)]
        public Input<string> ClientId { get; set; } = null!;

        /// <summary>
        /// The type of environment. Valid options are [AZURE AZURE*US*GOVERNMENT]
        /// </summary>
        [Input("environmentType")]
        public Input<string>? EnvironmentType { get; set; }

        /// <summary>
        /// The Name of the Harness secret containing the key for the Azure application
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// The name of the cloud provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The tenant id for the Azure application
        /// </summary>
        [Input("tenantId", required: true)]
        public Input<string> TenantId { get; set; } = null!;

        public AzureArgs()
        {
        }
        public static new AzureArgs Empty => new AzureArgs();
    }

    public sealed class AzureState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The client id for the Azure application
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// The type of environment. Valid options are [AZURE AZURE*US*GOVERNMENT]
        /// </summary>
        [Input("environmentType")]
        public Input<string>? EnvironmentType { get; set; }

        /// <summary>
        /// The Name of the Harness secret containing the key for the Azure application
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// The name of the cloud provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The tenant id for the Azure application
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        public AzureState()
        {
        }
        public static new AzureState Empty => new AzureState();
    }
}
