// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness
{
    /// <summary>
    /// Resource for creating a raw YAML configuration in Harness. Note: This works for all objects EXCEPT application objects. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Harness.YamlConfig("test", new()
    ///     {
    ///         Path = "Setup/Cloud Providers/Kubernetes.yaml",
    ///         Content = @"harnessApiVersion: '1.0'
    /// type: KUBERNETES_CLUSTER
    /// delegateSelectors:
    /// - k8s
    /// skipValidation: true
    /// useKubernetesDelegate: true
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Importing a global config only using the yaml path
    /// 
    /// ```sh
    /// $ pulumi import harness:index/yamlConfig:YamlConfig k8s_cloudprovider "Setup/Cloud Providers/kubernetes.yaml"
    /// ```
    /// 
    /// Importing a service which requires both the application id and the yaml path.
    /// 
    /// ```sh
    /// $ pulumi import harness:index/yamlConfig:YamlConfig k8s_cloudprovider "Setup/Applications/MyApp/Services/MyService/Index.yaml:&lt;APPLICATION_ID&gt;"
    /// ```
    /// </summary>
    [HarnessResourceType("harness:index/yamlConfig:YamlConfig")]
    public partial class YamlConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The id of the application. This is required for all resources except global ones.
        /// </summary>
        [Output("appId")]
        public Output<string?> AppId { get; private set; } = null!;

        /// <summary>
        /// The raw YAML configuration.
        /// </summary>
        [Output("content")]
        public Output<string> Content { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The path of the resource.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;


        /// <summary>
        /// Create a YamlConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public YamlConfig(string name, YamlConfigArgs args, CustomResourceOptions? options = null)
            : base("harness:index/yamlConfig:YamlConfig", name, args ?? new YamlConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private YamlConfig(string name, Input<string> id, YamlConfigState? state = null, CustomResourceOptions? options = null)
            : base("harness:index/yamlConfig:YamlConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing YamlConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static YamlConfig Get(string name, Input<string> id, YamlConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new YamlConfig(name, id, state, options);
        }
    }

    public sealed class YamlConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the application. This is required for all resources except global ones.
        /// </summary>
        [Input("appId")]
        public Input<string>? AppId { get; set; }

        /// <summary>
        /// The raw YAML configuration.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// The path of the resource.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        public YamlConfigArgs()
        {
        }
        public static new YamlConfigArgs Empty => new YamlConfigArgs();
    }

    public sealed class YamlConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the application. This is required for all resources except global ones.
        /// </summary>
        [Input("appId")]
        public Input<string>? AppId { get; set; }

        /// <summary>
        /// The raw YAML configuration.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The path of the resource.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        public YamlConfigState()
        {
        }
        public static new YamlConfigState Empty => new YamlConfigState();
    }
}
