// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Chaos
{
    /// <summary>
    /// Resource for managing a Harness Chaos Hub
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Harness.Chaos.Hub("example", new()
    ///     {
    ///         OrgId = "&lt;org_id&gt;",
    ///         ProjectId = "&lt;project_id&gt;",
    ///         Name = "&lt;name&gt;",
    ///         Description = "&lt;description&gt;",
    ///         ConnectorId = "&lt;connector_id&gt;",
    ///         RepoBranch = "&lt;repo_branch&gt;",
    ///         RepoName = "&lt;repo_name&gt;",
    ///         IsDefault = false,
    ///         Tags = new[]
    ///         {
    ///             "&lt;tag1&gt;",
    ///             "&lt;tag2&gt;",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import Project level Chaos Hub
    /// 
    /// ```sh
    /// $ pulumi import harness:chaos/hub:Hub example &lt;org_id&gt;/&lt;project_id&gt;/&lt;hub_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:chaos/hub:Hub")]
    public partial class Hub : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the Git connector
        /// </summary>
        [Output("connectorId")]
        public Output<string> ConnectorId { get; private set; } = null!;

        /// <summary>
        /// Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
        /// </summary>
        [Output("connectorScope")]
        public Output<string?> ConnectorScope { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Description of the chaos hub
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether the chaos hub is available
        /// </summary>
        [Output("isAvailable")]
        public Output<bool> IsAvailable { get; private set; } = null!;

        /// <summary>
        /// Whether this is the default chaos hub
        /// </summary>
        [Output("isDefault")]
        public Output<bool?> IsDefault { get; private set; } = null!;

        /// <summary>
        /// Timestamp of the last sync
        /// </summary>
        [Output("lastSyncedAt")]
        public Output<string> LastSyncedAt { get; private set; } = null!;

        /// <summary>
        /// Name of the chaos hub
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The organization ID of the chaos hub
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// The project ID of the chaos hub
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Git repository branch
        /// </summary>
        [Output("repoBranch")]
        public Output<string> RepoBranch { get; private set; } = null!;

        /// <summary>
        /// Name of the Git repository (required for account-level connectors)
        /// </summary>
        [Output("repoName")]
        public Output<string?> RepoName { get; private set; } = null!;

        /// <summary>
        /// Tags to associate with the chaos hub
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Total number of experiments in the hub
        /// </summary>
        [Output("totalExperiments")]
        public Output<int> TotalExperiments { get; private set; } = null!;

        /// <summary>
        /// Total number of faults in the hub
        /// </summary>
        [Output("totalFaults")]
        public Output<int> TotalFaults { get; private set; } = null!;

        /// <summary>
        /// Last update timestamp
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a Hub resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Hub(string name, HubArgs args, CustomResourceOptions? options = null)
            : base("harness:chaos/hub:Hub", name, args ?? new HubArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Hub(string name, Input<string> id, HubState? state = null, CustomResourceOptions? options = null)
            : base("harness:chaos/hub:Hub", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Hub resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Hub Get(string name, Input<string> id, HubState? state = null, CustomResourceOptions? options = null)
        {
            return new Hub(name, id, state, options);
        }
    }

    public sealed class HubArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the Git connector
        /// </summary>
        [Input("connectorId", required: true)]
        public Input<string> ConnectorId { get; set; } = null!;

        /// <summary>
        /// Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
        /// </summary>
        [Input("connectorScope")]
        public Input<string>? ConnectorScope { get; set; }

        /// <summary>
        /// Description of the chaos hub
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether this is the default chaos hub
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// Name of the chaos hub
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization ID of the chaos hub
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The project ID of the chaos hub
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Git repository branch
        /// </summary>
        [Input("repoBranch", required: true)]
        public Input<string> RepoBranch { get; set; } = null!;

        /// <summary>
        /// Name of the Git repository (required for account-level connectors)
        /// </summary>
        [Input("repoName")]
        public Input<string>? RepoName { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the chaos hub
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public HubArgs()
        {
        }
        public static new HubArgs Empty => new HubArgs();
    }

    public sealed class HubState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the Git connector
        /// </summary>
        [Input("connectorId")]
        public Input<string>? ConnectorId { get; set; }

        /// <summary>
        /// Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
        /// </summary>
        [Input("connectorScope")]
        public Input<string>? ConnectorScope { get; set; }

        /// <summary>
        /// Creation timestamp
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Description of the chaos hub
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the chaos hub is available
        /// </summary>
        [Input("isAvailable")]
        public Input<bool>? IsAvailable { get; set; }

        /// <summary>
        /// Whether this is the default chaos hub
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// Timestamp of the last sync
        /// </summary>
        [Input("lastSyncedAt")]
        public Input<string>? LastSyncedAt { get; set; }

        /// <summary>
        /// Name of the chaos hub
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization ID of the chaos hub
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The project ID of the chaos hub
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Git repository branch
        /// </summary>
        [Input("repoBranch")]
        public Input<string>? RepoBranch { get; set; }

        /// <summary>
        /// Name of the Git repository (required for account-level connectors)
        /// </summary>
        [Input("repoName")]
        public Input<string>? RepoName { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the chaos hub
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Total number of experiments in the hub
        /// </summary>
        [Input("totalExperiments")]
        public Input<int>? TotalExperiments { get; set; }

        /// <summary>
        /// Total number of faults in the hub
        /// </summary>
        [Input("totalFaults")]
        public Input<int>? TotalFaults { get; set; }

        /// <summary>
        /// Last update timestamp
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public HubState()
        {
        }
        public static new HubState Empty => new HubState();
    }
}
