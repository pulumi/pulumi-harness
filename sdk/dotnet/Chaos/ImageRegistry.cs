// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Chaos
{
    /// <summary>
    /// Resource for managing a Harness Chaos Image Registry
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Harness.Chaos.ImageRegistry("example", new()
    ///     {
    ///         OrgId = "&lt;org_id&gt;",
    ///         ProjectId = "&lt;project_id&gt;",
    ///         RegistryServer = "&lt;registry_server&gt;",
    ///         RegistryAccount = "&lt;registry_account&gt;",
    ///         IsPrivate = true,
    ///         SecretName = "&lt;secret_name&gt;",
    ///         IsDefault = false,
    ///         IsOverrideAllowed = true,
    ///         UseCustomImages = true,
    ///         CustomImages = new[]
    ///         {
    ///             new Harness.Chaos.Inputs.ImageRegistryCustomImageArgs
    ///             {
    ///                 LogWatcher = "&lt;log_watcher_image&gt;",
    ///                 Ddcr = "&lt;ddcr_image&gt;",
    ///                 DdcrLib = "&lt;ddcr_lib_image&gt;",
    ///                 DdcrFault = "&lt;ddcr_fault_image&gt;",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [HarnessResourceType("harness:chaos/imageRegistry:ImageRegistry")]
    public partial class ImageRegistry : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Creation timestamp
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Custom images configuration
        /// </summary>
        [Output("customImages")]
        public Output<ImmutableArray<Outputs.ImageRegistryCustomImage>> CustomImages { get; private set; } = null!;

        /// <summary>
        /// The infrastructure ID to set up the image registry
        /// </summary>
        [Output("infraId")]
        public Output<string?> InfraId { get; private set; } = null!;

        /// <summary>
        /// Whether this is the default registry
        /// </summary>
        [Output("isDefault")]
        public Output<bool?> IsDefault { get; private set; } = null!;

        /// <summary>
        /// Whether override is allowed for this registry
        /// </summary>
        [Output("isOverrideAllowed")]
        public Output<bool?> IsOverrideAllowed { get; private set; } = null!;

        /// <summary>
        /// Whether the registry is private
        /// </summary>
        [Output("isPrivate")]
        public Output<bool> IsPrivate { get; private set; } = null!;

        /// <summary>
        /// The organization ID of the image registry
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// The project ID of the image registry
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The registry account name
        /// </summary>
        [Output("registryAccount")]
        public Output<string> RegistryAccount { get; private set; } = null!;

        /// <summary>
        /// The registry server URL
        /// </summary>
        [Output("registryServer")]
        public Output<string> RegistryServer { get; private set; } = null!;

        /// <summary>
        /// The name of the secret for authentication
        /// </summary>
        [Output("secretName")]
        public Output<string?> SecretName { get; private set; } = null!;

        /// <summary>
        /// Last update timestamp
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// Whether to use custom images
        /// </summary>
        [Output("useCustomImages")]
        public Output<bool?> UseCustomImages { get; private set; } = null!;


        /// <summary>
        /// Create a ImageRegistry resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ImageRegistry(string name, ImageRegistryArgs args, CustomResourceOptions? options = null)
            : base("harness:chaos/imageRegistry:ImageRegistry", name, args ?? new ImageRegistryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ImageRegistry(string name, Input<string> id, ImageRegistryState? state = null, CustomResourceOptions? options = null)
            : base("harness:chaos/imageRegistry:ImageRegistry", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ImageRegistry resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ImageRegistry Get(string name, Input<string> id, ImageRegistryState? state = null, CustomResourceOptions? options = null)
        {
            return new ImageRegistry(name, id, state, options);
        }
    }

    public sealed class ImageRegistryArgs : global::Pulumi.ResourceArgs
    {
        [Input("customImages")]
        private InputList<Inputs.ImageRegistryCustomImageArgs>? _customImages;

        /// <summary>
        /// Custom images configuration
        /// </summary>
        public InputList<Inputs.ImageRegistryCustomImageArgs> CustomImages
        {
            get => _customImages ?? (_customImages = new InputList<Inputs.ImageRegistryCustomImageArgs>());
            set => _customImages = value;
        }

        /// <summary>
        /// The infrastructure ID to set up the image registry
        /// </summary>
        [Input("infraId")]
        public Input<string>? InfraId { get; set; }

        /// <summary>
        /// Whether this is the default registry
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// Whether override is allowed for this registry
        /// </summary>
        [Input("isOverrideAllowed")]
        public Input<bool>? IsOverrideAllowed { get; set; }

        /// <summary>
        /// Whether the registry is private
        /// </summary>
        [Input("isPrivate", required: true)]
        public Input<bool> IsPrivate { get; set; } = null!;

        /// <summary>
        /// The organization ID of the image registry
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The project ID of the image registry
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The registry account name
        /// </summary>
        [Input("registryAccount", required: true)]
        public Input<string> RegistryAccount { get; set; } = null!;

        /// <summary>
        /// The registry server URL
        /// </summary>
        [Input("registryServer", required: true)]
        public Input<string> RegistryServer { get; set; } = null!;

        /// <summary>
        /// The name of the secret for authentication
        /// </summary>
        [Input("secretName")]
        public Input<string>? SecretName { get; set; }

        /// <summary>
        /// Whether to use custom images
        /// </summary>
        [Input("useCustomImages")]
        public Input<bool>? UseCustomImages { get; set; }

        public ImageRegistryArgs()
        {
        }
        public static new ImageRegistryArgs Empty => new ImageRegistryArgs();
    }

    public sealed class ImageRegistryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Creation timestamp
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("customImages")]
        private InputList<Inputs.ImageRegistryCustomImageGetArgs>? _customImages;

        /// <summary>
        /// Custom images configuration
        /// </summary>
        public InputList<Inputs.ImageRegistryCustomImageGetArgs> CustomImages
        {
            get => _customImages ?? (_customImages = new InputList<Inputs.ImageRegistryCustomImageGetArgs>());
            set => _customImages = value;
        }

        /// <summary>
        /// The infrastructure ID to set up the image registry
        /// </summary>
        [Input("infraId")]
        public Input<string>? InfraId { get; set; }

        /// <summary>
        /// Whether this is the default registry
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// Whether override is allowed for this registry
        /// </summary>
        [Input("isOverrideAllowed")]
        public Input<bool>? IsOverrideAllowed { get; set; }

        /// <summary>
        /// Whether the registry is private
        /// </summary>
        [Input("isPrivate")]
        public Input<bool>? IsPrivate { get; set; }

        /// <summary>
        /// The organization ID of the image registry
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The project ID of the image registry
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The registry account name
        /// </summary>
        [Input("registryAccount")]
        public Input<string>? RegistryAccount { get; set; }

        /// <summary>
        /// The registry server URL
        /// </summary>
        [Input("registryServer")]
        public Input<string>? RegistryServer { get; set; }

        /// <summary>
        /// The name of the secret for authentication
        /// </summary>
        [Input("secretName")]
        public Input<string>? SecretName { get; set; }

        /// <summary>
        /// Last update timestamp
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// Whether to use custom images
        /// </summary>
        [Input("useCustomImages")]
        public Input<bool>? UseCustomImages { get; set; }

        public ImageRegistryState()
        {
        }
        public static new ImageRegistryState Empty => new ImageRegistryState();
    }
}
