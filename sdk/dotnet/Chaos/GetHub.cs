// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Chaos
{
    public static class GetHub
    {
        /// <summary>
        /// Data source for retrieving a Harness Chaos Hub
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Chaos.GetHub.Invoke(new()
        ///     {
        ///         Name = "&lt;name&gt;",
        ///         OrgId = "&lt;org_id&gt;",
        ///         ProjectId = "&lt;project_id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetHubResult> InvokeAsync(GetHubArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetHubResult>("harness:chaos/getHub:getHub", args ?? new GetHubArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Chaos Hub
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Chaos.GetHub.Invoke(new()
        ///     {
        ///         Name = "&lt;name&gt;",
        ///         OrgId = "&lt;org_id&gt;",
        ///         ProjectId = "&lt;project_id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetHubResult> Invoke(GetHubInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetHubResult>("harness:chaos/getHub:getHub", args ?? new GetHubInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Chaos Hub
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Chaos.GetHub.Invoke(new()
        ///     {
        ///         Name = "&lt;name&gt;",
        ///         OrgId = "&lt;org_id&gt;",
        ///         ProjectId = "&lt;project_id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetHubResult> Invoke(GetHubInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetHubResult>("harness:chaos/getHub:getHub", args ?? new GetHubInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHubArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the chaos hub
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The organization ID of the chaos hub
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// The project ID of the chaos hub
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetHubArgs()
        {
        }
        public static new GetHubArgs Empty => new GetHubArgs();
    }

    public sealed class GetHubInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the chaos hub
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The organization ID of the chaos hub
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The project ID of the chaos hub
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetHubInvokeArgs()
        {
        }
        public static new GetHubInvokeArgs Empty => new GetHubInvokeArgs();
    }


    [OutputType]
    public sealed class GetHubResult
    {
        /// <summary>
        /// ID of the Git connector
        /// </summary>
        public readonly string ConnectorId;
        /// <summary>
        /// Creation timestamp
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Description of the chaos hub
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether the chaos hub is available
        /// </summary>
        public readonly bool IsAvailable;
        /// <summary>
        /// Whether this is the default chaos hub
        /// </summary>
        public readonly bool IsDefault;
        /// <summary>
        /// Timestamp of the last sync
        /// </summary>
        public readonly string LastSyncedAt;
        /// <summary>
        /// Name of the chaos hub
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The organization ID of the chaos hub
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// The project ID of the chaos hub
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Git repository branch
        /// </summary>
        public readonly string RepoBranch;
        /// <summary>
        /// Name of the Git repository
        /// </summary>
        public readonly string RepoName;
        /// <summary>
        /// Tags associated with the chaos hub
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Total number of experiments in the hub
        /// </summary>
        public readonly int TotalExperiments;
        /// <summary>
        /// Total number of faults in the hub
        /// </summary>
        public readonly int TotalFaults;
        /// <summary>
        /// Last update timestamp
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetHubResult(
            string connectorId,

            string createdAt,

            string description,

            string id,

            bool isAvailable,

            bool isDefault,

            string lastSyncedAt,

            string name,

            string? orgId,

            string? projectId,

            string repoBranch,

            string repoName,

            ImmutableArray<string> tags,

            int totalExperiments,

            int totalFaults,

            string updatedAt)
        {
            ConnectorId = connectorId;
            CreatedAt = createdAt;
            Description = description;
            Id = id;
            IsAvailable = isAvailable;
            IsDefault = isDefault;
            LastSyncedAt = lastSyncedAt;
            Name = name;
            OrgId = orgId;
            ProjectId = projectId;
            RepoBranch = repoBranch;
            RepoName = repoName;
            Tags = tags;
            TotalExperiments = totalExperiments;
            TotalFaults = totalFaults;
            UpdatedAt = updatedAt;
        }
    }
}
