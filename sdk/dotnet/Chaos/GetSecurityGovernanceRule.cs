// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Chaos
{
    public static class GetSecurityGovernanceRule
    {
        /// <summary>
        /// Data source for retrieving a Harness Chaos Security Governance Rule.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Data sources to verify the rules
        ///     var example = Harness.Chaos.GetSecurityGovernanceRule.Invoke(new()
        ///     {
        ///         Id = "&lt;rule_id&gt;",
        ///         OrgId = "&lt;org_id&gt;",
        ///         ProjectId = "&lt;project_id&gt;",
        ///     });
        /// 
        ///     var exampleLinux = Harness.Chaos.GetSecurityGovernanceRule.Invoke(new()
        ///     {
        ///         Id = "&lt;rule_id&gt;",
        ///         OrgId = "&lt;org_id&gt;",
        ///         ProjectId = "&lt;project_id&gt;",
        ///     });
        /// 
        ///     var exampleWindows = Harness.Chaos.GetSecurityGovernanceRule.Invoke(new()
        ///     {
        ///         Id = "&lt;rule_id&gt;",
        ///         OrgId = "&lt;org_id&gt;",
        ///         ProjectId = "&lt;project_id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSecurityGovernanceRuleResult> InvokeAsync(GetSecurityGovernanceRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecurityGovernanceRuleResult>("harness:chaos/getSecurityGovernanceRule:getSecurityGovernanceRule", args ?? new GetSecurityGovernanceRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Chaos Security Governance Rule.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Data sources to verify the rules
        ///     var example = Harness.Chaos.GetSecurityGovernanceRule.Invoke(new()
        ///     {
        ///         Id = "&lt;rule_id&gt;",
        ///         OrgId = "&lt;org_id&gt;",
        ///         ProjectId = "&lt;project_id&gt;",
        ///     });
        /// 
        ///     var exampleLinux = Harness.Chaos.GetSecurityGovernanceRule.Invoke(new()
        ///     {
        ///         Id = "&lt;rule_id&gt;",
        ///         OrgId = "&lt;org_id&gt;",
        ///         ProjectId = "&lt;project_id&gt;",
        ///     });
        /// 
        ///     var exampleWindows = Harness.Chaos.GetSecurityGovernanceRule.Invoke(new()
        ///     {
        ///         Id = "&lt;rule_id&gt;",
        ///         OrgId = "&lt;org_id&gt;",
        ///         ProjectId = "&lt;project_id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecurityGovernanceRuleResult> Invoke(GetSecurityGovernanceRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityGovernanceRuleResult>("harness:chaos/getSecurityGovernanceRule:getSecurityGovernanceRule", args ?? new GetSecurityGovernanceRuleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Chaos Security Governance Rule.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Data sources to verify the rules
        ///     var example = Harness.Chaos.GetSecurityGovernanceRule.Invoke(new()
        ///     {
        ///         Id = "&lt;rule_id&gt;",
        ///         OrgId = "&lt;org_id&gt;",
        ///         ProjectId = "&lt;project_id&gt;",
        ///     });
        /// 
        ///     var exampleLinux = Harness.Chaos.GetSecurityGovernanceRule.Invoke(new()
        ///     {
        ///         Id = "&lt;rule_id&gt;",
        ///         OrgId = "&lt;org_id&gt;",
        ///         ProjectId = "&lt;project_id&gt;",
        ///     });
        /// 
        ///     var exampleWindows = Harness.Chaos.GetSecurityGovernanceRule.Invoke(new()
        ///     {
        ///         Id = "&lt;rule_id&gt;",
        ///         OrgId = "&lt;org_id&gt;",
        ///         ProjectId = "&lt;project_id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecurityGovernanceRuleResult> Invoke(GetSecurityGovernanceRuleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityGovernanceRuleResult>("harness:chaos/getSecurityGovernanceRule:getSecurityGovernanceRule", args ?? new GetSecurityGovernanceRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityGovernanceRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the rule.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the rule.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The organization identifier.
        /// </summary>
        [Input("orgId", required: true)]
        public string OrgId { get; set; } = null!;

        /// <summary>
        /// The project identifier.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetSecurityGovernanceRuleArgs()
        {
        }
        public static new GetSecurityGovernanceRuleArgs Empty => new GetSecurityGovernanceRuleArgs();
    }

    public sealed class GetSecurityGovernanceRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the rule.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization identifier.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// The project identifier.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetSecurityGovernanceRuleInvokeArgs()
        {
        }
        public static new GetSecurityGovernanceRuleInvokeArgs Empty => new GetSecurityGovernanceRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecurityGovernanceRuleResult
    {
        /// <summary>
        /// List of condition IDs associated with the rule.
        /// </summary>
        public readonly ImmutableArray<string> ConditionIds;
        /// <summary>
        /// The description of the rule.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The ID of the rule.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Whether the rule is enabled.
        /// </summary>
        public readonly bool IsEnabled;
        /// <summary>
        /// The name of the rule.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The organization identifier.
        /// </summary>
        public readonly string OrgId;
        /// <summary>
        /// The project identifier.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Tags associated with the rule.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Time windows when the rule is active.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityGovernanceRuleTimeWindowResult> TimeWindows;
        /// <summary>
        /// List of user group IDs associated with the rule.
        /// </summary>
        public readonly ImmutableArray<string> UserGroupIds;

        [OutputConstructor]
        private GetSecurityGovernanceRuleResult(
            ImmutableArray<string> conditionIds,

            string description,

            string? id,

            bool isEnabled,

            string? name,

            string orgId,

            string projectId,

            ImmutableArray<string> tags,

            ImmutableArray<Outputs.GetSecurityGovernanceRuleTimeWindowResult> timeWindows,

            ImmutableArray<string> userGroupIds)
        {
            ConditionIds = conditionIds;
            Description = description;
            Id = id;
            IsEnabled = isEnabled;
            Name = name;
            OrgId = orgId;
            ProjectId = projectId;
            Tags = tags;
            TimeWindows = timeWindows;
            UserGroupIds = userGroupIds;
        }
    }
}
