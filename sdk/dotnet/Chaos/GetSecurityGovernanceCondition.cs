// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Chaos
{
    public static class GetSecurityGovernanceCondition
    {
        /// <summary>
        /// Data source for retrieving a Harness Chaos Security Governance Condition
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Example of looking up a security governance condition by name
        ///     var byName = Harness.Chaos.GetSecurityGovernanceCondition.Invoke(new()
        ///     {
        ///         OrgId = orgId,
        ///         ProjectId = projectId,
        ///         Name = "k8s-security-condition",
        ///     });
        /// 
        ///     // Example of looking up a security governance condition by ID
        ///     var byId = Harness.Chaos.GetSecurityGovernanceCondition.Invoke(new()
        ///     {
        ///         OrgId = orgId,
        ///         ProjectId = projectId,
        ///         Id = "&lt;condition_id&gt;",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["securityGovernanceConditionByName"] = byName,
        ///         ["securityGovernanceConditionById"] = byId,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetSecurityGovernanceConditionResult> InvokeAsync(GetSecurityGovernanceConditionArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecurityGovernanceConditionResult>("harness:chaos/getSecurityGovernanceCondition:getSecurityGovernanceCondition", args ?? new GetSecurityGovernanceConditionArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Chaos Security Governance Condition
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Example of looking up a security governance condition by name
        ///     var byName = Harness.Chaos.GetSecurityGovernanceCondition.Invoke(new()
        ///     {
        ///         OrgId = orgId,
        ///         ProjectId = projectId,
        ///         Name = "k8s-security-condition",
        ///     });
        /// 
        ///     // Example of looking up a security governance condition by ID
        ///     var byId = Harness.Chaos.GetSecurityGovernanceCondition.Invoke(new()
        ///     {
        ///         OrgId = orgId,
        ///         ProjectId = projectId,
        ///         Id = "&lt;condition_id&gt;",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["securityGovernanceConditionByName"] = byName,
        ///         ["securityGovernanceConditionById"] = byId,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecurityGovernanceConditionResult> Invoke(GetSecurityGovernanceConditionInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityGovernanceConditionResult>("harness:chaos/getSecurityGovernanceCondition:getSecurityGovernanceCondition", args ?? new GetSecurityGovernanceConditionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Chaos Security Governance Condition
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Example of looking up a security governance condition by name
        ///     var byName = Harness.Chaos.GetSecurityGovernanceCondition.Invoke(new()
        ///     {
        ///         OrgId = orgId,
        ///         ProjectId = projectId,
        ///         Name = "k8s-security-condition",
        ///     });
        /// 
        ///     // Example of looking up a security governance condition by ID
        ///     var byId = Harness.Chaos.GetSecurityGovernanceCondition.Invoke(new()
        ///     {
        ///         OrgId = orgId,
        ///         ProjectId = projectId,
        ///         Id = "&lt;condition_id&gt;",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["securityGovernanceConditionByName"] = byName,
        ///         ["securityGovernanceConditionById"] = byId,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecurityGovernanceConditionResult> Invoke(GetSecurityGovernanceConditionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityGovernanceConditionResult>("harness:chaos/getSecurityGovernanceCondition:getSecurityGovernanceCondition", args ?? new GetSecurityGovernanceConditionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityGovernanceConditionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the security governance condition. Either `Id` or `Name` must be specified.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the security governance condition. Either `Id` or `Name` must be specified.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The organization ID of the security governance condition
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// The project ID of the security governance condition
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetSecurityGovernanceConditionArgs()
        {
        }
        public static new GetSecurityGovernanceConditionArgs Empty => new GetSecurityGovernanceConditionArgs();
    }

    public sealed class GetSecurityGovernanceConditionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the security governance condition. Either `Id` or `Name` must be specified.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the security governance condition. Either `Id` or `Name` must be specified.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization ID of the security governance condition
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The project ID of the security governance condition
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetSecurityGovernanceConditionInvokeArgs()
        {
        }
        public static new GetSecurityGovernanceConditionInvokeArgs Empty => new GetSecurityGovernanceConditionInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecurityGovernanceConditionResult
    {
        /// <summary>
        /// The description of the security governance condition
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Fault specification for the condition
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityGovernanceConditionFaultSpecResult> FaultSpecs;
        /// <summary>
        /// The ID of the security governance condition. Either `Id` or `Name` must be specified.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The infrastructure type (KubernetesV2, Linux, Windows)
        /// </summary>
        public readonly string InfraType;
        /// <summary>
        /// Kubernetes specific configuration
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityGovernanceConditionK8sSpecResult> K8sSpecs;
        /// <summary>
        /// Machine specific configuration
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityGovernanceConditionMachineSpecResult> MachineSpecs;
        /// <summary>
        /// The name of the security governance condition. Either `Id` or `Name` must be specified.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The organization ID of the security governance condition
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// The project ID of the security governance condition
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Tags associated with the condition
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetSecurityGovernanceConditionResult(
            string description,

            ImmutableArray<Outputs.GetSecurityGovernanceConditionFaultSpecResult> faultSpecs,

            string id,

            string infraType,

            ImmutableArray<Outputs.GetSecurityGovernanceConditionK8sSpecResult> k8sSpecs,

            ImmutableArray<Outputs.GetSecurityGovernanceConditionMachineSpecResult> machineSpecs,

            string name,

            string? orgId,

            string? projectId,

            ImmutableArray<string> tags)
        {
            Description = description;
            FaultSpecs = faultSpecs;
            Id = id;
            InfraType = infraType;
            K8sSpecs = k8sSpecs;
            MachineSpecs = machineSpecs;
            Name = name;
            OrgId = orgId;
            ProjectId = projectId;
            Tags = tags;
        }
    }
}
