// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Chaos
{
    public static class GetImageRegistry
    {
        /// <summary>
        /// Data source for retrieving a Harness Chaos Image Registry and checking override status
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Data source to verify the registry
        ///     var example = Harness.Chaos.GetImageRegistry.Invoke(new()
        ///     {
        ///         OrgId = "&lt;org_id&gt;",
        ///         ProjectId = "&lt;project_id&gt;",
        ///     });
        /// 
        ///     // Example of checking override status
        ///     var overrideCheck = Harness.Chaos.GetImageRegistry.Invoke(new()
        ///     {
        ///         OrgId = "&lt;org_id&gt;",
        ///         ProjectId = "&lt;project_id&gt;",
        ///         CheckOverride = true,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetImageRegistryResult> InvokeAsync(GetImageRegistryArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImageRegistryResult>("harness:chaos/getImageRegistry:getImageRegistry", args ?? new GetImageRegistryArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Chaos Image Registry and checking override status
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Data source to verify the registry
        ///     var example = Harness.Chaos.GetImageRegistry.Invoke(new()
        ///     {
        ///         OrgId = "&lt;org_id&gt;",
        ///         ProjectId = "&lt;project_id&gt;",
        ///     });
        /// 
        ///     // Example of checking override status
        ///     var overrideCheck = Harness.Chaos.GetImageRegistry.Invoke(new()
        ///     {
        ///         OrgId = "&lt;org_id&gt;",
        ///         ProjectId = "&lt;project_id&gt;",
        ///         CheckOverride = true,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetImageRegistryResult> Invoke(GetImageRegistryInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageRegistryResult>("harness:chaos/getImageRegistry:getImageRegistry", args ?? new GetImageRegistryInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Chaos Image Registry and checking override status
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Data source to verify the registry
        ///     var example = Harness.Chaos.GetImageRegistry.Invoke(new()
        ///     {
        ///         OrgId = "&lt;org_id&gt;",
        ///         ProjectId = "&lt;project_id&gt;",
        ///     });
        /// 
        ///     // Example of checking override status
        ///     var overrideCheck = Harness.Chaos.GetImageRegistry.Invoke(new()
        ///     {
        ///         OrgId = "&lt;org_id&gt;",
        ///         ProjectId = "&lt;project_id&gt;",
        ///         CheckOverride = true,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetImageRegistryResult> Invoke(GetImageRegistryInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageRegistryResult>("harness:chaos/getImageRegistry:getImageRegistry", args ?? new GetImageRegistryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImageRegistryArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Whether to check if override is allowed
        /// </summary>
        [Input("checkOverride")]
        public bool? CheckOverride { get; set; }

        /// <summary>
        /// The infrastructure ID to set up the image registry
        /// </summary>
        [Input("infraId")]
        public string? InfraId { get; set; }

        /// <summary>
        /// The organization ID of the image registry
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// The project ID of the image registry
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetImageRegistryArgs()
        {
        }
        public static new GetImageRegistryArgs Empty => new GetImageRegistryArgs();
    }

    public sealed class GetImageRegistryInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Whether to check if override is allowed
        /// </summary>
        [Input("checkOverride")]
        public Input<bool>? CheckOverride { get; set; }

        /// <summary>
        /// The infrastructure ID to set up the image registry
        /// </summary>
        [Input("infraId")]
        public Input<string>? InfraId { get; set; }

        /// <summary>
        /// The organization ID of the image registry
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The project ID of the image registry
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetImageRegistryInvokeArgs()
        {
        }
        public static new GetImageRegistryInvokeArgs Empty => new GetImageRegistryInvokeArgs();
    }


    [OutputType]
    public sealed class GetImageRegistryResult
    {
        /// <summary>
        /// Whether to check if override is allowed
        /// </summary>
        public readonly bool? CheckOverride;
        /// <summary>
        /// Creation timestamp
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Custom images configuration
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImageRegistryCustomImageResult> CustomImages;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The infrastructure ID to set up the image registry
        /// </summary>
        public readonly string? InfraId;
        /// <summary>
        /// Whether this is the default registry
        /// </summary>
        public readonly bool IsDefault;
        /// <summary>
        /// Whether override is allowed for this registry
        /// </summary>
        public readonly bool IsOverrideAllowed;
        /// <summary>
        /// Whether the registry is private
        /// </summary>
        public readonly bool IsPrivate;
        /// <summary>
        /// The organization ID of the image registry
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Indicates if override is blocked by scope (only populated if check_override is true)
        /// </summary>
        public readonly string OverrideBlockedByScope;
        /// <summary>
        /// The project ID of the image registry
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// The registry account name
        /// </summary>
        public readonly string RegistryAccount;
        /// <summary>
        /// The registry server URL
        /// </summary>
        public readonly string RegistryServer;
        /// <summary>
        /// The name of the secret for authentication
        /// </summary>
        public readonly string SecretName;
        /// <summary>
        /// Last update timestamp
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// Whether custom images are used
        /// </summary>
        public readonly bool UseCustomImages;

        [OutputConstructor]
        private GetImageRegistryResult(
            bool? checkOverride,

            string createdAt,

            ImmutableArray<Outputs.GetImageRegistryCustomImageResult> customImages,

            string id,

            string? infraId,

            bool isDefault,

            bool isOverrideAllowed,

            bool isPrivate,

            string? orgId,

            string overrideBlockedByScope,

            string? projectId,

            string registryAccount,

            string registryServer,

            string secretName,

            string updatedAt,

            bool useCustomImages)
        {
            CheckOverride = checkOverride;
            CreatedAt = createdAt;
            CustomImages = customImages;
            Id = id;
            InfraId = infraId;
            IsDefault = isDefault;
            IsOverrideAllowed = isOverrideAllowed;
            IsPrivate = isPrivate;
            OrgId = orgId;
            OverrideBlockedByScope = overrideBlockedByScope;
            ProjectId = projectId;
            RegistryAccount = registryAccount;
            RegistryServer = registryServer;
            SecretName = secretName;
            UpdatedAt = updatedAt;
            UseCustomImages = useCustomImages;
        }
    }
}
