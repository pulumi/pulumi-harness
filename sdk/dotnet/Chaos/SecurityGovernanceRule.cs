// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Chaos
{
    /// <summary>
    /// Resource for managing a Harness Chaos Security Governance Rule
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // K8s Rule
    ///     var example = new Harness.Chaos.SecurityGovernanceRule("example", new()
    ///     {
    ///         OrgId = "&lt;org_id&gt;",
    ///         ProjectId = "&lt;project_id&gt;",
    ///         Name = "&lt;name&gt;",
    ///         Description = "&lt;description&gt;",
    ///         IsEnabled = true,
    ///         ConditionIds = new[]
    ///         {
    ///             "&lt;condition_id&gt;",
    ///         },
    ///         UserGroupIds = new[]
    ///         {
    ///             "_project_all_users",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "&lt;tag1&gt;",
    ///             "&lt;tag2&gt;",
    ///         },
    ///         TimeWindows = new[]
    ///         {
    ///             new Harness.Chaos.Inputs.SecurityGovernanceRuleTimeWindowArgs
    ///             {
    ///                 TimeZone = "UTC",
    ///                 StartTime = 1711238400000,
    ///                 Duration = "24h",
    ///                 Recurrence = new Harness.Chaos.Inputs.SecurityGovernanceRuleTimeWindowRecurrenceArgs
    ///                 {
    ///                     Type = "Daily",
    ///                     Until = -1,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Linux Rule
    ///     var linuxRule = new Harness.Chaos.SecurityGovernanceRule("linux_rule", new()
    ///     {
    ///         OrgId = "&lt;org_id&gt;",
    ///         ProjectId = "&lt;project_id&gt;",
    ///         Name = "&lt;name&gt;",
    ///         Description = "&lt;description&gt;",
    ///         IsEnabled = true,
    ///         ConditionIds = new[]
    ///         {
    ///             "&lt;condition_id&gt;",
    ///         },
    ///         UserGroupIds = new[]
    ///         {
    ///             "_project_all_users",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "&lt;tag1&gt;",
    ///             "&lt;tag2&gt;",
    ///         },
    ///         TimeWindows = new[]
    ///         {
    ///             new Harness.Chaos.Inputs.SecurityGovernanceRuleTimeWindowArgs
    ///             {
    ///                 TimeZone = "UTC",
    ///                 StartTime = 1711238400000,
    ///                 Duration = "24h",
    ///                 Recurrence = new Harness.Chaos.Inputs.SecurityGovernanceRuleTimeWindowRecurrenceArgs
    ///                 {
    ///                     Type = "Daily",
    ///                     Until = -1,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Windows Rule
    ///     var windowsRule = new Harness.Chaos.SecurityGovernanceRule("windows_rule", new()
    ///     {
    ///         OrgId = "&lt;org_id&gt;",
    ///         ProjectId = "&lt;project_id&gt;",
    ///         Name = "&lt;name&gt;",
    ///         Description = "&lt;description&gt;",
    ///         IsEnabled = true,
    ///         ConditionIds = new[]
    ///         {
    ///             "&lt;condition_id&gt;",
    ///         },
    ///         UserGroupIds = new[]
    ///         {
    ///             "_project_all_users",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "&lt;tag1&gt;",
    ///             "&lt;tag2&gt;",
    ///         },
    ///         TimeWindows = new[]
    ///         {
    ///             new Harness.Chaos.Inputs.SecurityGovernanceRuleTimeWindowArgs
    ///             {
    ///                 TimeZone = "UTC",
    ///                 StartTime = 1711238400000,
    ///                 Duration = "24h",
    ///                 Recurrence = new Harness.Chaos.Inputs.SecurityGovernanceRuleTimeWindowRecurrenceArgs
    ///                 {
    ///                     Type = "Daily",
    ///                     Until = -1,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import Project level Chaos Security Governance Rule
    /// 
    /// ```sh
    /// $ pulumi import harness:chaos/securityGovernanceRule:SecurityGovernanceRule example org_id/project_id/rule_id
    /// ```
    /// </summary>
    [HarnessResourceType("harness:chaos/securityGovernanceRule:SecurityGovernanceRule")]
    public partial class SecurityGovernanceRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of condition IDs associated with this rule
        /// </summary>
        [Output("conditionIds")]
        public Output<ImmutableArray<string>> ConditionIds { get; private set; } = null!;

        /// <summary>
        /// Description of the security governance rule
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether the rule is enabled
        /// </summary>
        [Output("isEnabled")]
        public Output<bool?> IsEnabled { get; private set; } = null!;

        /// <summary>
        /// Name of the security governance rule
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The organization ID of the security governance rule
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// The project ID of the security governance rule
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Tags for the security governance rule
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("timeWindows")]
        public Output<ImmutableArray<Outputs.SecurityGovernanceRuleTimeWindow>> TimeWindows { get; private set; } = null!;

        /// <summary>
        /// List of user group IDs associated with this rule
        /// </summary>
        [Output("userGroupIds")]
        public Output<ImmutableArray<string>> UserGroupIds { get; private set; } = null!;


        /// <summary>
        /// Create a SecurityGovernanceRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecurityGovernanceRule(string name, SecurityGovernanceRuleArgs args, CustomResourceOptions? options = null)
            : base("harness:chaos/securityGovernanceRule:SecurityGovernanceRule", name, args ?? new SecurityGovernanceRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecurityGovernanceRule(string name, Input<string> id, SecurityGovernanceRuleState? state = null, CustomResourceOptions? options = null)
            : base("harness:chaos/securityGovernanceRule:SecurityGovernanceRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecurityGovernanceRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecurityGovernanceRule Get(string name, Input<string> id, SecurityGovernanceRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new SecurityGovernanceRule(name, id, state, options);
        }
    }

    public sealed class SecurityGovernanceRuleArgs : global::Pulumi.ResourceArgs
    {
        [Input("conditionIds", required: true)]
        private InputList<string>? _conditionIds;

        /// <summary>
        /// List of condition IDs associated with this rule
        /// </summary>
        public InputList<string> ConditionIds
        {
            get => _conditionIds ?? (_conditionIds = new InputList<string>());
            set => _conditionIds = value;
        }

        /// <summary>
        /// Description of the security governance rule
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the rule is enabled
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// Name of the security governance rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization ID of the security governance rule
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// The project ID of the security governance rule
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags for the security governance rule
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("timeWindows", required: true)]
        private InputList<Inputs.SecurityGovernanceRuleTimeWindowArgs>? _timeWindows;
        public InputList<Inputs.SecurityGovernanceRuleTimeWindowArgs> TimeWindows
        {
            get => _timeWindows ?? (_timeWindows = new InputList<Inputs.SecurityGovernanceRuleTimeWindowArgs>());
            set => _timeWindows = value;
        }

        [Input("userGroupIds")]
        private InputList<string>? _userGroupIds;

        /// <summary>
        /// List of user group IDs associated with this rule
        /// </summary>
        public InputList<string> UserGroupIds
        {
            get => _userGroupIds ?? (_userGroupIds = new InputList<string>());
            set => _userGroupIds = value;
        }

        public SecurityGovernanceRuleArgs()
        {
        }
        public static new SecurityGovernanceRuleArgs Empty => new SecurityGovernanceRuleArgs();
    }

    public sealed class SecurityGovernanceRuleState : global::Pulumi.ResourceArgs
    {
        [Input("conditionIds")]
        private InputList<string>? _conditionIds;

        /// <summary>
        /// List of condition IDs associated with this rule
        /// </summary>
        public InputList<string> ConditionIds
        {
            get => _conditionIds ?? (_conditionIds = new InputList<string>());
            set => _conditionIds = value;
        }

        /// <summary>
        /// Description of the security governance rule
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the rule is enabled
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// Name of the security governance rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization ID of the security governance rule
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The project ID of the security governance rule
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags for the security governance rule
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("timeWindows")]
        private InputList<Inputs.SecurityGovernanceRuleTimeWindowGetArgs>? _timeWindows;
        public InputList<Inputs.SecurityGovernanceRuleTimeWindowGetArgs> TimeWindows
        {
            get => _timeWindows ?? (_timeWindows = new InputList<Inputs.SecurityGovernanceRuleTimeWindowGetArgs>());
            set => _timeWindows = value;
        }

        [Input("userGroupIds")]
        private InputList<string>? _userGroupIds;

        /// <summary>
        /// List of user group IDs associated with this rule
        /// </summary>
        public InputList<string> UserGroupIds
        {
            get => _userGroupIds ?? (_userGroupIds = new InputList<string>());
            set => _userGroupIds = value;
        }

        public SecurityGovernanceRuleState()
        {
        }
        public static new SecurityGovernanceRuleState Empty => new SecurityGovernanceRuleState();
    }
}
