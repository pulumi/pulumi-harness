// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Chaos
{
    /// <summary>
    /// Resource for managing a Harness Chaos Security Governance Condition
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harness = Pulumi.Harness;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Example of a Kubernetes Security Governance Condition
    ///     var k8sCondition = new Harness.Chaos.SecurityGovernanceCondition("k8s_condition", new()
    ///     {
    ///         OrgId = orgId,
    ///         ProjectId = projectId,
    ///         Name = "k8s-security-condition",
    ///         Description = "Security governance condition for Kubernetes workloads",
    ///         InfraType = "KubernetesV2",
    ///         FaultSpec = new Harness.Chaos.Inputs.SecurityGovernanceConditionFaultSpecArgs
    ///         {
    ///             Operator = "NOT_EQUAL_TO",
    ///             Faults = new[]
    ///             {
    ///                 new Harness.Chaos.Inputs.SecurityGovernanceConditionFaultSpecFaultArgs
    ///                 {
    ///                     FaultType = "FAULT",
    ///                     Name = "pod-delete",
    ///                 },
    ///                 new Harness.Chaos.Inputs.SecurityGovernanceConditionFaultSpecFaultArgs
    ///                 {
    ///                     FaultType = "FAULT",
    ///                     Name = "pod-dns",
    ///                 },
    ///             },
    ///         },
    ///         K8sSpec = new Harness.Chaos.Inputs.SecurityGovernanceConditionK8sSpecArgs
    ///         {
    ///             InfraSpec = new Harness.Chaos.Inputs.SecurityGovernanceConditionK8sSpecInfraSpecArgs
    ///             {
    ///                 Operator = "EQUAL_TO",
    ///                 InfraIds = new[]
    ///                 {
    ///                     k8sInfraId,
    ///                 },
    ///             },
    ///             ApplicationSpec = new Harness.Chaos.Inputs.SecurityGovernanceConditionK8sSpecApplicationSpecArgs
    ///             {
    ///                 Operator = "EQUAL_TO",
    ///                 Workloads = new[]
    ///                 {
    ///                     new Harness.Chaos.Inputs.SecurityGovernanceConditionK8sSpecApplicationSpecWorkloadArgs
    ///                     {
    ///                         Namespace = "default",
    ///                         Kind = "deployment",
    ///                         Label = "app=nginx",
    ///                         Services = new[]
    ///                         {
    ///                             "nginx-service",
    ///                         },
    ///                         ApplicationMapId = "nginx-app",
    ///                     },
    ///                 },
    ///             },
    ///             ChaosServiceAccountSpec = new Harness.Chaos.Inputs.SecurityGovernanceConditionK8sSpecChaosServiceAccountSpecArgs
    ///             {
    ///                 Operator = "EQUAL_TO",
    ///                 ServiceAccounts = new[]
    ///                 {
    ///                     "default",
    ///                     "chaos-service-account",
    ///                 },
    ///             },
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "env:prod",
    ///             "team:security",
    ///             "platform:k8s",
    ///         },
    ///     });
    /// 
    ///     // Example of a Windows Security Governance Condition
    ///     var windowsCondition = new Harness.Chaos.SecurityGovernanceCondition("windows_condition", new()
    ///     {
    ///         OrgId = orgId,
    ///         ProjectId = projectId,
    ///         Name = "windows-security-condition",
    ///         Description = "Security governance condition for Windows hosts",
    ///         InfraType = "Windows",
    ///         FaultSpec = new Harness.Chaos.Inputs.SecurityGovernanceConditionFaultSpecArgs
    ///         {
    ///             Operator = "NOT_EQUAL_TO",
    ///             Faults = new[]
    ///             {
    ///                 new Harness.Chaos.Inputs.SecurityGovernanceConditionFaultSpecFaultArgs
    ///                 {
    ///                     FaultType = "FAULT",
    ///                     Name = "process-kill",
    ///                 },
    ///                 new Harness.Chaos.Inputs.SecurityGovernanceConditionFaultSpecFaultArgs
    ///                 {
    ///                     FaultType = "FAULT",
    ///                     Name = "cpu-hog",
    ///                 },
    ///             },
    ///         },
    ///         MachineSpec = new Harness.Chaos.Inputs.SecurityGovernanceConditionMachineSpecArgs
    ///         {
    ///             InfraSpec = new Harness.Chaos.Inputs.SecurityGovernanceConditionMachineSpecInfraSpecArgs
    ///             {
    ///                 Operator = "EQUAL_TO",
    ///                 InfraIds = new[]
    ///                 {
    ///                     windowsInfraId,
    ///                 },
    ///             },
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "env:prod",
    ///             "team:security",
    ///             "platform:windows",
    ///         },
    ///     });
    /// 
    ///     // Example of a Linux Security Governance Condition
    ///     var linuxCondition = new Harness.Chaos.SecurityGovernanceCondition("linux_condition", new()
    ///     {
    ///         OrgId = orgId,
    ///         ProjectId = projectId,
    ///         Name = "linux-security-condition",
    ///         Description = "Security governance condition for Linux hosts",
    ///         InfraType = "Linux",
    ///         FaultSpec = new Harness.Chaos.Inputs.SecurityGovernanceConditionFaultSpecArgs
    ///         {
    ///             Operator = "NOT_EQUAL_TO",
    ///             Faults = new[]
    ///             {
    ///                 new Harness.Chaos.Inputs.SecurityGovernanceConditionFaultSpecFaultArgs
    ///                 {
    ///                     FaultType = "FAULT",
    ///                     Name = "process-kill",
    ///                 },
    ///                 new Harness.Chaos.Inputs.SecurityGovernanceConditionFaultSpecFaultArgs
    ///                 {
    ///                     FaultType = "FAULT",
    ///                     Name = "memory-hog",
    ///                 },
    ///             },
    ///         },
    ///         MachineSpec = new Harness.Chaos.Inputs.SecurityGovernanceConditionMachineSpecArgs
    ///         {
    ///             InfraSpec = new Harness.Chaos.Inputs.SecurityGovernanceConditionMachineSpecInfraSpecArgs
    ///             {
    ///                 Operator = "EQUAL_TO",
    ///                 InfraIds = new[]
    ///                 {
    ///                     linuxInfraId,
    ///                 },
    ///             },
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "env:prod",
    ///             "team:security",
    ///             "platform:linux",
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["k8sConditionId"] = k8sCondition.Id,
    ///         ["windowsConditionId"] = windowsCondition.Id,
    ///         ["linuxConditionId"] = linuxCondition.Id,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import Project level Chaos Security Governance Condition
    /// 
    /// ```sh
    /// $ pulumi import harness:chaos/securityGovernanceCondition:SecurityGovernanceCondition example org_id/project_id/condition_id
    /// ```
    /// </summary>
    [HarnessResourceType("harness:chaos/securityGovernanceCondition:SecurityGovernanceCondition")]
    public partial class SecurityGovernanceCondition : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the security governance condition
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Specification for faults to be included in the condition
        /// </summary>
        [Output("faultSpec")]
        public Output<Outputs.SecurityGovernanceConditionFaultSpec> FaultSpec { get; private set; } = null!;

        /// <summary>
        /// Type of infrastructure (Kubernetes, KubernetesV2, Linux, Windows, CloudFoundry, Container)
        /// </summary>
        [Output("infraType")]
        public Output<string> InfraType { get; private set; } = null!;

        /// <summary>
        /// Kubernetes specific configuration (required when infra*type is KUBERNETES or KUBERNETESV2)
        /// </summary>
        [Output("k8sSpec")]
        public Output<Outputs.SecurityGovernanceConditionK8sSpec?> K8sSpec { get; private set; } = null!;

        /// <summary>
        /// Machine specific configuration (required when infra*type is LINUX or WINDOWS)
        /// </summary>
        [Output("machineSpec")]
        public Output<Outputs.SecurityGovernanceConditionMachineSpec?> MachineSpec { get; private set; } = null!;

        /// <summary>
        /// Name of the security governance condition
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The organization ID of the security governance condition
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// The project ID of the security governance condition
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Tags for the security governance condition
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a SecurityGovernanceCondition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecurityGovernanceCondition(string name, SecurityGovernanceConditionArgs args, CustomResourceOptions? options = null)
            : base("harness:chaos/securityGovernanceCondition:SecurityGovernanceCondition", name, args ?? new SecurityGovernanceConditionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecurityGovernanceCondition(string name, Input<string> id, SecurityGovernanceConditionState? state = null, CustomResourceOptions? options = null)
            : base("harness:chaos/securityGovernanceCondition:SecurityGovernanceCondition", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecurityGovernanceCondition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecurityGovernanceCondition Get(string name, Input<string> id, SecurityGovernanceConditionState? state = null, CustomResourceOptions? options = null)
        {
            return new SecurityGovernanceCondition(name, id, state, options);
        }
    }

    public sealed class SecurityGovernanceConditionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the security governance condition
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specification for faults to be included in the condition
        /// </summary>
        [Input("faultSpec", required: true)]
        public Input<Inputs.SecurityGovernanceConditionFaultSpecArgs> FaultSpec { get; set; } = null!;

        /// <summary>
        /// Type of infrastructure (Kubernetes, KubernetesV2, Linux, Windows, CloudFoundry, Container)
        /// </summary>
        [Input("infraType", required: true)]
        public Input<string> InfraType { get; set; } = null!;

        /// <summary>
        /// Kubernetes specific configuration (required when infra*type is KUBERNETES or KUBERNETESV2)
        /// </summary>
        [Input("k8sSpec")]
        public Input<Inputs.SecurityGovernanceConditionK8sSpecArgs>? K8sSpec { get; set; }

        /// <summary>
        /// Machine specific configuration (required when infra*type is LINUX or WINDOWS)
        /// </summary>
        [Input("machineSpec")]
        public Input<Inputs.SecurityGovernanceConditionMachineSpecArgs>? MachineSpec { get; set; }

        /// <summary>
        /// Name of the security governance condition
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization ID of the security governance condition
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// The project ID of the security governance condition
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags for the security governance condition
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public SecurityGovernanceConditionArgs()
        {
        }
        public static new SecurityGovernanceConditionArgs Empty => new SecurityGovernanceConditionArgs();
    }

    public sealed class SecurityGovernanceConditionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the security governance condition
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specification for faults to be included in the condition
        /// </summary>
        [Input("faultSpec")]
        public Input<Inputs.SecurityGovernanceConditionFaultSpecGetArgs>? FaultSpec { get; set; }

        /// <summary>
        /// Type of infrastructure (Kubernetes, KubernetesV2, Linux, Windows, CloudFoundry, Container)
        /// </summary>
        [Input("infraType")]
        public Input<string>? InfraType { get; set; }

        /// <summary>
        /// Kubernetes specific configuration (required when infra*type is KUBERNETES or KUBERNETESV2)
        /// </summary>
        [Input("k8sSpec")]
        public Input<Inputs.SecurityGovernanceConditionK8sSpecGetArgs>? K8sSpec { get; set; }

        /// <summary>
        /// Machine specific configuration (required when infra*type is LINUX or WINDOWS)
        /// </summary>
        [Input("machineSpec")]
        public Input<Inputs.SecurityGovernanceConditionMachineSpecGetArgs>? MachineSpec { get; set; }

        /// <summary>
        /// Name of the security governance condition
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization ID of the security governance condition
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The project ID of the security governance condition
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags for the security governance condition
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public SecurityGovernanceConditionState()
        {
        }
        public static new SecurityGovernanceConditionState Empty => new SecurityGovernanceConditionState();
    }
}
