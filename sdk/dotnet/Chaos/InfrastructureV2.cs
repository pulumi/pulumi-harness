// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Chaos
{
    /// <summary>
    /// Resource for managing Harness Chaos Infrastructure V2.
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Import Project level Chaos Infrastructure v2
    /// 
    /// ```sh
    /// $ pulumi import harness:chaos/infrastructureV2:InfrastructureV2 example &lt;org_id&gt;/&lt;project_id&gt;/&lt;environment_id&gt;/&lt;infra_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:chaos/infrastructureV2:InfrastructureV2")]
    public partial class InfrastructureV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable AI features for the infrastructure.
        /// </summary>
        [Output("aiEnabled")]
        public Output<bool?> AiEnabled { get; private set; } = null!;

        /// <summary>
        /// Annotations to apply to the infrastructure pods.
        /// </summary>
        [Output("annotation")]
        public Output<ImmutableDictionary<string, string>?> Annotation { get; private set; } = null!;

        /// <summary>
        /// Container configurations.
        /// </summary>
        [Output("containers")]
        public Output<string?> Containers { get; private set; } = null!;

        /// <summary>
        /// Correlation ID for the request.
        /// </summary>
        [Output("correlationId")]
        public Output<string> CorrelationId { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Description of the infrastructure.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// ID of the discovery agent to use.
        /// </summary>
        [Output("discoveryAgentId")]
        public Output<string?> DiscoveryAgentId { get; private set; } = null!;

        /// <summary>
        /// The ID of the environment.
        /// </summary>
        [Output("environmentId")]
        public Output<string> EnvironmentId { get; private set; } = null!;

        /// <summary>
        /// List of environment variables to set in the container.
        /// </summary>
        [Output("envs")]
        public Output<ImmutableArray<Outputs.InfrastructureV2Env>> Envs { get; private set; } = null!;

        /// <summary>
        /// Identifier for the infrastructure.
        /// </summary>
        [Output("identifiers")]
        public Output<ImmutableArray<Outputs.InfrastructureV2Identifier>> Identifiers { get; private set; } = null!;

        /// <summary>
        /// Identity for the infrastructure.
        /// </summary>
        [Output("identity")]
        public Output<string> Identity { get; private set; } = null!;

        /// <summary>
        /// Configuration for the container image registry.
        /// </summary>
        [Output("imageRegistries")]
        public Output<ImmutableArray<Outputs.InfrastructureV2ImageRegistry>> ImageRegistries { get; private set; } = null!;

        /// <summary>
        /// ID of the infrastructure.
        /// </summary>
        [Output("infraId")]
        public Output<string> InfraId { get; private set; } = null!;

        /// <summary>
        /// Namespace where the infrastructure is installed.
        /// </summary>
        [Output("infraNamespace")]
        public Output<string> InfraNamespace { get; private set; } = null!;

        /// <summary>
        /// Scope of the infrastructure. Valid values: NAMESPACE, CLUSTER
        /// </summary>
        [Output("infraScope")]
        public Output<string> InfraScope { get; private set; } = null!;

        /// <summary>
        /// Type of the infrastructure. Valid values: KUBERNETES, KUBERNETESV2
        /// </summary>
        [Output("infraType")]
        public Output<string?> InfraType { get; private set; } = null!;

        /// <summary>
        /// Skip TLS verification for the infrastructure.
        /// </summary>
        [Output("insecureSkipVerify")]
        public Output<bool?> InsecureSkipVerify { get; private set; } = null!;

        /// <summary>
        /// Installation command for the infrastructure.
        /// </summary>
        [Output("installCommand")]
        public Output<string> InstallCommand { get; private set; } = null!;

        /// <summary>
        /// Kubernetes connector identifier.
        /// </summary>
        [Output("k8sConnectorId")]
        public Output<string> K8sConnectorId { get; private set; } = null!;

        /// <summary>
        /// Labels to apply to the infrastructure pods.
        /// </summary>
        [Output("label")]
        public Output<ImmutableDictionary<string, string>?> Label { get; private set; } = null!;

        /// <summary>
        /// mTLS configuration for the infrastructure.
        /// </summary>
        [Output("mtls")]
        public Output<Outputs.InfrastructureV2Mtls?> Mtls { get; private set; } = null!;

        /// <summary>
        /// Name of the infrastructure.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Kubernetes namespace where the infrastructure will be installed. Maps to the infrastructure namespace.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// Node selector for the infrastructure pods.
        /// </summary>
        [Output("nodeSelector")]
        public Output<ImmutableDictionary<string, string>?> NodeSelector { get; private set; } = null!;

        /// <summary>
        /// The ID of the organization.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Proxy configuration for the infrastructure.
        /// </summary>
        [Output("proxy")]
        public Output<Outputs.InfrastructureV2Proxy?> Proxy { get; private set; } = null!;

        /// <summary>
        /// Group ID to run the infrastructure as.
        /// </summary>
        [Output("runAsGroup")]
        public Output<int?> RunAsGroup { get; private set; } = null!;

        /// <summary>
        /// User ID to run the infrastructure as.
        /// </summary>
        [Output("runAsUser")]
        public Output<int?> RunAsUser { get; private set; } = null!;

        /// <summary>
        /// Service account used by the infrastructure.
        /// </summary>
        [Output("serviceAccount")]
        public Output<string?> ServiceAccount { get; private set; } = null!;

        /// <summary>
        /// Status of the infrastructure.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Tags for the infrastructure.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// If specified, the pod's tolerations.
        /// </summary>
        [Output("tolerations")]
        public Output<ImmutableArray<Outputs.InfrastructureV2Toleration>> Tolerations { get; private set; } = null!;

        /// <summary>
        /// Last update timestamp.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// Volume mounts for the container.
        /// </summary>
        [Output("volumeMounts")]
        public Output<ImmutableArray<Outputs.InfrastructureV2VolumeMount>> VolumeMounts { get; private set; } = null!;

        /// <summary>
        /// Volumes to be created in the infrastructure.
        /// </summary>
        [Output("volumes")]
        public Output<ImmutableArray<Outputs.InfrastructureV2Volume>> Volumes { get; private set; } = null!;


        /// <summary>
        /// Create a InfrastructureV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InfrastructureV2(string name, InfrastructureV2Args args, CustomResourceOptions? options = null)
            : base("harness:chaos/infrastructureV2:InfrastructureV2", name, args ?? new InfrastructureV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private InfrastructureV2(string name, Input<string> id, InfrastructureV2State? state = null, CustomResourceOptions? options = null)
            : base("harness:chaos/infrastructureV2:InfrastructureV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InfrastructureV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InfrastructureV2 Get(string name, Input<string> id, InfrastructureV2State? state = null, CustomResourceOptions? options = null)
        {
            return new InfrastructureV2(name, id, state, options);
        }
    }

    public sealed class InfrastructureV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable AI features for the infrastructure.
        /// </summary>
        [Input("aiEnabled")]
        public Input<bool>? AiEnabled { get; set; }

        [Input("annotation")]
        private InputMap<string>? _annotation;

        /// <summary>
        /// Annotations to apply to the infrastructure pods.
        /// </summary>
        public InputMap<string> Annotation
        {
            get => _annotation ?? (_annotation = new InputMap<string>());
            set => _annotation = value;
        }

        /// <summary>
        /// Container configurations.
        /// </summary>
        [Input("containers")]
        public Input<string>? Containers { get; set; }

        /// <summary>
        /// Correlation ID for the request.
        /// </summary>
        [Input("correlationId")]
        public Input<string>? CorrelationId { get; set; }

        /// <summary>
        /// Description of the infrastructure.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// ID of the discovery agent to use.
        /// </summary>
        [Input("discoveryAgentId")]
        public Input<string>? DiscoveryAgentId { get; set; }

        /// <summary>
        /// The ID of the environment.
        /// </summary>
        [Input("environmentId", required: true)]
        public Input<string> EnvironmentId { get; set; } = null!;

        [Input("envs")]
        private InputList<Inputs.InfrastructureV2EnvArgs>? _envs;

        /// <summary>
        /// List of environment variables to set in the container.
        /// </summary>
        public InputList<Inputs.InfrastructureV2EnvArgs> Envs
        {
            get => _envs ?? (_envs = new InputList<Inputs.InfrastructureV2EnvArgs>());
            set => _envs = value;
        }

        [Input("imageRegistries")]
        private InputList<Inputs.InfrastructureV2ImageRegistryArgs>? _imageRegistries;

        /// <summary>
        /// Configuration for the container image registry.
        /// </summary>
        public InputList<Inputs.InfrastructureV2ImageRegistryArgs> ImageRegistries
        {
            get => _imageRegistries ?? (_imageRegistries = new InputList<Inputs.InfrastructureV2ImageRegistryArgs>());
            set => _imageRegistries = value;
        }

        /// <summary>
        /// ID of the infrastructure.
        /// </summary>
        [Input("infraId", required: true)]
        public Input<string> InfraId { get; set; } = null!;

        /// <summary>
        /// Scope of the infrastructure. Valid values: NAMESPACE, CLUSTER
        /// </summary>
        [Input("infraScope")]
        public Input<string>? InfraScope { get; set; }

        /// <summary>
        /// Type of the infrastructure. Valid values: KUBERNETES, KUBERNETESV2
        /// </summary>
        [Input("infraType")]
        public Input<string>? InfraType { get; set; }

        /// <summary>
        /// Skip TLS verification for the infrastructure.
        /// </summary>
        [Input("insecureSkipVerify")]
        public Input<bool>? InsecureSkipVerify { get; set; }

        [Input("label")]
        private InputMap<string>? _label;

        /// <summary>
        /// Labels to apply to the infrastructure pods.
        /// </summary>
        public InputMap<string> Label
        {
            get => _label ?? (_label = new InputMap<string>());
            set => _label = value;
        }

        /// <summary>
        /// mTLS configuration for the infrastructure.
        /// </summary>
        [Input("mtls")]
        public Input<Inputs.InfrastructureV2MtlsArgs>? Mtls { get; set; }

        /// <summary>
        /// Name of the infrastructure.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Kubernetes namespace where the infrastructure will be installed. Maps to the infrastructure namespace.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("nodeSelector")]
        private InputMap<string>? _nodeSelector;

        /// <summary>
        /// Node selector for the infrastructure pods.
        /// </summary>
        public InputMap<string> NodeSelector
        {
            get => _nodeSelector ?? (_nodeSelector = new InputMap<string>());
            set => _nodeSelector = value;
        }

        /// <summary>
        /// The ID of the organization.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Proxy configuration for the infrastructure.
        /// </summary>
        [Input("proxy")]
        public Input<Inputs.InfrastructureV2ProxyArgs>? Proxy { get; set; }

        /// <summary>
        /// Group ID to run the infrastructure as.
        /// </summary>
        [Input("runAsGroup")]
        public Input<int>? RunAsGroup { get; set; }

        /// <summary>
        /// User ID to run the infrastructure as.
        /// </summary>
        [Input("runAsUser")]
        public Input<int>? RunAsUser { get; set; }

        /// <summary>
        /// Service account used by the infrastructure.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags for the infrastructure.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("tolerations")]
        private InputList<Inputs.InfrastructureV2TolerationArgs>? _tolerations;

        /// <summary>
        /// If specified, the pod's tolerations.
        /// </summary>
        public InputList<Inputs.InfrastructureV2TolerationArgs> Tolerations
        {
            get => _tolerations ?? (_tolerations = new InputList<Inputs.InfrastructureV2TolerationArgs>());
            set => _tolerations = value;
        }

        [Input("volumeMounts")]
        private InputList<Inputs.InfrastructureV2VolumeMountArgs>? _volumeMounts;

        /// <summary>
        /// Volume mounts for the container.
        /// </summary>
        public InputList<Inputs.InfrastructureV2VolumeMountArgs> VolumeMounts
        {
            get => _volumeMounts ?? (_volumeMounts = new InputList<Inputs.InfrastructureV2VolumeMountArgs>());
            set => _volumeMounts = value;
        }

        [Input("volumes")]
        private InputList<Inputs.InfrastructureV2VolumeArgs>? _volumes;

        /// <summary>
        /// Volumes to be created in the infrastructure.
        /// </summary>
        public InputList<Inputs.InfrastructureV2VolumeArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.InfrastructureV2VolumeArgs>());
            set => _volumes = value;
        }

        public InfrastructureV2Args()
        {
        }
        public static new InfrastructureV2Args Empty => new InfrastructureV2Args();
    }

    public sealed class InfrastructureV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable AI features for the infrastructure.
        /// </summary>
        [Input("aiEnabled")]
        public Input<bool>? AiEnabled { get; set; }

        [Input("annotation")]
        private InputMap<string>? _annotation;

        /// <summary>
        /// Annotations to apply to the infrastructure pods.
        /// </summary>
        public InputMap<string> Annotation
        {
            get => _annotation ?? (_annotation = new InputMap<string>());
            set => _annotation = value;
        }

        /// <summary>
        /// Container configurations.
        /// </summary>
        [Input("containers")]
        public Input<string>? Containers { get; set; }

        /// <summary>
        /// Correlation ID for the request.
        /// </summary>
        [Input("correlationId")]
        public Input<string>? CorrelationId { get; set; }

        /// <summary>
        /// Creation timestamp.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Description of the infrastructure.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// ID of the discovery agent to use.
        /// </summary>
        [Input("discoveryAgentId")]
        public Input<string>? DiscoveryAgentId { get; set; }

        /// <summary>
        /// The ID of the environment.
        /// </summary>
        [Input("environmentId")]
        public Input<string>? EnvironmentId { get; set; }

        [Input("envs")]
        private InputList<Inputs.InfrastructureV2EnvGetArgs>? _envs;

        /// <summary>
        /// List of environment variables to set in the container.
        /// </summary>
        public InputList<Inputs.InfrastructureV2EnvGetArgs> Envs
        {
            get => _envs ?? (_envs = new InputList<Inputs.InfrastructureV2EnvGetArgs>());
            set => _envs = value;
        }

        [Input("identifiers")]
        private InputList<Inputs.InfrastructureV2IdentifierGetArgs>? _identifiers;

        /// <summary>
        /// Identifier for the infrastructure.
        /// </summary>
        public InputList<Inputs.InfrastructureV2IdentifierGetArgs> Identifiers
        {
            get => _identifiers ?? (_identifiers = new InputList<Inputs.InfrastructureV2IdentifierGetArgs>());
            set => _identifiers = value;
        }

        /// <summary>
        /// Identity for the infrastructure.
        /// </summary>
        [Input("identity")]
        public Input<string>? Identity { get; set; }

        [Input("imageRegistries")]
        private InputList<Inputs.InfrastructureV2ImageRegistryGetArgs>? _imageRegistries;

        /// <summary>
        /// Configuration for the container image registry.
        /// </summary>
        public InputList<Inputs.InfrastructureV2ImageRegistryGetArgs> ImageRegistries
        {
            get => _imageRegistries ?? (_imageRegistries = new InputList<Inputs.InfrastructureV2ImageRegistryGetArgs>());
            set => _imageRegistries = value;
        }

        /// <summary>
        /// ID of the infrastructure.
        /// </summary>
        [Input("infraId")]
        public Input<string>? InfraId { get; set; }

        /// <summary>
        /// Namespace where the infrastructure is installed.
        /// </summary>
        [Input("infraNamespace")]
        public Input<string>? InfraNamespace { get; set; }

        /// <summary>
        /// Scope of the infrastructure. Valid values: NAMESPACE, CLUSTER
        /// </summary>
        [Input("infraScope")]
        public Input<string>? InfraScope { get; set; }

        /// <summary>
        /// Type of the infrastructure. Valid values: KUBERNETES, KUBERNETESV2
        /// </summary>
        [Input("infraType")]
        public Input<string>? InfraType { get; set; }

        /// <summary>
        /// Skip TLS verification for the infrastructure.
        /// </summary>
        [Input("insecureSkipVerify")]
        public Input<bool>? InsecureSkipVerify { get; set; }

        /// <summary>
        /// Installation command for the infrastructure.
        /// </summary>
        [Input("installCommand")]
        public Input<string>? InstallCommand { get; set; }

        /// <summary>
        /// Kubernetes connector identifier.
        /// </summary>
        [Input("k8sConnectorId")]
        public Input<string>? K8sConnectorId { get; set; }

        [Input("label")]
        private InputMap<string>? _label;

        /// <summary>
        /// Labels to apply to the infrastructure pods.
        /// </summary>
        public InputMap<string> Label
        {
            get => _label ?? (_label = new InputMap<string>());
            set => _label = value;
        }

        /// <summary>
        /// mTLS configuration for the infrastructure.
        /// </summary>
        [Input("mtls")]
        public Input<Inputs.InfrastructureV2MtlsGetArgs>? Mtls { get; set; }

        /// <summary>
        /// Name of the infrastructure.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Kubernetes namespace where the infrastructure will be installed. Maps to the infrastructure namespace.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("nodeSelector")]
        private InputMap<string>? _nodeSelector;

        /// <summary>
        /// Node selector for the infrastructure pods.
        /// </summary>
        public InputMap<string> NodeSelector
        {
            get => _nodeSelector ?? (_nodeSelector = new InputMap<string>());
            set => _nodeSelector = value;
        }

        /// <summary>
        /// The ID of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Proxy configuration for the infrastructure.
        /// </summary>
        [Input("proxy")]
        public Input<Inputs.InfrastructureV2ProxyGetArgs>? Proxy { get; set; }

        /// <summary>
        /// Group ID to run the infrastructure as.
        /// </summary>
        [Input("runAsGroup")]
        public Input<int>? RunAsGroup { get; set; }

        /// <summary>
        /// User ID to run the infrastructure as.
        /// </summary>
        [Input("runAsUser")]
        public Input<int>? RunAsUser { get; set; }

        /// <summary>
        /// Service account used by the infrastructure.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        /// <summary>
        /// Status of the infrastructure.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags for the infrastructure.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("tolerations")]
        private InputList<Inputs.InfrastructureV2TolerationGetArgs>? _tolerations;

        /// <summary>
        /// If specified, the pod's tolerations.
        /// </summary>
        public InputList<Inputs.InfrastructureV2TolerationGetArgs> Tolerations
        {
            get => _tolerations ?? (_tolerations = new InputList<Inputs.InfrastructureV2TolerationGetArgs>());
            set => _tolerations = value;
        }

        /// <summary>
        /// Last update timestamp.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        [Input("volumeMounts")]
        private InputList<Inputs.InfrastructureV2VolumeMountGetArgs>? _volumeMounts;

        /// <summary>
        /// Volume mounts for the container.
        /// </summary>
        public InputList<Inputs.InfrastructureV2VolumeMountGetArgs> VolumeMounts
        {
            get => _volumeMounts ?? (_volumeMounts = new InputList<Inputs.InfrastructureV2VolumeMountGetArgs>());
            set => _volumeMounts = value;
        }

        [Input("volumes")]
        private InputList<Inputs.InfrastructureV2VolumeGetArgs>? _volumes;

        /// <summary>
        /// Volumes to be created in the infrastructure.
        /// </summary>
        public InputList<Inputs.InfrastructureV2VolumeGetArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.InfrastructureV2VolumeGetArgs>());
            set => _volumes = value;
        }

        public InfrastructureV2State()
        {
        }
        public static new InfrastructureV2State Empty => new InfrastructureV2State();
    }
}
