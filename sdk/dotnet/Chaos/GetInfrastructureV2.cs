// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Chaos
{
    public static class GetInfrastructureV2
    {
        /// <summary>
        /// Data source for retrieving a Harness Chaos Infrastructure V2.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Data source to fetch a specific agent by name
        ///     var byName = Harness.Service.GetDiscoveryAgent.Invoke(new()
        ///     {
        ///         Name = "example-agent",
        ///         OrgIdentifier = orgIdentifier,
        ///         ProjectIdentifier = projectIdentifier,
        ///         EnvironmentIdentifier = environmentIdentifier,
        ///     });
        /// 
        ///     // Data source to fetch a specific agent by identity
        ///     var byIdentity = Harness.Service.GetDiscoveryAgent.Invoke(new()
        ///     {
        ///         Identity = "example-infra",
        ///         OrgIdentifier = orgIdentifier,
        ///         ProjectIdentifier = projectIdentifier,
        ///         EnvironmentIdentifier = environmentIdentifier,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["agentDetailsByName"] = byName,
        ///         ["agentDetailsByIdentity"] = byIdentity,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetInfrastructureV2Result> InvokeAsync(GetInfrastructureV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInfrastructureV2Result>("harness:chaos/getInfrastructureV2:getInfrastructureV2", args ?? new GetInfrastructureV2Args(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Chaos Infrastructure V2.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Data source to fetch a specific agent by name
        ///     var byName = Harness.Service.GetDiscoveryAgent.Invoke(new()
        ///     {
        ///         Name = "example-agent",
        ///         OrgIdentifier = orgIdentifier,
        ///         ProjectIdentifier = projectIdentifier,
        ///         EnvironmentIdentifier = environmentIdentifier,
        ///     });
        /// 
        ///     // Data source to fetch a specific agent by identity
        ///     var byIdentity = Harness.Service.GetDiscoveryAgent.Invoke(new()
        ///     {
        ///         Identity = "example-infra",
        ///         OrgIdentifier = orgIdentifier,
        ///         ProjectIdentifier = projectIdentifier,
        ///         EnvironmentIdentifier = environmentIdentifier,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["agentDetailsByName"] = byName,
        ///         ["agentDetailsByIdentity"] = byIdentity,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetInfrastructureV2Result> Invoke(GetInfrastructureV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInfrastructureV2Result>("harness:chaos/getInfrastructureV2:getInfrastructureV2", args ?? new GetInfrastructureV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Chaos Infrastructure V2.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Data source to fetch a specific agent by name
        ///     var byName = Harness.Service.GetDiscoveryAgent.Invoke(new()
        ///     {
        ///         Name = "example-agent",
        ///         OrgIdentifier = orgIdentifier,
        ///         ProjectIdentifier = projectIdentifier,
        ///         EnvironmentIdentifier = environmentIdentifier,
        ///     });
        /// 
        ///     // Data source to fetch a specific agent by identity
        ///     var byIdentity = Harness.Service.GetDiscoveryAgent.Invoke(new()
        ///     {
        ///         Identity = "example-infra",
        ///         OrgIdentifier = orgIdentifier,
        ///         ProjectIdentifier = projectIdentifier,
        ///         EnvironmentIdentifier = environmentIdentifier,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["agentDetailsByName"] = byName,
        ///         ["agentDetailsByIdentity"] = byIdentity,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetInfrastructureV2Result> Invoke(GetInfrastructureV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInfrastructureV2Result>("harness:chaos/getInfrastructureV2:getInfrastructureV2", args ?? new GetInfrastructureV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInfrastructureV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the environment.
        /// </summary>
        [Input("environmentId", required: true)]
        public string EnvironmentId { get; set; } = null!;

        [Input("imageRegistries")]
        private List<Inputs.GetInfrastructureV2ImageRegistryArgs>? _imageRegistries;

        /// <summary>
        /// Configuration for the container image registry.
        /// </summary>
        public List<Inputs.GetInfrastructureV2ImageRegistryArgs> ImageRegistries
        {
            get => _imageRegistries ?? (_imageRegistries = new List<Inputs.GetInfrastructureV2ImageRegistryArgs>());
            set => _imageRegistries = value;
        }

        /// <summary>
        /// The ID of the infrastructure.
        /// </summary>
        [Input("infraId", required: true)]
        public string InfraId { get; set; } = null!;

        /// <summary>
        /// mTLS configuration for the infrastructure.
        /// </summary>
        [Input("mtls")]
        public Inputs.GetInfrastructureV2MtlsArgs? Mtls { get; set; }

        /// <summary>
        /// The ID of the organization.
        /// </summary>
        [Input("orgId", required: true)]
        public string OrgId { get; set; } = null!;

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// Proxy configuration for the infrastructure.
        /// </summary>
        [Input("proxy")]
        public Inputs.GetInfrastructureV2ProxyArgs? Proxy { get; set; }

        [Input("tolerations")]
        private List<Inputs.GetInfrastructureV2TolerationArgs>? _tolerations;

        /// <summary>
        /// If specified, the pod's tolerations.
        /// </summary>
        public List<Inputs.GetInfrastructureV2TolerationArgs> Tolerations
        {
            get => _tolerations ?? (_tolerations = new List<Inputs.GetInfrastructureV2TolerationArgs>());
            set => _tolerations = value;
        }

        [Input("volumeMounts")]
        private List<Inputs.GetInfrastructureV2VolumeMountArgs>? _volumeMounts;

        /// <summary>
        /// Volume mounts for the container.
        /// </summary>
        public List<Inputs.GetInfrastructureV2VolumeMountArgs> VolumeMounts
        {
            get => _volumeMounts ?? (_volumeMounts = new List<Inputs.GetInfrastructureV2VolumeMountArgs>());
            set => _volumeMounts = value;
        }

        [Input("volumes")]
        private List<Inputs.GetInfrastructureV2VolumeArgs>? _volumes;

        /// <summary>
        /// Volumes to be created in the infrastructure.
        /// </summary>
        public List<Inputs.GetInfrastructureV2VolumeArgs> Volumes
        {
            get => _volumes ?? (_volumes = new List<Inputs.GetInfrastructureV2VolumeArgs>());
            set => _volumes = value;
        }

        public GetInfrastructureV2Args()
        {
        }
        public static new GetInfrastructureV2Args Empty => new GetInfrastructureV2Args();
    }

    public sealed class GetInfrastructureV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the environment.
        /// </summary>
        [Input("environmentId", required: true)]
        public Input<string> EnvironmentId { get; set; } = null!;

        [Input("imageRegistries")]
        private InputList<Inputs.GetInfrastructureV2ImageRegistryInputArgs>? _imageRegistries;

        /// <summary>
        /// Configuration for the container image registry.
        /// </summary>
        public InputList<Inputs.GetInfrastructureV2ImageRegistryInputArgs> ImageRegistries
        {
            get => _imageRegistries ?? (_imageRegistries = new InputList<Inputs.GetInfrastructureV2ImageRegistryInputArgs>());
            set => _imageRegistries = value;
        }

        /// <summary>
        /// The ID of the infrastructure.
        /// </summary>
        [Input("infraId", required: true)]
        public Input<string> InfraId { get; set; } = null!;

        /// <summary>
        /// mTLS configuration for the infrastructure.
        /// </summary>
        [Input("mtls")]
        public Input<Inputs.GetInfrastructureV2MtlsInputArgs>? Mtls { get; set; }

        /// <summary>
        /// The ID of the organization.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Proxy configuration for the infrastructure.
        /// </summary>
        [Input("proxy")]
        public Input<Inputs.GetInfrastructureV2ProxyInputArgs>? Proxy { get; set; }

        [Input("tolerations")]
        private InputList<Inputs.GetInfrastructureV2TolerationInputArgs>? _tolerations;

        /// <summary>
        /// If specified, the pod's tolerations.
        /// </summary>
        public InputList<Inputs.GetInfrastructureV2TolerationInputArgs> Tolerations
        {
            get => _tolerations ?? (_tolerations = new InputList<Inputs.GetInfrastructureV2TolerationInputArgs>());
            set => _tolerations = value;
        }

        [Input("volumeMounts")]
        private InputList<Inputs.GetInfrastructureV2VolumeMountInputArgs>? _volumeMounts;

        /// <summary>
        /// Volume mounts for the container.
        /// </summary>
        public InputList<Inputs.GetInfrastructureV2VolumeMountInputArgs> VolumeMounts
        {
            get => _volumeMounts ?? (_volumeMounts = new InputList<Inputs.GetInfrastructureV2VolumeMountInputArgs>());
            set => _volumeMounts = value;
        }

        [Input("volumes")]
        private InputList<Inputs.GetInfrastructureV2VolumeInputArgs>? _volumes;

        /// <summary>
        /// Volumes to be created in the infrastructure.
        /// </summary>
        public InputList<Inputs.GetInfrastructureV2VolumeInputArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.GetInfrastructureV2VolumeInputArgs>());
            set => _volumes = value;
        }

        public GetInfrastructureV2InvokeArgs()
        {
        }
        public static new GetInfrastructureV2InvokeArgs Empty => new GetInfrastructureV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetInfrastructureV2Result
    {
        public readonly ImmutableDictionary<string, string> Annotation;
        /// <summary>
        /// List of containers in the infrastructure.
        /// </summary>
        public readonly string Containers;
        /// <summary>
        /// Created at of the infrastructure.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Created by of the infrastructure.
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// Description of the infrastructure.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The ID of the environment.
        /// </summary>
        public readonly string EnvironmentId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identifier of the infrastructure.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// Identity of the infrastructure.
        /// </summary>
        public readonly string Identity;
        /// <summary>
        /// Configuration for the container image registry.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInfrastructureV2ImageRegistryResult> ImageRegistries;
        /// <summary>
        /// The ID of the infrastructure.
        /// </summary>
        public readonly string InfraId;
        /// <summary>
        /// Scope of the infrastructure.
        /// </summary>
        public readonly string InfraScope;
        /// <summary>
        /// Type of the infrastructure.
        /// </summary>
        public readonly string InfraType;
        public readonly bool InsecureSkipVerify;
        public readonly bool IsAiEnabled;
        public readonly bool IsChaosEnabled;
        public readonly ImmutableDictionary<string, string> Label;
        /// <summary>
        /// Last heartbeat of the infrastructure.
        /// </summary>
        public readonly int LastHeartbeat;
        /// <summary>
        /// Last workflow timestamp of the infrastructure.
        /// </summary>
        public readonly string LastWorkflowTimestamp;
        /// <summary>
        /// mTLS configuration for the infrastructure.
        /// </summary>
        public readonly Outputs.GetInfrastructureV2MtlsResult? Mtls;
        /// <summary>
        /// Name of the infrastructure.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Kubernetes namespace for the infrastructure.
        /// </summary>
        public readonly string Namespace;
        /// <summary>
        /// Number of schedules for the infrastructure.
        /// </summary>
        public readonly int NoOfSchedules;
        /// <summary>
        /// Number of workflows for the infrastructure.
        /// </summary>
        public readonly int NoOfWorkflows;
        public readonly ImmutableDictionary<string, string> NodeSelector;
        /// <summary>
        /// The ID of the organization.
        /// </summary>
        public readonly string OrgId;
        /// <summary>
        /// The ID of the project.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Proxy configuration for the infrastructure.
        /// </summary>
        public readonly Outputs.GetInfrastructureV2ProxyResult? Proxy;
        public readonly int RunAsGroup;
        public readonly int RunAsUser;
        /// <summary>
        /// Service account used by the infrastructure.
        /// </summary>
        public readonly string ServiceAccount;
        /// <summary>
        /// Status of the infrastructure.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Tags of the infrastructure.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// If specified, the pod's tolerations.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInfrastructureV2TolerationResult> Tolerations;
        /// <summary>
        /// Update status of the infrastructure.
        /// </summary>
        public readonly string UpdateStatus;
        /// <summary>
        /// Updated at of the infrastructure.
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// Updated by of the infrastructure.
        /// </summary>
        public readonly string UpdatedBy;
        /// <summary>
        /// Volume mounts for the container.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInfrastructureV2VolumeMountResult> VolumeMounts;
        /// <summary>
        /// Volumes to be created in the infrastructure.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInfrastructureV2VolumeResult> Volumes;

        [OutputConstructor]
        private GetInfrastructureV2Result(
            ImmutableDictionary<string, string> annotation,

            string containers,

            string createdAt,

            string createdBy,

            string description,

            string environmentId,

            string id,

            string identifier,

            string identity,

            ImmutableArray<Outputs.GetInfrastructureV2ImageRegistryResult> imageRegistries,

            string infraId,

            string infraScope,

            string infraType,

            bool insecureSkipVerify,

            bool isAiEnabled,

            bool isChaosEnabled,

            ImmutableDictionary<string, string> label,

            int lastHeartbeat,

            string lastWorkflowTimestamp,

            Outputs.GetInfrastructureV2MtlsResult? mtls,

            string name,

            string @namespace,

            int noOfSchedules,

            int noOfWorkflows,

            ImmutableDictionary<string, string> nodeSelector,

            string orgId,

            string projectId,

            Outputs.GetInfrastructureV2ProxyResult? proxy,

            int runAsGroup,

            int runAsUser,

            string serviceAccount,

            string status,

            ImmutableArray<string> tags,

            ImmutableArray<Outputs.GetInfrastructureV2TolerationResult> tolerations,

            string updateStatus,

            string updatedAt,

            string updatedBy,

            ImmutableArray<Outputs.GetInfrastructureV2VolumeMountResult> volumeMounts,

            ImmutableArray<Outputs.GetInfrastructureV2VolumeResult> volumes)
        {
            Annotation = annotation;
            Containers = containers;
            CreatedAt = createdAt;
            CreatedBy = createdBy;
            Description = description;
            EnvironmentId = environmentId;
            Id = id;
            Identifier = identifier;
            Identity = identity;
            ImageRegistries = imageRegistries;
            InfraId = infraId;
            InfraScope = infraScope;
            InfraType = infraType;
            InsecureSkipVerify = insecureSkipVerify;
            IsAiEnabled = isAiEnabled;
            IsChaosEnabled = isChaosEnabled;
            Label = label;
            LastHeartbeat = lastHeartbeat;
            LastWorkflowTimestamp = lastWorkflowTimestamp;
            Mtls = mtls;
            Name = name;
            Namespace = @namespace;
            NoOfSchedules = noOfSchedules;
            NoOfWorkflows = noOfWorkflows;
            NodeSelector = nodeSelector;
            OrgId = orgId;
            ProjectId = projectId;
            Proxy = proxy;
            RunAsGroup = runAsGroup;
            RunAsUser = runAsUser;
            ServiceAccount = serviceAccount;
            Status = status;
            Tags = tags;
            Tolerations = tolerations;
            UpdateStatus = updateStatus;
            UpdatedAt = updatedAt;
            UpdatedBy = updatedBy;
            VolumeMounts = volumeMounts;
            Volumes = volumes;
        }
    }
}
