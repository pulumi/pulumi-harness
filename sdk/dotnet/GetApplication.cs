// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness
{
    public static class GetApplication
    {
        /// <summary>
        /// Data source for retrieving a Harness application
        /// </summary>
        public static Task<GetApplicationResult> InvokeAsync(GetApplicationArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApplicationResult>("harness:index/getApplication:getApplication", args ?? new GetApplicationArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness application
        /// </summary>
        public static Output<GetApplicationResult> Invoke(GetApplicationInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApplicationResult>("harness:index/getApplication:getApplication", args ?? new GetApplicationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness application
        /// </summary>
        public static Output<GetApplicationResult> Invoke(GetApplicationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetApplicationResult>("harness:index/getApplication:getApplication", args ?? new GetApplicationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApplicationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The application description
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// The id of the git sync connector
        /// </summary>
        [Input("gitSyncConnectorId")]
        public string? GitSyncConnectorId { get; set; }

        /// <summary>
        /// True if git sync is enabled on this application
        /// </summary>
        [Input("gitSyncEnabled")]
        public bool? GitSyncEnabled { get; set; }

        /// <summary>
        /// Unique identifier of the application
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// When this is set to true, all manual triggers will require API Key authorization
        /// </summary>
        [Input("isManualTriggerAuthorized")]
        public bool? IsManualTriggerAuthorized { get; set; }

        /// <summary>
        /// The name of the application
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetApplicationArgs()
        {
        }
        public static new GetApplicationArgs Empty => new GetApplicationArgs();
    }

    public sealed class GetApplicationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The application description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The id of the git sync connector
        /// </summary>
        [Input("gitSyncConnectorId")]
        public Input<string>? GitSyncConnectorId { get; set; }

        /// <summary>
        /// True if git sync is enabled on this application
        /// </summary>
        [Input("gitSyncEnabled")]
        public Input<bool>? GitSyncEnabled { get; set; }

        /// <summary>
        /// Unique identifier of the application
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// When this is set to true, all manual triggers will require API Key authorization
        /// </summary>
        [Input("isManualTriggerAuthorized")]
        public Input<bool>? IsManualTriggerAuthorized { get; set; }

        /// <summary>
        /// The name of the application
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetApplicationInvokeArgs()
        {
        }
        public static new GetApplicationInvokeArgs Empty => new GetApplicationInvokeArgs();
    }


    [OutputType]
    public sealed class GetApplicationResult
    {
        /// <summary>
        /// The application description
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The id of the git sync connector
        /// </summary>
        public readonly string? GitSyncConnectorId;
        /// <summary>
        /// True if git sync is enabled on this application
        /// </summary>
        public readonly bool? GitSyncEnabled;
        /// <summary>
        /// Unique identifier of the application
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// When this is set to true, all manual triggers will require API Key authorization
        /// </summary>
        public readonly bool? IsManualTriggerAuthorized;
        /// <summary>
        /// The name of the application
        /// </summary>
        public readonly string? Name;

        [OutputConstructor]
        private GetApplicationResult(
            string? description,

            string? gitSyncConnectorId,

            bool? gitSyncEnabled,

            string? id,

            bool? isManualTriggerAuthorized,

            string? name)
        {
            Description = description;
            GitSyncConnectorId = gitSyncConnectorId;
            GitSyncEnabled = gitSyncEnabled;
            Id = id;
            IsManualTriggerAuthorized = isManualTriggerAuthorized;
            Name = name;
        }
    }
}
