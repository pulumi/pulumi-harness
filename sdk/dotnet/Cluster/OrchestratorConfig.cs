// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Cluster
{
    [HarnessResourceType("harness:cluster/orchestratorConfig:OrchestratorConfig")]
    public partial class OrchestratorConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Binpacking preferences for Cluster Orchestrator
        /// </summary>
        [Output("binpacking")]
        public Output<Outputs.OrchestratorConfigBinpacking?> Binpacking { get; private set; } = null!;

        /// <summary>
        /// Spot and Ondemand Distribution Preferences for workload replicas
        /// </summary>
        [Output("distribution")]
        public Output<Outputs.OrchestratorConfigDistribution> Distribution { get; private set; } = null!;

        /// <summary>
        /// Node preferences for Cluster Orchestrator
        /// </summary>
        [Output("nodePreferences")]
        public Output<Outputs.OrchestratorConfigNodePreferences?> NodePreferences { get; private set; } = null!;

        /// <summary>
        /// ID of the Cluster Orchestrator Object
        /// </summary>
        [Output("orchestratorId")]
        public Output<string> OrchestratorId { get; private set; } = null!;


        /// <summary>
        /// Create a OrchestratorConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrchestratorConfig(string name, OrchestratorConfigArgs args, CustomResourceOptions? options = null)
            : base("harness:cluster/orchestratorConfig:OrchestratorConfig", name, args ?? new OrchestratorConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrchestratorConfig(string name, Input<string> id, OrchestratorConfigState? state = null, CustomResourceOptions? options = null)
            : base("harness:cluster/orchestratorConfig:OrchestratorConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrchestratorConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrchestratorConfig Get(string name, Input<string> id, OrchestratorConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new OrchestratorConfig(name, id, state, options);
        }
    }

    public sealed class OrchestratorConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Binpacking preferences for Cluster Orchestrator
        /// </summary>
        [Input("binpacking")]
        public Input<Inputs.OrchestratorConfigBinpackingArgs>? Binpacking { get; set; }

        /// <summary>
        /// Spot and Ondemand Distribution Preferences for workload replicas
        /// </summary>
        [Input("distribution", required: true)]
        public Input<Inputs.OrchestratorConfigDistributionArgs> Distribution { get; set; } = null!;

        /// <summary>
        /// Node preferences for Cluster Orchestrator
        /// </summary>
        [Input("nodePreferences")]
        public Input<Inputs.OrchestratorConfigNodePreferencesArgs>? NodePreferences { get; set; }

        /// <summary>
        /// ID of the Cluster Orchestrator Object
        /// </summary>
        [Input("orchestratorId", required: true)]
        public Input<string> OrchestratorId { get; set; } = null!;

        public OrchestratorConfigArgs()
        {
        }
        public static new OrchestratorConfigArgs Empty => new OrchestratorConfigArgs();
    }

    public sealed class OrchestratorConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Binpacking preferences for Cluster Orchestrator
        /// </summary>
        [Input("binpacking")]
        public Input<Inputs.OrchestratorConfigBinpackingGetArgs>? Binpacking { get; set; }

        /// <summary>
        /// Spot and Ondemand Distribution Preferences for workload replicas
        /// </summary>
        [Input("distribution")]
        public Input<Inputs.OrchestratorConfigDistributionGetArgs>? Distribution { get; set; }

        /// <summary>
        /// Node preferences for Cluster Orchestrator
        /// </summary>
        [Input("nodePreferences")]
        public Input<Inputs.OrchestratorConfigNodePreferencesGetArgs>? NodePreferences { get; set; }

        /// <summary>
        /// ID of the Cluster Orchestrator Object
        /// </summary>
        [Input("orchestratorId")]
        public Input<string>? OrchestratorId { get; set; }

        public OrchestratorConfigState()
        {
        }
        public static new OrchestratorConfigState Empty => new OrchestratorConfigState();
    }
}
