// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Cluster
{
    public static class GetOrchestratorConfig
    {
        /// <summary>
        /// Data Source for retrieving Harness CCM ClusterOrchestrator Config.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Cluster.GetOrchestratorConfig.Invoke(new()
        ///     {
        ///         OrchestratorId = "identifier",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetOrchestratorConfigResult> InvokeAsync(GetOrchestratorConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOrchestratorConfigResult>("harness:cluster/getOrchestratorConfig:getOrchestratorConfig", args ?? new GetOrchestratorConfigArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source for retrieving Harness CCM ClusterOrchestrator Config.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Cluster.GetOrchestratorConfig.Invoke(new()
        ///     {
        ///         OrchestratorId = "identifier",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetOrchestratorConfigResult> Invoke(GetOrchestratorConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrchestratorConfigResult>("harness:cluster/getOrchestratorConfig:getOrchestratorConfig", args ?? new GetOrchestratorConfigInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source for retrieving Harness CCM ClusterOrchestrator Config.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Cluster.GetOrchestratorConfig.Invoke(new()
        ///     {
        ///         OrchestratorId = "identifier",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetOrchestratorConfigResult> Invoke(GetOrchestratorConfigInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrchestratorConfigResult>("harness:cluster/getOrchestratorConfig:getOrchestratorConfig", args ?? new GetOrchestratorConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOrchestratorConfigArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Binpacking preferences for Cluster Orchestrator
        /// </summary>
        [Input("binpacking")]
        public Inputs.GetOrchestratorConfigBinpackingArgs? Binpacking { get; set; }

        /// <summary>
        /// Commitment integration configuration for Cluster Orchestrator
        /// </summary>
        [Input("commitmentIntegration")]
        public Inputs.GetOrchestratorConfigCommitmentIntegrationArgs? CommitmentIntegration { get; set; }

        /// <summary>
        /// Whether the cluster orchestrator is disabled
        /// </summary>
        [Input("disabled")]
        public bool? Disabled { get; set; }

        /// <summary>
        /// Spot and Ondemand Distribution Preferences for workload replicas
        /// </summary>
        [Input("distribution")]
        public Inputs.GetOrchestratorConfigDistributionArgs? Distribution { get; set; }

        /// <summary>
        /// Node preferences for Cluster Orchestrator
        /// </summary>
        [Input("nodePreferences")]
        public Inputs.GetOrchestratorConfigNodePreferencesArgs? NodePreferences { get; set; }

        /// <summary>
        /// ID of the Cluster Orchestrator Object
        /// </summary>
        [Input("orchestratorId", required: true)]
        public string OrchestratorId { get; set; } = null!;

        /// <summary>
        /// Replacement schedule for Cluster Orchestrator
        /// </summary>
        [Input("replacementSchedule")]
        public Inputs.GetOrchestratorConfigReplacementScheduleArgs? ReplacementSchedule { get; set; }

        public GetOrchestratorConfigArgs()
        {
        }
        public static new GetOrchestratorConfigArgs Empty => new GetOrchestratorConfigArgs();
    }

    public sealed class GetOrchestratorConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Binpacking preferences for Cluster Orchestrator
        /// </summary>
        [Input("binpacking")]
        public Input<Inputs.GetOrchestratorConfigBinpackingInputArgs>? Binpacking { get; set; }

        /// <summary>
        /// Commitment integration configuration for Cluster Orchestrator
        /// </summary>
        [Input("commitmentIntegration")]
        public Input<Inputs.GetOrchestratorConfigCommitmentIntegrationInputArgs>? CommitmentIntegration { get; set; }

        /// <summary>
        /// Whether the cluster orchestrator is disabled
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Spot and Ondemand Distribution Preferences for workload replicas
        /// </summary>
        [Input("distribution")]
        public Input<Inputs.GetOrchestratorConfigDistributionInputArgs>? Distribution { get; set; }

        /// <summary>
        /// Node preferences for Cluster Orchestrator
        /// </summary>
        [Input("nodePreferences")]
        public Input<Inputs.GetOrchestratorConfigNodePreferencesInputArgs>? NodePreferences { get; set; }

        /// <summary>
        /// ID of the Cluster Orchestrator Object
        /// </summary>
        [Input("orchestratorId", required: true)]
        public Input<string> OrchestratorId { get; set; } = null!;

        /// <summary>
        /// Replacement schedule for Cluster Orchestrator
        /// </summary>
        [Input("replacementSchedule")]
        public Input<Inputs.GetOrchestratorConfigReplacementScheduleInputArgs>? ReplacementSchedule { get; set; }

        public GetOrchestratorConfigInvokeArgs()
        {
        }
        public static new GetOrchestratorConfigInvokeArgs Empty => new GetOrchestratorConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetOrchestratorConfigResult
    {
        /// <summary>
        /// Binpacking preferences for Cluster Orchestrator
        /// </summary>
        public readonly Outputs.GetOrchestratorConfigBinpackingResult? Binpacking;
        /// <summary>
        /// Commitment integration configuration for Cluster Orchestrator
        /// </summary>
        public readonly Outputs.GetOrchestratorConfigCommitmentIntegrationResult? CommitmentIntegration;
        /// <summary>
        /// Whether the cluster orchestrator is disabled
        /// </summary>
        public readonly bool? Disabled;
        /// <summary>
        /// Spot and Ondemand Distribution Preferences for workload replicas
        /// </summary>
        public readonly Outputs.GetOrchestratorConfigDistributionResult? Distribution;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Node preferences for Cluster Orchestrator
        /// </summary>
        public readonly Outputs.GetOrchestratorConfigNodePreferencesResult? NodePreferences;
        /// <summary>
        /// ID of the Cluster Orchestrator Object
        /// </summary>
        public readonly string OrchestratorId;
        /// <summary>
        /// Replacement schedule for Cluster Orchestrator
        /// </summary>
        public readonly Outputs.GetOrchestratorConfigReplacementScheduleResult? ReplacementSchedule;

        [OutputConstructor]
        private GetOrchestratorConfigResult(
            Outputs.GetOrchestratorConfigBinpackingResult? binpacking,

            Outputs.GetOrchestratorConfigCommitmentIntegrationResult? commitmentIntegration,

            bool? disabled,

            Outputs.GetOrchestratorConfigDistributionResult? distribution,

            string id,

            Outputs.GetOrchestratorConfigNodePreferencesResult? nodePreferences,

            string orchestratorId,

            Outputs.GetOrchestratorConfigReplacementScheduleResult? replacementSchedule)
        {
            Binpacking = binpacking;
            CommitmentIntegration = commitmentIntegration;
            Disabled = disabled;
            Distribution = distribution;
            Id = id;
            NodePreferences = nodePreferences;
            OrchestratorId = orchestratorId;
            ReplacementSchedule = replacementSchedule;
        }
    }
}
