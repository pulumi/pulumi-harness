// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Cluster
{
    public static class GetOrchestrator
    {
        /// <summary>
        /// Data source for retrieving a Harness ClusterOrchestrator.
        /// </summary>
        public static Task<GetOrchestratorResult> InvokeAsync(GetOrchestratorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOrchestratorResult>("harness:cluster/getOrchestrator:getOrchestrator", args ?? new GetOrchestratorArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness ClusterOrchestrator.
        /// </summary>
        public static Output<GetOrchestratorResult> Invoke(GetOrchestratorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrchestratorResult>("harness:cluster/getOrchestrator:getOrchestrator", args ?? new GetOrchestratorInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness ClusterOrchestrator.
        /// </summary>
        public static Output<GetOrchestratorResult> Invoke(GetOrchestratorInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrchestratorResult>("harness:cluster/getOrchestrator:getOrchestrator", args ?? new GetOrchestratorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOrchestratorArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Endpoint of the k8s cluster being onboarded under the orchestrator
        /// </summary>
        [Input("clusterEndpoint", required: true)]
        public string ClusterEndpoint { get; set; } = null!;

        /// <summary>
        /// ID of the Harness Kubernetes Connector Being used
        /// </summary>
        [Input("k8sConnectorId")]
        public string? K8sConnectorId { get; set; }

        /// <summary>
        /// Name of the Orchestrator
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetOrchestratorArgs()
        {
        }
        public static new GetOrchestratorArgs Empty => new GetOrchestratorArgs();
    }

    public sealed class GetOrchestratorInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Endpoint of the k8s cluster being onboarded under the orchestrator
        /// </summary>
        [Input("clusterEndpoint", required: true)]
        public Input<string> ClusterEndpoint { get; set; } = null!;

        /// <summary>
        /// ID of the Harness Kubernetes Connector Being used
        /// </summary>
        [Input("k8sConnectorId")]
        public Input<string>? K8sConnectorId { get; set; }

        /// <summary>
        /// Name of the Orchestrator
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetOrchestratorInvokeArgs()
        {
        }
        public static new GetOrchestratorInvokeArgs Empty => new GetOrchestratorInvokeArgs();
    }


    [OutputType]
    public sealed class GetOrchestratorResult
    {
        /// <summary>
        /// Endpoint of the k8s cluster being onboarded under the orchestrator
        /// </summary>
        public readonly string ClusterEndpoint;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ID of the Harness Kubernetes Connector Being used
        /// </summary>
        public readonly string? K8sConnectorId;
        /// <summary>
        /// Name of the Orchestrator
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private GetOrchestratorResult(
            string clusterEndpoint,

            string id,

            string? k8sConnectorId,

            string name)
        {
            ClusterEndpoint = clusterEndpoint;
            Id = id;
            K8sConnectorId = k8sConnectorId;
            Name = name;
        }
    }
}
