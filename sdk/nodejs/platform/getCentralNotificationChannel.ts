// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Data source for retrieving a central notification channel in Harness.
 */
export function getCentralNotificationChannel(args: GetCentralNotificationChannelArgs, opts?: pulumi.InvokeOptions): Promise<GetCentralNotificationChannelResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:platform/getCentralNotificationChannel:getCentralNotificationChannel", {
        "account": args.account,
        "channels": args.channels,
        "created": args.created,
        "identifier": args.identifier,
        "lastModified": args.lastModified,
        "name": args.name,
        "notificationChannelType": args.notificationChannelType,
        "org": args.org,
        "project": args.project,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getCentralNotificationChannel.
 */
export interface GetCentralNotificationChannelArgs {
    /**
     * Account identifier associated with this notification channel.
     */
    account?: string;
    /**
     * Configuration details of the notification channel.
     */
    channels?: inputs.platform.GetCentralNotificationChannelChannel[];
    /**
     * Timestamp when the notification channel was created.
     */
    created?: number;
    /**
     * Unique identifier of the notification channel.
     */
    identifier: string;
    /**
     * Timestamp when the notification channel was last modified.
     */
    lastModified?: number;
    /**
     * Name of the notification channel.
     */
    name?: string;
    /**
     * Type of notification channel. One of: EMAIL, SLACK, PAGERDUTY, MSTeams, WEBHOOK, DATADOG.
     */
    notificationChannelType?: string;
    /**
     * Identifier of the organization the notification channel is scoped to.
     */
    org?: string;
    /**
     * Identifier of the project the notification channel is scoped to.
     */
    project?: string;
    /**
     * Status of the notification channel. Possible values are ENABLED or DISABLED.
     */
    status?: string;
}

/**
 * A collection of values returned by getCentralNotificationChannel.
 */
export interface GetCentralNotificationChannelResult {
    /**
     * Account identifier associated with this notification channel.
     */
    readonly account?: string;
    /**
     * Configuration details of the notification channel.
     */
    readonly channels?: outputs.platform.GetCentralNotificationChannelChannel[];
    /**
     * Timestamp when the notification channel was created.
     */
    readonly created?: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Unique identifier of the notification channel.
     */
    readonly identifier: string;
    /**
     * Timestamp when the notification channel was last modified.
     */
    readonly lastModified?: number;
    /**
     * Name of the notification channel.
     */
    readonly name?: string;
    /**
     * Type of notification channel. One of: EMAIL, SLACK, PAGERDUTY, MSTeams, WEBHOOK, DATADOG.
     */
    readonly notificationChannelType?: string;
    /**
     * Identifier of the organization the notification channel is scoped to.
     */
    readonly org?: string;
    /**
     * Identifier of the project the notification channel is scoped to.
     */
    readonly project?: string;
    /**
     * Status of the notification channel. Possible values are ENABLED or DISABLED.
     */
    readonly status?: string;
}
/**
 * Data source for retrieving a central notification channel in Harness.
 */
export function getCentralNotificationChannelOutput(args: GetCentralNotificationChannelOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetCentralNotificationChannelResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:platform/getCentralNotificationChannel:getCentralNotificationChannel", {
        "account": args.account,
        "channels": args.channels,
        "created": args.created,
        "identifier": args.identifier,
        "lastModified": args.lastModified,
        "name": args.name,
        "notificationChannelType": args.notificationChannelType,
        "org": args.org,
        "project": args.project,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getCentralNotificationChannel.
 */
export interface GetCentralNotificationChannelOutputArgs {
    /**
     * Account identifier associated with this notification channel.
     */
    account?: pulumi.Input<string>;
    /**
     * Configuration details of the notification channel.
     */
    channels?: pulumi.Input<pulumi.Input<inputs.platform.GetCentralNotificationChannelChannelArgs>[]>;
    /**
     * Timestamp when the notification channel was created.
     */
    created?: pulumi.Input<number>;
    /**
     * Unique identifier of the notification channel.
     */
    identifier: pulumi.Input<string>;
    /**
     * Timestamp when the notification channel was last modified.
     */
    lastModified?: pulumi.Input<number>;
    /**
     * Name of the notification channel.
     */
    name?: pulumi.Input<string>;
    /**
     * Type of notification channel. One of: EMAIL, SLACK, PAGERDUTY, MSTeams, WEBHOOK, DATADOG.
     */
    notificationChannelType?: pulumi.Input<string>;
    /**
     * Identifier of the organization the notification channel is scoped to.
     */
    org?: pulumi.Input<string>;
    /**
     * Identifier of the project the notification channel is scoped to.
     */
    project?: pulumi.Input<string>;
    /**
     * Status of the notification channel. Possible values are ENABLED or DISABLED.
     */
    status?: pulumi.Input<string>;
}
