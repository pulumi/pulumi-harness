// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for creating a Harness Policy.
 *
 * ## Import
 *
 * Import account level policy
 *
 * ```sh
 * $ pulumi import harness:platform/policy:Policy example <policy_id>
 * ```
 *
 * Import org level policy
 *
 * ```sh
 * $ pulumi import harness:platform/policy:Policy example <org_id>/<policy_id>
 * ```
 *
 * Import proj level policy
 *
 * ```sh
 * $ pulumi import harness:platform/policy:Policy example <org_id>/<project_id>/<policy_id>
 * ```
 */
export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * Description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Base branch for the new git branch.
     */
    public readonly gitBaseBranch!: pulumi.Output<string | undefined>;
    /**
     * Git branch for the policy.
     */
    public readonly gitBranch!: pulumi.Output<string | undefined>;
    /**
     * Git commit message for the policy.
     */
    public readonly gitCommitMsg!: pulumi.Output<string | undefined>;
    /**
     * The existing commit sha of the file being updated
     */
    public readonly gitCommitSha!: pulumi.Output<string>;
    /**
     * Git connector reference for the policy.
     */
    public readonly gitConnectorRef!: pulumi.Output<string | undefined>;
    /**
     * The existing file id of the file being updated, not required for bitbucket files
     */
    public readonly gitFileId!: pulumi.Output<string>;
    /**
     * Flag to import the policy from git.
     */
    public readonly gitImport!: pulumi.Output<boolean | undefined>;
    /**
     * Flag to create a new branch for the policy.
     */
    public readonly gitIsNewBranch!: pulumi.Output<boolean | undefined>;
    /**
     * Git path for the policy.
     */
    public readonly gitPath!: pulumi.Output<string | undefined>;
    /**
     * Git repository for the policy.
     */
    public readonly gitRepo!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the resource.
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * Name of the resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Unique identifier of the organization.
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the project.
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * Rego code for the policy.
     */
    public readonly rego!: pulumi.Output<string>;
    /**
     * Tags to associate with the resource.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["gitBaseBranch"] = state ? state.gitBaseBranch : undefined;
            resourceInputs["gitBranch"] = state ? state.gitBranch : undefined;
            resourceInputs["gitCommitMsg"] = state ? state.gitCommitMsg : undefined;
            resourceInputs["gitCommitSha"] = state ? state.gitCommitSha : undefined;
            resourceInputs["gitConnectorRef"] = state ? state.gitConnectorRef : undefined;
            resourceInputs["gitFileId"] = state ? state.gitFileId : undefined;
            resourceInputs["gitImport"] = state ? state.gitImport : undefined;
            resourceInputs["gitIsNewBranch"] = state ? state.gitIsNewBranch : undefined;
            resourceInputs["gitPath"] = state ? state.gitPath : undefined;
            resourceInputs["gitRepo"] = state ? state.gitRepo : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["rego"] = state ? state.rego : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.rego === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rego'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gitBaseBranch"] = args ? args.gitBaseBranch : undefined;
            resourceInputs["gitBranch"] = args ? args.gitBranch : undefined;
            resourceInputs["gitCommitMsg"] = args ? args.gitCommitMsg : undefined;
            resourceInputs["gitCommitSha"] = args ? args.gitCommitSha : undefined;
            resourceInputs["gitConnectorRef"] = args ? args.gitConnectorRef : undefined;
            resourceInputs["gitFileId"] = args ? args.gitFileId : undefined;
            resourceInputs["gitImport"] = args ? args.gitImport : undefined;
            resourceInputs["gitIsNewBranch"] = args ? args.gitIsNewBranch : undefined;
            resourceInputs["gitPath"] = args ? args.gitPath : undefined;
            resourceInputs["gitRepo"] = args ? args.gitRepo : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["rego"] = args ? args.rego : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Base branch for the new git branch.
     */
    gitBaseBranch?: pulumi.Input<string>;
    /**
     * Git branch for the policy.
     */
    gitBranch?: pulumi.Input<string>;
    /**
     * Git commit message for the policy.
     */
    gitCommitMsg?: pulumi.Input<string>;
    /**
     * The existing commit sha of the file being updated
     */
    gitCommitSha?: pulumi.Input<string>;
    /**
     * Git connector reference for the policy.
     */
    gitConnectorRef?: pulumi.Input<string>;
    /**
     * The existing file id of the file being updated, not required for bitbucket files
     */
    gitFileId?: pulumi.Input<string>;
    /**
     * Flag to import the policy from git.
     */
    gitImport?: pulumi.Input<boolean>;
    /**
     * Flag to create a new branch for the policy.
     */
    gitIsNewBranch?: pulumi.Input<boolean>;
    /**
     * Git path for the policy.
     */
    gitPath?: pulumi.Input<string>;
    /**
     * Git repository for the policy.
     */
    gitRepo?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Rego code for the policy.
     */
    rego?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Base branch for the new git branch.
     */
    gitBaseBranch?: pulumi.Input<string>;
    /**
     * Git branch for the policy.
     */
    gitBranch?: pulumi.Input<string>;
    /**
     * Git commit message for the policy.
     */
    gitCommitMsg?: pulumi.Input<string>;
    /**
     * The existing commit sha of the file being updated
     */
    gitCommitSha?: pulumi.Input<string>;
    /**
     * Git connector reference for the policy.
     */
    gitConnectorRef?: pulumi.Input<string>;
    /**
     * The existing file id of the file being updated, not required for bitbucket files
     */
    gitFileId?: pulumi.Input<string>;
    /**
     * Flag to import the policy from git.
     */
    gitImport?: pulumi.Input<boolean>;
    /**
     * Flag to create a new branch for the policy.
     */
    gitIsNewBranch?: pulumi.Input<boolean>;
    /**
     * Git path for the policy.
     */
    gitPath?: pulumi.Input<string>;
    /**
     * Git repository for the policy.
     */
    gitRepo?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Rego code for the policy.
     */
    rego: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
