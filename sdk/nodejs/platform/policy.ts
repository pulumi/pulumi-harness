// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for creating a Harness Policy.
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import using the organization id
 *
 * ```sh
 * $ pulumi import harness:platform/policy:Policy example <organization_id>
 * ```
 */
export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * Description of the resource.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Base branch for the new git branch.
     */
    declare public readonly gitBaseBranch: pulumi.Output<string | undefined>;
    /**
     * Git branch for the policy.
     */
    declare public readonly gitBranch: pulumi.Output<string | undefined>;
    /**
     * Git commit message for the policy.
     */
    declare public readonly gitCommitMsg: pulumi.Output<string | undefined>;
    /**
     * The existing commit sha of the file being updated
     */
    declare public readonly gitCommitSha: pulumi.Output<string>;
    /**
     * Git connector reference for the policy.
     */
    declare public readonly gitConnectorRef: pulumi.Output<string | undefined>;
    /**
     * The existing file id of the file being updated, not required for bitbucket files
     */
    declare public readonly gitFileId: pulumi.Output<string>;
    /**
     * Flag to import the policy from git.
     */
    declare public readonly gitImport: pulumi.Output<boolean | undefined>;
    /**
     * Flag to create a new branch for the policy.
     */
    declare public readonly gitIsNewBranch: pulumi.Output<boolean | undefined>;
    /**
     * Git path for the policy.
     */
    declare public readonly gitPath: pulumi.Output<string | undefined>;
    /**
     * Git repository for the policy.
     */
    declare public readonly gitRepo: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the resource.
     */
    declare public readonly identifier: pulumi.Output<string>;
    /**
     * Name of the resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Unique identifier of the organization.
     */
    declare public readonly orgId: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the project.
     */
    declare public readonly projectId: pulumi.Output<string | undefined>;
    /**
     * Rego code for the policy.
     */
    declare public readonly rego: pulumi.Output<string>;
    /**
     * Tags to associate with the resource.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["gitBaseBranch"] = state?.gitBaseBranch;
            resourceInputs["gitBranch"] = state?.gitBranch;
            resourceInputs["gitCommitMsg"] = state?.gitCommitMsg;
            resourceInputs["gitCommitSha"] = state?.gitCommitSha;
            resourceInputs["gitConnectorRef"] = state?.gitConnectorRef;
            resourceInputs["gitFileId"] = state?.gitFileId;
            resourceInputs["gitImport"] = state?.gitImport;
            resourceInputs["gitIsNewBranch"] = state?.gitIsNewBranch;
            resourceInputs["gitPath"] = state?.gitPath;
            resourceInputs["gitRepo"] = state?.gitRepo;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["rego"] = state?.rego;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            if (args?.identifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if (args?.rego === undefined && !opts.urn) {
                throw new Error("Missing required property 'rego'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["gitBaseBranch"] = args?.gitBaseBranch;
            resourceInputs["gitBranch"] = args?.gitBranch;
            resourceInputs["gitCommitMsg"] = args?.gitCommitMsg;
            resourceInputs["gitCommitSha"] = args?.gitCommitSha;
            resourceInputs["gitConnectorRef"] = args?.gitConnectorRef;
            resourceInputs["gitFileId"] = args?.gitFileId;
            resourceInputs["gitImport"] = args?.gitImport;
            resourceInputs["gitIsNewBranch"] = args?.gitIsNewBranch;
            resourceInputs["gitPath"] = args?.gitPath;
            resourceInputs["gitRepo"] = args?.gitRepo;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["rego"] = args?.rego;
            resourceInputs["tags"] = args?.tags;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Base branch for the new git branch.
     */
    gitBaseBranch?: pulumi.Input<string>;
    /**
     * Git branch for the policy.
     */
    gitBranch?: pulumi.Input<string>;
    /**
     * Git commit message for the policy.
     */
    gitCommitMsg?: pulumi.Input<string>;
    /**
     * The existing commit sha of the file being updated
     */
    gitCommitSha?: pulumi.Input<string>;
    /**
     * Git connector reference for the policy.
     */
    gitConnectorRef?: pulumi.Input<string>;
    /**
     * The existing file id of the file being updated, not required for bitbucket files
     */
    gitFileId?: pulumi.Input<string>;
    /**
     * Flag to import the policy from git.
     */
    gitImport?: pulumi.Input<boolean>;
    /**
     * Flag to create a new branch for the policy.
     */
    gitIsNewBranch?: pulumi.Input<boolean>;
    /**
     * Git path for the policy.
     */
    gitPath?: pulumi.Input<string>;
    /**
     * Git repository for the policy.
     */
    gitRepo?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Rego code for the policy.
     */
    rego?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Base branch for the new git branch.
     */
    gitBaseBranch?: pulumi.Input<string>;
    /**
     * Git branch for the policy.
     */
    gitBranch?: pulumi.Input<string>;
    /**
     * Git commit message for the policy.
     */
    gitCommitMsg?: pulumi.Input<string>;
    /**
     * The existing commit sha of the file being updated
     */
    gitCommitSha?: pulumi.Input<string>;
    /**
     * Git connector reference for the policy.
     */
    gitConnectorRef?: pulumi.Input<string>;
    /**
     * The existing file id of the file being updated, not required for bitbucket files
     */
    gitFileId?: pulumi.Input<string>;
    /**
     * Flag to import the policy from git.
     */
    gitImport?: pulumi.Input<boolean>;
    /**
     * Flag to create a new branch for the policy.
     */
    gitIsNewBranch?: pulumi.Input<boolean>;
    /**
     * Git path for the policy.
     */
    gitPath?: pulumi.Input<string>;
    /**
     * Git repository for the policy.
     */
    gitRepo?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Rego code for the policy.
     */
    rego: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
