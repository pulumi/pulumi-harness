// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating a Template. Description field is deprecated
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import account level template
 *
 * ```sh
 * $ pulumi import harness:platform/template:Template example <template_id>
 * ```
 *
 * Import org level template
 *
 * ```sh
 * $ pulumi import harness:platform/template:Template example <ord_id>/<template_id>
 * ```
 *
 * Import project level template
 *
 * ```sh
 * $ pulumi import harness:platform/template:Template example <org_id>/<project_id>/<template_id>
 * ```
 */
export class Template extends pulumi.CustomResource {
    /**
     * Get an existing Template resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TemplateState, opts?: pulumi.CustomResourceOptions): Template {
        return new Template(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/template:Template';

    /**
     * Returns true if the given object is an instance of Template.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Template {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Template.__pulumiType;
    }

    /**
     * Specify comment with respect to changes.
     */
    declare public readonly comments: pulumi.Output<string | undefined>;
    /**
     * Description of the entity. Description field is deprecated
     *
     * @deprecated description field is deprecated
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other entities reference it
     */
    declare public readonly forceDelete: pulumi.Output<boolean>;
    /**
     * Contains parameters related to creating an Entity for Git Experience.
     */
    declare public readonly gitDetails: pulumi.Output<outputs.platform.TemplateGitDetails>;
    /**
     * Contains Git Information for importing entities from Git
     */
    declare public readonly gitImportDetails: pulumi.Output<outputs.platform.TemplateGitImportDetails | undefined>;
    /**
     * Unique identifier of the resource. Cannot be changed once the resource is created. Must match the identifier in the template_yaml.
     */
    declare public readonly identifier: pulumi.Output<string>;
    /**
     * Flag to set if importing from Git
     */
    declare public readonly importFromGit: pulumi.Output<boolean | undefined>;
    /**
     * True if given version for template to be set as stable.
     */
    declare public readonly isStable: pulumi.Output<boolean>;
    /**
     * Name of the Variable
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Organization Identifier for the Entity
     */
    declare public readonly orgId: pulumi.Output<string | undefined>;
    /**
     * Project Identifier for the Entity
     */
    declare public readonly projectId: pulumi.Output<string | undefined>;
    /**
     * Tags to associate with the resource.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * Contains parameters for importing template.
     */
    declare public readonly templateImportRequest: pulumi.Output<outputs.platform.TemplateTemplateImportRequest | undefined>;
    /**
     * Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
     */
    declare public readonly templateYaml: pulumi.Output<string>;
    /**
     * Version Label for Template.
     */
    declare public readonly version: pulumi.Output<string>;

    /**
     * Create a Template resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TemplateArgs | TemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TemplateState | undefined;
            resourceInputs["comments"] = state?.comments;
            resourceInputs["description"] = state?.description;
            resourceInputs["forceDelete"] = state?.forceDelete;
            resourceInputs["gitDetails"] = state?.gitDetails;
            resourceInputs["gitImportDetails"] = state?.gitImportDetails;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["importFromGit"] = state?.importFromGit;
            resourceInputs["isStable"] = state?.isStable;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["templateImportRequest"] = state?.templateImportRequest;
            resourceInputs["templateYaml"] = state?.templateYaml;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as TemplateArgs | undefined;
            if (args?.identifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if (args?.version === undefined && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["comments"] = args?.comments;
            resourceInputs["description"] = args?.description;
            resourceInputs["forceDelete"] = args?.forceDelete;
            resourceInputs["gitDetails"] = args?.gitDetails;
            resourceInputs["gitImportDetails"] = args?.gitImportDetails;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["importFromGit"] = args?.importFromGit;
            resourceInputs["isStable"] = args?.isStable;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["templateImportRequest"] = args?.templateImportRequest;
            resourceInputs["templateYaml"] = args?.templateYaml;
            resourceInputs["version"] = args?.version;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Template.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Template resources.
 */
export interface TemplateState {
    /**
     * Specify comment with respect to changes.
     */
    comments?: pulumi.Input<string>;
    /**
     * Description of the entity. Description field is deprecated
     *
     * @deprecated description field is deprecated
     */
    description?: pulumi.Input<string>;
    /**
     * Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other entities reference it
     */
    forceDelete?: pulumi.Input<boolean>;
    /**
     * Contains parameters related to creating an Entity for Git Experience.
     */
    gitDetails?: pulumi.Input<inputs.platform.TemplateGitDetails>;
    /**
     * Contains Git Information for importing entities from Git
     */
    gitImportDetails?: pulumi.Input<inputs.platform.TemplateGitImportDetails>;
    /**
     * Unique identifier of the resource. Cannot be changed once the resource is created. Must match the identifier in the template_yaml.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Flag to set if importing from Git
     */
    importFromGit?: pulumi.Input<boolean>;
    /**
     * True if given version for template to be set as stable.
     */
    isStable?: pulumi.Input<boolean>;
    /**
     * Name of the Variable
     */
    name?: pulumi.Input<string>;
    /**
     * Organization Identifier for the Entity
     */
    orgId?: pulumi.Input<string>;
    /**
     * Project Identifier for the Entity
     */
    projectId?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Contains parameters for importing template.
     */
    templateImportRequest?: pulumi.Input<inputs.platform.TemplateTemplateImportRequest>;
    /**
     * Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
     */
    templateYaml?: pulumi.Input<string>;
    /**
     * Version Label for Template.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Template resource.
 */
export interface TemplateArgs {
    /**
     * Specify comment with respect to changes.
     */
    comments?: pulumi.Input<string>;
    /**
     * Description of the entity. Description field is deprecated
     *
     * @deprecated description field is deprecated
     */
    description?: pulumi.Input<string>;
    /**
     * Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other entities reference it
     */
    forceDelete?: pulumi.Input<boolean>;
    /**
     * Contains parameters related to creating an Entity for Git Experience.
     */
    gitDetails?: pulumi.Input<inputs.platform.TemplateGitDetails>;
    /**
     * Contains Git Information for importing entities from Git
     */
    gitImportDetails?: pulumi.Input<inputs.platform.TemplateGitImportDetails>;
    /**
     * Unique identifier of the resource. Cannot be changed once the resource is created. Must match the identifier in the template_yaml.
     */
    identifier: pulumi.Input<string>;
    /**
     * Flag to set if importing from Git
     */
    importFromGit?: pulumi.Input<boolean>;
    /**
     * True if given version for template to be set as stable.
     */
    isStable?: pulumi.Input<boolean>;
    /**
     * Name of the Variable
     */
    name?: pulumi.Input<string>;
    /**
     * Organization Identifier for the Entity
     */
    orgId?: pulumi.Input<string>;
    /**
     * Project Identifier for the Entity
     */
    projectId?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Contains parameters for importing template.
     */
    templateImportRequest?: pulumi.Input<inputs.platform.TemplateTemplateImportRequest>;
    /**
     * Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
     */
    templateYaml?: pulumi.Input<string>;
    /**
     * Version Label for Template.
     */
    version: pulumi.Input<string>;
}
