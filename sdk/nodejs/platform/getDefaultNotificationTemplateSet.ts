// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Data source for retrieving a Default Notification Template Set.
 */
export function getDefaultNotificationTemplateSet(args: GetDefaultNotificationTemplateSetArgs, opts?: pulumi.InvokeOptions): Promise<GetDefaultNotificationTemplateSetResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:platform/getDefaultNotificationTemplateSet:getDefaultNotificationTemplateSet", {
        "description": args.description,
        "eventTemplateConfigurationSets": args.eventTemplateConfigurationSets,
        "identifier": args.identifier,
        "name": args.name,
        "notificationChannelType": args.notificationChannelType,
        "notificationEntity": args.notificationEntity,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getDefaultNotificationTemplateSet.
 */
export interface GetDefaultNotificationTemplateSetArgs {
    /**
     * Description for Default Notification Template Set
     */
    description?: string;
    /**
     * Set of event-template configurations
     */
    eventTemplateConfigurationSets: inputs.platform.GetDefaultNotificationTemplateSetEventTemplateConfigurationSet[];
    /**
     * Identifier of Default Notification Template Set
     */
    identifier: string;
    /**
     * Name of Default Notification Template Set
     */
    name: string;
    /**
     * Type of channel (e.g. SLACK, EMAIL, etc.)
     */
    notificationChannelType: string;
    /**
     * Type of the entity (e.g. PIPELINE, SERVICE, etc.)
     */
    notificationEntity: string;
    /**
     * Key-value tags
     */
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getDefaultNotificationTemplateSet.
 */
export interface GetDefaultNotificationTemplateSetResult {
    /**
     * Timestamp when the notification rule was created.
     */
    readonly created: number;
    /**
     * Description for Default Notification Template Set
     */
    readonly description?: string;
    /**
     * Set of event-template configurations
     */
    readonly eventTemplateConfigurationSets: outputs.platform.GetDefaultNotificationTemplateSetEventTemplateConfigurationSet[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Identifier of Default Notification Template Set
     */
    readonly identifier: string;
    /**
     * Timestamp when the notification rule was last modified.
     */
    readonly lastModified: number;
    /**
     * Name of Default Notification Template Set
     */
    readonly name: string;
    /**
     * Type of channel (e.g. SLACK, EMAIL, etc.)
     */
    readonly notificationChannelType: string;
    /**
     * Type of the entity (e.g. PIPELINE, SERVICE, etc.)
     */
    readonly notificationEntity: string;
    /**
     * Key-value tags
     */
    readonly tags?: {[key: string]: string};
}
/**
 * Data source for retrieving a Default Notification Template Set.
 */
export function getDefaultNotificationTemplateSetOutput(args: GetDefaultNotificationTemplateSetOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDefaultNotificationTemplateSetResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:platform/getDefaultNotificationTemplateSet:getDefaultNotificationTemplateSet", {
        "description": args.description,
        "eventTemplateConfigurationSets": args.eventTemplateConfigurationSets,
        "identifier": args.identifier,
        "name": args.name,
        "notificationChannelType": args.notificationChannelType,
        "notificationEntity": args.notificationEntity,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getDefaultNotificationTemplateSet.
 */
export interface GetDefaultNotificationTemplateSetOutputArgs {
    /**
     * Description for Default Notification Template Set
     */
    description?: pulumi.Input<string>;
    /**
     * Set of event-template configurations
     */
    eventTemplateConfigurationSets: pulumi.Input<pulumi.Input<inputs.platform.GetDefaultNotificationTemplateSetEventTemplateConfigurationSetArgs>[]>;
    /**
     * Identifier of Default Notification Template Set
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of Default Notification Template Set
     */
    name: pulumi.Input<string>;
    /**
     * Type of channel (e.g. SLACK, EMAIL, etc.)
     */
    notificationChannelType: pulumi.Input<string>;
    /**
     * Type of the entity (e.g. PIPELINE, SERVICE, etc.)
     */
    notificationEntity: pulumi.Input<string>;
    /**
     * Key-value tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
