// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for a Harness Custom Dashboard.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const dashboard = new harness.platform.Dashboards("dashboard", {
 *     dashboardId: "111",
 *     description: "dashboard_tag",
 *     resourceIdentifier: "999",
 *     title: "Dashboard Title",
 * });
 * ```
 */
export class Dashboards extends pulumi.CustomResource {
    /**
     * Get an existing Dashboards resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardsState, opts?: pulumi.CustomResourceOptions): Dashboards {
        return new Dashboards(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/dashboards:Dashboards';

    /**
     * Returns true if the given object is an instance of Dashboards.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dashboards {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dashboards.__pulumiType;
    }

    /**
     * Created at timestamp of the Dashboard.
     */
    declare public readonly createdAt: pulumi.Output<string>;
    /**
     * Unique identifier of the Template Dashboard to create from.
     */
    declare public readonly dashboardId: pulumi.Output<string>;
    /**
     * Data Sources within the Dashboard.
     */
    declare public readonly dataSources: pulumi.Output<string[]>;
    /**
     * Description of the Dashboard.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Favorite count of the dashboard.
     */
    declare public /*out*/ readonly favoriteCount: pulumi.Output<number>;
    /**
     * The Folder ID that the Dashboard belongs to.
     */
    declare public readonly folderId: pulumi.Output<string | undefined>;
    /**
     * Last accessed at timestamp of the Dashboard.
     */
    declare public /*out*/ readonly lastAccessedAt: pulumi.Output<string>;
    /**
     * Data Models within the Dashboard.
     */
    declare public readonly models: pulumi.Output<string[]>;
    /**
     * Name of the Dashboard.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The Folder ID that the Dashboard belongs to.
     */
    declare public readonly resourceIdentifier: pulumi.Output<string>;
    /**
     * Title of the Dashboard.
     */
    declare public readonly title: pulumi.Output<string | undefined>;
    /**
     * Type of the dashboard.
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * View count of the dashboard.
     */
    declare public readonly viewCount: pulumi.Output<number>;

    /**
     * Create a Dashboards resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DashboardsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardsArgs | DashboardsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DashboardsState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["dashboardId"] = state?.dashboardId;
            resourceInputs["dataSources"] = state?.dataSources;
            resourceInputs["description"] = state?.description;
            resourceInputs["favoriteCount"] = state?.favoriteCount;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["lastAccessedAt"] = state?.lastAccessedAt;
            resourceInputs["models"] = state?.models;
            resourceInputs["name"] = state?.name;
            resourceInputs["resourceIdentifier"] = state?.resourceIdentifier;
            resourceInputs["title"] = state?.title;
            resourceInputs["type"] = state?.type;
            resourceInputs["viewCount"] = state?.viewCount;
        } else {
            const args = argsOrState as DashboardsArgs | undefined;
            if (args?.dashboardId === undefined && !opts.urn) {
                throw new Error("Missing required property 'dashboardId'");
            }
            if (args?.resourceIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceIdentifier'");
            }
            resourceInputs["createdAt"] = args?.createdAt;
            resourceInputs["dashboardId"] = args?.dashboardId;
            resourceInputs["dataSources"] = args?.dataSources;
            resourceInputs["description"] = args?.description;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["models"] = args?.models;
            resourceInputs["name"] = args?.name;
            resourceInputs["resourceIdentifier"] = args?.resourceIdentifier;
            resourceInputs["title"] = args?.title;
            resourceInputs["type"] = args?.type;
            resourceInputs["viewCount"] = args?.viewCount;
            resourceInputs["favoriteCount"] = undefined /*out*/;
            resourceInputs["lastAccessedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dashboards.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Dashboards resources.
 */
export interface DashboardsState {
    /**
     * Created at timestamp of the Dashboard.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Unique identifier of the Template Dashboard to create from.
     */
    dashboardId?: pulumi.Input<string>;
    /**
     * Data Sources within the Dashboard.
     */
    dataSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the Dashboard.
     */
    description?: pulumi.Input<string>;
    /**
     * Favorite count of the dashboard.
     */
    favoriteCount?: pulumi.Input<number>;
    /**
     * The Folder ID that the Dashboard belongs to.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Last accessed at timestamp of the Dashboard.
     */
    lastAccessedAt?: pulumi.Input<string>;
    /**
     * Data Models within the Dashboard.
     */
    models?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the Dashboard.
     */
    name?: pulumi.Input<string>;
    /**
     * The Folder ID that the Dashboard belongs to.
     */
    resourceIdentifier?: pulumi.Input<string>;
    /**
     * Title of the Dashboard.
     */
    title?: pulumi.Input<string>;
    /**
     * Type of the dashboard.
     */
    type?: pulumi.Input<string>;
    /**
     * View count of the dashboard.
     */
    viewCount?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Dashboards resource.
 */
export interface DashboardsArgs {
    /**
     * Created at timestamp of the Dashboard.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Unique identifier of the Template Dashboard to create from.
     */
    dashboardId: pulumi.Input<string>;
    /**
     * Data Sources within the Dashboard.
     */
    dataSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the Dashboard.
     */
    description?: pulumi.Input<string>;
    /**
     * The Folder ID that the Dashboard belongs to.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Data Models within the Dashboard.
     */
    models?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the Dashboard.
     */
    name?: pulumi.Input<string>;
    /**
     * The Folder ID that the Dashboard belongs to.
     */
    resourceIdentifier: pulumi.Input<string>;
    /**
     * Title of the Dashboard.
     */
    title?: pulumi.Input<string>;
    /**
     * Type of the dashboard.
     */
    type?: pulumi.Input<string>;
    /**
     * View count of the dashboard.
     */
    viewCount?: pulumi.Input<number>;
}
