// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for creating an environment SDK key for Feature Flags.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const testserverapikey = new harness.platform.FeatureFlagApiKey("testserverapikey", {
 *     identifier: "testserver",
 *     name: "TestServer",
 *     description: "this is a server SDK key",
 *     orgId: "test",
 *     projectId: "testff",
 *     envId: "testenv",
 *     expiredAt: 1713729225,
 *     type: "Server",
 * });
 * export const serversdkkey = testserverapikey.apiKey;
 * ```
 */
export class FeatureFlagApiKey extends pulumi.CustomResource {
    /**
     * Get an existing FeatureFlagApiKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FeatureFlagApiKeyState, opts?: pulumi.CustomResourceOptions): FeatureFlagApiKey {
        return new FeatureFlagApiKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/featureFlagApiKey:FeatureFlagApiKey';

    /**
     * Returns true if the given object is an instance of FeatureFlagApiKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FeatureFlagApiKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FeatureFlagApiKey.__pulumiType;
    }

    /**
     * The value of the SDK API Key
     */
    public /*out*/ readonly apiKey!: pulumi.Output<string>;
    /**
     * Description of the SDK API Key
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Environment Identifier
     */
    public readonly envId!: pulumi.Output<string>;
    /**
     * Expiration datetime of the SDK API Key
     */
    public readonly expiredAt!: pulumi.Output<number | undefined>;
    /**
     * Identifier of the SDK API Key
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * Name of the SDK API Key
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Organization Identifier
     */
    public readonly orgId!: pulumi.Output<string>;
    /**
     * Project Identifier
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Type of SDK. Valid values are `Server` or `Client`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a FeatureFlagApiKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FeatureFlagApiKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FeatureFlagApiKeyArgs | FeatureFlagApiKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FeatureFlagApiKeyState | undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["envId"] = state ? state.envId : undefined;
            resourceInputs["expiredAt"] = state ? state.expiredAt : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as FeatureFlagApiKeyArgs | undefined;
            if ((!args || args.envId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'envId'");
            }
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["envId"] = args ? args.envId : undefined;
            resourceInputs["expiredAt"] = args ? args.expiredAt : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["apiKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(FeatureFlagApiKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FeatureFlagApiKey resources.
 */
export interface FeatureFlagApiKeyState {
    /**
     * The value of the SDK API Key
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Description of the SDK API Key
     */
    description?: pulumi.Input<string>;
    /**
     * Environment Identifier
     */
    envId?: pulumi.Input<string>;
    /**
     * Expiration datetime of the SDK API Key
     */
    expiredAt?: pulumi.Input<number>;
    /**
     * Identifier of the SDK API Key
     */
    identifier?: pulumi.Input<string>;
    /**
     * Name of the SDK API Key
     */
    name?: pulumi.Input<string>;
    /**
     * Organization Identifier
     */
    orgId?: pulumi.Input<string>;
    /**
     * Project Identifier
     */
    projectId?: pulumi.Input<string>;
    /**
     * Type of SDK. Valid values are `Server` or `Client`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FeatureFlagApiKey resource.
 */
export interface FeatureFlagApiKeyArgs {
    /**
     * Description of the SDK API Key
     */
    description?: pulumi.Input<string>;
    /**
     * Environment Identifier
     */
    envId: pulumi.Input<string>;
    /**
     * Expiration datetime of the SDK API Key
     */
    expiredAt?: pulumi.Input<number>;
    /**
     * Identifier of the SDK API Key
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of the SDK API Key
     */
    name?: pulumi.Input<string>;
    /**
     * Organization Identifier
     */
    orgId: pulumi.Input<string>;
    /**
     * Project Identifier
     */
    projectId: pulumi.Input<string>;
    /**
     * Type of SDK. Valid values are `Server` or `Client`.
     */
    type: pulumi.Input<string>;
}
