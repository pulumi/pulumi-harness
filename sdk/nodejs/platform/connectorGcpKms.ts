// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating a GCP KMS connector.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const test = new harness.platform.SecretText("test", {
 *     identifier: "%[1]s",
 *     name: "%[2]s",
 *     description: "test",
 *     tags: ["foo:bar"],
 *     secretManagerIdentifier: "harnessSecretManager",
 *     valueType: "Reference",
 *     value: "secret",
 * });
 * const gcpKmsManual = new harness.platform.ConnectorGcpKms("gcp_kms_manual", {
 *     identifier: "identifier",
 *     name: "name",
 *     description: "test",
 *     tags: ["foo:bar"],
 *     region: "us-west1",
 *     gcpProjectId: "1234567",
 *     keyRing: "key_ring",
 *     keyName: "key_name",
 *     manual: {
 *         credentials: pulumi.interpolate`account.${test.id}`,
 *         delegateSelectors: ["harness-delegate"],
 *     },
 * });
 * const gcpKmsOidcPlatform = new harness.platform.ConnectorGcpKms("gcp_kms_oidc_platform", {
 *     identifier: "identifier",
 *     name: "name",
 *     description: "test",
 *     tags: ["foo:bar"],
 *     region: "us-west1",
 *     gcpProjectId: "1234567",
 *     keyRing: "key_ring",
 *     keyName: "key_name",
 *     executeOnDelegate: false,
 *     oidcAuthentications: [{
 *         workloadPoolId: "harness-pool-test",
 *         providerId: "harness",
 *         gcpProjectId: "1234567",
 *         serviceAccountEmail: "harness.sample@iam.gserviceaccount.com",
 *     }],
 * });
 * const gcpKmsOidcDelegate = new harness.platform.ConnectorGcpKms("gcp_kms_oidc_delegate", {
 *     identifier: "identifier",
 *     name: "name",
 *     description: "test",
 *     tags: ["foo:bar"],
 *     region: "us-west1",
 *     gcpProjectId: "1234567",
 *     keyRing: "key_ring",
 *     keyName: "key_name",
 *     oidcAuthentications: [{
 *         workloadPoolId: "harness-pool-test",
 *         providerId: "harness",
 *         gcpProjectId: "1234567",
 *         serviceAccountEmail: "harness.sample@iam.gserviceaccount.com",
 *         delegateSelectors: ["harness-delegate"],
 *     }],
 * });
 * const gcpKmsOidcDelegateDefault = new harness.platform.ConnectorGcpKms("gcp_kms_oidc_delegate_default", {
 *     identifier: "identifier",
 *     name: "name",
 *     description: "test",
 *     tags: ["foo:bar"],
 *     region: "us-west1",
 *     gcpProjectId: "1234567",
 *     keyRing: "key_ring",
 *     keyName: "key_name",
 *     "default": true,
 *     oidcAuthentications: [{
 *         workloadPoolId: "harness-pool-test",
 *         providerId: "harness",
 *         gcpProjectId: "1234567",
 *         serviceAccountEmail: "harness.sample@iam.gserviceaccount.com",
 *         delegateSelectors: ["harness-delegate"],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import account level gcp connector
 *
 * ```sh
 * $ pulumi import harness:platform/connectorGcpKms:ConnectorGcpKms example <connector_id>
 * ```
 *
 * Import org level gcp connector
 *
 * ```sh
 * $ pulumi import harness:platform/connectorGcpKms:ConnectorGcpKms example <ord_id>/<connector_id>
 * ```
 *
 * Import project level gcp connector
 *
 * ```sh
 * $ pulumi import harness:platform/connectorGcpKms:ConnectorGcpKms example <org_id>/<project_id>/<connector_id>
 * ```
 */
export class ConnectorGcpKms extends pulumi.CustomResource {
    /**
     * Get an existing ConnectorGcpKms resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorGcpKmsState, opts?: pulumi.CustomResourceOptions): ConnectorGcpKms {
        return new ConnectorGcpKms(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/connectorGcpKms:ConnectorGcpKms';

    /**
     * Returns true if the given object is an instance of ConnectorGcpKms.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectorGcpKms {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectorGcpKms.__pulumiType;
    }

    /**
     * Set this flag to set this secret manager as default secret manager.
     */
    declare public readonly default: pulumi.Output<boolean | undefined>;
    /**
     * Description of the resource.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Enable this flag to execute on Delegate.
     */
    declare public readonly executeOnDelegate: pulumi.Output<boolean | undefined>;
    /**
     * The project ID of the GCP KMS.
     */
    declare public readonly gcpProjectId: pulumi.Output<string>;
    /**
     * Unique identifier of the resource.
     */
    declare public readonly identifier: pulumi.Output<string>;
    /**
     * The key name of the GCP KMS.
     */
    declare public readonly keyName: pulumi.Output<string>;
    /**
     * The key ring of the GCP KMS.
     */
    declare public readonly keyRing: pulumi.Output<string>;
    /**
     * Manual credential configuration.
     */
    declare public readonly manual: pulumi.Output<outputs.platform.ConnectorGcpKmsManual | undefined>;
    /**
     * Name of the resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Authentication using harness oidc.
     */
    declare public readonly oidcAuthentications: pulumi.Output<outputs.platform.ConnectorGcpKmsOidcAuthentication[] | undefined>;
    /**
     * Unique identifier of the organization.
     */
    declare public readonly orgId: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the project.
     */
    declare public readonly projectId: pulumi.Output<string | undefined>;
    /**
     * The region of the GCP KMS.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Tags to associate with the resource.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;

    /**
     * Create a ConnectorGcpKms resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorGcpKmsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorGcpKmsArgs | ConnectorGcpKmsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorGcpKmsState | undefined;
            resourceInputs["default"] = state?.default;
            resourceInputs["description"] = state?.description;
            resourceInputs["executeOnDelegate"] = state?.executeOnDelegate;
            resourceInputs["gcpProjectId"] = state?.gcpProjectId;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["keyName"] = state?.keyName;
            resourceInputs["keyRing"] = state?.keyRing;
            resourceInputs["manual"] = state?.manual;
            resourceInputs["name"] = state?.name;
            resourceInputs["oidcAuthentications"] = state?.oidcAuthentications;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["region"] = state?.region;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as ConnectorGcpKmsArgs | undefined;
            if (args?.gcpProjectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'gcpProjectId'");
            }
            if (args?.identifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if (args?.keyName === undefined && !opts.urn) {
                throw new Error("Missing required property 'keyName'");
            }
            if (args?.keyRing === undefined && !opts.urn) {
                throw new Error("Missing required property 'keyRing'");
            }
            if (args?.region === undefined && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["default"] = args?.default;
            resourceInputs["description"] = args?.description;
            resourceInputs["executeOnDelegate"] = args?.executeOnDelegate;
            resourceInputs["gcpProjectId"] = args?.gcpProjectId;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["keyName"] = args?.keyName;
            resourceInputs["keyRing"] = args?.keyRing;
            resourceInputs["manual"] = args?.manual;
            resourceInputs["name"] = args?.name;
            resourceInputs["oidcAuthentications"] = args?.oidcAuthentications;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectorGcpKms.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConnectorGcpKms resources.
 */
export interface ConnectorGcpKmsState {
    /**
     * Set this flag to set this secret manager as default secret manager.
     */
    default?: pulumi.Input<boolean>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable this flag to execute on Delegate.
     */
    executeOnDelegate?: pulumi.Input<boolean>;
    /**
     * The project ID of the GCP KMS.
     */
    gcpProjectId?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * The key name of the GCP KMS.
     */
    keyName?: pulumi.Input<string>;
    /**
     * The key ring of the GCP KMS.
     */
    keyRing?: pulumi.Input<string>;
    /**
     * Manual credential configuration.
     */
    manual?: pulumi.Input<inputs.platform.ConnectorGcpKmsManual>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Authentication using harness oidc.
     */
    oidcAuthentications?: pulumi.Input<pulumi.Input<inputs.platform.ConnectorGcpKmsOidcAuthentication>[]>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region of the GCP KMS.
     */
    region?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ConnectorGcpKms resource.
 */
export interface ConnectorGcpKmsArgs {
    /**
     * Set this flag to set this secret manager as default secret manager.
     */
    default?: pulumi.Input<boolean>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable this flag to execute on Delegate.
     */
    executeOnDelegate?: pulumi.Input<boolean>;
    /**
     * The project ID of the GCP KMS.
     */
    gcpProjectId: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * The key name of the GCP KMS.
     */
    keyName: pulumi.Input<string>;
    /**
     * The key ring of the GCP KMS.
     */
    keyRing: pulumi.Input<string>;
    /**
     * Manual credential configuration.
     */
    manual?: pulumi.Input<inputs.platform.ConnectorGcpKmsManual>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Authentication using harness oidc.
     */
    oidcAuthentications?: pulumi.Input<pulumi.Input<inputs.platform.ConnectorGcpKmsOidcAuthentication>[]>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region of the GCP KMS.
     */
    region: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
