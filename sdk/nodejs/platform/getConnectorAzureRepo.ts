// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Datasource for looking up a Azure Repo connector.
 */
export function getConnectorAzureRepo(args: GetConnectorAzureRepoArgs, opts?: pulumi.InvokeOptions): Promise<GetConnectorAzureRepoResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:platform/getConnectorAzureRepo:getConnectorAzureRepo", {
        "identifier": args.identifier,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getConnectorAzureRepo.
 */
export interface GetConnectorAzureRepoArgs {
    /**
     * Unique identifier of the resource.
     */
    identifier: string;
    /**
     * Name of the resource.
     */
    name?: string;
    /**
     * Unique identifier of the organization.
     */
    orgId?: string;
    /**
     * Unique identifier of the project.
     */
    projectId?: string;
}

/**
 * A collection of values returned by getConnectorAzureRepo.
 */
export interface GetConnectorAzureRepoResult {
    /**
     * Configuration for using the azure repo api. API Access is Computed for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
     */
    readonly apiAuthentications: outputs.platform.GetConnectorAzureRepoApiAuthentication[];
    /**
     * Whether the connection we're making is to a azure repository or a azure account. Valid values are Project, Repo.
     */
    readonly connectionType: string;
    /**
     * Credentials to use for the connection.
     */
    readonly credentials: outputs.platform.GetConnectorAzureRepoCredential[];
    /**
     * Tags to filter delegates for connection.
     */
    readonly delegateSelectors: string[];
    /**
     * Description of the resource.
     */
    readonly description: string;
    /**
     * Execute on delegate or not.
     */
    readonly executeOnDelegate: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Unique identifier of the resource.
     */
    readonly identifier: string;
    /**
     * Name of the resource.
     */
    readonly name?: string;
    /**
     * Unique identifier of the organization.
     */
    readonly orgId?: string;
    /**
     * Unique identifier of the project.
     */
    readonly projectId?: string;
    /**
     * Tags to associate with the resource.
     */
    readonly tags: string[];
    /**
     * URL of the azure repo repository or account.
     */
    readonly url: string;
    /**
     * Repository to test the connection with. This is only used when `connectionType` is `Account`.
     */
    readonly validationRepo: string;
}
/**
 * Datasource for looking up a Azure Repo connector.
 */
export function getConnectorAzureRepoOutput(args: GetConnectorAzureRepoOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetConnectorAzureRepoResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:platform/getConnectorAzureRepo:getConnectorAzureRepo", {
        "identifier": args.identifier,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getConnectorAzureRepo.
 */
export interface GetConnectorAzureRepoOutputArgs {
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
}
