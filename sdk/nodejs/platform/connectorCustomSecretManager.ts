// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * Import account level custom secret manager connector
 *
 * ```sh
 * $ pulumi import harness:platform/connectorCustomSecretManager:ConnectorCustomSecretManager example <connector_id>
 * ```
 *
 * Import org level custom secret manager connector
 *
 * ```sh
 * $ pulumi import harness:platform/connectorCustomSecretManager:ConnectorCustomSecretManager example <ord_id>/<connector_id>
 * ```
 *
 * Import project level custom secret manager connector
 *
 * ```sh
 * $ pulumi import harness:platform/connectorCustomSecretManager:ConnectorCustomSecretManager example <org_id>/<project_id>/<connector_id>
 * ```
 */
export class ConnectorCustomSecretManager extends pulumi.CustomResource {
    /**
     * Get an existing ConnectorCustomSecretManager resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorCustomSecretManagerState, opts?: pulumi.CustomResourceOptions): ConnectorCustomSecretManager {
        return new ConnectorCustomSecretManager(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/connectorCustomSecretManager:ConnectorCustomSecretManager';

    /**
     * Returns true if the given object is an instance of ConnectorCustomSecretManager.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectorCustomSecretManager {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectorCustomSecretManager.__pulumiType;
    }

    /**
     * Tags to filter delegates for connection.
     */
    public readonly delegateSelectors!: pulumi.Output<string[] | undefined>;
    /**
     * : A brief description of what the resource does or is used for.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * : Unique identifier of the resource.
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * : Name of the resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * : Specifies whether the secrets manager runs on a Harness delegate.
     */
    public readonly onDelegate!: pulumi.Output<boolean | undefined>;
    /**
     * Unique identifier of the organization.
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the project.
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * : Reference to the Harness secret containing SSH credentials for the target host. Required if `onDelegate` is set to false.
     */
    public readonly sshSecretRef!: pulumi.Output<string | undefined>;
    /**
     * : Tags to associate with the resource.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * : Host address where secrets will be managed. Required if `onDelegate` is set to false.
     */
    public readonly targetHost!: pulumi.Output<string | undefined>;
    public readonly templateInputs!: pulumi.Output<outputs.platform.ConnectorCustomSecretManagerTemplateInput[] | undefined>;
    /**
     * : Reference to the template used for managing secrets.
     */
    public readonly templateRef!: pulumi.Output<string>;
    /**
     * : Timeout in seconds for secrets management operations.
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * : Type of the custom secrets manager, typically set to `CustomSecretManager`.
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * : Version identifier of the secrets management template.
     */
    public readonly versionLabel!: pulumi.Output<string>;
    /**
     * : Directory path on the target host where secrets management tasks are performed. Required if `onDelegate` is set to false.
     */
    public readonly workingDirectory!: pulumi.Output<string | undefined>;

    /**
     * Create a ConnectorCustomSecretManager resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorCustomSecretManagerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorCustomSecretManagerArgs | ConnectorCustomSecretManagerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorCustomSecretManagerState | undefined;
            resourceInputs["delegateSelectors"] = state ? state.delegateSelectors : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["onDelegate"] = state ? state.onDelegate : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["sshSecretRef"] = state ? state.sshSecretRef : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetHost"] = state ? state.targetHost : undefined;
            resourceInputs["templateInputs"] = state ? state.templateInputs : undefined;
            resourceInputs["templateRef"] = state ? state.templateRef : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["versionLabel"] = state ? state.versionLabel : undefined;
            resourceInputs["workingDirectory"] = state ? state.workingDirectory : undefined;
        } else {
            const args = argsOrState as ConnectorCustomSecretManagerArgs | undefined;
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.templateRef === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateRef'");
            }
            if ((!args || args.versionLabel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'versionLabel'");
            }
            resourceInputs["delegateSelectors"] = args ? args.delegateSelectors : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["onDelegate"] = args ? args.onDelegate : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["sshSecretRef"] = args ? args.sshSecretRef : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetHost"] = args ? args.targetHost : undefined;
            resourceInputs["templateInputs"] = args ? args.templateInputs : undefined;
            resourceInputs["templateRef"] = args ? args.templateRef : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["versionLabel"] = args ? args.versionLabel : undefined;
            resourceInputs["workingDirectory"] = args ? args.workingDirectory : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectorCustomSecretManager.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConnectorCustomSecretManager resources.
 */
export interface ConnectorCustomSecretManagerState {
    /**
     * Tags to filter delegates for connection.
     */
    delegateSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * : A brief description of what the resource does or is used for.
     */
    description?: pulumi.Input<string>;
    /**
     * : Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * : Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * : Specifies whether the secrets manager runs on a Harness delegate.
     */
    onDelegate?: pulumi.Input<boolean>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * : Reference to the Harness secret containing SSH credentials for the target host. Required if `onDelegate` is set to false.
     */
    sshSecretRef?: pulumi.Input<string>;
    /**
     * : Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * : Host address where secrets will be managed. Required if `onDelegate` is set to false.
     */
    targetHost?: pulumi.Input<string>;
    templateInputs?: pulumi.Input<pulumi.Input<inputs.platform.ConnectorCustomSecretManagerTemplateInput>[]>;
    /**
     * : Reference to the template used for managing secrets.
     */
    templateRef?: pulumi.Input<string>;
    /**
     * : Timeout in seconds for secrets management operations.
     */
    timeout?: pulumi.Input<number>;
    /**
     * : Type of the custom secrets manager, typically set to `CustomSecretManager`.
     */
    type?: pulumi.Input<string>;
    /**
     * : Version identifier of the secrets management template.
     */
    versionLabel?: pulumi.Input<string>;
    /**
     * : Directory path on the target host where secrets management tasks are performed. Required if `onDelegate` is set to false.
     */
    workingDirectory?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectorCustomSecretManager resource.
 */
export interface ConnectorCustomSecretManagerArgs {
    /**
     * Tags to filter delegates for connection.
     */
    delegateSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * : A brief description of what the resource does or is used for.
     */
    description?: pulumi.Input<string>;
    /**
     * : Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * : Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * : Specifies whether the secrets manager runs on a Harness delegate.
     */
    onDelegate?: pulumi.Input<boolean>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * : Reference to the Harness secret containing SSH credentials for the target host. Required if `onDelegate` is set to false.
     */
    sshSecretRef?: pulumi.Input<string>;
    /**
     * : Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * : Host address where secrets will be managed. Required if `onDelegate` is set to false.
     */
    targetHost?: pulumi.Input<string>;
    templateInputs?: pulumi.Input<pulumi.Input<inputs.platform.ConnectorCustomSecretManagerTemplateInput>[]>;
    /**
     * : Reference to the template used for managing secrets.
     */
    templateRef: pulumi.Input<string>;
    /**
     * : Timeout in seconds for secrets management operations.
     */
    timeout?: pulumi.Input<number>;
    /**
     * : Type of the custom secrets manager, typically set to `CustomSecretManager`.
     */
    type?: pulumi.Input<string>;
    /**
     * : Version identifier of the secrets management template.
     */
    versionLabel: pulumi.Input<string>;
    /**
     * : Directory path on the target host where secrets management tasks are performed. Required if `onDelegate` is set to false.
     */
    workingDirectory?: pulumi.Input<string>;
}
