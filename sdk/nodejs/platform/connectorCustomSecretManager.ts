// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating a Custom Secrets Manager (CSM) connector.
 */
export class ConnectorCustomSecretManager extends pulumi.CustomResource {
    /**
     * Get an existing ConnectorCustomSecretManager resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorCustomSecretManagerState, opts?: pulumi.CustomResourceOptions): ConnectorCustomSecretManager {
        return new ConnectorCustomSecretManager(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/connectorCustomSecretManager:ConnectorCustomSecretManager';

    /**
     * Returns true if the given object is an instance of ConnectorCustomSecretManager.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectorCustomSecretManager {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectorCustomSecretManager.__pulumiType;
    }

    /**
     * Tags to filter delegates for connection.
     */
    declare public readonly delegateSelectors: pulumi.Output<string[] | undefined>;
    /**
     * Description of the resource.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the resource.
     */
    declare public readonly identifier: pulumi.Output<string>;
    /**
     * Name of the resource.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly onDelegate: pulumi.Output<boolean | undefined>;
    /**
     * Unique identifier of the organization.
     */
    declare public readonly orgId: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the project.
     */
    declare public readonly projectId: pulumi.Output<string | undefined>;
    /**
     * SSH secret reference for the custom secrets manager, required if 'on_delegate' is false.
     */
    declare public readonly sshSecretRef: pulumi.Output<string | undefined>;
    /**
     * Tags to associate with the resource.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * Host where the custom secrets manager is located, required if 'on_delegate' is false.
     */
    declare public readonly targetHost: pulumi.Output<string | undefined>;
    declare public readonly templateInputs: pulumi.Output<outputs.platform.ConnectorCustomSecretManagerTemplateInput[] | undefined>;
    declare public readonly templateRef: pulumi.Output<string>;
    declare public readonly timeout: pulumi.Output<number | undefined>;
    declare public readonly type: pulumi.Output<string | undefined>;
    declare public readonly versionLabel: pulumi.Output<string>;
    /**
     * The working directory for operations, required if 'on_delegate' is false.
     */
    declare public readonly workingDirectory: pulumi.Output<string | undefined>;

    /**
     * Create a ConnectorCustomSecretManager resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorCustomSecretManagerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorCustomSecretManagerArgs | ConnectorCustomSecretManagerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorCustomSecretManagerState | undefined;
            resourceInputs["delegateSelectors"] = state?.delegateSelectors;
            resourceInputs["description"] = state?.description;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["name"] = state?.name;
            resourceInputs["onDelegate"] = state?.onDelegate;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["sshSecretRef"] = state?.sshSecretRef;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["targetHost"] = state?.targetHost;
            resourceInputs["templateInputs"] = state?.templateInputs;
            resourceInputs["templateRef"] = state?.templateRef;
            resourceInputs["timeout"] = state?.timeout;
            resourceInputs["type"] = state?.type;
            resourceInputs["versionLabel"] = state?.versionLabel;
            resourceInputs["workingDirectory"] = state?.workingDirectory;
        } else {
            const args = argsOrState as ConnectorCustomSecretManagerArgs | undefined;
            if (args?.identifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if (args?.templateRef === undefined && !opts.urn) {
                throw new Error("Missing required property 'templateRef'");
            }
            if (args?.versionLabel === undefined && !opts.urn) {
                throw new Error("Missing required property 'versionLabel'");
            }
            resourceInputs["delegateSelectors"] = args?.delegateSelectors;
            resourceInputs["description"] = args?.description;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["name"] = args?.name;
            resourceInputs["onDelegate"] = args?.onDelegate;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["sshSecretRef"] = args?.sshSecretRef;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["targetHost"] = args?.targetHost;
            resourceInputs["templateInputs"] = args?.templateInputs;
            resourceInputs["templateRef"] = args?.templateRef;
            resourceInputs["timeout"] = args?.timeout;
            resourceInputs["type"] = args?.type;
            resourceInputs["versionLabel"] = args?.versionLabel;
            resourceInputs["workingDirectory"] = args?.workingDirectory;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectorCustomSecretManager.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConnectorCustomSecretManager resources.
 */
export interface ConnectorCustomSecretManagerState {
    /**
     * Tags to filter delegates for connection.
     */
    delegateSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    onDelegate?: pulumi.Input<boolean>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * SSH secret reference for the custom secrets manager, required if 'on_delegate' is false.
     */
    sshSecretRef?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Host where the custom secrets manager is located, required if 'on_delegate' is false.
     */
    targetHost?: pulumi.Input<string>;
    templateInputs?: pulumi.Input<pulumi.Input<inputs.platform.ConnectorCustomSecretManagerTemplateInput>[]>;
    templateRef?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    versionLabel?: pulumi.Input<string>;
    /**
     * The working directory for operations, required if 'on_delegate' is false.
     */
    workingDirectory?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectorCustomSecretManager resource.
 */
export interface ConnectorCustomSecretManagerArgs {
    /**
     * Tags to filter delegates for connection.
     */
    delegateSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    onDelegate?: pulumi.Input<boolean>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * SSH secret reference for the custom secrets manager, required if 'on_delegate' is false.
     */
    sshSecretRef?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Host where the custom secrets manager is located, required if 'on_delegate' is false.
     */
    targetHost?: pulumi.Input<string>;
    templateInputs?: pulumi.Input<pulumi.Input<inputs.platform.ConnectorCustomSecretManagerTemplateInput>[]>;
    templateRef: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    versionLabel: pulumi.Input<string>;
    /**
     * The working directory for operations, required if 'on_delegate' is false.
     */
    workingDirectory?: pulumi.Input<string>;
}
