// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * DataSource for deployment freeze in harness.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = harness.platform.getManualFreeze({
 *     identifier: "identifier",
 *     orgId: "org_id",
 *     projectId: "project_id",
 *     accountId: "account_id",
 * });
 * ```
 */
export function getManualFreeze(args: GetManualFreezeArgs, opts?: pulumi.InvokeOptions): Promise<GetManualFreezeResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:platform/getManualFreeze:getManualFreeze", {
        "accountId": args.accountId,
        "identifier": args.identifier,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getManualFreeze.
 */
export interface GetManualFreezeArgs {
    /**
     * Account Identifier of the freeze
     */
    accountId: string;
    /**
     * Identifier of the freeze
     */
    identifier: string;
    /**
     * Organization identifier of the freeze
     */
    orgId?: string;
    /**
     * Project identifier of the freeze
     */
    projectId?: string;
}

/**
 * A collection of values returned by getManualFreeze.
 */
export interface GetManualFreezeResult {
    /**
     * Account Identifier of the freeze
     */
    readonly accountId: string;
    /**
     * Current or upcoming windows
     */
    readonly currentOrUpcomingWindows: outputs.platform.GetManualFreezeCurrentOrUpcomingWindow[];
    /**
     * Description of the freeze
     */
    readonly description: string;
    /**
     * Freeze windows in the freeze response
     */
    readonly freezeWindows: outputs.platform.GetManualFreezeFreezeWindow[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Identifier of the freeze
     */
    readonly identifier: string;
    /**
     * Name of the freeze
     */
    readonly name: string;
    /**
     * Organization identifier of the freeze
     */
    readonly orgId?: string;
    /**
     * Project identifier of the freeze
     */
    readonly projectId?: string;
    /**
     * Scope of the freeze
     */
    readonly scope: string;
    /**
     * Status of the freeze
     */
    readonly status: string;
    /**
     * Tags associated with the freeze
     */
    readonly tags: string[];
    /**
     * Type of freeze
     */
    readonly type: string;
    /**
     * Yaml of the freeze
     */
    readonly yaml: string;
}
/**
 * DataSource for deployment freeze in harness.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = harness.platform.getManualFreeze({
 *     identifier: "identifier",
 *     orgId: "org_id",
 *     projectId: "project_id",
 *     accountId: "account_id",
 * });
 * ```
 */
export function getManualFreezeOutput(args: GetManualFreezeOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetManualFreezeResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:platform/getManualFreeze:getManualFreeze", {
        "accountId": args.accountId,
        "identifier": args.identifier,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getManualFreeze.
 */
export interface GetManualFreezeOutputArgs {
    /**
     * Account Identifier of the freeze
     */
    accountId: pulumi.Input<string>;
    /**
     * Identifier of the freeze
     */
    identifier: pulumi.Input<string>;
    /**
     * Organization identifier of the freeze
     */
    orgId?: pulumi.Input<string>;
    /**
     * Project identifier of the freeze
     */
    projectId?: pulumi.Input<string>;
}
