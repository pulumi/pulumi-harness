// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for creating a Harness Repo Webhook.
 */
export class RepoWebhook extends pulumi.CustomResource {
    /**
     * Get an existing RepoWebhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepoWebhookState, opts?: pulumi.CustomResourceOptions): RepoWebhook {
        return new RepoWebhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/repoWebhook:RepoWebhook';

    /**
     * Returns true if the given object is an instance of RepoWebhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RepoWebhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepoWebhook.__pulumiType;
    }

    /**
     * Timestamp when the webhook was created.
     */
    public /*out*/ readonly created!: pulumi.Output<number>;
    /**
     * ID of the user who created the webhook.
     */
    public /*out*/ readonly createdBy!: pulumi.Output<number>;
    /**
     * Description of the webhook.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Webhook enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Created webhook has secret encoding.
     */
    public /*out*/ readonly hasSecret!: pulumi.Output<boolean>;
    /**
     * Identifier of the webhook.
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * Allow insecure connections for provided webhook URL.
     */
    public readonly insecure!: pulumi.Output<boolean>;
    /**
     * Unique identifier of the organization.
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the project.
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * Identifier of the repository.
     */
    public readonly repoIdentifier!: pulumi.Output<string>;
    /**
     * Webhook secret which will be used to sign the webhook payload.
     */
    public readonly secret!: pulumi.Output<string | undefined>;
    /**
     * List of triggers of the webhook (keep empty for all triggers).
     */
    public readonly triggers!: pulumi.Output<string[] | undefined>;
    /**
     * URL that's called by the webhook.
     */
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a RepoWebhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepoWebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepoWebhookArgs | RepoWebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepoWebhookState | undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["hasSecret"] = state ? state.hasSecret : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["insecure"] = state ? state.insecure : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["repoIdentifier"] = state ? state.repoIdentifier : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["triggers"] = state ? state.triggers : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as RepoWebhookArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.insecure === undefined) && !opts.urn) {
                throw new Error("Missing required property 'insecure'");
            }
            if ((!args || args.repoIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repoIdentifier'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["insecure"] = args ? args.insecure : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["repoIdentifier"] = args ? args.repoIdentifier : undefined;
            resourceInputs["secret"] = args?.secret ? pulumi.secret(args.secret) : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["hasSecret"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RepoWebhook.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RepoWebhook resources.
 */
export interface RepoWebhookState {
    /**
     * Timestamp when the webhook was created.
     */
    created?: pulumi.Input<number>;
    /**
     * ID of the user who created the webhook.
     */
    createdBy?: pulumi.Input<number>;
    /**
     * Description of the webhook.
     */
    description?: pulumi.Input<string>;
    /**
     * Webhook enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Created webhook has secret encoding.
     */
    hasSecret?: pulumi.Input<boolean>;
    /**
     * Identifier of the webhook.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Allow insecure connections for provided webhook URL.
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Identifier of the repository.
     */
    repoIdentifier?: pulumi.Input<string>;
    /**
     * Webhook secret which will be used to sign the webhook payload.
     */
    secret?: pulumi.Input<string>;
    /**
     * List of triggers of the webhook (keep empty for all triggers).
     */
    triggers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL that's called by the webhook.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RepoWebhook resource.
 */
export interface RepoWebhookArgs {
    /**
     * Description of the webhook.
     */
    description?: pulumi.Input<string>;
    /**
     * Webhook enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Identifier of the webhook.
     */
    identifier: pulumi.Input<string>;
    /**
     * Allow insecure connections for provided webhook URL.
     */
    insecure: pulumi.Input<boolean>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Identifier of the repository.
     */
    repoIdentifier: pulumi.Input<string>;
    /**
     * Webhook secret which will be used to sign the webhook payload.
     */
    secret?: pulumi.Input<string>;
    /**
     * List of triggers of the webhook (keep empty for all triggers).
     */
    triggers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL that's called by the webhook.
     */
    url: pulumi.Input<string>;
}
