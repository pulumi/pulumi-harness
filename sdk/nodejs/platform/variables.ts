// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating a Harness Variables.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const test = new harness.platform.Variables("test", {
 *     identifier: "identifier",
 *     name: "name",
 *     orgId: "org_id",
 *     projectId: "project_id",
 *     type: "String",
 *     spec: {
 *         valueType: "FIXED",
 *         fixedValue: "fixedValue",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import account level variables
 *
 * ```sh
 * $ pulumi import harness:platform/variables:Variables example <variable_id>
 * ```
 *
 * Import org level variables
 *
 * ```sh
 * $ pulumi import harness:platform/variables:Variables example <ord_id>/<variable_id>
 * ```
 *
 * Import project level variables
 *
 * ```sh
 * $ pulumi import harness:platform/variables:Variables example <org_id>/<project_id>/<variable_id>
 * ```
 */
export class Variables extends pulumi.CustomResource {
    /**
     * Get an existing Variables resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VariablesState, opts?: pulumi.CustomResourceOptions): Variables {
        return new Variables(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/variables:Variables';

    /**
     * Returns true if the given object is an instance of Variables.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Variables {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Variables.__pulumiType;
    }

    /**
     * Description of the entity
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the resource
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * Name of the Variable
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Organization Identifier for the Entity
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * Project Identifier for the Entity
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * List of Spec Fields.
     */
    public readonly spec!: pulumi.Output<outputs.platform.VariablesSpec>;
    /**
     * Type of Variable
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Variables resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VariablesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VariablesArgs | VariablesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VariablesState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as VariablesArgs | undefined;
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.spec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spec'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Variables.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Variables resources.
 */
export interface VariablesState {
    /**
     * Description of the entity
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource
     */
    identifier?: pulumi.Input<string>;
    /**
     * Name of the Variable
     */
    name?: pulumi.Input<string>;
    /**
     * Organization Identifier for the Entity
     */
    orgId?: pulumi.Input<string>;
    /**
     * Project Identifier for the Entity
     */
    projectId?: pulumi.Input<string>;
    /**
     * List of Spec Fields.
     */
    spec?: pulumi.Input<inputs.platform.VariablesSpec>;
    /**
     * Type of Variable
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Variables resource.
 */
export interface VariablesArgs {
    /**
     * Description of the entity
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of the Variable
     */
    name?: pulumi.Input<string>;
    /**
     * Organization Identifier for the Entity
     */
    orgId?: pulumi.Input<string>;
    /**
     * Project Identifier for the Entity
     */
    projectId?: pulumi.Input<string>;
    /**
     * List of Spec Fields.
     */
    spec: pulumi.Input<inputs.platform.VariablesSpec>;
    /**
     * Type of Variable
     */
    type: pulumi.Input<string>;
}
