// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Data source for retrieving a Harness DBDevOps Instance.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = harness.platform.getDbInstance({
 *     identifier: "identifier",
 *     orgId: "org_id",
 *     projectId: "project_id",
 *     schema: "schema1",
 * });
 * ```
 */
export function getDbInstance(args: GetDbInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetDbInstanceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:platform/getDbInstance:getDbInstance", {
        "identifier": args.identifier,
        "liquibaseSubstituteProperties": args.liquibaseSubstituteProperties,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
        "schema": args.schema,
    }, opts);
}

/**
 * A collection of arguments for invoking getDbInstance.
 */
export interface GetDbInstanceArgs {
    /**
     * Unique identifier of the resource.
     */
    identifier: string;
    liquibaseSubstituteProperties?: {[key: string]: string};
    /**
     * Name of the resource.
     */
    name?: string;
    /**
     * Unique identifier of the organization.
     */
    orgId: string;
    /**
     * Unique identifier of the project.
     */
    projectId: string;
    /**
     * The identifier of the parent database schema
     */
    schema: string;
}

/**
 * A collection of values returned by getDbInstance.
 */
export interface GetDbInstanceResult {
    /**
     * The branch of changeSet repository
     */
    readonly branch: string;
    /**
     * The connector to database
     */
    readonly connector: string;
    /**
     * The liquibase context
     */
    readonly context: string;
    /**
     * Description of the resource.
     */
    readonly description: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Unique identifier of the resource.
     */
    readonly identifier: string;
    readonly liquibaseSubstituteProperties?: {[key: string]: string};
    /**
     * Name of the resource.
     */
    readonly name?: string;
    /**
     * Unique identifier of the organization.
     */
    readonly orgId: string;
    /**
     * Unique identifier of the project.
     */
    readonly projectId: string;
    /**
     * The identifier of the parent database schema
     */
    readonly schema: string;
    /**
     * Tags to associate with the resource.
     */
    readonly tags: string[];
}
/**
 * Data source for retrieving a Harness DBDevOps Instance.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = harness.platform.getDbInstance({
 *     identifier: "identifier",
 *     orgId: "org_id",
 *     projectId: "project_id",
 *     schema: "schema1",
 * });
 * ```
 */
export function getDbInstanceOutput(args: GetDbInstanceOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDbInstanceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:platform/getDbInstance:getDbInstance", {
        "identifier": args.identifier,
        "liquibaseSubstituteProperties": args.liquibaseSubstituteProperties,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
        "schema": args.schema,
    }, opts);
}

/**
 * A collection of arguments for invoking getDbInstance.
 */
export interface GetDbInstanceOutputArgs {
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    liquibaseSubstituteProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId: pulumi.Input<string>;
    /**
     * The identifier of the parent database schema
     */
    schema: pulumi.Input<string>;
}
