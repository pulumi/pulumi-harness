// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * // Create delegate token at account level
 * const accountLevel = new harness.platform.Delegatetoken("account_level", {
 *     name: "account-delegate-token",
 *     accountId: "account_id",
 * });
 * // Create delegate token at organization level
 * const orgLevel = new harness.platform.Delegatetoken("org_level", {
 *     name: "org-delegate-token",
 *     accountId: "account_id",
 *     orgId: "org_id",
 * });
 * // Create delegate token at project level
 * const projectLevel = new harness.platform.Delegatetoken("project_level", {
 *     name: "project-delegate-token",
 *     accountId: "account_id",
 *     orgId: "org_id",
 *     projectId: "project_id",
 * });
 * // Create delegate token with auto-expiry
 * const expiryToken = new harness.platform.Delegatetoken("expiry_token", {
 *     name: "expiry-delegate-token",
 *     accountId: "account_id",
 *     revokeAfter: 1769689600000,
 * });
 * ```
 */
export class Delegatetoken extends pulumi.CustomResource {
    /**
     * Get an existing Delegatetoken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DelegatetokenState, opts?: pulumi.CustomResourceOptions): Delegatetoken {
        return new Delegatetoken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/delegatetoken:Delegatetoken';

    /**
     * Returns true if the given object is an instance of Delegatetoken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Delegatetoken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Delegatetoken.__pulumiType;
    }

    /**
     * Account Identifier for the Entity
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * Time when the delegate token is created. This is an epoch timestamp.
     */
    declare public readonly createdAt: pulumi.Output<number>;
    /**
     * created by details
     */
    declare public readonly createdBy: pulumi.Output<{[key: string]: string}>;
    /**
     * Name of the delegate token
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Org Identifier for the Entity
     */
    declare public readonly orgId: pulumi.Output<string | undefined>;
    /**
     * Project Identifier for the Entity
     */
    declare public readonly projectId: pulumi.Output<string | undefined>;
    /**
     * Epoch time in milliseconds after which the token will be marked as revoked. There can be a delay of up to one hour from the epoch value provided and actual revoking of the token.
     */
    declare public readonly revokeAfter: pulumi.Output<number | undefined>;
    /**
     * Status of Delegate Token (ACTIVE or REVOKED). If left empty both active and revoked tokens will be assumed
     */
    declare public readonly tokenStatus: pulumi.Output<string>;
    /**
     * Value of the delegate token. Encoded in base64.
     */
    declare public readonly value: pulumi.Output<string>;

    /**
     * Create a Delegatetoken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DelegatetokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DelegatetokenArgs | DelegatetokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DelegatetokenState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["revokeAfter"] = state?.revokeAfter;
            resourceInputs["tokenStatus"] = state?.tokenStatus;
            resourceInputs["value"] = state?.value;
        } else {
            const args = argsOrState as DelegatetokenArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["createdAt"] = args?.createdAt;
            resourceInputs["createdBy"] = args?.createdBy;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["revokeAfter"] = args?.revokeAfter;
            resourceInputs["tokenStatus"] = args?.tokenStatus;
            resourceInputs["value"] = args?.value;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Delegatetoken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Delegatetoken resources.
 */
export interface DelegatetokenState {
    /**
     * Account Identifier for the Entity
     */
    accountId?: pulumi.Input<string>;
    /**
     * Time when the delegate token is created. This is an epoch timestamp.
     */
    createdAt?: pulumi.Input<number>;
    /**
     * created by details
     */
    createdBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the delegate token
     */
    name?: pulumi.Input<string>;
    /**
     * Org Identifier for the Entity
     */
    orgId?: pulumi.Input<string>;
    /**
     * Project Identifier for the Entity
     */
    projectId?: pulumi.Input<string>;
    /**
     * Epoch time in milliseconds after which the token will be marked as revoked. There can be a delay of up to one hour from the epoch value provided and actual revoking of the token.
     */
    revokeAfter?: pulumi.Input<number>;
    /**
     * Status of Delegate Token (ACTIVE or REVOKED). If left empty both active and revoked tokens will be assumed
     */
    tokenStatus?: pulumi.Input<string>;
    /**
     * Value of the delegate token. Encoded in base64.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Delegatetoken resource.
 */
export interface DelegatetokenArgs {
    /**
     * Account Identifier for the Entity
     */
    accountId: pulumi.Input<string>;
    /**
     * Time when the delegate token is created. This is an epoch timestamp.
     */
    createdAt?: pulumi.Input<number>;
    /**
     * created by details
     */
    createdBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the delegate token
     */
    name?: pulumi.Input<string>;
    /**
     * Org Identifier for the Entity
     */
    orgId?: pulumi.Input<string>;
    /**
     * Project Identifier for the Entity
     */
    projectId?: pulumi.Input<string>;
    /**
     * Epoch time in milliseconds after which the token will be marked as revoked. There can be a delay of up to one hour from the epoch value provided and actual revoking of the token.
     */
    revokeAfter?: pulumi.Input<number>;
    /**
     * Status of Delegate Token (ACTIVE or REVOKED). If left empty both active and revoked tokens will be assumed
     */
    tokenStatus?: pulumi.Input<string>;
    /**
     * Value of the delegate token. Encoded in base64.
     */
    value?: pulumi.Input<string>;
}
