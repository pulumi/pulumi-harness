// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Data source for retrieving a Harness GitOps Filter.
 */
export function getGitopsFilters(args: GetGitopsFiltersArgs, opts?: pulumi.InvokeOptions): Promise<GetGitopsFiltersResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:platform/getGitopsFilters:getGitopsFilters", {
        "identifier": args.identifier,
        "orgId": args.orgId,
        "projectId": args.projectId,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getGitopsFilters.
 */
export interface GetGitopsFiltersArgs {
    /**
     * Unique identifier of the GitOps filter to retrieve.
     */
    identifier: string;
    /**
     * Organization identifier for the GitOps filter.
     */
    orgId: string;
    /**
     * Project identifier for the GitOps filter.
     */
    projectId: string;
    /**
     * Type of GitOps filter. Currently, only "APPLICATION" is supported.
     */
    type: string;
}

/**
 * A collection of values returned by getGitopsFilters.
 */
export interface GetGitopsFiltersResult {
    /**
     * Properties of the filter entity defined in Harness as a JSON string. This contains filter criteria such as health status, sync status, agent identifiers, clusters, namespaces, and repositories.
     */
    readonly filterProperties: string;
    readonly filterVisibility: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly identifier: string;
    /**
     * Name of the GitOps filter.
     */
    readonly name: string;
    readonly orgId: string;
    readonly projectId: string;
    readonly type: string;
}
/**
 * Data source for retrieving a Harness GitOps Filter.
 */
export function getGitopsFiltersOutput(args: GetGitopsFiltersOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetGitopsFiltersResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:platform/getGitopsFilters:getGitopsFilters", {
        "identifier": args.identifier,
        "orgId": args.orgId,
        "projectId": args.projectId,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getGitopsFilters.
 */
export interface GetGitopsFiltersOutputArgs {
    /**
     * Unique identifier of the GitOps filter to retrieve.
     */
    identifier: pulumi.Input<string>;
    /**
     * Organization identifier for the GitOps filter.
     */
    orgId: pulumi.Input<string>;
    /**
     * Project identifier for the GitOps filter.
     */
    projectId: pulumi.Input<string>;
    /**
     * Type of GitOps filter. Currently, only "APPLICATION" is supported.
     */
    type: pulumi.Input<string>;
}
