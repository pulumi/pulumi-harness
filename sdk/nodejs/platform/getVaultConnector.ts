// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = harness.platform.getVaultConnector({
 *     identifier: "identifier",
 * });
 * ```
 */
export function getVaultConnector(args: GetVaultConnectorArgs, opts?: pulumi.InvokeOptions): Promise<GetVaultConnectorResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:platform/getVaultConnector:getVaultConnector", {
        "identifier": args.identifier,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVaultConnector.
 */
export interface GetVaultConnectorArgs {
    /**
     * Unique identifier of the resource.
     */
    identifier: string;
    /**
     * Name of the resource.
     */
    name?: string;
    /**
     * Unique identifier of the organization.
     */
    orgId?: string;
    /**
     * Unique identifier of the project.
     */
    projectId?: string;
}

/**
 * A collection of values returned by getVaultConnector.
 */
export interface GetVaultConnectorResult {
    /**
     * Access type.
     */
    readonly accessType: string;
    /**
     * ID of App Role.
     */
    readonly appRoleId: string;
    /**
     * The authentication token for Vault.
     */
    readonly authToken: string;
    /**
     * The AWS region where AWS IAM auth will happen.
     */
    readonly awsRegion: string;
    /**
     * The location of the Vault directory where Secret will be stored.
     */
    readonly basePath: string;
    /**
     * Is default or not.
     */
    readonly default: boolean;
    /**
     * List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.
     */
    readonly delegateSelectors: string[];
    /**
     * Description of the resource.
     */
    readonly description: string;
    /**
     * Execute on delegate or not.
     */
    readonly executeOnDelegate: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Unique identifier of the resource.
     */
    readonly identifier: string;
    /**
     * Is default or not.
     */
    readonly isDefault: boolean;
    /**
     * Read only or not.
     */
    readonly isReadOnly: boolean;
    /**
     * The path where kubernetes auth is enabled in Vault.
     */
    readonly k8sAuthEndpoint: string;
    /**
     * Name of the resource.
     */
    readonly name?: string;
    /**
     * The Vault namespace where Secret will be created.
     */
    readonly namespace: string;
    /**
     * Unique identifier of the organization.
     */
    readonly orgId?: string;
    /**
     * Unique identifier of the project.
     */
    readonly projectId?: string;
    /**
     * Read only.
     */
    readonly readOnly: boolean;
    /**
     * Boolean value to indicate if appRole token renewal is enabled or not.
     */
    readonly renewAppRoleToken: boolean;
    /**
     * The time interval for token renewal.
     */
    readonly renewalIntervalMinutes: number;
    /**
     * Manually entered Secret Engine.
     */
    readonly secretEngineManuallyConfigured: boolean;
    /**
     * Name of the Secret Engine.
     */
    readonly secretEngineName: string;
    /**
     * Version of Secret Engine.
     */
    readonly secretEngineVersion: number;
    /**
     * ID of the Secret.
     */
    readonly secretId: string;
    /**
     * The SA token path where the token is mounted in the K8s Pod.
     */
    readonly serviceAccountTokenPath: string;
    /**
     * The location at which auth token is to be read from.
     */
    readonly sinkPath: string;
    /**
     * Tags to associate with the resource.
     */
    readonly tags: string[];
    /**
     * Boolean value to indicate if AWS IAM is used for authentication.
     */
    readonly useAwsIam: boolean;
    /**
     * Boolean value to indicate if JWT is used for authentication.
     */
    readonly useJwtAuth: boolean;
    /**
     * Boolean value to indicate if K8s Auth is used for authentication.
     */
    readonly useK8sAuth: boolean;
    /**
     * Boolean value to indicate if Vault Agent is used for authentication.
     */
    readonly useVaultAgent: boolean;
    /**
     * The Vault role defined to bind to AWS IAM account/role being accessed.
     */
    readonly vaultAwsIamRole: string;
    /**
     * Custom path at with JWT auth in enabled for Vault.
     */
    readonly vaultJwtAuthPath: string;
    /**
     * The Vault role defined with JWT auth type for accessing Vault as per policies binded.
     */
    readonly vaultJwtAuthRole: string;
    /**
     * The role where K8s auth will happen.
     */
    readonly vaultK8sAuthRole: string;
    /**
     * URL of the HashiCorp Vault.
     */
    readonly vaultUrl: string;
    /**
     * The AWS IAM Header Server ID that has been configured for this AWS IAM instance.
     */
    readonly xvaultAwsIamServerId: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = harness.platform.getVaultConnector({
 *     identifier: "identifier",
 * });
 * ```
 */
export function getVaultConnectorOutput(args: GetVaultConnectorOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVaultConnectorResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:platform/getVaultConnector:getVaultConnector", {
        "identifier": args.identifier,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVaultConnector.
 */
export interface GetVaultConnectorOutputArgs {
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
}
