// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Data source for retrieving a Harness Repo Webhook.
 */
export function getRepoWebhook(args: GetRepoWebhookArgs, opts?: pulumi.InvokeOptions): Promise<GetRepoWebhookResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:platform/getRepoWebhook:getRepoWebhook", {
        "description": args.description,
        "enabled": args.enabled,
        "identifier": args.identifier,
        "insecure": args.insecure,
        "orgId": args.orgId,
        "projectId": args.projectId,
        "repoIdentifier": args.repoIdentifier,
        "secret": args.secret,
        "triggers": args.triggers,
        "url": args.url,
    }, opts);
}

/**
 * A collection of arguments for invoking getRepoWebhook.
 */
export interface GetRepoWebhookArgs {
    /**
     * Description of the webhook.
     */
    description?: string;
    /**
     * Webhook enabled.
     */
    enabled: boolean;
    /**
     * Identifier of the webhook.
     */
    identifier: string;
    /**
     * Allow insecure connections for provided webhook URL.
     */
    insecure: boolean;
    /**
     * Unique identifier of the organization.
     */
    orgId?: string;
    /**
     * Unique identifier of the project.
     */
    projectId?: string;
    /**
     * Identifier of the repository.
     */
    repoIdentifier: string;
    /**
     * Webhook secret which will be used to sign the webhook payload.
     */
    secret?: string;
    /**
     * List of triggers of the webhook (keep empty for all triggers).
     */
    triggers?: string[];
    /**
     * URL that's called by the webhook.
     */
    url: string;
}

/**
 * A collection of values returned by getRepoWebhook.
 */
export interface GetRepoWebhookResult {
    /**
     * Timestamp when the webhook was created.
     */
    readonly created: number;
    /**
     * ID of the user who created the webhook.
     */
    readonly createdBy: number;
    /**
     * Description of the webhook.
     */
    readonly description?: string;
    /**
     * Webhook enabled.
     */
    readonly enabled: boolean;
    /**
     * Created webhook has secret encoding.
     */
    readonly hasSecret: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Identifier of the webhook.
     */
    readonly identifier: string;
    /**
     * Allow insecure connections for provided webhook URL.
     */
    readonly insecure: boolean;
    /**
     * Unique identifier of the organization.
     */
    readonly orgId?: string;
    /**
     * Unique identifier of the project.
     */
    readonly projectId?: string;
    /**
     * Identifier of the repository.
     */
    readonly repoIdentifier: string;
    /**
     * Webhook secret which will be used to sign the webhook payload.
     */
    readonly secret?: string;
    /**
     * List of triggers of the webhook (keep empty for all triggers).
     */
    readonly triggers?: string[];
    /**
     * URL that's called by the webhook.
     */
    readonly url: string;
}
/**
 * Data source for retrieving a Harness Repo Webhook.
 */
export function getRepoWebhookOutput(args: GetRepoWebhookOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRepoWebhookResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:platform/getRepoWebhook:getRepoWebhook", {
        "description": args.description,
        "enabled": args.enabled,
        "identifier": args.identifier,
        "insecure": args.insecure,
        "orgId": args.orgId,
        "projectId": args.projectId,
        "repoIdentifier": args.repoIdentifier,
        "secret": args.secret,
        "triggers": args.triggers,
        "url": args.url,
    }, opts);
}

/**
 * A collection of arguments for invoking getRepoWebhook.
 */
export interface GetRepoWebhookOutputArgs {
    /**
     * Description of the webhook.
     */
    description?: pulumi.Input<string>;
    /**
     * Webhook enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Identifier of the webhook.
     */
    identifier: pulumi.Input<string>;
    /**
     * Allow insecure connections for provided webhook URL.
     */
    insecure: pulumi.Input<boolean>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Identifier of the repository.
     */
    repoIdentifier: pulumi.Input<string>;
    /**
     * Webhook secret which will be used to sign the webhook payload.
     */
    secret?: pulumi.Input<string>;
    /**
     * List of triggers of the webhook (keep empty for all triggers).
     */
    triggers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL that's called by the webhook.
     */
    url: pulumi.Input<string>;
}
