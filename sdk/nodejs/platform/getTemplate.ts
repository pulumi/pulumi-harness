// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Data source for retrieving a Harness pipeline.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * //For account level template
 * const example = harness.platform.getTemplate({
 *     identifier: "identifier",
 *     version: "version",
 * });
 * //For org level template
 * const example1 = harness.platform.getTemplate({
 *     identifier: "identifier",
 *     version: "version",
 *     orgId: "org_id",
 * });
 * //For project level template
 * const example2 = harness.platform.getTemplate({
 *     identifier: "identifier",
 *     version: "version",
 *     orgId: "org_id",
 *     projectId: "project_id",
 * });
 * ```
 */
export function getTemplate(args?: GetTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetTemplateResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:platform/getTemplate:getTemplate", {
        "branchName": args.branchName,
        "childType": args.childType,
        "gitDetails": args.gitDetails,
        "identifier": args.identifier,
        "isStable": args.isStable,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
        "scope": args.scope,
        "version": args.version,
    }, opts);
}

/**
 * A collection of arguments for invoking getTemplate.
 */
export interface GetTemplateArgs {
    /**
     * Version Label for Template.
     */
    branchName?: string;
    /**
     * Defines child template type.
     */
    childType?: string;
    /**
     * Contains parameters related to creating an Entity for Git Experience.
     */
    gitDetails?: inputs.platform.GetTemplateGitDetails;
    /**
     * Unique identifier of the resource.
     */
    identifier?: string;
    /**
     * True if given version for template to be set as stable.
     */
    isStable?: boolean;
    /**
     * Name of the resource.
     */
    name?: string;
    /**
     * Unique identifier of the organization.
     */
    orgId?: string;
    /**
     * Unique identifier of the project.
     */
    projectId?: string;
    /**
     * Scope of template.
     */
    scope?: string;
    /**
     * Version Label for Template.
     */
    version?: string;
}

/**
 * A collection of values returned by getTemplate.
 */
export interface GetTemplateResult {
    /**
     * Version Label for Template.
     */
    readonly branchName?: string;
    /**
     * Defines child template type.
     */
    readonly childType?: string;
    /**
     * Identifier of the Harness Connector used for CRUD operations on the Entity.
     */
    readonly connectorRef: string;
    /**
     * Description of the resource.
     */
    readonly description: string;
    /**
     * Contains parameters related to creating an Entity for Git Experience.
     */
    readonly gitDetails?: outputs.platform.GetTemplateGitDetails;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Unique identifier of the resource.
     */
    readonly identifier?: string;
    /**
     * True if given version for template to be set as stable.
     */
    readonly isStable?: boolean;
    /**
     * Name of the resource.
     */
    readonly name?: string;
    /**
     * Unique identifier of the organization.
     */
    readonly orgId?: string;
    /**
     * Unique identifier of the project.
     */
    readonly projectId?: string;
    /**
     * Scope of template.
     */
    readonly scope?: string;
    /**
     * Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
     */
    readonly storeType: string;
    /**
     * Tags to associate with the resource.
     */
    readonly tags: string[];
    /**
     * Yaml for creating new Template.
     */
    readonly templateYaml: string;
    /**
     * Version Label for Template.
     */
    readonly version?: string;
}
/**
 * Data source for retrieving a Harness pipeline.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * //For account level template
 * const example = harness.platform.getTemplate({
 *     identifier: "identifier",
 *     version: "version",
 * });
 * //For org level template
 * const example1 = harness.platform.getTemplate({
 *     identifier: "identifier",
 *     version: "version",
 *     orgId: "org_id",
 * });
 * //For project level template
 * const example2 = harness.platform.getTemplate({
 *     identifier: "identifier",
 *     version: "version",
 *     orgId: "org_id",
 *     projectId: "project_id",
 * });
 * ```
 */
export function getTemplateOutput(args?: GetTemplateOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetTemplateResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:platform/getTemplate:getTemplate", {
        "branchName": args.branchName,
        "childType": args.childType,
        "gitDetails": args.gitDetails,
        "identifier": args.identifier,
        "isStable": args.isStable,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
        "scope": args.scope,
        "version": args.version,
    }, opts);
}

/**
 * A collection of arguments for invoking getTemplate.
 */
export interface GetTemplateOutputArgs {
    /**
     * Version Label for Template.
     */
    branchName?: pulumi.Input<string>;
    /**
     * Defines child template type.
     */
    childType?: pulumi.Input<string>;
    /**
     * Contains parameters related to creating an Entity for Git Experience.
     */
    gitDetails?: pulumi.Input<inputs.platform.GetTemplateGitDetailsArgs>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * True if given version for template to be set as stable.
     */
    isStable?: pulumi.Input<boolean>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Scope of template.
     */
    scope?: pulumi.Input<string>;
    /**
     * Version Label for Template.
     */
    version?: pulumi.Input<string>;
}
