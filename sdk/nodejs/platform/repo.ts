// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating a Harness Repo.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const test = new harness.platform.Repo("test", {
 *     identifier: "test_repo_123",
 *     orgId: "test_org_123",
 *     projectId: "test_project_123",
 *     defaultBranch: "main",
 *     description: "test_description_123",
 *     sources: [{
 *         repo: "octocat/hello-worId",
 *         type: "github",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import
 *
 * ```sh
 * $ pulumi import harness:platform/repo:Repo example <identifier>
 * ```
 *
 * Import using the organization id
 *
 * ```sh
 * $ pulumi import harness:platform/repo:Repo example <org_id>/<identifier>
 * ```
 *
 * Import using the organization id and the project id
 *
 * ```sh
 * $ pulumi import harness:platform/repo:Repo example <org_id>/<project_id>/<identifier>
 * ```
 */
export class Repo extends pulumi.CustomResource {
    /**
     * Get an existing Repo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepoState, opts?: pulumi.CustomResourceOptions): Repo {
        return new Repo(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/repo:Repo';

    /**
     * Returns true if the given object is an instance of Repo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Repo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repo.__pulumiType;
    }

    /**
     * Timestamp when the repository was created.
     */
    public /*out*/ readonly created!: pulumi.Output<number>;
    /**
     * ID of the user who created the repository.
     */
    public /*out*/ readonly createdBy!: pulumi.Output<number>;
    /**
     * Default branch of the repository (Applicate only for create).
     */
    public readonly defaultBranch!: pulumi.Output<string | undefined>;
    /**
     * Description of the repository.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Repository should be created with specified predefined gitignore file.
     */
    public readonly gitIgnore!: pulumi.Output<string | undefined>;
    /**
     * Git URL of the repository.
     */
    public /*out*/ readonly gitUrl!: pulumi.Output<string>;
    /**
     * Identifier of the repository.
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * Repository should be created with specified predefined license file.
     */
    public readonly license!: pulumi.Output<string | undefined>;
    /**
     * Name of the repository.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Unique identifier of the organization.
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * Path of the repository.
     */
    public /*out*/ readonly path!: pulumi.Output<string>;
    /**
     * Unique identifier of the project.
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * Repository should be created with readme file.
     */
    public readonly readme!: pulumi.Output<boolean | undefined>;
    /**
     * Configuration for importing an existing repository from SCM provider.
     */
    public readonly sources!: pulumi.Output<outputs.platform.RepoSource[] | undefined>;
    /**
     * Timestamp when the repository was last updated.
     */
    public /*out*/ readonly updated!: pulumi.Output<number>;

    /**
     * Create a Repo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepoArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepoArgs | RepoState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepoState | undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["defaultBranch"] = state ? state.defaultBranch : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["gitIgnore"] = state ? state.gitIgnore : undefined;
            resourceInputs["gitUrl"] = state ? state.gitUrl : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["license"] = state ? state.license : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["readme"] = state ? state.readme : undefined;
            resourceInputs["sources"] = state ? state.sources : undefined;
            resourceInputs["updated"] = state ? state.updated : undefined;
        } else {
            const args = argsOrState as RepoArgs | undefined;
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            resourceInputs["defaultBranch"] = args ? args.defaultBranch : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gitIgnore"] = args ? args.gitIgnore : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["license"] = args ? args.license : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["readme"] = args ? args.readme : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["gitUrl"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Repo.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Repo resources.
 */
export interface RepoState {
    /**
     * Timestamp when the repository was created.
     */
    created?: pulumi.Input<number>;
    /**
     * ID of the user who created the repository.
     */
    createdBy?: pulumi.Input<number>;
    /**
     * Default branch of the repository (Applicate only for create).
     */
    defaultBranch?: pulumi.Input<string>;
    /**
     * Description of the repository.
     */
    description?: pulumi.Input<string>;
    /**
     * Repository should be created with specified predefined gitignore file.
     */
    gitIgnore?: pulumi.Input<string>;
    /**
     * Git URL of the repository.
     */
    gitUrl?: pulumi.Input<string>;
    /**
     * Identifier of the repository.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Repository should be created with specified predefined license file.
     */
    license?: pulumi.Input<string>;
    /**
     * Name of the repository.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Path of the repository.
     */
    path?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Repository should be created with readme file.
     */
    readme?: pulumi.Input<boolean>;
    /**
     * Configuration for importing an existing repository from SCM provider.
     */
    sources?: pulumi.Input<pulumi.Input<inputs.platform.RepoSource>[]>;
    /**
     * Timestamp when the repository was last updated.
     */
    updated?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Repo resource.
 */
export interface RepoArgs {
    /**
     * Default branch of the repository (Applicate only for create).
     */
    defaultBranch?: pulumi.Input<string>;
    /**
     * Description of the repository.
     */
    description?: pulumi.Input<string>;
    /**
     * Repository should be created with specified predefined gitignore file.
     */
    gitIgnore?: pulumi.Input<string>;
    /**
     * Identifier of the repository.
     */
    identifier: pulumi.Input<string>;
    /**
     * Repository should be created with specified predefined license file.
     */
    license?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Repository should be created with readme file.
     */
    readme?: pulumi.Input<boolean>;
    /**
     * Configuration for importing an existing repository from SCM provider.
     */
    sources?: pulumi.Input<pulumi.Input<inputs.platform.RepoSource>[]>;
}
