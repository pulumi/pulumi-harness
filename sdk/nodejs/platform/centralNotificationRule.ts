// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating a Harness Notification Rule
 */
export class CentralNotificationRule extends pulumi.CustomResource {
    /**
     * Get an existing CentralNotificationRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CentralNotificationRuleState, opts?: pulumi.CustomResourceOptions): CentralNotificationRule {
        return new CentralNotificationRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/centralNotificationRule:CentralNotificationRule';

    /**
     * Returns true if the given object is an instance of CentralNotificationRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CentralNotificationRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CentralNotificationRule.__pulumiType;
    }

    /**
     * Account identifier associated with this notification channel.
     */
    declare public /*out*/ readonly account: pulumi.Output<string>;
    /**
     * Timestamp when the notification rule was created.
     */
    declare public /*out*/ readonly created: pulumi.Output<number>;
    declare public readonly customNotificationTemplateRef: pulumi.Output<outputs.platform.CentralNotificationRuleCustomNotificationTemplateRef | undefined>;
    declare public readonly identifier: pulumi.Output<string>;
    /**
     * Timestamp when the notification rule was last modified.
     */
    declare public /*out*/ readonly lastModified: pulumi.Output<number>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly notificationChannelRefs: pulumi.Output<string[]>;
    declare public readonly notificationConditions: pulumi.Output<outputs.platform.CentralNotificationRuleNotificationCondition[]>;
    declare public readonly org: pulumi.Output<string | undefined>;
    declare public readonly project: pulumi.Output<string>;
    declare public readonly status: pulumi.Output<string | undefined>;

    /**
     * Create a CentralNotificationRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CentralNotificationRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CentralNotificationRuleArgs | CentralNotificationRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CentralNotificationRuleState | undefined;
            resourceInputs["account"] = state?.account;
            resourceInputs["created"] = state?.created;
            resourceInputs["customNotificationTemplateRef"] = state?.customNotificationTemplateRef;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["lastModified"] = state?.lastModified;
            resourceInputs["name"] = state?.name;
            resourceInputs["notificationChannelRefs"] = state?.notificationChannelRefs;
            resourceInputs["notificationConditions"] = state?.notificationConditions;
            resourceInputs["org"] = state?.org;
            resourceInputs["project"] = state?.project;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as CentralNotificationRuleArgs | undefined;
            if (args?.identifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if (args?.notificationChannelRefs === undefined && !opts.urn) {
                throw new Error("Missing required property 'notificationChannelRefs'");
            }
            if (args?.notificationConditions === undefined && !opts.urn) {
                throw new Error("Missing required property 'notificationConditions'");
            }
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["customNotificationTemplateRef"] = args?.customNotificationTemplateRef;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["name"] = args?.name;
            resourceInputs["notificationChannelRefs"] = args?.notificationChannelRefs;
            resourceInputs["notificationConditions"] = args?.notificationConditions;
            resourceInputs["org"] = args?.org;
            resourceInputs["project"] = args?.project;
            resourceInputs["status"] = args?.status;
            resourceInputs["account"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["lastModified"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CentralNotificationRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CentralNotificationRule resources.
 */
export interface CentralNotificationRuleState {
    /**
     * Account identifier associated with this notification channel.
     */
    account?: pulumi.Input<string>;
    /**
     * Timestamp when the notification rule was created.
     */
    created?: pulumi.Input<number>;
    customNotificationTemplateRef?: pulumi.Input<inputs.platform.CentralNotificationRuleCustomNotificationTemplateRef>;
    identifier?: pulumi.Input<string>;
    /**
     * Timestamp when the notification rule was last modified.
     */
    lastModified?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    notificationChannelRefs?: pulumi.Input<pulumi.Input<string>[]>;
    notificationConditions?: pulumi.Input<pulumi.Input<inputs.platform.CentralNotificationRuleNotificationCondition>[]>;
    org?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CentralNotificationRule resource.
 */
export interface CentralNotificationRuleArgs {
    customNotificationTemplateRef?: pulumi.Input<inputs.platform.CentralNotificationRuleCustomNotificationTemplateRef>;
    identifier: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationChannelRefs: pulumi.Input<pulumi.Input<string>[]>;
    notificationConditions: pulumi.Input<pulumi.Input<inputs.platform.CentralNotificationRuleNotificationCondition>[]>;
    org?: pulumi.Input<string>;
    project: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}
