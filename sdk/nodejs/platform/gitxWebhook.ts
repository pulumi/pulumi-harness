// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for creating a Harness pipeline.
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import an Account level Webhook
 *
 * ```sh
 * $ pulumi import harness:platform/gitxWebhook:GitxWebhook example <webhook_identifier>
 * ```
 *
 * Import an Org level Webhook
 *
 * ```sh
 * $ pulumi import harness:platform/gitxWebhook:GitxWebhook example <webhook_identifier>/<org_id>/
 * ```
 *
 * Import a Project level Webhook
 *
 * ```sh
 * $ pulumi import harness:platform/gitxWebhook:GitxWebhook example <webhook_identifier>/<org_id>/<project_id>
 * ```
 */
export class GitxWebhook extends pulumi.CustomResource {
    /**
     * Get an existing GitxWebhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GitxWebhookState, opts?: pulumi.CustomResourceOptions): GitxWebhook {
        return new GitxWebhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/gitxWebhook:GitxWebhook';

    /**
     * Returns true if the given object is an instance of GitxWebhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GitxWebhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GitxWebhook.__pulumiType;
    }

    /**
     * ConnectorRef to be used to create Gitx webhook.
     */
    public readonly connectorRef!: pulumi.Output<string>;
    /**
     * Description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Folder Paths
     */
    public readonly folderPaths!: pulumi.Output<string[] | undefined>;
    /**
     * Unique identifier of the resource.
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * Flag to enable the webhook
     */
    public readonly isEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Unique identifier of the organization.
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the project.
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * Repo Identifier for Gitx webhook.
     */
    public readonly repoName!: pulumi.Output<string>;
    /**
     * Tags to associate with the resource.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a GitxWebhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GitxWebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GitxWebhookArgs | GitxWebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GitxWebhookState | undefined;
            resourceInputs["connectorRef"] = state ? state.connectorRef : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["folderPaths"] = state ? state.folderPaths : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["isEnabled"] = state ? state.isEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["repoName"] = state ? state.repoName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as GitxWebhookArgs | undefined;
            if ((!args || args.connectorRef === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorRef'");
            }
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.repoName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repoName'");
            }
            resourceInputs["connectorRef"] = args ? args.connectorRef : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["folderPaths"] = args ? args.folderPaths : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["isEnabled"] = args ? args.isEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["repoName"] = args ? args.repoName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GitxWebhook.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GitxWebhook resources.
 */
export interface GitxWebhookState {
    /**
     * ConnectorRef to be used to create Gitx webhook.
     */
    connectorRef?: pulumi.Input<string>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Folder Paths
     */
    folderPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Flag to enable the webhook
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Repo Identifier for Gitx webhook.
     */
    repoName?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a GitxWebhook resource.
 */
export interface GitxWebhookArgs {
    /**
     * ConnectorRef to be used to create Gitx webhook.
     */
    connectorRef: pulumi.Input<string>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Folder Paths
     */
    folderPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Flag to enable the webhook
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Repo Identifier for Gitx webhook.
     */
    repoName: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
