// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating a Harness Default Notification Template Set
 */
export class DefaultNotificationTemplateSet extends pulumi.CustomResource {
    /**
     * Get an existing DefaultNotificationTemplateSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultNotificationTemplateSetState, opts?: pulumi.CustomResourceOptions): DefaultNotificationTemplateSet {
        return new DefaultNotificationTemplateSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/defaultNotificationTemplateSet:DefaultNotificationTemplateSet';

    /**
     * Returns true if the given object is an instance of DefaultNotificationTemplateSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultNotificationTemplateSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultNotificationTemplateSet.__pulumiType;
    }

    /**
     * Timestamp when the default notification template set was created.
     */
    public /*out*/ readonly created!: pulumi.Output<number>;
    /**
     * Description for Default Notification Template Set
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Set of event-template configurations
     */
    public readonly eventTemplateConfigurationSets!: pulumi.Output<outputs.platform.DefaultNotificationTemplateSetEventTemplateConfigurationSet[]>;
    /**
     * Identifier of Default Notification Template Set
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * Timestamp when the default notification template set was last modified.
     */
    public /*out*/ readonly lastModified!: pulumi.Output<number>;
    /**
     * Name of Default Notification Template Set
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Type of channel (e.g. SLACK, EMAIL, etc.)
     */
    public readonly notificationChannelType!: pulumi.Output<string>;
    /**
     * Type of the entity (e.g. PIPELINE, SERVICE, etc.)
     */
    public readonly notificationEntity!: pulumi.Output<string>;
    /**
     * Key-value tags
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a DefaultNotificationTemplateSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DefaultNotificationTemplateSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultNotificationTemplateSetArgs | DefaultNotificationTemplateSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultNotificationTemplateSetState | undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["eventTemplateConfigurationSets"] = state ? state.eventTemplateConfigurationSets : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["lastModified"] = state ? state.lastModified : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationChannelType"] = state ? state.notificationChannelType : undefined;
            resourceInputs["notificationEntity"] = state ? state.notificationEntity : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as DefaultNotificationTemplateSetArgs | undefined;
            if ((!args || args.eventTemplateConfigurationSets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventTemplateConfigurationSets'");
            }
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.notificationChannelType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notificationChannelType'");
            }
            if ((!args || args.notificationEntity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notificationEntity'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eventTemplateConfigurationSets"] = args ? args.eventTemplateConfigurationSets : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationChannelType"] = args ? args.notificationChannelType : undefined;
            resourceInputs["notificationEntity"] = args ? args.notificationEntity : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["lastModified"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultNotificationTemplateSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DefaultNotificationTemplateSet resources.
 */
export interface DefaultNotificationTemplateSetState {
    /**
     * Timestamp when the default notification template set was created.
     */
    created?: pulumi.Input<number>;
    /**
     * Description for Default Notification Template Set
     */
    description?: pulumi.Input<string>;
    /**
     * Set of event-template configurations
     */
    eventTemplateConfigurationSets?: pulumi.Input<pulumi.Input<inputs.platform.DefaultNotificationTemplateSetEventTemplateConfigurationSet>[]>;
    /**
     * Identifier of Default Notification Template Set
     */
    identifier?: pulumi.Input<string>;
    /**
     * Timestamp when the default notification template set was last modified.
     */
    lastModified?: pulumi.Input<number>;
    /**
     * Name of Default Notification Template Set
     */
    name?: pulumi.Input<string>;
    /**
     * Type of channel (e.g. SLACK, EMAIL, etc.)
     */
    notificationChannelType?: pulumi.Input<string>;
    /**
     * Type of the entity (e.g. PIPELINE, SERVICE, etc.)
     */
    notificationEntity?: pulumi.Input<string>;
    /**
     * Key-value tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a DefaultNotificationTemplateSet resource.
 */
export interface DefaultNotificationTemplateSetArgs {
    /**
     * Description for Default Notification Template Set
     */
    description?: pulumi.Input<string>;
    /**
     * Set of event-template configurations
     */
    eventTemplateConfigurationSets: pulumi.Input<pulumi.Input<inputs.platform.DefaultNotificationTemplateSetEventTemplateConfigurationSet>[]>;
    /**
     * Identifier of Default Notification Template Set
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of Default Notification Template Set
     */
    name?: pulumi.Input<string>;
    /**
     * Type of channel (e.g. SLACK, EMAIL, etc.)
     */
    notificationChannelType: pulumi.Input<string>;
    /**
     * Type of the entity (e.g. PIPELINE, SERVICE, etc.)
     */
    notificationEntity: pulumi.Input<string>;
    /**
     * Key-value tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
