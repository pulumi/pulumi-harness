// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Datasource for looking up a Custom Health source connector.
 */
export function getConnectorCustomhealthsource(args: GetConnectorCustomhealthsourceArgs, opts?: pulumi.InvokeOptions): Promise<GetConnectorCustomhealthsourceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:platform/getConnectorCustomhealthsource:getConnectorCustomhealthsource", {
        "identifier": args.identifier,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getConnectorCustomhealthsource.
 */
export interface GetConnectorCustomhealthsourceArgs {
    /**
     * Unique identifier of the resource.
     */
    identifier: string;
    /**
     * Name of the resource.
     */
    name?: string;
    /**
     * Unique identifier of the organization.
     */
    orgId?: string;
    /**
     * Unique identifier of the project.
     */
    projectId?: string;
}

/**
 * A collection of values returned by getConnectorCustomhealthsource.
 */
export interface GetConnectorCustomhealthsourceResult {
    /**
     * Tags to filter delegates for connection.
     */
    readonly delegateSelectors: string[];
    /**
     * Description of the resource.
     */
    readonly description: string;
    /**
     * Headers.
     */
    readonly headers: outputs.platform.GetConnectorCustomhealthsourceHeader[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Unique identifier of the resource.
     */
    readonly identifier: string;
    /**
     * HTTP Verb Method for the API Call
     */
    readonly method: string;
    /**
     * Name of the resource.
     */
    readonly name?: string;
    /**
     * Unique identifier of the organization.
     */
    readonly orgId?: string;
    /**
     * Parameters.
     */
    readonly params: outputs.platform.GetConnectorCustomhealthsourceParam[];
    /**
     * Unique identifier of the project.
     */
    readonly projectId?: string;
    /**
     * Tags to associate with the resource.
     */
    readonly tags: string[];
    /**
     * URL of the Custom Health source server.
     */
    readonly url: string;
    /**
     * Body to be sent with the API Call
     */
    readonly validationBody: string;
    /**
     * Path to be added to the base URL for the API Call
     */
    readonly validationPath: string;
}
/**
 * Datasource for looking up a Custom Health source connector.
 */
export function getConnectorCustomhealthsourceOutput(args: GetConnectorCustomhealthsourceOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetConnectorCustomhealthsourceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:platform/getConnectorCustomhealthsource:getConnectorCustomhealthsource", {
        "identifier": args.identifier,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getConnectorCustomhealthsource.
 */
export interface GetConnectorCustomhealthsourceOutputArgs {
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
}
