// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating a Harness Feature Flag Target Group.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const target = new harness.platform.FeatureFlagTargetGroup("target", {
 *     orgId: "test",
 *     projectId: "test",
 *     identifier: "MY_FEATURE",
 *     environment: "MY_ENVIRONMENT",
 *     name: "MY_FEATURE",
 *     accountId: "MY_ACCOUNT_ID",
 *     includeds: ["target_id_1"],
 *     excludeds: ["target_id_2"],
 *     rules: {
 *         attribute: "MY_ATTRIBUTE",
 *         operator: "equal",
 *         value: "MY_VALUE",
 *     },
 * });
 * ```
 */
export class FeatureFlagTargetGroup extends pulumi.CustomResource {
    /**
     * Get an existing FeatureFlagTargetGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FeatureFlagTargetGroupState, opts?: pulumi.CustomResourceOptions): FeatureFlagTargetGroup {
        return new FeatureFlagTargetGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/featureFlagTargetGroup:FeatureFlagTargetGroup';

    /**
     * Returns true if the given object is an instance of FeatureFlagTargetGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FeatureFlagTargetGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FeatureFlagTargetGroup.__pulumiType;
    }

    /**
     * Account Identifier
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * Environment Identifier
     */
    declare public readonly environment: pulumi.Output<string>;
    /**
     * A list of targets to exclude from the target group
     */
    declare public readonly excludeds: pulumi.Output<string[]>;
    /**
     * The unique identifier of the feature flag target group.
     */
    declare public readonly identifier: pulumi.Output<string>;
    /**
     * A list of targets to include in the target group
     */
    declare public readonly includeds: pulumi.Output<string[]>;
    /**
     * The name of the feature flag target group.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Organization Identifier
     */
    declare public readonly orgId: pulumi.Output<string>;
    /**
     * Project Identifier
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The list of rules used to include targets in the target group.
     */
    declare public readonly rules: pulumi.Output<outputs.platform.FeatureFlagTargetGroupRule[]>;

    /**
     * Create a FeatureFlagTargetGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FeatureFlagTargetGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FeatureFlagTargetGroupArgs | FeatureFlagTargetGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FeatureFlagTargetGroupState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["excludeds"] = state?.excludeds;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["includeds"] = state?.includeds;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["rules"] = state?.rules;
        } else {
            const args = argsOrState as FeatureFlagTargetGroupArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.environment === undefined && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if (args?.identifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if (args?.orgId === undefined && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["excludeds"] = args?.excludeds;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["includeds"] = args?.includeds;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["rules"] = args?.rules;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FeatureFlagTargetGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FeatureFlagTargetGroup resources.
 */
export interface FeatureFlagTargetGroupState {
    /**
     * Account Identifier
     */
    accountId?: pulumi.Input<string>;
    /**
     * Environment Identifier
     */
    environment?: pulumi.Input<string>;
    /**
     * A list of targets to exclude from the target group
     */
    excludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique identifier of the feature flag target group.
     */
    identifier?: pulumi.Input<string>;
    /**
     * A list of targets to include in the target group
     */
    includeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the feature flag target group.
     */
    name?: pulumi.Input<string>;
    /**
     * Organization Identifier
     */
    orgId?: pulumi.Input<string>;
    /**
     * Project Identifier
     */
    projectId?: pulumi.Input<string>;
    /**
     * The list of rules used to include targets in the target group.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.platform.FeatureFlagTargetGroupRule>[]>;
}

/**
 * The set of arguments for constructing a FeatureFlagTargetGroup resource.
 */
export interface FeatureFlagTargetGroupArgs {
    /**
     * Account Identifier
     */
    accountId: pulumi.Input<string>;
    /**
     * Environment Identifier
     */
    environment: pulumi.Input<string>;
    /**
     * A list of targets to exclude from the target group
     */
    excludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique identifier of the feature flag target group.
     */
    identifier: pulumi.Input<string>;
    /**
     * A list of targets to include in the target group
     */
    includeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the feature flag target group.
     */
    name?: pulumi.Input<string>;
    /**
     * Organization Identifier
     */
    orgId: pulumi.Input<string>;
    /**
     * Project Identifier
     */
    projectId: pulumi.Input<string>;
    /**
     * The list of rules used to include targets in the target group.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.platform.FeatureFlagTargetGroupRule>[]>;
}
