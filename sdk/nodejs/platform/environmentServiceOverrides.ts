// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for creating a Harness environment service overrides.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = new harness.platform.EnvironmentServiceOverrides("example", {
 *     orgId: "orgIdentifier",
 *     projectId: "projectIdentifier",
 *     envId: "environmentIdentifier",
 *     serviceId: "serviceIdentifier",
 *     yaml: `serviceOverrides:
 *   environmentRef: environmentIdentifier
 *   serviceRef: serviceIdentifier
 *   variables:
 *    - name: asda
 *      type: String
 *      value: asddad
 *   manifests:
 *      - manifest:
 *          identifier: manifestEnv
 *          type: Values
 *          spec:
 *            store:
 *              type: Git
 *              spec:
 *                connectorRef: <+input>
 *                gitFetchType: Branch
 *                paths:
 *                  - file1
 *                repoName: <+input>
 *                branch: master
 *   configFiles:
 *      - configFile:
 *          identifier: configFileEnv
 *          spec:
 *            store:
 *              type: Harness
 *              spec:
 *                files:
 *                  - account:/Add-ons/svcOverrideTest
 *                secretFiles: []
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import list of account level service overrides using the env id associated with them
 *
 * ```sh
 * $ pulumi import harness:platform/environmentServiceOverrides:EnvironmentServiceOverrides example <env_id>
 * ```
 *
 * Import list of org level service overrides using the env id associated with them
 *
 * ```sh
 * $ pulumi import harness:platform/environmentServiceOverrides:EnvironmentServiceOverrides example <org_id>/<env_id>
 * ```
 *
 * Import list of project level service overrides using the env id associated with them
 *
 * ```sh
 * $ pulumi import harness:platform/environmentServiceOverrides:EnvironmentServiceOverrides example <org_id>/<project_id>/<env_id>
 * ```
 */
export class EnvironmentServiceOverrides extends pulumi.CustomResource {
    /**
     * Get an existing EnvironmentServiceOverrides resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnvironmentServiceOverridesState, opts?: pulumi.CustomResourceOptions): EnvironmentServiceOverrides {
        return new EnvironmentServiceOverrides(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/environmentServiceOverrides:EnvironmentServiceOverrides';

    /**
     * Returns true if the given object is an instance of EnvironmentServiceOverrides.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EnvironmentServiceOverrides {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EnvironmentServiceOverrides.__pulumiType;
    }

    /**
     * The env ID to which the overrides associated.
     */
    declare public readonly envId: pulumi.Output<string>;
    /**
     * identifier of the service overrides.
     */
    declare public readonly identifier: pulumi.Output<string>;
    /**
     * Unique identifier of the organization.
     */
    declare public readonly orgId: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the project.
     */
    declare public readonly projectId: pulumi.Output<string | undefined>;
    /**
     * The service ID to which the overrides applies.
     */
    declare public readonly serviceId: pulumi.Output<string>;
    /**
     * Environment Service Overrides YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
     */
    declare public readonly yaml: pulumi.Output<string>;

    /**
     * Create a EnvironmentServiceOverrides resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvironmentServiceOverridesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnvironmentServiceOverridesArgs | EnvironmentServiceOverridesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnvironmentServiceOverridesState | undefined;
            resourceInputs["envId"] = state?.envId;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["serviceId"] = state?.serviceId;
            resourceInputs["yaml"] = state?.yaml;
        } else {
            const args = argsOrState as EnvironmentServiceOverridesArgs | undefined;
            if (args?.envId === undefined && !opts.urn) {
                throw new Error("Missing required property 'envId'");
            }
            if (args?.serviceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            if (args?.yaml === undefined && !opts.urn) {
                throw new Error("Missing required property 'yaml'");
            }
            resourceInputs["envId"] = args?.envId;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["serviceId"] = args?.serviceId;
            resourceInputs["yaml"] = args?.yaml;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EnvironmentServiceOverrides.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EnvironmentServiceOverrides resources.
 */
export interface EnvironmentServiceOverridesState {
    /**
     * The env ID to which the overrides associated.
     */
    envId?: pulumi.Input<string>;
    /**
     * identifier of the service overrides.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The service ID to which the overrides applies.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * Environment Service Overrides YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
     */
    yaml?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EnvironmentServiceOverrides resource.
 */
export interface EnvironmentServiceOverridesArgs {
    /**
     * The env ID to which the overrides associated.
     */
    envId: pulumi.Input<string>;
    /**
     * identifier of the service overrides.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The service ID to which the overrides applies.
     */
    serviceId: pulumi.Input<string>;
    /**
     * Environment Service Overrides YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
     */
    yaml: pulumi.Input<string>;
}
