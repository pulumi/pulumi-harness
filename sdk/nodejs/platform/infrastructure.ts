// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating a Harness Infrastructure.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = new harness.platform.Infrastructure("example", {
 *     identifier: "identifier",
 *     name: "name",
 *     orgId: "orgIdentifer",
 *     projectId: "projectIdentifier",
 *     envId: "environmentIdentifier",
 *     type: "KubernetesDirect",
 *     deploymentType: "Kubernetes",
 *     gitDetails: {
 *         branchName: "branchName",
 *         commitMessage: "commitMessage",
 *         filePath: "filePath",
 *         connectorRef: "connectorRef",
 *         storeType: "REMOTE",
 *         repoName: "repoName",
 *     },
 *     yaml: `infrastructureDefinition:
 *  name: name
 *  identifier: identifier
 *  description: ""
 *  tags:
 *    asda: ""
 *  orgIdentifier: orgIdentifer
 *  projectIdentifier: projectIdentifier
 *  environmentRef: environmentIdentifier
 *  deploymentType: Kubernetes
 *  type: KubernetesDirect
 *  spec:
 *   connectorRef: account.gfgf
 *   namespace: asdasdsa
 *   releaseName: release-<+INFRA_KEY>
 *   allowSimultaneousDeployments: false
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import account level infrastructure
 *
 * ```sh
 * $ pulumi import harness:platform/infrastructure:Infrastructure example <env_id>/<infrastructure_id>
 * ```
 *
 * Import org level infrastructure
 *
 * ```sh
 * $ pulumi import harness:platform/infrastructure:Infrastructure example <org_id>/<env_id>/<infrastructure_id>
 * ```
 *
 * Import project level infrastructure
 *
 * ```sh
 * $ pulumi import harness:platform/infrastructure:Infrastructure example <org_id>/<project_id>/<env_id>/<infrastructure_id>
 * ```
 */
export class Infrastructure extends pulumi.CustomResource {
    /**
     * Get an existing Infrastructure resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InfrastructureState, opts?: pulumi.CustomResourceOptions): Infrastructure {
        return new Infrastructure(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/infrastructure:Infrastructure';

    /**
     * Returns true if the given object is an instance of Infrastructure.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Infrastructure {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Infrastructure.__pulumiType;
    }

    /**
     * Infrastructure deployment type. Valid values are Kubernetes, NativeHelm, Ssh, WinRm, ServerlessAwsLambda, AzureWebApp, Custom, ECS.
     */
    declare public readonly deploymentType: pulumi.Output<string>;
    /**
     * Description of the resource.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Environment Identifier.
     */
    declare public readonly envId: pulumi.Output<string>;
    /**
     * Enable this flag for force deletion of infrastructure
     */
    declare public readonly forceDelete: pulumi.Output<boolean>;
    /**
     * Contains parameters related to creating an Entity for Git Experience.
     */
    declare public readonly gitDetails: pulumi.Output<outputs.platform.InfrastructureGitDetails>;
    /**
     * Unique identifier of the resource.
     */
    declare public readonly identifier: pulumi.Output<string>;
    /**
     * Name of the resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Unique identifier of the organization.
     */
    declare public readonly orgId: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the project.
     */
    declare public readonly projectId: pulumi.Output<string | undefined>;
    /**
     * Tags to associate with the resource.
     */
    declare public readonly tags: pulumi.Output<string[]>;
    /**
     * Type of Infrastructure. Valid values are KubernetesDirect, KubernetesGcp, ServerlessAwsLambda, Pdc, KubernetesAzure, SshWinRmAzure, SshWinRmAws, AzureWebApp, ECS, GitOps, CustomDeployment, TAS, KubernetesRancher, AWS_SAM.
     */
    declare public readonly type: pulumi.Output<string | undefined>;
    /**
     * Infrastructure YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
     */
    declare public readonly yaml: pulumi.Output<string | undefined>;

    /**
     * Create a Infrastructure resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InfrastructureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InfrastructureArgs | InfrastructureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InfrastructureState | undefined;
            resourceInputs["deploymentType"] = state?.deploymentType;
            resourceInputs["description"] = state?.description;
            resourceInputs["envId"] = state?.envId;
            resourceInputs["forceDelete"] = state?.forceDelete;
            resourceInputs["gitDetails"] = state?.gitDetails;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["type"] = state?.type;
            resourceInputs["yaml"] = state?.yaml;
        } else {
            const args = argsOrState as InfrastructureArgs | undefined;
            if (args?.envId === undefined && !opts.urn) {
                throw new Error("Missing required property 'envId'");
            }
            if (args?.identifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            resourceInputs["deploymentType"] = args?.deploymentType;
            resourceInputs["description"] = args?.description;
            resourceInputs["envId"] = args?.envId;
            resourceInputs["forceDelete"] = args?.forceDelete;
            resourceInputs["gitDetails"] = args?.gitDetails;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["type"] = args?.type;
            resourceInputs["yaml"] = args?.yaml;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Infrastructure.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Infrastructure resources.
 */
export interface InfrastructureState {
    /**
     * Infrastructure deployment type. Valid values are Kubernetes, NativeHelm, Ssh, WinRm, ServerlessAwsLambda, AzureWebApp, Custom, ECS.
     */
    deploymentType?: pulumi.Input<string>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Environment Identifier.
     */
    envId?: pulumi.Input<string>;
    /**
     * Enable this flag for force deletion of infrastructure
     */
    forceDelete?: pulumi.Input<boolean>;
    /**
     * Contains parameters related to creating an Entity for Git Experience.
     */
    gitDetails?: pulumi.Input<inputs.platform.InfrastructureGitDetails>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of Infrastructure. Valid values are KubernetesDirect, KubernetesGcp, ServerlessAwsLambda, Pdc, KubernetesAzure, SshWinRmAzure, SshWinRmAws, AzureWebApp, ECS, GitOps, CustomDeployment, TAS, KubernetesRancher, AWS_SAM.
     */
    type?: pulumi.Input<string>;
    /**
     * Infrastructure YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
     */
    yaml?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Infrastructure resource.
 */
export interface InfrastructureArgs {
    /**
     * Infrastructure deployment type. Valid values are Kubernetes, NativeHelm, Ssh, WinRm, ServerlessAwsLambda, AzureWebApp, Custom, ECS.
     */
    deploymentType?: pulumi.Input<string>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Environment Identifier.
     */
    envId: pulumi.Input<string>;
    /**
     * Enable this flag for force deletion of infrastructure
     */
    forceDelete?: pulumi.Input<boolean>;
    /**
     * Contains parameters related to creating an Entity for Git Experience.
     */
    gitDetails?: pulumi.Input<inputs.platform.InfrastructureGitDetails>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of Infrastructure. Valid values are KubernetesDirect, KubernetesGcp, ServerlessAwsLambda, Pdc, KubernetesAzure, SshWinRmAzure, SshWinRmAws, AzureWebApp, ECS, GitOps, CustomDeployment, TAS, KubernetesRancher, AWS_SAM.
     */
    type?: pulumi.Input<string>;
    /**
     * Infrastructure YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
     */
    yaml?: pulumi.Input<string>;
}
