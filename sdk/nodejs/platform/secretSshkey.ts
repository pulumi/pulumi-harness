// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating an ssh key type secret.
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import account level secret sshkey
 *
 * ```sh
 * $ pulumi import harness:platform/secretSshkey:SecretSshkey example <secret_sshkey_id>
 * ```
 *
 * Import org level secret sshkey
 *
 * ```sh
 * $ pulumi import harness:platform/secretSshkey:SecretSshkey example <ord_id>/<secret_sshkey_id>
 * ```
 *
 * Import project level secret sshkey
 *
 * ```sh
 * $ pulumi import harness:platform/secretSshkey:SecretSshkey example <org_id>/<project_id>/<secret_sshkey_id>
 * ```
 */
export class SecretSshkey extends pulumi.CustomResource {
    /**
     * Get an existing SecretSshkey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretSshkeyState, opts?: pulumi.CustomResourceOptions): SecretSshkey {
        return new SecretSshkey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/secretSshkey:SecretSshkey';

    /**
     * Returns true if the given object is an instance of SecretSshkey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretSshkey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretSshkey.__pulumiType;
    }

    /**
     * Description of the resource.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the resource.
     */
    declare public readonly identifier: pulumi.Output<string>;
    /**
     * Kerberos authentication scheme
     */
    declare public readonly kerberos: pulumi.Output<outputs.platform.SecretSshkeyKerberos | undefined>;
    /**
     * Name of the resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Unique identifier of the organization.
     */
    declare public readonly orgId: pulumi.Output<string | undefined>;
    /**
     * SSH port
     */
    declare public readonly port: pulumi.Output<number | undefined>;
    /**
     * Unique identifier of the project.
     */
    declare public readonly projectId: pulumi.Output<string | undefined>;
    /**
     * Kerberos authentication scheme
     */
    declare public readonly ssh: pulumi.Output<outputs.platform.SecretSshkeySsh | undefined>;
    /**
     * Tags to associate with the resource.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;

    /**
     * Create a SecretSshkey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretSshkeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretSshkeyArgs | SecretSshkeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretSshkeyState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["kerberos"] = state?.kerberos;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["port"] = state?.port;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["ssh"] = state?.ssh;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as SecretSshkeyArgs | undefined;
            if (args?.identifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["kerberos"] = args?.kerberos;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["port"] = args?.port;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["ssh"] = args?.ssh;
            resourceInputs["tags"] = args?.tags;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretSshkey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretSshkey resources.
 */
export interface SecretSshkeyState {
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Kerberos authentication scheme
     */
    kerberos?: pulumi.Input<inputs.platform.SecretSshkeyKerberos>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * SSH port
     */
    port?: pulumi.Input<number>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Kerberos authentication scheme
     */
    ssh?: pulumi.Input<inputs.platform.SecretSshkeySsh>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SecretSshkey resource.
 */
export interface SecretSshkeyArgs {
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Kerberos authentication scheme
     */
    kerberos?: pulumi.Input<inputs.platform.SecretSshkeyKerberos>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * SSH port
     */
    port?: pulumi.Input<number>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Kerberos authentication scheme
     */
    ssh?: pulumi.Input<inputs.platform.SecretSshkeySsh>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
