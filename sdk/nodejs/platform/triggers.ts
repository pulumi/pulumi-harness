// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for creating triggers in Harness.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = new harness.platform.Triggers("example", {
 *     identifier: "identifier",
 *     orgId: "orgIdentifer",
 *     projectId: "projectIdentifier",
 *     name: "name",
 *     targetId: "pipelineIdentifier",
 *     yaml: `trigger:
 *   name: name
 *   identifier: identifier
 *   enabled: true
 *   description: ""
 *   tags: {}
 *   projectIdentifier: projectIdentifier
 *   orgIdentifier: orgIdentifer
 *   pipelineIdentifier: pipelineIdentifier
 *   source:
 *     type: Webhook
 *     spec:
 *       type: Github
 *       spec:
 *         type: Push
 *         spec:
 *           connectorRef: account.TestAccResourceConnectorGithub_Ssh_IZBeG
 *           autoAbortPreviousExecutions: false
 *           payloadConditions:
 *           - key: changedFiles
 *             operator: Equals
 *             value: value
 *           - key: targetBranch
 *             operator: Equals
 *             value: value
 *           headerConditions: []
 *           repoName: repoName
 *           actions: []
 *   inputYaml: |
 *     pipeline: {}\\n
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import trigger
 *
 * ```sh
 * $ pulumi import harness:platform/triggers:Triggers example <org_id>/<project_id>/<target_id>/<triggers_id>
 * ```
 */
export class Triggers extends pulumi.CustomResource {
    /**
     * Get an existing Triggers resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TriggersState, opts?: pulumi.CustomResourceOptions): Triggers {
        return new Triggers(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/triggers:Triggers';

    /**
     * Returns true if the given object is an instance of Triggers.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Triggers {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Triggers.__pulumiType;
    }

    /**
     * Description of the resource.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the resource.
     */
    declare public readonly identifier: pulumi.Output<string>;
    /**
     * if-Match
     */
    declare public readonly ifMatch: pulumi.Output<string | undefined>;
    /**
     * ignore error default false
     */
    declare public readonly ignoreError: pulumi.Output<boolean | undefined>;
    /**
     * Name of the resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Unique identifier of the organization.
     */
    declare public readonly orgId: pulumi.Output<string>;
    /**
     * Unique identifier of the project.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * Tags to associate with the resource.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * Identifier of the target pipeline
     */
    declare public readonly targetId: pulumi.Output<string>;
    /**
     * trigger yaml. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
     */
    declare public readonly yaml: pulumi.Output<string>;

    /**
     * Create a Triggers resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TriggersArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TriggersArgs | TriggersState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TriggersState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["ifMatch"] = state?.ifMatch;
            resourceInputs["ignoreError"] = state?.ignoreError;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["targetId"] = state?.targetId;
            resourceInputs["yaml"] = state?.yaml;
        } else {
            const args = argsOrState as TriggersArgs | undefined;
            if (args?.identifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if (args?.orgId === undefined && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.targetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetId'");
            }
            if (args?.yaml === undefined && !opts.urn) {
                throw new Error("Missing required property 'yaml'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["ifMatch"] = args?.ifMatch;
            resourceInputs["ignoreError"] = args?.ignoreError;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["targetId"] = args?.targetId;
            resourceInputs["yaml"] = args?.yaml;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Triggers.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Triggers resources.
 */
export interface TriggersState {
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * if-Match
     */
    ifMatch?: pulumi.Input<string>;
    /**
     * ignore error default false
     */
    ignoreError?: pulumi.Input<boolean>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier of the target pipeline
     */
    targetId?: pulumi.Input<string>;
    /**
     * trigger yaml. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
     */
    yaml?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Triggers resource.
 */
export interface TriggersArgs {
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * if-Match
     */
    ifMatch?: pulumi.Input<string>;
    /**
     * ignore error default false
     */
    ignoreError?: pulumi.Input<boolean>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier of the target pipeline
     */
    targetId: pulumi.Input<string>;
    /**
     * trigger yaml. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
     */
    yaml: pulumi.Input<string>;
}
