// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for creating a HashiCorp Vault Secret Manager connector.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const awsAuth = new harness.platform.VaultConnector("aws_auth", {
 *     identifier: "identifier",
 *     name: "name",
 *     description: "test",
 *     tags: ["foo:bar"],
 *     awsRegion: "aws_region",
 *     basePath: "base_path",
 *     accessType: "AWS_IAM",
 *     "default": false,
 *     xvaultAwsIamServerId: `account.${test.id}`,
 *     readOnly: true,
 *     renewalIntervalMinutes: 60,
 *     secretEngineManuallyConfigured: true,
 *     secretEngineName: "secret_engine_name",
 *     secretEngineVersion: 2,
 *     vaultAwsIamRole: "vault_aws_iam_role",
 *     useAwsIam: true,
 *     useK8sAuth: false,
 *     useVaultAgent: false,
 *     delegateSelectors: ["harness-delegate"],
 *     vaultUrl: "https://vault_url.com",
 *     useJwtAuth: false,
 * });
 * const appRole = new harness.platform.VaultConnector("app_role", {
 *     identifier: "identifier",
 *     name: "name",
 *     description: "test",
 *     tags: ["foo:bar"],
 *     appRoleId: "app_role_id",
 *     basePath: "base_path",
 *     accessType: "APP_ROLE",
 *     "default": false,
 *     secretId: `account.${test.id}`,
 *     readOnly: true,
 *     renewalIntervalMinutes: 60,
 *     secretEngineManuallyConfigured: true,
 *     secretEngineName: "secret_engine_name",
 *     secretEngineVersion: 2,
 *     useAwsIam: false,
 *     useK8sAuth: false,
 *     useVaultAgent: false,
 *     renewAppRoleToken: true,
 *     delegateSelectors: ["harness-delegate"],
 *     vaultUrl: "https://vault_url.com",
 *     useJwtAuth: false,
 * });
 * const k8sAuth = new harness.platform.VaultConnector("k8s_auth", {
 *     identifier: "identifier",
 *     name: "name",
 *     description: "test",
 *     tags: ["foo:bar"],
 *     authToken: `account.${test.id}`,
 *     basePath: "base_path",
 *     accessType: "K8s_AUTH",
 *     "default": false,
 *     k8sAuthEndpoint: "k8s_auth_endpoint",
 *     namespace: "namespace",
 *     readOnly: true,
 *     renewalIntervalMinutes: 10,
 *     secretEngineManuallyConfigured: true,
 *     secretEngineName: "secret_engine_name",
 *     secretEngineVersion: 2,
 *     serviceAccountTokenPath: "service_account_token_path",
 *     useAwsIam: false,
 *     useK8sAuth: true,
 *     useVaultAgent: false,
 *     vaultK8sAuthRole: "vault_k8s_auth_role",
 *     vaultAwsIamRole: "vault_aws_iam_role",
 *     delegateSelectors: ["harness-delegate"],
 *     vaultUrl: "https://vault_url.com",
 *     useJwtAuth: false,
 * });
 * const vaultAgent = new harness.platform.VaultConnector("vault_agent", {
 *     identifier: "identifier",
 *     name: "name",
 *     description: "test",
 *     tags: ["foo:bar"],
 *     authToken: `account.${test.id}`,
 *     basePath: "base_path",
 *     accessType: "VAULT_AGENT",
 *     "default": false,
 *     namespace: "namespace",
 *     readOnly: true,
 *     renewalIntervalMinutes: 10,
 *     secretEngineManuallyConfigured: true,
 *     secretEngineName: "secret_engine_name",
 *     secretEngineVersion: 2,
 *     useAwsIam: false,
 *     useK8sAuth: false,
 *     useVaultAgent: true,
 *     sinkPath: "sink_path",
 *     delegateSelectors: ["harness-delegate"],
 *     vaultUrl: "https://vault_url.com",
 *     useJwtAuth: false,
 * });
 * const token = new harness.platform.VaultConnector("token", {
 *     identifier: "identifier",
 *     name: "name",
 *     description: "test",
 *     tags: ["foo:bar"],
 *     authToken: `account.${test.id}`,
 *     basePath: "base_path",
 *     accessType: "TOKEN",
 *     "default": false,
 *     namespace: "namespace",
 *     readOnly: true,
 *     renewalIntervalMinutes: 10,
 *     secretEngineManuallyConfigured: true,
 *     secretEngineName: "secret_engine_name",
 *     secretEngineVersion: 2,
 *     useAwsIam: false,
 *     useK8sAuth: false,
 *     vaultUrl: "https://vault_url.com",
 *     useJwtAuth: false,
 * });
 * const jwt = new harness.platform.VaultConnector("jwt", {
 *     identifier: "identifier",
 *     name: "name",
 *     description: "test",
 *     tags: ["foo:bar"],
 *     basePath: "base_path",
 *     accessType: "JWT",
 *     "default": false,
 *     readOnly: true,
 *     renewalIntervalMinutes: 60,
 *     secretEngineManuallyConfigured: true,
 *     secretEngineName: "secret_engine_name",
 *     secretEngineVersion: 2,
 *     useAwsIam: false,
 *     useK8sAuth: false,
 *     useVaultAgent: false,
 *     renewAppRoleToken: false,
 *     delegateSelectors: ["harness-delegate"],
 *     vaultUrl: "https://vault_url.com",
 *     useJwtAuth: true,
 *     vaultJwtAuthRole: "vault_jwt_auth_role",
 *     vaultJwtAuthPath: "vault_jwt_auth_path",
 *     executeOnDelegate: true,
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import account level vault connector
 *
 * ```sh
 * $ pulumi import harness:platform/vaultConnector:VaultConnector example <connector_id>
 * ```
 *
 * Import org level vault connector
 *
 * ```sh
 * $ pulumi import harness:platform/vaultConnector:VaultConnector example <ord_id>/<connector_id>
 * ```
 *
 * Import project level vault connector
 *
 * ```sh
 * $ pulumi import harness:platform/vaultConnector:VaultConnector example <org_id>/<project_id>/<connector_id>
 * ```
 */
export class VaultConnector extends pulumi.CustomResource {
    /**
     * Get an existing VaultConnector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VaultConnectorState, opts?: pulumi.CustomResourceOptions): VaultConnector {
        return new VaultConnector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/vaultConnector:VaultConnector';

    /**
     * Returns true if the given object is an instance of VaultConnector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VaultConnector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VaultConnector.__pulumiType;
    }

    /**
     * Access type.
     */
    declare public readonly accessType: pulumi.Output<string | undefined>;
    /**
     * ID of App Role.
     */
    declare public readonly appRoleId: pulumi.Output<string | undefined>;
    /**
     * Authentication token for Vault.
     */
    declare public readonly authToken: pulumi.Output<string>;
    /**
     * AWS region where the AWS IAM authentication will happen.
     */
    declare public readonly awsRegion: pulumi.Output<string | undefined>;
    /**
     * Location of the Vault directory where the secret will be stored.
     */
    declare public readonly basePath: pulumi.Output<string | undefined>;
    /**
     * Is default or not.
     */
    declare public readonly default: pulumi.Output<boolean | undefined>;
    /**
     * List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.
     */
    declare public readonly delegateSelectors: pulumi.Output<string[] | undefined>;
    /**
     * Description of the resource.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Execute on delegate or not.
     */
    declare public readonly executeOnDelegate: pulumi.Output<boolean | undefined>;
    /**
     * Unique identifier of the resource.
     */
    declare public readonly identifier: pulumi.Output<string>;
    /**
     * Is default or not.
     */
    declare public readonly isDefault: pulumi.Output<boolean | undefined>;
    /**
     * Read only or not.
     */
    declare public readonly isReadOnly: pulumi.Output<boolean | undefined>;
    /**
     * The path where Kubernetes Auth is enabled in Vault.
     */
    declare public readonly k8sAuthEndpoint: pulumi.Output<string | undefined>;
    /**
     * Name of the resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Vault namespace where the Secret will be created.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the organization.
     */
    declare public readonly orgId: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the project.
     */
    declare public readonly projectId: pulumi.Output<string | undefined>;
    /**
     * Read only.
     */
    declare public readonly readOnly: pulumi.Output<boolean | undefined>;
    /**
     * Boolean value to indicate if AppRole token renewal is enabled or not.
     */
    declare public readonly renewAppRoleToken: pulumi.Output<boolean>;
    /**
     * The time interval for the token renewal.
     */
    declare public readonly renewalIntervalMinutes: pulumi.Output<number>;
    /**
     * Manually entered Secret Engine.
     */
    declare public readonly secretEngineManuallyConfigured: pulumi.Output<boolean | undefined>;
    /**
     * Name of the Secret Engine.
     */
    declare public readonly secretEngineName: pulumi.Output<string | undefined>;
    /**
     * Version of Secret Engine.
     */
    declare public readonly secretEngineVersion: pulumi.Output<number | undefined>;
    /**
     * ID of the Secret.
     */
    declare public readonly secretId: pulumi.Output<string | undefined>;
    /**
     * The Service Account token path in the K8s pod where the token is mounted.
     */
    declare public readonly serviceAccountTokenPath: pulumi.Output<string | undefined>;
    /**
     * The location from which the authentication token should be read.
     */
    declare public readonly sinkPath: pulumi.Output<string | undefined>;
    /**
     * Tags to associate with the resource.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * Boolean value to indicate if AWS IAM is used for authentication.
     */
    declare public readonly useAwsIam: pulumi.Output<boolean | undefined>;
    /**
     * Boolean value to indicate if JWT is used for authentication.
     */
    declare public readonly useJwtAuth: pulumi.Output<boolean | undefined>;
    /**
     * Boolean value to indicate if K8s Auth is used for authentication.
     */
    declare public readonly useK8sAuth: pulumi.Output<boolean | undefined>;
    /**
     * Boolean value to indicate if Vault Agent is used for authentication.
     */
    declare public readonly useVaultAgent: pulumi.Output<boolean | undefined>;
    /**
     * The Vault role defined to bind to aws iam account/role being accessed.
     */
    declare public readonly vaultAwsIamRole: pulumi.Output<string | undefined>;
    /**
     * Custom path at with JWT auth in enabled for Vault
     */
    declare public readonly vaultJwtAuthPath: pulumi.Output<string | undefined>;
    /**
     * The Vault role defined with JWT auth type for accessing Vault as per policies binded.
     */
    declare public readonly vaultJwtAuthRole: pulumi.Output<string | undefined>;
    /**
     * The role where K8s Auth will happen.
     */
    declare public readonly vaultK8sAuthRole: pulumi.Output<string | undefined>;
    /**
     * URL of the HashiCorp Vault.
     */
    declare public readonly vaultUrl: pulumi.Output<string>;
    /**
     * The AWS IAM Header Server ID that has been configured for this AWS IAM instance.
     */
    declare public readonly xvaultAwsIamServerId: pulumi.Output<string | undefined>;

    /**
     * Create a VaultConnector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VaultConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VaultConnectorArgs | VaultConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VaultConnectorState | undefined;
            resourceInputs["accessType"] = state?.accessType;
            resourceInputs["appRoleId"] = state?.appRoleId;
            resourceInputs["authToken"] = state?.authToken;
            resourceInputs["awsRegion"] = state?.awsRegion;
            resourceInputs["basePath"] = state?.basePath;
            resourceInputs["default"] = state?.default;
            resourceInputs["delegateSelectors"] = state?.delegateSelectors;
            resourceInputs["description"] = state?.description;
            resourceInputs["executeOnDelegate"] = state?.executeOnDelegate;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["isDefault"] = state?.isDefault;
            resourceInputs["isReadOnly"] = state?.isReadOnly;
            resourceInputs["k8sAuthEndpoint"] = state?.k8sAuthEndpoint;
            resourceInputs["name"] = state?.name;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["readOnly"] = state?.readOnly;
            resourceInputs["renewAppRoleToken"] = state?.renewAppRoleToken;
            resourceInputs["renewalIntervalMinutes"] = state?.renewalIntervalMinutes;
            resourceInputs["secretEngineManuallyConfigured"] = state?.secretEngineManuallyConfigured;
            resourceInputs["secretEngineName"] = state?.secretEngineName;
            resourceInputs["secretEngineVersion"] = state?.secretEngineVersion;
            resourceInputs["secretId"] = state?.secretId;
            resourceInputs["serviceAccountTokenPath"] = state?.serviceAccountTokenPath;
            resourceInputs["sinkPath"] = state?.sinkPath;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["useAwsIam"] = state?.useAwsIam;
            resourceInputs["useJwtAuth"] = state?.useJwtAuth;
            resourceInputs["useK8sAuth"] = state?.useK8sAuth;
            resourceInputs["useVaultAgent"] = state?.useVaultAgent;
            resourceInputs["vaultAwsIamRole"] = state?.vaultAwsIamRole;
            resourceInputs["vaultJwtAuthPath"] = state?.vaultJwtAuthPath;
            resourceInputs["vaultJwtAuthRole"] = state?.vaultJwtAuthRole;
            resourceInputs["vaultK8sAuthRole"] = state?.vaultK8sAuthRole;
            resourceInputs["vaultUrl"] = state?.vaultUrl;
            resourceInputs["xvaultAwsIamServerId"] = state?.xvaultAwsIamServerId;
        } else {
            const args = argsOrState as VaultConnectorArgs | undefined;
            if (args?.identifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if (args?.renewalIntervalMinutes === undefined && !opts.urn) {
                throw new Error("Missing required property 'renewalIntervalMinutes'");
            }
            if (args?.vaultUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'vaultUrl'");
            }
            resourceInputs["accessType"] = args?.accessType;
            resourceInputs["appRoleId"] = args?.appRoleId;
            resourceInputs["authToken"] = args?.authToken;
            resourceInputs["awsRegion"] = args?.awsRegion;
            resourceInputs["basePath"] = args?.basePath;
            resourceInputs["default"] = args?.default;
            resourceInputs["delegateSelectors"] = args?.delegateSelectors;
            resourceInputs["description"] = args?.description;
            resourceInputs["executeOnDelegate"] = args?.executeOnDelegate;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["isDefault"] = args?.isDefault;
            resourceInputs["isReadOnly"] = args?.isReadOnly;
            resourceInputs["k8sAuthEndpoint"] = args?.k8sAuthEndpoint;
            resourceInputs["name"] = args?.name;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["readOnly"] = args?.readOnly;
            resourceInputs["renewAppRoleToken"] = args?.renewAppRoleToken;
            resourceInputs["renewalIntervalMinutes"] = args?.renewalIntervalMinutes;
            resourceInputs["secretEngineManuallyConfigured"] = args?.secretEngineManuallyConfigured;
            resourceInputs["secretEngineName"] = args?.secretEngineName;
            resourceInputs["secretEngineVersion"] = args?.secretEngineVersion;
            resourceInputs["secretId"] = args?.secretId;
            resourceInputs["serviceAccountTokenPath"] = args?.serviceAccountTokenPath;
            resourceInputs["sinkPath"] = args?.sinkPath;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["useAwsIam"] = args?.useAwsIam;
            resourceInputs["useJwtAuth"] = args?.useJwtAuth;
            resourceInputs["useK8sAuth"] = args?.useK8sAuth;
            resourceInputs["useVaultAgent"] = args?.useVaultAgent;
            resourceInputs["vaultAwsIamRole"] = args?.vaultAwsIamRole;
            resourceInputs["vaultJwtAuthPath"] = args?.vaultJwtAuthPath;
            resourceInputs["vaultJwtAuthRole"] = args?.vaultJwtAuthRole;
            resourceInputs["vaultK8sAuthRole"] = args?.vaultK8sAuthRole;
            resourceInputs["vaultUrl"] = args?.vaultUrl;
            resourceInputs["xvaultAwsIamServerId"] = args?.xvaultAwsIamServerId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VaultConnector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VaultConnector resources.
 */
export interface VaultConnectorState {
    /**
     * Access type.
     */
    accessType?: pulumi.Input<string>;
    /**
     * ID of App Role.
     */
    appRoleId?: pulumi.Input<string>;
    /**
     * Authentication token for Vault.
     */
    authToken?: pulumi.Input<string>;
    /**
     * AWS region where the AWS IAM authentication will happen.
     */
    awsRegion?: pulumi.Input<string>;
    /**
     * Location of the Vault directory where the secret will be stored.
     */
    basePath?: pulumi.Input<string>;
    /**
     * Is default or not.
     */
    default?: pulumi.Input<boolean>;
    /**
     * List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.
     */
    delegateSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Execute on delegate or not.
     */
    executeOnDelegate?: pulumi.Input<boolean>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Is default or not.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * Read only or not.
     */
    isReadOnly?: pulumi.Input<boolean>;
    /**
     * The path where Kubernetes Auth is enabled in Vault.
     */
    k8sAuthEndpoint?: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Vault namespace where the Secret will be created.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Read only.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Boolean value to indicate if AppRole token renewal is enabled or not.
     */
    renewAppRoleToken?: pulumi.Input<boolean>;
    /**
     * The time interval for the token renewal.
     */
    renewalIntervalMinutes?: pulumi.Input<number>;
    /**
     * Manually entered Secret Engine.
     */
    secretEngineManuallyConfigured?: pulumi.Input<boolean>;
    /**
     * Name of the Secret Engine.
     */
    secretEngineName?: pulumi.Input<string>;
    /**
     * Version of Secret Engine.
     */
    secretEngineVersion?: pulumi.Input<number>;
    /**
     * ID of the Secret.
     */
    secretId?: pulumi.Input<string>;
    /**
     * The Service Account token path in the K8s pod where the token is mounted.
     */
    serviceAccountTokenPath?: pulumi.Input<string>;
    /**
     * The location from which the authentication token should be read.
     */
    sinkPath?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Boolean value to indicate if AWS IAM is used for authentication.
     */
    useAwsIam?: pulumi.Input<boolean>;
    /**
     * Boolean value to indicate if JWT is used for authentication.
     */
    useJwtAuth?: pulumi.Input<boolean>;
    /**
     * Boolean value to indicate if K8s Auth is used for authentication.
     */
    useK8sAuth?: pulumi.Input<boolean>;
    /**
     * Boolean value to indicate if Vault Agent is used for authentication.
     */
    useVaultAgent?: pulumi.Input<boolean>;
    /**
     * The Vault role defined to bind to aws iam account/role being accessed.
     */
    vaultAwsIamRole?: pulumi.Input<string>;
    /**
     * Custom path at with JWT auth in enabled for Vault
     */
    vaultJwtAuthPath?: pulumi.Input<string>;
    /**
     * The Vault role defined with JWT auth type for accessing Vault as per policies binded.
     */
    vaultJwtAuthRole?: pulumi.Input<string>;
    /**
     * The role where K8s Auth will happen.
     */
    vaultK8sAuthRole?: pulumi.Input<string>;
    /**
     * URL of the HashiCorp Vault.
     */
    vaultUrl?: pulumi.Input<string>;
    /**
     * The AWS IAM Header Server ID that has been configured for this AWS IAM instance.
     */
    xvaultAwsIamServerId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VaultConnector resource.
 */
export interface VaultConnectorArgs {
    /**
     * Access type.
     */
    accessType?: pulumi.Input<string>;
    /**
     * ID of App Role.
     */
    appRoleId?: pulumi.Input<string>;
    /**
     * Authentication token for Vault.
     */
    authToken?: pulumi.Input<string>;
    /**
     * AWS region where the AWS IAM authentication will happen.
     */
    awsRegion?: pulumi.Input<string>;
    /**
     * Location of the Vault directory where the secret will be stored.
     */
    basePath?: pulumi.Input<string>;
    /**
     * Is default or not.
     */
    default?: pulumi.Input<boolean>;
    /**
     * List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.
     */
    delegateSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Execute on delegate or not.
     */
    executeOnDelegate?: pulumi.Input<boolean>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Is default or not.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * Read only or not.
     */
    isReadOnly?: pulumi.Input<boolean>;
    /**
     * The path where Kubernetes Auth is enabled in Vault.
     */
    k8sAuthEndpoint?: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Vault namespace where the Secret will be created.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Read only.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Boolean value to indicate if AppRole token renewal is enabled or not.
     */
    renewAppRoleToken?: pulumi.Input<boolean>;
    /**
     * The time interval for the token renewal.
     */
    renewalIntervalMinutes: pulumi.Input<number>;
    /**
     * Manually entered Secret Engine.
     */
    secretEngineManuallyConfigured?: pulumi.Input<boolean>;
    /**
     * Name of the Secret Engine.
     */
    secretEngineName?: pulumi.Input<string>;
    /**
     * Version of Secret Engine.
     */
    secretEngineVersion?: pulumi.Input<number>;
    /**
     * ID of the Secret.
     */
    secretId?: pulumi.Input<string>;
    /**
     * The Service Account token path in the K8s pod where the token is mounted.
     */
    serviceAccountTokenPath?: pulumi.Input<string>;
    /**
     * The location from which the authentication token should be read.
     */
    sinkPath?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Boolean value to indicate if AWS IAM is used for authentication.
     */
    useAwsIam?: pulumi.Input<boolean>;
    /**
     * Boolean value to indicate if JWT is used for authentication.
     */
    useJwtAuth?: pulumi.Input<boolean>;
    /**
     * Boolean value to indicate if K8s Auth is used for authentication.
     */
    useK8sAuth?: pulumi.Input<boolean>;
    /**
     * Boolean value to indicate if Vault Agent is used for authentication.
     */
    useVaultAgent?: pulumi.Input<boolean>;
    /**
     * The Vault role defined to bind to aws iam account/role being accessed.
     */
    vaultAwsIamRole?: pulumi.Input<string>;
    /**
     * Custom path at with JWT auth in enabled for Vault
     */
    vaultJwtAuthPath?: pulumi.Input<string>;
    /**
     * The Vault role defined with JWT auth type for accessing Vault as per policies binded.
     */
    vaultJwtAuthRole?: pulumi.Input<string>;
    /**
     * The role where K8s Auth will happen.
     */
    vaultK8sAuthRole?: pulumi.Input<string>;
    /**
     * URL of the HashiCorp Vault.
     */
    vaultUrl: pulumi.Input<string>;
    /**
     * The AWS IAM Header Server ID that has been configured for this AWS IAM instance.
     */
    xvaultAwsIamServerId?: pulumi.Input<string>;
}
