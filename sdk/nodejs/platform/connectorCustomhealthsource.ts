// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating a Custom Health source connector.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * // Authentication mechanism as username and password
 * const test = new harness.platform.ConnectorCustomhealthsource("test", {
 *     identifier: "identifier",
 *     name: "name",
 *     description: "test",
 *     tags: ["foo:bar"],
 *     url: "https://prometheus.com/",
 *     delegateSelectors: ["harness-delegate"],
 *     method: "GET",
 *     validationPath: "loki/api/v1/labels",
 *     headers: [{
 *         encryptedValueRef: "account.doNotDeleteHSM",
 *         valueEncrypted: true,
 *         key: "key",
 *         value: "value",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Import account level elasticsearch connector
 *
 * ```sh
 * $ pulumi import harness:platform/connectorCustomhealthsource:ConnectorCustomhealthsource example <connector_id>
 * ```
 *
 * Import org level elasticsearch connector
 *
 * ```sh
 * $ pulumi import harness:platform/connectorCustomhealthsource:ConnectorCustomhealthsource example <ord_id>/<connector_id>
 * ```
 *
 * Import project level elasticsearch connector
 *
 * ```sh
 * $ pulumi import harness:platform/connectorCustomhealthsource:ConnectorCustomhealthsource example <org_id>/<project_id>/<connector_id>
 * ```
 */
export class ConnectorCustomhealthsource extends pulumi.CustomResource {
    /**
     * Get an existing ConnectorCustomhealthsource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorCustomhealthsourceState, opts?: pulumi.CustomResourceOptions): ConnectorCustomhealthsource {
        return new ConnectorCustomhealthsource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/connectorCustomhealthsource:ConnectorCustomhealthsource';

    /**
     * Returns true if the given object is an instance of ConnectorCustomhealthsource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectorCustomhealthsource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectorCustomhealthsource.__pulumiType;
    }

    /**
     * Tags to filter delegates for connection.
     */
    public readonly delegateSelectors!: pulumi.Output<string[] | undefined>;
    /**
     * Description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Headers.
     */
    public readonly headers!: pulumi.Output<outputs.platform.ConnectorCustomhealthsourceHeader[] | undefined>;
    /**
     * Unique identifier of the resource.
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * HTTP Verb Method for the API Call
     */
    public readonly method!: pulumi.Output<string>;
    /**
     * Name of the resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Unique identifier of the organization.
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * Parameters
     */
    public readonly params!: pulumi.Output<outputs.platform.ConnectorCustomhealthsourceParam[] | undefined>;
    /**
     * Unique identifier of the project.
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * Tags to associate with the resource.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * URL of the Custom Healthsource controller.
     */
    public readonly url!: pulumi.Output<string>;
    /**
     * Body to be sent with the API Call
     */
    public readonly validationBody!: pulumi.Output<string | undefined>;
    /**
     * Path to be added to the base URL for the API Call
     */
    public readonly validationPath!: pulumi.Output<string | undefined>;

    /**
     * Create a ConnectorCustomhealthsource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorCustomhealthsourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorCustomhealthsourceArgs | ConnectorCustomhealthsourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorCustomhealthsourceState | undefined;
            resourceInputs["delegateSelectors"] = state ? state.delegateSelectors : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["headers"] = state ? state.headers : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["params"] = state ? state.params : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["validationBody"] = state ? state.validationBody : undefined;
            resourceInputs["validationPath"] = state ? state.validationPath : undefined;
        } else {
            const args = argsOrState as ConnectorCustomhealthsourceArgs | undefined;
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.method === undefined) && !opts.urn) {
                throw new Error("Missing required property 'method'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["delegateSelectors"] = args ? args.delegateSelectors : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["headers"] = args ? args.headers : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["params"] = args ? args.params : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["validationBody"] = args ? args.validationBody : undefined;
            resourceInputs["validationPath"] = args ? args.validationPath : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectorCustomhealthsource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConnectorCustomhealthsource resources.
 */
export interface ConnectorCustomhealthsourceState {
    /**
     * Tags to filter delegates for connection.
     */
    delegateSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Headers.
     */
    headers?: pulumi.Input<pulumi.Input<inputs.platform.ConnectorCustomhealthsourceHeader>[]>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * HTTP Verb Method for the API Call
     */
    method?: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Parameters
     */
    params?: pulumi.Input<pulumi.Input<inputs.platform.ConnectorCustomhealthsourceParam>[]>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL of the Custom Healthsource controller.
     */
    url?: pulumi.Input<string>;
    /**
     * Body to be sent with the API Call
     */
    validationBody?: pulumi.Input<string>;
    /**
     * Path to be added to the base URL for the API Call
     */
    validationPath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectorCustomhealthsource resource.
 */
export interface ConnectorCustomhealthsourceArgs {
    /**
     * Tags to filter delegates for connection.
     */
    delegateSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Headers.
     */
    headers?: pulumi.Input<pulumi.Input<inputs.platform.ConnectorCustomhealthsourceHeader>[]>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * HTTP Verb Method for the API Call
     */
    method: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Parameters
     */
    params?: pulumi.Input<pulumi.Input<inputs.platform.ConnectorCustomhealthsourceParam>[]>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL of the Custom Healthsource controller.
     */
    url: pulumi.Input<string>;
    /**
     * Body to be sent with the API Call
     */
    validationBody?: pulumi.Input<string>;
    /**
     * Path to be added to the base URL for the API Call
     */
    validationPath?: pulumi.Input<string>;
}
