// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for creating and managing Harness GitOps Filters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = new harness.platform.GitopsFilters("example", {
 *     name: "example_filter",
 *     orgId: "your_org_id",
 *     projectId: "your_project_id",
 *     identifier: "example_filter",
 *     type: "APPLICATION",
 *     filterProperties: JSON.stringify({
 *         agentIdentifiers: ["your_agent_identifier"],
 *         clusters: ["https://your-cluster-url"],
 *         healthStatus: [
 *             "Unknown",
 *             "Progressing",
 *             "Suspended",
 *             "Healthy",
 *             "Degraded",
 *             "Missing",
 *         ],
 *         namespaces: ["your-namespace"],
 *         repositories: ["your-repo"],
 *         syncStatus: [
 *             "OutOfSync",
 *             "Synced",
 *             "Unknown",
 *         ],
 *     }),
 *     filterVisibility: "OnlyCreator",
 * });
 * ```
 *
 * ## Filter Properties Reference
 *
 * The `filterProperties` field supports the following filter types:
 *
 * > **Note:** The following filter properties are only valid for filter type "APPLICATION". Different filter types may support different properties.
 *
 * * `agentIdentifiers` - Array of GitOps agent identifiers to filter by.
 * * `clusters` - Array of cluster URLs to filter by.
 * * `healthStatus` - Array of health status values to filter by. Valid values include: "Unknown", "Progressing", "Suspended", "Healthy", "Degraded", "Missing".
 * * `namespaces` - Array of Kubernetes namespaces to filter by.
 * * `repositories` - Array of Git repository URLs to filter by.
 * * `syncStatus` - Array of sync status values to filter by. Valid values include: "OutOfSync", "Synced", "Unknown".
 *
 * ## Schema Attributes Reference
 *
 * * `id` - Identifier of the GitOps filter.
 *
 * ## Import
 *
 * GitOps filters can be imported using a composite ID formed of organization ID, project ID, filter ID, and filter type.
 *
 * bash
 *
 * Format: <org_id>/<project_id>/<filter_id>/<filter_type>
 *
 * ```sh
 * $ pulumi import harness:platform/gitopsFilters:GitopsFilters example org_id/project_id/filter_id/APPLICATION
 * ```
 */
export class GitopsFilters extends pulumi.CustomResource {
    /**
     * Get an existing GitopsFilters resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GitopsFiltersState, opts?: pulumi.CustomResourceOptions): GitopsFilters {
        return new GitopsFilters(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/gitopsFilters:GitopsFilters';

    /**
     * Returns true if the given object is an instance of GitopsFilters.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GitopsFilters {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GitopsFilters.__pulumiType;
    }

    /**
     * Properties of the filter entity defined in Harness as a JSON string. All values should be arrays of strings. Example: `jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})`.
     */
    public readonly filterProperties!: pulumi.Output<string>;
    /**
     * Visibility of the filter. Valid values are "EveryOne" and "OnlyCreator". Default is "EveryOne".
     */
    public readonly filterVisibility!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the GitOps filter.
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * Name of the GitOps filter.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Organization identifier for the GitOps filter.
     */
    public readonly orgId!: pulumi.Output<string>;
    /**
     * Project identifier for the GitOps filter.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Type of GitOps filter. Currently, only "APPLICATION" is supported.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a GitopsFilters resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GitopsFiltersArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GitopsFiltersArgs | GitopsFiltersState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GitopsFiltersState | undefined;
            resourceInputs["filterProperties"] = state ? state.filterProperties : undefined;
            resourceInputs["filterVisibility"] = state ? state.filterVisibility : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as GitopsFiltersArgs | undefined;
            if ((!args || args.filterProperties === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filterProperties'");
            }
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["filterProperties"] = args ? args.filterProperties : undefined;
            resourceInputs["filterVisibility"] = args ? args.filterVisibility : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GitopsFilters.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GitopsFilters resources.
 */
export interface GitopsFiltersState {
    /**
     * Properties of the filter entity defined in Harness as a JSON string. All values should be arrays of strings. Example: `jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})`.
     */
    filterProperties?: pulumi.Input<string>;
    /**
     * Visibility of the filter. Valid values are "EveryOne" and "OnlyCreator". Default is "EveryOne".
     */
    filterVisibility?: pulumi.Input<string>;
    /**
     * Unique identifier of the GitOps filter.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Name of the GitOps filter.
     */
    name?: pulumi.Input<string>;
    /**
     * Organization identifier for the GitOps filter.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Project identifier for the GitOps filter.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Type of GitOps filter. Currently, only "APPLICATION" is supported.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GitopsFilters resource.
 */
export interface GitopsFiltersArgs {
    /**
     * Properties of the filter entity defined in Harness as a JSON string. All values should be arrays of strings. Example: `jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})`.
     */
    filterProperties: pulumi.Input<string>;
    /**
     * Visibility of the filter. Valid values are "EveryOne" and "OnlyCreator". Default is "EveryOne".
     */
    filterVisibility?: pulumi.Input<string>;
    /**
     * Unique identifier of the GitOps filter.
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of the GitOps filter.
     */
    name?: pulumi.Input<string>;
    /**
     * Organization identifier for the GitOps filter.
     */
    orgId: pulumi.Input<string>;
    /**
     * Project identifier for the GitOps filter.
     */
    projectId: pulumi.Input<string>;
    /**
     * Type of GitOps filter. Currently, only "APPLICATION" is supported.
     */
    type: pulumi.Input<string>;
}
