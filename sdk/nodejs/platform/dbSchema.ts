// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating a Harness DBDevOps Schema.
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import project level db schema
 *
 * ```sh
 * $ pulumi import harness:platform/dbSchema:DbSchema example <org_id>/<project_id>/<db_schema_id>
 * ```
 */
export class DbSchema extends pulumi.CustomResource {
    /**
     * Get an existing DbSchema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbSchemaState, opts?: pulumi.CustomResourceOptions): DbSchema {
        return new DbSchema(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/dbSchema:DbSchema';

    /**
     * Returns true if the given object is an instance of DbSchema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbSchema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbSchema.__pulumiType;
    }

    /**
     * Configuration to clone changeSets using script
     */
    declare public readonly changelogScript: pulumi.Output<outputs.platform.DbSchemaChangelogScript | undefined>;
    /**
     * Description of the resource.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the resource.
     */
    declare public readonly identifier: pulumi.Output<string>;
    /**
     * Name of the resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Unique identifier of the organization.
     */
    declare public readonly orgId: pulumi.Output<string>;
    /**
     * Unique identifier of the project.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * Provides a connector and path at which to find the database schema representation
     */
    declare public readonly schemaSource: pulumi.Output<outputs.platform.DbSchemaSchemaSource | undefined>;
    /**
     * The service associated with schema
     */
    declare public readonly service: pulumi.Output<string | undefined>;
    /**
     * Tags to associate with the resource.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * Type of the database schema. Valid values are: SCRIPT, REPOSITORY
     */
    declare public readonly type: pulumi.Output<string | undefined>;

    /**
     * Create a DbSchema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbSchemaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbSchemaArgs | DbSchemaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbSchemaState | undefined;
            resourceInputs["changelogScript"] = state?.changelogScript;
            resourceInputs["description"] = state?.description;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["schemaSource"] = state?.schemaSource;
            resourceInputs["service"] = state?.service;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as DbSchemaArgs | undefined;
            if (args?.identifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if (args?.orgId === undefined && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["changelogScript"] = args?.changelogScript;
            resourceInputs["description"] = args?.description;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["schemaSource"] = args?.schemaSource;
            resourceInputs["service"] = args?.service;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["type"] = args?.type;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DbSchema.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DbSchema resources.
 */
export interface DbSchemaState {
    /**
     * Configuration to clone changeSets using script
     */
    changelogScript?: pulumi.Input<inputs.platform.DbSchemaChangelogScript>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Provides a connector and path at which to find the database schema representation
     */
    schemaSource?: pulumi.Input<inputs.platform.DbSchemaSchemaSource>;
    /**
     * The service associated with schema
     */
    service?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of the database schema. Valid values are: SCRIPT, REPOSITORY
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DbSchema resource.
 */
export interface DbSchemaArgs {
    /**
     * Configuration to clone changeSets using script
     */
    changelogScript?: pulumi.Input<inputs.platform.DbSchemaChangelogScript>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId: pulumi.Input<string>;
    /**
     * Provides a connector and path at which to find the database schema representation
     */
    schemaSource?: pulumi.Input<inputs.platform.DbSchemaSchemaSource>;
    /**
     * The service associated with schema
     */
    service?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of the database schema. Valid values are: SCRIPT, REPOSITORY
     */
    type?: pulumi.Input<string>;
}
