// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for managing a Harness Gitops Applicationset. Please note this resource is in an alpha/experimental state and is subject to change.
 */
export class GitopsApplicationset extends pulumi.CustomResource {
    /**
     * Get an existing GitopsApplicationset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GitopsApplicationsetState, opts?: pulumi.CustomResourceOptions): GitopsApplicationset {
        return new GitopsApplicationset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/gitopsApplicationset:GitopsApplicationset';

    /**
     * Returns true if the given object is an instance of GitopsApplicationset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GitopsApplicationset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GitopsApplicationset.__pulumiType;
    }

    /**
     * Agent identifier of the GitOps applicationset.
     */
    public readonly agentId!: pulumi.Output<string>;
    /**
     * Definition of the GitOps applicationset resource.
     */
    public readonly applicationset!: pulumi.Output<outputs.platform.GitopsApplicationsetApplicationset>;
    /**
     * Identifier of the GitOps applicationset. This is a unique identifier for the applicationset generated automatically.
     */
    public /*out*/ readonly identifier!: pulumi.Output<string>;
    /**
     * Organization identifier of the GitOps applicationset.
     */
    public readonly orgId!: pulumi.Output<string>;
    /**
     * Project identifier of the GitOps applicationset.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Indicates if the GitOps application should be updated if existing and inserted if not.
     */
    public readonly upsert!: pulumi.Output<boolean | undefined>;

    /**
     * Create a GitopsApplicationset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GitopsApplicationsetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GitopsApplicationsetArgs | GitopsApplicationsetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GitopsApplicationsetState | undefined;
            resourceInputs["agentId"] = state ? state.agentId : undefined;
            resourceInputs["applicationset"] = state ? state.applicationset : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["upsert"] = state ? state.upsert : undefined;
        } else {
            const args = argsOrState as GitopsApplicationsetArgs | undefined;
            if ((!args || args.agentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentId'");
            }
            if ((!args || args.applicationset === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationset'");
            }
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["agentId"] = args ? args.agentId : undefined;
            resourceInputs["applicationset"] = args ? args.applicationset : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["upsert"] = args ? args.upsert : undefined;
            resourceInputs["identifier"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GitopsApplicationset.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GitopsApplicationset resources.
 */
export interface GitopsApplicationsetState {
    /**
     * Agent identifier of the GitOps applicationset.
     */
    agentId?: pulumi.Input<string>;
    /**
     * Definition of the GitOps applicationset resource.
     */
    applicationset?: pulumi.Input<inputs.platform.GitopsApplicationsetApplicationset>;
    /**
     * Identifier of the GitOps applicationset. This is a unique identifier for the applicationset generated automatically.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Organization identifier of the GitOps applicationset.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Project identifier of the GitOps applicationset.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Indicates if the GitOps application should be updated if existing and inserted if not.
     */
    upsert?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GitopsApplicationset resource.
 */
export interface GitopsApplicationsetArgs {
    /**
     * Agent identifier of the GitOps applicationset.
     */
    agentId: pulumi.Input<string>;
    /**
     * Definition of the GitOps applicationset resource.
     */
    applicationset: pulumi.Input<inputs.platform.GitopsApplicationsetApplicationset>;
    /**
     * Organization identifier of the GitOps applicationset.
     */
    orgId: pulumi.Input<string>;
    /**
     * Project identifier of the GitOps applicationset.
     */
    projectId: pulumi.Input<string>;
    /**
     * Indicates if the GitOps application should be updated if existing and inserted if not.
     */
    upsert?: pulumi.Input<boolean>;
}
