// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating secret of type secret text
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const inline = new harness.platform.SecretText("inline", {
 *     identifier: "identifier",
 *     name: "name",
 *     description: "example",
 *     tags: ["foo:bar"],
 *     secretManagerIdentifier: "harnessSecretManager",
 *     valueType: "Inline",
 *     value: "secret",
 * });
 * const reference = new harness.platform.SecretText("reference", {
 *     identifier: "identifier",
 *     name: "name",
 *     description: "example",
 *     tags: ["foo:bar"],
 *     secretManagerIdentifier: "azureSecretManager",
 *     valueType: "Reference",
 *     value: "secret",
 * });
 * const gcpSecretManagerReference = new harness.platform.SecretText("gcp_secret_manager_reference", {
 *     identifier: "identifier",
 *     name: "name",
 *     description: "example",
 *     tags: ["foo:bar"],
 *     secretManagerIdentifier: "gcpSecretManager",
 *     valueType: "Reference",
 *     value: "secret",
 *     additionalMetadatas: [{
 *         values: [{
 *             version: "1",
 *         }],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import account level secret text
 *
 * ```sh
 * $ pulumi import harness:platform/secretText:SecretText example <secret_text_id>
 * ```
 *
 * Import org level secret text
 *
 * ```sh
 * $ pulumi import harness:platform/secretText:SecretText example <ord_id>/<secret_text_id>
 * ```
 *
 * Import project level secret text
 *
 * ```sh
 * $ pulumi import harness:platform/secretText:SecretText example <org_id>/<project_id>/<secret_text_id>
 * ```
 */
export class SecretText extends pulumi.CustomResource {
    /**
     * Get an existing SecretText resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretTextState, opts?: pulumi.CustomResourceOptions): SecretText {
        return new SecretText(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/secretText:SecretText';

    /**
     * Returns true if the given object is an instance of SecretText.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretText {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretText.__pulumiType;
    }

    /**
     * Additional Metadata for the Secret
     */
    declare public readonly additionalMetadatas: pulumi.Output<outputs.platform.SecretTextAdditionalMetadata[] | undefined>;
    /**
     * Description of the resource.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the resource.
     */
    declare public readonly identifier: pulumi.Output<string>;
    /**
     * Name of the resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Unique identifier of the organization.
     */
    declare public readonly orgId: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the project.
     */
    declare public readonly projectId: pulumi.Output<string | undefined>;
    /**
     * Identifier of the Secret Manager used to manage the secret.
     */
    declare public readonly secretManagerIdentifier: pulumi.Output<string>;
    /**
     * Tags to associate with the resource.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * Value of the Secret
     */
    declare public readonly value: pulumi.Output<string | undefined>;
    /**
     * This has details to specify if the secret value is Inline or Reference.
     */
    declare public readonly valueType: pulumi.Output<string>;

    /**
     * Create a SecretText resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretTextArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretTextArgs | SecretTextState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretTextState | undefined;
            resourceInputs["additionalMetadatas"] = state?.additionalMetadatas;
            resourceInputs["description"] = state?.description;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["secretManagerIdentifier"] = state?.secretManagerIdentifier;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["value"] = state?.value;
            resourceInputs["valueType"] = state?.valueType;
        } else {
            const args = argsOrState as SecretTextArgs | undefined;
            if (args?.identifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if (args?.secretManagerIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'secretManagerIdentifier'");
            }
            if (args?.valueType === undefined && !opts.urn) {
                throw new Error("Missing required property 'valueType'");
            }
            resourceInputs["additionalMetadatas"] = args?.additionalMetadatas;
            resourceInputs["description"] = args?.description;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["secretManagerIdentifier"] = args?.secretManagerIdentifier;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["value"] = args?.value ? pulumi.secret(args.value) : undefined;
            resourceInputs["valueType"] = args?.valueType;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["value"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SecretText.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretText resources.
 */
export interface SecretTextState {
    /**
     * Additional Metadata for the Secret
     */
    additionalMetadatas?: pulumi.Input<pulumi.Input<inputs.platform.SecretTextAdditionalMetadata>[]>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Identifier of the Secret Manager used to manage the secret.
     */
    secretManagerIdentifier?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Value of the Secret
     */
    value?: pulumi.Input<string>;
    /**
     * This has details to specify if the secret value is Inline or Reference.
     */
    valueType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretText resource.
 */
export interface SecretTextArgs {
    /**
     * Additional Metadata for the Secret
     */
    additionalMetadatas?: pulumi.Input<pulumi.Input<inputs.platform.SecretTextAdditionalMetadata>[]>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Identifier of the Secret Manager used to manage the secret.
     */
    secretManagerIdentifier: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Value of the Secret
     */
    value?: pulumi.Input<string>;
    /**
     * This has details to specify if the secret value is Inline or Reference.
     */
    valueType: pulumi.Input<string>;
}
