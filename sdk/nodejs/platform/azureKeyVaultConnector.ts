// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for creating an Azure key vault in Harness.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = new harness.platform.AzureKeyVaultConnector("example", {
 *     identifier: "identifier",
 *     name: "name",
 *     description: "example",
 *     tags: ["foo:bar"],
 *     clientId: "client_id",
 *     secretKey: "account.secret_key",
 *     tenantId: "tenant_id",
 *     vaultName: "vault_name",
 *     subscription: "subscription",
 *     isDefault: false,
 *     azureEnvironmentType: "AZURE",
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import account level azure key vault connector
 *
 * ```sh
 * $ pulumi import harness:platform/azureKeyVaultConnector:AzureKeyVaultConnector example <connector_id>
 * ```
 *
 * Import org level azure key vault connector
 *
 * ```sh
 * $ pulumi import harness:platform/azureKeyVaultConnector:AzureKeyVaultConnector example <ord_id>/<connector_id>
 * ```
 *
 * Import project level azure key vault connector
 *
 * ```sh
 * $ pulumi import harness:platform/azureKeyVaultConnector:AzureKeyVaultConnector example <org_id>/<project_id>/<connector_id>
 * ```
 */
export class AzureKeyVaultConnector extends pulumi.CustomResource {
    /**
     * Get an existing AzureKeyVaultConnector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureKeyVaultConnectorState, opts?: pulumi.CustomResourceOptions): AzureKeyVaultConnector {
        return new AzureKeyVaultConnector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/azureKeyVaultConnector:AzureKeyVaultConnector';

    /**
     * Returns true if the given object is an instance of AzureKeyVaultConnector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureKeyVaultConnector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureKeyVaultConnector.__pulumiType;
    }

    /**
     * Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE
     */
    declare public readonly azureEnvironmentType: pulumi.Output<string>;
    /**
     * Application ID of the Azure App.
     */
    declare public readonly clientId: pulumi.Output<string>;
    /**
     * Tags to filter delegates for connection.
     */
    declare public readonly delegateSelectors: pulumi.Output<string[] | undefined>;
    /**
     * Description of the resource.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the resource.
     */
    declare public readonly identifier: pulumi.Output<string>;
    /**
     * Specifies whether or not is the default value.
     */
    declare public readonly isDefault: pulumi.Output<boolean | undefined>;
    /**
     * Name of the resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Unique identifier of the organization.
     */
    declare public readonly orgId: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the project.
     */
    declare public readonly projectId: pulumi.Output<string | undefined>;
    /**
     * The Harness text secret with the Azure authentication key as its value.
     */
    declare public readonly secretKey: pulumi.Output<string>;
    /**
     * Azure subscription ID.
     */
    declare public readonly subscription: pulumi.Output<string>;
    /**
     * Tags to associate with the resource.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * The Azure Active Directory (Azure AD) directory ID where you created your application.
     */
    declare public readonly tenantId: pulumi.Output<string>;
    /**
     * Name of the vault.
     */
    declare public readonly vaultName: pulumi.Output<string>;

    /**
     * Create a AzureKeyVaultConnector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureKeyVaultConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureKeyVaultConnectorArgs | AzureKeyVaultConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureKeyVaultConnectorState | undefined;
            resourceInputs["azureEnvironmentType"] = state?.azureEnvironmentType;
            resourceInputs["clientId"] = state?.clientId;
            resourceInputs["delegateSelectors"] = state?.delegateSelectors;
            resourceInputs["description"] = state?.description;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["isDefault"] = state?.isDefault;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["secretKey"] = state?.secretKey;
            resourceInputs["subscription"] = state?.subscription;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tenantId"] = state?.tenantId;
            resourceInputs["vaultName"] = state?.vaultName;
        } else {
            const args = argsOrState as AzureKeyVaultConnectorArgs | undefined;
            if (args?.clientId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if (args?.identifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if (args?.secretKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'secretKey'");
            }
            if (args?.subscription === undefined && !opts.urn) {
                throw new Error("Missing required property 'subscription'");
            }
            if (args?.tenantId === undefined && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            if (args?.vaultName === undefined && !opts.urn) {
                throw new Error("Missing required property 'vaultName'");
            }
            resourceInputs["azureEnvironmentType"] = args?.azureEnvironmentType;
            resourceInputs["clientId"] = args?.clientId;
            resourceInputs["delegateSelectors"] = args?.delegateSelectors;
            resourceInputs["description"] = args?.description;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["isDefault"] = args?.isDefault;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["secretKey"] = args?.secretKey;
            resourceInputs["subscription"] = args?.subscription;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["tenantId"] = args?.tenantId;
            resourceInputs["vaultName"] = args?.vaultName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AzureKeyVaultConnector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AzureKeyVaultConnector resources.
 */
export interface AzureKeyVaultConnectorState {
    /**
     * Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE
     */
    azureEnvironmentType?: pulumi.Input<string>;
    /**
     * Application ID of the Azure App.
     */
    clientId?: pulumi.Input<string>;
    /**
     * Tags to filter delegates for connection.
     */
    delegateSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Specifies whether or not is the default value.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The Harness text secret with the Azure authentication key as its value.
     */
    secretKey?: pulumi.Input<string>;
    /**
     * Azure subscription ID.
     */
    subscription?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Azure Active Directory (Azure AD) directory ID where you created your application.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Name of the vault.
     */
    vaultName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AzureKeyVaultConnector resource.
 */
export interface AzureKeyVaultConnectorArgs {
    /**
     * Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE
     */
    azureEnvironmentType?: pulumi.Input<string>;
    /**
     * Application ID of the Azure App.
     */
    clientId: pulumi.Input<string>;
    /**
     * Tags to filter delegates for connection.
     */
    delegateSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Specifies whether or not is the default value.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The Harness text secret with the Azure authentication key as its value.
     */
    secretKey: pulumi.Input<string>;
    /**
     * Azure subscription ID.
     */
    subscription: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Azure Active Directory (Azure AD) directory ID where you created your application.
     */
    tenantId: pulumi.Input<string>;
    /**
     * Name of the vault.
     */
    vaultName: pulumi.Input<string>;
}
