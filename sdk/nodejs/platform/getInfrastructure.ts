// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Data source for retrieving a Harness Infrastructure.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = harness.platform.getInfrastructure({
 *     identifier: "identifier",
 *     name: "name",
 *     orgId: "org_id",
 *     projectId: "project_id",
 *     envId: "env_id",
 * });
 * ```
 */
export function getInfrastructure(args: GetInfrastructureArgs, opts?: pulumi.InvokeOptions): Promise<GetInfrastructureResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:platform/getInfrastructure:getInfrastructure", {
        "envId": args.envId,
        "gitDetails": args.gitDetails,
        "identifier": args.identifier,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getInfrastructure.
 */
export interface GetInfrastructureArgs {
    /**
     * environment identifier.
     */
    envId: string;
    /**
     * Contains parameters related to Git Experience for remote entities
     */
    gitDetails?: inputs.platform.GetInfrastructureGitDetails;
    /**
     * Unique identifier of the resource.
     */
    identifier: string;
    /**
     * Name of the resource.
     */
    name?: string;
    /**
     * Unique identifier of the organization.
     */
    orgId?: string;
    /**
     * Unique identifier of the project.
     */
    projectId?: string;
}

/**
 * A collection of values returned by getInfrastructure.
 */
export interface GetInfrastructureResult {
    /**
     * Infrastructure deployment type. Valid values are Kubernetes, NativeHelm, Ssh, WinRm, ServerlessAwsLambda, AzureWebApp, Custom, ECS.
     */
    readonly deploymentType: string;
    /**
     * Description of the resource.
     */
    readonly description: string;
    /**
     * environment identifier.
     */
    readonly envId: string;
    /**
     * Contains parameters related to Git Experience for remote entities
     */
    readonly gitDetails: outputs.platform.GetInfrastructureGitDetails;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Unique identifier of the resource.
     */
    readonly identifier: string;
    /**
     * Name of the resource.
     */
    readonly name?: string;
    /**
     * Unique identifier of the organization.
     */
    readonly orgId?: string;
    /**
     * Unique identifier of the project.
     */
    readonly projectId?: string;
    /**
     * Tags to associate with the resource.
     */
    readonly tags: string[];
    /**
     * Type of Infrastructure. Valid values are KubernetesDirect, KubernetesGcp, ServerlessAwsLambda, Pdc, KubernetesAzure, SshWinRmAzure, SshWinRmAws, AzureWebApp, ECS, GitOps, CustomDeployment, TAS, KubernetesRancher, AWS_SAM.
     */
    readonly type: string;
    /**
     * Infrastructure YAML
     */
    readonly yaml: string;
}
/**
 * Data source for retrieving a Harness Infrastructure.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = harness.platform.getInfrastructure({
 *     identifier: "identifier",
 *     name: "name",
 *     orgId: "org_id",
 *     projectId: "project_id",
 *     envId: "env_id",
 * });
 * ```
 */
export function getInfrastructureOutput(args: GetInfrastructureOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetInfrastructureResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:platform/getInfrastructure:getInfrastructure", {
        "envId": args.envId,
        "gitDetails": args.gitDetails,
        "identifier": args.identifier,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getInfrastructure.
 */
export interface GetInfrastructureOutputArgs {
    /**
     * environment identifier.
     */
    envId: pulumi.Input<string>;
    /**
     * Contains parameters related to Git Experience for remote entities
     */
    gitDetails?: pulumi.Input<inputs.platform.GetInfrastructureGitDetailsArgs>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
}
