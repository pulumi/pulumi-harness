// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Data source for retrieving the user based on the API key.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = harness.platform.getUser({
 *     orgId: "org_id",
 *     projectId: "project_id",
 *     email: "john.doe@harness.io",
 * });
 * ```
 */
export function getUser(args: GetUserArgs, opts?: pulumi.InvokeOptions): Promise<GetUserResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:platform/getUser:getUser", {
        "email": args.email,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserArgs {
    /**
     * The email of the user.
     */
    email: string;
    /**
     * Organization identifier of the user.
     */
    orgId?: string;
    /**
     * Project identifier of the user.
     */
    projectId?: string;
}

/**
 * A collection of values returned by getUser.
 */
export interface GetUserResult {
    /**
     * Whether or not the user account is disabled.
     */
    readonly disabled: boolean;
    /**
     * The email of the user.
     */
    readonly email: string;
    /**
     * Whether or not the user account is externally managed.
     */
    readonly externallyManaged: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Unique identifier of the user.
     */
    readonly identifier: string;
    /**
     * Whether or not the user account is locked.
     */
    readonly locked: boolean;
    /**
     * Name of the user.
     */
    readonly name: string;
    /**
     * Organization identifier of the user.
     */
    readonly orgId?: string;
    /**
     * Project identifier of the user.
     */
    readonly projectId?: string;
}
/**
 * Data source for retrieving the user based on the API key.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = harness.platform.getUser({
 *     orgId: "org_id",
 *     projectId: "project_id",
 *     email: "john.doe@harness.io",
 * });
 * ```
 */
export function getUserOutput(args: GetUserOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetUserResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:platform/getUser:getUser", {
        "email": args.email,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserOutputArgs {
    /**
     * The email of the user.
     */
    email: pulumi.Input<string>;
    /**
     * Organization identifier of the user.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Project identifier of the user.
     */
    projectId?: pulumi.Input<string>;
}
