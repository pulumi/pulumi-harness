// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating a HTTP Helm connector.
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import account level helm connector
 *
 * ```sh
 * $ pulumi import harness:platform/helmConnector:HelmConnector example <connector_id>
 * ```
 *
 * Import org level helm connector
 *
 * ```sh
 * $ pulumi import harness:platform/helmConnector:HelmConnector example <ord_id>/<connector_id>
 * ```
 *
 * Import project level helm connector
 *
 * ```sh
 * $ pulumi import harness:platform/helmConnector:HelmConnector example <org_id>/<project_id>/<connector_id>
 * ```
 */
export class HelmConnector extends pulumi.CustomResource {
    /**
     * Get an existing HelmConnector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HelmConnectorState, opts?: pulumi.CustomResourceOptions): HelmConnector {
        return new HelmConnector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/helmConnector:HelmConnector';

    /**
     * Returns true if the given object is an instance of HelmConnector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HelmConnector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HelmConnector.__pulumiType;
    }

    /**
     * Credentials to use for authentication.
     */
    declare public readonly credentials: pulumi.Output<outputs.platform.HelmConnectorCredentials | undefined>;
    /**
     * Tags to filter delegates for connection.
     */
    declare public readonly delegateSelectors: pulumi.Output<string[] | undefined>;
    /**
     * Description of the resource.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Enable this flag for force deletion of connector
     */
    declare public readonly forceDelete: pulumi.Output<boolean>;
    /**
     * Unique identifier of the resource.
     */
    declare public readonly identifier: pulumi.Output<string>;
    /**
     * Name of the resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Unique identifier of the organization.
     */
    declare public readonly orgId: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the project.
     */
    declare public readonly projectId: pulumi.Output<string | undefined>;
    /**
     * Tags to associate with the resource.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * URL of the helm server.
     */
    declare public readonly url: pulumi.Output<string>;

    /**
     * Create a HelmConnector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HelmConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HelmConnectorArgs | HelmConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HelmConnectorState | undefined;
            resourceInputs["credentials"] = state?.credentials;
            resourceInputs["delegateSelectors"] = state?.delegateSelectors;
            resourceInputs["description"] = state?.description;
            resourceInputs["forceDelete"] = state?.forceDelete;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["url"] = state?.url;
        } else {
            const args = argsOrState as HelmConnectorArgs | undefined;
            if (args?.identifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if (args?.url === undefined && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["credentials"] = args?.credentials;
            resourceInputs["delegateSelectors"] = args?.delegateSelectors;
            resourceInputs["description"] = args?.description;
            resourceInputs["forceDelete"] = args?.forceDelete;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["url"] = args?.url;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HelmConnector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HelmConnector resources.
 */
export interface HelmConnectorState {
    /**
     * Credentials to use for authentication.
     */
    credentials?: pulumi.Input<inputs.platform.HelmConnectorCredentials>;
    /**
     * Tags to filter delegates for connection.
     */
    delegateSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable this flag for force deletion of connector
     */
    forceDelete?: pulumi.Input<boolean>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL of the helm server.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HelmConnector resource.
 */
export interface HelmConnectorArgs {
    /**
     * Credentials to use for authentication.
     */
    credentials?: pulumi.Input<inputs.platform.HelmConnectorCredentials>;
    /**
     * Tags to filter delegates for connection.
     */
    delegateSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable this flag for force deletion of connector
     */
    forceDelete?: pulumi.Input<boolean>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL of the helm server.
     */
    url: pulumi.Input<string>;
}
