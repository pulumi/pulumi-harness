// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Data source for retrieving a Harness Dashboard Folder.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const folder = harness.platform.getDashboardFolders({
 *     id: "id",
 * });
 * ```
 */
export function getDashboardFolders(args: GetDashboardFoldersArgs, opts?: pulumi.InvokeOptions): Promise<GetDashboardFoldersResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:platform/getDashboardFolders:getDashboardFolders", {
        "id": args.id,
        "identifier": args.identifier,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getDashboardFolders.
 */
export interface GetDashboardFoldersArgs {
    /**
     * Identifier of the folder.
     */
    id: string;
    /**
     * Unique identifier of the resource.
     */
    identifier?: string;
    /**
     * Name of the resource.
     */
    name?: string;
}

/**
 * A collection of values returned by getDashboardFolders.
 */
export interface GetDashboardFoldersResult {
    /**
     * Created DateTime of the folder.
     */
    readonly createdAt: string;
    /**
     * Description of the resource.
     */
    readonly description: string;
    /**
     * Identifier of the folder.
     */
    readonly id: string;
    /**
     * Unique identifier of the resource.
     */
    readonly identifier?: string;
    /**
     * Name of the resource.
     */
    readonly name?: string;
    /**
     * Tags to associate with the resource.
     */
    readonly tags: string[];
}
/**
 * Data source for retrieving a Harness Dashboard Folder.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const folder = harness.platform.getDashboardFolders({
 *     id: "id",
 * });
 * ```
 */
export function getDashboardFoldersOutput(args: GetDashboardFoldersOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDashboardFoldersResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:platform/getDashboardFolders:getDashboardFolders", {
        "id": args.id,
        "identifier": args.identifier,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getDashboardFolders.
 */
export interface GetDashboardFoldersOutputArgs {
    /**
     * Identifier of the folder.
     */
    id: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
}
