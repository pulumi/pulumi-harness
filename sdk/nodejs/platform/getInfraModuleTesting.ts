// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Data source for retrieving modules testing metadata from the module registry.
 */
export function getInfraModuleTesting(args: GetInfraModuleTestingArgs, opts?: pulumi.InvokeOptions): Promise<GetInfraModuleTestingResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:platform/getInfraModuleTesting:getInfraModuleTesting", {
        "moduleId": args.moduleId,
        "org": args.org,
        "pipelines": args.pipelines,
        "project": args.project,
        "providerConnector": args.providerConnector,
        "provisionerType": args.provisionerType,
        "provisionerVersion": args.provisionerVersion,
        "releasePipeline": args.releasePipeline,
        "testingEnabled": args.testingEnabled,
        "testingMetadata": args.testingMetadata,
        "updated": args.updated,
        "versions": args.versions,
    }, opts);
}

/**
 * A collection of arguments for invoking getInfraModuleTesting.
 */
export interface GetInfraModuleTestingArgs {
    /**
     * Identifier of the module to enable testing for
     */
    moduleId: string;
    /**
     * Organization identifier
     */
    org: string;
    /**
     * List of pipeline IDs to create webhooks for triggering test executions
     */
    pipelines: string[];
    /**
     * Project identifier
     */
    project: string;
    /**
     * Provider connector for testing purposes
     */
    providerConnector: string;
    provisionerType: string;
    /**
     * Provisioner version for testing purposes
     */
    provisionerVersion: string;
    /**
     * Pipeline ID to create webhooks for releases
     */
    releasePipeline?: string;
    /**
     * Whether testing is enabled for the module
     */
    testingEnabled?: boolean;
    /**
     * Testing metadata for the module
     */
    testingMetadata?: inputs.platform.GetInfraModuleTestingTestingMetadata;
    /**
     * Timestamp when the module was last modified
     */
    updated?: number;
    /**
     * Versions of the module
     */
    versions?: string[];
}

/**
 * A collection of values returned by getInfraModuleTesting.
 */
export interface GetInfraModuleTestingResult {
    /**
     * Account that owns the module
     */
    readonly account: string;
    /**
     * Timestamp when the module was created
     */
    readonly created: number;
    /**
     * Description of the module
     */
    readonly description: string;
    /**
     * Git Tag Style
     */
    readonly gitTagStyle: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Error while retrieving the module
     */
    readonly moduleError: string;
    /**
     * Identifier of the module to enable testing for
     */
    readonly moduleId: string;
    /**
     * Name of the module
     */
    readonly name: string;
    /**
     * Organization identifier
     */
    readonly org: string;
    /**
     * List of pipeline IDs to create webhooks for triggering test executions
     */
    readonly pipelines: string[];
    /**
     * Project identifier
     */
    readonly project: string;
    /**
     * Provider connector for testing purposes
     */
    readonly providerConnector: string;
    readonly provisionerType: string;
    /**
     * Provisioner version for testing purposes
     */
    readonly provisionerVersion: string;
    /**
     * Pipeline ID to create webhooks for releases
     */
    readonly releasePipeline?: string;
    /**
     * For account connectors, the repository where the module is stored
     */
    readonly repository: string;
    /**
     * Repository Branch in which the module should be accessed
     */
    readonly repositoryBranch: string;
    /**
     * Repository Commit in which the module should be accessed
     */
    readonly repositoryCommit: string;
    /**
     * Repository Connector is the reference to the connector for the repository
     */
    readonly repositoryConnector: string;
    /**
     * Repository Path is the path in which the module resides
     */
    readonly repositoryPath: string;
    /**
     * URL where the module is stored
     */
    readonly repositoryUrl: string;
    /**
     * Timestamp when the module was last synced
     */
    readonly synced: number;
    /**
     * Provider of the module
     */
    readonly system: string;
    /**
     * Tags associated with the module
     */
    readonly tags: string;
    /**
     * Whether testing is enabled for the module
     */
    readonly testingEnabled: boolean;
    /**
     * Testing metadata for the module
     */
    readonly testingMetadata: outputs.platform.GetInfraModuleTestingTestingMetadata;
    /**
     * Timestamp when the module was last modified
     */
    readonly updated: number;
    /**
     * Versions of the module
     */
    readonly versions: string[];
}
/**
 * Data source for retrieving modules testing metadata from the module registry.
 */
export function getInfraModuleTestingOutput(args: GetInfraModuleTestingOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetInfraModuleTestingResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:platform/getInfraModuleTesting:getInfraModuleTesting", {
        "moduleId": args.moduleId,
        "org": args.org,
        "pipelines": args.pipelines,
        "project": args.project,
        "providerConnector": args.providerConnector,
        "provisionerType": args.provisionerType,
        "provisionerVersion": args.provisionerVersion,
        "releasePipeline": args.releasePipeline,
        "testingEnabled": args.testingEnabled,
        "testingMetadata": args.testingMetadata,
        "updated": args.updated,
        "versions": args.versions,
    }, opts);
}

/**
 * A collection of arguments for invoking getInfraModuleTesting.
 */
export interface GetInfraModuleTestingOutputArgs {
    /**
     * Identifier of the module to enable testing for
     */
    moduleId: pulumi.Input<string>;
    /**
     * Organization identifier
     */
    org: pulumi.Input<string>;
    /**
     * List of pipeline IDs to create webhooks for triggering test executions
     */
    pipelines: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Project identifier
     */
    project: pulumi.Input<string>;
    /**
     * Provider connector for testing purposes
     */
    providerConnector: pulumi.Input<string>;
    provisionerType: pulumi.Input<string>;
    /**
     * Provisioner version for testing purposes
     */
    provisionerVersion: pulumi.Input<string>;
    /**
     * Pipeline ID to create webhooks for releases
     */
    releasePipeline?: pulumi.Input<string>;
    /**
     * Whether testing is enabled for the module
     */
    testingEnabled?: pulumi.Input<boolean>;
    /**
     * Testing metadata for the module
     */
    testingMetadata?: pulumi.Input<inputs.platform.GetInfraModuleTestingTestingMetadataArgs>;
    /**
     * Timestamp when the module was last modified
     */
    updated?: pulumi.Input<number>;
    /**
     * Versions of the module
     */
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}
