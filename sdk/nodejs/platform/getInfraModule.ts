// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Data source for retrieving modules from the module registry.
 *
 * ## Example Usage
 */
export function getInfraModule(args: GetInfraModuleArgs, opts?: pulumi.InvokeOptions): Promise<GetInfraModuleResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:platform/getInfraModule:getInfraModule", {
        "created": args.created,
        "description": args.description,
        "id": args.id,
        "name": args.name,
        "repository": args.repository,
        "repositoryBranch": args.repositoryBranch,
        "repositoryCommit": args.repositoryCommit,
        "repositoryConnector": args.repositoryConnector,
        "repositoryPath": args.repositoryPath,
        "repositoryUrl": args.repositoryUrl,
        "synced": args.synced,
        "system": args.system,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getInfraModule.
 */
export interface GetInfraModuleArgs {
    /**
     * Timestamp when the module was created
     */
    created?: number;
    /**
     * Description of the module
     */
    description?: string;
    /**
     * Identifier of the module
     */
    id: string;
    /**
     * Name of the module
     */
    name: string;
    /**
     * For account connectors, the repository where the module is stored
     */
    repository?: string;
    /**
     * Repository Branch in which the module should be accessed
     */
    repositoryBranch?: string;
    /**
     * Repository Commit in which the module should be accessed
     */
    repositoryCommit?: string;
    /**
     * Repository Connector is the reference to the connector for the repository
     */
    repositoryConnector?: string;
    /**
     * Repository Path is the path in which the module resides
     */
    repositoryPath?: string;
    /**
     * URL where the module is stored
     */
    repositoryUrl?: string;
    /**
     * Timestamp when the module was last synced
     */
    synced?: number;
    /**
     * Provider of the module
     */
    system: string;
    /**
     * Tags associated with the module
     */
    tags?: string;
}

/**
 * A collection of values returned by getInfraModule.
 */
export interface GetInfraModuleResult {
    /**
     * Timestamp when the module was created
     */
    readonly created: number;
    /**
     * Description of the module
     */
    readonly description: string;
    /**
     * Identifier of the module
     */
    readonly id: string;
    /**
     * Name of the module
     */
    readonly name: string;
    /**
     * For account connectors, the repository where the module is stored
     */
    readonly repository: string;
    /**
     * Repository Branch in which the module should be accessed
     */
    readonly repositoryBranch: string;
    /**
     * Repository Commit in which the module should be accessed
     */
    readonly repositoryCommit: string;
    /**
     * Repository Connector is the reference to the connector for the repository
     */
    readonly repositoryConnector: string;
    /**
     * Repository Path is the path in which the module resides
     */
    readonly repositoryPath: string;
    /**
     * URL where the module is stored
     */
    readonly repositoryUrl: string;
    /**
     * Timestamp when the module was last synced
     */
    readonly synced: number;
    /**
     * Provider of the module
     */
    readonly system: string;
    /**
     * Tags associated with the module
     */
    readonly tags: string;
}
/**
 * Data source for retrieving modules from the module registry.
 *
 * ## Example Usage
 */
export function getInfraModuleOutput(args: GetInfraModuleOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetInfraModuleResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:platform/getInfraModule:getInfraModule", {
        "created": args.created,
        "description": args.description,
        "id": args.id,
        "name": args.name,
        "repository": args.repository,
        "repositoryBranch": args.repositoryBranch,
        "repositoryCommit": args.repositoryCommit,
        "repositoryConnector": args.repositoryConnector,
        "repositoryPath": args.repositoryPath,
        "repositoryUrl": args.repositoryUrl,
        "synced": args.synced,
        "system": args.system,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getInfraModule.
 */
export interface GetInfraModuleOutputArgs {
    /**
     * Timestamp when the module was created
     */
    created?: pulumi.Input<number>;
    /**
     * Description of the module
     */
    description?: pulumi.Input<string>;
    /**
     * Identifier of the module
     */
    id: pulumi.Input<string>;
    /**
     * Name of the module
     */
    name: pulumi.Input<string>;
    /**
     * For account connectors, the repository where the module is stored
     */
    repository?: pulumi.Input<string>;
    /**
     * Repository Branch in which the module should be accessed
     */
    repositoryBranch?: pulumi.Input<string>;
    /**
     * Repository Commit in which the module should be accessed
     */
    repositoryCommit?: pulumi.Input<string>;
    /**
     * Repository Connector is the reference to the connector for the repository
     */
    repositoryConnector?: pulumi.Input<string>;
    /**
     * Repository Path is the path in which the module resides
     */
    repositoryPath?: pulumi.Input<string>;
    /**
     * URL where the module is stored
     */
    repositoryUrl?: pulumi.Input<string>;
    /**
     * Timestamp when the module was last synced
     */
    synced?: pulumi.Input<number>;
    /**
     * Provider of the module
     */
    system: pulumi.Input<string>;
    /**
     * Tags associated with the module
     */
    tags?: pulumi.Input<string>;
}
