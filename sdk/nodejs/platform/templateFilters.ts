// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating a Harness Template Filters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const test = new harness.platform.TemplateFilters("test", {
 *     identifier: "identifier",
 *     name: "name",
 *     orgId: "org_id",
 *     projectId: "project_id",
 *     type: "Template",
 *     filterProperties: {
 *         tags: ["foo:bar"],
 *         filterType: "Template",
 *     },
 *     filterVisibility: "EveryOne",
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import account level template filter
 *
 * ```sh
 * $ pulumi import harness:platform/templateFilters:TemplateFilters example <filter_id>/<type>
 * ```
 *
 * Import org level template filter
 *
 * ```sh
 * $ pulumi import harness:platform/templateFilters:TemplateFilters example <org_id>/<filter_id>/<type>
 * ```
 *
 * Import project level template filter
 *
 * ```sh
 * $ pulumi import harness:platform/templateFilters:TemplateFilters example <org_id>/<project_id>/<filter_id>/<type>
 * ```
 */
export class TemplateFilters extends pulumi.CustomResource {
    /**
     * Get an existing TemplateFilters resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TemplateFiltersState, opts?: pulumi.CustomResourceOptions): TemplateFilters {
        return new TemplateFilters(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/templateFilters:TemplateFilters';

    /**
     * Returns true if the given object is an instance of TemplateFilters.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TemplateFilters {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TemplateFilters.__pulumiType;
    }

    /**
     * Properties of the filters entity defined in Harness.
     */
    declare public readonly filterProperties: pulumi.Output<outputs.platform.TemplateFiltersFilterProperties>;
    /**
     * Only accept values "EveryOne" and "OnlyCreator". This indicates visibility of filters. By default, everyone can view this filter.
     */
    declare public readonly filterVisibility: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the resource.
     */
    declare public readonly identifier: pulumi.Output<string>;
    /**
     * Name of the template filters.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Organization Identifier for the Entity.
     */
    declare public readonly orgId: pulumi.Output<string | undefined>;
    /**
     * Project Identifier for the Entity.
     */
    declare public readonly projectId: pulumi.Output<string | undefined>;
    /**
     * Type of template filters. Currently supported types are { Template}
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a TemplateFilters resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TemplateFiltersArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TemplateFiltersArgs | TemplateFiltersState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TemplateFiltersState | undefined;
            resourceInputs["filterProperties"] = state?.filterProperties;
            resourceInputs["filterVisibility"] = state?.filterVisibility;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as TemplateFiltersArgs | undefined;
            if (args?.filterProperties === undefined && !opts.urn) {
                throw new Error("Missing required property 'filterProperties'");
            }
            if (args?.identifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["filterProperties"] = args?.filterProperties;
            resourceInputs["filterVisibility"] = args?.filterVisibility;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["type"] = args?.type;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TemplateFilters.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TemplateFilters resources.
 */
export interface TemplateFiltersState {
    /**
     * Properties of the filters entity defined in Harness.
     */
    filterProperties?: pulumi.Input<inputs.platform.TemplateFiltersFilterProperties>;
    /**
     * Only accept values "EveryOne" and "OnlyCreator". This indicates visibility of filters. By default, everyone can view this filter.
     */
    filterVisibility?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Name of the template filters.
     */
    name?: pulumi.Input<string>;
    /**
     * Organization Identifier for the Entity.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Project Identifier for the Entity.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Type of template filters. Currently supported types are { Template}
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TemplateFilters resource.
 */
export interface TemplateFiltersArgs {
    /**
     * Properties of the filters entity defined in Harness.
     */
    filterProperties: pulumi.Input<inputs.platform.TemplateFiltersFilterProperties>;
    /**
     * Only accept values "EveryOne" and "OnlyCreator". This indicates visibility of filters. By default, everyone can view this filter.
     */
    filterVisibility?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of the template filters.
     */
    name?: pulumi.Input<string>;
    /**
     * Organization Identifier for the Entity.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Project Identifier for the Entity.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Type of template filters. Currently supported types are { Template}
     */
    type: pulumi.Input<string>;
}
