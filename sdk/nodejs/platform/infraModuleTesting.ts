// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import harness:platform/infraModuleTesting:InfraModuleTesting example <module_id>
 * ```
 */
export class InfraModuleTesting extends pulumi.CustomResource {
    /**
     * Get an existing InfraModuleTesting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InfraModuleTestingState, opts?: pulumi.CustomResourceOptions): InfraModuleTesting {
        return new InfraModuleTesting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/infraModuleTesting:InfraModuleTesting';

    /**
     * Returns true if the given object is an instance of InfraModuleTesting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InfraModuleTesting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InfraModuleTesting.__pulumiType;
    }

    /**
     * Account that owns the module
     */
    declare public /*out*/ readonly account: pulumi.Output<string>;
    /**
     * Timestamp when the module was created
     */
    declare public /*out*/ readonly created: pulumi.Output<number>;
    /**
     * Description of the module
     */
    declare public /*out*/ readonly description: pulumi.Output<string>;
    /**
     * Git Tag Style
     */
    declare public /*out*/ readonly gitTagStyle: pulumi.Output<string>;
    /**
     * Error while retrieving the module
     */
    declare public /*out*/ readonly moduleError: pulumi.Output<string>;
    /**
     * Identifier of the module to enable testing for
     */
    declare public readonly moduleId: pulumi.Output<string>;
    /**
     * Name of the module
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * Organization identifier
     */
    declare public readonly org: pulumi.Output<string>;
    /**
     * List of pipeline IDs to create webhooks for triggering test executions
     */
    declare public readonly pipelines: pulumi.Output<string[]>;
    /**
     * Project identifier
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * Provider connector for testing purposes
     */
    declare public readonly providerConnector: pulumi.Output<string>;
    declare public readonly provisionerType: pulumi.Output<string>;
    /**
     * Provisioner version for testing purposes
     */
    declare public readonly provisionerVersion: pulumi.Output<string>;
    /**
     * Pipeline ID to create webhooks for releases
     */
    declare public readonly releasePipeline: pulumi.Output<string | undefined>;
    /**
     * For account connectors, the repository where the module is stored
     */
    declare public /*out*/ readonly repository: pulumi.Output<string>;
    /**
     * Repository Branch in which the module should be accessed
     */
    declare public /*out*/ readonly repositoryBranch: pulumi.Output<string>;
    /**
     * Repository Commit in which the module should be accessed
     */
    declare public /*out*/ readonly repositoryCommit: pulumi.Output<string>;
    /**
     * Repository Connector is the reference to the connector for the repository
     */
    declare public /*out*/ readonly repositoryConnector: pulumi.Output<string>;
    /**
     * Repository Path is the path in which the module resides
     */
    declare public /*out*/ readonly repositoryPath: pulumi.Output<string>;
    /**
     * URL where the module is stored
     */
    declare public /*out*/ readonly repositoryUrl: pulumi.Output<string>;
    /**
     * Timestamp when the module was last synced
     */
    declare public /*out*/ readonly synced: pulumi.Output<number>;
    /**
     * Provider of the module
     */
    declare public /*out*/ readonly system: pulumi.Output<string>;
    /**
     * Tags associated with the module
     */
    declare public /*out*/ readonly tags: pulumi.Output<string>;
    /**
     * Whether testing is enabled for the module
     */
    declare public readonly testingEnabled: pulumi.Output<boolean>;
    /**
     * Testing metadata for the module
     */
    declare public readonly testingMetadata: pulumi.Output<outputs.platform.InfraModuleTestingTestingMetadata>;
    /**
     * Timestamp when the module was last modified
     */
    declare public readonly updated: pulumi.Output<number>;
    /**
     * Versions of the module
     */
    declare public readonly versions: pulumi.Output<string[]>;

    /**
     * Create a InfraModuleTesting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InfraModuleTestingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InfraModuleTestingArgs | InfraModuleTestingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InfraModuleTestingState | undefined;
            resourceInputs["account"] = state?.account;
            resourceInputs["created"] = state?.created;
            resourceInputs["description"] = state?.description;
            resourceInputs["gitTagStyle"] = state?.gitTagStyle;
            resourceInputs["moduleError"] = state?.moduleError;
            resourceInputs["moduleId"] = state?.moduleId;
            resourceInputs["name"] = state?.name;
            resourceInputs["org"] = state?.org;
            resourceInputs["pipelines"] = state?.pipelines;
            resourceInputs["project"] = state?.project;
            resourceInputs["providerConnector"] = state?.providerConnector;
            resourceInputs["provisionerType"] = state?.provisionerType;
            resourceInputs["provisionerVersion"] = state?.provisionerVersion;
            resourceInputs["releasePipeline"] = state?.releasePipeline;
            resourceInputs["repository"] = state?.repository;
            resourceInputs["repositoryBranch"] = state?.repositoryBranch;
            resourceInputs["repositoryCommit"] = state?.repositoryCommit;
            resourceInputs["repositoryConnector"] = state?.repositoryConnector;
            resourceInputs["repositoryPath"] = state?.repositoryPath;
            resourceInputs["repositoryUrl"] = state?.repositoryUrl;
            resourceInputs["synced"] = state?.synced;
            resourceInputs["system"] = state?.system;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["testingEnabled"] = state?.testingEnabled;
            resourceInputs["testingMetadata"] = state?.testingMetadata;
            resourceInputs["updated"] = state?.updated;
            resourceInputs["versions"] = state?.versions;
        } else {
            const args = argsOrState as InfraModuleTestingArgs | undefined;
            if (args?.moduleId === undefined && !opts.urn) {
                throw new Error("Missing required property 'moduleId'");
            }
            if (args?.org === undefined && !opts.urn) {
                throw new Error("Missing required property 'org'");
            }
            if (args?.pipelines === undefined && !opts.urn) {
                throw new Error("Missing required property 'pipelines'");
            }
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if (args?.providerConnector === undefined && !opts.urn) {
                throw new Error("Missing required property 'providerConnector'");
            }
            if (args?.provisionerType === undefined && !opts.urn) {
                throw new Error("Missing required property 'provisionerType'");
            }
            if (args?.provisionerVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'provisionerVersion'");
            }
            resourceInputs["moduleId"] = args?.moduleId;
            resourceInputs["org"] = args?.org;
            resourceInputs["pipelines"] = args?.pipelines;
            resourceInputs["project"] = args?.project;
            resourceInputs["providerConnector"] = args?.providerConnector;
            resourceInputs["provisionerType"] = args?.provisionerType;
            resourceInputs["provisionerVersion"] = args?.provisionerVersion;
            resourceInputs["releasePipeline"] = args?.releasePipeline;
            resourceInputs["testingEnabled"] = args?.testingEnabled;
            resourceInputs["testingMetadata"] = args?.testingMetadata;
            resourceInputs["updated"] = args?.updated;
            resourceInputs["versions"] = args?.versions;
            resourceInputs["account"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["gitTagStyle"] = undefined /*out*/;
            resourceInputs["moduleError"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["repository"] = undefined /*out*/;
            resourceInputs["repositoryBranch"] = undefined /*out*/;
            resourceInputs["repositoryCommit"] = undefined /*out*/;
            resourceInputs["repositoryConnector"] = undefined /*out*/;
            resourceInputs["repositoryPath"] = undefined /*out*/;
            resourceInputs["repositoryUrl"] = undefined /*out*/;
            resourceInputs["synced"] = undefined /*out*/;
            resourceInputs["system"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InfraModuleTesting.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InfraModuleTesting resources.
 */
export interface InfraModuleTestingState {
    /**
     * Account that owns the module
     */
    account?: pulumi.Input<string>;
    /**
     * Timestamp when the module was created
     */
    created?: pulumi.Input<number>;
    /**
     * Description of the module
     */
    description?: pulumi.Input<string>;
    /**
     * Git Tag Style
     */
    gitTagStyle?: pulumi.Input<string>;
    /**
     * Error while retrieving the module
     */
    moduleError?: pulumi.Input<string>;
    /**
     * Identifier of the module to enable testing for
     */
    moduleId?: pulumi.Input<string>;
    /**
     * Name of the module
     */
    name?: pulumi.Input<string>;
    /**
     * Organization identifier
     */
    org?: pulumi.Input<string>;
    /**
     * List of pipeline IDs to create webhooks for triggering test executions
     */
    pipelines?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Project identifier
     */
    project?: pulumi.Input<string>;
    /**
     * Provider connector for testing purposes
     */
    providerConnector?: pulumi.Input<string>;
    provisionerType?: pulumi.Input<string>;
    /**
     * Provisioner version for testing purposes
     */
    provisionerVersion?: pulumi.Input<string>;
    /**
     * Pipeline ID to create webhooks for releases
     */
    releasePipeline?: pulumi.Input<string>;
    /**
     * For account connectors, the repository where the module is stored
     */
    repository?: pulumi.Input<string>;
    /**
     * Repository Branch in which the module should be accessed
     */
    repositoryBranch?: pulumi.Input<string>;
    /**
     * Repository Commit in which the module should be accessed
     */
    repositoryCommit?: pulumi.Input<string>;
    /**
     * Repository Connector is the reference to the connector for the repository
     */
    repositoryConnector?: pulumi.Input<string>;
    /**
     * Repository Path is the path in which the module resides
     */
    repositoryPath?: pulumi.Input<string>;
    /**
     * URL where the module is stored
     */
    repositoryUrl?: pulumi.Input<string>;
    /**
     * Timestamp when the module was last synced
     */
    synced?: pulumi.Input<number>;
    /**
     * Provider of the module
     */
    system?: pulumi.Input<string>;
    /**
     * Tags associated with the module
     */
    tags?: pulumi.Input<string>;
    /**
     * Whether testing is enabled for the module
     */
    testingEnabled?: pulumi.Input<boolean>;
    /**
     * Testing metadata for the module
     */
    testingMetadata?: pulumi.Input<inputs.platform.InfraModuleTestingTestingMetadata>;
    /**
     * Timestamp when the module was last modified
     */
    updated?: pulumi.Input<number>;
    /**
     * Versions of the module
     */
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a InfraModuleTesting resource.
 */
export interface InfraModuleTestingArgs {
    /**
     * Identifier of the module to enable testing for
     */
    moduleId: pulumi.Input<string>;
    /**
     * Organization identifier
     */
    org: pulumi.Input<string>;
    /**
     * List of pipeline IDs to create webhooks for triggering test executions
     */
    pipelines: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Project identifier
     */
    project: pulumi.Input<string>;
    /**
     * Provider connector for testing purposes
     */
    providerConnector: pulumi.Input<string>;
    provisionerType: pulumi.Input<string>;
    /**
     * Provisioner version for testing purposes
     */
    provisionerVersion: pulumi.Input<string>;
    /**
     * Pipeline ID to create webhooks for releases
     */
    releasePipeline?: pulumi.Input<string>;
    /**
     * Whether testing is enabled for the module
     */
    testingEnabled?: pulumi.Input<boolean>;
    /**
     * Testing metadata for the module
     */
    testingMetadata?: pulumi.Input<inputs.platform.InfraModuleTestingTestingMetadata>;
    /**
     * Timestamp when the module was last modified
     */
    updated?: pulumi.Input<number>;
    /**
     * Versions of the module
     */
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}
