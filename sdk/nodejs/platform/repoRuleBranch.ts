// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating a Harness Repo Branch Rule.
 */
export class RepoRuleBranch extends pulumi.CustomResource {
    /**
     * Get an existing RepoRuleBranch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepoRuleBranchState, opts?: pulumi.CustomResourceOptions): RepoRuleBranch {
        return new RepoRuleBranch(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/repoRuleBranch:RepoRuleBranch';

    /**
     * Returns true if the given object is an instance of RepoRuleBranch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RepoRuleBranch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepoRuleBranch.__pulumiType;
    }

    /**
     * List of users who can bypass this rule.
     */
    public readonly bypasses!: pulumi.Output<outputs.platform.RepoRuleBranchBypass[]>;
    /**
     * Timestamp when the rule was created.
     */
    public /*out*/ readonly created!: pulumi.Output<number>;
    /**
     * ID of the user who created the rule.
     */
    public /*out*/ readonly createdBy!: pulumi.Output<number>;
    /**
     * Description of the rule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Identifier of the rule.
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * Unique identifier of the organization.
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * Pattern of branch to which rule will apply.
     */
    public readonly patterns!: pulumi.Output<outputs.platform.RepoRuleBranchPattern[] | undefined>;
    /**
     * Policies to be applied for this rule.
     */
    public readonly policies!: pulumi.Output<outputs.platform.RepoRuleBranchPolicy[]>;
    /**
     * Unique identifier of the project.
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * Repo identifier of the repository.
     */
    public readonly repoIdentifier!: pulumi.Output<string>;
    /**
     * State of the rule (active, disable, monitor).
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * Timestamp when the rule was updated.
     */
    public /*out*/ readonly updated!: pulumi.Output<number>;
    /**
     * ID of the user who updated the rule.
     */
    public /*out*/ readonly updatedBy!: pulumi.Output<number>;

    /**
     * Create a RepoRuleBranch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepoRuleBranchArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepoRuleBranchArgs | RepoRuleBranchState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepoRuleBranchState | undefined;
            resourceInputs["bypasses"] = state ? state.bypasses : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["patterns"] = state ? state.patterns : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["repoIdentifier"] = state ? state.repoIdentifier : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["updated"] = state ? state.updated : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
        } else {
            const args = argsOrState as RepoRuleBranchArgs | undefined;
            if ((!args || args.bypasses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bypasses'");
            }
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.policies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policies'");
            }
            if ((!args || args.repoIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repoIdentifier'");
            }
            if ((!args || args.state === undefined) && !opts.urn) {
                throw new Error("Missing required property 'state'");
            }
            resourceInputs["bypasses"] = args ? args.bypasses : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["patterns"] = args ? args.patterns : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["repoIdentifier"] = args ? args.repoIdentifier : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RepoRuleBranch.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RepoRuleBranch resources.
 */
export interface RepoRuleBranchState {
    /**
     * List of users who can bypass this rule.
     */
    bypasses?: pulumi.Input<pulumi.Input<inputs.platform.RepoRuleBranchBypass>[]>;
    /**
     * Timestamp when the rule was created.
     */
    created?: pulumi.Input<number>;
    /**
     * ID of the user who created the rule.
     */
    createdBy?: pulumi.Input<number>;
    /**
     * Description of the rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Identifier of the rule.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Pattern of branch to which rule will apply.
     */
    patterns?: pulumi.Input<pulumi.Input<inputs.platform.RepoRuleBranchPattern>[]>;
    /**
     * Policies to be applied for this rule.
     */
    policies?: pulumi.Input<pulumi.Input<inputs.platform.RepoRuleBranchPolicy>[]>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Repo identifier of the repository.
     */
    repoIdentifier?: pulumi.Input<string>;
    /**
     * State of the rule (active, disable, monitor).
     */
    state?: pulumi.Input<string>;
    /**
     * Timestamp when the rule was updated.
     */
    updated?: pulumi.Input<number>;
    /**
     * ID of the user who updated the rule.
     */
    updatedBy?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a RepoRuleBranch resource.
 */
export interface RepoRuleBranchArgs {
    /**
     * List of users who can bypass this rule.
     */
    bypasses: pulumi.Input<pulumi.Input<inputs.platform.RepoRuleBranchBypass>[]>;
    /**
     * Description of the rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Identifier of the rule.
     */
    identifier: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Pattern of branch to which rule will apply.
     */
    patterns?: pulumi.Input<pulumi.Input<inputs.platform.RepoRuleBranchPattern>[]>;
    /**
     * Policies to be applied for this rule.
     */
    policies: pulumi.Input<pulumi.Input<inputs.platform.RepoRuleBranchPolicy>[]>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Repo identifier of the repository.
     */
    repoIdentifier: pulumi.Input<string>;
    /**
     * State of the rule (active, disable, monitor).
     */
    state: pulumi.Input<string>;
}
