// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating and managing Harness Registries.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * // Example of a Virtual Registry
 * const virtualRegistry = new harness.platform.HarRegistry("virtual_registry", {
 *     identifier: "virtual_docker_registry",
 *     description: "Virtual Docker Registry",
 *     spaceRef: "accountId/orgId/projectId",
 *     packageType: "DOCKER",
 *     configs: [{
 *         type: "VIRTUAL",
 *         upstreamProxies: [
 *             "registry1",
 *             "registry2",
 *         ],
 *     }],
 *     parentRef: "accountId/orgId/projectId",
 * });
 * // Example of an Upstream Registry with Authentication
 * const upstreamRegistry = new harness.platform.HarRegistry("upstream_registry", {
 *     identifier: "upstream_helm_registry",
 *     description: "Upstream Helm Registry",
 *     spaceRef: "accountId/orgId/projectId",
 *     packageType: "HELM",
 *     configs: [{
 *         type: "UPSTREAM",
 *         source: "CUSTOM",
 *         url: "https://helm.sh",
 *         auths: [{
 *             authType: "UserPassword",
 *             userName: "registry_user",
 *             secretIdentifier: "registry_password",
 *             secretSpacePath: "accountId/orgId/projectId",
 *         }],
 *     }],
 *     parentRef: "accountId/orgId/projectId",
 * });
 * ```
 */
export class HarRegistry extends pulumi.CustomResource {
    /**
     * Get an existing HarRegistry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HarRegistryState, opts?: pulumi.CustomResourceOptions): HarRegistry {
        return new HarRegistry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/harRegistry:HarRegistry';

    /**
     * Returns true if the given object is an instance of HarRegistry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HarRegistry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HarRegistry.__pulumiType;
    }

    /**
     * Allowed pattern for the registry
     */
    public readonly allowedPatterns!: pulumi.Output<string[] | undefined>;
    /**
     * Blocked pattern for the registry
     */
    public readonly blockedPatterns!: pulumi.Output<string[] | undefined>;
    /**
     * Configuration for the registry
     */
    public readonly configs!: pulumi.Output<outputs.platform.HarRegistryConfig[]>;
    /**
     * Timestamp when the registry was created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Description of the registry
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the registry
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * Type of package (DOCKER, HELM, etc.)
     */
    public readonly packageType!: pulumi.Output<string>;
    /**
     * Parent reference for the registry
     */
    public readonly parentRef!: pulumi.Output<string | undefined>;
    /**
     * Space reference for the registry
     */
    public readonly spaceRef!: pulumi.Output<string | undefined>;
    /**
     * URL of the registry
     */
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a HarRegistry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HarRegistryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HarRegistryArgs | HarRegistryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HarRegistryState | undefined;
            resourceInputs["allowedPatterns"] = state ? state.allowedPatterns : undefined;
            resourceInputs["blockedPatterns"] = state ? state.blockedPatterns : undefined;
            resourceInputs["configs"] = state ? state.configs : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["packageType"] = state ? state.packageType : undefined;
            resourceInputs["parentRef"] = state ? state.parentRef : undefined;
            resourceInputs["spaceRef"] = state ? state.spaceRef : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as HarRegistryArgs | undefined;
            if ((!args || args.configs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configs'");
            }
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.packageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'packageType'");
            }
            resourceInputs["allowedPatterns"] = args ? args.allowedPatterns : undefined;
            resourceInputs["blockedPatterns"] = args ? args.blockedPatterns : undefined;
            resourceInputs["configs"] = args ? args.configs : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["packageType"] = args ? args.packageType : undefined;
            resourceInputs["parentRef"] = args ? args.parentRef : undefined;
            resourceInputs["spaceRef"] = args ? args.spaceRef : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HarRegistry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HarRegistry resources.
 */
export interface HarRegistryState {
    /**
     * Allowed pattern for the registry
     */
    allowedPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Blocked pattern for the registry
     */
    blockedPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration for the registry
     */
    configs?: pulumi.Input<pulumi.Input<inputs.platform.HarRegistryConfig>[]>;
    /**
     * Timestamp when the registry was created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Description of the registry
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier of the registry
     */
    identifier?: pulumi.Input<string>;
    /**
     * Type of package (DOCKER, HELM, etc.)
     */
    packageType?: pulumi.Input<string>;
    /**
     * Parent reference for the registry
     */
    parentRef?: pulumi.Input<string>;
    /**
     * Space reference for the registry
     */
    spaceRef?: pulumi.Input<string>;
    /**
     * URL of the registry
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HarRegistry resource.
 */
export interface HarRegistryArgs {
    /**
     * Allowed pattern for the registry
     */
    allowedPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Blocked pattern for the registry
     */
    blockedPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration for the registry
     */
    configs: pulumi.Input<pulumi.Input<inputs.platform.HarRegistryConfig>[]>;
    /**
     * Description of the registry
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier of the registry
     */
    identifier: pulumi.Input<string>;
    /**
     * Type of package (DOCKER, HELM, etc.)
     */
    packageType: pulumi.Input<string>;
    /**
     * Parent reference for the registry
     */
    parentRef?: pulumi.Input<string>;
    /**
     * Space reference for the registry
     */
    spaceRef?: pulumi.Input<string>;
}
