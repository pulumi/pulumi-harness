// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating role assignments in Harness.
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import account level role assignments
 *
 * ```sh
 * $ pulumi import harness:platform/roleAssignments:RoleAssignments example <role_assignments_id>
 * ```
 *
 * Import org level role assignments
 *
 * ```sh
 * $ pulumi import harness:platform/roleAssignments:RoleAssignments example <ord_id>/<role_assignments_id>
 * ```
 *
 * Import project level role assignments
 *
 * ```sh
 * $ pulumi import harness:platform/roleAssignments:RoleAssignments example <org_id>/<project_id>/<role_assignments_id>
 * ```
 */
export class RoleAssignments extends pulumi.CustomResource {
    /**
     * Get an existing RoleAssignments resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleAssignmentsState, opts?: pulumi.CustomResourceOptions): RoleAssignments {
        return new RoleAssignments(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/roleAssignments:RoleAssignments';

    /**
     * Returns true if the given object is an instance of RoleAssignments.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RoleAssignments {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoleAssignments.__pulumiType;
    }

    /**
     * Disabled or not.
     */
    declare public readonly disabled: pulumi.Output<boolean | undefined>;
    /**
     * Identifier for role assignment.
     */
    declare public readonly identifier: pulumi.Output<string>;
    /**
     * Managed or not.
     */
    declare public readonly managed: pulumi.Output<boolean | undefined>;
    /**
     * Org identifier.
     */
    declare public readonly orgId: pulumi.Output<string | undefined>;
    /**
     * Principal.
     */
    declare public readonly principals: pulumi.Output<outputs.platform.RoleAssignmentsPrincipal[]>;
    /**
     * Project Identifier
     */
    declare public readonly projectId: pulumi.Output<string | undefined>;
    /**
     * Resource group identifier.
     */
    declare public readonly resourceGroupIdentifier: pulumi.Output<string>;
    /**
     * Role identifier.
     */
    declare public readonly roleIdentifier: pulumi.Output<string>;

    /**
     * Create a RoleAssignments resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleAssignmentsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleAssignmentsArgs | RoleAssignmentsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoleAssignmentsState | undefined;
            resourceInputs["disabled"] = state?.disabled;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["managed"] = state?.managed;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["principals"] = state?.principals;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["resourceGroupIdentifier"] = state?.resourceGroupIdentifier;
            resourceInputs["roleIdentifier"] = state?.roleIdentifier;
        } else {
            const args = argsOrState as RoleAssignmentsArgs | undefined;
            if (args?.principals === undefined && !opts.urn) {
                throw new Error("Missing required property 'principals'");
            }
            if (args?.resourceGroupIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupIdentifier'");
            }
            if (args?.roleIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'roleIdentifier'");
            }
            resourceInputs["disabled"] = args?.disabled;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["managed"] = args?.managed;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["principals"] = args?.principals;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["resourceGroupIdentifier"] = args?.resourceGroupIdentifier;
            resourceInputs["roleIdentifier"] = args?.roleIdentifier;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RoleAssignments.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RoleAssignments resources.
 */
export interface RoleAssignmentsState {
    /**
     * Disabled or not.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Identifier for role assignment.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Managed or not.
     */
    managed?: pulumi.Input<boolean>;
    /**
     * Org identifier.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Principal.
     */
    principals?: pulumi.Input<pulumi.Input<inputs.platform.RoleAssignmentsPrincipal>[]>;
    /**
     * Project Identifier
     */
    projectId?: pulumi.Input<string>;
    /**
     * Resource group identifier.
     */
    resourceGroupIdentifier?: pulumi.Input<string>;
    /**
     * Role identifier.
     */
    roleIdentifier?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RoleAssignments resource.
 */
export interface RoleAssignmentsArgs {
    /**
     * Disabled or not.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Identifier for role assignment.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Managed or not.
     */
    managed?: pulumi.Input<boolean>;
    /**
     * Org identifier.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Principal.
     */
    principals: pulumi.Input<pulumi.Input<inputs.platform.RoleAssignmentsPrincipal>[]>;
    /**
     * Project Identifier
     */
    projectId?: pulumi.Input<string>;
    /**
     * Resource group identifier.
     */
    resourceGroupIdentifier: pulumi.Input<string>;
    /**
     * Role identifier.
     */
    roleIdentifier: pulumi.Input<string>;
}
