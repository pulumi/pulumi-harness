// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for creating tokens.
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import account level token
 *
 * ```sh
 * $ pulumi import harness:platform/token:Token harness_platform_token <parent_id>/<apikey_id>/<apikey_type>/<token_id>
 * ```
 *
 * Import org level token
 *
 * ```sh
 * $ pulumi import harness:platform/token:Token harness_platform_token <org_id>/<parent_id>/<apikey_id>/<apikey_type>/<token_id>
 * ```
 *
 * Import project level token
 *
 * ```sh
 * $ pulumi import harness:platform/token:Token harness_platform_token <org_id>/<project_id>/<parent_id>/<apikey_id>/<apikey_type>/<token_id>
 * ```
 */
export class Token extends pulumi.CustomResource {
    /**
     * Get an existing Token resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TokenState, opts?: pulumi.CustomResourceOptions): Token {
        return new Token(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/token:Token';

    /**
     * Returns true if the given object is an instance of Token.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Token {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Token.__pulumiType;
    }

    /**
     * Account Identifier for the Entity
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * Identifier of the API Key
     */
    declare public readonly apikeyId: pulumi.Output<string>;
    /**
     * Type of the API Key
     */
    declare public readonly apikeyType: pulumi.Output<string>;
    /**
     * Description of the resource.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Email Id of the user who created the Token
     */
    declare public readonly email: pulumi.Output<string | undefined>;
    /**
     * Encoded password of the Token
     */
    declare public readonly encodedPassword: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the resource.
     */
    declare public readonly identifier: pulumi.Output<string>;
    /**
     * Name of the resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Unique identifier of the organization.
     */
    declare public readonly orgId: pulumi.Output<string | undefined>;
    /**
     * Parent Entity Identifier of the API Key
     */
    declare public readonly parentId: pulumi.Output<string>;
    /**
     * Unique identifier of the project.
     */
    declare public readonly projectId: pulumi.Output<string | undefined>;
    /**
     * Scheduled expiry time in milliseconds
     */
    declare public readonly scheduledExpireTime: pulumi.Output<number>;
    /**
     * Tags to associate with the resource.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * Name of the user who created the Token
     */
    declare public readonly username: pulumi.Output<string | undefined>;
    /**
     * Boolean value to indicate if Token is valid or not.
     */
    declare public readonly valid: pulumi.Output<boolean>;
    /**
     * This is the time from which the Token is valid. The time is in milliseconds
     */
    declare public readonly validFrom: pulumi.Output<number>;
    /**
     * This is the time till which the Token is valid. The time is in milliseconds
     */
    declare public readonly validTo: pulumi.Output<number>;
    /**
     * Value of the Token
     */
    declare public /*out*/ readonly value: pulumi.Output<string>;

    /**
     * Create a Token resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TokenArgs | TokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TokenState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["apikeyId"] = state?.apikeyId;
            resourceInputs["apikeyType"] = state?.apikeyType;
            resourceInputs["description"] = state?.description;
            resourceInputs["email"] = state?.email;
            resourceInputs["encodedPassword"] = state?.encodedPassword;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["parentId"] = state?.parentId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["scheduledExpireTime"] = state?.scheduledExpireTime;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["username"] = state?.username;
            resourceInputs["valid"] = state?.valid;
            resourceInputs["validFrom"] = state?.validFrom;
            resourceInputs["validTo"] = state?.validTo;
            resourceInputs["value"] = state?.value;
        } else {
            const args = argsOrState as TokenArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.apikeyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'apikeyId'");
            }
            if (args?.apikeyType === undefined && !opts.urn) {
                throw new Error("Missing required property 'apikeyType'");
            }
            if (args?.identifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if (args?.parentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'parentId'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["apikeyId"] = args?.apikeyId;
            resourceInputs["apikeyType"] = args?.apikeyType;
            resourceInputs["description"] = args?.description;
            resourceInputs["email"] = args?.email;
            resourceInputs["encodedPassword"] = args?.encodedPassword;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["parentId"] = args?.parentId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["scheduledExpireTime"] = args?.scheduledExpireTime;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["username"] = args?.username;
            resourceInputs["valid"] = args?.valid;
            resourceInputs["validFrom"] = args?.validFrom;
            resourceInputs["validTo"] = args?.validTo;
            resourceInputs["value"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["value"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Token.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Token resources.
 */
export interface TokenState {
    /**
     * Account Identifier for the Entity
     */
    accountId?: pulumi.Input<string>;
    /**
     * Identifier of the API Key
     */
    apikeyId?: pulumi.Input<string>;
    /**
     * Type of the API Key
     */
    apikeyType?: pulumi.Input<string>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Email Id of the user who created the Token
     */
    email?: pulumi.Input<string>;
    /**
     * Encoded password of the Token
     */
    encodedPassword?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Parent Entity Identifier of the API Key
     */
    parentId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Scheduled expiry time in milliseconds
     */
    scheduledExpireTime?: pulumi.Input<number>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the user who created the Token
     */
    username?: pulumi.Input<string>;
    /**
     * Boolean value to indicate if Token is valid or not.
     */
    valid?: pulumi.Input<boolean>;
    /**
     * This is the time from which the Token is valid. The time is in milliseconds
     */
    validFrom?: pulumi.Input<number>;
    /**
     * This is the time till which the Token is valid. The time is in milliseconds
     */
    validTo?: pulumi.Input<number>;
    /**
     * Value of the Token
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Token resource.
 */
export interface TokenArgs {
    /**
     * Account Identifier for the Entity
     */
    accountId: pulumi.Input<string>;
    /**
     * Identifier of the API Key
     */
    apikeyId: pulumi.Input<string>;
    /**
     * Type of the API Key
     */
    apikeyType: pulumi.Input<string>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Email Id of the user who created the Token
     */
    email?: pulumi.Input<string>;
    /**
     * Encoded password of the Token
     */
    encodedPassword?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Parent Entity Identifier of the API Key
     */
    parentId: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Scheduled expiry time in milliseconds
     */
    scheduledExpireTime?: pulumi.Input<number>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the user who created the Token
     */
    username?: pulumi.Input<string>;
    /**
     * Boolean value to indicate if Token is valid or not.
     */
    valid?: pulumi.Input<boolean>;
    /**
     * This is the time from which the Token is valid. The time is in milliseconds
     */
    validFrom?: pulumi.Input<number>;
    /**
     * This is the time till which the Token is valid. The time is in milliseconds
     */
    validTo?: pulumi.Input<number>;
}
