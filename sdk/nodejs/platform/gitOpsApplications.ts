// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for managing a Harness Gitops Application.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = new harness.platform.GitOpsApplications("example", {
 *     applications: [{
 *         metadatas: [{
 *             annotations: {},
 *             labels: {
 *                 "harness.io/serviceRef": "service_id",
 *                 "harness.io/envRef": "env_id",
 *             },
 *             name: "appname123",
 *         }],
 *         specs: [{
 *             syncPolicies: [{
 *                 syncOptions: [
 *                     "PrunePropagationPolicy=undefined",
 *                     "CreateNamespace=false",
 *                     "Validate=false",
 *                     "skipSchemaValidations=false",
 *                     "autoCreateNamespace=false",
 *                     "pruneLast=false",
 *                     "applyOutofSyncOnly=false",
 *                     "Replace=false",
 *                     "retry=false",
 *                 ],
 *             }],
 *             sources: [{
 *                 targetRevision: "master",
 *                 repoUrl: "https://github.com/willycoll/argocd-example-apps.git",
 *                 path: "helm-guestbook",
 *             }],
 *             destinations: [{
 *                 namespace: "namespace-123",
 *                 server: "https://1.3.4.5",
 *             }],
 *         }],
 *     }],
 *     projectId: "project_id",
 *     orgId: "org_id",
 *     accountId: "account_id",
 *     identifier: "identifier",
 *     clusterId: "cluster_id",
 *     repoId: "repo_id",
 *     agentId: "agent_id",
 * });
 * ```
 *
 * ## Import
 *
 * Import a Project level Gitops Application
 *
 * ```sh
 * $ pulumi import harness:platform/gitOpsApplications:GitOpsApplications example <organization_id>/<project_id>/<agent_id>/<app_name>
 * ```
 */
export class GitOpsApplications extends pulumi.CustomResource {
    /**
     * Get an existing GitOpsApplications resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GitOpsApplicationsState, opts?: pulumi.CustomResourceOptions): GitOpsApplications {
        return new GitOpsApplications(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/gitOpsApplications:GitOpsApplications';

    /**
     * Returns true if the given object is an instance of GitOpsApplications.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GitOpsApplications {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GitOpsApplications.__pulumiType;
    }

    /**
     * Account identifier of the GitOps application.
     *
     * @deprecated This field is deprecated and will be removed in a future release.
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * Agent identifier of the GitOps application.
     */
    declare public readonly agentId: pulumi.Output<string>;
    /**
     * Definition of the GitOps application resource.
     */
    declare public readonly applications: pulumi.Output<outputs.platform.GitOpsApplicationsApplication[]>;
    /**
     * Cluster identifier of the GitOps application.
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * Identifier of the GitOps application.
     *
     * @deprecated This field is deprecated and will be removed in a future release.
     */
    declare public readonly identifier: pulumi.Output<string | undefined>;
    /**
     * Kind of the GitOps application.
     */
    declare public readonly kind: pulumi.Output<string | undefined>;
    /**
     * Name of the GitOps application.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Options to remove existing finalizers to delete the GitOps application.
     */
    declare public readonly optionsRemoveExistingFinalizers: pulumi.Output<boolean | undefined>;
    /**
     * Organization identifier of the GitOps application.
     */
    declare public readonly orgId: pulumi.Output<string>;
    /**
     * The ArgoCD project name corresponding to this GitOps application. An empty string means that the GitOps application belongs to the default project created by Harness.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * Project identifier of the GitOps application.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * Repository identifier of the GitOps application. When using skipRepoValidation, this field is not required.
     */
    declare public readonly repoId: pulumi.Output<string | undefined>;
    /**
     * List of repository identifiers of the GitOps for Multi-Source application. Not required if skipRepoValidation is set to true.
     */
    declare public readonly repoIds: pulumi.Output<string[] | undefined>;
    /**
     * Request cascade to delete the GitOps application.
     */
    declare public readonly requestCascade: pulumi.Output<boolean | undefined>;
    /**
     * Request propagation policy to delete the GitOps application.
     */
    declare public readonly requestPropagationPolicy: pulumi.Output<string | undefined>;
    /**
     * Indicates if the GitOps application should skip validate repository definition exists.
     */
    declare public readonly skipRepoValidation: pulumi.Output<boolean | undefined>;
    /**
     * Indicates if the GitOps application should be updated if existing and inserted if not.
     */
    declare public readonly upsert: pulumi.Output<boolean | undefined>;
    /**
     * Indicates if the GitOps application yaml has to be validated.
     */
    declare public readonly validate: pulumi.Output<boolean | undefined>;

    /**
     * Create a GitOpsApplications resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GitOpsApplicationsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GitOpsApplicationsArgs | GitOpsApplicationsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GitOpsApplicationsState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["agentId"] = state?.agentId;
            resourceInputs["applications"] = state?.applications;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["kind"] = state?.kind;
            resourceInputs["name"] = state?.name;
            resourceInputs["optionsRemoveExistingFinalizers"] = state?.optionsRemoveExistingFinalizers;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["project"] = state?.project;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["repoId"] = state?.repoId;
            resourceInputs["repoIds"] = state?.repoIds;
            resourceInputs["requestCascade"] = state?.requestCascade;
            resourceInputs["requestPropagationPolicy"] = state?.requestPropagationPolicy;
            resourceInputs["skipRepoValidation"] = state?.skipRepoValidation;
            resourceInputs["upsert"] = state?.upsert;
            resourceInputs["validate"] = state?.validate;
        } else {
            const args = argsOrState as GitOpsApplicationsArgs | undefined;
            if (args?.agentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'agentId'");
            }
            if (args?.applications === undefined && !opts.urn) {
                throw new Error("Missing required property 'applications'");
            }
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.orgId === undefined && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["agentId"] = args?.agentId;
            resourceInputs["applications"] = args?.applications;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["kind"] = args?.kind;
            resourceInputs["name"] = args?.name;
            resourceInputs["optionsRemoveExistingFinalizers"] = args?.optionsRemoveExistingFinalizers;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["project"] = args?.project;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["repoId"] = args?.repoId;
            resourceInputs["repoIds"] = args?.repoIds;
            resourceInputs["requestCascade"] = args?.requestCascade;
            resourceInputs["requestPropagationPolicy"] = args?.requestPropagationPolicy;
            resourceInputs["skipRepoValidation"] = args?.skipRepoValidation;
            resourceInputs["upsert"] = args?.upsert;
            resourceInputs["validate"] = args?.validate;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GitOpsApplications.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GitOpsApplications resources.
 */
export interface GitOpsApplicationsState {
    /**
     * Account identifier of the GitOps application.
     *
     * @deprecated This field is deprecated and will be removed in a future release.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Agent identifier of the GitOps application.
     */
    agentId?: pulumi.Input<string>;
    /**
     * Definition of the GitOps application resource.
     */
    applications?: pulumi.Input<pulumi.Input<inputs.platform.GitOpsApplicationsApplication>[]>;
    /**
     * Cluster identifier of the GitOps application.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Identifier of the GitOps application.
     *
     * @deprecated This field is deprecated and will be removed in a future release.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Kind of the GitOps application.
     */
    kind?: pulumi.Input<string>;
    /**
     * Name of the GitOps application.
     */
    name?: pulumi.Input<string>;
    /**
     * Options to remove existing finalizers to delete the GitOps application.
     */
    optionsRemoveExistingFinalizers?: pulumi.Input<boolean>;
    /**
     * Organization identifier of the GitOps application.
     */
    orgId?: pulumi.Input<string>;
    /**
     * The ArgoCD project name corresponding to this GitOps application. An empty string means that the GitOps application belongs to the default project created by Harness.
     */
    project?: pulumi.Input<string>;
    /**
     * Project identifier of the GitOps application.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Repository identifier of the GitOps application. When using skipRepoValidation, this field is not required.
     */
    repoId?: pulumi.Input<string>;
    /**
     * List of repository identifiers of the GitOps for Multi-Source application. Not required if skipRepoValidation is set to true.
     */
    repoIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Request cascade to delete the GitOps application.
     */
    requestCascade?: pulumi.Input<boolean>;
    /**
     * Request propagation policy to delete the GitOps application.
     */
    requestPropagationPolicy?: pulumi.Input<string>;
    /**
     * Indicates if the GitOps application should skip validate repository definition exists.
     */
    skipRepoValidation?: pulumi.Input<boolean>;
    /**
     * Indicates if the GitOps application should be updated if existing and inserted if not.
     */
    upsert?: pulumi.Input<boolean>;
    /**
     * Indicates if the GitOps application yaml has to be validated.
     */
    validate?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GitOpsApplications resource.
 */
export interface GitOpsApplicationsArgs {
    /**
     * Account identifier of the GitOps application.
     *
     * @deprecated This field is deprecated and will be removed in a future release.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Agent identifier of the GitOps application.
     */
    agentId: pulumi.Input<string>;
    /**
     * Definition of the GitOps application resource.
     */
    applications: pulumi.Input<pulumi.Input<inputs.platform.GitOpsApplicationsApplication>[]>;
    /**
     * Cluster identifier of the GitOps application.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Identifier of the GitOps application.
     *
     * @deprecated This field is deprecated and will be removed in a future release.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Kind of the GitOps application.
     */
    kind?: pulumi.Input<string>;
    /**
     * Name of the GitOps application.
     */
    name?: pulumi.Input<string>;
    /**
     * Options to remove existing finalizers to delete the GitOps application.
     */
    optionsRemoveExistingFinalizers?: pulumi.Input<boolean>;
    /**
     * Organization identifier of the GitOps application.
     */
    orgId: pulumi.Input<string>;
    /**
     * The ArgoCD project name corresponding to this GitOps application. An empty string means that the GitOps application belongs to the default project created by Harness.
     */
    project?: pulumi.Input<string>;
    /**
     * Project identifier of the GitOps application.
     */
    projectId: pulumi.Input<string>;
    /**
     * Repository identifier of the GitOps application. When using skipRepoValidation, this field is not required.
     */
    repoId?: pulumi.Input<string>;
    /**
     * List of repository identifiers of the GitOps for Multi-Source application. Not required if skipRepoValidation is set to true.
     */
    repoIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Request cascade to delete the GitOps application.
     */
    requestCascade?: pulumi.Input<boolean>;
    /**
     * Request propagation policy to delete the GitOps application.
     */
    requestPropagationPolicy?: pulumi.Input<string>;
    /**
     * Indicates if the GitOps application should skip validate repository definition exists.
     */
    skipRepoValidation?: pulumi.Input<boolean>;
    /**
     * Indicates if the GitOps application should be updated if existing and inserted if not.
     */
    upsert?: pulumi.Input<boolean>;
    /**
     * Indicates if the GitOps application yaml has to be validated.
     */
    validate?: pulumi.Input<boolean>;
}
