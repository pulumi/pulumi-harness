// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for managing Variable Sets
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = new harness.platform.InfraVariableSet("example", {
 *     identifier: "example",
 *     name: "example",
 *     orgId: test.id,
 *     projectId: testHarnessPlatformProject.id,
 *     description: "some description",
 *     environmentVariables: [
 *         {
 *             key: "key1",
 *             value: "value1",
 *             valueType: "string",
 *         },
 *         {
 *             key: "key2",
 *             value: "harness_platform_secret_text.test.id",
 *             valueType: "secret",
 *         },
 *     ],
 *     terraformVariables: [
 *         {
 *             key: "key1",
 *             value: "1111",
 *             valueType: "string",
 *         },
 *         {
 *             key: "key2",
 *             value: "1111u",
 *             valueType: "string",
 *         },
 *     ],
 *     terraformVariableFiles: [
 *         {
 *             repository: "https://github.com/org/repo",
 *             repositoryBranch: "main",
 *             repositoryPath: "tf/aws/basic",
 *             repositoryConnector: "harness_platform_connector_github.test.id",
 *         },
 *         {
 *             repository: "https://github.com/org/repo",
 *             repositoryBranch: "br2",
 *             repositoryPath: "tf/aws/basic",
 *             repositoryConnector: "harness_platform_connector_github.test.id",
 *         },
 *     ],
 *     connectors: [
 *         {
 *             connectorRef: "harness_platform_connector_aws.test.id",
 *             type: "aws",
 *         },
 *         {
 *             connectorRef: "harness_platform_connector_azure.test.id",
 *             type: "azure",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import account level variable set
 *
 * ```sh
 * $ pulumi import harness:platform/infraVariableSet:InfraVariableSet example <variable_set_id>
 * ```
 *
 * Import org level variable set
 *
 * ```sh
 * $ pulumi import harness:platform/infraVariableSet:InfraVariableSet example <ord_id>/<variable_set_id>
 * ```
 *
 * Import project level variable set
 *
 * ```sh
 * $ pulumi import harness:platform/infraVariableSet:InfraVariableSet example <org_id>/<project_id>/<variable_set_id>
 * ```
 */
export class InfraVariableSet extends pulumi.CustomResource {
    /**
     * Get an existing InfraVariableSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InfraVariableSetState, opts?: pulumi.CustomResourceOptions): InfraVariableSet {
        return new InfraVariableSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/infraVariableSet:InfraVariableSet';

    /**
     * Returns true if the given object is an instance of InfraVariableSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InfraVariableSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InfraVariableSet.__pulumiType;
    }

    /**
     * Provider connectors configured on the Variable Set. Only one connector of a type is supported
     */
    declare public readonly connectors: pulumi.Output<outputs.platform.InfraVariableSetConnector[] | undefined>;
    /**
     * Description of the resource.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Environment variables configured on the Variable Set
     */
    declare public readonly environmentVariables: pulumi.Output<outputs.platform.InfraVariableSetEnvironmentVariable[] | undefined>;
    /**
     * Unique identifier of the resource.
     */
    declare public readonly identifier: pulumi.Output<string>;
    /**
     * Name of the resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Unique identifier of the organization.
     */
    declare public readonly orgId: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the project.
     */
    declare public readonly projectId: pulumi.Output<string | undefined>;
    /**
     * Tags to associate with the resource.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    declare public readonly terraformVariableFiles: pulumi.Output<outputs.platform.InfraVariableSetTerraformVariableFile[] | undefined>;
    declare public readonly terraformVariables: pulumi.Output<outputs.platform.InfraVariableSetTerraformVariable[] | undefined>;

    /**
     * Create a InfraVariableSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InfraVariableSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InfraVariableSetArgs | InfraVariableSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InfraVariableSetState | undefined;
            resourceInputs["connectors"] = state?.connectors;
            resourceInputs["description"] = state?.description;
            resourceInputs["environmentVariables"] = state?.environmentVariables;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["terraformVariableFiles"] = state?.terraformVariableFiles;
            resourceInputs["terraformVariables"] = state?.terraformVariables;
        } else {
            const args = argsOrState as InfraVariableSetArgs | undefined;
            if (args?.identifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            resourceInputs["connectors"] = args?.connectors;
            resourceInputs["description"] = args?.description;
            resourceInputs["environmentVariables"] = args?.environmentVariables;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["terraformVariableFiles"] = args?.terraformVariableFiles;
            resourceInputs["terraformVariables"] = args?.terraformVariables;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InfraVariableSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InfraVariableSet resources.
 */
export interface InfraVariableSetState {
    /**
     * Provider connectors configured on the Variable Set. Only one connector of a type is supported
     */
    connectors?: pulumi.Input<pulumi.Input<inputs.platform.InfraVariableSetConnector>[]>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Environment variables configured on the Variable Set
     */
    environmentVariables?: pulumi.Input<pulumi.Input<inputs.platform.InfraVariableSetEnvironmentVariable>[]>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    terraformVariableFiles?: pulumi.Input<pulumi.Input<inputs.platform.InfraVariableSetTerraformVariableFile>[]>;
    terraformVariables?: pulumi.Input<pulumi.Input<inputs.platform.InfraVariableSetTerraformVariable>[]>;
}

/**
 * The set of arguments for constructing a InfraVariableSet resource.
 */
export interface InfraVariableSetArgs {
    /**
     * Provider connectors configured on the Variable Set. Only one connector of a type is supported
     */
    connectors?: pulumi.Input<pulumi.Input<inputs.platform.InfraVariableSetConnector>[]>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Environment variables configured on the Variable Set
     */
    environmentVariables?: pulumi.Input<pulumi.Input<inputs.platform.InfraVariableSetEnvironmentVariable>[]>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    terraformVariableFiles?: pulumi.Input<pulumi.Input<inputs.platform.InfraVariableSetTerraformVariableFile>[]>;
    terraformVariables?: pulumi.Input<pulumi.Input<inputs.platform.InfraVariableSetTerraformVariable>[]>;
}
