// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Data source for retrieving Variable Sets.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const test = harness.platform.getInfraVariableSet({
 *     identifier: "identifier",
 * });
 * const testorg = harness.platform.getInfraVariableSet({
 *     identifier: "identifier",
 *     orgId: "someorg",
 * });
 * const testproj = harness.platform.getInfraVariableSet({
 *     identifier: "identifier",
 *     orgId: "someorg",
 *     projectId: "someproj",
 * });
 * ```
 */
export function getInfraVariableSet(args: GetInfraVariableSetArgs, opts?: pulumi.InvokeOptions): Promise<GetInfraVariableSetResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:platform/getInfraVariableSet:getInfraVariableSet", {
        "connectors": args.connectors,
        "environmentVariables": args.environmentVariables,
        "identifier": args.identifier,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
        "terraformVariableFiles": args.terraformVariableFiles,
        "terraformVariables": args.terraformVariables,
    }, opts);
}

/**
 * A collection of arguments for invoking getInfraVariableSet.
 */
export interface GetInfraVariableSetArgs {
    /**
     * Provider connectors configured on the Variable Set. Only one connector of a type is supported
     */
    connectors?: inputs.platform.GetInfraVariableSetConnector[];
    /**
     * Environment variables configured on the Variable Set
     */
    environmentVariables?: inputs.platform.GetInfraVariableSetEnvironmentVariable[];
    /**
     * Unique identifier of the resource.
     */
    identifier: string;
    /**
     * Name of the resource.
     */
    name?: string;
    /**
     * Unique identifier of the organization.
     */
    orgId?: string;
    /**
     * Unique identifier of the project.
     */
    projectId?: string;
    terraformVariableFiles?: inputs.platform.GetInfraVariableSetTerraformVariableFile[];
    terraformVariables?: inputs.platform.GetInfraVariableSetTerraformVariable[];
}

/**
 * A collection of values returned by getInfraVariableSet.
 */
export interface GetInfraVariableSetResult {
    /**
     * Provider connectors configured on the Variable Set. Only one connector of a type is supported
     */
    readonly connectors: outputs.platform.GetInfraVariableSetConnector[];
    /**
     * Description of the resource.
     */
    readonly description: string;
    /**
     * Environment variables configured on the Variable Set
     */
    readonly environmentVariables: outputs.platform.GetInfraVariableSetEnvironmentVariable[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Unique identifier of the resource.
     */
    readonly identifier: string;
    /**
     * Name of the resource.
     */
    readonly name?: string;
    /**
     * Unique identifier of the organization.
     */
    readonly orgId?: string;
    /**
     * Unique identifier of the project.
     */
    readonly projectId?: string;
    /**
     * Tags to associate with the resource.
     */
    readonly tags: string[];
    readonly terraformVariableFiles: outputs.platform.GetInfraVariableSetTerraformVariableFile[];
    readonly terraformVariables: outputs.platform.GetInfraVariableSetTerraformVariable[];
}
/**
 * Data source for retrieving Variable Sets.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const test = harness.platform.getInfraVariableSet({
 *     identifier: "identifier",
 * });
 * const testorg = harness.platform.getInfraVariableSet({
 *     identifier: "identifier",
 *     orgId: "someorg",
 * });
 * const testproj = harness.platform.getInfraVariableSet({
 *     identifier: "identifier",
 *     orgId: "someorg",
 *     projectId: "someproj",
 * });
 * ```
 */
export function getInfraVariableSetOutput(args: GetInfraVariableSetOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetInfraVariableSetResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:platform/getInfraVariableSet:getInfraVariableSet", {
        "connectors": args.connectors,
        "environmentVariables": args.environmentVariables,
        "identifier": args.identifier,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
        "terraformVariableFiles": args.terraformVariableFiles,
        "terraformVariables": args.terraformVariables,
    }, opts);
}

/**
 * A collection of arguments for invoking getInfraVariableSet.
 */
export interface GetInfraVariableSetOutputArgs {
    /**
     * Provider connectors configured on the Variable Set. Only one connector of a type is supported
     */
    connectors?: pulumi.Input<pulumi.Input<inputs.platform.GetInfraVariableSetConnectorArgs>[]>;
    /**
     * Environment variables configured on the Variable Set
     */
    environmentVariables?: pulumi.Input<pulumi.Input<inputs.platform.GetInfraVariableSetEnvironmentVariableArgs>[]>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    terraformVariableFiles?: pulumi.Input<pulumi.Input<inputs.platform.GetInfraVariableSetTerraformVariableFileArgs>[]>;
    terraformVariables?: pulumi.Input<pulumi.Input<inputs.platform.GetInfraVariableSetTerraformVariableArgs>[]>;
}
