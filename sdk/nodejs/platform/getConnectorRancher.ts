// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Data source for looking up a Rancher connector.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = harness.platform.getConnectorRancher({
 *     identifier: "identifier",
 * });
 * ```
 */
export function getConnectorRancher(args: GetConnectorRancherArgs, opts?: pulumi.InvokeOptions): Promise<GetConnectorRancherResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:platform/getConnectorRancher:getConnectorRancher", {
        "bearerToken": args.bearerToken,
        "identifier": args.identifier,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getConnectorRancher.
 */
export interface GetConnectorRancherArgs {
    /**
     * URL and bearer token for the rancher cluster.
     */
    bearerToken?: inputs.platform.GetConnectorRancherBearerToken;
    /**
     * Unique identifier of the resource.
     */
    identifier: string;
    /**
     * Name of the resource.
     */
    name?: string;
    /**
     * Unique identifier of the organization.
     */
    orgId?: string;
    /**
     * Unique identifier of the project.
     */
    projectId?: string;
}

/**
 * A collection of values returned by getConnectorRancher.
 */
export interface GetConnectorRancherResult {
    /**
     * URL and bearer token for the rancher cluster.
     */
    readonly bearerToken?: outputs.platform.GetConnectorRancherBearerToken;
    /**
     * Selectors to use for the delegate.
     */
    readonly delegateSelectors: string[];
    /**
     * Description of the resource.
     */
    readonly description: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Unique identifier of the resource.
     */
    readonly identifier: string;
    /**
     * Name of the resource.
     */
    readonly name?: string;
    /**
     * Unique identifier of the organization.
     */
    readonly orgId?: string;
    /**
     * Unique identifier of the project.
     */
    readonly projectId?: string;
    /**
     * Tags to associate with the resource.
     */
    readonly tags: string[];
}
/**
 * Data source for looking up a Rancher connector.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = harness.platform.getConnectorRancher({
 *     identifier: "identifier",
 * });
 * ```
 */
export function getConnectorRancherOutput(args: GetConnectorRancherOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetConnectorRancherResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:platform/getConnectorRancher:getConnectorRancher", {
        "bearerToken": args.bearerToken,
        "identifier": args.identifier,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getConnectorRancher.
 */
export interface GetConnectorRancherOutputArgs {
    /**
     * URL and bearer token for the rancher cluster.
     */
    bearerToken?: pulumi.Input<inputs.platform.GetConnectorRancherBearerTokenArgs>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
}
