// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class OrchestratorConfig extends pulumi.CustomResource {
    /**
     * Get an existing OrchestratorConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrchestratorConfigState, opts?: pulumi.CustomResourceOptions): OrchestratorConfig {
        return new OrchestratorConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:cluster/orchestratorConfig:OrchestratorConfig';

    /**
     * Returns true if the given object is an instance of OrchestratorConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrchestratorConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrchestratorConfig.__pulumiType;
    }

    /**
     * Binpacking preferences for Cluster Orchestrator
     */
    public readonly binpacking!: pulumi.Output<outputs.cluster.OrchestratorConfigBinpacking | undefined>;
    /**
     * Spot and Ondemand Distribution Preferences for workload replicas
     */
    public readonly distribution!: pulumi.Output<outputs.cluster.OrchestratorConfigDistribution>;
    /**
     * Node preferences for Cluster Orchestrator
     */
    public readonly nodePreferences!: pulumi.Output<outputs.cluster.OrchestratorConfigNodePreferences | undefined>;
    /**
     * ID of the Cluster Orchestrator Object
     */
    public readonly orchestratorId!: pulumi.Output<string>;

    /**
     * Create a OrchestratorConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrchestratorConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrchestratorConfigArgs | OrchestratorConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrchestratorConfigState | undefined;
            resourceInputs["binpacking"] = state ? state.binpacking : undefined;
            resourceInputs["distribution"] = state ? state.distribution : undefined;
            resourceInputs["nodePreferences"] = state ? state.nodePreferences : undefined;
            resourceInputs["orchestratorId"] = state ? state.orchestratorId : undefined;
        } else {
            const args = argsOrState as OrchestratorConfigArgs | undefined;
            if ((!args || args.distribution === undefined) && !opts.urn) {
                throw new Error("Missing required property 'distribution'");
            }
            if ((!args || args.orchestratorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orchestratorId'");
            }
            resourceInputs["binpacking"] = args ? args.binpacking : undefined;
            resourceInputs["distribution"] = args ? args.distribution : undefined;
            resourceInputs["nodePreferences"] = args ? args.nodePreferences : undefined;
            resourceInputs["orchestratorId"] = args ? args.orchestratorId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrchestratorConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrchestratorConfig resources.
 */
export interface OrchestratorConfigState {
    /**
     * Binpacking preferences for Cluster Orchestrator
     */
    binpacking?: pulumi.Input<inputs.cluster.OrchestratorConfigBinpacking>;
    /**
     * Spot and Ondemand Distribution Preferences for workload replicas
     */
    distribution?: pulumi.Input<inputs.cluster.OrchestratorConfigDistribution>;
    /**
     * Node preferences for Cluster Orchestrator
     */
    nodePreferences?: pulumi.Input<inputs.cluster.OrchestratorConfigNodePreferences>;
    /**
     * ID of the Cluster Orchestrator Object
     */
    orchestratorId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrchestratorConfig resource.
 */
export interface OrchestratorConfigArgs {
    /**
     * Binpacking preferences for Cluster Orchestrator
     */
    binpacking?: pulumi.Input<inputs.cluster.OrchestratorConfigBinpacking>;
    /**
     * Spot and Ondemand Distribution Preferences for workload replicas
     */
    distribution: pulumi.Input<inputs.cluster.OrchestratorConfigDistribution>;
    /**
     * Node preferences for Cluster Orchestrator
     */
    nodePreferences?: pulumi.Input<inputs.cluster.OrchestratorConfigNodePreferences>;
    /**
     * ID of the Cluster Orchestrator Object
     */
    orchestratorId: pulumi.Input<string>;
}
