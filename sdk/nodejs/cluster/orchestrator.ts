// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for creating ClusterOrchestrators.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const test = new harness.cluster.Orchestrator("test", {
 *     name: "name",
 *     clusterEndpoint: "http://test.test.com",
 *     k8sConnectorId: "test",
 * });
 * ```
 */
export class Orchestrator extends pulumi.CustomResource {
    /**
     * Get an existing Orchestrator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrchestratorState, opts?: pulumi.CustomResourceOptions): Orchestrator {
        return new Orchestrator(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:cluster/orchestrator:Orchestrator';

    /**
     * Returns true if the given object is an instance of Orchestrator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Orchestrator {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Orchestrator.__pulumiType;
    }

    /**
     * Endpoint of the k8s cluster being onboarded under the orchestrator
     */
    declare public readonly clusterEndpoint: pulumi.Output<string>;
    /**
     * ID of the Harness Kubernetes Connector Being used
     */
    declare public readonly k8sConnectorId: pulumi.Output<string>;
    /**
     * Name of the Orchestrator
     */
    declare public readonly name: pulumi.Output<string>;

    /**
     * Create a Orchestrator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrchestratorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrchestratorArgs | OrchestratorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrchestratorState | undefined;
            resourceInputs["clusterEndpoint"] = state?.clusterEndpoint;
            resourceInputs["k8sConnectorId"] = state?.k8sConnectorId;
            resourceInputs["name"] = state?.name;
        } else {
            const args = argsOrState as OrchestratorArgs | undefined;
            if (args?.clusterEndpoint === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterEndpoint'");
            }
            if (args?.k8sConnectorId === undefined && !opts.urn) {
                throw new Error("Missing required property 'k8sConnectorId'");
            }
            resourceInputs["clusterEndpoint"] = args?.clusterEndpoint;
            resourceInputs["k8sConnectorId"] = args?.k8sConnectorId;
            resourceInputs["name"] = args?.name;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Orchestrator.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Orchestrator resources.
 */
export interface OrchestratorState {
    /**
     * Endpoint of the k8s cluster being onboarded under the orchestrator
     */
    clusterEndpoint?: pulumi.Input<string>;
    /**
     * ID of the Harness Kubernetes Connector Being used
     */
    k8sConnectorId?: pulumi.Input<string>;
    /**
     * Name of the Orchestrator
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Orchestrator resource.
 */
export interface OrchestratorArgs {
    /**
     * Endpoint of the k8s cluster being onboarded under the orchestrator
     */
    clusterEndpoint: pulumi.Input<string>;
    /**
     * ID of the Harness Kubernetes Connector Being used
     */
    k8sConnectorId: pulumi.Input<string>;
    /**
     * Name of the Orchestrator
     */
    name?: pulumi.Input<string>;
}
