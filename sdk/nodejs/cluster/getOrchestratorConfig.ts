// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Data Source for retrieving Harness CCM ClusterOrchestrator Config.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = harness.cluster.getOrchestratorConfig({
 *     orchestratorId: "identifier",
 * });
 * ```
 */
export function getOrchestratorConfig(args: GetOrchestratorConfigArgs, opts?: pulumi.InvokeOptions): Promise<GetOrchestratorConfigResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:cluster/getOrchestratorConfig:getOrchestratorConfig", {
        "binpacking": args.binpacking,
        "commitmentIntegration": args.commitmentIntegration,
        "disabled": args.disabled,
        "distribution": args.distribution,
        "nodePreferences": args.nodePreferences,
        "orchestratorId": args.orchestratorId,
        "replacementSchedule": args.replacementSchedule,
    }, opts);
}

/**
 * A collection of arguments for invoking getOrchestratorConfig.
 */
export interface GetOrchestratorConfigArgs {
    /**
     * Binpacking preferences for Cluster Orchestrator
     */
    binpacking?: inputs.cluster.GetOrchestratorConfigBinpacking;
    /**
     * Commitment integration configuration for Cluster Orchestrator
     */
    commitmentIntegration?: inputs.cluster.GetOrchestratorConfigCommitmentIntegration;
    /**
     * Whether the cluster orchestrator is disabled
     */
    disabled?: boolean;
    /**
     * Spot and Ondemand Distribution Preferences for workload replicas
     */
    distribution?: inputs.cluster.GetOrchestratorConfigDistribution;
    /**
     * Node preferences for Cluster Orchestrator
     */
    nodePreferences?: inputs.cluster.GetOrchestratorConfigNodePreferences;
    /**
     * ID of the Cluster Orchestrator Object
     */
    orchestratorId: string;
    /**
     * Replacement schedule for Cluster Orchestrator
     */
    replacementSchedule?: inputs.cluster.GetOrchestratorConfigReplacementSchedule;
}

/**
 * A collection of values returned by getOrchestratorConfig.
 */
export interface GetOrchestratorConfigResult {
    /**
     * Binpacking preferences for Cluster Orchestrator
     */
    readonly binpacking?: outputs.cluster.GetOrchestratorConfigBinpacking;
    /**
     * Commitment integration configuration for Cluster Orchestrator
     */
    readonly commitmentIntegration?: outputs.cluster.GetOrchestratorConfigCommitmentIntegration;
    /**
     * Whether the cluster orchestrator is disabled
     */
    readonly disabled?: boolean;
    /**
     * Spot and Ondemand Distribution Preferences for workload replicas
     */
    readonly distribution?: outputs.cluster.GetOrchestratorConfigDistribution;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Node preferences for Cluster Orchestrator
     */
    readonly nodePreferences?: outputs.cluster.GetOrchestratorConfigNodePreferences;
    /**
     * ID of the Cluster Orchestrator Object
     */
    readonly orchestratorId: string;
    /**
     * Replacement schedule for Cluster Orchestrator
     */
    readonly replacementSchedule?: outputs.cluster.GetOrchestratorConfigReplacementSchedule;
}
/**
 * Data Source for retrieving Harness CCM ClusterOrchestrator Config.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = harness.cluster.getOrchestratorConfig({
 *     orchestratorId: "identifier",
 * });
 * ```
 */
export function getOrchestratorConfigOutput(args: GetOrchestratorConfigOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetOrchestratorConfigResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:cluster/getOrchestratorConfig:getOrchestratorConfig", {
        "binpacking": args.binpacking,
        "commitmentIntegration": args.commitmentIntegration,
        "disabled": args.disabled,
        "distribution": args.distribution,
        "nodePreferences": args.nodePreferences,
        "orchestratorId": args.orchestratorId,
        "replacementSchedule": args.replacementSchedule,
    }, opts);
}

/**
 * A collection of arguments for invoking getOrchestratorConfig.
 */
export interface GetOrchestratorConfigOutputArgs {
    /**
     * Binpacking preferences for Cluster Orchestrator
     */
    binpacking?: pulumi.Input<inputs.cluster.GetOrchestratorConfigBinpackingArgs>;
    /**
     * Commitment integration configuration for Cluster Orchestrator
     */
    commitmentIntegration?: pulumi.Input<inputs.cluster.GetOrchestratorConfigCommitmentIntegrationArgs>;
    /**
     * Whether the cluster orchestrator is disabled
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Spot and Ondemand Distribution Preferences for workload replicas
     */
    distribution?: pulumi.Input<inputs.cluster.GetOrchestratorConfigDistributionArgs>;
    /**
     * Node preferences for Cluster Orchestrator
     */
    nodePreferences?: pulumi.Input<inputs.cluster.GetOrchestratorConfigNodePreferencesArgs>;
    /**
     * ID of the Cluster Orchestrator Object
     */
    orchestratorId: pulumi.Input<string>;
    /**
     * Replacement schedule for Cluster Orchestrator
     */
    replacementSchedule?: pulumi.Input<inputs.cluster.GetOrchestratorConfigReplacementScheduleArgs>;
}
