// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Data source for retrieving a Harness trigger.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const exampleByName = harness.getTrigger({
 *     appId: "app_id",
 *     name: "name",
 * });
 * const exampleById = harness.getTrigger({
 *     id: "trigger_id",
 * });
 * ```
 */
export function getTrigger(args?: GetTriggerArgs, opts?: pulumi.InvokeOptions): Promise<GetTriggerResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:index/getTrigger:getTrigger", {
        "appId": args.appId,
        "description": args.description,
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getTrigger.
 */
export interface GetTriggerArgs {
    /**
     * The id of the application.
     */
    appId?: string;
    /**
     * The trigger description.
     */
    description?: string;
    /**
     * Unique identifier of the trigger.
     */
    id?: string;
    /**
     * The name of the trigger.
     */
    name?: string;
}

/**
 * A collection of values returned by getTrigger.
 */
export interface GetTriggerResult {
    /**
     * The id of the application.
     */
    readonly appId?: string;
    /**
     * The condition that will execute the Trigger: On new artifact, On pipeline completion, On Cron schedule, On webhook, On New Manifest.
     */
    readonly conditions: outputs.GetTriggerCondition[];
    /**
     * The trigger description.
     */
    readonly description?: string;
    /**
     * Unique identifier of the trigger.
     */
    readonly id?: string;
    /**
     * The name of the trigger.
     */
    readonly name?: string;
}
/**
 * Data source for retrieving a Harness trigger.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const exampleByName = harness.getTrigger({
 *     appId: "app_id",
 *     name: "name",
 * });
 * const exampleById = harness.getTrigger({
 *     id: "trigger_id",
 * });
 * ```
 */
export function getTriggerOutput(args?: GetTriggerOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetTriggerResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:index/getTrigger:getTrigger", {
        "appId": args.appId,
        "description": args.description,
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getTrigger.
 */
export interface GetTriggerOutputArgs {
    /**
     * The id of the application.
     */
    appId?: pulumi.Input<string>;
    /**
     * The trigger description.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier of the trigger.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the trigger.
     */
    name?: pulumi.Input<string>;
}
