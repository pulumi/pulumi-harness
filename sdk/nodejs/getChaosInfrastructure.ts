// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Data source for retrieving a chaos infrastructure.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = harness.getChaosInfrastructure({
 *     identifier: "identifier",
 *     orgId: "org_id",
 *     projectId: "project_id",
 *     environmentId: "env_id",
 * });
 * ```
 */
export function getChaosInfrastructure(args: GetChaosInfrastructureArgs, opts?: pulumi.InvokeOptions): Promise<GetChaosInfrastructureResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:index/getChaosInfrastructure:getChaosInfrastructure", {
        "environmentId": args.environmentId,
        "identifier": args.identifier,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getChaosInfrastructure.
 */
export interface GetChaosInfrastructureArgs {
    /**
     * Environment identifier of the chaos infrastructure.
     */
    environmentId: string;
    /**
     * Identifier of the chaos infrastructure.
     */
    identifier: string;
    /**
     * Identifier of the organization in which the chaos infrastructure is configured.
     */
    orgId: string;
    /**
     * Identifier of the project in which the chaos infrastructure is configured.
     */
    projectId: string;
}

/**
 * A collection of values returned by getChaosInfrastructure.
 */
export interface GetChaosInfrastructureResult {
    /**
     * Environment identifier of the chaos infrastructure.
     */
    readonly environmentId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Identifier of the chaos infrastructure.
     */
    readonly identifier: string;
    /**
     * Identifier of the organization in which the chaos infrastructure is configured.
     */
    readonly orgId: string;
    /**
     * Identifier of the project in which the chaos infrastructure is configured.
     */
    readonly projectId: string;
}
/**
 * Data source for retrieving a chaos infrastructure.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = harness.getChaosInfrastructure({
 *     identifier: "identifier",
 *     orgId: "org_id",
 *     projectId: "project_id",
 *     environmentId: "env_id",
 * });
 * ```
 */
export function getChaosInfrastructureOutput(args: GetChaosInfrastructureOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetChaosInfrastructureResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:index/getChaosInfrastructure:getChaosInfrastructure", {
        "environmentId": args.environmentId,
        "identifier": args.identifier,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getChaosInfrastructure.
 */
export interface GetChaosInfrastructureOutputArgs {
    /**
     * Environment identifier of the chaos infrastructure.
     */
    environmentId: pulumi.Input<string>;
    /**
     * Identifier of the chaos infrastructure.
     */
    identifier: pulumi.Input<string>;
    /**
     * Identifier of the organization in which the chaos infrastructure is configured.
     */
    orgId: pulumi.Input<string>;
    /**
     * Identifier of the project in which the chaos infrastructure is configured.
     */
    projectId: pulumi.Input<string>;
}
