// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for creating, updating, and managing rule.
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import governance enforcement
 *
 * ```sh
 * $ pulumi import harness:governance/rule:Rule example <rule_id>
 * ```
 */
export class Rule extends pulumi.CustomResource {
    /**
     * Get an existing Rule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleState, opts?: pulumi.CustomResourceOptions): Rule {
        return new Rule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:governance/rule:Rule';

    /**
     * Returns true if the given object is an instance of Rule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Rule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Rule.__pulumiType;
    }

    /**
     * The cloud provider for the rule. It should be either AWS, AZURE or GCP.
     */
    declare public readonly cloudProvider: pulumi.Output<string>;
    /**
     * Description for rule.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Name of the rule.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Id of the rule.
     */
    declare public /*out*/ readonly ruleId: pulumi.Output<string>;
    /**
     * The policy YAML of the rule
     */
    declare public readonly rulesYaml: pulumi.Output<string>;

    /**
     * Create a Rule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleArgs | RuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleState | undefined;
            resourceInputs["cloudProvider"] = state?.cloudProvider;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["ruleId"] = state?.ruleId;
            resourceInputs["rulesYaml"] = state?.rulesYaml;
        } else {
            const args = argsOrState as RuleArgs | undefined;
            if (args?.cloudProvider === undefined && !opts.urn) {
                throw new Error("Missing required property 'cloudProvider'");
            }
            if (args?.rulesYaml === undefined && !opts.urn) {
                throw new Error("Missing required property 'rulesYaml'");
            }
            resourceInputs["cloudProvider"] = args?.cloudProvider;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["rulesYaml"] = args?.rulesYaml;
            resourceInputs["ruleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Rule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Rule resources.
 */
export interface RuleState {
    /**
     * The cloud provider for the rule. It should be either AWS, AZURE or GCP.
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * Description for rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the rule.
     */
    name?: pulumi.Input<string>;
    /**
     * Id of the rule.
     */
    ruleId?: pulumi.Input<string>;
    /**
     * The policy YAML of the rule
     */
    rulesYaml?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Rule resource.
 */
export interface RuleArgs {
    /**
     * The cloud provider for the rule. It should be either AWS, AZURE or GCP.
     */
    cloudProvider: pulumi.Input<string>;
    /**
     * Description for rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The policy YAML of the rule
     */
    rulesYaml: pulumi.Input<string>;
}
