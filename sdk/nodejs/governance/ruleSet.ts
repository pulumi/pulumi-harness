// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for creating, updating, and managing rule.
 */
export class RuleSet extends pulumi.CustomResource {
    /**
     * Get an existing RuleSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleSetState, opts?: pulumi.CustomResourceOptions): RuleSet {
        return new RuleSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:governance/ruleSet:RuleSet';

    /**
     * Returns true if the given object is an instance of RuleSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RuleSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RuleSet.__pulumiType;
    }

    /**
     * The cloud provider for the rule set. It should be either AWS, AZURE or GCP.
     */
    public readonly cloudProvider!: pulumi.Output<string>;
    /**
     * Description for rule set.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of the rule set.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of rule IDs
     */
    public readonly ruleIds!: pulumi.Output<string[]>;
    /**
     * Id of the rule.
     */
    public /*out*/ readonly ruleSetId!: pulumi.Output<string>;

    /**
     * Create a RuleSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleSetArgs | RuleSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleSetState | undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ruleIds"] = state ? state.ruleIds : undefined;
            resourceInputs["ruleSetId"] = state ? state.ruleSetId : undefined;
        } else {
            const args = argsOrState as RuleSetArgs | undefined;
            if ((!args || args.cloudProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudProvider'");
            }
            if ((!args || args.ruleIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleIds'");
            }
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ruleIds"] = args ? args.ruleIds : undefined;
            resourceInputs["ruleSetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RuleSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RuleSet resources.
 */
export interface RuleSetState {
    /**
     * The cloud provider for the rule set. It should be either AWS, AZURE or GCP.
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * Description for rule set.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the rule set.
     */
    name?: pulumi.Input<string>;
    /**
     * List of rule IDs
     */
    ruleIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Id of the rule.
     */
    ruleSetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RuleSet resource.
 */
export interface RuleSetArgs {
    /**
     * The cloud provider for the rule set. It should be either AWS, AZURE or GCP.
     */
    cloudProvider: pulumi.Input<string>;
    /**
     * Description for rule set.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the rule set.
     */
    name?: pulumi.Input<string>;
    /**
     * List of rule IDs
     */
    ruleIds: pulumi.Input<pulumi.Input<string>[]>;
}
