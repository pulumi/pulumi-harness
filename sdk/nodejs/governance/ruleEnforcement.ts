// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for creating, updating, and managing rule enforcement.
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import governance enforcement
 *
 * ```sh
 * $ pulumi import harness:governance/ruleEnforcement:RuleEnforcement example <enforcement_id>
 * ```
 */
export class RuleEnforcement extends pulumi.CustomResource {
    /**
     * Get an existing RuleEnforcement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleEnforcementState, opts?: pulumi.CustomResourceOptions): RuleEnforcement {
        return new RuleEnforcement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:governance/ruleEnforcement:RuleEnforcement';

    /**
     * Returns true if the given object is an instance of RuleEnforcement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RuleEnforcement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RuleEnforcement.__pulumiType;
    }

    /**
     * The cloud provider for the rule enforcement. It should be either AWS, AZURE or GCP.
     */
    declare public readonly cloudProvider: pulumi.Output<string>;
    /**
     * Description for rule enforcement.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Id of the rule enforcement.
     */
    declare public /*out*/ readonly enforcementId: pulumi.Output<string>;
    /**
     * Execution schedule in cron format.
     */
    declare public readonly executionSchedule: pulumi.Output<string>;
    /**
     * Timezone for the execution schedule.
     */
    declare public readonly executionTimezone: pulumi.Output<string>;
    /**
     * Indicates if the rule enforcement is a dry run. This by default is set to false.
     */
    declare public readonly isDryRun: pulumi.Output<boolean | undefined>;
    /**
     * Indicates if the rule enforcement is enabled. This by default is set to true.
     */
    declare public readonly isEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Name of the rule enforcement.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * List of rule IDs. Either rule*ids or rule*set_ids should be provided.
     */
    declare public readonly ruleIds: pulumi.Output<string[] | undefined>;
    /**
     * List of rule set IDs. Either rule*ids or rule*set_ids should be provided.
     */
    declare public readonly ruleSetIds: pulumi.Output<string[] | undefined>;
    /**
     * List of target account which can be either AWS Account Ids or Azure Subscription Ids or Gcp Project Ids.
     */
    declare public readonly targetAccounts: pulumi.Output<string[]>;
    /**
     * List of target regions. For GCP it should be left empty but is required in case of AWS or Azure.
     */
    declare public readonly targetRegions: pulumi.Output<string[] | undefined>;

    /**
     * Create a RuleEnforcement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleEnforcementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleEnforcementArgs | RuleEnforcementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleEnforcementState | undefined;
            resourceInputs["cloudProvider"] = state?.cloudProvider;
            resourceInputs["description"] = state?.description;
            resourceInputs["enforcementId"] = state?.enforcementId;
            resourceInputs["executionSchedule"] = state?.executionSchedule;
            resourceInputs["executionTimezone"] = state?.executionTimezone;
            resourceInputs["isDryRun"] = state?.isDryRun;
            resourceInputs["isEnabled"] = state?.isEnabled;
            resourceInputs["name"] = state?.name;
            resourceInputs["ruleIds"] = state?.ruleIds;
            resourceInputs["ruleSetIds"] = state?.ruleSetIds;
            resourceInputs["targetAccounts"] = state?.targetAccounts;
            resourceInputs["targetRegions"] = state?.targetRegions;
        } else {
            const args = argsOrState as RuleEnforcementArgs | undefined;
            if (args?.cloudProvider === undefined && !opts.urn) {
                throw new Error("Missing required property 'cloudProvider'");
            }
            if (args?.executionSchedule === undefined && !opts.urn) {
                throw new Error("Missing required property 'executionSchedule'");
            }
            if (args?.executionTimezone === undefined && !opts.urn) {
                throw new Error("Missing required property 'executionTimezone'");
            }
            if (args?.targetAccounts === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetAccounts'");
            }
            resourceInputs["cloudProvider"] = args?.cloudProvider;
            resourceInputs["description"] = args?.description;
            resourceInputs["executionSchedule"] = args?.executionSchedule;
            resourceInputs["executionTimezone"] = args?.executionTimezone;
            resourceInputs["isDryRun"] = args?.isDryRun;
            resourceInputs["isEnabled"] = args?.isEnabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["ruleIds"] = args?.ruleIds;
            resourceInputs["ruleSetIds"] = args?.ruleSetIds;
            resourceInputs["targetAccounts"] = args?.targetAccounts;
            resourceInputs["targetRegions"] = args?.targetRegions;
            resourceInputs["enforcementId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RuleEnforcement.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RuleEnforcement resources.
 */
export interface RuleEnforcementState {
    /**
     * The cloud provider for the rule enforcement. It should be either AWS, AZURE or GCP.
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * Description for rule enforcement.
     */
    description?: pulumi.Input<string>;
    /**
     * Id of the rule enforcement.
     */
    enforcementId?: pulumi.Input<string>;
    /**
     * Execution schedule in cron format.
     */
    executionSchedule?: pulumi.Input<string>;
    /**
     * Timezone for the execution schedule.
     */
    executionTimezone?: pulumi.Input<string>;
    /**
     * Indicates if the rule enforcement is a dry run. This by default is set to false.
     */
    isDryRun?: pulumi.Input<boolean>;
    /**
     * Indicates if the rule enforcement is enabled. This by default is set to true.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the rule enforcement.
     */
    name?: pulumi.Input<string>;
    /**
     * List of rule IDs. Either rule*ids or rule*set_ids should be provided.
     */
    ruleIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of rule set IDs. Either rule*ids or rule*set_ids should be provided.
     */
    ruleSetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of target account which can be either AWS Account Ids or Azure Subscription Ids or Gcp Project Ids.
     */
    targetAccounts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of target regions. For GCP it should be left empty but is required in case of AWS or Azure.
     */
    targetRegions?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a RuleEnforcement resource.
 */
export interface RuleEnforcementArgs {
    /**
     * The cloud provider for the rule enforcement. It should be either AWS, AZURE or GCP.
     */
    cloudProvider: pulumi.Input<string>;
    /**
     * Description for rule enforcement.
     */
    description?: pulumi.Input<string>;
    /**
     * Execution schedule in cron format.
     */
    executionSchedule: pulumi.Input<string>;
    /**
     * Timezone for the execution schedule.
     */
    executionTimezone: pulumi.Input<string>;
    /**
     * Indicates if the rule enforcement is a dry run. This by default is set to false.
     */
    isDryRun?: pulumi.Input<boolean>;
    /**
     * Indicates if the rule enforcement is enabled. This by default is set to true.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the rule enforcement.
     */
    name?: pulumi.Input<string>;
    /**
     * List of rule IDs. Either rule*ids or rule*set_ids should be provided.
     */
    ruleIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of rule set IDs. Either rule*ids or rule*set_ids should be provided.
     */
    ruleSetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of target account which can be either AWS Account Ids or Azure Subscription Ids or Gcp Project Ids.
     */
    targetAccounts: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of target regions. For GCP it should be left empty but is required in case of AWS or Azure.
     */
    targetRegions?: pulumi.Input<pulumi.Input<string>[]>;
}
