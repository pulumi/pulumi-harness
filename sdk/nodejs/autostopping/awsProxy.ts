// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating an AWS Autostopping proxy
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const test = new harness.autostopping.AwsProxy("test", {
 *     name: "name",
 *     cloudConnectorId: "cloud_connector_id",
 *     hostName: "host_name",
 *     region: "region",
 *     vpc: "vpc",
 *     securityGroups: [
 *         "sg1",
 *         "sg2",
 *     ],
 *     route53HostedZoneId: "/hostedzone/zone_id",
 *     machineType: "t2.medium",
 *     apiKey: "",
 *     allocateStaticIp: true,
 *     deleteCloudResourcesOnDestroy: true,
 * });
 * ```
 */
export class AwsProxy extends pulumi.CustomResource {
    /**
     * Get an existing AwsProxy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsProxyState, opts?: pulumi.CustomResourceOptions): AwsProxy {
        return new AwsProxy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:autostopping/awsProxy:AwsProxy';

    /**
     * Returns true if the given object is an instance of AwsProxy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsProxy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsProxy.__pulumiType;
    }

    /**
     * Boolean value to indicate if proxy vm needs to have static IP
     */
    public readonly allocateStaticIp!: pulumi.Output<boolean | undefined>;
    /**
     * Harness NG API key
     */
    public readonly apiKey!: pulumi.Output<string>;
    public readonly certificates!: pulumi.Output<outputs.autostopping.AwsProxyCertificates | undefined>;
    /**
     * Id of the cloud connector
     */
    public readonly cloudConnectorId!: pulumi.Output<string>;
    public readonly deleteCloudResourcesOnDestroy!: pulumi.Output<boolean>;
    /**
     * Hostname for the proxy
     */
    public readonly hostName!: pulumi.Output<string>;
    /**
     * Unique identifier of the resource
     */
    public /*out*/ readonly identifier!: pulumi.Output<string>;
    public readonly keypair!: pulumi.Output<string | undefined>;
    /**
     * Machine instance type
     */
    public readonly machineType!: pulumi.Output<string>;
    /**
     * Name of the proxy
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Region in which cloud resources are hosted
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Route 53 hosted zone id
     */
    public readonly route53HostedZoneId!: pulumi.Output<string | undefined>;
    /**
     * Security Group to define the security rules that determine the inbound and outbound traffic
     */
    public readonly securityGroups!: pulumi.Output<string[] | undefined>;
    /**
     * VPC in which cloud resources are hosted
     */
    public readonly vpc!: pulumi.Output<string>;

    /**
     * Create a AwsProxy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsProxyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsProxyArgs | AwsProxyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsProxyState | undefined;
            resourceInputs["allocateStaticIp"] = state ? state.allocateStaticIp : undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["certificates"] = state ? state.certificates : undefined;
            resourceInputs["cloudConnectorId"] = state ? state.cloudConnectorId : undefined;
            resourceInputs["deleteCloudResourcesOnDestroy"] = state ? state.deleteCloudResourcesOnDestroy : undefined;
            resourceInputs["hostName"] = state ? state.hostName : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["keypair"] = state ? state.keypair : undefined;
            resourceInputs["machineType"] = state ? state.machineType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["route53HostedZoneId"] = state ? state.route53HostedZoneId : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["vpc"] = state ? state.vpc : undefined;
        } else {
            const args = argsOrState as AwsProxyArgs | undefined;
            if ((!args || args.apiKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiKey'");
            }
            if ((!args || args.cloudConnectorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudConnectorId'");
            }
            if ((!args || args.deleteCloudResourcesOnDestroy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deleteCloudResourcesOnDestroy'");
            }
            if ((!args || args.hostName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostName'");
            }
            if ((!args || args.machineType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'machineType'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.vpc === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpc'");
            }
            resourceInputs["allocateStaticIp"] = args ? args.allocateStaticIp : undefined;
            resourceInputs["apiKey"] = args?.apiKey ? pulumi.secret(args.apiKey) : undefined;
            resourceInputs["certificates"] = args ? args.certificates : undefined;
            resourceInputs["cloudConnectorId"] = args ? args.cloudConnectorId : undefined;
            resourceInputs["deleteCloudResourcesOnDestroy"] = args ? args.deleteCloudResourcesOnDestroy : undefined;
            resourceInputs["hostName"] = args ? args.hostName : undefined;
            resourceInputs["keypair"] = args ? args.keypair : undefined;
            resourceInputs["machineType"] = args ? args.machineType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["route53HostedZoneId"] = args ? args.route53HostedZoneId : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["vpc"] = args ? args.vpc : undefined;
            resourceInputs["identifier"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AwsProxy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AwsProxy resources.
 */
export interface AwsProxyState {
    /**
     * Boolean value to indicate if proxy vm needs to have static IP
     */
    allocateStaticIp?: pulumi.Input<boolean>;
    /**
     * Harness NG API key
     */
    apiKey?: pulumi.Input<string>;
    certificates?: pulumi.Input<inputs.autostopping.AwsProxyCertificates>;
    /**
     * Id of the cloud connector
     */
    cloudConnectorId?: pulumi.Input<string>;
    deleteCloudResourcesOnDestroy?: pulumi.Input<boolean>;
    /**
     * Hostname for the proxy
     */
    hostName?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource
     */
    identifier?: pulumi.Input<string>;
    keypair?: pulumi.Input<string>;
    /**
     * Machine instance type
     */
    machineType?: pulumi.Input<string>;
    /**
     * Name of the proxy
     */
    name?: pulumi.Input<string>;
    /**
     * Region in which cloud resources are hosted
     */
    region?: pulumi.Input<string>;
    /**
     * Route 53 hosted zone id
     */
    route53HostedZoneId?: pulumi.Input<string>;
    /**
     * Security Group to define the security rules that determine the inbound and outbound traffic
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * VPC in which cloud resources are hosted
     */
    vpc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AwsProxy resource.
 */
export interface AwsProxyArgs {
    /**
     * Boolean value to indicate if proxy vm needs to have static IP
     */
    allocateStaticIp?: pulumi.Input<boolean>;
    /**
     * Harness NG API key
     */
    apiKey: pulumi.Input<string>;
    certificates?: pulumi.Input<inputs.autostopping.AwsProxyCertificates>;
    /**
     * Id of the cloud connector
     */
    cloudConnectorId: pulumi.Input<string>;
    deleteCloudResourcesOnDestroy: pulumi.Input<boolean>;
    /**
     * Hostname for the proxy
     */
    hostName: pulumi.Input<string>;
    keypair?: pulumi.Input<string>;
    /**
     * Machine instance type
     */
    machineType: pulumi.Input<string>;
    /**
     * Name of the proxy
     */
    name?: pulumi.Input<string>;
    /**
     * Region in which cloud resources are hosted
     */
    region: pulumi.Input<string>;
    /**
     * Route 53 hosted zone id
     */
    route53HostedZoneId?: pulumi.Input<string>;
    /**
     * Security Group to define the security rules that determine the inbound and outbound traffic
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * VPC in which cloud resources are hosted
     */
    vpc: pulumi.Input<string>;
}
