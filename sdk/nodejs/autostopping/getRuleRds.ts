// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Data source for retrieving a Harness Variable.
 */
export function getRuleRds(args: GetRuleRdsArgs, opts?: pulumi.InvokeOptions): Promise<GetRuleRdsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:autostopping/getRuleRds:getRuleRds", {
        "cloudConnectorId": args.cloudConnectorId,
        "database": args.database,
        "depends": args.depends,
        "idleTimeMins": args.idleTimeMins,
        "name": args.name,
        "tcps": args.tcps,
    }, opts);
}

/**
 * A collection of arguments for invoking getRuleRds.
 */
export interface GetRuleRdsArgs {
    /**
     * Id of the cloud connector
     */
    cloudConnectorId: string;
    database: inputs.autostopping.GetRuleRdsDatabase;
    /**
     * Dependent rules
     */
    depends?: inputs.autostopping.GetRuleRdsDepend[];
    /**
     * Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
     */
    idleTimeMins?: number;
    /**
     * Name of the rule
     */
    name: string;
    /**
     * TCP routing configuration
     */
    tcps?: inputs.autostopping.GetRuleRdsTcp[];
}

/**
 * A collection of values returned by getRuleRds.
 */
export interface GetRuleRdsResult {
    /**
     * Id of the cloud connector
     */
    readonly cloudConnectorId: string;
    readonly database: outputs.autostopping.GetRuleRdsDatabase;
    /**
     * Dependent rules
     */
    readonly depends?: outputs.autostopping.GetRuleRdsDepend[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Unique identifier of the resource
     */
    readonly identifier: number;
    /**
     * Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
     */
    readonly idleTimeMins?: number;
    /**
     * Name of the rule
     */
    readonly name: string;
    /**
     * TCP routing configuration
     */
    readonly tcps?: outputs.autostopping.GetRuleRdsTcp[];
}
/**
 * Data source for retrieving a Harness Variable.
 */
export function getRuleRdsOutput(args: GetRuleRdsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRuleRdsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:autostopping/getRuleRds:getRuleRds", {
        "cloudConnectorId": args.cloudConnectorId,
        "database": args.database,
        "depends": args.depends,
        "idleTimeMins": args.idleTimeMins,
        "name": args.name,
        "tcps": args.tcps,
    }, opts);
}

/**
 * A collection of arguments for invoking getRuleRds.
 */
export interface GetRuleRdsOutputArgs {
    /**
     * Id of the cloud connector
     */
    cloudConnectorId: pulumi.Input<string>;
    database: pulumi.Input<inputs.autostopping.GetRuleRdsDatabaseArgs>;
    /**
     * Dependent rules
     */
    depends?: pulumi.Input<pulumi.Input<inputs.autostopping.GetRuleRdsDependArgs>[]>;
    /**
     * Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
     */
    idleTimeMins?: pulumi.Input<number>;
    /**
     * Name of the rule
     */
    name: pulumi.Input<string>;
    /**
     * TCP routing configuration
     */
    tcps?: pulumi.Input<pulumi.Input<inputs.autostopping.GetRuleRdsTcpArgs>[]>;
}
