// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating a fixed schedule for Harness AutoStopping rule
 */
export class Schedule extends pulumi.CustomResource {
    /**
     * Get an existing Schedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScheduleState, opts?: pulumi.CustomResourceOptions): Schedule {
        return new Schedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:autostopping/schedule:Schedule';

    /**
     * Returns true if the given object is an instance of Schedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Schedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Schedule.__pulumiType;
    }

    /**
     * Time until which schedule will be active. Need to be in YYYY-MM-DD HH:mm:SS format. Eg 2006-01-02 15:04:05
     */
    public readonly endingOn!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the schedule
     */
    public /*out*/ readonly identifier!: pulumi.Output<number>;
    /**
     * Name of the schedule
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * For defining periodic schedule. Periodic nature will be applicable from the time of creation of schedule, unless specific 'time_period' is specified
     */
    public readonly repeats!: pulumi.Output<outputs.autostopping.ScheduleRepeat[] | undefined>;
    /**
     * ID of AutoStopping rules on which the schedule applies
     */
    public readonly rules!: pulumi.Output<number[]>;
    /**
     * Type of the schedule. Valid values are `uptime` and `downtime`
     */
    public readonly scheduleType!: pulumi.Output<string>;
    /**
     * Time from which schedule will be active. Schedule will take immediate effect if startingFrom is not specified. Need to be in YYYY-MM-DD HH:mm:SS format. Eg 2006-01-02 15:04:05
     */
    public readonly startingFrom!: pulumi.Output<string | undefined>;
    /**
     * Time zone in which schedule needs to be executed
     */
    public readonly timeZone!: pulumi.Output<string>;

    /**
     * Create a Schedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScheduleArgs | ScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScheduleState | undefined;
            resourceInputs["endingOn"] = state ? state.endingOn : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["repeats"] = state ? state.repeats : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["scheduleType"] = state ? state.scheduleType : undefined;
            resourceInputs["startingFrom"] = state ? state.startingFrom : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
        } else {
            const args = argsOrState as ScheduleArgs | undefined;
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            if ((!args || args.scheduleType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scheduleType'");
            }
            if ((!args || args.timeZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeZone'");
            }
            resourceInputs["endingOn"] = args ? args.endingOn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["repeats"] = args ? args.repeats : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["scheduleType"] = args ? args.scheduleType : undefined;
            resourceInputs["startingFrom"] = args ? args.startingFrom : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["identifier"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Schedule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Schedule resources.
 */
export interface ScheduleState {
    /**
     * Time until which schedule will be active. Need to be in YYYY-MM-DD HH:mm:SS format. Eg 2006-01-02 15:04:05
     */
    endingOn?: pulumi.Input<string>;
    /**
     * Unique identifier of the schedule
     */
    identifier?: pulumi.Input<number>;
    /**
     * Name of the schedule
     */
    name?: pulumi.Input<string>;
    /**
     * For defining periodic schedule. Periodic nature will be applicable from the time of creation of schedule, unless specific 'time_period' is specified
     */
    repeats?: pulumi.Input<pulumi.Input<inputs.autostopping.ScheduleRepeat>[]>;
    /**
     * ID of AutoStopping rules on which the schedule applies
     */
    rules?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Type of the schedule. Valid values are `uptime` and `downtime`
     */
    scheduleType?: pulumi.Input<string>;
    /**
     * Time from which schedule will be active. Schedule will take immediate effect if startingFrom is not specified. Need to be in YYYY-MM-DD HH:mm:SS format. Eg 2006-01-02 15:04:05
     */
    startingFrom?: pulumi.Input<string>;
    /**
     * Time zone in which schedule needs to be executed
     */
    timeZone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Schedule resource.
 */
export interface ScheduleArgs {
    /**
     * Time until which schedule will be active. Need to be in YYYY-MM-DD HH:mm:SS format. Eg 2006-01-02 15:04:05
     */
    endingOn?: pulumi.Input<string>;
    /**
     * Name of the schedule
     */
    name?: pulumi.Input<string>;
    /**
     * For defining periodic schedule. Periodic nature will be applicable from the time of creation of schedule, unless specific 'time_period' is specified
     */
    repeats?: pulumi.Input<pulumi.Input<inputs.autostopping.ScheduleRepeat>[]>;
    /**
     * ID of AutoStopping rules on which the schedule applies
     */
    rules: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Type of the schedule. Valid values are `uptime` and `downtime`
     */
    scheduleType: pulumi.Input<string>;
    /**
     * Time from which schedule will be active. Schedule will take immediate effect if startingFrom is not specified. Need to be in YYYY-MM-DD HH:mm:SS format. Eg 2006-01-02 15:04:05
     */
    startingFrom?: pulumi.Input<string>;
    /**
     * Time zone in which schedule needs to be executed
     */
    timeZone: pulumi.Input<string>;
}
