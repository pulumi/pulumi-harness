// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating a Harness Variables.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const test = new harness.autostopping.RuleVm("test", {
 *     name: "name",
 *     cloudConnectorId: "cloud_connector_id",
 *     idleTimeMins: 10,
 *     dryRun: true,
 *     filter: {
 *         vmIds: ["/subscriptions/subscription_id/resourceGroups/resource_group/providers/Microsoft.Compute/virtualMachines/virtual_machine"],
 *         regions: ["useast2"],
 *     },
 *     https: [{
 *         proxyId: "proxy_id",
 *         routings: [
 *             {
 *                 sourceProtocol: "https",
 *                 targetProtocol: "https",
 *                 sourcePort: 443,
 *                 targetPort: 443,
 *                 action: "forward",
 *             },
 *             {
 *                 sourceProtocol: "http",
 *                 targetProtocol: "http",
 *                 sourcePort: 80,
 *                 targetPort: 80,
 *                 action: "forward",
 *             },
 *         ],
 *         healths: [{
 *             protocol: "http",
 *             port: 80,
 *             path: "/",
 *             timeout: 30,
 *             statusCodeFrom: 200,
 *             statusCodeTo: 299,
 *         }],
 *     }],
 *     tcps: [{
 *         proxyId: "proxy_id",
 *         sshes: [{
 *             port: 22,
 *         }],
 *         rdps: [{
 *             port: 3389,
 *         }],
 *         forwardRules: [{
 *             port: 2233,
 *         }],
 *     }],
 *     depends: [{
 *         ruleId: 24576,
 *         delayInSec: 5,
 *     }],
 * });
 * ```
 */
export class RuleVm extends pulumi.CustomResource {
    /**
     * Get an existing RuleVm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleVmState, opts?: pulumi.CustomResourceOptions): RuleVm {
        return new RuleVm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:autostopping/ruleVm:RuleVm';

    /**
     * Returns true if the given object is an instance of RuleVm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RuleVm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RuleVm.__pulumiType;
    }

    /**
     * Id of the cloud connector
     */
    declare public readonly cloudConnectorId: pulumi.Output<string>;
    /**
     * Custom URLs used to access the instances
     */
    declare public readonly customDomains: pulumi.Output<string[] | undefined>;
    /**
     * Dependent rules
     */
    declare public readonly depends: pulumi.Output<outputs.autostopping.RuleVmDepend[] | undefined>;
    /**
     * Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
     */
    declare public readonly dryRun: pulumi.Output<boolean | undefined>;
    declare public readonly filter: pulumi.Output<outputs.autostopping.RuleVmFilter>;
    /**
     * Http routing configuration
     */
    declare public readonly https: pulumi.Output<outputs.autostopping.RuleVmHttp[] | undefined>;
    /**
     * Unique identifier of the resource
     */
    declare public /*out*/ readonly identifier: pulumi.Output<number>;
    /**
     * Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
     */
    declare public readonly idleTimeMins: pulumi.Output<number | undefined>;
    /**
     * Name of the rule
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * TCP routing configuration
     */
    declare public readonly tcps: pulumi.Output<outputs.autostopping.RuleVmTcp[] | undefined>;
    /**
     * Boolean that indicates whether the selected instances should be converted to spot vm
     */
    declare public readonly useSpot: pulumi.Output<boolean | undefined>;

    /**
     * Create a RuleVm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleVmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleVmArgs | RuleVmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleVmState | undefined;
            resourceInputs["cloudConnectorId"] = state?.cloudConnectorId;
            resourceInputs["customDomains"] = state?.customDomains;
            resourceInputs["depends"] = state?.depends;
            resourceInputs["dryRun"] = state?.dryRun;
            resourceInputs["filter"] = state?.filter;
            resourceInputs["https"] = state?.https;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["idleTimeMins"] = state?.idleTimeMins;
            resourceInputs["name"] = state?.name;
            resourceInputs["tcps"] = state?.tcps;
            resourceInputs["useSpot"] = state?.useSpot;
        } else {
            const args = argsOrState as RuleVmArgs | undefined;
            if (args?.cloudConnectorId === undefined && !opts.urn) {
                throw new Error("Missing required property 'cloudConnectorId'");
            }
            if (args?.filter === undefined && !opts.urn) {
                throw new Error("Missing required property 'filter'");
            }
            resourceInputs["cloudConnectorId"] = args?.cloudConnectorId;
            resourceInputs["customDomains"] = args?.customDomains;
            resourceInputs["depends"] = args?.depends;
            resourceInputs["dryRun"] = args?.dryRun;
            resourceInputs["filter"] = args?.filter;
            resourceInputs["https"] = args?.https;
            resourceInputs["idleTimeMins"] = args?.idleTimeMins;
            resourceInputs["name"] = args?.name;
            resourceInputs["tcps"] = args?.tcps;
            resourceInputs["useSpot"] = args?.useSpot;
            resourceInputs["identifier"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RuleVm.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RuleVm resources.
 */
export interface RuleVmState {
    /**
     * Id of the cloud connector
     */
    cloudConnectorId?: pulumi.Input<string>;
    /**
     * Custom URLs used to access the instances
     */
    customDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Dependent rules
     */
    depends?: pulumi.Input<pulumi.Input<inputs.autostopping.RuleVmDepend>[]>;
    /**
     * Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
     */
    dryRun?: pulumi.Input<boolean>;
    filter?: pulumi.Input<inputs.autostopping.RuleVmFilter>;
    /**
     * Http routing configuration
     */
    https?: pulumi.Input<pulumi.Input<inputs.autostopping.RuleVmHttp>[]>;
    /**
     * Unique identifier of the resource
     */
    identifier?: pulumi.Input<number>;
    /**
     * Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
     */
    idleTimeMins?: pulumi.Input<number>;
    /**
     * Name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * TCP routing configuration
     */
    tcps?: pulumi.Input<pulumi.Input<inputs.autostopping.RuleVmTcp>[]>;
    /**
     * Boolean that indicates whether the selected instances should be converted to spot vm
     */
    useSpot?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a RuleVm resource.
 */
export interface RuleVmArgs {
    /**
     * Id of the cloud connector
     */
    cloudConnectorId: pulumi.Input<string>;
    /**
     * Custom URLs used to access the instances
     */
    customDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Dependent rules
     */
    depends?: pulumi.Input<pulumi.Input<inputs.autostopping.RuleVmDepend>[]>;
    /**
     * Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
     */
    dryRun?: pulumi.Input<boolean>;
    filter: pulumi.Input<inputs.autostopping.RuleVmFilter>;
    /**
     * Http routing configuration
     */
    https?: pulumi.Input<pulumi.Input<inputs.autostopping.RuleVmHttp>[]>;
    /**
     * Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
     */
    idleTimeMins?: pulumi.Input<number>;
    /**
     * Name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * TCP routing configuration
     */
    tcps?: pulumi.Input<pulumi.Input<inputs.autostopping.RuleVmTcp>[]>;
    /**
     * Boolean that indicates whether the selected instances should be converted to spot vm
     */
    useSpot?: pulumi.Input<boolean>;
}
