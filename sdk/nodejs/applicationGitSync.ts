// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource for configuring application git sync.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const _default = harness.getSecretManager({
 *     "default": true,
 * });
 * const githubToken = new harness.EncryptedText("github_token", {
 *     name: "github_token",
 *     value: "<TOKEN>",
 *     secretManagerId: _default.then(_default => _default.id),
 * });
 * const myrepo = new harness.GitConnector("myrepo", {
 *     name: "myrepo",
 *     url: "https://github.com/someorg/myrepo",
 *     branch: "main",
 *     generateWebhookUrl: true,
 *     username: "someuser",
 *     passwordSecretId: githubToken.id,
 *     urlType: "REPO",
 * });
 * const example = new harness.Application("example", {name: "example-app"});
 * const exampleApplicationGitSync = new harness.ApplicationGitSync("example", {
 *     appId: example.id,
 *     connectorId: myrepo.id,
 *     branch: "main",
 *     enabled: false,
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import using the Harness application id
 *
 * ```sh
 * $ pulumi import harness:index/applicationGitSync:ApplicationGitSync myapp Xyz123
 * ```
 */
export class ApplicationGitSync extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationGitSync resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationGitSyncState, opts?: pulumi.CustomResourceOptions): ApplicationGitSync {
        return new ApplicationGitSync(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:index/applicationGitSync:ApplicationGitSync';

    /**
     * Returns true if the given object is an instance of ApplicationGitSync.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationGitSync {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationGitSync.__pulumiType;
    }

    /**
     * The id of the application.
     */
    public readonly appId!: pulumi.Output<string>;
    /**
     * The branch of the git repository to sync to.
     */
    public readonly branch!: pulumi.Output<string>;
    /**
     * The id of the git connector to use.
     */
    public readonly connectorId!: pulumi.Output<string>;
    /**
     * Whether or not to enable git sync.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the git repository to sync to. This is only used if the git connector is for an account and not an individual repository.
     */
    public readonly repositoryName!: pulumi.Output<string | undefined>;

    /**
     * Create a ApplicationGitSync resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationGitSyncArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationGitSyncArgs | ApplicationGitSyncState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationGitSyncState | undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["branch"] = state ? state.branch : undefined;
            resourceInputs["connectorId"] = state ? state.connectorId : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["repositoryName"] = state ? state.repositoryName : undefined;
        } else {
            const args = argsOrState as ApplicationGitSyncArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if ((!args || args.branch === undefined) && !opts.urn) {
                throw new Error("Missing required property 'branch'");
            }
            if ((!args || args.connectorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorId'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["branch"] = args ? args.branch : undefined;
            resourceInputs["connectorId"] = args ? args.connectorId : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["repositoryName"] = args ? args.repositoryName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationGitSync.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplicationGitSync resources.
 */
export interface ApplicationGitSyncState {
    /**
     * The id of the application.
     */
    appId?: pulumi.Input<string>;
    /**
     * The branch of the git repository to sync to.
     */
    branch?: pulumi.Input<string>;
    /**
     * The id of the git connector to use.
     */
    connectorId?: pulumi.Input<string>;
    /**
     * Whether or not to enable git sync.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of the git repository to sync to. This is only used if the git connector is for an account and not an individual repository.
     */
    repositoryName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApplicationGitSync resource.
 */
export interface ApplicationGitSyncArgs {
    /**
     * The id of the application.
     */
    appId: pulumi.Input<string>;
    /**
     * The branch of the git repository to sync to.
     */
    branch: pulumi.Input<string>;
    /**
     * The id of the git connector to use.
     */
    connectorId: pulumi.Input<string>;
    /**
     * Whether or not to enable git sync.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of the git repository to sync to. This is only used if the git connector is for an account and not an individual repository.
     */
    repositoryName?: pulumi.Input<string>;
}
