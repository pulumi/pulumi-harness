// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AddUserToGroupArgs, AddUserToGroupState } from "./addUserToGroup";
export type AddUserToGroup = import("./addUserToGroup").AddUserToGroup;
export const AddUserToGroup: typeof import("./addUserToGroup").AddUserToGroup = null as any;
utilities.lazyLoad(exports, ["AddUserToGroup"], () => require("./addUserToGroup"));

export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { ApplicationGitSyncArgs, ApplicationGitSyncState } from "./applicationGitSync";
export type ApplicationGitSync = import("./applicationGitSync").ApplicationGitSync;
export const ApplicationGitSync: typeof import("./applicationGitSync").ApplicationGitSync = null as any;
utilities.lazyLoad(exports, ["ApplicationGitSync"], () => require("./applicationGitSync"));

export { ChaosInfrastructureArgs, ChaosInfrastructureState } from "./chaosInfrastructure";
export type ChaosInfrastructure = import("./chaosInfrastructure").ChaosInfrastructure;
export const ChaosInfrastructure: typeof import("./chaosInfrastructure").ChaosInfrastructure = null as any;
utilities.lazyLoad(exports, ["ChaosInfrastructure"], () => require("./chaosInfrastructure"));

export { DelegateApprovalArgs, DelegateApprovalState } from "./delegateApproval";
export type DelegateApproval = import("./delegateApproval").DelegateApproval;
export const DelegateApproval: typeof import("./delegateApproval").DelegateApproval = null as any;
utilities.lazyLoad(exports, ["DelegateApproval"], () => require("./delegateApproval"));

export { EncryptedTextArgs, EncryptedTextState } from "./encryptedText";
export type EncryptedText = import("./encryptedText").EncryptedText;
export const EncryptedText: typeof import("./encryptedText").EncryptedText = null as any;
utilities.lazyLoad(exports, ["EncryptedText"], () => require("./encryptedText"));

export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { GetApplicationArgs, GetApplicationResult, GetApplicationOutputArgs } from "./getApplication";
export const getApplication: typeof import("./getApplication").getApplication = null as any;
export const getApplicationOutput: typeof import("./getApplication").getApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplication","getApplicationOutput"], () => require("./getApplication"));

export { GetChaosInfrastructureArgs, GetChaosInfrastructureResult, GetChaosInfrastructureOutputArgs } from "./getChaosInfrastructure";
export const getChaosInfrastructure: typeof import("./getChaosInfrastructure").getChaosInfrastructure = null as any;
export const getChaosInfrastructureOutput: typeof import("./getChaosInfrastructure").getChaosInfrastructureOutput = null as any;
utilities.lazyLoad(exports, ["getChaosInfrastructure","getChaosInfrastructureOutput"], () => require("./getChaosInfrastructure"));

export { GetCurrentAccountArgs, GetCurrentAccountResult, GetCurrentAccountOutputArgs } from "./getCurrentAccount";
export const getCurrentAccount: typeof import("./getCurrentAccount").getCurrentAccount = null as any;
export const getCurrentAccountOutput: typeof import("./getCurrentAccount").getCurrentAccountOutput = null as any;
utilities.lazyLoad(exports, ["getCurrentAccount","getCurrentAccountOutput"], () => require("./getCurrentAccount"));

export { GetDelegateArgs, GetDelegateResult, GetDelegateOutputArgs } from "./getDelegate";
export const getDelegate: typeof import("./getDelegate").getDelegate = null as any;
export const getDelegateOutput: typeof import("./getDelegate").getDelegateOutput = null as any;
utilities.lazyLoad(exports, ["getDelegate","getDelegateOutput"], () => require("./getDelegate"));

export { GetEncryptedTextArgs, GetEncryptedTextResult, GetEncryptedTextOutputArgs } from "./getEncryptedText";
export const getEncryptedText: typeof import("./getEncryptedText").getEncryptedText = null as any;
export const getEncryptedTextOutput: typeof import("./getEncryptedText").getEncryptedTextOutput = null as any;
utilities.lazyLoad(exports, ["getEncryptedText","getEncryptedTextOutput"], () => require("./getEncryptedText"));

export { GetEnvironmentArgs, GetEnvironmentResult, GetEnvironmentOutputArgs } from "./getEnvironment";
export const getEnvironment: typeof import("./getEnvironment").getEnvironment = null as any;
export const getEnvironmentOutput: typeof import("./getEnvironment").getEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironment","getEnvironmentOutput"], () => require("./getEnvironment"));

export { GetGitConnectorArgs, GetGitConnectorResult, GetGitConnectorOutputArgs } from "./getGitConnector";
export const getGitConnector: typeof import("./getGitConnector").getGitConnector = null as any;
export const getGitConnectorOutput: typeof import("./getGitConnector").getGitConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getGitConnector","getGitConnectorOutput"], () => require("./getGitConnector"));

export { GetSecretManagerArgs, GetSecretManagerResult, GetSecretManagerOutputArgs } from "./getSecretManager";
export const getSecretManager: typeof import("./getSecretManager").getSecretManager = null as any;
export const getSecretManagerOutput: typeof import("./getSecretManager").getSecretManagerOutput = null as any;
utilities.lazyLoad(exports, ["getSecretManager","getSecretManagerOutput"], () => require("./getSecretManager"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetSshCredentialArgs, GetSshCredentialResult, GetSshCredentialOutputArgs } from "./getSshCredential";
export const getSshCredential: typeof import("./getSshCredential").getSshCredential = null as any;
export const getSshCredentialOutput: typeof import("./getSshCredential").getSshCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getSshCredential","getSshCredentialOutput"], () => require("./getSshCredential"));

export { GetSsoProviderArgs, GetSsoProviderResult, GetSsoProviderOutputArgs } from "./getSsoProvider";
export const getSsoProvider: typeof import("./getSsoProvider").getSsoProvider = null as any;
export const getSsoProviderOutput: typeof import("./getSsoProvider").getSsoProviderOutput = null as any;
utilities.lazyLoad(exports, ["getSsoProvider","getSsoProviderOutput"], () => require("./getSsoProvider"));

export { GetTriggerArgs, GetTriggerResult, GetTriggerOutputArgs } from "./getTrigger";
export const getTrigger: typeof import("./getTrigger").getTrigger = null as any;
export const getTriggerOutput: typeof import("./getTrigger").getTriggerOutput = null as any;
utilities.lazyLoad(exports, ["getTrigger","getTriggerOutput"], () => require("./getTrigger"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserGroupArgs, GetUserGroupResult, GetUserGroupOutputArgs } from "./getUserGroup";
export const getUserGroup: typeof import("./getUserGroup").getUserGroup = null as any;
export const getUserGroupOutput: typeof import("./getUserGroup").getUserGroupOutput = null as any;
utilities.lazyLoad(exports, ["getUserGroup","getUserGroupOutput"], () => require("./getUserGroup"));

export { GetYamlConfigArgs, GetYamlConfigResult, GetYamlConfigOutputArgs } from "./getYamlConfig";
export const getYamlConfig: typeof import("./getYamlConfig").getYamlConfig = null as any;
export const getYamlConfigOutput: typeof import("./getYamlConfig").getYamlConfigOutput = null as any;
utilities.lazyLoad(exports, ["getYamlConfig","getYamlConfigOutput"], () => require("./getYamlConfig"));

export { GitConnectorArgs, GitConnectorState } from "./gitConnector";
export type GitConnector = import("./gitConnector").GitConnector;
export const GitConnector: typeof import("./gitConnector").GitConnector = null as any;
utilities.lazyLoad(exports, ["GitConnector"], () => require("./gitConnector"));

export { InfrastructureDefinitionArgs, InfrastructureDefinitionState } from "./infrastructureDefinition";
export type InfrastructureDefinition = import("./infrastructureDefinition").InfrastructureDefinition;
export const InfrastructureDefinition: typeof import("./infrastructureDefinition").InfrastructureDefinition = null as any;
utilities.lazyLoad(exports, ["InfrastructureDefinition"], () => require("./infrastructureDefinition"));

export { PlatformApiKeyArgs, PlatformApiKeyState } from "./platformApiKey";
export type PlatformApiKey = import("./platformApiKey").PlatformApiKey;
export const PlatformApiKey: typeof import("./platformApiKey").PlatformApiKey = null as any;
utilities.lazyLoad(exports, ["PlatformApiKey"], () => require("./platformApiKey"));

export { PlatformCcmFiltersArgs, PlatformCcmFiltersState } from "./platformCcmFilters";
export type PlatformCcmFilters = import("./platformCcmFilters").PlatformCcmFilters;
export const PlatformCcmFilters: typeof import("./platformCcmFilters").PlatformCcmFilters = null as any;
utilities.lazyLoad(exports, ["PlatformCcmFilters"], () => require("./platformCcmFilters"));

export * from "./provider";
import { Provider } from "./provider";

export { SshCredentialArgs, SshCredentialState } from "./sshCredential";
export type SshCredential = import("./sshCredential").SshCredential;
export const SshCredential: typeof import("./sshCredential").SshCredential = null as any;
utilities.lazyLoad(exports, ["SshCredential"], () => require("./sshCredential"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserGroupArgs, UserGroupState } from "./userGroup";
export type UserGroup = import("./userGroup").UserGroup;
export const UserGroup: typeof import("./userGroup").UserGroup = null as any;
utilities.lazyLoad(exports, ["UserGroup"], () => require("./userGroup"));

export { UserGroupPermissionsArgs, UserGroupPermissionsState } from "./userGroupPermissions";
export type UserGroupPermissions = import("./userGroupPermissions").UserGroupPermissions;
export const UserGroupPermissions: typeof import("./userGroupPermissions").UserGroupPermissions = null as any;
utilities.lazyLoad(exports, ["UserGroupPermissions"], () => require("./userGroupPermissions"));

export { YamlConfigArgs, YamlConfigState } from "./yamlConfig";
export type YamlConfig = import("./yamlConfig").YamlConfig;
export const YamlConfig: typeof import("./yamlConfig").YamlConfig = null as any;
utilities.lazyLoad(exports, ["YamlConfig"], () => require("./yamlConfig"));


// Export sub-modules:
import * as autostopping from "./autostopping";
import * as chaos from "./chaos";
import * as cloudprovider from "./cloudprovider";
import * as cluster from "./cluster";
import * as config from "./config";
import * as governance from "./governance";
import * as platform from "./platform";
import * as service from "./service";
import * as types from "./types";

export {
    autostopping,
    chaos,
    cloudprovider,
    cluster,
    config,
    governance,
    platform,
    service,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "harness:index/addUserToGroup:AddUserToGroup":
                return new AddUserToGroup(name, <any>undefined, { urn })
            case "harness:index/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "harness:index/applicationGitSync:ApplicationGitSync":
                return new ApplicationGitSync(name, <any>undefined, { urn })
            case "harness:index/chaosInfrastructure:ChaosInfrastructure":
                return new ChaosInfrastructure(name, <any>undefined, { urn })
            case "harness:index/delegateApproval:DelegateApproval":
                return new DelegateApproval(name, <any>undefined, { urn })
            case "harness:index/encryptedText:EncryptedText":
                return new EncryptedText(name, <any>undefined, { urn })
            case "harness:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "harness:index/gitConnector:GitConnector":
                return new GitConnector(name, <any>undefined, { urn })
            case "harness:index/infrastructureDefinition:InfrastructureDefinition":
                return new InfrastructureDefinition(name, <any>undefined, { urn })
            case "harness:index/platformApiKey:PlatformApiKey":
                return new PlatformApiKey(name, <any>undefined, { urn })
            case "harness:index/platformCcmFilters:PlatformCcmFilters":
                return new PlatformCcmFilters(name, <any>undefined, { urn })
            case "harness:index/sshCredential:SshCredential":
                return new SshCredential(name, <any>undefined, { urn })
            case "harness:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "harness:index/userGroup:UserGroup":
                return new UserGroup(name, <any>undefined, { urn })
            case "harness:index/userGroupPermissions:UserGroupPermissions":
                return new UserGroupPermissions(name, <any>undefined, { urn })
            case "harness:index/yamlConfig:YamlConfig":
                return new YamlConfig(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("harness", "index/addUserToGroup", _module)
pulumi.runtime.registerResourceModule("harness", "index/application", _module)
pulumi.runtime.registerResourceModule("harness", "index/applicationGitSync", _module)
pulumi.runtime.registerResourceModule("harness", "index/chaosInfrastructure", _module)
pulumi.runtime.registerResourceModule("harness", "index/delegateApproval", _module)
pulumi.runtime.registerResourceModule("harness", "index/encryptedText", _module)
pulumi.runtime.registerResourceModule("harness", "index/environment", _module)
pulumi.runtime.registerResourceModule("harness", "index/gitConnector", _module)
pulumi.runtime.registerResourceModule("harness", "index/infrastructureDefinition", _module)
pulumi.runtime.registerResourceModule("harness", "index/platformApiKey", _module)
pulumi.runtime.registerResourceModule("harness", "index/platformCcmFilters", _module)
pulumi.runtime.registerResourceModule("harness", "index/sshCredential", _module)
pulumi.runtime.registerResourceModule("harness", "index/user", _module)
pulumi.runtime.registerResourceModule("harness", "index/userGroup", _module)
pulumi.runtime.registerResourceModule("harness", "index/userGroupPermissions", _module)
pulumi.runtime.registerResourceModule("harness", "index/yamlConfig", _module)
pulumi.runtime.registerResourcePackage("harness", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:harness") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
