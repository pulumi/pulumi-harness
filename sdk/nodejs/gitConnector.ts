// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Resource for creating a git connector
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const _default = harness.getSecretManager({
 *     "default": true,
 * });
 * const example = new harness.EncryptedText("example", {
 *     name: "example-secret",
 *     value: "foo",
 *     secretManagerId: _default.then(_default => _default.id),
 * });
 * const exampleGitConnector = new harness.GitConnector("example", {
 *     name: "example",
 *     url: "https://github.com/harness/terraform-provider-harness",
 *     branch: "master",
 *     generateWebhookUrl: true,
 *     passwordSecretId: example.id,
 *     urlType: "REPO",
 *     username: "someuser",
 * });
 * ```
 *
 * ## Import
 *
 * Import using the Harness git connector id
 *
 * ```sh
 * $ pulumi import harness:index/gitConnector:GitConnector example <connector_id>
 * ```
 */
export class GitConnector extends pulumi.CustomResource {
    /**
     * Get an existing GitConnector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GitConnectorState, opts?: pulumi.CustomResourceOptions): GitConnector {
        return new GitConnector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:index/gitConnector:GitConnector';

    /**
     * Returns true if the given object is an instance of GitConnector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GitConnector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GitConnector.__pulumiType;
    }

    /**
     * The branch of the git connector to use
     */
    public readonly branch!: pulumi.Output<string | undefined>;
    /**
     * Custom details to use when making commits using this git connector
     */
    public readonly commitDetails!: pulumi.Output<outputs.GitConnectorCommitDetails | undefined>;
    /**
     * The time the git connector was created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Delegate selectors to apply to this git connector.
     */
    public readonly delegateSelectors!: pulumi.Output<string[] | undefined>;
    /**
     * Boolean indicating whether or not to generate a webhook url.
     */
    public readonly generateWebhookUrl!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the git connector.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The id of the secret for connecting to the git repository.
     */
    public readonly passwordSecretId!: pulumi.Output<string | undefined>;
    /**
     * The id of the SSH secret to use
     */
    public readonly sshSettingId!: pulumi.Output<string | undefined>;
    /**
     * The URL of the git repository or account/organization
     */
    public readonly url!: pulumi.Output<string>;
    /**
     * The type of git url being used. Options are `ACCOUNT`, and `REPO.`
     */
    public readonly urlType!: pulumi.Output<string>;
    /**
     * This block is used for scoping the resource to a specific set of applications or environments.
     */
    public readonly usageScopes!: pulumi.Output<outputs.GitConnectorUsageScope[] | undefined>;
    /**
     * The name of the user used to connect to the git repository
     */
    public readonly username!: pulumi.Output<string | undefined>;
    /**
     * The generated webhook url
     */
    public /*out*/ readonly webhookUrl!: pulumi.Output<string>;

    /**
     * Create a GitConnector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GitConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GitConnectorArgs | GitConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GitConnectorState | undefined;
            resourceInputs["branch"] = state ? state.branch : undefined;
            resourceInputs["commitDetails"] = state ? state.commitDetails : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["delegateSelectors"] = state ? state.delegateSelectors : undefined;
            resourceInputs["generateWebhookUrl"] = state ? state.generateWebhookUrl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passwordSecretId"] = state ? state.passwordSecretId : undefined;
            resourceInputs["sshSettingId"] = state ? state.sshSettingId : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["urlType"] = state ? state.urlType : undefined;
            resourceInputs["usageScopes"] = state ? state.usageScopes : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["webhookUrl"] = state ? state.webhookUrl : undefined;
        } else {
            const args = argsOrState as GitConnectorArgs | undefined;
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            if ((!args || args.urlType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'urlType'");
            }
            resourceInputs["branch"] = args ? args.branch : undefined;
            resourceInputs["commitDetails"] = args ? args.commitDetails : undefined;
            resourceInputs["delegateSelectors"] = args ? args.delegateSelectors : undefined;
            resourceInputs["generateWebhookUrl"] = args ? args.generateWebhookUrl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passwordSecretId"] = args ? args.passwordSecretId : undefined;
            resourceInputs["sshSettingId"] = args ? args.sshSettingId : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["urlType"] = args ? args.urlType : undefined;
            resourceInputs["usageScopes"] = args ? args.usageScopes : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["webhookUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GitConnector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GitConnector resources.
 */
export interface GitConnectorState {
    /**
     * The branch of the git connector to use
     */
    branch?: pulumi.Input<string>;
    /**
     * Custom details to use when making commits using this git connector
     */
    commitDetails?: pulumi.Input<inputs.GitConnectorCommitDetails>;
    /**
     * The time the git connector was created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Delegate selectors to apply to this git connector.
     */
    delegateSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Boolean indicating whether or not to generate a webhook url.
     */
    generateWebhookUrl?: pulumi.Input<boolean>;
    /**
     * Name of the git connector.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the secret for connecting to the git repository.
     */
    passwordSecretId?: pulumi.Input<string>;
    /**
     * The id of the SSH secret to use
     */
    sshSettingId?: pulumi.Input<string>;
    /**
     * The URL of the git repository or account/organization
     */
    url?: pulumi.Input<string>;
    /**
     * The type of git url being used. Options are `ACCOUNT`, and `REPO.`
     */
    urlType?: pulumi.Input<string>;
    /**
     * This block is used for scoping the resource to a specific set of applications or environments.
     */
    usageScopes?: pulumi.Input<pulumi.Input<inputs.GitConnectorUsageScope>[]>;
    /**
     * The name of the user used to connect to the git repository
     */
    username?: pulumi.Input<string>;
    /**
     * The generated webhook url
     */
    webhookUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GitConnector resource.
 */
export interface GitConnectorArgs {
    /**
     * The branch of the git connector to use
     */
    branch?: pulumi.Input<string>;
    /**
     * Custom details to use when making commits using this git connector
     */
    commitDetails?: pulumi.Input<inputs.GitConnectorCommitDetails>;
    /**
     * Delegate selectors to apply to this git connector.
     */
    delegateSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Boolean indicating whether or not to generate a webhook url.
     */
    generateWebhookUrl?: pulumi.Input<boolean>;
    /**
     * Name of the git connector.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the secret for connecting to the git repository.
     */
    passwordSecretId?: pulumi.Input<string>;
    /**
     * The id of the SSH secret to use
     */
    sshSettingId?: pulumi.Input<string>;
    /**
     * The URL of the git repository or account/organization
     */
    url: pulumi.Input<string>;
    /**
     * The type of git url being used. Options are `ACCOUNT`, and `REPO.`
     */
    urlType: pulumi.Input<string>;
    /**
     * This block is used for scoping the resource to a specific set of applications or environments.
     */
    usageScopes?: pulumi.Input<pulumi.Input<inputs.GitConnectorUsageScope>[]>;
    /**
     * The name of the user used to connect to the git repository
     */
    username?: pulumi.Input<string>;
}
