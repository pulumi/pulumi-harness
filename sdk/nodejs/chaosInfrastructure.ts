// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource for creating a Chaos Infrastructure.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * // Sample resource for chaos infrastructure
 * const example = new harness.ChaosInfrastructure("example", {
 *     identifier: "identifier",
 *     name: "name",
 *     orgId: "org_id",
 *     projectId: "project_id",
 *     environmentId: "env_id",
 *     namespace: "namespace",
 *     serviceAccount: "service_acc_name",
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import using the Harness chaos_infra_id.
 *
 * ```sh
 * $ pulumi import harness:index/chaosInfrastructure:ChaosInfrastructure example <chaos_infra_id>
 * ```
 */
export class ChaosInfrastructure extends pulumi.CustomResource {
    /**
     * Get an existing ChaosInfrastructure resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ChaosInfrastructureState, opts?: pulumi.CustomResourceOptions): ChaosInfrastructure {
        return new ChaosInfrastructure(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:index/chaosInfrastructure:ChaosInfrastructure';

    /**
     * Returns true if the given object is an instance of ChaosInfrastructure.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ChaosInfrastructure {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ChaosInfrastructure.__pulumiType;
    }

    /**
     * Description of the resource.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Environment ID of the chaos infrastructure.
     */
    declare public readonly environmentId: pulumi.Output<string>;
    /**
     * Unique identifier of the resource.
     */
    declare public readonly identifier: pulumi.Output<string>;
    /**
     * Name of the resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Namespace of the chaos infrastructure.
     */
    declare public readonly namespace: pulumi.Output<string>;
    /**
     * Unique identifier of the organization.
     */
    declare public readonly orgId: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the project.
     */
    declare public readonly projectId: pulumi.Output<string | undefined>;
    /**
     * Service Account of the chaos infrastructure.
     */
    declare public readonly serviceAccount: pulumi.Output<string>;
    /**
     * Tags to associate with the resource.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;

    /**
     * Create a ChaosInfrastructure resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ChaosInfrastructureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ChaosInfrastructureArgs | ChaosInfrastructureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ChaosInfrastructureState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["environmentId"] = state?.environmentId;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["name"] = state?.name;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["serviceAccount"] = state?.serviceAccount;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as ChaosInfrastructureArgs | undefined;
            if (args?.environmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if (args?.identifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if (args?.namespace === undefined && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if (args?.serviceAccount === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceAccount'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["environmentId"] = args?.environmentId;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["name"] = args?.name;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["serviceAccount"] = args?.serviceAccount;
            resourceInputs["tags"] = args?.tags;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ChaosInfrastructure.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ChaosInfrastructure resources.
 */
export interface ChaosInfrastructureState {
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Environment ID of the chaos infrastructure.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace of the chaos infrastructure.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Service Account of the chaos infrastructure.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ChaosInfrastructure resource.
 */
export interface ChaosInfrastructureArgs {
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Environment ID of the chaos infrastructure.
     */
    environmentId: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace of the chaos infrastructure.
     */
    namespace: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Service Account of the chaos infrastructure.
     */
    serviceAccount: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
