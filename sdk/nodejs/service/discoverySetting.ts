// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for managing service discovery settings.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * // Update image registry settings for service discovery
 * const example = new harness.service.DiscoverySetting("example", {
 *     orgIdentifier: "sechaosworkshop",
 *     projectIdentifier: "se1",
 *     imageRegistry: {
 *         account: "<account_name>",
 *         server: "<registry_server>",
 *         secrets: ["<secret_name>"],
 *     },
 * });
 * ```
 */
export class DiscoverySetting extends pulumi.CustomResource {
    /**
     * Get an existing DiscoverySetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DiscoverySettingState, opts?: pulumi.CustomResourceOptions): DiscoverySetting {
        return new DiscoverySetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:service/discoverySetting:DiscoverySetting';

    /**
     * Returns true if the given object is an instance of DiscoverySetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DiscoverySetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DiscoverySetting.__pulumiType;
    }

    /**
     * Correlation ID for the request.
     */
    declare public readonly correlationId: pulumi.Output<string | undefined>;
    /**
     * Timestamp when the setting was created.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Image registry configuration.
     */
    declare public readonly imageRegistry: pulumi.Output<outputs.service.DiscoverySettingImageRegistry | undefined>;
    /**
     * The organization identifier.
     */
    declare public readonly orgIdentifier: pulumi.Output<string | undefined>;
    /**
     * The project identifier.
     */
    declare public readonly projectIdentifier: pulumi.Output<string | undefined>;
    /**
     * Timestamp when the setting was last updated.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a DiscoverySetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DiscoverySettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DiscoverySettingArgs | DiscoverySettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DiscoverySettingState | undefined;
            resourceInputs["correlationId"] = state?.correlationId;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["imageRegistry"] = state?.imageRegistry;
            resourceInputs["orgIdentifier"] = state?.orgIdentifier;
            resourceInputs["projectIdentifier"] = state?.projectIdentifier;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as DiscoverySettingArgs | undefined;
            resourceInputs["correlationId"] = args?.correlationId;
            resourceInputs["imageRegistry"] = args?.imageRegistry;
            resourceInputs["orgIdentifier"] = args?.orgIdentifier;
            resourceInputs["projectIdentifier"] = args?.projectIdentifier;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DiscoverySetting.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DiscoverySetting resources.
 */
export interface DiscoverySettingState {
    /**
     * Correlation ID for the request.
     */
    correlationId?: pulumi.Input<string>;
    /**
     * Timestamp when the setting was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Image registry configuration.
     */
    imageRegistry?: pulumi.Input<inputs.service.DiscoverySettingImageRegistry>;
    /**
     * The organization identifier.
     */
    orgIdentifier?: pulumi.Input<string>;
    /**
     * The project identifier.
     */
    projectIdentifier?: pulumi.Input<string>;
    /**
     * Timestamp when the setting was last updated.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DiscoverySetting resource.
 */
export interface DiscoverySettingArgs {
    /**
     * Correlation ID for the request.
     */
    correlationId?: pulumi.Input<string>;
    /**
     * Image registry configuration.
     */
    imageRegistry?: pulumi.Input<inputs.service.DiscoverySettingImageRegistry>;
    /**
     * The organization identifier.
     */
    orgIdentifier?: pulumi.Input<string>;
    /**
     * The project identifier.
     */
    projectIdentifier?: pulumi.Input<string>;
}
