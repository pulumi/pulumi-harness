// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for managing a Harness Service Discovery Agent.
 *
 * This resource allows you to create, read, update, and delete a Service Discovery Agent in Harness.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = new harness.service.DiscoveryAgent("example", {
 *     name: "ExampleAgent",
 *     orgIdentifier: "your_org_id",
 *     projectIdentifier: "your_project_id",
 *     environmentIdentifier: "your_environment_id",
 *     infraIdentifier: "your_infra_id",
 *     configs: [{
 *         collectorImage: "harness/service-discovery-collector:main-latest",
 *         logWatcherImage: "harness/chaos-log-watcher:main-latest",
 *         kubernetes: [{
 *             namespace: "harness-sd",
 *         }],
 *     }],
 * });
 * ```
 *
 * ### Additional Examples
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * // Create a new service discovery agent with minimal configuration
 * const example = new harness.service.DiscoveryAgent("example", {
 *     name: "example-agent",
 *     orgIdentifier: orgIdentifier,
 *     projectIdentifier: projectIdentifier,
 *     environmentIdentifier: environmentIdentifier,
 *     infraIdentifier: "example-infra",
 *     configs: [{
 *         kubernetes: [{
 *             namespace: "harness-sd",
 *         }],
 *     }],
 * });
 * // Create a new service discovery agent with node agent enabled
 * const nodeAgent = new harness.service.DiscoveryAgent("node_agent", {
 *     name: "node-agent-example",
 *     orgIdentifier: orgIdentifier,
 *     projectIdentifier: projectIdentifier,
 *     environmentIdentifier: environmentIdentifier,
 *     infraIdentifier: "node-agent-example",
 *     configs: [{
 *         kubernetes: [{
 *             namespace: "harness-sd",
 *         }],
 *         datas: [{
 *             enableNodeAgent: true,
 *         }],
 *     }],
 * });
 * // Create a new service discovery agent with full configuration
 * const fullConfig = new harness.service.DiscoveryAgent("full_config", {
 *     name: "full-config-example",
 *     orgIdentifier: orgIdentifier,
 *     projectIdentifier: projectIdentifier,
 *     environmentIdentifier: environmentIdentifier,
 *     infraIdentifier: "full-config-example",
 *     permanentInstallation: false,
 *     correlationId: "full-config-correlation-123",
 *     configs: [{
 *         collectorImage: "harness/service-discovery-collector:main-latest",
 *         logWatcherImage: "harness/chaos-log-watcher:main-latest",
 *         skipSecureVerify: false,
 *         kubernetes: [{
 *             namespace: "harness-sd",
 *             serviceAccount: "harness-sd-sa",
 *             imagePullPolicy: "IfNotPresent",
 *             runAsUser: 2000,
 *             runAsGroup: 2000,
 *             labels: {
 *                 app: "service-discovery",
 *                 env: "dev",
 *             },
 *             annotations: {
 *                 "example.com/annotation": "value",
 *             },
 *             nodeSelector: {
 *                 "kubernetes.io/os": "linux",
 *             },
 *             resources: [{
 *                 limits: {
 *                     cpu: "500m",
 *                     memory: "512Mi",
 *                 },
 *                 requests: {
 *                     cpu: "250m",
 *                     memory: "256Mi",
 *                 },
 *             }],
 *             tolerations: [{
 *                 key: "key1",
 *                 operator: "Equal",
 *                 value: "value1",
 *                 effect: "NoSchedule",
 *             }],
 *         }],
 *         datas: [{
 *             enableNodeAgent: true,
 *             nodeAgentSelector: "node-role.kubernetes.io/worker=",
 *             enableBatchResources: true,
 *             enableOrphanedPod: true,
 *             namespaceSelector: "environment=dev",
 *             collectionWindowInMin: 15,
 *             blacklistedNamespaces: [
 *                 "kube-system",
 *                 "kube-public",
 *             ],
 *             observedNamespaces: [
 *                 "default",
 *                 "harness",
 *             ],
 *             crons: [{
 *                 expression: "0/10 * * * *",
 *             }],
 *         }],
 *         mtls: [{
 *             certPath: "/etc/certs/tls.crt",
 *             keyPath: "/etc/certs/tls.key",
 *             secretName: "mtls-secret",
 *             url: "https://mtls.example.com:8443",
 *         }],
 *         proxies: [{
 *             httpProxy: "http://proxy.example.com:8080",
 *             httpsProxy: "https://proxy.example.com:8080",
 *             noProxy: "localhost,127.0.0.1,.svc,.cluster.local",
 *             url: "https://proxy.example.com",
 *         }],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import Project level Service Discovery Agent
 *
 * Account and Org level agents are not supported yet
 *
 * ```sh
 * $ pulumi import harness:service/discoveryAgent:DiscoveryAgent example <org_identifier>/<project_identifier>/<environment_identifier>/<infra_identifier>
 * ```
 */
export class DiscoveryAgent extends pulumi.CustomResource {
    /**
     * Get an existing DiscoveryAgent resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DiscoveryAgentState, opts?: pulumi.CustomResourceOptions): DiscoveryAgent {
        return new DiscoveryAgent(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:service/discoveryAgent:DiscoveryAgent';

    /**
     * Returns true if the given object is an instance of DiscoveryAgent.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DiscoveryAgent {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DiscoveryAgent.__pulumiType;
    }

    /**
     * Configuration for the agent. This is a required field.
     */
    public readonly configs!: pulumi.Output<outputs.service.DiscoveryAgentConfig[]>;
    /**
     * Correlation ID for the agent.
     */
    public readonly correlationId!: pulumi.Output<string>;
    /**
     * Timestamp when the agent was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * User who created the agent.
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * Description of the agent.
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * The environment identifier of the agent. This is a required field.
     */
    public readonly environmentIdentifier!: pulumi.Output<string>;
    /**
     * The unique identity of the agent.
     */
    public /*out*/ readonly identity!: pulumi.Output<string>;
    /**
     * The infrastructure identifier of the agent. This is a required field.
     */
    public readonly infraIdentifier!: pulumi.Output<string>;
    /**
     * Installation details of the agent.
     */
    public /*out*/ readonly installationDetails!: pulumi.Output<outputs.service.DiscoveryAgentInstallationDetail[]>;
    /**
     * Type of installation for the agent.
     */
    public readonly installationType!: pulumi.Output<string | undefined>;
    /**
     * The name of the agent. This is a required field.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Number of network maps associated with this agent.
     */
    public /*out*/ readonly networkMapCount!: pulumi.Output<number>;
    /**
     * The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     */
    public readonly orgIdentifier!: pulumi.Output<string | undefined>;
    /**
     * Whether this is a permanent installation.
     */
    public readonly permanentInstallation!: pulumi.Output<boolean | undefined>;
    /**
     * The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     */
    public readonly projectIdentifier!: pulumi.Output<string | undefined>;
    /**
     * Whether the agent has been removed.
     */
    public /*out*/ readonly removed!: pulumi.Output<boolean>;
    /**
     * Timestamp when the agent was removed.
     */
    public /*out*/ readonly removedAt!: pulumi.Output<string>;
    /**
     * Number of services managed by this agent.
     */
    public /*out*/ readonly serviceCount!: pulumi.Output<number>;
    /**
     * List of resource tags for the agent.
     */
    public /*out*/ readonly tags!: pulumi.Output<string[]>;
    /**
     * Timestamp when the agent was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * User who last updated the agent.
     */
    public /*out*/ readonly updatedBy!: pulumi.Output<string>;
    /**
     * Webhook URL for the agent.
     */
    public readonly webhookUrl!: pulumi.Output<string | undefined>;

    /**
     * Create a DiscoveryAgent resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DiscoveryAgentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DiscoveryAgentArgs | DiscoveryAgentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DiscoveryAgentState | undefined;
            resourceInputs["configs"] = state ? state.configs : undefined;
            resourceInputs["correlationId"] = state ? state.correlationId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["environmentIdentifier"] = state ? state.environmentIdentifier : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["infraIdentifier"] = state ? state.infraIdentifier : undefined;
            resourceInputs["installationDetails"] = state ? state.installationDetails : undefined;
            resourceInputs["installationType"] = state ? state.installationType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkMapCount"] = state ? state.networkMapCount : undefined;
            resourceInputs["orgIdentifier"] = state ? state.orgIdentifier : undefined;
            resourceInputs["permanentInstallation"] = state ? state.permanentInstallation : undefined;
            resourceInputs["projectIdentifier"] = state ? state.projectIdentifier : undefined;
            resourceInputs["removed"] = state ? state.removed : undefined;
            resourceInputs["removedAt"] = state ? state.removedAt : undefined;
            resourceInputs["serviceCount"] = state ? state.serviceCount : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
            resourceInputs["webhookUrl"] = state ? state.webhookUrl : undefined;
        } else {
            const args = argsOrState as DiscoveryAgentArgs | undefined;
            if ((!args || args.configs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configs'");
            }
            if ((!args || args.environmentIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentIdentifier'");
            }
            if ((!args || args.infraIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'infraIdentifier'");
            }
            resourceInputs["configs"] = args ? args.configs : undefined;
            resourceInputs["correlationId"] = args ? args.correlationId : undefined;
            resourceInputs["environmentIdentifier"] = args ? args.environmentIdentifier : undefined;
            resourceInputs["infraIdentifier"] = args ? args.infraIdentifier : undefined;
            resourceInputs["installationType"] = args ? args.installationType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgIdentifier"] = args ? args.orgIdentifier : undefined;
            resourceInputs["permanentInstallation"] = args ? args.permanentInstallation : undefined;
            resourceInputs["projectIdentifier"] = args ? args.projectIdentifier : undefined;
            resourceInputs["webhookUrl"] = args ? args.webhookUrl : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["identity"] = undefined /*out*/;
            resourceInputs["installationDetails"] = undefined /*out*/;
            resourceInputs["networkMapCount"] = undefined /*out*/;
            resourceInputs["removed"] = undefined /*out*/;
            resourceInputs["removedAt"] = undefined /*out*/;
            resourceInputs["serviceCount"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DiscoveryAgent.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DiscoveryAgent resources.
 */
export interface DiscoveryAgentState {
    /**
     * Configuration for the agent. This is a required field.
     */
    configs?: pulumi.Input<pulumi.Input<inputs.service.DiscoveryAgentConfig>[]>;
    /**
     * Correlation ID for the agent.
     */
    correlationId?: pulumi.Input<string>;
    /**
     * Timestamp when the agent was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * User who created the agent.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Description of the agent.
     */
    description?: pulumi.Input<string>;
    /**
     * The environment identifier of the agent. This is a required field.
     */
    environmentIdentifier?: pulumi.Input<string>;
    /**
     * The unique identity of the agent.
     */
    identity?: pulumi.Input<string>;
    /**
     * The infrastructure identifier of the agent. This is a required field.
     */
    infraIdentifier?: pulumi.Input<string>;
    /**
     * Installation details of the agent.
     */
    installationDetails?: pulumi.Input<pulumi.Input<inputs.service.DiscoveryAgentInstallationDetail>[]>;
    /**
     * Type of installation for the agent.
     */
    installationType?: pulumi.Input<string>;
    /**
     * The name of the agent. This is a required field.
     */
    name?: pulumi.Input<string>;
    /**
     * Number of network maps associated with this agent.
     */
    networkMapCount?: pulumi.Input<number>;
    /**
     * The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     */
    orgIdentifier?: pulumi.Input<string>;
    /**
     * Whether this is a permanent installation.
     */
    permanentInstallation?: pulumi.Input<boolean>;
    /**
     * The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     */
    projectIdentifier?: pulumi.Input<string>;
    /**
     * Whether the agent has been removed.
     */
    removed?: pulumi.Input<boolean>;
    /**
     * Timestamp when the agent was removed.
     */
    removedAt?: pulumi.Input<string>;
    /**
     * Number of services managed by this agent.
     */
    serviceCount?: pulumi.Input<number>;
    /**
     * List of resource tags for the agent.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Timestamp when the agent was last updated.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * User who last updated the agent.
     */
    updatedBy?: pulumi.Input<string>;
    /**
     * Webhook URL for the agent.
     */
    webhookUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DiscoveryAgent resource.
 */
export interface DiscoveryAgentArgs {
    /**
     * Configuration for the agent. This is a required field.
     */
    configs: pulumi.Input<pulumi.Input<inputs.service.DiscoveryAgentConfig>[]>;
    /**
     * Correlation ID for the agent.
     */
    correlationId?: pulumi.Input<string>;
    /**
     * The environment identifier of the agent. This is a required field.
     */
    environmentIdentifier: pulumi.Input<string>;
    /**
     * The infrastructure identifier of the agent. This is a required field.
     */
    infraIdentifier: pulumi.Input<string>;
    /**
     * Type of installation for the agent.
     */
    installationType?: pulumi.Input<string>;
    /**
     * The name of the agent. This is a required field.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     */
    orgIdentifier?: pulumi.Input<string>;
    /**
     * Whether this is a permanent installation.
     */
    permanentInstallation?: pulumi.Input<boolean>;
    /**
     * The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     */
    projectIdentifier?: pulumi.Input<string>;
    /**
     * Webhook URL for the agent.
     */
    webhookUrl?: pulumi.Input<string>;
}
