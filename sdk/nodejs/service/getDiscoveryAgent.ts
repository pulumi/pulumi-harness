// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Data source for retrieving a Harness Service Discovery Agent.
 *
 * This data source allows you to fetch details of a Service Discovery Agent using either its unique identifier or name.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * // Data source to fetch a specific agent by name
 * const byName = harness.service.getDiscoveryAgent({
 *     name: "example-agent",
 *     orgIdentifier: orgIdentifier,
 *     projectIdentifier: projectIdentifier,
 *     environmentIdentifier: environmentIdentifier,
 * });
 * export const agentDetailsByName = byName;
 * // Data source to fetch a specific agent by identity
 * const byIdentity = harness.service.getDiscoveryAgent({
 *     identity: "example-infra",
 *     orgIdentifier: orgIdentifier,
 *     projectIdentifier: projectIdentifier,
 *     environmentIdentifier: environmentIdentifier,
 * });
 * export const agentDetailsByIdentity = byIdentity;
 * ```
 */
export function getDiscoveryAgent(args: GetDiscoveryAgentArgs, opts?: pulumi.InvokeOptions): Promise<GetDiscoveryAgentResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:service/getDiscoveryAgent:getDiscoveryAgent", {
        "environmentIdentifier": args.environmentIdentifier,
        "identity": args.identity,
        "name": args.name,
        "orgIdentifier": args.orgIdentifier,
        "projectIdentifier": args.projectIdentifier,
    }, opts);
}

/**
 * A collection of arguments for invoking getDiscoveryAgent.
 */
export interface GetDiscoveryAgentArgs {
    /**
     * The environment identifier of the agent. This is a required field.
     */
    environmentIdentifier: string;
    /**
     * The unique identity of the agent. Either this or 'name' must be provided.
     */
    identity?: string;
    /**
     * The name of the agent. Either this or 'identity' must be provided.
     */
    name?: string;
    /**
     * The organization identifier of the agent (optional). Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     */
    orgIdentifier?: string;
    /**
     * The project identifier of the agent (optional). Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     */
    projectIdentifier?: string;
}

/**
 * A collection of values returned by getDiscoveryAgent.
 */
export interface GetDiscoveryAgentResult {
    /**
     * Configuration for the agent.
     */
    readonly configs: outputs.service.GetDiscoveryAgentConfig[];
    /**
     * Correlation ID for the agent.
     */
    readonly correlationId: string;
    /**
     * Timestamp when the agent was created.
     */
    readonly createdAt: string;
    /**
     * User who created the agent.
     */
    readonly createdBy: string;
    /**
     * Description of the agent.
     */
    readonly description: string;
    /**
     * The environment identifier of the agent. This is a required field.
     */
    readonly environmentIdentifier: string;
    /**
     * The unique identifier of the agent.
     */
    readonly id: string;
    /**
     * The unique identity of the agent. Either this or 'name' must be provided.
     */
    readonly identity?: string;
    /**
     * Installation details of the agent.
     */
    readonly installationDetails: outputs.service.GetDiscoveryAgentInstallationDetail[];
    /**
     * Type of installation for the agent.
     */
    readonly installationType: string;
    /**
     * The name of the agent. Either this or 'identity' must be provided.
     */
    readonly name?: string;
    /**
     * Number of network maps associated with this agent.
     */
    readonly networkMapCount: number;
    /**
     * The organization identifier of the agent (optional). Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     */
    readonly orgIdentifier?: string;
    /**
     * Whether this is a permanent installation.
     */
    readonly permanentInstallation: boolean;
    /**
     * The project identifier of the agent (optional). Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     */
    readonly projectIdentifier?: string;
    /**
     * Whether the agent has been removed.
     */
    readonly removed: boolean;
    /**
     * Timestamp when the agent was removed.
     */
    readonly removedAt: string;
    /**
     * Number of services managed by this agent.
     */
    readonly serviceCount: number;
    /**
     * Key-value list of resource tags for the agent.
     */
    readonly tags: string[];
    /**
     * Timestamp when the agent was last updated.
     */
    readonly updatedAt: string;
    /**
     * User who last updated the agent.
     */
    readonly updatedBy: string;
    /**
     * Webhook URL for the agent.
     */
    readonly webhookUrl: string;
}
/**
 * Data source for retrieving a Harness Service Discovery Agent.
 *
 * This data source allows you to fetch details of a Service Discovery Agent using either its unique identifier or name.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * // Data source to fetch a specific agent by name
 * const byName = harness.service.getDiscoveryAgent({
 *     name: "example-agent",
 *     orgIdentifier: orgIdentifier,
 *     projectIdentifier: projectIdentifier,
 *     environmentIdentifier: environmentIdentifier,
 * });
 * export const agentDetailsByName = byName;
 * // Data source to fetch a specific agent by identity
 * const byIdentity = harness.service.getDiscoveryAgent({
 *     identity: "example-infra",
 *     orgIdentifier: orgIdentifier,
 *     projectIdentifier: projectIdentifier,
 *     environmentIdentifier: environmentIdentifier,
 * });
 * export const agentDetailsByIdentity = byIdentity;
 * ```
 */
export function getDiscoveryAgentOutput(args: GetDiscoveryAgentOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDiscoveryAgentResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:service/getDiscoveryAgent:getDiscoveryAgent", {
        "environmentIdentifier": args.environmentIdentifier,
        "identity": args.identity,
        "name": args.name,
        "orgIdentifier": args.orgIdentifier,
        "projectIdentifier": args.projectIdentifier,
    }, opts);
}

/**
 * A collection of arguments for invoking getDiscoveryAgent.
 */
export interface GetDiscoveryAgentOutputArgs {
    /**
     * The environment identifier of the agent. This is a required field.
     */
    environmentIdentifier: pulumi.Input<string>;
    /**
     * The unique identity of the agent. Either this or 'name' must be provided.
     */
    identity?: pulumi.Input<string>;
    /**
     * The name of the agent. Either this or 'identity' must be provided.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization identifier of the agent (optional). Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     */
    orgIdentifier?: pulumi.Input<string>;
    /**
     * The project identifier of the agent (optional). Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     */
    projectIdentifier?: pulumi.Input<string>;
}
