// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating a Tanzu (PCF) service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `createBeforeDestroy = true` lifecycle setting.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = new harness.Application("example", {name: "example"});
 * const exampleTanzu = new harness.service.Tanzu("example", {
 *     appId: example.id,
 *     name: "tanzu-svc",
 *     description: "A service for deploying Tanzu applications.",
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import using the Harness application id and service id
 *
 * ```sh
 * $ pulumi import harness:service/tanzu:Tanzu example <app_id>/<svc_id>
 * ```
 */
export class Tanzu extends pulumi.CustomResource {
    /**
     * Get an existing Tanzu resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TanzuState, opts?: pulumi.CustomResourceOptions): Tanzu {
        return new Tanzu(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:service/tanzu:Tanzu';

    /**
     * Returns true if the given object is an instance of Tanzu.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Tanzu {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Tanzu.__pulumiType;
    }

    /**
     * The id of the application the service belongs to
     */
    declare public readonly appId: pulumi.Output<string>;
    /**
     * Description of th service
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Name of the service
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Variables to be used in the service
     */
    declare public readonly variables: pulumi.Output<outputs.service.TanzuVariable[] | undefined>;

    /**
     * Create a Tanzu resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TanzuArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TanzuArgs | TanzuState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TanzuState | undefined;
            resourceInputs["appId"] = state?.appId;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["variables"] = state?.variables;
        } else {
            const args = argsOrState as TanzuArgs | undefined;
            if (args?.appId === undefined && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            resourceInputs["appId"] = args?.appId;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["variables"] = args?.variables;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Tanzu.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Tanzu resources.
 */
export interface TanzuState {
    /**
     * The id of the application the service belongs to
     */
    appId?: pulumi.Input<string>;
    /**
     * Description of th service
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the service
     */
    name?: pulumi.Input<string>;
    /**
     * Variables to be used in the service
     */
    variables?: pulumi.Input<pulumi.Input<inputs.service.TanzuVariable>[]>;
}

/**
 * The set of arguments for constructing a Tanzu resource.
 */
export interface TanzuArgs {
    /**
     * The id of the application the service belongs to
     */
    appId: pulumi.Input<string>;
    /**
     * Description of th service
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the service
     */
    name?: pulumi.Input<string>;
    /**
     * Variables to be used in the service
     */
    variables?: pulumi.Input<pulumi.Input<inputs.service.TanzuVariable>[]>;
}
