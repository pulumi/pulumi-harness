// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for creating an Azure cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `createBeforeDestroy = true` lifecycle setting.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const _default = harness.getSecretManager({
 *     "default": true,
 * });
 * const azureKey = new harness.EncryptedText("azure_key", {
 *     name: "azure_key",
 *     value: "<AZURE_KEY>",
 *     secretManagerId: _default.then(_default => _default.id),
 * });
 * const azure = new harness.cloudprovider.Azure("azure", {
 *     name: "azure",
 *     clientId: "<AZURE_CLIENT_ID>",
 *     tenantId: "<AZURE_TENANT_ID>",
 *     key: azureKey.name,
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import using the Harness azure cloud provider id.
 *
 * ```sh
 * $ pulumi import harness:cloudprovider/azure:Azure example <provider_id>
 * ```
 */
export class Azure extends pulumi.CustomResource {
    /**
     * Get an existing Azure resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureState, opts?: pulumi.CustomResourceOptions): Azure {
        return new Azure(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:cloudprovider/azure:Azure';

    /**
     * Returns true if the given object is an instance of Azure.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Azure {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Azure.__pulumiType;
    }

    /**
     * The client id for the Azure application
     */
    public readonly clientId!: pulumi.Output<string>;
    /**
     * The type of environment. Valid options are [AZURE AZURE*US*GOVERNMENT]
     */
    public readonly environmentType!: pulumi.Output<string | undefined>;
    /**
     * The Name of the Harness secret containing the key for the Azure application
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * The name of the cloud provider.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The tenant id for the Azure application
     */
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a Azure resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureArgs | AzureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureState | undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["environmentType"] = state ? state.environmentType : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as AzureArgs | undefined;
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["environmentType"] = args ? args.environmentType : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Azure.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Azure resources.
 */
export interface AzureState {
    /**
     * The client id for the Azure application
     */
    clientId?: pulumi.Input<string>;
    /**
     * The type of environment. Valid options are [AZURE AZURE*US*GOVERNMENT]
     */
    environmentType?: pulumi.Input<string>;
    /**
     * The Name of the Harness secret containing the key for the Azure application
     */
    key?: pulumi.Input<string>;
    /**
     * The name of the cloud provider.
     */
    name?: pulumi.Input<string>;
    /**
     * The tenant id for the Azure application
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Azure resource.
 */
export interface AzureArgs {
    /**
     * The client id for the Azure application
     */
    clientId: pulumi.Input<string>;
    /**
     * The type of environment. Valid options are [AZURE AZURE*US*GOVERNMENT]
     */
    environmentType?: pulumi.Input<string>;
    /**
     * The Name of the Harness secret containing the key for the Azure application
     */
    key: pulumi.Input<string>;
    /**
     * The name of the cloud provider.
     */
    name?: pulumi.Input<string>;
    /**
     * The tenant id for the Azure application
     */
    tenantId: pulumi.Input<string>;
}
