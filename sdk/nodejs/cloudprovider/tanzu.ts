// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for creating a Tanzu cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `createBeforeDestroy = true` lifecycle setting.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const _default = harness.getSecretManager({
 *     "default": true,
 * });
 * const tanzuPassword = new harness.EncryptedText("tanzu_password", {
 *     name: "tanzu_password",
 *     value: "<PASSWORD>",
 *     secretManagerId: _default.then(_default => _default.id),
 * });
 * const example = new harness.cloudprovider.Tanzu("example", {
 *     name: "example",
 *     endpoint: "https://endpoint.com",
 *     skipValidation: true,
 *     username: "<USERNAME>",
 *     passwordSecretName: tanzuPassword.name,
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import using the Harness Tanzu cloud provider id.
 *
 * ```sh
 * $ pulumi import harness:cloudprovider/tanzu:Tanzu example <provider_id>
 * ```
 */
export class Tanzu extends pulumi.CustomResource {
    /**
     * Get an existing Tanzu resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TanzuState, opts?: pulumi.CustomResourceOptions): Tanzu {
        return new Tanzu(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:cloudprovider/tanzu:Tanzu';

    /**
     * Returns true if the given object is an instance of Tanzu.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Tanzu {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Tanzu.__pulumiType;
    }

    /**
     * The url of the Tanzu platform.
     */
    declare public readonly endpoint: pulumi.Output<string>;
    /**
     * The name of the cloud provider.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The name of the Harness secret containing the password to use to authenticate to Tanzu.
     */
    declare public readonly passwordSecretName: pulumi.Output<string>;
    /**
     * Skip validation of Tanzu configuration.
     */
    declare public readonly skipValidation: pulumi.Output<boolean | undefined>;
    /**
     * The username to use to authenticate to Tanzu.
     */
    declare public readonly username: pulumi.Output<string | undefined>;
    /**
     * The name of the Harness secret containing the username to authenticate to Tanzu with.
     */
    declare public readonly usernameSecretName: pulumi.Output<string | undefined>;

    /**
     * Create a Tanzu resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TanzuArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TanzuArgs | TanzuState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TanzuState | undefined;
            resourceInputs["endpoint"] = state?.endpoint;
            resourceInputs["name"] = state?.name;
            resourceInputs["passwordSecretName"] = state?.passwordSecretName;
            resourceInputs["skipValidation"] = state?.skipValidation;
            resourceInputs["username"] = state?.username;
            resourceInputs["usernameSecretName"] = state?.usernameSecretName;
        } else {
            const args = argsOrState as TanzuArgs | undefined;
            if (args?.endpoint === undefined && !opts.urn) {
                throw new Error("Missing required property 'endpoint'");
            }
            if (args?.passwordSecretName === undefined && !opts.urn) {
                throw new Error("Missing required property 'passwordSecretName'");
            }
            resourceInputs["endpoint"] = args?.endpoint;
            resourceInputs["name"] = args?.name;
            resourceInputs["passwordSecretName"] = args?.passwordSecretName;
            resourceInputs["skipValidation"] = args?.skipValidation;
            resourceInputs["username"] = args?.username;
            resourceInputs["usernameSecretName"] = args?.usernameSecretName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Tanzu.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Tanzu resources.
 */
export interface TanzuState {
    /**
     * The url of the Tanzu platform.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * The name of the cloud provider.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Harness secret containing the password to use to authenticate to Tanzu.
     */
    passwordSecretName?: pulumi.Input<string>;
    /**
     * Skip validation of Tanzu configuration.
     */
    skipValidation?: pulumi.Input<boolean>;
    /**
     * The username to use to authenticate to Tanzu.
     */
    username?: pulumi.Input<string>;
    /**
     * The name of the Harness secret containing the username to authenticate to Tanzu with.
     */
    usernameSecretName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Tanzu resource.
 */
export interface TanzuArgs {
    /**
     * The url of the Tanzu platform.
     */
    endpoint: pulumi.Input<string>;
    /**
     * The name of the cloud provider.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Harness secret containing the password to use to authenticate to Tanzu.
     */
    passwordSecretName: pulumi.Input<string>;
    /**
     * Skip validation of Tanzu configuration.
     */
    skipValidation?: pulumi.Input<boolean>;
    /**
     * The username to use to authenticate to Tanzu.
     */
    username?: pulumi.Input<string>;
    /**
     * The name of the Harness secret containing the username to authenticate to Tanzu with.
     */
    usernameSecretName?: pulumi.Input<string>;
}
