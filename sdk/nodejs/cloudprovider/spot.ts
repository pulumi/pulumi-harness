// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for creating a Spot cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `createBeforeDestroy = true` lifecycle setting.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const _default = harness.getSecretManager({
 *     "default": true,
 * });
 * const spotToken = new harness.EncryptedText("spot_token", {
 *     name: "spot_token",
 *     secretManagerId: _default.then(_default => _default.id),
 *     value: "<SPOT_TOKEN>",
 * });
 * const example = new harness.cloudprovider.Spot("example", {
 *     name: "example",
 *     accountId: "<SPOT_ACCOUNT_ID>",
 *     tokenSecretName: spotToken.name,
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import using the Harness Spot cloud provider id.
 *
 * ```sh
 * $ pulumi import harness:cloudprovider/spot:Spot example <provider_id>
 * ```
 */
export class Spot extends pulumi.CustomResource {
    /**
     * Get an existing Spot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpotState, opts?: pulumi.CustomResourceOptions): Spot {
        return new Spot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:cloudprovider/spot:Spot';

    /**
     * Returns true if the given object is an instance of Spot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Spot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Spot.__pulumiType;
    }

    /**
     * The Spot account ID
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * The name of the cloud provider.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The name of the Harness secret containing the spot account token
     */
    declare public readonly tokenSecretName: pulumi.Output<string>;

    /**
     * Create a Spot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpotArgs | SpotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpotState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["name"] = state?.name;
            resourceInputs["tokenSecretName"] = state?.tokenSecretName;
        } else {
            const args = argsOrState as SpotArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.tokenSecretName === undefined && !opts.urn) {
                throw new Error("Missing required property 'tokenSecretName'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["name"] = args?.name;
            resourceInputs["tokenSecretName"] = args?.tokenSecretName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Spot.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Spot resources.
 */
export interface SpotState {
    /**
     * The Spot account ID
     */
    accountId?: pulumi.Input<string>;
    /**
     * The name of the cloud provider.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Harness secret containing the spot account token
     */
    tokenSecretName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Spot resource.
 */
export interface SpotArgs {
    /**
     * The Spot account ID
     */
    accountId: pulumi.Input<string>;
    /**
     * The name of the cloud provider.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Harness secret containing the spot account token
     */
    tokenSecretName: pulumi.Input<string>;
}
