// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for managing Harness Chaos Infrastructure V2.
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import Project level Chaos Infrastructure v2
 *
 * ```sh
 * $ pulumi import harness:chaos/infrastructureV2:InfrastructureV2 example <org_id>/<project_id>/<environment_id>/<infra_id>
 * ```
 */
export class InfrastructureV2 extends pulumi.CustomResource {
    /**
     * Get an existing InfrastructureV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InfrastructureV2State, opts?: pulumi.CustomResourceOptions): InfrastructureV2 {
        return new InfrastructureV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:chaos/infrastructureV2:InfrastructureV2';

    /**
     * Returns true if the given object is an instance of InfrastructureV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InfrastructureV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InfrastructureV2.__pulumiType;
    }

    /**
     * Enable AI features for the infrastructure.
     */
    public readonly aiEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Annotations to apply to the infrastructure pods.
     */
    public readonly annotation!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Container configurations.
     */
    public readonly containers!: pulumi.Output<string | undefined>;
    /**
     * Correlation ID for the request.
     */
    public readonly correlationId!: pulumi.Output<string>;
    /**
     * Creation timestamp.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Description of the infrastructure.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * ID of the discovery agent to use.
     */
    public readonly discoveryAgentId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the environment.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * List of environment variables to set in the container.
     */
    public readonly envs!: pulumi.Output<outputs.chaos.InfrastructureV2Env[] | undefined>;
    /**
     * Identifier for the infrastructure.
     */
    public /*out*/ readonly identifiers!: pulumi.Output<outputs.chaos.InfrastructureV2Identifier[]>;
    /**
     * Identity for the infrastructure.
     */
    public /*out*/ readonly identity!: pulumi.Output<string>;
    /**
     * Configuration for the container image registry.
     */
    public readonly imageRegistries!: pulumi.Output<outputs.chaos.InfrastructureV2ImageRegistry[]>;
    /**
     * ID of the infrastructure.
     */
    public readonly infraId!: pulumi.Output<string>;
    /**
     * Namespace where the infrastructure is installed.
     */
    public /*out*/ readonly infraNamespace!: pulumi.Output<string>;
    /**
     * Scope of the infrastructure. Valid values: NAMESPACE, CLUSTER
     */
    public readonly infraScope!: pulumi.Output<string>;
    /**
     * Type of the infrastructure. Valid values: KUBERNETES, KUBERNETESV2
     */
    public readonly infraType!: pulumi.Output<string | undefined>;
    /**
     * Skip TLS verification for the infrastructure.
     */
    public readonly insecureSkipVerify!: pulumi.Output<boolean | undefined>;
    /**
     * Installation command for the infrastructure.
     */
    public /*out*/ readonly installCommand!: pulumi.Output<string>;
    /**
     * Kubernetes connector identifier.
     */
    public /*out*/ readonly k8sConnectorId!: pulumi.Output<string>;
    /**
     * Labels to apply to the infrastructure pods.
     */
    public readonly label!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * mTLS configuration for the infrastructure.
     */
    public readonly mtls!: pulumi.Output<outputs.chaos.InfrastructureV2Mtls | undefined>;
    /**
     * Name of the infrastructure.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Kubernetes namespace where the infrastructure will be installed. Maps to the infrastructure namespace.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Node selector for the infrastructure pods.
     */
    public readonly nodeSelector!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The ID of the organization.
     */
    public readonly orgId!: pulumi.Output<string>;
    /**
     * The ID of the project.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Proxy configuration for the infrastructure.
     */
    public readonly proxy!: pulumi.Output<outputs.chaos.InfrastructureV2Proxy | undefined>;
    /**
     * Group ID to run the infrastructure as.
     */
    public readonly runAsGroup!: pulumi.Output<number | undefined>;
    /**
     * User ID to run the infrastructure as.
     */
    public readonly runAsUser!: pulumi.Output<number | undefined>;
    /**
     * Service account used by the infrastructure.
     */
    public readonly serviceAccount!: pulumi.Output<string | undefined>;
    /**
     * Status of the infrastructure.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Tags for the infrastructure.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * If specified, the pod's tolerations.
     */
    public readonly tolerations!: pulumi.Output<outputs.chaos.InfrastructureV2Toleration[] | undefined>;
    /**
     * Last update timestamp.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * Volume mounts for the container.
     */
    public readonly volumeMounts!: pulumi.Output<outputs.chaos.InfrastructureV2VolumeMount[] | undefined>;
    /**
     * Volumes to be created in the infrastructure.
     */
    public readonly volumes!: pulumi.Output<outputs.chaos.InfrastructureV2Volume[] | undefined>;

    /**
     * Create a InfrastructureV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InfrastructureV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InfrastructureV2Args | InfrastructureV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InfrastructureV2State | undefined;
            resourceInputs["aiEnabled"] = state ? state.aiEnabled : undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["containers"] = state ? state.containers : undefined;
            resourceInputs["correlationId"] = state ? state.correlationId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["discoveryAgentId"] = state ? state.discoveryAgentId : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["envs"] = state ? state.envs : undefined;
            resourceInputs["identifiers"] = state ? state.identifiers : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["imageRegistries"] = state ? state.imageRegistries : undefined;
            resourceInputs["infraId"] = state ? state.infraId : undefined;
            resourceInputs["infraNamespace"] = state ? state.infraNamespace : undefined;
            resourceInputs["infraScope"] = state ? state.infraScope : undefined;
            resourceInputs["infraType"] = state ? state.infraType : undefined;
            resourceInputs["insecureSkipVerify"] = state ? state.insecureSkipVerify : undefined;
            resourceInputs["installCommand"] = state ? state.installCommand : undefined;
            resourceInputs["k8sConnectorId"] = state ? state.k8sConnectorId : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["mtls"] = state ? state.mtls : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["nodeSelector"] = state ? state.nodeSelector : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["proxy"] = state ? state.proxy : undefined;
            resourceInputs["runAsGroup"] = state ? state.runAsGroup : undefined;
            resourceInputs["runAsUser"] = state ? state.runAsUser : undefined;
            resourceInputs["serviceAccount"] = state ? state.serviceAccount : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tolerations"] = state ? state.tolerations : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["volumeMounts"] = state ? state.volumeMounts : undefined;
            resourceInputs["volumes"] = state ? state.volumes : undefined;
        } else {
            const args = argsOrState as InfrastructureV2Args | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.infraId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'infraId'");
            }
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["aiEnabled"] = args ? args.aiEnabled : undefined;
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["containers"] = args ? args.containers : undefined;
            resourceInputs["correlationId"] = args ? args.correlationId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["discoveryAgentId"] = args ? args.discoveryAgentId : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["envs"] = args ? args.envs : undefined;
            resourceInputs["imageRegistries"] = args ? args.imageRegistries : undefined;
            resourceInputs["infraId"] = args ? args.infraId : undefined;
            resourceInputs["infraScope"] = args ? args.infraScope : undefined;
            resourceInputs["infraType"] = args ? args.infraType : undefined;
            resourceInputs["insecureSkipVerify"] = args ? args.insecureSkipVerify : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["mtls"] = args ? args.mtls : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["nodeSelector"] = args ? args.nodeSelector : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["proxy"] = args ? args.proxy : undefined;
            resourceInputs["runAsGroup"] = args ? args.runAsGroup : undefined;
            resourceInputs["runAsUser"] = args ? args.runAsUser : undefined;
            resourceInputs["serviceAccount"] = args ? args.serviceAccount : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tolerations"] = args ? args.tolerations : undefined;
            resourceInputs["volumeMounts"] = args ? args.volumeMounts : undefined;
            resourceInputs["volumes"] = args ? args.volumes : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["identifiers"] = undefined /*out*/;
            resourceInputs["identity"] = undefined /*out*/;
            resourceInputs["infraNamespace"] = undefined /*out*/;
            resourceInputs["installCommand"] = undefined /*out*/;
            resourceInputs["k8sConnectorId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InfrastructureV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InfrastructureV2 resources.
 */
export interface InfrastructureV2State {
    /**
     * Enable AI features for the infrastructure.
     */
    aiEnabled?: pulumi.Input<boolean>;
    /**
     * Annotations to apply to the infrastructure pods.
     */
    annotation?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Container configurations.
     */
    containers?: pulumi.Input<string>;
    /**
     * Correlation ID for the request.
     */
    correlationId?: pulumi.Input<string>;
    /**
     * Creation timestamp.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Description of the infrastructure.
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the discovery agent to use.
     */
    discoveryAgentId?: pulumi.Input<string>;
    /**
     * The ID of the environment.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * List of environment variables to set in the container.
     */
    envs?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2Env>[]>;
    /**
     * Identifier for the infrastructure.
     */
    identifiers?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2Identifier>[]>;
    /**
     * Identity for the infrastructure.
     */
    identity?: pulumi.Input<string>;
    /**
     * Configuration for the container image registry.
     */
    imageRegistries?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2ImageRegistry>[]>;
    /**
     * ID of the infrastructure.
     */
    infraId?: pulumi.Input<string>;
    /**
     * Namespace where the infrastructure is installed.
     */
    infraNamespace?: pulumi.Input<string>;
    /**
     * Scope of the infrastructure. Valid values: NAMESPACE, CLUSTER
     */
    infraScope?: pulumi.Input<string>;
    /**
     * Type of the infrastructure. Valid values: KUBERNETES, KUBERNETESV2
     */
    infraType?: pulumi.Input<string>;
    /**
     * Skip TLS verification for the infrastructure.
     */
    insecureSkipVerify?: pulumi.Input<boolean>;
    /**
     * Installation command for the infrastructure.
     */
    installCommand?: pulumi.Input<string>;
    /**
     * Kubernetes connector identifier.
     */
    k8sConnectorId?: pulumi.Input<string>;
    /**
     * Labels to apply to the infrastructure pods.
     */
    label?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * mTLS configuration for the infrastructure.
     */
    mtls?: pulumi.Input<inputs.chaos.InfrastructureV2Mtls>;
    /**
     * Name of the infrastructure.
     */
    name?: pulumi.Input<string>;
    /**
     * Kubernetes namespace where the infrastructure will be installed. Maps to the infrastructure namespace.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Node selector for the infrastructure pods.
     */
    nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * The ID of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Proxy configuration for the infrastructure.
     */
    proxy?: pulumi.Input<inputs.chaos.InfrastructureV2Proxy>;
    /**
     * Group ID to run the infrastructure as.
     */
    runAsGroup?: pulumi.Input<number>;
    /**
     * User ID to run the infrastructure as.
     */
    runAsUser?: pulumi.Input<number>;
    /**
     * Service account used by the infrastructure.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * Status of the infrastructure.
     */
    status?: pulumi.Input<string>;
    /**
     * Tags for the infrastructure.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If specified, the pod's tolerations.
     */
    tolerations?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2Toleration>[]>;
    /**
     * Last update timestamp.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * Volume mounts for the container.
     */
    volumeMounts?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2VolumeMount>[]>;
    /**
     * Volumes to be created in the infrastructure.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2Volume>[]>;
}

/**
 * The set of arguments for constructing a InfrastructureV2 resource.
 */
export interface InfrastructureV2Args {
    /**
     * Enable AI features for the infrastructure.
     */
    aiEnabled?: pulumi.Input<boolean>;
    /**
     * Annotations to apply to the infrastructure pods.
     */
    annotation?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Container configurations.
     */
    containers?: pulumi.Input<string>;
    /**
     * Correlation ID for the request.
     */
    correlationId?: pulumi.Input<string>;
    /**
     * Description of the infrastructure.
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the discovery agent to use.
     */
    discoveryAgentId?: pulumi.Input<string>;
    /**
     * The ID of the environment.
     */
    environmentId: pulumi.Input<string>;
    /**
     * List of environment variables to set in the container.
     */
    envs?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2Env>[]>;
    /**
     * Configuration for the container image registry.
     */
    imageRegistries?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2ImageRegistry>[]>;
    /**
     * ID of the infrastructure.
     */
    infraId: pulumi.Input<string>;
    /**
     * Scope of the infrastructure. Valid values: NAMESPACE, CLUSTER
     */
    infraScope?: pulumi.Input<string>;
    /**
     * Type of the infrastructure. Valid values: KUBERNETES, KUBERNETESV2
     */
    infraType?: pulumi.Input<string>;
    /**
     * Skip TLS verification for the infrastructure.
     */
    insecureSkipVerify?: pulumi.Input<boolean>;
    /**
     * Labels to apply to the infrastructure pods.
     */
    label?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * mTLS configuration for the infrastructure.
     */
    mtls?: pulumi.Input<inputs.chaos.InfrastructureV2Mtls>;
    /**
     * Name of the infrastructure.
     */
    name?: pulumi.Input<string>;
    /**
     * Kubernetes namespace where the infrastructure will be installed. Maps to the infrastructure namespace.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Node selector for the infrastructure pods.
     */
    nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the organization.
     */
    orgId: pulumi.Input<string>;
    /**
     * The ID of the project.
     */
    projectId: pulumi.Input<string>;
    /**
     * Proxy configuration for the infrastructure.
     */
    proxy?: pulumi.Input<inputs.chaos.InfrastructureV2Proxy>;
    /**
     * Group ID to run the infrastructure as.
     */
    runAsGroup?: pulumi.Input<number>;
    /**
     * User ID to run the infrastructure as.
     */
    runAsUser?: pulumi.Input<number>;
    /**
     * Service account used by the infrastructure.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * Tags for the infrastructure.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If specified, the pod's tolerations.
     */
    tolerations?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2Toleration>[]>;
    /**
     * Volume mounts for the container.
     */
    volumeMounts?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2VolumeMount>[]>;
    /**
     * Volumes to be created in the infrastructure.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2Volume>[]>;
}
