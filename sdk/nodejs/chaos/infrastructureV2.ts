// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for managing Harness Chaos Infrastructure V2.
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import Project level Chaos Infrastructure v2
 *
 * ```sh
 * $ pulumi import harness:chaos/infrastructureV2:InfrastructureV2 example <org_id>/<project_id>/<environment_id>/<infra_id>
 * ```
 */
export class InfrastructureV2 extends pulumi.CustomResource {
    /**
     * Get an existing InfrastructureV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InfrastructureV2State, opts?: pulumi.CustomResourceOptions): InfrastructureV2 {
        return new InfrastructureV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:chaos/infrastructureV2:InfrastructureV2';

    /**
     * Returns true if the given object is an instance of InfrastructureV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InfrastructureV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InfrastructureV2.__pulumiType;
    }

    /**
     * Enable AI features for the infrastructure.
     */
    declare public readonly aiEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Annotations to apply to the infrastructure pods.
     */
    declare public readonly annotation: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Container configurations.
     */
    declare public readonly containers: pulumi.Output<string | undefined>;
    /**
     * Correlation ID for the request.
     */
    declare public readonly correlationId: pulumi.Output<string>;
    /**
     * Creation timestamp.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Description of the infrastructure.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * ID of the discovery agent to use.
     */
    declare public readonly discoveryAgentId: pulumi.Output<string | undefined>;
    /**
     * The ID of the environment.
     */
    declare public readonly environmentId: pulumi.Output<string>;
    /**
     * List of environment variables to set in the container.
     */
    declare public readonly envs: pulumi.Output<outputs.chaos.InfrastructureV2Env[] | undefined>;
    /**
     * Identifier for the infrastructure.
     */
    declare public /*out*/ readonly identifiers: pulumi.Output<outputs.chaos.InfrastructureV2Identifier[]>;
    /**
     * Identity for the infrastructure.
     */
    declare public /*out*/ readonly identity: pulumi.Output<string>;
    /**
     * Configuration for the container image registry.
     */
    declare public readonly imageRegistries: pulumi.Output<outputs.chaos.InfrastructureV2ImageRegistry[]>;
    /**
     * ID of the infrastructure.
     */
    declare public readonly infraId: pulumi.Output<string>;
    /**
     * Namespace where the infrastructure is installed.
     */
    declare public /*out*/ readonly infraNamespace: pulumi.Output<string>;
    /**
     * Scope of the infrastructure. Valid values: NAMESPACE, CLUSTER
     */
    declare public readonly infraScope: pulumi.Output<string>;
    /**
     * Type of the infrastructure. Valid values: KUBERNETES, KUBERNETESV2
     */
    declare public readonly infraType: pulumi.Output<string | undefined>;
    /**
     * Skip TLS verification for the infrastructure.
     */
    declare public readonly insecureSkipVerify: pulumi.Output<boolean | undefined>;
    /**
     * Installation command for the infrastructure.
     */
    declare public /*out*/ readonly installCommand: pulumi.Output<string>;
    /**
     * Kubernetes connector identifier.
     */
    declare public /*out*/ readonly k8sConnectorId: pulumi.Output<string>;
    /**
     * Labels to apply to the infrastructure pods.
     */
    declare public readonly label: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * mTLS configuration for the infrastructure.
     */
    declare public readonly mtls: pulumi.Output<outputs.chaos.InfrastructureV2Mtls | undefined>;
    /**
     * Name of the infrastructure.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Kubernetes namespace where the infrastructure will be installed. Maps to the infrastructure namespace.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * Node selector for the infrastructure pods.
     */
    declare public readonly nodeSelector: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The ID of the organization.
     */
    declare public readonly orgId: pulumi.Output<string>;
    /**
     * The ID of the project.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * Proxy configuration for the infrastructure.
     */
    declare public readonly proxy: pulumi.Output<outputs.chaos.InfrastructureV2Proxy | undefined>;
    /**
     * Group ID to run the infrastructure as.
     */
    declare public readonly runAsGroup: pulumi.Output<number | undefined>;
    /**
     * User ID to run the infrastructure as.
     */
    declare public readonly runAsUser: pulumi.Output<number | undefined>;
    /**
     * Service account used by the infrastructure.
     */
    declare public readonly serviceAccount: pulumi.Output<string | undefined>;
    /**
     * Status of the infrastructure.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Tags for the infrastructure.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * If specified, the pod's tolerations.
     */
    declare public readonly tolerations: pulumi.Output<outputs.chaos.InfrastructureV2Toleration[] | undefined>;
    /**
     * Last update timestamp.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * Volume mounts for the container.
     */
    declare public readonly volumeMounts: pulumi.Output<outputs.chaos.InfrastructureV2VolumeMount[] | undefined>;
    /**
     * Volumes to be created in the infrastructure.
     */
    declare public readonly volumes: pulumi.Output<outputs.chaos.InfrastructureV2Volume[] | undefined>;

    /**
     * Create a InfrastructureV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InfrastructureV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InfrastructureV2Args | InfrastructureV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InfrastructureV2State | undefined;
            resourceInputs["aiEnabled"] = state?.aiEnabled;
            resourceInputs["annotation"] = state?.annotation;
            resourceInputs["containers"] = state?.containers;
            resourceInputs["correlationId"] = state?.correlationId;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["discoveryAgentId"] = state?.discoveryAgentId;
            resourceInputs["environmentId"] = state?.environmentId;
            resourceInputs["envs"] = state?.envs;
            resourceInputs["identifiers"] = state?.identifiers;
            resourceInputs["identity"] = state?.identity;
            resourceInputs["imageRegistries"] = state?.imageRegistries;
            resourceInputs["infraId"] = state?.infraId;
            resourceInputs["infraNamespace"] = state?.infraNamespace;
            resourceInputs["infraScope"] = state?.infraScope;
            resourceInputs["infraType"] = state?.infraType;
            resourceInputs["insecureSkipVerify"] = state?.insecureSkipVerify;
            resourceInputs["installCommand"] = state?.installCommand;
            resourceInputs["k8sConnectorId"] = state?.k8sConnectorId;
            resourceInputs["label"] = state?.label;
            resourceInputs["mtls"] = state?.mtls;
            resourceInputs["name"] = state?.name;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["nodeSelector"] = state?.nodeSelector;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["proxy"] = state?.proxy;
            resourceInputs["runAsGroup"] = state?.runAsGroup;
            resourceInputs["runAsUser"] = state?.runAsUser;
            resourceInputs["serviceAccount"] = state?.serviceAccount;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tolerations"] = state?.tolerations;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["volumeMounts"] = state?.volumeMounts;
            resourceInputs["volumes"] = state?.volumes;
        } else {
            const args = argsOrState as InfrastructureV2Args | undefined;
            if (args?.environmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if (args?.infraId === undefined && !opts.urn) {
                throw new Error("Missing required property 'infraId'");
            }
            if (args?.orgId === undefined && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["aiEnabled"] = args?.aiEnabled;
            resourceInputs["annotation"] = args?.annotation;
            resourceInputs["containers"] = args?.containers;
            resourceInputs["correlationId"] = args?.correlationId;
            resourceInputs["description"] = args?.description;
            resourceInputs["discoveryAgentId"] = args?.discoveryAgentId;
            resourceInputs["environmentId"] = args?.environmentId;
            resourceInputs["envs"] = args?.envs;
            resourceInputs["imageRegistries"] = args?.imageRegistries;
            resourceInputs["infraId"] = args?.infraId;
            resourceInputs["infraScope"] = args?.infraScope;
            resourceInputs["infraType"] = args?.infraType;
            resourceInputs["insecureSkipVerify"] = args?.insecureSkipVerify;
            resourceInputs["label"] = args?.label;
            resourceInputs["mtls"] = args?.mtls;
            resourceInputs["name"] = args?.name;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["nodeSelector"] = args?.nodeSelector;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["proxy"] = args?.proxy;
            resourceInputs["runAsGroup"] = args?.runAsGroup;
            resourceInputs["runAsUser"] = args?.runAsUser;
            resourceInputs["serviceAccount"] = args?.serviceAccount;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["tolerations"] = args?.tolerations;
            resourceInputs["volumeMounts"] = args?.volumeMounts;
            resourceInputs["volumes"] = args?.volumes;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["identifiers"] = undefined /*out*/;
            resourceInputs["identity"] = undefined /*out*/;
            resourceInputs["infraNamespace"] = undefined /*out*/;
            resourceInputs["installCommand"] = undefined /*out*/;
            resourceInputs["k8sConnectorId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InfrastructureV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InfrastructureV2 resources.
 */
export interface InfrastructureV2State {
    /**
     * Enable AI features for the infrastructure.
     */
    aiEnabled?: pulumi.Input<boolean>;
    /**
     * Annotations to apply to the infrastructure pods.
     */
    annotation?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Container configurations.
     */
    containers?: pulumi.Input<string>;
    /**
     * Correlation ID for the request.
     */
    correlationId?: pulumi.Input<string>;
    /**
     * Creation timestamp.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Description of the infrastructure.
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the discovery agent to use.
     */
    discoveryAgentId?: pulumi.Input<string>;
    /**
     * The ID of the environment.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * List of environment variables to set in the container.
     */
    envs?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2Env>[]>;
    /**
     * Identifier for the infrastructure.
     */
    identifiers?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2Identifier>[]>;
    /**
     * Identity for the infrastructure.
     */
    identity?: pulumi.Input<string>;
    /**
     * Configuration for the container image registry.
     */
    imageRegistries?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2ImageRegistry>[]>;
    /**
     * ID of the infrastructure.
     */
    infraId?: pulumi.Input<string>;
    /**
     * Namespace where the infrastructure is installed.
     */
    infraNamespace?: pulumi.Input<string>;
    /**
     * Scope of the infrastructure. Valid values: NAMESPACE, CLUSTER
     */
    infraScope?: pulumi.Input<string>;
    /**
     * Type of the infrastructure. Valid values: KUBERNETES, KUBERNETESV2
     */
    infraType?: pulumi.Input<string>;
    /**
     * Skip TLS verification for the infrastructure.
     */
    insecureSkipVerify?: pulumi.Input<boolean>;
    /**
     * Installation command for the infrastructure.
     */
    installCommand?: pulumi.Input<string>;
    /**
     * Kubernetes connector identifier.
     */
    k8sConnectorId?: pulumi.Input<string>;
    /**
     * Labels to apply to the infrastructure pods.
     */
    label?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * mTLS configuration for the infrastructure.
     */
    mtls?: pulumi.Input<inputs.chaos.InfrastructureV2Mtls>;
    /**
     * Name of the infrastructure.
     */
    name?: pulumi.Input<string>;
    /**
     * Kubernetes namespace where the infrastructure will be installed. Maps to the infrastructure namespace.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Node selector for the infrastructure pods.
     */
    nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * The ID of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Proxy configuration for the infrastructure.
     */
    proxy?: pulumi.Input<inputs.chaos.InfrastructureV2Proxy>;
    /**
     * Group ID to run the infrastructure as.
     */
    runAsGroup?: pulumi.Input<number>;
    /**
     * User ID to run the infrastructure as.
     */
    runAsUser?: pulumi.Input<number>;
    /**
     * Service account used by the infrastructure.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * Status of the infrastructure.
     */
    status?: pulumi.Input<string>;
    /**
     * Tags for the infrastructure.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If specified, the pod's tolerations.
     */
    tolerations?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2Toleration>[]>;
    /**
     * Last update timestamp.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * Volume mounts for the container.
     */
    volumeMounts?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2VolumeMount>[]>;
    /**
     * Volumes to be created in the infrastructure.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2Volume>[]>;
}

/**
 * The set of arguments for constructing a InfrastructureV2 resource.
 */
export interface InfrastructureV2Args {
    /**
     * Enable AI features for the infrastructure.
     */
    aiEnabled?: pulumi.Input<boolean>;
    /**
     * Annotations to apply to the infrastructure pods.
     */
    annotation?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Container configurations.
     */
    containers?: pulumi.Input<string>;
    /**
     * Correlation ID for the request.
     */
    correlationId?: pulumi.Input<string>;
    /**
     * Description of the infrastructure.
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the discovery agent to use.
     */
    discoveryAgentId?: pulumi.Input<string>;
    /**
     * The ID of the environment.
     */
    environmentId: pulumi.Input<string>;
    /**
     * List of environment variables to set in the container.
     */
    envs?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2Env>[]>;
    /**
     * Configuration for the container image registry.
     */
    imageRegistries?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2ImageRegistry>[]>;
    /**
     * ID of the infrastructure.
     */
    infraId: pulumi.Input<string>;
    /**
     * Scope of the infrastructure. Valid values: NAMESPACE, CLUSTER
     */
    infraScope?: pulumi.Input<string>;
    /**
     * Type of the infrastructure. Valid values: KUBERNETES, KUBERNETESV2
     */
    infraType?: pulumi.Input<string>;
    /**
     * Skip TLS verification for the infrastructure.
     */
    insecureSkipVerify?: pulumi.Input<boolean>;
    /**
     * Labels to apply to the infrastructure pods.
     */
    label?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * mTLS configuration for the infrastructure.
     */
    mtls?: pulumi.Input<inputs.chaos.InfrastructureV2Mtls>;
    /**
     * Name of the infrastructure.
     */
    name?: pulumi.Input<string>;
    /**
     * Kubernetes namespace where the infrastructure will be installed. Maps to the infrastructure namespace.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Node selector for the infrastructure pods.
     */
    nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the organization.
     */
    orgId: pulumi.Input<string>;
    /**
     * The ID of the project.
     */
    projectId: pulumi.Input<string>;
    /**
     * Proxy configuration for the infrastructure.
     */
    proxy?: pulumi.Input<inputs.chaos.InfrastructureV2Proxy>;
    /**
     * Group ID to run the infrastructure as.
     */
    runAsGroup?: pulumi.Input<number>;
    /**
     * User ID to run the infrastructure as.
     */
    runAsUser?: pulumi.Input<number>;
    /**
     * Service account used by the infrastructure.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * Tags for the infrastructure.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If specified, the pod's tolerations.
     */
    tolerations?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2Toleration>[]>;
    /**
     * Volume mounts for the container.
     */
    volumeMounts?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2VolumeMount>[]>;
    /**
     * Volumes to be created in the infrastructure.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.chaos.InfrastructureV2Volume>[]>;
}
