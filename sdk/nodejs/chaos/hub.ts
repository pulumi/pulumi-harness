// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for managing a Harness Chaos Hub
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = new harness.chaos.Hub("example", {
 *     orgId: "<org_id>",
 *     projectId: "<project_id>",
 *     name: "<name>",
 *     description: "<description>",
 *     connectorId: "<connector_id>",
 *     repoBranch: "<repo_branch>",
 *     repoName: "<repo_name>",
 *     isDefault: false,
 *     tags: [
 *         "<tag1>",
 *         "<tag2>",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import Project level Chaos Hub
 *
 * ```sh
 * $ pulumi import harness:chaos/hub:Hub example <org_id>/<project_id>/<hub_id>
 * ```
 */
export class Hub extends pulumi.CustomResource {
    /**
     * Get an existing Hub resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HubState, opts?: pulumi.CustomResourceOptions): Hub {
        return new Hub(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:chaos/hub:Hub';

    /**
     * Returns true if the given object is an instance of Hub.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Hub {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Hub.__pulumiType;
    }

    /**
     * ID of the Git connector
     */
    declare public readonly connectorId: pulumi.Output<string>;
    /**
     * Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
     */
    declare public readonly connectorScope: pulumi.Output<string | undefined>;
    /**
     * Creation timestamp
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Description of the chaos hub
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Whether the chaos hub is available
     */
    declare public /*out*/ readonly isAvailable: pulumi.Output<boolean>;
    /**
     * Whether this is the default chaos hub
     */
    declare public readonly isDefault: pulumi.Output<boolean | undefined>;
    /**
     * Timestamp of the last sync
     */
    declare public /*out*/ readonly lastSyncedAt: pulumi.Output<string>;
    /**
     * Name of the chaos hub
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The organization ID of the chaos hub
     */
    declare public readonly orgId: pulumi.Output<string | undefined>;
    /**
     * The project ID of the chaos hub
     */
    declare public readonly projectId: pulumi.Output<string | undefined>;
    /**
     * Git repository branch
     */
    declare public readonly repoBranch: pulumi.Output<string>;
    /**
     * Name of the Git repository (required for account-level connectors)
     */
    declare public readonly repoName: pulumi.Output<string | undefined>;
    /**
     * Tags to associate with the chaos hub
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * Total number of experiments in the hub
     */
    declare public /*out*/ readonly totalExperiments: pulumi.Output<number>;
    /**
     * Total number of faults in the hub
     */
    declare public /*out*/ readonly totalFaults: pulumi.Output<number>;
    /**
     * Last update timestamp
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a Hub resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HubArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HubArgs | HubState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HubState | undefined;
            resourceInputs["connectorId"] = state?.connectorId;
            resourceInputs["connectorScope"] = state?.connectorScope;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["isAvailable"] = state?.isAvailable;
            resourceInputs["isDefault"] = state?.isDefault;
            resourceInputs["lastSyncedAt"] = state?.lastSyncedAt;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["repoBranch"] = state?.repoBranch;
            resourceInputs["repoName"] = state?.repoName;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["totalExperiments"] = state?.totalExperiments;
            resourceInputs["totalFaults"] = state?.totalFaults;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as HubArgs | undefined;
            if (args?.connectorId === undefined && !opts.urn) {
                throw new Error("Missing required property 'connectorId'");
            }
            if (args?.repoBranch === undefined && !opts.urn) {
                throw new Error("Missing required property 'repoBranch'");
            }
            resourceInputs["connectorId"] = args?.connectorId;
            resourceInputs["connectorScope"] = args?.connectorScope;
            resourceInputs["description"] = args?.description;
            resourceInputs["isDefault"] = args?.isDefault;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["repoBranch"] = args?.repoBranch;
            resourceInputs["repoName"] = args?.repoName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["isAvailable"] = undefined /*out*/;
            resourceInputs["lastSyncedAt"] = undefined /*out*/;
            resourceInputs["totalExperiments"] = undefined /*out*/;
            resourceInputs["totalFaults"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Hub.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Hub resources.
 */
export interface HubState {
    /**
     * ID of the Git connector
     */
    connectorId?: pulumi.Input<string>;
    /**
     * Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
     */
    connectorScope?: pulumi.Input<string>;
    /**
     * Creation timestamp
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Description of the chaos hub
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the chaos hub is available
     */
    isAvailable?: pulumi.Input<boolean>;
    /**
     * Whether this is the default chaos hub
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * Timestamp of the last sync
     */
    lastSyncedAt?: pulumi.Input<string>;
    /**
     * Name of the chaos hub
     */
    name?: pulumi.Input<string>;
    /**
     * The organization ID of the chaos hub
     */
    orgId?: pulumi.Input<string>;
    /**
     * The project ID of the chaos hub
     */
    projectId?: pulumi.Input<string>;
    /**
     * Git repository branch
     */
    repoBranch?: pulumi.Input<string>;
    /**
     * Name of the Git repository (required for account-level connectors)
     */
    repoName?: pulumi.Input<string>;
    /**
     * Tags to associate with the chaos hub
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Total number of experiments in the hub
     */
    totalExperiments?: pulumi.Input<number>;
    /**
     * Total number of faults in the hub
     */
    totalFaults?: pulumi.Input<number>;
    /**
     * Last update timestamp
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Hub resource.
 */
export interface HubArgs {
    /**
     * ID of the Git connector
     */
    connectorId: pulumi.Input<string>;
    /**
     * Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
     */
    connectorScope?: pulumi.Input<string>;
    /**
     * Description of the chaos hub
     */
    description?: pulumi.Input<string>;
    /**
     * Whether this is the default chaos hub
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * Name of the chaos hub
     */
    name?: pulumi.Input<string>;
    /**
     * The organization ID of the chaos hub
     */
    orgId?: pulumi.Input<string>;
    /**
     * The project ID of the chaos hub
     */
    projectId?: pulumi.Input<string>;
    /**
     * Git repository branch
     */
    repoBranch: pulumi.Input<string>;
    /**
     * Name of the Git repository (required for account-level connectors)
     */
    repoName?: pulumi.Input<string>;
    /**
     * Tags to associate with the chaos hub
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
