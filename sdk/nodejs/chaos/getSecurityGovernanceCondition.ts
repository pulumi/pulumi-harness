// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Data source for retrieving a Harness Chaos Security Governance Condition
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * // Example of looking up a security governance condition by name
 * const byName = harness.chaos.getSecurityGovernanceCondition({
 *     orgId: orgId,
 *     projectId: projectId,
 *     name: "k8s-security-condition",
 * });
 * // Example of looking up a security governance condition by ID
 * const byId = harness.chaos.getSecurityGovernanceCondition({
 *     orgId: orgId,
 *     projectId: projectId,
 *     id: "<condition_id>",
 * });
 * export const securityGovernanceConditionByName = byName;
 * export const securityGovernanceConditionById = byId;
 * ```
 */
export function getSecurityGovernanceCondition(args?: GetSecurityGovernanceConditionArgs, opts?: pulumi.InvokeOptions): Promise<GetSecurityGovernanceConditionResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:chaos/getSecurityGovernanceCondition:getSecurityGovernanceCondition", {
        "id": args.id,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecurityGovernanceCondition.
 */
export interface GetSecurityGovernanceConditionArgs {
    /**
     * The ID of the security governance condition. Either `id` or `name` must be specified.
     */
    id?: string;
    /**
     * The name of the security governance condition. Either `id` or `name` must be specified.
     */
    name?: string;
    /**
     * The organization ID of the security governance condition
     */
    orgId?: string;
    /**
     * The project ID of the security governance condition
     */
    projectId?: string;
}

/**
 * A collection of values returned by getSecurityGovernanceCondition.
 */
export interface GetSecurityGovernanceConditionResult {
    /**
     * The description of the security governance condition
     */
    readonly description: string;
    /**
     * Fault specification for the condition
     */
    readonly faultSpecs: outputs.chaos.GetSecurityGovernanceConditionFaultSpec[];
    /**
     * The ID of the security governance condition. Either `id` or `name` must be specified.
     */
    readonly id: string;
    /**
     * The infrastructure type (KubernetesV2, Linux, Windows)
     */
    readonly infraType: string;
    /**
     * Kubernetes specific configuration
     */
    readonly k8sSpecs: outputs.chaos.GetSecurityGovernanceConditionK8sSpec[];
    /**
     * Machine specific configuration
     */
    readonly machineSpecs: outputs.chaos.GetSecurityGovernanceConditionMachineSpec[];
    /**
     * The name of the security governance condition. Either `id` or `name` must be specified.
     */
    readonly name: string;
    /**
     * The organization ID of the security governance condition
     */
    readonly orgId?: string;
    /**
     * The project ID of the security governance condition
     */
    readonly projectId?: string;
    /**
     * Tags associated with the condition
     */
    readonly tags: string[];
}
/**
 * Data source for retrieving a Harness Chaos Security Governance Condition
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * // Example of looking up a security governance condition by name
 * const byName = harness.chaos.getSecurityGovernanceCondition({
 *     orgId: orgId,
 *     projectId: projectId,
 *     name: "k8s-security-condition",
 * });
 * // Example of looking up a security governance condition by ID
 * const byId = harness.chaos.getSecurityGovernanceCondition({
 *     orgId: orgId,
 *     projectId: projectId,
 *     id: "<condition_id>",
 * });
 * export const securityGovernanceConditionByName = byName;
 * export const securityGovernanceConditionById = byId;
 * ```
 */
export function getSecurityGovernanceConditionOutput(args?: GetSecurityGovernanceConditionOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSecurityGovernanceConditionResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:chaos/getSecurityGovernanceCondition:getSecurityGovernanceCondition", {
        "id": args.id,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecurityGovernanceCondition.
 */
export interface GetSecurityGovernanceConditionOutputArgs {
    /**
     * The ID of the security governance condition. Either `id` or `name` must be specified.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the security governance condition. Either `id` or `name` must be specified.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization ID of the security governance condition
     */
    orgId?: pulumi.Input<string>;
    /**
     * The project ID of the security governance condition
     */
    projectId?: pulumi.Input<string>;
}
