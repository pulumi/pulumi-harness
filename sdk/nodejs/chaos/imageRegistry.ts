// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for managing a Harness Chaos Image Registry
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = new harness.chaos.ImageRegistry("example", {
 *     orgId: "<org_id>",
 *     projectId: "<project_id>",
 *     registryServer: "<registry_server>",
 *     registryAccount: "<registry_account>",
 *     isPrivate: true,
 *     secretName: "<secret_name>",
 *     isDefault: false,
 *     isOverrideAllowed: true,
 *     useCustomImages: true,
 *     customImages: [{
 *         logWatcher: "<log_watcher_image>",
 *         ddcr: "<ddcr_image>",
 *         ddcrLib: "<ddcr_lib_image>",
 *         ddcrFault: "<ddcr_fault_image>",
 *     }],
 * });
 * ```
 */
export class ImageRegistry extends pulumi.CustomResource {
    /**
     * Get an existing ImageRegistry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageRegistryState, opts?: pulumi.CustomResourceOptions): ImageRegistry {
        return new ImageRegistry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:chaos/imageRegistry:ImageRegistry';

    /**
     * Returns true if the given object is an instance of ImageRegistry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImageRegistry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImageRegistry.__pulumiType;
    }

    /**
     * Creation timestamp
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Custom images configuration
     */
    declare public readonly customImages: pulumi.Output<outputs.chaos.ImageRegistryCustomImage[]>;
    /**
     * The infrastructure ID to set up the image registry
     */
    declare public readonly infraId: pulumi.Output<string | undefined>;
    /**
     * Whether this is the default registry
     */
    declare public readonly isDefault: pulumi.Output<boolean | undefined>;
    /**
     * Whether override is allowed for this registry
     */
    declare public readonly isOverrideAllowed: pulumi.Output<boolean | undefined>;
    /**
     * Whether the registry is private
     */
    declare public readonly isPrivate: pulumi.Output<boolean>;
    /**
     * The organization ID of the image registry
     */
    declare public readonly orgId: pulumi.Output<string | undefined>;
    /**
     * The project ID of the image registry
     */
    declare public readonly projectId: pulumi.Output<string | undefined>;
    /**
     * The registry account name
     */
    declare public readonly registryAccount: pulumi.Output<string>;
    /**
     * The registry server URL
     */
    declare public readonly registryServer: pulumi.Output<string>;
    /**
     * The name of the secret for authentication
     */
    declare public readonly secretName: pulumi.Output<string | undefined>;
    /**
     * Last update timestamp
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * Whether to use custom images
     */
    declare public readonly useCustomImages: pulumi.Output<boolean | undefined>;

    /**
     * Create a ImageRegistry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageRegistryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageRegistryArgs | ImageRegistryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageRegistryState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["customImages"] = state?.customImages;
            resourceInputs["infraId"] = state?.infraId;
            resourceInputs["isDefault"] = state?.isDefault;
            resourceInputs["isOverrideAllowed"] = state?.isOverrideAllowed;
            resourceInputs["isPrivate"] = state?.isPrivate;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["registryAccount"] = state?.registryAccount;
            resourceInputs["registryServer"] = state?.registryServer;
            resourceInputs["secretName"] = state?.secretName;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["useCustomImages"] = state?.useCustomImages;
        } else {
            const args = argsOrState as ImageRegistryArgs | undefined;
            if (args?.isPrivate === undefined && !opts.urn) {
                throw new Error("Missing required property 'isPrivate'");
            }
            if (args?.registryAccount === undefined && !opts.urn) {
                throw new Error("Missing required property 'registryAccount'");
            }
            if (args?.registryServer === undefined && !opts.urn) {
                throw new Error("Missing required property 'registryServer'");
            }
            resourceInputs["customImages"] = args?.customImages;
            resourceInputs["infraId"] = args?.infraId;
            resourceInputs["isDefault"] = args?.isDefault;
            resourceInputs["isOverrideAllowed"] = args?.isOverrideAllowed;
            resourceInputs["isPrivate"] = args?.isPrivate;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["registryAccount"] = args?.registryAccount;
            resourceInputs["registryServer"] = args?.registryServer;
            resourceInputs["secretName"] = args?.secretName;
            resourceInputs["useCustomImages"] = args?.useCustomImages;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImageRegistry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ImageRegistry resources.
 */
export interface ImageRegistryState {
    /**
     * Creation timestamp
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Custom images configuration
     */
    customImages?: pulumi.Input<pulumi.Input<inputs.chaos.ImageRegistryCustomImage>[]>;
    /**
     * The infrastructure ID to set up the image registry
     */
    infraId?: pulumi.Input<string>;
    /**
     * Whether this is the default registry
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * Whether override is allowed for this registry
     */
    isOverrideAllowed?: pulumi.Input<boolean>;
    /**
     * Whether the registry is private
     */
    isPrivate?: pulumi.Input<boolean>;
    /**
     * The organization ID of the image registry
     */
    orgId?: pulumi.Input<string>;
    /**
     * The project ID of the image registry
     */
    projectId?: pulumi.Input<string>;
    /**
     * The registry account name
     */
    registryAccount?: pulumi.Input<string>;
    /**
     * The registry server URL
     */
    registryServer?: pulumi.Input<string>;
    /**
     * The name of the secret for authentication
     */
    secretName?: pulumi.Input<string>;
    /**
     * Last update timestamp
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * Whether to use custom images
     */
    useCustomImages?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ImageRegistry resource.
 */
export interface ImageRegistryArgs {
    /**
     * Custom images configuration
     */
    customImages?: pulumi.Input<pulumi.Input<inputs.chaos.ImageRegistryCustomImage>[]>;
    /**
     * The infrastructure ID to set up the image registry
     */
    infraId?: pulumi.Input<string>;
    /**
     * Whether this is the default registry
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * Whether override is allowed for this registry
     */
    isOverrideAllowed?: pulumi.Input<boolean>;
    /**
     * Whether the registry is private
     */
    isPrivate: pulumi.Input<boolean>;
    /**
     * The organization ID of the image registry
     */
    orgId?: pulumi.Input<string>;
    /**
     * The project ID of the image registry
     */
    projectId?: pulumi.Input<string>;
    /**
     * The registry account name
     */
    registryAccount: pulumi.Input<string>;
    /**
     * The registry server URL
     */
    registryServer: pulumi.Input<string>;
    /**
     * The name of the secret for authentication
     */
    secretName?: pulumi.Input<string>;
    /**
     * Whether to use custom images
     */
    useCustomImages?: pulumi.Input<boolean>;
}
