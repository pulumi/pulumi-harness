// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for syncing a Harness Chaos Hub
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = new harness.chaos.HubSync("example", {
 *     orgId: "<org_id>",
 *     projectId: "<project_id>",
 *     hubId: "<hub_id>",
 * });
 * ```
 */
export class HubSync extends pulumi.CustomResource {
    /**
     * Get an existing HubSync resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HubSyncState, opts?: pulumi.CustomResourceOptions): HubSync {
        return new HubSync(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:chaos/hubSync:HubSync';

    /**
     * Returns true if the given object is an instance of HubSync.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HubSync {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HubSync.__pulumiType;
    }

    /**
     * The ID of the Chaos Hub to sync
     */
    public readonly hubId!: pulumi.Output<string>;
    /**
     * Timestamp of the last sync
     */
    public /*out*/ readonly lastSyncedAt!: pulumi.Output<string>;
    public readonly orgId!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;

    /**
     * Create a HubSync resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HubSyncArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HubSyncArgs | HubSyncState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HubSyncState | undefined;
            resourceInputs["hubId"] = state ? state.hubId : undefined;
            resourceInputs["lastSyncedAt"] = state ? state.lastSyncedAt : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
        } else {
            const args = argsOrState as HubSyncArgs | undefined;
            if ((!args || args.hubId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hubId'");
            }
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["hubId"] = args ? args.hubId : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["lastSyncedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HubSync.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HubSync resources.
 */
export interface HubSyncState {
    /**
     * The ID of the Chaos Hub to sync
     */
    hubId?: pulumi.Input<string>;
    /**
     * Timestamp of the last sync
     */
    lastSyncedAt?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HubSync resource.
 */
export interface HubSyncArgs {
    /**
     * The ID of the Chaos Hub to sync
     */
    hubId: pulumi.Input<string>;
    orgId: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
}
