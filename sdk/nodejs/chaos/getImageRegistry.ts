// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Data source for retrieving a Harness Chaos Image Registry and checking override status
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * // Data source to verify the registry
 * const example = harness.chaos.getImageRegistry({
 *     orgId: "<org_id>",
 *     projectId: "<project_id>",
 * });
 * // Example of checking override status
 * const overrideCheck = harness.chaos.getImageRegistry({
 *     orgId: "<org_id>",
 *     projectId: "<project_id>",
 *     checkOverride: true,
 * });
 * ```
 */
export function getImageRegistry(args?: GetImageRegistryArgs, opts?: pulumi.InvokeOptions): Promise<GetImageRegistryResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:chaos/getImageRegistry:getImageRegistry", {
        "checkOverride": args.checkOverride,
        "infraId": args.infraId,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getImageRegistry.
 */
export interface GetImageRegistryArgs {
    /**
     * Whether to check if override is allowed
     */
    checkOverride?: boolean;
    /**
     * The infrastructure ID to set up the image registry
     */
    infraId?: string;
    /**
     * The organization ID of the image registry
     */
    orgId?: string;
    /**
     * The project ID of the image registry
     */
    projectId?: string;
}

/**
 * A collection of values returned by getImageRegistry.
 */
export interface GetImageRegistryResult {
    /**
     * Whether to check if override is allowed
     */
    readonly checkOverride?: boolean;
    /**
     * Creation timestamp
     */
    readonly createdAt: string;
    /**
     * Custom images configuration
     */
    readonly customImages: outputs.chaos.GetImageRegistryCustomImage[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The infrastructure ID to set up the image registry
     */
    readonly infraId?: string;
    /**
     * Whether this is the default registry
     */
    readonly isDefault: boolean;
    /**
     * Whether override is allowed for this registry
     */
    readonly isOverrideAllowed: boolean;
    /**
     * Whether the registry is private
     */
    readonly isPrivate: boolean;
    /**
     * The organization ID of the image registry
     */
    readonly orgId?: string;
    /**
     * Indicates if override is blocked by scope (only populated if checkOverride is true)
     */
    readonly overrideBlockedByScope: string;
    /**
     * The project ID of the image registry
     */
    readonly projectId?: string;
    /**
     * The registry account name
     */
    readonly registryAccount: string;
    /**
     * The registry server URL
     */
    readonly registryServer: string;
    /**
     * The name of the secret for authentication
     */
    readonly secretName: string;
    /**
     * Last update timestamp
     */
    readonly updatedAt: string;
    /**
     * Whether custom images are used
     */
    readonly useCustomImages: boolean;
}
/**
 * Data source for retrieving a Harness Chaos Image Registry and checking override status
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * // Data source to verify the registry
 * const example = harness.chaos.getImageRegistry({
 *     orgId: "<org_id>",
 *     projectId: "<project_id>",
 * });
 * // Example of checking override status
 * const overrideCheck = harness.chaos.getImageRegistry({
 *     orgId: "<org_id>",
 *     projectId: "<project_id>",
 *     checkOverride: true,
 * });
 * ```
 */
export function getImageRegistryOutput(args?: GetImageRegistryOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetImageRegistryResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:chaos/getImageRegistry:getImageRegistry", {
        "checkOverride": args.checkOverride,
        "infraId": args.infraId,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getImageRegistry.
 */
export interface GetImageRegistryOutputArgs {
    /**
     * Whether to check if override is allowed
     */
    checkOverride?: pulumi.Input<boolean>;
    /**
     * The infrastructure ID to set up the image registry
     */
    infraId?: pulumi.Input<string>;
    /**
     * The organization ID of the image registry
     */
    orgId?: pulumi.Input<string>;
    /**
     * The project ID of the image registry
     */
    projectId?: pulumi.Input<string>;
}
