// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Data source for retrieving a Harness Chaos Hub
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = harness.chaos.getHub({
 *     name: "<name>",
 *     orgId: "<org_id>",
 *     projectId: "<project_id>",
 * });
 * ```
 */
export function getHub(args: GetHubArgs, opts?: pulumi.InvokeOptions): Promise<GetHubResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:chaos/getHub:getHub", {
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getHub.
 */
export interface GetHubArgs {
    /**
     * Name of the chaos hub
     */
    name: string;
    /**
     * The organization ID of the chaos hub
     */
    orgId?: string;
    /**
     * The project ID of the chaos hub
     */
    projectId?: string;
}

/**
 * A collection of values returned by getHub.
 */
export interface GetHubResult {
    /**
     * ID of the Git connector
     */
    readonly connectorId: string;
    /**
     * Creation timestamp
     */
    readonly createdAt: string;
    /**
     * Description of the chaos hub
     */
    readonly description: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Whether the chaos hub is available
     */
    readonly isAvailable: boolean;
    /**
     * Whether this is the default chaos hub
     */
    readonly isDefault: boolean;
    /**
     * Timestamp of the last sync
     */
    readonly lastSyncedAt: string;
    /**
     * Name of the chaos hub
     */
    readonly name: string;
    /**
     * The organization ID of the chaos hub
     */
    readonly orgId?: string;
    /**
     * The project ID of the chaos hub
     */
    readonly projectId?: string;
    /**
     * Git repository branch
     */
    readonly repoBranch: string;
    /**
     * Name of the Git repository
     */
    readonly repoName: string;
    /**
     * Tags associated with the chaos hub
     */
    readonly tags: string[];
    /**
     * Total number of experiments in the hub
     */
    readonly totalExperiments: number;
    /**
     * Total number of faults in the hub
     */
    readonly totalFaults: number;
    /**
     * Last update timestamp
     */
    readonly updatedAt: string;
}
/**
 * Data source for retrieving a Harness Chaos Hub
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = harness.chaos.getHub({
 *     name: "<name>",
 *     orgId: "<org_id>",
 *     projectId: "<project_id>",
 * });
 * ```
 */
export function getHubOutput(args: GetHubOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetHubResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:chaos/getHub:getHub", {
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getHub.
 */
export interface GetHubOutputArgs {
    /**
     * Name of the chaos hub
     */
    name: pulumi.Input<string>;
    /**
     * The organization ID of the chaos hub
     */
    orgId?: pulumi.Input<string>;
    /**
     * The project ID of the chaos hub
     */
    projectId?: pulumi.Input<string>;
}
