// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for managing a Harness Chaos Security Governance Rule
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * // K8s Rule
 * const example = new harness.chaos.SecurityGovernanceRule("example", {
 *     orgId: "<org_id>",
 *     projectId: "<project_id>",
 *     name: "<name>",
 *     description: "<description>",
 *     isEnabled: true,
 *     conditionIds: ["<condition_id>"],
 *     userGroupIds: ["_project_all_users"],
 *     tags: [
 *         "<tag1>",
 *         "<tag2>",
 *     ],
 *     timeWindows: [{
 *         timeZone: "UTC",
 *         startTime: 1711238400000,
 *         duration: "24h",
 *         recurrence: {
 *             type: "Daily",
 *             until: -1,
 *         },
 *     }],
 * });
 * // Linux Rule
 * const linuxRule = new harness.chaos.SecurityGovernanceRule("linux_rule", {
 *     orgId: "<org_id>",
 *     projectId: "<project_id>",
 *     name: "<name>",
 *     description: "<description>",
 *     isEnabled: true,
 *     conditionIds: ["<condition_id>"],
 *     userGroupIds: ["_project_all_users"],
 *     tags: [
 *         "<tag1>",
 *         "<tag2>",
 *     ],
 *     timeWindows: [{
 *         timeZone: "UTC",
 *         startTime: 1711238400000,
 *         duration: "24h",
 *         recurrence: {
 *             type: "Daily",
 *             until: -1,
 *         },
 *     }],
 * });
 * // Windows Rule
 * const windowsRule = new harness.chaos.SecurityGovernanceRule("windows_rule", {
 *     orgId: "<org_id>",
 *     projectId: "<project_id>",
 *     name: "<name>",
 *     description: "<description>",
 *     isEnabled: true,
 *     conditionIds: ["<condition_id>"],
 *     userGroupIds: ["_project_all_users"],
 *     tags: [
 *         "<tag1>",
 *         "<tag2>",
 *     ],
 *     timeWindows: [{
 *         timeZone: "UTC",
 *         startTime: 1711238400000,
 *         duration: "24h",
 *         recurrence: {
 *             type: "Daily",
 *             until: -1,
 *         },
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import Project level Chaos Security Governance Rule
 *
 * ```sh
 * $ pulumi import harness:chaos/securityGovernanceRule:SecurityGovernanceRule example org_id/project_id/rule_id
 * ```
 */
export class SecurityGovernanceRule extends pulumi.CustomResource {
    /**
     * Get an existing SecurityGovernanceRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityGovernanceRuleState, opts?: pulumi.CustomResourceOptions): SecurityGovernanceRule {
        return new SecurityGovernanceRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:chaos/securityGovernanceRule:SecurityGovernanceRule';

    /**
     * Returns true if the given object is an instance of SecurityGovernanceRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityGovernanceRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityGovernanceRule.__pulumiType;
    }

    /**
     * List of condition IDs associated with this rule
     */
    declare public readonly conditionIds: pulumi.Output<string[]>;
    /**
     * Description of the security governance rule
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Whether the rule is enabled
     */
    declare public readonly isEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Name of the security governance rule
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The organization ID of the security governance rule
     */
    declare public readonly orgId: pulumi.Output<string>;
    /**
     * The project ID of the security governance rule
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * Tags for the security governance rule
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    declare public readonly timeWindows: pulumi.Output<outputs.chaos.SecurityGovernanceRuleTimeWindow[]>;
    /**
     * List of user group IDs associated with this rule
     */
    declare public readonly userGroupIds: pulumi.Output<string[] | undefined>;

    /**
     * Create a SecurityGovernanceRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityGovernanceRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityGovernanceRuleArgs | SecurityGovernanceRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityGovernanceRuleState | undefined;
            resourceInputs["conditionIds"] = state?.conditionIds;
            resourceInputs["description"] = state?.description;
            resourceInputs["isEnabled"] = state?.isEnabled;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["timeWindows"] = state?.timeWindows;
            resourceInputs["userGroupIds"] = state?.userGroupIds;
        } else {
            const args = argsOrState as SecurityGovernanceRuleArgs | undefined;
            if (args?.conditionIds === undefined && !opts.urn) {
                throw new Error("Missing required property 'conditionIds'");
            }
            if (args?.orgId === undefined && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.timeWindows === undefined && !opts.urn) {
                throw new Error("Missing required property 'timeWindows'");
            }
            resourceInputs["conditionIds"] = args?.conditionIds;
            resourceInputs["description"] = args?.description;
            resourceInputs["isEnabled"] = args?.isEnabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timeWindows"] = args?.timeWindows;
            resourceInputs["userGroupIds"] = args?.userGroupIds;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityGovernanceRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecurityGovernanceRule resources.
 */
export interface SecurityGovernanceRuleState {
    /**
     * List of condition IDs associated with this rule
     */
    conditionIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the security governance rule
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the rule is enabled
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the security governance rule
     */
    name?: pulumi.Input<string>;
    /**
     * The organization ID of the security governance rule
     */
    orgId?: pulumi.Input<string>;
    /**
     * The project ID of the security governance rule
     */
    projectId?: pulumi.Input<string>;
    /**
     * Tags for the security governance rule
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeWindows?: pulumi.Input<pulumi.Input<inputs.chaos.SecurityGovernanceRuleTimeWindow>[]>;
    /**
     * List of user group IDs associated with this rule
     */
    userGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SecurityGovernanceRule resource.
 */
export interface SecurityGovernanceRuleArgs {
    /**
     * List of condition IDs associated with this rule
     */
    conditionIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the security governance rule
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the rule is enabled
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the security governance rule
     */
    name?: pulumi.Input<string>;
    /**
     * The organization ID of the security governance rule
     */
    orgId: pulumi.Input<string>;
    /**
     * The project ID of the security governance rule
     */
    projectId: pulumi.Input<string>;
    /**
     * Tags for the security governance rule
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeWindows: pulumi.Input<pulumi.Input<inputs.chaos.SecurityGovernanceRuleTimeWindow>[]>;
    /**
     * List of user group IDs associated with this rule
     */
    userGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}
