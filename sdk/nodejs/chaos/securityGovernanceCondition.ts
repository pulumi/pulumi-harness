// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for managing a Harness Chaos Security Governance Condition
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * // Example of a Kubernetes Security Governance Condition
 * const k8sCondition = new harness.chaos.SecurityGovernanceCondition("k8s_condition", {
 *     orgId: orgId,
 *     projectId: projectId,
 *     name: "k8s-security-condition",
 *     description: "Security governance condition for Kubernetes workloads",
 *     infraType: "KubernetesV2",
 *     faultSpec: {
 *         operator: "NOT_EQUAL_TO",
 *         faults: [
 *             {
 *                 faultType: "FAULT",
 *                 name: "pod-delete",
 *             },
 *             {
 *                 faultType: "FAULT",
 *                 name: "pod-dns",
 *             },
 *         ],
 *     },
 *     k8sSpec: {
 *         infraSpec: {
 *             operator: "EQUAL_TO",
 *             infraIds: [k8sInfraId],
 *         },
 *         applicationSpec: {
 *             operator: "EQUAL_TO",
 *             workloads: [{
 *                 namespace: "default",
 *                 kind: "deployment",
 *                 label: "app=nginx",
 *                 services: ["nginx-service"],
 *                 applicationMapId: "nginx-app",
 *             }],
 *         },
 *         chaosServiceAccountSpec: {
 *             operator: "EQUAL_TO",
 *             serviceAccounts: [
 *                 "default",
 *                 "chaos-service-account",
 *             ],
 *         },
 *     },
 *     tags: [
 *         "env:prod",
 *         "team:security",
 *         "platform:k8s",
 *     ],
 * });
 * // Example of a Windows Security Governance Condition
 * const windowsCondition = new harness.chaos.SecurityGovernanceCondition("windows_condition", {
 *     orgId: orgId,
 *     projectId: projectId,
 *     name: "windows-security-condition",
 *     description: "Security governance condition for Windows hosts",
 *     infraType: "Windows",
 *     faultSpec: {
 *         operator: "NOT_EQUAL_TO",
 *         faults: [
 *             {
 *                 faultType: "FAULT",
 *                 name: "process-kill",
 *             },
 *             {
 *                 faultType: "FAULT",
 *                 name: "cpu-hog",
 *             },
 *         ],
 *     },
 *     machineSpec: {
 *         infraSpec: {
 *             operator: "EQUAL_TO",
 *             infraIds: [windowsInfraId],
 *         },
 *     },
 *     tags: [
 *         "env:prod",
 *         "team:security",
 *         "platform:windows",
 *     ],
 * });
 * // Example of a Linux Security Governance Condition
 * const linuxCondition = new harness.chaos.SecurityGovernanceCondition("linux_condition", {
 *     orgId: orgId,
 *     projectId: projectId,
 *     name: "linux-security-condition",
 *     description: "Security governance condition for Linux hosts",
 *     infraType: "Linux",
 *     faultSpec: {
 *         operator: "NOT_EQUAL_TO",
 *         faults: [
 *             {
 *                 faultType: "FAULT",
 *                 name: "process-kill",
 *             },
 *             {
 *                 faultType: "FAULT",
 *                 name: "memory-hog",
 *             },
 *         ],
 *     },
 *     machineSpec: {
 *         infraSpec: {
 *             operator: "EQUAL_TO",
 *             infraIds: [linuxInfraId],
 *         },
 *     },
 *     tags: [
 *         "env:prod",
 *         "team:security",
 *         "platform:linux",
 *     ],
 * });
 * export const k8sConditionId = k8sCondition.id;
 * export const windowsConditionId = windowsCondition.id;
 * export const linuxConditionId = linuxCondition.id;
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Import Project level Chaos Security Governance Condition
 *
 * ```sh
 * $ pulumi import harness:chaos/securityGovernanceCondition:SecurityGovernanceCondition example org_id/project_id/condition_id
 * ```
 */
export class SecurityGovernanceCondition extends pulumi.CustomResource {
    /**
     * Get an existing SecurityGovernanceCondition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityGovernanceConditionState, opts?: pulumi.CustomResourceOptions): SecurityGovernanceCondition {
        return new SecurityGovernanceCondition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:chaos/securityGovernanceCondition:SecurityGovernanceCondition';

    /**
     * Returns true if the given object is an instance of SecurityGovernanceCondition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityGovernanceCondition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityGovernanceCondition.__pulumiType;
    }

    /**
     * Description of the security governance condition
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specification for faults to be included in the condition
     */
    public readonly faultSpec!: pulumi.Output<outputs.chaos.SecurityGovernanceConditionFaultSpec>;
    /**
     * Type of infrastructure (Kubernetes, KubernetesV2, Linux, Windows, CloudFoundry, Container)
     */
    public readonly infraType!: pulumi.Output<string>;
    /**
     * Kubernetes specific configuration (required when infra*type is KUBERNETES or KUBERNETESV2)
     */
    public readonly k8sSpec!: pulumi.Output<outputs.chaos.SecurityGovernanceConditionK8sSpec | undefined>;
    /**
     * Machine specific configuration (required when infra*type is LINUX or WINDOWS)
     */
    public readonly machineSpec!: pulumi.Output<outputs.chaos.SecurityGovernanceConditionMachineSpec | undefined>;
    /**
     * Name of the security governance condition
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The organization ID of the security governance condition
     */
    public readonly orgId!: pulumi.Output<string>;
    /**
     * The project ID of the security governance condition
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Tags for the security governance condition
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a SecurityGovernanceCondition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityGovernanceConditionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityGovernanceConditionArgs | SecurityGovernanceConditionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityGovernanceConditionState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["faultSpec"] = state ? state.faultSpec : undefined;
            resourceInputs["infraType"] = state ? state.infraType : undefined;
            resourceInputs["k8sSpec"] = state ? state.k8sSpec : undefined;
            resourceInputs["machineSpec"] = state ? state.machineSpec : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as SecurityGovernanceConditionArgs | undefined;
            if ((!args || args.faultSpec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'faultSpec'");
            }
            if ((!args || args.infraType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'infraType'");
            }
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["faultSpec"] = args ? args.faultSpec : undefined;
            resourceInputs["infraType"] = args ? args.infraType : undefined;
            resourceInputs["k8sSpec"] = args ? args.k8sSpec : undefined;
            resourceInputs["machineSpec"] = args ? args.machineSpec : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityGovernanceCondition.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecurityGovernanceCondition resources.
 */
export interface SecurityGovernanceConditionState {
    /**
     * Description of the security governance condition
     */
    description?: pulumi.Input<string>;
    /**
     * Specification for faults to be included in the condition
     */
    faultSpec?: pulumi.Input<inputs.chaos.SecurityGovernanceConditionFaultSpec>;
    /**
     * Type of infrastructure (Kubernetes, KubernetesV2, Linux, Windows, CloudFoundry, Container)
     */
    infraType?: pulumi.Input<string>;
    /**
     * Kubernetes specific configuration (required when infra*type is KUBERNETES or KUBERNETESV2)
     */
    k8sSpec?: pulumi.Input<inputs.chaos.SecurityGovernanceConditionK8sSpec>;
    /**
     * Machine specific configuration (required when infra*type is LINUX or WINDOWS)
     */
    machineSpec?: pulumi.Input<inputs.chaos.SecurityGovernanceConditionMachineSpec>;
    /**
     * Name of the security governance condition
     */
    name?: pulumi.Input<string>;
    /**
     * The organization ID of the security governance condition
     */
    orgId?: pulumi.Input<string>;
    /**
     * The project ID of the security governance condition
     */
    projectId?: pulumi.Input<string>;
    /**
     * Tags for the security governance condition
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SecurityGovernanceCondition resource.
 */
export interface SecurityGovernanceConditionArgs {
    /**
     * Description of the security governance condition
     */
    description?: pulumi.Input<string>;
    /**
     * Specification for faults to be included in the condition
     */
    faultSpec: pulumi.Input<inputs.chaos.SecurityGovernanceConditionFaultSpec>;
    /**
     * Type of infrastructure (Kubernetes, KubernetesV2, Linux, Windows, CloudFoundry, Container)
     */
    infraType: pulumi.Input<string>;
    /**
     * Kubernetes specific configuration (required when infra*type is KUBERNETES or KUBERNETESV2)
     */
    k8sSpec?: pulumi.Input<inputs.chaos.SecurityGovernanceConditionK8sSpec>;
    /**
     * Machine specific configuration (required when infra*type is LINUX or WINDOWS)
     */
    machineSpec?: pulumi.Input<inputs.chaos.SecurityGovernanceConditionMachineSpec>;
    /**
     * Name of the security governance condition
     */
    name?: pulumi.Input<string>;
    /**
     * The organization ID of the security governance condition
     */
    orgId: pulumi.Input<string>;
    /**
     * The project ID of the security governance condition
     */
    projectId: pulumi.Input<string>;
    /**
     * Tags for the security governance condition
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
