// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Data source for retrieving a Harness Chaos Security Governance Rule.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * // Data sources to verify the rules
 * const example = harness.chaos.getSecurityGovernanceRule({
 *     id: "<rule_id>",
 *     orgId: "<org_id>",
 *     projectId: "<project_id>",
 * });
 * const exampleLinux = harness.chaos.getSecurityGovernanceRule({
 *     id: "<rule_id>",
 *     orgId: "<org_id>",
 *     projectId: "<project_id>",
 * });
 * const exampleWindows = harness.chaos.getSecurityGovernanceRule({
 *     id: "<rule_id>",
 *     orgId: "<org_id>",
 *     projectId: "<project_id>",
 * });
 * ```
 */
export function getSecurityGovernanceRule(args: GetSecurityGovernanceRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetSecurityGovernanceRuleResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:chaos/getSecurityGovernanceRule:getSecurityGovernanceRule", {
        "id": args.id,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecurityGovernanceRule.
 */
export interface GetSecurityGovernanceRuleArgs {
    /**
     * The ID of the rule.
     */
    id?: string;
    /**
     * The name of the rule.
     */
    name?: string;
    /**
     * The organization identifier.
     */
    orgId: string;
    /**
     * The project identifier.
     */
    projectId: string;
}

/**
 * A collection of values returned by getSecurityGovernanceRule.
 */
export interface GetSecurityGovernanceRuleResult {
    /**
     * List of condition IDs associated with the rule.
     */
    readonly conditionIds: string[];
    /**
     * The description of the rule.
     */
    readonly description: string;
    /**
     * The ID of the rule.
     */
    readonly id?: string;
    /**
     * Whether the rule is enabled.
     */
    readonly isEnabled: boolean;
    /**
     * The name of the rule.
     */
    readonly name?: string;
    /**
     * The organization identifier.
     */
    readonly orgId: string;
    /**
     * The project identifier.
     */
    readonly projectId: string;
    /**
     * Tags associated with the rule.
     */
    readonly tags: string[];
    /**
     * Time windows when the rule is active.
     */
    readonly timeWindows: outputs.chaos.GetSecurityGovernanceRuleTimeWindow[];
    /**
     * List of user group IDs associated with the rule.
     */
    readonly userGroupIds: string[];
}
/**
 * Data source for retrieving a Harness Chaos Security Governance Rule.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * // Data sources to verify the rules
 * const example = harness.chaos.getSecurityGovernanceRule({
 *     id: "<rule_id>",
 *     orgId: "<org_id>",
 *     projectId: "<project_id>",
 * });
 * const exampleLinux = harness.chaos.getSecurityGovernanceRule({
 *     id: "<rule_id>",
 *     orgId: "<org_id>",
 *     projectId: "<project_id>",
 * });
 * const exampleWindows = harness.chaos.getSecurityGovernanceRule({
 *     id: "<rule_id>",
 *     orgId: "<org_id>",
 *     projectId: "<project_id>",
 * });
 * ```
 */
export function getSecurityGovernanceRuleOutput(args: GetSecurityGovernanceRuleOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSecurityGovernanceRuleResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:chaos/getSecurityGovernanceRule:getSecurityGovernanceRule", {
        "id": args.id,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecurityGovernanceRule.
 */
export interface GetSecurityGovernanceRuleOutputArgs {
    /**
     * The ID of the rule.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization identifier.
     */
    orgId: pulumi.Input<string>;
    /**
     * The project identifier.
     */
    projectId: pulumi.Input<string>;
}
