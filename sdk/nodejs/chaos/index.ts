// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetHubArgs, GetHubResult, GetHubOutputArgs } from "./getHub";
export const getHub: typeof import("./getHub").getHub = null as any;
export const getHubOutput: typeof import("./getHub").getHubOutput = null as any;
utilities.lazyLoad(exports, ["getHub","getHubOutput"], () => require("./getHub"));

export { GetImageRegistryArgs, GetImageRegistryResult, GetImageRegistryOutputArgs } from "./getImageRegistry";
export const getImageRegistry: typeof import("./getImageRegistry").getImageRegistry = null as any;
export const getImageRegistryOutput: typeof import("./getImageRegistry").getImageRegistryOutput = null as any;
utilities.lazyLoad(exports, ["getImageRegistry","getImageRegistryOutput"], () => require("./getImageRegistry"));

export { GetInfrastructureV2Args, GetInfrastructureV2Result, GetInfrastructureV2OutputArgs } from "./getInfrastructureV2";
export const getInfrastructureV2: typeof import("./getInfrastructureV2").getInfrastructureV2 = null as any;
export const getInfrastructureV2Output: typeof import("./getInfrastructureV2").getInfrastructureV2Output = null as any;
utilities.lazyLoad(exports, ["getInfrastructureV2","getInfrastructureV2Output"], () => require("./getInfrastructureV2"));

export { GetSecurityGovernanceConditionArgs, GetSecurityGovernanceConditionResult, GetSecurityGovernanceConditionOutputArgs } from "./getSecurityGovernanceCondition";
export const getSecurityGovernanceCondition: typeof import("./getSecurityGovernanceCondition").getSecurityGovernanceCondition = null as any;
export const getSecurityGovernanceConditionOutput: typeof import("./getSecurityGovernanceCondition").getSecurityGovernanceConditionOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGovernanceCondition","getSecurityGovernanceConditionOutput"], () => require("./getSecurityGovernanceCondition"));

export { GetSecurityGovernanceRuleArgs, GetSecurityGovernanceRuleResult, GetSecurityGovernanceRuleOutputArgs } from "./getSecurityGovernanceRule";
export const getSecurityGovernanceRule: typeof import("./getSecurityGovernanceRule").getSecurityGovernanceRule = null as any;
export const getSecurityGovernanceRuleOutput: typeof import("./getSecurityGovernanceRule").getSecurityGovernanceRuleOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGovernanceRule","getSecurityGovernanceRuleOutput"], () => require("./getSecurityGovernanceRule"));

export { HubArgs, HubState } from "./hub";
export type Hub = import("./hub").Hub;
export const Hub: typeof import("./hub").Hub = null as any;
utilities.lazyLoad(exports, ["Hub"], () => require("./hub"));

export { HubSyncArgs, HubSyncState } from "./hubSync";
export type HubSync = import("./hubSync").HubSync;
export const HubSync: typeof import("./hubSync").HubSync = null as any;
utilities.lazyLoad(exports, ["HubSync"], () => require("./hubSync"));

export { ImageRegistryArgs, ImageRegistryState } from "./imageRegistry";
export type ImageRegistry = import("./imageRegistry").ImageRegistry;
export const ImageRegistry: typeof import("./imageRegistry").ImageRegistry = null as any;
utilities.lazyLoad(exports, ["ImageRegistry"], () => require("./imageRegistry"));

export { InfrastructureV2Args, InfrastructureV2State } from "./infrastructureV2";
export type InfrastructureV2 = import("./infrastructureV2").InfrastructureV2;
export const InfrastructureV2: typeof import("./infrastructureV2").InfrastructureV2 = null as any;
utilities.lazyLoad(exports, ["InfrastructureV2"], () => require("./infrastructureV2"));

export { SecurityGovernanceConditionArgs, SecurityGovernanceConditionState } from "./securityGovernanceCondition";
export type SecurityGovernanceCondition = import("./securityGovernanceCondition").SecurityGovernanceCondition;
export const SecurityGovernanceCondition: typeof import("./securityGovernanceCondition").SecurityGovernanceCondition = null as any;
utilities.lazyLoad(exports, ["SecurityGovernanceCondition"], () => require("./securityGovernanceCondition"));

export { SecurityGovernanceRuleArgs, SecurityGovernanceRuleState } from "./securityGovernanceRule";
export type SecurityGovernanceRule = import("./securityGovernanceRule").SecurityGovernanceRule;
export const SecurityGovernanceRule: typeof import("./securityGovernanceRule").SecurityGovernanceRule = null as any;
utilities.lazyLoad(exports, ["SecurityGovernanceRule"], () => require("./securityGovernanceRule"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "harness:chaos/hub:Hub":
                return new Hub(name, <any>undefined, { urn })
            case "harness:chaos/hubSync:HubSync":
                return new HubSync(name, <any>undefined, { urn })
            case "harness:chaos/imageRegistry:ImageRegistry":
                return new ImageRegistry(name, <any>undefined, { urn })
            case "harness:chaos/infrastructureV2:InfrastructureV2":
                return new InfrastructureV2(name, <any>undefined, { urn })
            case "harness:chaos/securityGovernanceCondition:SecurityGovernanceCondition":
                return new SecurityGovernanceCondition(name, <any>undefined, { urn })
            case "harness:chaos/securityGovernanceRule:SecurityGovernanceRule":
                return new SecurityGovernanceRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("harness", "chaos/hub", _module)
pulumi.runtime.registerResourceModule("harness", "chaos/hubSync", _module)
pulumi.runtime.registerResourceModule("harness", "chaos/imageRegistry", _module)
pulumi.runtime.registerResourceModule("harness", "chaos/infrastructureV2", _module)
pulumi.runtime.registerResourceModule("harness", "chaos/securityGovernanceCondition", _module)
pulumi.runtime.registerResourceModule("harness", "chaos/securityGovernanceRule", _module)
