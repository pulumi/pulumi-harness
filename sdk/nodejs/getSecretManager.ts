// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Data source for retrieving a Harness secret manager
 */
export function getSecretManager(args?: GetSecretManagerArgs, opts?: pulumi.InvokeOptions): Promise<GetSecretManagerResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:index/getSecretManager:getSecretManager", {
        "default": args.default,
        "id": args.id,
        "name": args.name,
        "usageScopes": args.usageScopes,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecretManager.
 */
export interface GetSecretManagerArgs {
    /**
     * True to lookup the id of the default secret manager
     */
    default?: boolean;
    /**
     * Unique identifier of the secret manager
     */
    id?: string;
    /**
     * The name of the secret manager
     */
    name?: string;
    /**
     * This block is used for scoping the resource to a specific set of applications or environments.
     */
    usageScopes?: inputs.GetSecretManagerUsageScope[];
}

/**
 * A collection of values returned by getSecretManager.
 */
export interface GetSecretManagerResult {
    /**
     * True to lookup the id of the default secret manager
     */
    readonly default?: boolean;
    /**
     * Unique identifier of the secret manager
     */
    readonly id?: string;
    /**
     * The name of the secret manager
     */
    readonly name?: string;
    /**
     * This block is used for scoping the resource to a specific set of applications or environments.
     */
    readonly usageScopes?: outputs.GetSecretManagerUsageScope[];
}
/**
 * Data source for retrieving a Harness secret manager
 */
export function getSecretManagerOutput(args?: GetSecretManagerOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSecretManagerResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("harness:index/getSecretManager:getSecretManager", {
        "default": args.default,
        "id": args.id,
        "name": args.name,
        "usageScopes": args.usageScopes,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecretManager.
 */
export interface GetSecretManagerOutputArgs {
    /**
     * True to lookup the id of the default secret manager
     */
    default?: pulumi.Input<boolean>;
    /**
     * Unique identifier of the secret manager
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the secret manager
     */
    name?: pulumi.Input<string>;
    /**
     * This block is used for scoping the resource to a specific set of applications or environments.
     */
    usageScopes?: pulumi.Input<pulumi.Input<inputs.GetSecretManagerUsageScopeArgs>[]>;
}
