// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autostopping

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating an AWS Autostopping proxy
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/autostopping"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := autostopping.NewAwsProxy(ctx, "test", &autostopping.AwsProxyArgs{
//				Name:             pulumi.String("name"),
//				CloudConnectorId: pulumi.String("cloud_connector_id"),
//				HostName:         pulumi.String("host_name"),
//				Region:           pulumi.String("region"),
//				Vpc:              pulumi.String("vpc"),
//				SecurityGroups: pulumi.StringArray{
//					pulumi.String("sg1"),
//					pulumi.String("sg2"),
//				},
//				Route53HostedZoneId:           pulumi.String("/hostedzone/zone_id"),
//				MachineType:                   pulumi.String("t2.medium"),
//				ApiKey:                        pulumi.String(""),
//				AllocateStaticIp:              pulumi.Bool(true),
//				DeleteCloudResourcesOnDestroy: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AwsProxy struct {
	pulumi.CustomResourceState

	// Boolean value to indicate if proxy vm needs to have static IP
	AllocateStaticIp pulumi.BoolPtrOutput `pulumi:"allocateStaticIp"`
	// Harness NG API key
	ApiKey       pulumi.StringOutput           `pulumi:"apiKey"`
	Certificates AwsProxyCertificatesPtrOutput `pulumi:"certificates"`
	// Id of the cloud connector
	CloudConnectorId              pulumi.StringOutput `pulumi:"cloudConnectorId"`
	DeleteCloudResourcesOnDestroy pulumi.BoolOutput   `pulumi:"deleteCloudResourcesOnDestroy"`
	// Hostname for the proxy
	HostName pulumi.StringOutput `pulumi:"hostName"`
	// Unique identifier of the resource
	Identifier pulumi.StringOutput    `pulumi:"identifier"`
	Keypair    pulumi.StringPtrOutput `pulumi:"keypair"`
	// Machine instance type
	MachineType pulumi.StringOutput `pulumi:"machineType"`
	// Name of the proxy
	Name pulumi.StringOutput `pulumi:"name"`
	// Region in which cloud resources are hosted
	Region pulumi.StringOutput `pulumi:"region"`
	// Route 53 hosted zone id
	Route53HostedZoneId pulumi.StringPtrOutput `pulumi:"route53HostedZoneId"`
	// Security Group to define the security rules that determine the inbound and outbound traffic
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// VPC in which cloud resources are hosted
	Vpc pulumi.StringOutput `pulumi:"vpc"`
}

// NewAwsProxy registers a new resource with the given unique name, arguments, and options.
func NewAwsProxy(ctx *pulumi.Context,
	name string, args *AwsProxyArgs, opts ...pulumi.ResourceOption) (*AwsProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiKey == nil {
		return nil, errors.New("invalid value for required argument 'ApiKey'")
	}
	if args.CloudConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'CloudConnectorId'")
	}
	if args.DeleteCloudResourcesOnDestroy == nil {
		return nil, errors.New("invalid value for required argument 'DeleteCloudResourcesOnDestroy'")
	}
	if args.HostName == nil {
		return nil, errors.New("invalid value for required argument 'HostName'")
	}
	if args.MachineType == nil {
		return nil, errors.New("invalid value for required argument 'MachineType'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.Vpc == nil {
		return nil, errors.New("invalid value for required argument 'Vpc'")
	}
	if args.ApiKey != nil {
		args.ApiKey = pulumi.ToSecret(args.ApiKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsProxy
	err := ctx.RegisterResource("harness:autostopping/awsProxy:AwsProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsProxy gets an existing AwsProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsProxyState, opts ...pulumi.ResourceOption) (*AwsProxy, error) {
	var resource AwsProxy
	err := ctx.ReadResource("harness:autostopping/awsProxy:AwsProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsProxy resources.
type awsProxyState struct {
	// Boolean value to indicate if proxy vm needs to have static IP
	AllocateStaticIp *bool `pulumi:"allocateStaticIp"`
	// Harness NG API key
	ApiKey       *string               `pulumi:"apiKey"`
	Certificates *AwsProxyCertificates `pulumi:"certificates"`
	// Id of the cloud connector
	CloudConnectorId              *string `pulumi:"cloudConnectorId"`
	DeleteCloudResourcesOnDestroy *bool   `pulumi:"deleteCloudResourcesOnDestroy"`
	// Hostname for the proxy
	HostName *string `pulumi:"hostName"`
	// Unique identifier of the resource
	Identifier *string `pulumi:"identifier"`
	Keypair    *string `pulumi:"keypair"`
	// Machine instance type
	MachineType *string `pulumi:"machineType"`
	// Name of the proxy
	Name *string `pulumi:"name"`
	// Region in which cloud resources are hosted
	Region *string `pulumi:"region"`
	// Route 53 hosted zone id
	Route53HostedZoneId *string `pulumi:"route53HostedZoneId"`
	// Security Group to define the security rules that determine the inbound and outbound traffic
	SecurityGroups []string `pulumi:"securityGroups"`
	// VPC in which cloud resources are hosted
	Vpc *string `pulumi:"vpc"`
}

type AwsProxyState struct {
	// Boolean value to indicate if proxy vm needs to have static IP
	AllocateStaticIp pulumi.BoolPtrInput
	// Harness NG API key
	ApiKey       pulumi.StringPtrInput
	Certificates AwsProxyCertificatesPtrInput
	// Id of the cloud connector
	CloudConnectorId              pulumi.StringPtrInput
	DeleteCloudResourcesOnDestroy pulumi.BoolPtrInput
	// Hostname for the proxy
	HostName pulumi.StringPtrInput
	// Unique identifier of the resource
	Identifier pulumi.StringPtrInput
	Keypair    pulumi.StringPtrInput
	// Machine instance type
	MachineType pulumi.StringPtrInput
	// Name of the proxy
	Name pulumi.StringPtrInput
	// Region in which cloud resources are hosted
	Region pulumi.StringPtrInput
	// Route 53 hosted zone id
	Route53HostedZoneId pulumi.StringPtrInput
	// Security Group to define the security rules that determine the inbound and outbound traffic
	SecurityGroups pulumi.StringArrayInput
	// VPC in which cloud resources are hosted
	Vpc pulumi.StringPtrInput
}

func (AwsProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsProxyState)(nil)).Elem()
}

type awsProxyArgs struct {
	// Boolean value to indicate if proxy vm needs to have static IP
	AllocateStaticIp *bool `pulumi:"allocateStaticIp"`
	// Harness NG API key
	ApiKey       string                `pulumi:"apiKey"`
	Certificates *AwsProxyCertificates `pulumi:"certificates"`
	// Id of the cloud connector
	CloudConnectorId              string `pulumi:"cloudConnectorId"`
	DeleteCloudResourcesOnDestroy bool   `pulumi:"deleteCloudResourcesOnDestroy"`
	// Hostname for the proxy
	HostName string  `pulumi:"hostName"`
	Keypair  *string `pulumi:"keypair"`
	// Machine instance type
	MachineType string `pulumi:"machineType"`
	// Name of the proxy
	Name *string `pulumi:"name"`
	// Region in which cloud resources are hosted
	Region string `pulumi:"region"`
	// Route 53 hosted zone id
	Route53HostedZoneId *string `pulumi:"route53HostedZoneId"`
	// Security Group to define the security rules that determine the inbound and outbound traffic
	SecurityGroups []string `pulumi:"securityGroups"`
	// VPC in which cloud resources are hosted
	Vpc string `pulumi:"vpc"`
}

// The set of arguments for constructing a AwsProxy resource.
type AwsProxyArgs struct {
	// Boolean value to indicate if proxy vm needs to have static IP
	AllocateStaticIp pulumi.BoolPtrInput
	// Harness NG API key
	ApiKey       pulumi.StringInput
	Certificates AwsProxyCertificatesPtrInput
	// Id of the cloud connector
	CloudConnectorId              pulumi.StringInput
	DeleteCloudResourcesOnDestroy pulumi.BoolInput
	// Hostname for the proxy
	HostName pulumi.StringInput
	Keypair  pulumi.StringPtrInput
	// Machine instance type
	MachineType pulumi.StringInput
	// Name of the proxy
	Name pulumi.StringPtrInput
	// Region in which cloud resources are hosted
	Region pulumi.StringInput
	// Route 53 hosted zone id
	Route53HostedZoneId pulumi.StringPtrInput
	// Security Group to define the security rules that determine the inbound and outbound traffic
	SecurityGroups pulumi.StringArrayInput
	// VPC in which cloud resources are hosted
	Vpc pulumi.StringInput
}

func (AwsProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsProxyArgs)(nil)).Elem()
}

type AwsProxyInput interface {
	pulumi.Input

	ToAwsProxyOutput() AwsProxyOutput
	ToAwsProxyOutputWithContext(ctx context.Context) AwsProxyOutput
}

func (*AwsProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsProxy)(nil)).Elem()
}

func (i *AwsProxy) ToAwsProxyOutput() AwsProxyOutput {
	return i.ToAwsProxyOutputWithContext(context.Background())
}

func (i *AwsProxy) ToAwsProxyOutputWithContext(ctx context.Context) AwsProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsProxyOutput)
}

// AwsProxyArrayInput is an input type that accepts AwsProxyArray and AwsProxyArrayOutput values.
// You can construct a concrete instance of `AwsProxyArrayInput` via:
//
//	AwsProxyArray{ AwsProxyArgs{...} }
type AwsProxyArrayInput interface {
	pulumi.Input

	ToAwsProxyArrayOutput() AwsProxyArrayOutput
	ToAwsProxyArrayOutputWithContext(context.Context) AwsProxyArrayOutput
}

type AwsProxyArray []AwsProxyInput

func (AwsProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsProxy)(nil)).Elem()
}

func (i AwsProxyArray) ToAwsProxyArrayOutput() AwsProxyArrayOutput {
	return i.ToAwsProxyArrayOutputWithContext(context.Background())
}

func (i AwsProxyArray) ToAwsProxyArrayOutputWithContext(ctx context.Context) AwsProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsProxyArrayOutput)
}

// AwsProxyMapInput is an input type that accepts AwsProxyMap and AwsProxyMapOutput values.
// You can construct a concrete instance of `AwsProxyMapInput` via:
//
//	AwsProxyMap{ "key": AwsProxyArgs{...} }
type AwsProxyMapInput interface {
	pulumi.Input

	ToAwsProxyMapOutput() AwsProxyMapOutput
	ToAwsProxyMapOutputWithContext(context.Context) AwsProxyMapOutput
}

type AwsProxyMap map[string]AwsProxyInput

func (AwsProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsProxy)(nil)).Elem()
}

func (i AwsProxyMap) ToAwsProxyMapOutput() AwsProxyMapOutput {
	return i.ToAwsProxyMapOutputWithContext(context.Background())
}

func (i AwsProxyMap) ToAwsProxyMapOutputWithContext(ctx context.Context) AwsProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsProxyMapOutput)
}

type AwsProxyOutput struct{ *pulumi.OutputState }

func (AwsProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsProxy)(nil)).Elem()
}

func (o AwsProxyOutput) ToAwsProxyOutput() AwsProxyOutput {
	return o
}

func (o AwsProxyOutput) ToAwsProxyOutputWithContext(ctx context.Context) AwsProxyOutput {
	return o
}

// Boolean value to indicate if proxy vm needs to have static IP
func (o AwsProxyOutput) AllocateStaticIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AwsProxy) pulumi.BoolPtrOutput { return v.AllocateStaticIp }).(pulumi.BoolPtrOutput)
}

// Harness NG API key
func (o AwsProxyOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsProxy) pulumi.StringOutput { return v.ApiKey }).(pulumi.StringOutput)
}

func (o AwsProxyOutput) Certificates() AwsProxyCertificatesPtrOutput {
	return o.ApplyT(func(v *AwsProxy) AwsProxyCertificatesPtrOutput { return v.Certificates }).(AwsProxyCertificatesPtrOutput)
}

// Id of the cloud connector
func (o AwsProxyOutput) CloudConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsProxy) pulumi.StringOutput { return v.CloudConnectorId }).(pulumi.StringOutput)
}

func (o AwsProxyOutput) DeleteCloudResourcesOnDestroy() pulumi.BoolOutput {
	return o.ApplyT(func(v *AwsProxy) pulumi.BoolOutput { return v.DeleteCloudResourcesOnDestroy }).(pulumi.BoolOutput)
}

// Hostname for the proxy
func (o AwsProxyOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsProxy) pulumi.StringOutput { return v.HostName }).(pulumi.StringOutput)
}

// Unique identifier of the resource
func (o AwsProxyOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsProxy) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

func (o AwsProxyOutput) Keypair() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsProxy) pulumi.StringPtrOutput { return v.Keypair }).(pulumi.StringPtrOutput)
}

// Machine instance type
func (o AwsProxyOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsProxy) pulumi.StringOutput { return v.MachineType }).(pulumi.StringOutput)
}

// Name of the proxy
func (o AwsProxyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsProxy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Region in which cloud resources are hosted
func (o AwsProxyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsProxy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Route 53 hosted zone id
func (o AwsProxyOutput) Route53HostedZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsProxy) pulumi.StringPtrOutput { return v.Route53HostedZoneId }).(pulumi.StringPtrOutput)
}

// Security Group to define the security rules that determine the inbound and outbound traffic
func (o AwsProxyOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AwsProxy) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// VPC in which cloud resources are hosted
func (o AwsProxyOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsProxy) pulumi.StringOutput { return v.Vpc }).(pulumi.StringOutput)
}

type AwsProxyArrayOutput struct{ *pulumi.OutputState }

func (AwsProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsProxy)(nil)).Elem()
}

func (o AwsProxyArrayOutput) ToAwsProxyArrayOutput() AwsProxyArrayOutput {
	return o
}

func (o AwsProxyArrayOutput) ToAwsProxyArrayOutputWithContext(ctx context.Context) AwsProxyArrayOutput {
	return o
}

func (o AwsProxyArrayOutput) Index(i pulumi.IntInput) AwsProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsProxy {
		return vs[0].([]*AwsProxy)[vs[1].(int)]
	}).(AwsProxyOutput)
}

type AwsProxyMapOutput struct{ *pulumi.OutputState }

func (AwsProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsProxy)(nil)).Elem()
}

func (o AwsProxyMapOutput) ToAwsProxyMapOutput() AwsProxyMapOutput {
	return o
}

func (o AwsProxyMapOutput) ToAwsProxyMapOutputWithContext(ctx context.Context) AwsProxyMapOutput {
	return o
}

func (o AwsProxyMapOutput) MapIndex(k pulumi.StringInput) AwsProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsProxy {
		return vs[0].(map[string]*AwsProxy)[vs[1].(string)]
	}).(AwsProxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsProxyInput)(nil)).Elem(), &AwsProxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsProxyArrayInput)(nil)).Elem(), AwsProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsProxyMapInput)(nil)).Elem(), AwsProxyMap{})
	pulumi.RegisterOutputType(AwsProxyOutput{})
	pulumi.RegisterOutputType(AwsProxyArrayOutput{})
	pulumi.RegisterOutputType(AwsProxyMapOutput{})
}
