// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autostopping

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "harness:autostopping/awsAlb:AwsAlb":
		r = &AwsAlb{}
	case "harness:autostopping/awsProxy:AwsProxy":
		r = &AwsProxy{}
	case "harness:autostopping/azureGateway:AzureGateway":
		r = &AzureGateway{}
	case "harness:autostopping/azureProxy:AzureProxy":
		r = &AzureProxy{}
	case "harness:autostopping/gcpProxy:GcpProxy":
		r = &GcpProxy{}
	case "harness:autostopping/ruleEcs:RuleEcs":
		r = &RuleEcs{}
	case "harness:autostopping/ruleRds:RuleRds":
		r = &RuleRds{}
	case "harness:autostopping/ruleVm:RuleVm":
		r = &RuleVm{}
	case "harness:autostopping/schedule:Schedule":
		r = &Schedule{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"harness",
		"autostopping/awsAlb",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"autostopping/awsProxy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"autostopping/azureGateway",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"autostopping/azureProxy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"autostopping/gcpProxy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"autostopping/ruleEcs",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"autostopping/ruleRds",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"autostopping/ruleVm",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"autostopping/schedule",
		&module{version},
	)
}
