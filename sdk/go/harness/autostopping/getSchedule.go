// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autostopping

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a fixed schedule for Harness AutoStopping rule
func LookupSchedule(ctx *pulumi.Context, args *LookupScheduleArgs, opts ...pulumi.InvokeOption) (*LookupScheduleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupScheduleResult
	err := ctx.Invoke("harness:autostopping/getSchedule:getSchedule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSchedule.
type LookupScheduleArgs struct {
	// Type of the schedule. Valid values are `uptime` and `downtime`
	ScheduleType string `pulumi:"scheduleType"`
}

// A collection of values returned by getSchedule.
type LookupScheduleResult struct {
	// Time until which schedule will be active. Need to be in YYYY-MM-DD HH:mm:SS format. Eg 2006-01-02 15:04:05
	EndingOn string `pulumi:"endingOn"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the schedule
	Identifier float64 `pulumi:"identifier"`
	// Name of the schedule
	Name string `pulumi:"name"`
	// For defining periodic schedule. Periodic nature will be applicable from the time of creation of schedule, unless specific 'time_period' is specified
	Repeats []GetScheduleRepeat `pulumi:"repeats"`
	// ID of AutoStopping rules on which the schedule applies
	Rules []float64 `pulumi:"rules"`
	// Type of the schedule. Valid values are `uptime` and `downtime`
	ScheduleType string `pulumi:"scheduleType"`
	// Time from which schedule will be active. Schedule will take immediate effect if startingFrom is not specified. Need to be in YYYY-MM-DD HH:mm:SS format. Eg 2006-01-02 15:04:05
	StartingFrom string `pulumi:"startingFrom"`
	// Time zone in which schedule needs to be executed
	TimeZone string `pulumi:"timeZone"`
}

func LookupScheduleOutput(ctx *pulumi.Context, args LookupScheduleOutputArgs, opts ...pulumi.InvokeOption) LookupScheduleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupScheduleResultOutput, error) {
			args := v.(LookupScheduleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:autostopping/getSchedule:getSchedule", args, LookupScheduleResultOutput{}, options).(LookupScheduleResultOutput), nil
		}).(LookupScheduleResultOutput)
}

// A collection of arguments for invoking getSchedule.
type LookupScheduleOutputArgs struct {
	// Type of the schedule. Valid values are `uptime` and `downtime`
	ScheduleType pulumi.StringInput `pulumi:"scheduleType"`
}

func (LookupScheduleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScheduleArgs)(nil)).Elem()
}

// A collection of values returned by getSchedule.
type LookupScheduleResultOutput struct{ *pulumi.OutputState }

func (LookupScheduleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScheduleResult)(nil)).Elem()
}

func (o LookupScheduleResultOutput) ToLookupScheduleResultOutput() LookupScheduleResultOutput {
	return o
}

func (o LookupScheduleResultOutput) ToLookupScheduleResultOutputWithContext(ctx context.Context) LookupScheduleResultOutput {
	return o
}

// Time until which schedule will be active. Need to be in YYYY-MM-DD HH:mm:SS format. Eg 2006-01-02 15:04:05
func (o LookupScheduleResultOutput) EndingOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.EndingOn }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupScheduleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the schedule
func (o LookupScheduleResultOutput) Identifier() pulumi.Float64Output {
	return o.ApplyT(func(v LookupScheduleResult) float64 { return v.Identifier }).(pulumi.Float64Output)
}

// Name of the schedule
func (o LookupScheduleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.Name }).(pulumi.StringOutput)
}

// For defining periodic schedule. Periodic nature will be applicable from the time of creation of schedule, unless specific 'time_period' is specified
func (o LookupScheduleResultOutput) Repeats() GetScheduleRepeatArrayOutput {
	return o.ApplyT(func(v LookupScheduleResult) []GetScheduleRepeat { return v.Repeats }).(GetScheduleRepeatArrayOutput)
}

// ID of AutoStopping rules on which the schedule applies
func (o LookupScheduleResultOutput) Rules() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v LookupScheduleResult) []float64 { return v.Rules }).(pulumi.Float64ArrayOutput)
}

// Type of the schedule. Valid values are `uptime` and `downtime`
func (o LookupScheduleResultOutput) ScheduleType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.ScheduleType }).(pulumi.StringOutput)
}

// Time from which schedule will be active. Schedule will take immediate effect if startingFrom is not specified. Need to be in YYYY-MM-DD HH:mm:SS format. Eg 2006-01-02 15:04:05
func (o LookupScheduleResultOutput) StartingFrom() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.StartingFrom }).(pulumi.StringOutput)
}

// Time zone in which schedule needs to be executed
func (o LookupScheduleResultOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.TimeZone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupScheduleResultOutput{})
}
