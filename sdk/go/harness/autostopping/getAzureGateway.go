// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autostopping

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for AWS Autostopping proxy
func LookupAzureGateway(ctx *pulumi.Context, args *LookupAzureGatewayArgs, opts ...pulumi.InvokeOption) (*LookupAzureGatewayResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAzureGatewayResult
	err := ctx.Invoke("harness:autostopping/getAzureGateway:getAzureGateway", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAzureGateway.
type LookupAzureGatewayArgs struct {
	// ID of Azure AppGateway for importing
	AppGatewayId *string `pulumi:"appGatewayId"`
	// Region in which azure cloud function will be provisioned
	AzureFuncRegion string `pulumi:"azureFuncRegion"`
	// ID of existing SSL certificate from AppGateway being imported. Required only for SSL based rules
	CertificateId *string `pulumi:"certificateId"`
	// Id of the cloud connector
	CloudConnectorId              string `pulumi:"cloudConnectorId"`
	DeleteCloudResourcesOnDestroy bool   `pulumi:"deleteCloudResourcesOnDestroy"`
	// ID of IP address to be used. Required only for creating new AppGateway. See https://learn.microsoft.com/en-us/azure/application-gateway/application-gateway-components#static-versus-dynamic-public-ip-address for more details
	FrontendIp *string `pulumi:"frontendIp"`
	// Hostname for the proxy
	HostName string `pulumi:"hostName"`
	// Name of the proxy
	Name string `pulumi:"name"`
	// Region in which cloud resources are hosted
	Region string `pulumi:"region"`
	// Resource group in which cloud resources are hosted
	ResourceGroup string `pulumi:"resourceGroup"`
	// Size of machine used for the gateway
	SkuSize *string `pulumi:"skuSize"`
	// Subnet in which cloud resources are hosted
	SubnetId *string `pulumi:"subnetId"`
	// VPC in which cloud resources are hosted
	Vpc string `pulumi:"vpc"`
}

// A collection of values returned by getAzureGateway.
type LookupAzureGatewayResult struct {
	// ID of Azure AppGateway for importing
	AppGatewayId *string `pulumi:"appGatewayId"`
	// Region in which azure cloud function will be provisioned
	AzureFuncRegion string `pulumi:"azureFuncRegion"`
	// ID of existing SSL certificate from AppGateway being imported. Required only for SSL based rules
	CertificateId *string `pulumi:"certificateId"`
	// Id of the cloud connector
	CloudConnectorId              string `pulumi:"cloudConnectorId"`
	DeleteCloudResourcesOnDestroy bool   `pulumi:"deleteCloudResourcesOnDestroy"`
	// ID of IP address to be used. Required only for creating new AppGateway. See https://learn.microsoft.com/en-us/azure/application-gateway/application-gateway-components#static-versus-dynamic-public-ip-address for more details
	FrontendIp *string `pulumi:"frontendIp"`
	// Hostname for the proxy
	HostName string `pulumi:"hostName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource
	Identifier string `pulumi:"identifier"`
	// Name of the proxy
	Name string `pulumi:"name"`
	// Region in which cloud resources are hosted
	Region string `pulumi:"region"`
	// Resource group in which cloud resources are hosted
	ResourceGroup string `pulumi:"resourceGroup"`
	// Size of machine used for the gateway
	SkuSize *string `pulumi:"skuSize"`
	// Subnet in which cloud resources are hosted
	SubnetId *string `pulumi:"subnetId"`
	// VPC in which cloud resources are hosted
	Vpc string `pulumi:"vpc"`
}

func LookupAzureGatewayOutput(ctx *pulumi.Context, args LookupAzureGatewayOutputArgs, opts ...pulumi.InvokeOption) LookupAzureGatewayResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAzureGatewayResultOutput, error) {
			args := v.(LookupAzureGatewayArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:autostopping/getAzureGateway:getAzureGateway", args, LookupAzureGatewayResultOutput{}, options).(LookupAzureGatewayResultOutput), nil
		}).(LookupAzureGatewayResultOutput)
}

// A collection of arguments for invoking getAzureGateway.
type LookupAzureGatewayOutputArgs struct {
	// ID of Azure AppGateway for importing
	AppGatewayId pulumi.StringPtrInput `pulumi:"appGatewayId"`
	// Region in which azure cloud function will be provisioned
	AzureFuncRegion pulumi.StringInput `pulumi:"azureFuncRegion"`
	// ID of existing SSL certificate from AppGateway being imported. Required only for SSL based rules
	CertificateId pulumi.StringPtrInput `pulumi:"certificateId"`
	// Id of the cloud connector
	CloudConnectorId              pulumi.StringInput `pulumi:"cloudConnectorId"`
	DeleteCloudResourcesOnDestroy pulumi.BoolInput   `pulumi:"deleteCloudResourcesOnDestroy"`
	// ID of IP address to be used. Required only for creating new AppGateway. See https://learn.microsoft.com/en-us/azure/application-gateway/application-gateway-components#static-versus-dynamic-public-ip-address for more details
	FrontendIp pulumi.StringPtrInput `pulumi:"frontendIp"`
	// Hostname for the proxy
	HostName pulumi.StringInput `pulumi:"hostName"`
	// Name of the proxy
	Name pulumi.StringInput `pulumi:"name"`
	// Region in which cloud resources are hosted
	Region pulumi.StringInput `pulumi:"region"`
	// Resource group in which cloud resources are hosted
	ResourceGroup pulumi.StringInput `pulumi:"resourceGroup"`
	// Size of machine used for the gateway
	SkuSize pulumi.StringPtrInput `pulumi:"skuSize"`
	// Subnet in which cloud resources are hosted
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// VPC in which cloud resources are hosted
	Vpc pulumi.StringInput `pulumi:"vpc"`
}

func (LookupAzureGatewayOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAzureGatewayArgs)(nil)).Elem()
}

// A collection of values returned by getAzureGateway.
type LookupAzureGatewayResultOutput struct{ *pulumi.OutputState }

func (LookupAzureGatewayResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAzureGatewayResult)(nil)).Elem()
}

func (o LookupAzureGatewayResultOutput) ToLookupAzureGatewayResultOutput() LookupAzureGatewayResultOutput {
	return o
}

func (o LookupAzureGatewayResultOutput) ToLookupAzureGatewayResultOutputWithContext(ctx context.Context) LookupAzureGatewayResultOutput {
	return o
}

// ID of Azure AppGateway for importing
func (o LookupAzureGatewayResultOutput) AppGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAzureGatewayResult) *string { return v.AppGatewayId }).(pulumi.StringPtrOutput)
}

// Region in which azure cloud function will be provisioned
func (o LookupAzureGatewayResultOutput) AzureFuncRegion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureGatewayResult) string { return v.AzureFuncRegion }).(pulumi.StringOutput)
}

// ID of existing SSL certificate from AppGateway being imported. Required only for SSL based rules
func (o LookupAzureGatewayResultOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAzureGatewayResult) *string { return v.CertificateId }).(pulumi.StringPtrOutput)
}

// Id of the cloud connector
func (o LookupAzureGatewayResultOutput) CloudConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureGatewayResult) string { return v.CloudConnectorId }).(pulumi.StringOutput)
}

func (o LookupAzureGatewayResultOutput) DeleteCloudResourcesOnDestroy() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAzureGatewayResult) bool { return v.DeleteCloudResourcesOnDestroy }).(pulumi.BoolOutput)
}

// ID of IP address to be used. Required only for creating new AppGateway. See https://learn.microsoft.com/en-us/azure/application-gateway/application-gateway-components#static-versus-dynamic-public-ip-address for more details
func (o LookupAzureGatewayResultOutput) FrontendIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAzureGatewayResult) *string { return v.FrontendIp }).(pulumi.StringPtrOutput)
}

// Hostname for the proxy
func (o LookupAzureGatewayResultOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureGatewayResult) string { return v.HostName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAzureGatewayResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureGatewayResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource
func (o LookupAzureGatewayResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureGatewayResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the proxy
func (o LookupAzureGatewayResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureGatewayResult) string { return v.Name }).(pulumi.StringOutput)
}

// Region in which cloud resources are hosted
func (o LookupAzureGatewayResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureGatewayResult) string { return v.Region }).(pulumi.StringOutput)
}

// Resource group in which cloud resources are hosted
func (o LookupAzureGatewayResultOutput) ResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureGatewayResult) string { return v.ResourceGroup }).(pulumi.StringOutput)
}

// Size of machine used for the gateway
func (o LookupAzureGatewayResultOutput) SkuSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAzureGatewayResult) *string { return v.SkuSize }).(pulumi.StringPtrOutput)
}

// Subnet in which cloud resources are hosted
func (o LookupAzureGatewayResultOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAzureGatewayResult) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// VPC in which cloud resources are hosted
func (o LookupAzureGatewayResultOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureGatewayResult) string { return v.Vpc }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAzureGatewayResultOutput{})
}
