// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autostopping

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Harness Variables.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/autostopping"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := autostopping.NewRuleRds(ctx, "test", &autostopping.RuleRdsArgs{
//				Name:             pulumi.String("name"),
//				CloudConnectorId: pulumi.String("cloud_connector_id"),
//				IdleTimeMins:     pulumi.Int(10),
//				DryRun:           pulumi.Bool(true),
//				Database: &autostopping.RuleRdsDatabaseArgs{
//					Id:     pulumi.String("database_id"),
//					Region: pulumi.String("region"),
//				},
//				Tcps: autostopping.RuleRdsTcpArray{
//					&autostopping.RuleRdsTcpArgs{
//						ProxyId: pulumi.String("proxy_id"),
//						ForwardRules: autostopping.RuleRdsTcpForwardRuleArray{
//							&autostopping.RuleRdsTcpForwardRuleArgs{
//								Port: pulumi.Int(2233),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RuleRds struct {
	pulumi.CustomResourceState

	// Id of the cloud connector
	CloudConnectorId pulumi.StringOutput   `pulumi:"cloudConnectorId"`
	Database         RuleRdsDatabaseOutput `pulumi:"database"`
	// Dependent rules
	Depends RuleRdsDependArrayOutput `pulumi:"depends"`
	// Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
	DryRun pulumi.BoolPtrOutput `pulumi:"dryRun"`
	// Unique identifier of the resource
	Identifier pulumi.Float64Output `pulumi:"identifier"`
	// Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
	IdleTimeMins pulumi.IntPtrOutput `pulumi:"idleTimeMins"`
	// Name of the rule
	Name pulumi.StringOutput `pulumi:"name"`
	// TCP routing configuration
	Tcps RuleRdsTcpArrayOutput `pulumi:"tcps"`
}

// NewRuleRds registers a new resource with the given unique name, arguments, and options.
func NewRuleRds(ctx *pulumi.Context,
	name string, args *RuleRdsArgs, opts ...pulumi.ResourceOption) (*RuleRds, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'CloudConnectorId'")
	}
	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RuleRds
	err := ctx.RegisterResource("harness:autostopping/ruleRds:RuleRds", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleRds gets an existing RuleRds resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleRds(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleRdsState, opts ...pulumi.ResourceOption) (*RuleRds, error) {
	var resource RuleRds
	err := ctx.ReadResource("harness:autostopping/ruleRds:RuleRds", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleRds resources.
type ruleRdsState struct {
	// Id of the cloud connector
	CloudConnectorId *string          `pulumi:"cloudConnectorId"`
	Database         *RuleRdsDatabase `pulumi:"database"`
	// Dependent rules
	Depends []RuleRdsDepend `pulumi:"depends"`
	// Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
	DryRun *bool `pulumi:"dryRun"`
	// Unique identifier of the resource
	Identifier *float64 `pulumi:"identifier"`
	// Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
	IdleTimeMins *int `pulumi:"idleTimeMins"`
	// Name of the rule
	Name *string `pulumi:"name"`
	// TCP routing configuration
	Tcps []RuleRdsTcp `pulumi:"tcps"`
}

type RuleRdsState struct {
	// Id of the cloud connector
	CloudConnectorId pulumi.StringPtrInput
	Database         RuleRdsDatabasePtrInput
	// Dependent rules
	Depends RuleRdsDependArrayInput
	// Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
	DryRun pulumi.BoolPtrInput
	// Unique identifier of the resource
	Identifier pulumi.Float64PtrInput
	// Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
	IdleTimeMins pulumi.IntPtrInput
	// Name of the rule
	Name pulumi.StringPtrInput
	// TCP routing configuration
	Tcps RuleRdsTcpArrayInput
}

func (RuleRdsState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleRdsState)(nil)).Elem()
}

type ruleRdsArgs struct {
	// Id of the cloud connector
	CloudConnectorId string          `pulumi:"cloudConnectorId"`
	Database         RuleRdsDatabase `pulumi:"database"`
	// Dependent rules
	Depends []RuleRdsDepend `pulumi:"depends"`
	// Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
	DryRun *bool `pulumi:"dryRun"`
	// Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
	IdleTimeMins *int `pulumi:"idleTimeMins"`
	// Name of the rule
	Name *string `pulumi:"name"`
	// TCP routing configuration
	Tcps []RuleRdsTcp `pulumi:"tcps"`
}

// The set of arguments for constructing a RuleRds resource.
type RuleRdsArgs struct {
	// Id of the cloud connector
	CloudConnectorId pulumi.StringInput
	Database         RuleRdsDatabaseInput
	// Dependent rules
	Depends RuleRdsDependArrayInput
	// Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
	DryRun pulumi.BoolPtrInput
	// Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
	IdleTimeMins pulumi.IntPtrInput
	// Name of the rule
	Name pulumi.StringPtrInput
	// TCP routing configuration
	Tcps RuleRdsTcpArrayInput
}

func (RuleRdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleRdsArgs)(nil)).Elem()
}

type RuleRdsInput interface {
	pulumi.Input

	ToRuleRdsOutput() RuleRdsOutput
	ToRuleRdsOutputWithContext(ctx context.Context) RuleRdsOutput
}

func (*RuleRds) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleRds)(nil)).Elem()
}

func (i *RuleRds) ToRuleRdsOutput() RuleRdsOutput {
	return i.ToRuleRdsOutputWithContext(context.Background())
}

func (i *RuleRds) ToRuleRdsOutputWithContext(ctx context.Context) RuleRdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRdsOutput)
}

// RuleRdsArrayInput is an input type that accepts RuleRdsArray and RuleRdsArrayOutput values.
// You can construct a concrete instance of `RuleRdsArrayInput` via:
//
//	RuleRdsArray{ RuleRdsArgs{...} }
type RuleRdsArrayInput interface {
	pulumi.Input

	ToRuleRdsArrayOutput() RuleRdsArrayOutput
	ToRuleRdsArrayOutputWithContext(context.Context) RuleRdsArrayOutput
}

type RuleRdsArray []RuleRdsInput

func (RuleRdsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleRds)(nil)).Elem()
}

func (i RuleRdsArray) ToRuleRdsArrayOutput() RuleRdsArrayOutput {
	return i.ToRuleRdsArrayOutputWithContext(context.Background())
}

func (i RuleRdsArray) ToRuleRdsArrayOutputWithContext(ctx context.Context) RuleRdsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRdsArrayOutput)
}

// RuleRdsMapInput is an input type that accepts RuleRdsMap and RuleRdsMapOutput values.
// You can construct a concrete instance of `RuleRdsMapInput` via:
//
//	RuleRdsMap{ "key": RuleRdsArgs{...} }
type RuleRdsMapInput interface {
	pulumi.Input

	ToRuleRdsMapOutput() RuleRdsMapOutput
	ToRuleRdsMapOutputWithContext(context.Context) RuleRdsMapOutput
}

type RuleRdsMap map[string]RuleRdsInput

func (RuleRdsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleRds)(nil)).Elem()
}

func (i RuleRdsMap) ToRuleRdsMapOutput() RuleRdsMapOutput {
	return i.ToRuleRdsMapOutputWithContext(context.Background())
}

func (i RuleRdsMap) ToRuleRdsMapOutputWithContext(ctx context.Context) RuleRdsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRdsMapOutput)
}

type RuleRdsOutput struct{ *pulumi.OutputState }

func (RuleRdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleRds)(nil)).Elem()
}

func (o RuleRdsOutput) ToRuleRdsOutput() RuleRdsOutput {
	return o
}

func (o RuleRdsOutput) ToRuleRdsOutputWithContext(ctx context.Context) RuleRdsOutput {
	return o
}

// Id of the cloud connector
func (o RuleRdsOutput) CloudConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleRds) pulumi.StringOutput { return v.CloudConnectorId }).(pulumi.StringOutput)
}

func (o RuleRdsOutput) Database() RuleRdsDatabaseOutput {
	return o.ApplyT(func(v *RuleRds) RuleRdsDatabaseOutput { return v.Database }).(RuleRdsDatabaseOutput)
}

// Dependent rules
func (o RuleRdsOutput) Depends() RuleRdsDependArrayOutput {
	return o.ApplyT(func(v *RuleRds) RuleRdsDependArrayOutput { return v.Depends }).(RuleRdsDependArrayOutput)
}

// Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
func (o RuleRdsOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuleRds) pulumi.BoolPtrOutput { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// Unique identifier of the resource
func (o RuleRdsOutput) Identifier() pulumi.Float64Output {
	return o.ApplyT(func(v *RuleRds) pulumi.Float64Output { return v.Identifier }).(pulumi.Float64Output)
}

// Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
func (o RuleRdsOutput) IdleTimeMins() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuleRds) pulumi.IntPtrOutput { return v.IdleTimeMins }).(pulumi.IntPtrOutput)
}

// Name of the rule
func (o RuleRdsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleRds) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// TCP routing configuration
func (o RuleRdsOutput) Tcps() RuleRdsTcpArrayOutput {
	return o.ApplyT(func(v *RuleRds) RuleRdsTcpArrayOutput { return v.Tcps }).(RuleRdsTcpArrayOutput)
}

type RuleRdsArrayOutput struct{ *pulumi.OutputState }

func (RuleRdsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleRds)(nil)).Elem()
}

func (o RuleRdsArrayOutput) ToRuleRdsArrayOutput() RuleRdsArrayOutput {
	return o
}

func (o RuleRdsArrayOutput) ToRuleRdsArrayOutputWithContext(ctx context.Context) RuleRdsArrayOutput {
	return o
}

func (o RuleRdsArrayOutput) Index(i pulumi.IntInput) RuleRdsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RuleRds {
		return vs[0].([]*RuleRds)[vs[1].(int)]
	}).(RuleRdsOutput)
}

type RuleRdsMapOutput struct{ *pulumi.OutputState }

func (RuleRdsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleRds)(nil)).Elem()
}

func (o RuleRdsMapOutput) ToRuleRdsMapOutput() RuleRdsMapOutput {
	return o
}

func (o RuleRdsMapOutput) ToRuleRdsMapOutputWithContext(ctx context.Context) RuleRdsMapOutput {
	return o
}

func (o RuleRdsMapOutput) MapIndex(k pulumi.StringInput) RuleRdsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RuleRds {
		return vs[0].(map[string]*RuleRds)[vs[1].(string)]
	}).(RuleRdsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRdsInput)(nil)).Elem(), &RuleRds{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRdsArrayInput)(nil)).Elem(), RuleRdsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRdsMapInput)(nil)).Elem(), RuleRdsMap{})
	pulumi.RegisterOutputType(RuleRdsOutput{})
	pulumi.RegisterOutputType(RuleRdsArrayOutput{})
	pulumi.RegisterOutputType(RuleRdsMapOutput{})
}
