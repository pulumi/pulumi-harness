// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autostopping

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating an Azure autostopping proxy
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/autostopping"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := autostopping.NewAzureProxy(ctx, "test", &autostopping.AzureProxyArgs{
//				Name:             pulumi.String("name"),
//				CloudConnectorId: pulumi.String("cloud_connector_id"),
//				HostName:         pulumi.String("host_name"),
//				Region:           pulumi.String("eastus2"),
//				ResourceGroup:    pulumi.String("resource_group"),
//				Vpc:              pulumi.String("/subscriptions/subscription_id/resourceGroups/resource_group/providers/Microsoft.Network/virtualNetworks/virtual_network"),
//				SubnetId:         pulumi.String("/subscriptions/subscription_id/resourceGroups/resource_group/providers/Microsoft.Network/virtualNetworks/virtual_network/subnets/subnet_id"),
//				SecurityGroups: pulumi.StringArray{
//					pulumi.String("/subscriptions/subscription_id/resourceGroups/resource_group/providers/Microsoft.Network/networkSecurityGroups/network_security_group"),
//				},
//				AllocateStaticIp:              pulumi.Bool(true),
//				MachineType:                   pulumi.String("Standard_D2s_v3"),
//				Keypair:                       pulumi.String(""),
//				ApiKey:                        pulumi.String(""),
//				DeleteCloudResourcesOnDestroy: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AzureProxy struct {
	pulumi.CustomResourceState

	// Boolean value to indicate if proxy vm needs to have static IP
	AllocateStaticIp pulumi.BoolPtrOutput `pulumi:"allocateStaticIp"`
	// Harness NG API key
	ApiKey        pulumi.StringOutput             `pulumi:"apiKey"`
	CertificateId pulumi.StringPtrOutput          `pulumi:"certificateId"`
	Certificates  AzureProxyCertificatesPtrOutput `pulumi:"certificates"`
	// Id of the cloud connector
	CloudConnectorId              pulumi.StringOutput `pulumi:"cloudConnectorId"`
	DeleteCloudResourcesOnDestroy pulumi.BoolOutput   `pulumi:"deleteCloudResourcesOnDestroy"`
	// Hostname for the proxy
	HostName pulumi.StringOutput `pulumi:"hostName"`
	// Unique identifier of the resource
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of SSH Key to be used for proxy VM
	Keypair pulumi.StringOutput `pulumi:"keypair"`
	// Type of instance to be used for proxy
	MachineType pulumi.StringOutput `pulumi:"machineType"`
	// Name of the proxy
	Name pulumi.StringOutput `pulumi:"name"`
	// Region in which cloud resources are hosted
	Region pulumi.StringOutput `pulumi:"region"`
	// Resource group in which cloud resources are hosted
	ResourceGroup pulumi.StringOutput `pulumi:"resourceGroup"`
	// Security Group to define the security rules that determine the inbound and outbound traffic
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// Subnet in which cloud resources are hosted
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// VPC in which cloud resources are hosted
	Vpc pulumi.StringOutput `pulumi:"vpc"`
}

// NewAzureProxy registers a new resource with the given unique name, arguments, and options.
func NewAzureProxy(ctx *pulumi.Context,
	name string, args *AzureProxyArgs, opts ...pulumi.ResourceOption) (*AzureProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiKey == nil {
		return nil, errors.New("invalid value for required argument 'ApiKey'")
	}
	if args.CloudConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'CloudConnectorId'")
	}
	if args.DeleteCloudResourcesOnDestroy == nil {
		return nil, errors.New("invalid value for required argument 'DeleteCloudResourcesOnDestroy'")
	}
	if args.HostName == nil {
		return nil, errors.New("invalid value for required argument 'HostName'")
	}
	if args.Keypair == nil {
		return nil, errors.New("invalid value for required argument 'Keypair'")
	}
	if args.MachineType == nil {
		return nil, errors.New("invalid value for required argument 'MachineType'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.ResourceGroup == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroup'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.Vpc == nil {
		return nil, errors.New("invalid value for required argument 'Vpc'")
	}
	if args.ApiKey != nil {
		args.ApiKey = pulumi.ToSecret(args.ApiKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzureProxy
	err := ctx.RegisterResource("harness:autostopping/azureProxy:AzureProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureProxy gets an existing AzureProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureProxyState, opts ...pulumi.ResourceOption) (*AzureProxy, error) {
	var resource AzureProxy
	err := ctx.ReadResource("harness:autostopping/azureProxy:AzureProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureProxy resources.
type azureProxyState struct {
	// Boolean value to indicate if proxy vm needs to have static IP
	AllocateStaticIp *bool `pulumi:"allocateStaticIp"`
	// Harness NG API key
	ApiKey        *string                 `pulumi:"apiKey"`
	CertificateId *string                 `pulumi:"certificateId"`
	Certificates  *AzureProxyCertificates `pulumi:"certificates"`
	// Id of the cloud connector
	CloudConnectorId              *string `pulumi:"cloudConnectorId"`
	DeleteCloudResourcesOnDestroy *bool   `pulumi:"deleteCloudResourcesOnDestroy"`
	// Hostname for the proxy
	HostName *string `pulumi:"hostName"`
	// Unique identifier of the resource
	Identifier *string `pulumi:"identifier"`
	// Name of SSH Key to be used for proxy VM
	Keypair *string `pulumi:"keypair"`
	// Type of instance to be used for proxy
	MachineType *string `pulumi:"machineType"`
	// Name of the proxy
	Name *string `pulumi:"name"`
	// Region in which cloud resources are hosted
	Region *string `pulumi:"region"`
	// Resource group in which cloud resources are hosted
	ResourceGroup *string `pulumi:"resourceGroup"`
	// Security Group to define the security rules that determine the inbound and outbound traffic
	SecurityGroups []string `pulumi:"securityGroups"`
	// Subnet in which cloud resources are hosted
	SubnetId *string `pulumi:"subnetId"`
	// VPC in which cloud resources are hosted
	Vpc *string `pulumi:"vpc"`
}

type AzureProxyState struct {
	// Boolean value to indicate if proxy vm needs to have static IP
	AllocateStaticIp pulumi.BoolPtrInput
	// Harness NG API key
	ApiKey        pulumi.StringPtrInput
	CertificateId pulumi.StringPtrInput
	Certificates  AzureProxyCertificatesPtrInput
	// Id of the cloud connector
	CloudConnectorId              pulumi.StringPtrInput
	DeleteCloudResourcesOnDestroy pulumi.BoolPtrInput
	// Hostname for the proxy
	HostName pulumi.StringPtrInput
	// Unique identifier of the resource
	Identifier pulumi.StringPtrInput
	// Name of SSH Key to be used for proxy VM
	Keypair pulumi.StringPtrInput
	// Type of instance to be used for proxy
	MachineType pulumi.StringPtrInput
	// Name of the proxy
	Name pulumi.StringPtrInput
	// Region in which cloud resources are hosted
	Region pulumi.StringPtrInput
	// Resource group in which cloud resources are hosted
	ResourceGroup pulumi.StringPtrInput
	// Security Group to define the security rules that determine the inbound and outbound traffic
	SecurityGroups pulumi.StringArrayInput
	// Subnet in which cloud resources are hosted
	SubnetId pulumi.StringPtrInput
	// VPC in which cloud resources are hosted
	Vpc pulumi.StringPtrInput
}

func (AzureProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureProxyState)(nil)).Elem()
}

type azureProxyArgs struct {
	// Boolean value to indicate if proxy vm needs to have static IP
	AllocateStaticIp *bool `pulumi:"allocateStaticIp"`
	// Harness NG API key
	ApiKey        string                  `pulumi:"apiKey"`
	CertificateId *string                 `pulumi:"certificateId"`
	Certificates  *AzureProxyCertificates `pulumi:"certificates"`
	// Id of the cloud connector
	CloudConnectorId              string `pulumi:"cloudConnectorId"`
	DeleteCloudResourcesOnDestroy bool   `pulumi:"deleteCloudResourcesOnDestroy"`
	// Hostname for the proxy
	HostName string `pulumi:"hostName"`
	// Name of SSH Key to be used for proxy VM
	Keypair string `pulumi:"keypair"`
	// Type of instance to be used for proxy
	MachineType string `pulumi:"machineType"`
	// Name of the proxy
	Name *string `pulumi:"name"`
	// Region in which cloud resources are hosted
	Region string `pulumi:"region"`
	// Resource group in which cloud resources are hosted
	ResourceGroup string `pulumi:"resourceGroup"`
	// Security Group to define the security rules that determine the inbound and outbound traffic
	SecurityGroups []string `pulumi:"securityGroups"`
	// Subnet in which cloud resources are hosted
	SubnetId string `pulumi:"subnetId"`
	// VPC in which cloud resources are hosted
	Vpc string `pulumi:"vpc"`
}

// The set of arguments for constructing a AzureProxy resource.
type AzureProxyArgs struct {
	// Boolean value to indicate if proxy vm needs to have static IP
	AllocateStaticIp pulumi.BoolPtrInput
	// Harness NG API key
	ApiKey        pulumi.StringInput
	CertificateId pulumi.StringPtrInput
	Certificates  AzureProxyCertificatesPtrInput
	// Id of the cloud connector
	CloudConnectorId              pulumi.StringInput
	DeleteCloudResourcesOnDestroy pulumi.BoolInput
	// Hostname for the proxy
	HostName pulumi.StringInput
	// Name of SSH Key to be used for proxy VM
	Keypair pulumi.StringInput
	// Type of instance to be used for proxy
	MachineType pulumi.StringInput
	// Name of the proxy
	Name pulumi.StringPtrInput
	// Region in which cloud resources are hosted
	Region pulumi.StringInput
	// Resource group in which cloud resources are hosted
	ResourceGroup pulumi.StringInput
	// Security Group to define the security rules that determine the inbound and outbound traffic
	SecurityGroups pulumi.StringArrayInput
	// Subnet in which cloud resources are hosted
	SubnetId pulumi.StringInput
	// VPC in which cloud resources are hosted
	Vpc pulumi.StringInput
}

func (AzureProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureProxyArgs)(nil)).Elem()
}

type AzureProxyInput interface {
	pulumi.Input

	ToAzureProxyOutput() AzureProxyOutput
	ToAzureProxyOutputWithContext(ctx context.Context) AzureProxyOutput
}

func (*AzureProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureProxy)(nil)).Elem()
}

func (i *AzureProxy) ToAzureProxyOutput() AzureProxyOutput {
	return i.ToAzureProxyOutputWithContext(context.Background())
}

func (i *AzureProxy) ToAzureProxyOutputWithContext(ctx context.Context) AzureProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureProxyOutput)
}

// AzureProxyArrayInput is an input type that accepts AzureProxyArray and AzureProxyArrayOutput values.
// You can construct a concrete instance of `AzureProxyArrayInput` via:
//
//	AzureProxyArray{ AzureProxyArgs{...} }
type AzureProxyArrayInput interface {
	pulumi.Input

	ToAzureProxyArrayOutput() AzureProxyArrayOutput
	ToAzureProxyArrayOutputWithContext(context.Context) AzureProxyArrayOutput
}

type AzureProxyArray []AzureProxyInput

func (AzureProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureProxy)(nil)).Elem()
}

func (i AzureProxyArray) ToAzureProxyArrayOutput() AzureProxyArrayOutput {
	return i.ToAzureProxyArrayOutputWithContext(context.Background())
}

func (i AzureProxyArray) ToAzureProxyArrayOutputWithContext(ctx context.Context) AzureProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureProxyArrayOutput)
}

// AzureProxyMapInput is an input type that accepts AzureProxyMap and AzureProxyMapOutput values.
// You can construct a concrete instance of `AzureProxyMapInput` via:
//
//	AzureProxyMap{ "key": AzureProxyArgs{...} }
type AzureProxyMapInput interface {
	pulumi.Input

	ToAzureProxyMapOutput() AzureProxyMapOutput
	ToAzureProxyMapOutputWithContext(context.Context) AzureProxyMapOutput
}

type AzureProxyMap map[string]AzureProxyInput

func (AzureProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureProxy)(nil)).Elem()
}

func (i AzureProxyMap) ToAzureProxyMapOutput() AzureProxyMapOutput {
	return i.ToAzureProxyMapOutputWithContext(context.Background())
}

func (i AzureProxyMap) ToAzureProxyMapOutputWithContext(ctx context.Context) AzureProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureProxyMapOutput)
}

type AzureProxyOutput struct{ *pulumi.OutputState }

func (AzureProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureProxy)(nil)).Elem()
}

func (o AzureProxyOutput) ToAzureProxyOutput() AzureProxyOutput {
	return o
}

func (o AzureProxyOutput) ToAzureProxyOutputWithContext(ctx context.Context) AzureProxyOutput {
	return o
}

// Boolean value to indicate if proxy vm needs to have static IP
func (o AzureProxyOutput) AllocateStaticIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureProxy) pulumi.BoolPtrOutput { return v.AllocateStaticIp }).(pulumi.BoolPtrOutput)
}

// Harness NG API key
func (o AzureProxyOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureProxy) pulumi.StringOutput { return v.ApiKey }).(pulumi.StringOutput)
}

func (o AzureProxyOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureProxy) pulumi.StringPtrOutput { return v.CertificateId }).(pulumi.StringPtrOutput)
}

func (o AzureProxyOutput) Certificates() AzureProxyCertificatesPtrOutput {
	return o.ApplyT(func(v *AzureProxy) AzureProxyCertificatesPtrOutput { return v.Certificates }).(AzureProxyCertificatesPtrOutput)
}

// Id of the cloud connector
func (o AzureProxyOutput) CloudConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureProxy) pulumi.StringOutput { return v.CloudConnectorId }).(pulumi.StringOutput)
}

func (o AzureProxyOutput) DeleteCloudResourcesOnDestroy() pulumi.BoolOutput {
	return o.ApplyT(func(v *AzureProxy) pulumi.BoolOutput { return v.DeleteCloudResourcesOnDestroy }).(pulumi.BoolOutput)
}

// Hostname for the proxy
func (o AzureProxyOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureProxy) pulumi.StringOutput { return v.HostName }).(pulumi.StringOutput)
}

// Unique identifier of the resource
func (o AzureProxyOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureProxy) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of SSH Key to be used for proxy VM
func (o AzureProxyOutput) Keypair() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureProxy) pulumi.StringOutput { return v.Keypair }).(pulumi.StringOutput)
}

// Type of instance to be used for proxy
func (o AzureProxyOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureProxy) pulumi.StringOutput { return v.MachineType }).(pulumi.StringOutput)
}

// Name of the proxy
func (o AzureProxyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureProxy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Region in which cloud resources are hosted
func (o AzureProxyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureProxy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Resource group in which cloud resources are hosted
func (o AzureProxyOutput) ResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureProxy) pulumi.StringOutput { return v.ResourceGroup }).(pulumi.StringOutput)
}

// Security Group to define the security rules that determine the inbound and outbound traffic
func (o AzureProxyOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AzureProxy) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// Subnet in which cloud resources are hosted
func (o AzureProxyOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureProxy) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// VPC in which cloud resources are hosted
func (o AzureProxyOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureProxy) pulumi.StringOutput { return v.Vpc }).(pulumi.StringOutput)
}

type AzureProxyArrayOutput struct{ *pulumi.OutputState }

func (AzureProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureProxy)(nil)).Elem()
}

func (o AzureProxyArrayOutput) ToAzureProxyArrayOutput() AzureProxyArrayOutput {
	return o
}

func (o AzureProxyArrayOutput) ToAzureProxyArrayOutputWithContext(ctx context.Context) AzureProxyArrayOutput {
	return o
}

func (o AzureProxyArrayOutput) Index(i pulumi.IntInput) AzureProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureProxy {
		return vs[0].([]*AzureProxy)[vs[1].(int)]
	}).(AzureProxyOutput)
}

type AzureProxyMapOutput struct{ *pulumi.OutputState }

func (AzureProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureProxy)(nil)).Elem()
}

func (o AzureProxyMapOutput) ToAzureProxyMapOutput() AzureProxyMapOutput {
	return o
}

func (o AzureProxyMapOutput) ToAzureProxyMapOutputWithContext(ctx context.Context) AzureProxyMapOutput {
	return o
}

func (o AzureProxyMapOutput) MapIndex(k pulumi.StringInput) AzureProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureProxy {
		return vs[0].(map[string]*AzureProxy)[vs[1].(string)]
	}).(AzureProxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureProxyInput)(nil)).Elem(), &AzureProxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureProxyArrayInput)(nil)).Elem(), AzureProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureProxyMapInput)(nil)).Elem(), AzureProxyMap{})
	pulumi.RegisterOutputType(AzureProxyOutput{})
	pulumi.RegisterOutputType(AzureProxyArrayOutput{})
	pulumi.RegisterOutputType(AzureProxyMapOutput{})
}
