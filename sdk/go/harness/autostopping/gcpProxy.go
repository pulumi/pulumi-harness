// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autostopping

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating an GCP Autostopping proxy
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/autostopping"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := autostopping.NewGcpProxy(ctx, "test", &autostopping.GcpProxyArgs{
//				Name:             pulumi.String("name"),
//				CloudConnectorId: pulumi.String("cloud_connector_id"),
//				HostName:         pulumi.String("host_name"),
//				Region:           pulumi.String("region"),
//				Vpc:              pulumi.String("https://www.googleapis.com/compute/v1/projects/project_id/global/networks/netwok_id"),
//				Zone:             pulumi.String("zone"),
//				SecurityGroups: pulumi.StringArray{
//					pulumi.String("http-server"),
//				},
//				MachineType:      pulumi.String("e2-micro"),
//				SubnetId:         pulumi.String("https://www.googleapis.com/compute/v1/projects/project_id/regions/region/subnetworks/subnet_name"),
//				ApiKey:           pulumi.String(""),
//				AllocateStaticIp: pulumi.Bool(false),
//				Certificates: &autostopping.GcpProxyCertificatesArgs{
//					KeySecretId:  pulumi.String("projects/project_id/secrets/secret_id/versions/1"),
//					CertSecretId: pulumi.String("projects/project_id/secrets/secret_id/versions/1"),
//				},
//				DeleteCloudResourcesOnDestroy: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type GcpProxy struct {
	pulumi.CustomResourceState

	// Boolean value to indicate if proxy vm needs to have static IP
	AllocateStaticIp pulumi.BoolPtrOutput `pulumi:"allocateStaticIp"`
	// Harness NG API key
	ApiKey       pulumi.StringOutput           `pulumi:"apiKey"`
	Certificates GcpProxyCertificatesPtrOutput `pulumi:"certificates"`
	// Id of the cloud connector
	CloudConnectorId              pulumi.StringOutput `pulumi:"cloudConnectorId"`
	DeleteCloudResourcesOnDestroy pulumi.BoolOutput   `pulumi:"deleteCloudResourcesOnDestroy"`
	// Hostname for the proxy
	HostName pulumi.StringOutput `pulumi:"hostName"`
	// Unique identifier of the resource
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Machine instance type
	MachineType pulumi.StringOutput `pulumi:"machineType"`
	// Name of the proxy
	Name pulumi.StringOutput `pulumi:"name"`
	// Region in which cloud resources are hosted
	Region pulumi.StringOutput `pulumi:"region"`
	// Security Group to define the security rules that determine the inbound and outbound traffic
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// VPC in which cloud resources are hosted
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// VPC in which cloud resources are hosted
	Vpc pulumi.StringOutput `pulumi:"vpc"`
	// Zone in which cloud resources are hosted
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewGcpProxy registers a new resource with the given unique name, arguments, and options.
func NewGcpProxy(ctx *pulumi.Context,
	name string, args *GcpProxyArgs, opts ...pulumi.ResourceOption) (*GcpProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiKey == nil {
		return nil, errors.New("invalid value for required argument 'ApiKey'")
	}
	if args.CloudConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'CloudConnectorId'")
	}
	if args.DeleteCloudResourcesOnDestroy == nil {
		return nil, errors.New("invalid value for required argument 'DeleteCloudResourcesOnDestroy'")
	}
	if args.HostName == nil {
		return nil, errors.New("invalid value for required argument 'HostName'")
	}
	if args.MachineType == nil {
		return nil, errors.New("invalid value for required argument 'MachineType'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.Vpc == nil {
		return nil, errors.New("invalid value for required argument 'Vpc'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	if args.ApiKey != nil {
		args.ApiKey = pulumi.ToSecret(args.ApiKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GcpProxy
	err := ctx.RegisterResource("harness:autostopping/gcpProxy:GcpProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGcpProxy gets an existing GcpProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGcpProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GcpProxyState, opts ...pulumi.ResourceOption) (*GcpProxy, error) {
	var resource GcpProxy
	err := ctx.ReadResource("harness:autostopping/gcpProxy:GcpProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GcpProxy resources.
type gcpProxyState struct {
	// Boolean value to indicate if proxy vm needs to have static IP
	AllocateStaticIp *bool `pulumi:"allocateStaticIp"`
	// Harness NG API key
	ApiKey       *string               `pulumi:"apiKey"`
	Certificates *GcpProxyCertificates `pulumi:"certificates"`
	// Id of the cloud connector
	CloudConnectorId              *string `pulumi:"cloudConnectorId"`
	DeleteCloudResourcesOnDestroy *bool   `pulumi:"deleteCloudResourcesOnDestroy"`
	// Hostname for the proxy
	HostName *string `pulumi:"hostName"`
	// Unique identifier of the resource
	Identifier *string `pulumi:"identifier"`
	// Machine instance type
	MachineType *string `pulumi:"machineType"`
	// Name of the proxy
	Name *string `pulumi:"name"`
	// Region in which cloud resources are hosted
	Region *string `pulumi:"region"`
	// Security Group to define the security rules that determine the inbound and outbound traffic
	SecurityGroups []string `pulumi:"securityGroups"`
	// VPC in which cloud resources are hosted
	SubnetId *string `pulumi:"subnetId"`
	// VPC in which cloud resources are hosted
	Vpc *string `pulumi:"vpc"`
	// Zone in which cloud resources are hosted
	Zone *string `pulumi:"zone"`
}

type GcpProxyState struct {
	// Boolean value to indicate if proxy vm needs to have static IP
	AllocateStaticIp pulumi.BoolPtrInput
	// Harness NG API key
	ApiKey       pulumi.StringPtrInput
	Certificates GcpProxyCertificatesPtrInput
	// Id of the cloud connector
	CloudConnectorId              pulumi.StringPtrInput
	DeleteCloudResourcesOnDestroy pulumi.BoolPtrInput
	// Hostname for the proxy
	HostName pulumi.StringPtrInput
	// Unique identifier of the resource
	Identifier pulumi.StringPtrInput
	// Machine instance type
	MachineType pulumi.StringPtrInput
	// Name of the proxy
	Name pulumi.StringPtrInput
	// Region in which cloud resources are hosted
	Region pulumi.StringPtrInput
	// Security Group to define the security rules that determine the inbound and outbound traffic
	SecurityGroups pulumi.StringArrayInput
	// VPC in which cloud resources are hosted
	SubnetId pulumi.StringPtrInput
	// VPC in which cloud resources are hosted
	Vpc pulumi.StringPtrInput
	// Zone in which cloud resources are hosted
	Zone pulumi.StringPtrInput
}

func (GcpProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpProxyState)(nil)).Elem()
}

type gcpProxyArgs struct {
	// Boolean value to indicate if proxy vm needs to have static IP
	AllocateStaticIp *bool `pulumi:"allocateStaticIp"`
	// Harness NG API key
	ApiKey       string                `pulumi:"apiKey"`
	Certificates *GcpProxyCertificates `pulumi:"certificates"`
	// Id of the cloud connector
	CloudConnectorId              string `pulumi:"cloudConnectorId"`
	DeleteCloudResourcesOnDestroy bool   `pulumi:"deleteCloudResourcesOnDestroy"`
	// Hostname for the proxy
	HostName string `pulumi:"hostName"`
	// Machine instance type
	MachineType string `pulumi:"machineType"`
	// Name of the proxy
	Name *string `pulumi:"name"`
	// Region in which cloud resources are hosted
	Region string `pulumi:"region"`
	// Security Group to define the security rules that determine the inbound and outbound traffic
	SecurityGroups []string `pulumi:"securityGroups"`
	// VPC in which cloud resources are hosted
	SubnetId string `pulumi:"subnetId"`
	// VPC in which cloud resources are hosted
	Vpc string `pulumi:"vpc"`
	// Zone in which cloud resources are hosted
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a GcpProxy resource.
type GcpProxyArgs struct {
	// Boolean value to indicate if proxy vm needs to have static IP
	AllocateStaticIp pulumi.BoolPtrInput
	// Harness NG API key
	ApiKey       pulumi.StringInput
	Certificates GcpProxyCertificatesPtrInput
	// Id of the cloud connector
	CloudConnectorId              pulumi.StringInput
	DeleteCloudResourcesOnDestroy pulumi.BoolInput
	// Hostname for the proxy
	HostName pulumi.StringInput
	// Machine instance type
	MachineType pulumi.StringInput
	// Name of the proxy
	Name pulumi.StringPtrInput
	// Region in which cloud resources are hosted
	Region pulumi.StringInput
	// Security Group to define the security rules that determine the inbound and outbound traffic
	SecurityGroups pulumi.StringArrayInput
	// VPC in which cloud resources are hosted
	SubnetId pulumi.StringInput
	// VPC in which cloud resources are hosted
	Vpc pulumi.StringInput
	// Zone in which cloud resources are hosted
	Zone pulumi.StringInput
}

func (GcpProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpProxyArgs)(nil)).Elem()
}

type GcpProxyInput interface {
	pulumi.Input

	ToGcpProxyOutput() GcpProxyOutput
	ToGcpProxyOutputWithContext(ctx context.Context) GcpProxyOutput
}

func (*GcpProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpProxy)(nil)).Elem()
}

func (i *GcpProxy) ToGcpProxyOutput() GcpProxyOutput {
	return i.ToGcpProxyOutputWithContext(context.Background())
}

func (i *GcpProxy) ToGcpProxyOutputWithContext(ctx context.Context) GcpProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpProxyOutput)
}

// GcpProxyArrayInput is an input type that accepts GcpProxyArray and GcpProxyArrayOutput values.
// You can construct a concrete instance of `GcpProxyArrayInput` via:
//
//	GcpProxyArray{ GcpProxyArgs{...} }
type GcpProxyArrayInput interface {
	pulumi.Input

	ToGcpProxyArrayOutput() GcpProxyArrayOutput
	ToGcpProxyArrayOutputWithContext(context.Context) GcpProxyArrayOutput
}

type GcpProxyArray []GcpProxyInput

func (GcpProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpProxy)(nil)).Elem()
}

func (i GcpProxyArray) ToGcpProxyArrayOutput() GcpProxyArrayOutput {
	return i.ToGcpProxyArrayOutputWithContext(context.Background())
}

func (i GcpProxyArray) ToGcpProxyArrayOutputWithContext(ctx context.Context) GcpProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpProxyArrayOutput)
}

// GcpProxyMapInput is an input type that accepts GcpProxyMap and GcpProxyMapOutput values.
// You can construct a concrete instance of `GcpProxyMapInput` via:
//
//	GcpProxyMap{ "key": GcpProxyArgs{...} }
type GcpProxyMapInput interface {
	pulumi.Input

	ToGcpProxyMapOutput() GcpProxyMapOutput
	ToGcpProxyMapOutputWithContext(context.Context) GcpProxyMapOutput
}

type GcpProxyMap map[string]GcpProxyInput

func (GcpProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpProxy)(nil)).Elem()
}

func (i GcpProxyMap) ToGcpProxyMapOutput() GcpProxyMapOutput {
	return i.ToGcpProxyMapOutputWithContext(context.Background())
}

func (i GcpProxyMap) ToGcpProxyMapOutputWithContext(ctx context.Context) GcpProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpProxyMapOutput)
}

type GcpProxyOutput struct{ *pulumi.OutputState }

func (GcpProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpProxy)(nil)).Elem()
}

func (o GcpProxyOutput) ToGcpProxyOutput() GcpProxyOutput {
	return o
}

func (o GcpProxyOutput) ToGcpProxyOutputWithContext(ctx context.Context) GcpProxyOutput {
	return o
}

// Boolean value to indicate if proxy vm needs to have static IP
func (o GcpProxyOutput) AllocateStaticIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcpProxy) pulumi.BoolPtrOutput { return v.AllocateStaticIp }).(pulumi.BoolPtrOutput)
}

// Harness NG API key
func (o GcpProxyOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpProxy) pulumi.StringOutput { return v.ApiKey }).(pulumi.StringOutput)
}

func (o GcpProxyOutput) Certificates() GcpProxyCertificatesPtrOutput {
	return o.ApplyT(func(v *GcpProxy) GcpProxyCertificatesPtrOutput { return v.Certificates }).(GcpProxyCertificatesPtrOutput)
}

// Id of the cloud connector
func (o GcpProxyOutput) CloudConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpProxy) pulumi.StringOutput { return v.CloudConnectorId }).(pulumi.StringOutput)
}

func (o GcpProxyOutput) DeleteCloudResourcesOnDestroy() pulumi.BoolOutput {
	return o.ApplyT(func(v *GcpProxy) pulumi.BoolOutput { return v.DeleteCloudResourcesOnDestroy }).(pulumi.BoolOutput)
}

// Hostname for the proxy
func (o GcpProxyOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpProxy) pulumi.StringOutput { return v.HostName }).(pulumi.StringOutput)
}

// Unique identifier of the resource
func (o GcpProxyOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpProxy) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Machine instance type
func (o GcpProxyOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpProxy) pulumi.StringOutput { return v.MachineType }).(pulumi.StringOutput)
}

// Name of the proxy
func (o GcpProxyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpProxy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Region in which cloud resources are hosted
func (o GcpProxyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpProxy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Security Group to define the security rules that determine the inbound and outbound traffic
func (o GcpProxyOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GcpProxy) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// VPC in which cloud resources are hosted
func (o GcpProxyOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpProxy) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// VPC in which cloud resources are hosted
func (o GcpProxyOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpProxy) pulumi.StringOutput { return v.Vpc }).(pulumi.StringOutput)
}

// Zone in which cloud resources are hosted
func (o GcpProxyOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpProxy) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type GcpProxyArrayOutput struct{ *pulumi.OutputState }

func (GcpProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpProxy)(nil)).Elem()
}

func (o GcpProxyArrayOutput) ToGcpProxyArrayOutput() GcpProxyArrayOutput {
	return o
}

func (o GcpProxyArrayOutput) ToGcpProxyArrayOutputWithContext(ctx context.Context) GcpProxyArrayOutput {
	return o
}

func (o GcpProxyArrayOutput) Index(i pulumi.IntInput) GcpProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GcpProxy {
		return vs[0].([]*GcpProxy)[vs[1].(int)]
	}).(GcpProxyOutput)
}

type GcpProxyMapOutput struct{ *pulumi.OutputState }

func (GcpProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpProxy)(nil)).Elem()
}

func (o GcpProxyMapOutput) ToGcpProxyMapOutput() GcpProxyMapOutput {
	return o
}

func (o GcpProxyMapOutput) ToGcpProxyMapOutputWithContext(ctx context.Context) GcpProxyMapOutput {
	return o
}

func (o GcpProxyMapOutput) MapIndex(k pulumi.StringInput) GcpProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GcpProxy {
		return vs[0].(map[string]*GcpProxy)[vs[1].(string)]
	}).(GcpProxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GcpProxyInput)(nil)).Elem(), &GcpProxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpProxyArrayInput)(nil)).Elem(), GcpProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpProxyMapInput)(nil)).Elem(), GcpProxyMap{})
	pulumi.RegisterOutputType(GcpProxyOutput{})
	pulumi.RegisterOutputType(GcpProxyArrayOutput{})
	pulumi.RegisterOutputType(GcpProxyMapOutput{})
}
