// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autostopping

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Harness Variables.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/autostopping"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := autostopping.NewRuleEcs(ctx, "test", &autostopping.RuleEcsArgs{
//				Name:             pulumi.String("name"),
//				CloudConnectorId: pulumi.String("cloud_connector_id"),
//				IdleTimeMins:     pulumi.Int(10),
//				DryRun:           pulumi.Bool(true),
//				Container: &autostopping.RuleEcsContainerArgs{
//					Cluster:   pulumi.String("cluster"),
//					Service:   pulumi.String("service"),
//					Region:    pulumi.String("us-east-1"),
//					TaskCount: pulumi.Int(1),
//				},
//				Tcp: []map[string]interface{}{
//					map[string]interface{}{
//						"proxyId": "proxy_id",
//						"forwardRule": []map[string]interface{}{
//							map[string]interface{}{
//								"port": 2233,
//							},
//						},
//					},
//				},
//				Depends: autostopping.RuleEcsDependArray{
//					&autostopping.RuleEcsDependArgs{
//						RuleId:     pulumi.Int(24576),
//						DelayInSec: pulumi.Int(5),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RuleEcs struct {
	pulumi.CustomResourceState

	// Id of the cloud connector
	CloudConnectorId pulumi.StringOutput       `pulumi:"cloudConnectorId"`
	Container        RuleEcsContainerPtrOutput `pulumi:"container"`
	// Custom URLs used to access the instances
	CustomDomains pulumi.StringArrayOutput `pulumi:"customDomains"`
	// Dependent rules
	Depends RuleEcsDependArrayOutput `pulumi:"depends"`
	// Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
	DryRun pulumi.BoolPtrOutput `pulumi:"dryRun"`
	// Http routing configuration
	Https RuleEcsHttpArrayOutput `pulumi:"https"`
	// Unique identifier of the resource
	Identifier pulumi.Float64Output `pulumi:"identifier"`
	// Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
	IdleTimeMins pulumi.IntPtrOutput `pulumi:"idleTimeMins"`
	// Name of the rule
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewRuleEcs registers a new resource with the given unique name, arguments, and options.
func NewRuleEcs(ctx *pulumi.Context,
	name string, args *RuleEcsArgs, opts ...pulumi.ResourceOption) (*RuleEcs, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'CloudConnectorId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RuleEcs
	err := ctx.RegisterResource("harness:autostopping/ruleEcs:RuleEcs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleEcs gets an existing RuleEcs resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleEcs(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleEcsState, opts ...pulumi.ResourceOption) (*RuleEcs, error) {
	var resource RuleEcs
	err := ctx.ReadResource("harness:autostopping/ruleEcs:RuleEcs", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleEcs resources.
type ruleEcsState struct {
	// Id of the cloud connector
	CloudConnectorId *string           `pulumi:"cloudConnectorId"`
	Container        *RuleEcsContainer `pulumi:"container"`
	// Custom URLs used to access the instances
	CustomDomains []string `pulumi:"customDomains"`
	// Dependent rules
	Depends []RuleEcsDepend `pulumi:"depends"`
	// Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
	DryRun *bool `pulumi:"dryRun"`
	// Http routing configuration
	Https []RuleEcsHttp `pulumi:"https"`
	// Unique identifier of the resource
	Identifier *float64 `pulumi:"identifier"`
	// Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
	IdleTimeMins *int `pulumi:"idleTimeMins"`
	// Name of the rule
	Name *string `pulumi:"name"`
}

type RuleEcsState struct {
	// Id of the cloud connector
	CloudConnectorId pulumi.StringPtrInput
	Container        RuleEcsContainerPtrInput
	// Custom URLs used to access the instances
	CustomDomains pulumi.StringArrayInput
	// Dependent rules
	Depends RuleEcsDependArrayInput
	// Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
	DryRun pulumi.BoolPtrInput
	// Http routing configuration
	Https RuleEcsHttpArrayInput
	// Unique identifier of the resource
	Identifier pulumi.Float64PtrInput
	// Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
	IdleTimeMins pulumi.IntPtrInput
	// Name of the rule
	Name pulumi.StringPtrInput
}

func (RuleEcsState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleEcsState)(nil)).Elem()
}

type ruleEcsArgs struct {
	// Id of the cloud connector
	CloudConnectorId string            `pulumi:"cloudConnectorId"`
	Container        *RuleEcsContainer `pulumi:"container"`
	// Custom URLs used to access the instances
	CustomDomains []string `pulumi:"customDomains"`
	// Dependent rules
	Depends []RuleEcsDepend `pulumi:"depends"`
	// Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
	DryRun *bool `pulumi:"dryRun"`
	// Http routing configuration
	Https []RuleEcsHttp `pulumi:"https"`
	// Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
	IdleTimeMins *int `pulumi:"idleTimeMins"`
	// Name of the rule
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a RuleEcs resource.
type RuleEcsArgs struct {
	// Id of the cloud connector
	CloudConnectorId pulumi.StringInput
	Container        RuleEcsContainerPtrInput
	// Custom URLs used to access the instances
	CustomDomains pulumi.StringArrayInput
	// Dependent rules
	Depends RuleEcsDependArrayInput
	// Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
	DryRun pulumi.BoolPtrInput
	// Http routing configuration
	Https RuleEcsHttpArrayInput
	// Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
	IdleTimeMins pulumi.IntPtrInput
	// Name of the rule
	Name pulumi.StringPtrInput
}

func (RuleEcsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleEcsArgs)(nil)).Elem()
}

type RuleEcsInput interface {
	pulumi.Input

	ToRuleEcsOutput() RuleEcsOutput
	ToRuleEcsOutputWithContext(ctx context.Context) RuleEcsOutput
}

func (*RuleEcs) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleEcs)(nil)).Elem()
}

func (i *RuleEcs) ToRuleEcsOutput() RuleEcsOutput {
	return i.ToRuleEcsOutputWithContext(context.Background())
}

func (i *RuleEcs) ToRuleEcsOutputWithContext(ctx context.Context) RuleEcsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleEcsOutput)
}

// RuleEcsArrayInput is an input type that accepts RuleEcsArray and RuleEcsArrayOutput values.
// You can construct a concrete instance of `RuleEcsArrayInput` via:
//
//	RuleEcsArray{ RuleEcsArgs{...} }
type RuleEcsArrayInput interface {
	pulumi.Input

	ToRuleEcsArrayOutput() RuleEcsArrayOutput
	ToRuleEcsArrayOutputWithContext(context.Context) RuleEcsArrayOutput
}

type RuleEcsArray []RuleEcsInput

func (RuleEcsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleEcs)(nil)).Elem()
}

func (i RuleEcsArray) ToRuleEcsArrayOutput() RuleEcsArrayOutput {
	return i.ToRuleEcsArrayOutputWithContext(context.Background())
}

func (i RuleEcsArray) ToRuleEcsArrayOutputWithContext(ctx context.Context) RuleEcsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleEcsArrayOutput)
}

// RuleEcsMapInput is an input type that accepts RuleEcsMap and RuleEcsMapOutput values.
// You can construct a concrete instance of `RuleEcsMapInput` via:
//
//	RuleEcsMap{ "key": RuleEcsArgs{...} }
type RuleEcsMapInput interface {
	pulumi.Input

	ToRuleEcsMapOutput() RuleEcsMapOutput
	ToRuleEcsMapOutputWithContext(context.Context) RuleEcsMapOutput
}

type RuleEcsMap map[string]RuleEcsInput

func (RuleEcsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleEcs)(nil)).Elem()
}

func (i RuleEcsMap) ToRuleEcsMapOutput() RuleEcsMapOutput {
	return i.ToRuleEcsMapOutputWithContext(context.Background())
}

func (i RuleEcsMap) ToRuleEcsMapOutputWithContext(ctx context.Context) RuleEcsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleEcsMapOutput)
}

type RuleEcsOutput struct{ *pulumi.OutputState }

func (RuleEcsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleEcs)(nil)).Elem()
}

func (o RuleEcsOutput) ToRuleEcsOutput() RuleEcsOutput {
	return o
}

func (o RuleEcsOutput) ToRuleEcsOutputWithContext(ctx context.Context) RuleEcsOutput {
	return o
}

// Id of the cloud connector
func (o RuleEcsOutput) CloudConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleEcs) pulumi.StringOutput { return v.CloudConnectorId }).(pulumi.StringOutput)
}

func (o RuleEcsOutput) Container() RuleEcsContainerPtrOutput {
	return o.ApplyT(func(v *RuleEcs) RuleEcsContainerPtrOutput { return v.Container }).(RuleEcsContainerPtrOutput)
}

// Custom URLs used to access the instances
func (o RuleEcsOutput) CustomDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuleEcs) pulumi.StringArrayOutput { return v.CustomDomains }).(pulumi.StringArrayOutput)
}

// Dependent rules
func (o RuleEcsOutput) Depends() RuleEcsDependArrayOutput {
	return o.ApplyT(func(v *RuleEcs) RuleEcsDependArrayOutput { return v.Depends }).(RuleEcsDependArrayOutput)
}

// Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
func (o RuleEcsOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuleEcs) pulumi.BoolPtrOutput { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// Http routing configuration
func (o RuleEcsOutput) Https() RuleEcsHttpArrayOutput {
	return o.ApplyT(func(v *RuleEcs) RuleEcsHttpArrayOutput { return v.Https }).(RuleEcsHttpArrayOutput)
}

// Unique identifier of the resource
func (o RuleEcsOutput) Identifier() pulumi.Float64Output {
	return o.ApplyT(func(v *RuleEcs) pulumi.Float64Output { return v.Identifier }).(pulumi.Float64Output)
}

// Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
func (o RuleEcsOutput) IdleTimeMins() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuleEcs) pulumi.IntPtrOutput { return v.IdleTimeMins }).(pulumi.IntPtrOutput)
}

// Name of the rule
func (o RuleEcsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleEcs) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type RuleEcsArrayOutput struct{ *pulumi.OutputState }

func (RuleEcsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleEcs)(nil)).Elem()
}

func (o RuleEcsArrayOutput) ToRuleEcsArrayOutput() RuleEcsArrayOutput {
	return o
}

func (o RuleEcsArrayOutput) ToRuleEcsArrayOutputWithContext(ctx context.Context) RuleEcsArrayOutput {
	return o
}

func (o RuleEcsArrayOutput) Index(i pulumi.IntInput) RuleEcsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RuleEcs {
		return vs[0].([]*RuleEcs)[vs[1].(int)]
	}).(RuleEcsOutput)
}

type RuleEcsMapOutput struct{ *pulumi.OutputState }

func (RuleEcsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleEcs)(nil)).Elem()
}

func (o RuleEcsMapOutput) ToRuleEcsMapOutput() RuleEcsMapOutput {
	return o
}

func (o RuleEcsMapOutput) ToRuleEcsMapOutputWithContext(ctx context.Context) RuleEcsMapOutput {
	return o
}

func (o RuleEcsMapOutput) MapIndex(k pulumi.StringInput) RuleEcsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RuleEcs {
		return vs[0].(map[string]*RuleEcs)[vs[1].(string)]
	}).(RuleEcsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleEcsInput)(nil)).Elem(), &RuleEcs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleEcsArrayInput)(nil)).Elem(), RuleEcsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleEcsMapInput)(nil)).Elem(), RuleEcsMap{})
	pulumi.RegisterOutputType(RuleEcsOutput{})
	pulumi.RegisterOutputType(RuleEcsArrayOutput{})
	pulumi.RegisterOutputType(RuleEcsMapOutput{})
}
