// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autostopping

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AwsProxyCertificates struct {
	// Certificate secret ID
	CertSecretId string `pulumi:"certSecretId"`
	// Private key secret ID
	KeySecretId string `pulumi:"keySecretId"`
}

// AwsProxyCertificatesInput is an input type that accepts AwsProxyCertificatesArgs and AwsProxyCertificatesOutput values.
// You can construct a concrete instance of `AwsProxyCertificatesInput` via:
//
//	AwsProxyCertificatesArgs{...}
type AwsProxyCertificatesInput interface {
	pulumi.Input

	ToAwsProxyCertificatesOutput() AwsProxyCertificatesOutput
	ToAwsProxyCertificatesOutputWithContext(context.Context) AwsProxyCertificatesOutput
}

type AwsProxyCertificatesArgs struct {
	// Certificate secret ID
	CertSecretId pulumi.StringInput `pulumi:"certSecretId"`
	// Private key secret ID
	KeySecretId pulumi.StringInput `pulumi:"keySecretId"`
}

func (AwsProxyCertificatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsProxyCertificates)(nil)).Elem()
}

func (i AwsProxyCertificatesArgs) ToAwsProxyCertificatesOutput() AwsProxyCertificatesOutput {
	return i.ToAwsProxyCertificatesOutputWithContext(context.Background())
}

func (i AwsProxyCertificatesArgs) ToAwsProxyCertificatesOutputWithContext(ctx context.Context) AwsProxyCertificatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsProxyCertificatesOutput)
}

func (i AwsProxyCertificatesArgs) ToAwsProxyCertificatesPtrOutput() AwsProxyCertificatesPtrOutput {
	return i.ToAwsProxyCertificatesPtrOutputWithContext(context.Background())
}

func (i AwsProxyCertificatesArgs) ToAwsProxyCertificatesPtrOutputWithContext(ctx context.Context) AwsProxyCertificatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsProxyCertificatesOutput).ToAwsProxyCertificatesPtrOutputWithContext(ctx)
}

// AwsProxyCertificatesPtrInput is an input type that accepts AwsProxyCertificatesArgs, AwsProxyCertificatesPtr and AwsProxyCertificatesPtrOutput values.
// You can construct a concrete instance of `AwsProxyCertificatesPtrInput` via:
//
//	        AwsProxyCertificatesArgs{...}
//
//	or:
//
//	        nil
type AwsProxyCertificatesPtrInput interface {
	pulumi.Input

	ToAwsProxyCertificatesPtrOutput() AwsProxyCertificatesPtrOutput
	ToAwsProxyCertificatesPtrOutputWithContext(context.Context) AwsProxyCertificatesPtrOutput
}

type awsProxyCertificatesPtrType AwsProxyCertificatesArgs

func AwsProxyCertificatesPtr(v *AwsProxyCertificatesArgs) AwsProxyCertificatesPtrInput {
	return (*awsProxyCertificatesPtrType)(v)
}

func (*awsProxyCertificatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsProxyCertificates)(nil)).Elem()
}

func (i *awsProxyCertificatesPtrType) ToAwsProxyCertificatesPtrOutput() AwsProxyCertificatesPtrOutput {
	return i.ToAwsProxyCertificatesPtrOutputWithContext(context.Background())
}

func (i *awsProxyCertificatesPtrType) ToAwsProxyCertificatesPtrOutputWithContext(ctx context.Context) AwsProxyCertificatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsProxyCertificatesPtrOutput)
}

type AwsProxyCertificatesOutput struct{ *pulumi.OutputState }

func (AwsProxyCertificatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsProxyCertificates)(nil)).Elem()
}

func (o AwsProxyCertificatesOutput) ToAwsProxyCertificatesOutput() AwsProxyCertificatesOutput {
	return o
}

func (o AwsProxyCertificatesOutput) ToAwsProxyCertificatesOutputWithContext(ctx context.Context) AwsProxyCertificatesOutput {
	return o
}

func (o AwsProxyCertificatesOutput) ToAwsProxyCertificatesPtrOutput() AwsProxyCertificatesPtrOutput {
	return o.ToAwsProxyCertificatesPtrOutputWithContext(context.Background())
}

func (o AwsProxyCertificatesOutput) ToAwsProxyCertificatesPtrOutputWithContext(ctx context.Context) AwsProxyCertificatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AwsProxyCertificates) *AwsProxyCertificates {
		return &v
	}).(AwsProxyCertificatesPtrOutput)
}

// Certificate secret ID
func (o AwsProxyCertificatesOutput) CertSecretId() pulumi.StringOutput {
	return o.ApplyT(func(v AwsProxyCertificates) string { return v.CertSecretId }).(pulumi.StringOutput)
}

// Private key secret ID
func (o AwsProxyCertificatesOutput) KeySecretId() pulumi.StringOutput {
	return o.ApplyT(func(v AwsProxyCertificates) string { return v.KeySecretId }).(pulumi.StringOutput)
}

type AwsProxyCertificatesPtrOutput struct{ *pulumi.OutputState }

func (AwsProxyCertificatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsProxyCertificates)(nil)).Elem()
}

func (o AwsProxyCertificatesPtrOutput) ToAwsProxyCertificatesPtrOutput() AwsProxyCertificatesPtrOutput {
	return o
}

func (o AwsProxyCertificatesPtrOutput) ToAwsProxyCertificatesPtrOutputWithContext(ctx context.Context) AwsProxyCertificatesPtrOutput {
	return o
}

func (o AwsProxyCertificatesPtrOutput) Elem() AwsProxyCertificatesOutput {
	return o.ApplyT(func(v *AwsProxyCertificates) AwsProxyCertificates {
		if v != nil {
			return *v
		}
		var ret AwsProxyCertificates
		return ret
	}).(AwsProxyCertificatesOutput)
}

// Certificate secret ID
func (o AwsProxyCertificatesPtrOutput) CertSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsProxyCertificates) *string {
		if v == nil {
			return nil
		}
		return &v.CertSecretId
	}).(pulumi.StringPtrOutput)
}

// Private key secret ID
func (o AwsProxyCertificatesPtrOutput) KeySecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsProxyCertificates) *string {
		if v == nil {
			return nil
		}
		return &v.KeySecretId
	}).(pulumi.StringPtrOutput)
}

type AzureProxyCertificates struct {
	// ID of certificate secret uploaded to vault
	CertSecretId string `pulumi:"certSecretId"`
	// ID of certificate key uploaded to vault
	KeySecretId string `pulumi:"keySecretId"`
}

// AzureProxyCertificatesInput is an input type that accepts AzureProxyCertificatesArgs and AzureProxyCertificatesOutput values.
// You can construct a concrete instance of `AzureProxyCertificatesInput` via:
//
//	AzureProxyCertificatesArgs{...}
type AzureProxyCertificatesInput interface {
	pulumi.Input

	ToAzureProxyCertificatesOutput() AzureProxyCertificatesOutput
	ToAzureProxyCertificatesOutputWithContext(context.Context) AzureProxyCertificatesOutput
}

type AzureProxyCertificatesArgs struct {
	// ID of certificate secret uploaded to vault
	CertSecretId pulumi.StringInput `pulumi:"certSecretId"`
	// ID of certificate key uploaded to vault
	KeySecretId pulumi.StringInput `pulumi:"keySecretId"`
}

func (AzureProxyCertificatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureProxyCertificates)(nil)).Elem()
}

func (i AzureProxyCertificatesArgs) ToAzureProxyCertificatesOutput() AzureProxyCertificatesOutput {
	return i.ToAzureProxyCertificatesOutputWithContext(context.Background())
}

func (i AzureProxyCertificatesArgs) ToAzureProxyCertificatesOutputWithContext(ctx context.Context) AzureProxyCertificatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureProxyCertificatesOutput)
}

func (i AzureProxyCertificatesArgs) ToAzureProxyCertificatesPtrOutput() AzureProxyCertificatesPtrOutput {
	return i.ToAzureProxyCertificatesPtrOutputWithContext(context.Background())
}

func (i AzureProxyCertificatesArgs) ToAzureProxyCertificatesPtrOutputWithContext(ctx context.Context) AzureProxyCertificatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureProxyCertificatesOutput).ToAzureProxyCertificatesPtrOutputWithContext(ctx)
}

// AzureProxyCertificatesPtrInput is an input type that accepts AzureProxyCertificatesArgs, AzureProxyCertificatesPtr and AzureProxyCertificatesPtrOutput values.
// You can construct a concrete instance of `AzureProxyCertificatesPtrInput` via:
//
//	        AzureProxyCertificatesArgs{...}
//
//	or:
//
//	        nil
type AzureProxyCertificatesPtrInput interface {
	pulumi.Input

	ToAzureProxyCertificatesPtrOutput() AzureProxyCertificatesPtrOutput
	ToAzureProxyCertificatesPtrOutputWithContext(context.Context) AzureProxyCertificatesPtrOutput
}

type azureProxyCertificatesPtrType AzureProxyCertificatesArgs

func AzureProxyCertificatesPtr(v *AzureProxyCertificatesArgs) AzureProxyCertificatesPtrInput {
	return (*azureProxyCertificatesPtrType)(v)
}

func (*azureProxyCertificatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureProxyCertificates)(nil)).Elem()
}

func (i *azureProxyCertificatesPtrType) ToAzureProxyCertificatesPtrOutput() AzureProxyCertificatesPtrOutput {
	return i.ToAzureProxyCertificatesPtrOutputWithContext(context.Background())
}

func (i *azureProxyCertificatesPtrType) ToAzureProxyCertificatesPtrOutputWithContext(ctx context.Context) AzureProxyCertificatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureProxyCertificatesPtrOutput)
}

type AzureProxyCertificatesOutput struct{ *pulumi.OutputState }

func (AzureProxyCertificatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureProxyCertificates)(nil)).Elem()
}

func (o AzureProxyCertificatesOutput) ToAzureProxyCertificatesOutput() AzureProxyCertificatesOutput {
	return o
}

func (o AzureProxyCertificatesOutput) ToAzureProxyCertificatesOutputWithContext(ctx context.Context) AzureProxyCertificatesOutput {
	return o
}

func (o AzureProxyCertificatesOutput) ToAzureProxyCertificatesPtrOutput() AzureProxyCertificatesPtrOutput {
	return o.ToAzureProxyCertificatesPtrOutputWithContext(context.Background())
}

func (o AzureProxyCertificatesOutput) ToAzureProxyCertificatesPtrOutputWithContext(ctx context.Context) AzureProxyCertificatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureProxyCertificates) *AzureProxyCertificates {
		return &v
	}).(AzureProxyCertificatesPtrOutput)
}

// ID of certificate secret uploaded to vault
func (o AzureProxyCertificatesOutput) CertSecretId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureProxyCertificates) string { return v.CertSecretId }).(pulumi.StringOutput)
}

// ID of certificate key uploaded to vault
func (o AzureProxyCertificatesOutput) KeySecretId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureProxyCertificates) string { return v.KeySecretId }).(pulumi.StringOutput)
}

type AzureProxyCertificatesPtrOutput struct{ *pulumi.OutputState }

func (AzureProxyCertificatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureProxyCertificates)(nil)).Elem()
}

func (o AzureProxyCertificatesPtrOutput) ToAzureProxyCertificatesPtrOutput() AzureProxyCertificatesPtrOutput {
	return o
}

func (o AzureProxyCertificatesPtrOutput) ToAzureProxyCertificatesPtrOutputWithContext(ctx context.Context) AzureProxyCertificatesPtrOutput {
	return o
}

func (o AzureProxyCertificatesPtrOutput) Elem() AzureProxyCertificatesOutput {
	return o.ApplyT(func(v *AzureProxyCertificates) AzureProxyCertificates {
		if v != nil {
			return *v
		}
		var ret AzureProxyCertificates
		return ret
	}).(AzureProxyCertificatesOutput)
}

// ID of certificate secret uploaded to vault
func (o AzureProxyCertificatesPtrOutput) CertSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureProxyCertificates) *string {
		if v == nil {
			return nil
		}
		return &v.CertSecretId
	}).(pulumi.StringPtrOutput)
}

// ID of certificate key uploaded to vault
func (o AzureProxyCertificatesPtrOutput) KeySecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureProxyCertificates) *string {
		if v == nil {
			return nil
		}
		return &v.KeySecretId
	}).(pulumi.StringPtrOutput)
}

type GcpProxyCertificates struct {
	// Certificate secret ID
	CertSecretId string `pulumi:"certSecretId"`
	// Private key secret ID
	KeySecretId string `pulumi:"keySecretId"`
}

// GcpProxyCertificatesInput is an input type that accepts GcpProxyCertificatesArgs and GcpProxyCertificatesOutput values.
// You can construct a concrete instance of `GcpProxyCertificatesInput` via:
//
//	GcpProxyCertificatesArgs{...}
type GcpProxyCertificatesInput interface {
	pulumi.Input

	ToGcpProxyCertificatesOutput() GcpProxyCertificatesOutput
	ToGcpProxyCertificatesOutputWithContext(context.Context) GcpProxyCertificatesOutput
}

type GcpProxyCertificatesArgs struct {
	// Certificate secret ID
	CertSecretId pulumi.StringInput `pulumi:"certSecretId"`
	// Private key secret ID
	KeySecretId pulumi.StringInput `pulumi:"keySecretId"`
}

func (GcpProxyCertificatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcpProxyCertificates)(nil)).Elem()
}

func (i GcpProxyCertificatesArgs) ToGcpProxyCertificatesOutput() GcpProxyCertificatesOutput {
	return i.ToGcpProxyCertificatesOutputWithContext(context.Background())
}

func (i GcpProxyCertificatesArgs) ToGcpProxyCertificatesOutputWithContext(ctx context.Context) GcpProxyCertificatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpProxyCertificatesOutput)
}

func (i GcpProxyCertificatesArgs) ToGcpProxyCertificatesPtrOutput() GcpProxyCertificatesPtrOutput {
	return i.ToGcpProxyCertificatesPtrOutputWithContext(context.Background())
}

func (i GcpProxyCertificatesArgs) ToGcpProxyCertificatesPtrOutputWithContext(ctx context.Context) GcpProxyCertificatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpProxyCertificatesOutput).ToGcpProxyCertificatesPtrOutputWithContext(ctx)
}

// GcpProxyCertificatesPtrInput is an input type that accepts GcpProxyCertificatesArgs, GcpProxyCertificatesPtr and GcpProxyCertificatesPtrOutput values.
// You can construct a concrete instance of `GcpProxyCertificatesPtrInput` via:
//
//	        GcpProxyCertificatesArgs{...}
//
//	or:
//
//	        nil
type GcpProxyCertificatesPtrInput interface {
	pulumi.Input

	ToGcpProxyCertificatesPtrOutput() GcpProxyCertificatesPtrOutput
	ToGcpProxyCertificatesPtrOutputWithContext(context.Context) GcpProxyCertificatesPtrOutput
}

type gcpProxyCertificatesPtrType GcpProxyCertificatesArgs

func GcpProxyCertificatesPtr(v *GcpProxyCertificatesArgs) GcpProxyCertificatesPtrInput {
	return (*gcpProxyCertificatesPtrType)(v)
}

func (*gcpProxyCertificatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpProxyCertificates)(nil)).Elem()
}

func (i *gcpProxyCertificatesPtrType) ToGcpProxyCertificatesPtrOutput() GcpProxyCertificatesPtrOutput {
	return i.ToGcpProxyCertificatesPtrOutputWithContext(context.Background())
}

func (i *gcpProxyCertificatesPtrType) ToGcpProxyCertificatesPtrOutputWithContext(ctx context.Context) GcpProxyCertificatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpProxyCertificatesPtrOutput)
}

type GcpProxyCertificatesOutput struct{ *pulumi.OutputState }

func (GcpProxyCertificatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcpProxyCertificates)(nil)).Elem()
}

func (o GcpProxyCertificatesOutput) ToGcpProxyCertificatesOutput() GcpProxyCertificatesOutput {
	return o
}

func (o GcpProxyCertificatesOutput) ToGcpProxyCertificatesOutputWithContext(ctx context.Context) GcpProxyCertificatesOutput {
	return o
}

func (o GcpProxyCertificatesOutput) ToGcpProxyCertificatesPtrOutput() GcpProxyCertificatesPtrOutput {
	return o.ToGcpProxyCertificatesPtrOutputWithContext(context.Background())
}

func (o GcpProxyCertificatesOutput) ToGcpProxyCertificatesPtrOutputWithContext(ctx context.Context) GcpProxyCertificatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GcpProxyCertificates) *GcpProxyCertificates {
		return &v
	}).(GcpProxyCertificatesPtrOutput)
}

// Certificate secret ID
func (o GcpProxyCertificatesOutput) CertSecretId() pulumi.StringOutput {
	return o.ApplyT(func(v GcpProxyCertificates) string { return v.CertSecretId }).(pulumi.StringOutput)
}

// Private key secret ID
func (o GcpProxyCertificatesOutput) KeySecretId() pulumi.StringOutput {
	return o.ApplyT(func(v GcpProxyCertificates) string { return v.KeySecretId }).(pulumi.StringOutput)
}

type GcpProxyCertificatesPtrOutput struct{ *pulumi.OutputState }

func (GcpProxyCertificatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpProxyCertificates)(nil)).Elem()
}

func (o GcpProxyCertificatesPtrOutput) ToGcpProxyCertificatesPtrOutput() GcpProxyCertificatesPtrOutput {
	return o
}

func (o GcpProxyCertificatesPtrOutput) ToGcpProxyCertificatesPtrOutputWithContext(ctx context.Context) GcpProxyCertificatesPtrOutput {
	return o
}

func (o GcpProxyCertificatesPtrOutput) Elem() GcpProxyCertificatesOutput {
	return o.ApplyT(func(v *GcpProxyCertificates) GcpProxyCertificates {
		if v != nil {
			return *v
		}
		var ret GcpProxyCertificates
		return ret
	}).(GcpProxyCertificatesOutput)
}

// Certificate secret ID
func (o GcpProxyCertificatesPtrOutput) CertSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcpProxyCertificates) *string {
		if v == nil {
			return nil
		}
		return &v.CertSecretId
	}).(pulumi.StringPtrOutput)
}

// Private key secret ID
func (o GcpProxyCertificatesPtrOutput) KeySecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcpProxyCertificates) *string {
		if v == nil {
			return nil
		}
		return &v.KeySecretId
	}).(pulumi.StringPtrOutput)
}

type RuleEcsContainer struct {
	// Name of cluster in which service belong to
	Cluster string `pulumi:"cluster"`
	// Region of cluster
	Region string `pulumi:"region"`
	// Name of service to be onboarded
	Service string `pulumi:"service"`
	// Desired number of tasks on warming up a rule
	TaskCount *int `pulumi:"taskCount"`
}

// RuleEcsContainerInput is an input type that accepts RuleEcsContainerArgs and RuleEcsContainerOutput values.
// You can construct a concrete instance of `RuleEcsContainerInput` via:
//
//	RuleEcsContainerArgs{...}
type RuleEcsContainerInput interface {
	pulumi.Input

	ToRuleEcsContainerOutput() RuleEcsContainerOutput
	ToRuleEcsContainerOutputWithContext(context.Context) RuleEcsContainerOutput
}

type RuleEcsContainerArgs struct {
	// Name of cluster in which service belong to
	Cluster pulumi.StringInput `pulumi:"cluster"`
	// Region of cluster
	Region pulumi.StringInput `pulumi:"region"`
	// Name of service to be onboarded
	Service pulumi.StringInput `pulumi:"service"`
	// Desired number of tasks on warming up a rule
	TaskCount pulumi.IntPtrInput `pulumi:"taskCount"`
}

func (RuleEcsContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleEcsContainer)(nil)).Elem()
}

func (i RuleEcsContainerArgs) ToRuleEcsContainerOutput() RuleEcsContainerOutput {
	return i.ToRuleEcsContainerOutputWithContext(context.Background())
}

func (i RuleEcsContainerArgs) ToRuleEcsContainerOutputWithContext(ctx context.Context) RuleEcsContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleEcsContainerOutput)
}

func (i RuleEcsContainerArgs) ToRuleEcsContainerPtrOutput() RuleEcsContainerPtrOutput {
	return i.ToRuleEcsContainerPtrOutputWithContext(context.Background())
}

func (i RuleEcsContainerArgs) ToRuleEcsContainerPtrOutputWithContext(ctx context.Context) RuleEcsContainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleEcsContainerOutput).ToRuleEcsContainerPtrOutputWithContext(ctx)
}

// RuleEcsContainerPtrInput is an input type that accepts RuleEcsContainerArgs, RuleEcsContainerPtr and RuleEcsContainerPtrOutput values.
// You can construct a concrete instance of `RuleEcsContainerPtrInput` via:
//
//	        RuleEcsContainerArgs{...}
//
//	or:
//
//	        nil
type RuleEcsContainerPtrInput interface {
	pulumi.Input

	ToRuleEcsContainerPtrOutput() RuleEcsContainerPtrOutput
	ToRuleEcsContainerPtrOutputWithContext(context.Context) RuleEcsContainerPtrOutput
}

type ruleEcsContainerPtrType RuleEcsContainerArgs

func RuleEcsContainerPtr(v *RuleEcsContainerArgs) RuleEcsContainerPtrInput {
	return (*ruleEcsContainerPtrType)(v)
}

func (*ruleEcsContainerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleEcsContainer)(nil)).Elem()
}

func (i *ruleEcsContainerPtrType) ToRuleEcsContainerPtrOutput() RuleEcsContainerPtrOutput {
	return i.ToRuleEcsContainerPtrOutputWithContext(context.Background())
}

func (i *ruleEcsContainerPtrType) ToRuleEcsContainerPtrOutputWithContext(ctx context.Context) RuleEcsContainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleEcsContainerPtrOutput)
}

type RuleEcsContainerOutput struct{ *pulumi.OutputState }

func (RuleEcsContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleEcsContainer)(nil)).Elem()
}

func (o RuleEcsContainerOutput) ToRuleEcsContainerOutput() RuleEcsContainerOutput {
	return o
}

func (o RuleEcsContainerOutput) ToRuleEcsContainerOutputWithContext(ctx context.Context) RuleEcsContainerOutput {
	return o
}

func (o RuleEcsContainerOutput) ToRuleEcsContainerPtrOutput() RuleEcsContainerPtrOutput {
	return o.ToRuleEcsContainerPtrOutputWithContext(context.Background())
}

func (o RuleEcsContainerOutput) ToRuleEcsContainerPtrOutputWithContext(ctx context.Context) RuleEcsContainerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleEcsContainer) *RuleEcsContainer {
		return &v
	}).(RuleEcsContainerPtrOutput)
}

// Name of cluster in which service belong to
func (o RuleEcsContainerOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v RuleEcsContainer) string { return v.Cluster }).(pulumi.StringOutput)
}

// Region of cluster
func (o RuleEcsContainerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v RuleEcsContainer) string { return v.Region }).(pulumi.StringOutput)
}

// Name of service to be onboarded
func (o RuleEcsContainerOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v RuleEcsContainer) string { return v.Service }).(pulumi.StringOutput)
}

// Desired number of tasks on warming up a rule
func (o RuleEcsContainerOutput) TaskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleEcsContainer) *int { return v.TaskCount }).(pulumi.IntPtrOutput)
}

type RuleEcsContainerPtrOutput struct{ *pulumi.OutputState }

func (RuleEcsContainerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleEcsContainer)(nil)).Elem()
}

func (o RuleEcsContainerPtrOutput) ToRuleEcsContainerPtrOutput() RuleEcsContainerPtrOutput {
	return o
}

func (o RuleEcsContainerPtrOutput) ToRuleEcsContainerPtrOutputWithContext(ctx context.Context) RuleEcsContainerPtrOutput {
	return o
}

func (o RuleEcsContainerPtrOutput) Elem() RuleEcsContainerOutput {
	return o.ApplyT(func(v *RuleEcsContainer) RuleEcsContainer {
		if v != nil {
			return *v
		}
		var ret RuleEcsContainer
		return ret
	}).(RuleEcsContainerOutput)
}

// Name of cluster in which service belong to
func (o RuleEcsContainerPtrOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleEcsContainer) *string {
		if v == nil {
			return nil
		}
		return &v.Cluster
	}).(pulumi.StringPtrOutput)
}

// Region of cluster
func (o RuleEcsContainerPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleEcsContainer) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// Name of service to be onboarded
func (o RuleEcsContainerPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleEcsContainer) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

// Desired number of tasks on warming up a rule
func (o RuleEcsContainerPtrOutput) TaskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuleEcsContainer) *int {
		if v == nil {
			return nil
		}
		return v.TaskCount
	}).(pulumi.IntPtrOutput)
}

type RuleEcsDepend struct {
	// Number of seconds the rule should wait after warming up the dependent rule
	DelayInSec *int `pulumi:"delayInSec"`
	// Rule id of the dependent rule
	RuleId int `pulumi:"ruleId"`
}

// RuleEcsDependInput is an input type that accepts RuleEcsDependArgs and RuleEcsDependOutput values.
// You can construct a concrete instance of `RuleEcsDependInput` via:
//
//	RuleEcsDependArgs{...}
type RuleEcsDependInput interface {
	pulumi.Input

	ToRuleEcsDependOutput() RuleEcsDependOutput
	ToRuleEcsDependOutputWithContext(context.Context) RuleEcsDependOutput
}

type RuleEcsDependArgs struct {
	// Number of seconds the rule should wait after warming up the dependent rule
	DelayInSec pulumi.IntPtrInput `pulumi:"delayInSec"`
	// Rule id of the dependent rule
	RuleId pulumi.IntInput `pulumi:"ruleId"`
}

func (RuleEcsDependArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleEcsDepend)(nil)).Elem()
}

func (i RuleEcsDependArgs) ToRuleEcsDependOutput() RuleEcsDependOutput {
	return i.ToRuleEcsDependOutputWithContext(context.Background())
}

func (i RuleEcsDependArgs) ToRuleEcsDependOutputWithContext(ctx context.Context) RuleEcsDependOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleEcsDependOutput)
}

// RuleEcsDependArrayInput is an input type that accepts RuleEcsDependArray and RuleEcsDependArrayOutput values.
// You can construct a concrete instance of `RuleEcsDependArrayInput` via:
//
//	RuleEcsDependArray{ RuleEcsDependArgs{...} }
type RuleEcsDependArrayInput interface {
	pulumi.Input

	ToRuleEcsDependArrayOutput() RuleEcsDependArrayOutput
	ToRuleEcsDependArrayOutputWithContext(context.Context) RuleEcsDependArrayOutput
}

type RuleEcsDependArray []RuleEcsDependInput

func (RuleEcsDependArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleEcsDepend)(nil)).Elem()
}

func (i RuleEcsDependArray) ToRuleEcsDependArrayOutput() RuleEcsDependArrayOutput {
	return i.ToRuleEcsDependArrayOutputWithContext(context.Background())
}

func (i RuleEcsDependArray) ToRuleEcsDependArrayOutputWithContext(ctx context.Context) RuleEcsDependArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleEcsDependArrayOutput)
}

type RuleEcsDependOutput struct{ *pulumi.OutputState }

func (RuleEcsDependOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleEcsDepend)(nil)).Elem()
}

func (o RuleEcsDependOutput) ToRuleEcsDependOutput() RuleEcsDependOutput {
	return o
}

func (o RuleEcsDependOutput) ToRuleEcsDependOutputWithContext(ctx context.Context) RuleEcsDependOutput {
	return o
}

// Number of seconds the rule should wait after warming up the dependent rule
func (o RuleEcsDependOutput) DelayInSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleEcsDepend) *int { return v.DelayInSec }).(pulumi.IntPtrOutput)
}

// Rule id of the dependent rule
func (o RuleEcsDependOutput) RuleId() pulumi.IntOutput {
	return o.ApplyT(func(v RuleEcsDepend) int { return v.RuleId }).(pulumi.IntOutput)
}

type RuleEcsDependArrayOutput struct{ *pulumi.OutputState }

func (RuleEcsDependArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleEcsDepend)(nil)).Elem()
}

func (o RuleEcsDependArrayOutput) ToRuleEcsDependArrayOutput() RuleEcsDependArrayOutput {
	return o
}

func (o RuleEcsDependArrayOutput) ToRuleEcsDependArrayOutputWithContext(ctx context.Context) RuleEcsDependArrayOutput {
	return o
}

func (o RuleEcsDependArrayOutput) Index(i pulumi.IntInput) RuleEcsDependOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleEcsDepend {
		return vs[0].([]RuleEcsDepend)[vs[1].(int)]
	}).(RuleEcsDependOutput)
}

type RuleEcsHttp struct {
	// Id of the proxy
	ProxyId string `pulumi:"proxyId"`
}

// RuleEcsHttpInput is an input type that accepts RuleEcsHttpArgs and RuleEcsHttpOutput values.
// You can construct a concrete instance of `RuleEcsHttpInput` via:
//
//	RuleEcsHttpArgs{...}
type RuleEcsHttpInput interface {
	pulumi.Input

	ToRuleEcsHttpOutput() RuleEcsHttpOutput
	ToRuleEcsHttpOutputWithContext(context.Context) RuleEcsHttpOutput
}

type RuleEcsHttpArgs struct {
	// Id of the proxy
	ProxyId pulumi.StringInput `pulumi:"proxyId"`
}

func (RuleEcsHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleEcsHttp)(nil)).Elem()
}

func (i RuleEcsHttpArgs) ToRuleEcsHttpOutput() RuleEcsHttpOutput {
	return i.ToRuleEcsHttpOutputWithContext(context.Background())
}

func (i RuleEcsHttpArgs) ToRuleEcsHttpOutputWithContext(ctx context.Context) RuleEcsHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleEcsHttpOutput)
}

// RuleEcsHttpArrayInput is an input type that accepts RuleEcsHttpArray and RuleEcsHttpArrayOutput values.
// You can construct a concrete instance of `RuleEcsHttpArrayInput` via:
//
//	RuleEcsHttpArray{ RuleEcsHttpArgs{...} }
type RuleEcsHttpArrayInput interface {
	pulumi.Input

	ToRuleEcsHttpArrayOutput() RuleEcsHttpArrayOutput
	ToRuleEcsHttpArrayOutputWithContext(context.Context) RuleEcsHttpArrayOutput
}

type RuleEcsHttpArray []RuleEcsHttpInput

func (RuleEcsHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleEcsHttp)(nil)).Elem()
}

func (i RuleEcsHttpArray) ToRuleEcsHttpArrayOutput() RuleEcsHttpArrayOutput {
	return i.ToRuleEcsHttpArrayOutputWithContext(context.Background())
}

func (i RuleEcsHttpArray) ToRuleEcsHttpArrayOutputWithContext(ctx context.Context) RuleEcsHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleEcsHttpArrayOutput)
}

type RuleEcsHttpOutput struct{ *pulumi.OutputState }

func (RuleEcsHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleEcsHttp)(nil)).Elem()
}

func (o RuleEcsHttpOutput) ToRuleEcsHttpOutput() RuleEcsHttpOutput {
	return o
}

func (o RuleEcsHttpOutput) ToRuleEcsHttpOutputWithContext(ctx context.Context) RuleEcsHttpOutput {
	return o
}

// Id of the proxy
func (o RuleEcsHttpOutput) ProxyId() pulumi.StringOutput {
	return o.ApplyT(func(v RuleEcsHttp) string { return v.ProxyId }).(pulumi.StringOutput)
}

type RuleEcsHttpArrayOutput struct{ *pulumi.OutputState }

func (RuleEcsHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleEcsHttp)(nil)).Elem()
}

func (o RuleEcsHttpArrayOutput) ToRuleEcsHttpArrayOutput() RuleEcsHttpArrayOutput {
	return o
}

func (o RuleEcsHttpArrayOutput) ToRuleEcsHttpArrayOutputWithContext(ctx context.Context) RuleEcsHttpArrayOutput {
	return o
}

func (o RuleEcsHttpArrayOutput) Index(i pulumi.IntInput) RuleEcsHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleEcsHttp {
		return vs[0].([]RuleEcsHttp)[vs[1].(int)]
	}).(RuleEcsHttpOutput)
}

type RuleRdsDatabase struct {
	// ID of the database
	Id string `pulumi:"id"`
	// Region to which database belong to
	Region string `pulumi:"region"`
}

// RuleRdsDatabaseInput is an input type that accepts RuleRdsDatabaseArgs and RuleRdsDatabaseOutput values.
// You can construct a concrete instance of `RuleRdsDatabaseInput` via:
//
//	RuleRdsDatabaseArgs{...}
type RuleRdsDatabaseInput interface {
	pulumi.Input

	ToRuleRdsDatabaseOutput() RuleRdsDatabaseOutput
	ToRuleRdsDatabaseOutputWithContext(context.Context) RuleRdsDatabaseOutput
}

type RuleRdsDatabaseArgs struct {
	// ID of the database
	Id pulumi.StringInput `pulumi:"id"`
	// Region to which database belong to
	Region pulumi.StringInput `pulumi:"region"`
}

func (RuleRdsDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRdsDatabase)(nil)).Elem()
}

func (i RuleRdsDatabaseArgs) ToRuleRdsDatabaseOutput() RuleRdsDatabaseOutput {
	return i.ToRuleRdsDatabaseOutputWithContext(context.Background())
}

func (i RuleRdsDatabaseArgs) ToRuleRdsDatabaseOutputWithContext(ctx context.Context) RuleRdsDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRdsDatabaseOutput)
}

func (i RuleRdsDatabaseArgs) ToRuleRdsDatabasePtrOutput() RuleRdsDatabasePtrOutput {
	return i.ToRuleRdsDatabasePtrOutputWithContext(context.Background())
}

func (i RuleRdsDatabaseArgs) ToRuleRdsDatabasePtrOutputWithContext(ctx context.Context) RuleRdsDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRdsDatabaseOutput).ToRuleRdsDatabasePtrOutputWithContext(ctx)
}

// RuleRdsDatabasePtrInput is an input type that accepts RuleRdsDatabaseArgs, RuleRdsDatabasePtr and RuleRdsDatabasePtrOutput values.
// You can construct a concrete instance of `RuleRdsDatabasePtrInput` via:
//
//	        RuleRdsDatabaseArgs{...}
//
//	or:
//
//	        nil
type RuleRdsDatabasePtrInput interface {
	pulumi.Input

	ToRuleRdsDatabasePtrOutput() RuleRdsDatabasePtrOutput
	ToRuleRdsDatabasePtrOutputWithContext(context.Context) RuleRdsDatabasePtrOutput
}

type ruleRdsDatabasePtrType RuleRdsDatabaseArgs

func RuleRdsDatabasePtr(v *RuleRdsDatabaseArgs) RuleRdsDatabasePtrInput {
	return (*ruleRdsDatabasePtrType)(v)
}

func (*ruleRdsDatabasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleRdsDatabase)(nil)).Elem()
}

func (i *ruleRdsDatabasePtrType) ToRuleRdsDatabasePtrOutput() RuleRdsDatabasePtrOutput {
	return i.ToRuleRdsDatabasePtrOutputWithContext(context.Background())
}

func (i *ruleRdsDatabasePtrType) ToRuleRdsDatabasePtrOutputWithContext(ctx context.Context) RuleRdsDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRdsDatabasePtrOutput)
}

type RuleRdsDatabaseOutput struct{ *pulumi.OutputState }

func (RuleRdsDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRdsDatabase)(nil)).Elem()
}

func (o RuleRdsDatabaseOutput) ToRuleRdsDatabaseOutput() RuleRdsDatabaseOutput {
	return o
}

func (o RuleRdsDatabaseOutput) ToRuleRdsDatabaseOutputWithContext(ctx context.Context) RuleRdsDatabaseOutput {
	return o
}

func (o RuleRdsDatabaseOutput) ToRuleRdsDatabasePtrOutput() RuleRdsDatabasePtrOutput {
	return o.ToRuleRdsDatabasePtrOutputWithContext(context.Background())
}

func (o RuleRdsDatabaseOutput) ToRuleRdsDatabasePtrOutputWithContext(ctx context.Context) RuleRdsDatabasePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleRdsDatabase) *RuleRdsDatabase {
		return &v
	}).(RuleRdsDatabasePtrOutput)
}

// ID of the database
func (o RuleRdsDatabaseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RuleRdsDatabase) string { return v.Id }).(pulumi.StringOutput)
}

// Region to which database belong to
func (o RuleRdsDatabaseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v RuleRdsDatabase) string { return v.Region }).(pulumi.StringOutput)
}

type RuleRdsDatabasePtrOutput struct{ *pulumi.OutputState }

func (RuleRdsDatabasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleRdsDatabase)(nil)).Elem()
}

func (o RuleRdsDatabasePtrOutput) ToRuleRdsDatabasePtrOutput() RuleRdsDatabasePtrOutput {
	return o
}

func (o RuleRdsDatabasePtrOutput) ToRuleRdsDatabasePtrOutputWithContext(ctx context.Context) RuleRdsDatabasePtrOutput {
	return o
}

func (o RuleRdsDatabasePtrOutput) Elem() RuleRdsDatabaseOutput {
	return o.ApplyT(func(v *RuleRdsDatabase) RuleRdsDatabase {
		if v != nil {
			return *v
		}
		var ret RuleRdsDatabase
		return ret
	}).(RuleRdsDatabaseOutput)
}

// ID of the database
func (o RuleRdsDatabasePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleRdsDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Region to which database belong to
func (o RuleRdsDatabasePtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleRdsDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

type RuleRdsDepend struct {
	// Number of seconds the rule should wait after warming up the dependent rule
	DelayInSec *int `pulumi:"delayInSec"`
	// Rule id of the dependent rule
	RuleId int `pulumi:"ruleId"`
}

// RuleRdsDependInput is an input type that accepts RuleRdsDependArgs and RuleRdsDependOutput values.
// You can construct a concrete instance of `RuleRdsDependInput` via:
//
//	RuleRdsDependArgs{...}
type RuleRdsDependInput interface {
	pulumi.Input

	ToRuleRdsDependOutput() RuleRdsDependOutput
	ToRuleRdsDependOutputWithContext(context.Context) RuleRdsDependOutput
}

type RuleRdsDependArgs struct {
	// Number of seconds the rule should wait after warming up the dependent rule
	DelayInSec pulumi.IntPtrInput `pulumi:"delayInSec"`
	// Rule id of the dependent rule
	RuleId pulumi.IntInput `pulumi:"ruleId"`
}

func (RuleRdsDependArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRdsDepend)(nil)).Elem()
}

func (i RuleRdsDependArgs) ToRuleRdsDependOutput() RuleRdsDependOutput {
	return i.ToRuleRdsDependOutputWithContext(context.Background())
}

func (i RuleRdsDependArgs) ToRuleRdsDependOutputWithContext(ctx context.Context) RuleRdsDependOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRdsDependOutput)
}

// RuleRdsDependArrayInput is an input type that accepts RuleRdsDependArray and RuleRdsDependArrayOutput values.
// You can construct a concrete instance of `RuleRdsDependArrayInput` via:
//
//	RuleRdsDependArray{ RuleRdsDependArgs{...} }
type RuleRdsDependArrayInput interface {
	pulumi.Input

	ToRuleRdsDependArrayOutput() RuleRdsDependArrayOutput
	ToRuleRdsDependArrayOutputWithContext(context.Context) RuleRdsDependArrayOutput
}

type RuleRdsDependArray []RuleRdsDependInput

func (RuleRdsDependArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleRdsDepend)(nil)).Elem()
}

func (i RuleRdsDependArray) ToRuleRdsDependArrayOutput() RuleRdsDependArrayOutput {
	return i.ToRuleRdsDependArrayOutputWithContext(context.Background())
}

func (i RuleRdsDependArray) ToRuleRdsDependArrayOutputWithContext(ctx context.Context) RuleRdsDependArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRdsDependArrayOutput)
}

type RuleRdsDependOutput struct{ *pulumi.OutputState }

func (RuleRdsDependOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRdsDepend)(nil)).Elem()
}

func (o RuleRdsDependOutput) ToRuleRdsDependOutput() RuleRdsDependOutput {
	return o
}

func (o RuleRdsDependOutput) ToRuleRdsDependOutputWithContext(ctx context.Context) RuleRdsDependOutput {
	return o
}

// Number of seconds the rule should wait after warming up the dependent rule
func (o RuleRdsDependOutput) DelayInSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleRdsDepend) *int { return v.DelayInSec }).(pulumi.IntPtrOutput)
}

// Rule id of the dependent rule
func (o RuleRdsDependOutput) RuleId() pulumi.IntOutput {
	return o.ApplyT(func(v RuleRdsDepend) int { return v.RuleId }).(pulumi.IntOutput)
}

type RuleRdsDependArrayOutput struct{ *pulumi.OutputState }

func (RuleRdsDependArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleRdsDepend)(nil)).Elem()
}

func (o RuleRdsDependArrayOutput) ToRuleRdsDependArrayOutput() RuleRdsDependArrayOutput {
	return o
}

func (o RuleRdsDependArrayOutput) ToRuleRdsDependArrayOutputWithContext(ctx context.Context) RuleRdsDependArrayOutput {
	return o
}

func (o RuleRdsDependArrayOutput) Index(i pulumi.IntInput) RuleRdsDependOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleRdsDepend {
		return vs[0].([]RuleRdsDepend)[vs[1].(int)]
	}).(RuleRdsDependOutput)
}

type RuleRdsTcp struct {
	// Additional tcp forwarding rules
	ForwardRules []RuleRdsTcpForwardRule `pulumi:"forwardRules"`
	// Id of the Proxy
	ProxyId string `pulumi:"proxyId"`
}

// RuleRdsTcpInput is an input type that accepts RuleRdsTcpArgs and RuleRdsTcpOutput values.
// You can construct a concrete instance of `RuleRdsTcpInput` via:
//
//	RuleRdsTcpArgs{...}
type RuleRdsTcpInput interface {
	pulumi.Input

	ToRuleRdsTcpOutput() RuleRdsTcpOutput
	ToRuleRdsTcpOutputWithContext(context.Context) RuleRdsTcpOutput
}

type RuleRdsTcpArgs struct {
	// Additional tcp forwarding rules
	ForwardRules RuleRdsTcpForwardRuleArrayInput `pulumi:"forwardRules"`
	// Id of the Proxy
	ProxyId pulumi.StringInput `pulumi:"proxyId"`
}

func (RuleRdsTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRdsTcp)(nil)).Elem()
}

func (i RuleRdsTcpArgs) ToRuleRdsTcpOutput() RuleRdsTcpOutput {
	return i.ToRuleRdsTcpOutputWithContext(context.Background())
}

func (i RuleRdsTcpArgs) ToRuleRdsTcpOutputWithContext(ctx context.Context) RuleRdsTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRdsTcpOutput)
}

// RuleRdsTcpArrayInput is an input type that accepts RuleRdsTcpArray and RuleRdsTcpArrayOutput values.
// You can construct a concrete instance of `RuleRdsTcpArrayInput` via:
//
//	RuleRdsTcpArray{ RuleRdsTcpArgs{...} }
type RuleRdsTcpArrayInput interface {
	pulumi.Input

	ToRuleRdsTcpArrayOutput() RuleRdsTcpArrayOutput
	ToRuleRdsTcpArrayOutputWithContext(context.Context) RuleRdsTcpArrayOutput
}

type RuleRdsTcpArray []RuleRdsTcpInput

func (RuleRdsTcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleRdsTcp)(nil)).Elem()
}

func (i RuleRdsTcpArray) ToRuleRdsTcpArrayOutput() RuleRdsTcpArrayOutput {
	return i.ToRuleRdsTcpArrayOutputWithContext(context.Background())
}

func (i RuleRdsTcpArray) ToRuleRdsTcpArrayOutputWithContext(ctx context.Context) RuleRdsTcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRdsTcpArrayOutput)
}

type RuleRdsTcpOutput struct{ *pulumi.OutputState }

func (RuleRdsTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRdsTcp)(nil)).Elem()
}

func (o RuleRdsTcpOutput) ToRuleRdsTcpOutput() RuleRdsTcpOutput {
	return o
}

func (o RuleRdsTcpOutput) ToRuleRdsTcpOutputWithContext(ctx context.Context) RuleRdsTcpOutput {
	return o
}

// Additional tcp forwarding rules
func (o RuleRdsTcpOutput) ForwardRules() RuleRdsTcpForwardRuleArrayOutput {
	return o.ApplyT(func(v RuleRdsTcp) []RuleRdsTcpForwardRule { return v.ForwardRules }).(RuleRdsTcpForwardRuleArrayOutput)
}

// Id of the Proxy
func (o RuleRdsTcpOutput) ProxyId() pulumi.StringOutput {
	return o.ApplyT(func(v RuleRdsTcp) string { return v.ProxyId }).(pulumi.StringOutput)
}

type RuleRdsTcpArrayOutput struct{ *pulumi.OutputState }

func (RuleRdsTcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleRdsTcp)(nil)).Elem()
}

func (o RuleRdsTcpArrayOutput) ToRuleRdsTcpArrayOutput() RuleRdsTcpArrayOutput {
	return o
}

func (o RuleRdsTcpArrayOutput) ToRuleRdsTcpArrayOutputWithContext(ctx context.Context) RuleRdsTcpArrayOutput {
	return o
}

func (o RuleRdsTcpArrayOutput) Index(i pulumi.IntInput) RuleRdsTcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleRdsTcp {
		return vs[0].([]RuleRdsTcp)[vs[1].(int)]
	}).(RuleRdsTcpOutput)
}

type RuleRdsTcpForwardRule struct {
	// Port to listen on the proxy
	ConnectOn *int `pulumi:"connectOn"`
	// Port to listen on the vm
	Port int `pulumi:"port"`
}

// RuleRdsTcpForwardRuleInput is an input type that accepts RuleRdsTcpForwardRuleArgs and RuleRdsTcpForwardRuleOutput values.
// You can construct a concrete instance of `RuleRdsTcpForwardRuleInput` via:
//
//	RuleRdsTcpForwardRuleArgs{...}
type RuleRdsTcpForwardRuleInput interface {
	pulumi.Input

	ToRuleRdsTcpForwardRuleOutput() RuleRdsTcpForwardRuleOutput
	ToRuleRdsTcpForwardRuleOutputWithContext(context.Context) RuleRdsTcpForwardRuleOutput
}

type RuleRdsTcpForwardRuleArgs struct {
	// Port to listen on the proxy
	ConnectOn pulumi.IntPtrInput `pulumi:"connectOn"`
	// Port to listen on the vm
	Port pulumi.IntInput `pulumi:"port"`
}

func (RuleRdsTcpForwardRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRdsTcpForwardRule)(nil)).Elem()
}

func (i RuleRdsTcpForwardRuleArgs) ToRuleRdsTcpForwardRuleOutput() RuleRdsTcpForwardRuleOutput {
	return i.ToRuleRdsTcpForwardRuleOutputWithContext(context.Background())
}

func (i RuleRdsTcpForwardRuleArgs) ToRuleRdsTcpForwardRuleOutputWithContext(ctx context.Context) RuleRdsTcpForwardRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRdsTcpForwardRuleOutput)
}

// RuleRdsTcpForwardRuleArrayInput is an input type that accepts RuleRdsTcpForwardRuleArray and RuleRdsTcpForwardRuleArrayOutput values.
// You can construct a concrete instance of `RuleRdsTcpForwardRuleArrayInput` via:
//
//	RuleRdsTcpForwardRuleArray{ RuleRdsTcpForwardRuleArgs{...} }
type RuleRdsTcpForwardRuleArrayInput interface {
	pulumi.Input

	ToRuleRdsTcpForwardRuleArrayOutput() RuleRdsTcpForwardRuleArrayOutput
	ToRuleRdsTcpForwardRuleArrayOutputWithContext(context.Context) RuleRdsTcpForwardRuleArrayOutput
}

type RuleRdsTcpForwardRuleArray []RuleRdsTcpForwardRuleInput

func (RuleRdsTcpForwardRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleRdsTcpForwardRule)(nil)).Elem()
}

func (i RuleRdsTcpForwardRuleArray) ToRuleRdsTcpForwardRuleArrayOutput() RuleRdsTcpForwardRuleArrayOutput {
	return i.ToRuleRdsTcpForwardRuleArrayOutputWithContext(context.Background())
}

func (i RuleRdsTcpForwardRuleArray) ToRuleRdsTcpForwardRuleArrayOutputWithContext(ctx context.Context) RuleRdsTcpForwardRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRdsTcpForwardRuleArrayOutput)
}

type RuleRdsTcpForwardRuleOutput struct{ *pulumi.OutputState }

func (RuleRdsTcpForwardRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRdsTcpForwardRule)(nil)).Elem()
}

func (o RuleRdsTcpForwardRuleOutput) ToRuleRdsTcpForwardRuleOutput() RuleRdsTcpForwardRuleOutput {
	return o
}

func (o RuleRdsTcpForwardRuleOutput) ToRuleRdsTcpForwardRuleOutputWithContext(ctx context.Context) RuleRdsTcpForwardRuleOutput {
	return o
}

// Port to listen on the proxy
func (o RuleRdsTcpForwardRuleOutput) ConnectOn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleRdsTcpForwardRule) *int { return v.ConnectOn }).(pulumi.IntPtrOutput)
}

// Port to listen on the vm
func (o RuleRdsTcpForwardRuleOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v RuleRdsTcpForwardRule) int { return v.Port }).(pulumi.IntOutput)
}

type RuleRdsTcpForwardRuleArrayOutput struct{ *pulumi.OutputState }

func (RuleRdsTcpForwardRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleRdsTcpForwardRule)(nil)).Elem()
}

func (o RuleRdsTcpForwardRuleArrayOutput) ToRuleRdsTcpForwardRuleArrayOutput() RuleRdsTcpForwardRuleArrayOutput {
	return o
}

func (o RuleRdsTcpForwardRuleArrayOutput) ToRuleRdsTcpForwardRuleArrayOutputWithContext(ctx context.Context) RuleRdsTcpForwardRuleArrayOutput {
	return o
}

func (o RuleRdsTcpForwardRuleArrayOutput) Index(i pulumi.IntInput) RuleRdsTcpForwardRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleRdsTcpForwardRule {
		return vs[0].([]RuleRdsTcpForwardRule)[vs[1].(int)]
	}).(RuleRdsTcpForwardRuleOutput)
}

type RuleVmDepend struct {
	// Number of seconds the rule should wait after warming up the dependent rule
	DelayInSec *int `pulumi:"delayInSec"`
	// Rule id of the dependent rule
	RuleId int `pulumi:"ruleId"`
}

// RuleVmDependInput is an input type that accepts RuleVmDependArgs and RuleVmDependOutput values.
// You can construct a concrete instance of `RuleVmDependInput` via:
//
//	RuleVmDependArgs{...}
type RuleVmDependInput interface {
	pulumi.Input

	ToRuleVmDependOutput() RuleVmDependOutput
	ToRuleVmDependOutputWithContext(context.Context) RuleVmDependOutput
}

type RuleVmDependArgs struct {
	// Number of seconds the rule should wait after warming up the dependent rule
	DelayInSec pulumi.IntPtrInput `pulumi:"delayInSec"`
	// Rule id of the dependent rule
	RuleId pulumi.IntInput `pulumi:"ruleId"`
}

func (RuleVmDependArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleVmDepend)(nil)).Elem()
}

func (i RuleVmDependArgs) ToRuleVmDependOutput() RuleVmDependOutput {
	return i.ToRuleVmDependOutputWithContext(context.Background())
}

func (i RuleVmDependArgs) ToRuleVmDependOutputWithContext(ctx context.Context) RuleVmDependOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleVmDependOutput)
}

// RuleVmDependArrayInput is an input type that accepts RuleVmDependArray and RuleVmDependArrayOutput values.
// You can construct a concrete instance of `RuleVmDependArrayInput` via:
//
//	RuleVmDependArray{ RuleVmDependArgs{...} }
type RuleVmDependArrayInput interface {
	pulumi.Input

	ToRuleVmDependArrayOutput() RuleVmDependArrayOutput
	ToRuleVmDependArrayOutputWithContext(context.Context) RuleVmDependArrayOutput
}

type RuleVmDependArray []RuleVmDependInput

func (RuleVmDependArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleVmDepend)(nil)).Elem()
}

func (i RuleVmDependArray) ToRuleVmDependArrayOutput() RuleVmDependArrayOutput {
	return i.ToRuleVmDependArrayOutputWithContext(context.Background())
}

func (i RuleVmDependArray) ToRuleVmDependArrayOutputWithContext(ctx context.Context) RuleVmDependArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleVmDependArrayOutput)
}

type RuleVmDependOutput struct{ *pulumi.OutputState }

func (RuleVmDependOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleVmDepend)(nil)).Elem()
}

func (o RuleVmDependOutput) ToRuleVmDependOutput() RuleVmDependOutput {
	return o
}

func (o RuleVmDependOutput) ToRuleVmDependOutputWithContext(ctx context.Context) RuleVmDependOutput {
	return o
}

// Number of seconds the rule should wait after warming up the dependent rule
func (o RuleVmDependOutput) DelayInSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleVmDepend) *int { return v.DelayInSec }).(pulumi.IntPtrOutput)
}

// Rule id of the dependent rule
func (o RuleVmDependOutput) RuleId() pulumi.IntOutput {
	return o.ApplyT(func(v RuleVmDepend) int { return v.RuleId }).(pulumi.IntOutput)
}

type RuleVmDependArrayOutput struct{ *pulumi.OutputState }

func (RuleVmDependArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleVmDepend)(nil)).Elem()
}

func (o RuleVmDependArrayOutput) ToRuleVmDependArrayOutput() RuleVmDependArrayOutput {
	return o
}

func (o RuleVmDependArrayOutput) ToRuleVmDependArrayOutputWithContext(ctx context.Context) RuleVmDependArrayOutput {
	return o
}

func (o RuleVmDependArrayOutput) Index(i pulumi.IntInput) RuleVmDependOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleVmDepend {
		return vs[0].([]RuleVmDepend)[vs[1].(int)]
	}).(RuleVmDependOutput)
}

type RuleVmFilter struct {
	// Regions of instances that needs to be managed using the AutoStopping rules
	Regions []string `pulumi:"regions"`
	// Tags of instances that needs to be managed using the AutoStopping rules
	Tags []RuleVmFilterTag `pulumi:"tags"`
	// Ids of instances that needs to be managed using the AutoStopping rules
	VmIds []string `pulumi:"vmIds"`
	// Zones of instances that needs to be managed using the AutoStopping rules
	Zones []string `pulumi:"zones"`
}

// RuleVmFilterInput is an input type that accepts RuleVmFilterArgs and RuleVmFilterOutput values.
// You can construct a concrete instance of `RuleVmFilterInput` via:
//
//	RuleVmFilterArgs{...}
type RuleVmFilterInput interface {
	pulumi.Input

	ToRuleVmFilterOutput() RuleVmFilterOutput
	ToRuleVmFilterOutputWithContext(context.Context) RuleVmFilterOutput
}

type RuleVmFilterArgs struct {
	// Regions of instances that needs to be managed using the AutoStopping rules
	Regions pulumi.StringArrayInput `pulumi:"regions"`
	// Tags of instances that needs to be managed using the AutoStopping rules
	Tags RuleVmFilterTagArrayInput `pulumi:"tags"`
	// Ids of instances that needs to be managed using the AutoStopping rules
	VmIds pulumi.StringArrayInput `pulumi:"vmIds"`
	// Zones of instances that needs to be managed using the AutoStopping rules
	Zones pulumi.StringArrayInput `pulumi:"zones"`
}

func (RuleVmFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleVmFilter)(nil)).Elem()
}

func (i RuleVmFilterArgs) ToRuleVmFilterOutput() RuleVmFilterOutput {
	return i.ToRuleVmFilterOutputWithContext(context.Background())
}

func (i RuleVmFilterArgs) ToRuleVmFilterOutputWithContext(ctx context.Context) RuleVmFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleVmFilterOutput)
}

func (i RuleVmFilterArgs) ToRuleVmFilterPtrOutput() RuleVmFilterPtrOutput {
	return i.ToRuleVmFilterPtrOutputWithContext(context.Background())
}

func (i RuleVmFilterArgs) ToRuleVmFilterPtrOutputWithContext(ctx context.Context) RuleVmFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleVmFilterOutput).ToRuleVmFilterPtrOutputWithContext(ctx)
}

// RuleVmFilterPtrInput is an input type that accepts RuleVmFilterArgs, RuleVmFilterPtr and RuleVmFilterPtrOutput values.
// You can construct a concrete instance of `RuleVmFilterPtrInput` via:
//
//	        RuleVmFilterArgs{...}
//
//	or:
//
//	        nil
type RuleVmFilterPtrInput interface {
	pulumi.Input

	ToRuleVmFilterPtrOutput() RuleVmFilterPtrOutput
	ToRuleVmFilterPtrOutputWithContext(context.Context) RuleVmFilterPtrOutput
}

type ruleVmFilterPtrType RuleVmFilterArgs

func RuleVmFilterPtr(v *RuleVmFilterArgs) RuleVmFilterPtrInput {
	return (*ruleVmFilterPtrType)(v)
}

func (*ruleVmFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleVmFilter)(nil)).Elem()
}

func (i *ruleVmFilterPtrType) ToRuleVmFilterPtrOutput() RuleVmFilterPtrOutput {
	return i.ToRuleVmFilterPtrOutputWithContext(context.Background())
}

func (i *ruleVmFilterPtrType) ToRuleVmFilterPtrOutputWithContext(ctx context.Context) RuleVmFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleVmFilterPtrOutput)
}

type RuleVmFilterOutput struct{ *pulumi.OutputState }

func (RuleVmFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleVmFilter)(nil)).Elem()
}

func (o RuleVmFilterOutput) ToRuleVmFilterOutput() RuleVmFilterOutput {
	return o
}

func (o RuleVmFilterOutput) ToRuleVmFilterOutputWithContext(ctx context.Context) RuleVmFilterOutput {
	return o
}

func (o RuleVmFilterOutput) ToRuleVmFilterPtrOutput() RuleVmFilterPtrOutput {
	return o.ToRuleVmFilterPtrOutputWithContext(context.Background())
}

func (o RuleVmFilterOutput) ToRuleVmFilterPtrOutputWithContext(ctx context.Context) RuleVmFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleVmFilter) *RuleVmFilter {
		return &v
	}).(RuleVmFilterPtrOutput)
}

// Regions of instances that needs to be managed using the AutoStopping rules
func (o RuleVmFilterOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleVmFilter) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

// Tags of instances that needs to be managed using the AutoStopping rules
func (o RuleVmFilterOutput) Tags() RuleVmFilterTagArrayOutput {
	return o.ApplyT(func(v RuleVmFilter) []RuleVmFilterTag { return v.Tags }).(RuleVmFilterTagArrayOutput)
}

// Ids of instances that needs to be managed using the AutoStopping rules
func (o RuleVmFilterOutput) VmIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleVmFilter) []string { return v.VmIds }).(pulumi.StringArrayOutput)
}

// Zones of instances that needs to be managed using the AutoStopping rules
func (o RuleVmFilterOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleVmFilter) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

type RuleVmFilterPtrOutput struct{ *pulumi.OutputState }

func (RuleVmFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleVmFilter)(nil)).Elem()
}

func (o RuleVmFilterPtrOutput) ToRuleVmFilterPtrOutput() RuleVmFilterPtrOutput {
	return o
}

func (o RuleVmFilterPtrOutput) ToRuleVmFilterPtrOutputWithContext(ctx context.Context) RuleVmFilterPtrOutput {
	return o
}

func (o RuleVmFilterPtrOutput) Elem() RuleVmFilterOutput {
	return o.ApplyT(func(v *RuleVmFilter) RuleVmFilter {
		if v != nil {
			return *v
		}
		var ret RuleVmFilter
		return ret
	}).(RuleVmFilterOutput)
}

// Regions of instances that needs to be managed using the AutoStopping rules
func (o RuleVmFilterPtrOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuleVmFilter) []string {
		if v == nil {
			return nil
		}
		return v.Regions
	}).(pulumi.StringArrayOutput)
}

// Tags of instances that needs to be managed using the AutoStopping rules
func (o RuleVmFilterPtrOutput) Tags() RuleVmFilterTagArrayOutput {
	return o.ApplyT(func(v *RuleVmFilter) []RuleVmFilterTag {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(RuleVmFilterTagArrayOutput)
}

// Ids of instances that needs to be managed using the AutoStopping rules
func (o RuleVmFilterPtrOutput) VmIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuleVmFilter) []string {
		if v == nil {
			return nil
		}
		return v.VmIds
	}).(pulumi.StringArrayOutput)
}

// Zones of instances that needs to be managed using the AutoStopping rules
func (o RuleVmFilterPtrOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuleVmFilter) []string {
		if v == nil {
			return nil
		}
		return v.Zones
	}).(pulumi.StringArrayOutput)
}

type RuleVmFilterTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// RuleVmFilterTagInput is an input type that accepts RuleVmFilterTagArgs and RuleVmFilterTagOutput values.
// You can construct a concrete instance of `RuleVmFilterTagInput` via:
//
//	RuleVmFilterTagArgs{...}
type RuleVmFilterTagInput interface {
	pulumi.Input

	ToRuleVmFilterTagOutput() RuleVmFilterTagOutput
	ToRuleVmFilterTagOutputWithContext(context.Context) RuleVmFilterTagOutput
}

type RuleVmFilterTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (RuleVmFilterTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleVmFilterTag)(nil)).Elem()
}

func (i RuleVmFilterTagArgs) ToRuleVmFilterTagOutput() RuleVmFilterTagOutput {
	return i.ToRuleVmFilterTagOutputWithContext(context.Background())
}

func (i RuleVmFilterTagArgs) ToRuleVmFilterTagOutputWithContext(ctx context.Context) RuleVmFilterTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleVmFilterTagOutput)
}

// RuleVmFilterTagArrayInput is an input type that accepts RuleVmFilterTagArray and RuleVmFilterTagArrayOutput values.
// You can construct a concrete instance of `RuleVmFilterTagArrayInput` via:
//
//	RuleVmFilterTagArray{ RuleVmFilterTagArgs{...} }
type RuleVmFilterTagArrayInput interface {
	pulumi.Input

	ToRuleVmFilterTagArrayOutput() RuleVmFilterTagArrayOutput
	ToRuleVmFilterTagArrayOutputWithContext(context.Context) RuleVmFilterTagArrayOutput
}

type RuleVmFilterTagArray []RuleVmFilterTagInput

func (RuleVmFilterTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleVmFilterTag)(nil)).Elem()
}

func (i RuleVmFilterTagArray) ToRuleVmFilterTagArrayOutput() RuleVmFilterTagArrayOutput {
	return i.ToRuleVmFilterTagArrayOutputWithContext(context.Background())
}

func (i RuleVmFilterTagArray) ToRuleVmFilterTagArrayOutputWithContext(ctx context.Context) RuleVmFilterTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleVmFilterTagArrayOutput)
}

type RuleVmFilterTagOutput struct{ *pulumi.OutputState }

func (RuleVmFilterTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleVmFilterTag)(nil)).Elem()
}

func (o RuleVmFilterTagOutput) ToRuleVmFilterTagOutput() RuleVmFilterTagOutput {
	return o
}

func (o RuleVmFilterTagOutput) ToRuleVmFilterTagOutputWithContext(ctx context.Context) RuleVmFilterTagOutput {
	return o
}

func (o RuleVmFilterTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RuleVmFilterTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o RuleVmFilterTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RuleVmFilterTag) string { return v.Value }).(pulumi.StringOutput)
}

type RuleVmFilterTagArrayOutput struct{ *pulumi.OutputState }

func (RuleVmFilterTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleVmFilterTag)(nil)).Elem()
}

func (o RuleVmFilterTagArrayOutput) ToRuleVmFilterTagArrayOutput() RuleVmFilterTagArrayOutput {
	return o
}

func (o RuleVmFilterTagArrayOutput) ToRuleVmFilterTagArrayOutputWithContext(ctx context.Context) RuleVmFilterTagArrayOutput {
	return o
}

func (o RuleVmFilterTagArrayOutput) Index(i pulumi.IntInput) RuleVmFilterTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleVmFilterTag {
		return vs[0].([]RuleVmFilterTag)[vs[1].(int)]
	}).(RuleVmFilterTagOutput)
}

type RuleVmHttp struct {
	// Health Check Details
	Healths []RuleVmHttpHealth `pulumi:"healths"`
	// Id of the proxy
	ProxyId string `pulumi:"proxyId"`
	// Routing configuration used to access the instances
	Routings []RuleVmHttpRouting `pulumi:"routings"`
}

// RuleVmHttpInput is an input type that accepts RuleVmHttpArgs and RuleVmHttpOutput values.
// You can construct a concrete instance of `RuleVmHttpInput` via:
//
//	RuleVmHttpArgs{...}
type RuleVmHttpInput interface {
	pulumi.Input

	ToRuleVmHttpOutput() RuleVmHttpOutput
	ToRuleVmHttpOutputWithContext(context.Context) RuleVmHttpOutput
}

type RuleVmHttpArgs struct {
	// Health Check Details
	Healths RuleVmHttpHealthArrayInput `pulumi:"healths"`
	// Id of the proxy
	ProxyId pulumi.StringInput `pulumi:"proxyId"`
	// Routing configuration used to access the instances
	Routings RuleVmHttpRoutingArrayInput `pulumi:"routings"`
}

func (RuleVmHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleVmHttp)(nil)).Elem()
}

func (i RuleVmHttpArgs) ToRuleVmHttpOutput() RuleVmHttpOutput {
	return i.ToRuleVmHttpOutputWithContext(context.Background())
}

func (i RuleVmHttpArgs) ToRuleVmHttpOutputWithContext(ctx context.Context) RuleVmHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleVmHttpOutput)
}

// RuleVmHttpArrayInput is an input type that accepts RuleVmHttpArray and RuleVmHttpArrayOutput values.
// You can construct a concrete instance of `RuleVmHttpArrayInput` via:
//
//	RuleVmHttpArray{ RuleVmHttpArgs{...} }
type RuleVmHttpArrayInput interface {
	pulumi.Input

	ToRuleVmHttpArrayOutput() RuleVmHttpArrayOutput
	ToRuleVmHttpArrayOutputWithContext(context.Context) RuleVmHttpArrayOutput
}

type RuleVmHttpArray []RuleVmHttpInput

func (RuleVmHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleVmHttp)(nil)).Elem()
}

func (i RuleVmHttpArray) ToRuleVmHttpArrayOutput() RuleVmHttpArrayOutput {
	return i.ToRuleVmHttpArrayOutputWithContext(context.Background())
}

func (i RuleVmHttpArray) ToRuleVmHttpArrayOutputWithContext(ctx context.Context) RuleVmHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleVmHttpArrayOutput)
}

type RuleVmHttpOutput struct{ *pulumi.OutputState }

func (RuleVmHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleVmHttp)(nil)).Elem()
}

func (o RuleVmHttpOutput) ToRuleVmHttpOutput() RuleVmHttpOutput {
	return o
}

func (o RuleVmHttpOutput) ToRuleVmHttpOutputWithContext(ctx context.Context) RuleVmHttpOutput {
	return o
}

// Health Check Details
func (o RuleVmHttpOutput) Healths() RuleVmHttpHealthArrayOutput {
	return o.ApplyT(func(v RuleVmHttp) []RuleVmHttpHealth { return v.Healths }).(RuleVmHttpHealthArrayOutput)
}

// Id of the proxy
func (o RuleVmHttpOutput) ProxyId() pulumi.StringOutput {
	return o.ApplyT(func(v RuleVmHttp) string { return v.ProxyId }).(pulumi.StringOutput)
}

// Routing configuration used to access the instances
func (o RuleVmHttpOutput) Routings() RuleVmHttpRoutingArrayOutput {
	return o.ApplyT(func(v RuleVmHttp) []RuleVmHttpRouting { return v.Routings }).(RuleVmHttpRoutingArrayOutput)
}

type RuleVmHttpArrayOutput struct{ *pulumi.OutputState }

func (RuleVmHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleVmHttp)(nil)).Elem()
}

func (o RuleVmHttpArrayOutput) ToRuleVmHttpArrayOutput() RuleVmHttpArrayOutput {
	return o
}

func (o RuleVmHttpArrayOutput) ToRuleVmHttpArrayOutputWithContext(ctx context.Context) RuleVmHttpArrayOutput {
	return o
}

func (o RuleVmHttpArrayOutput) Index(i pulumi.IntInput) RuleVmHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleVmHttp {
		return vs[0].([]RuleVmHttp)[vs[1].(int)]
	}).(RuleVmHttpOutput)
}

type RuleVmHttpHealth struct {
	// API path to use for health check
	Path *string `pulumi:"path"`
	// Health check port on the VM
	Port int `pulumi:"port"`
	// Protocol can be http or https
	Protocol string `pulumi:"protocol"`
	// Lower limit for acceptable status code
	StatusCodeFrom *int `pulumi:"statusCodeFrom"`
	// Upper limit for acceptable status code
	StatusCodeTo *int `pulumi:"statusCodeTo"`
	// Health check timeout
	Timeout *int `pulumi:"timeout"`
}

// RuleVmHttpHealthInput is an input type that accepts RuleVmHttpHealthArgs and RuleVmHttpHealthOutput values.
// You can construct a concrete instance of `RuleVmHttpHealthInput` via:
//
//	RuleVmHttpHealthArgs{...}
type RuleVmHttpHealthInput interface {
	pulumi.Input

	ToRuleVmHttpHealthOutput() RuleVmHttpHealthOutput
	ToRuleVmHttpHealthOutputWithContext(context.Context) RuleVmHttpHealthOutput
}

type RuleVmHttpHealthArgs struct {
	// API path to use for health check
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Health check port on the VM
	Port pulumi.IntInput `pulumi:"port"`
	// Protocol can be http or https
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// Lower limit for acceptable status code
	StatusCodeFrom pulumi.IntPtrInput `pulumi:"statusCodeFrom"`
	// Upper limit for acceptable status code
	StatusCodeTo pulumi.IntPtrInput `pulumi:"statusCodeTo"`
	// Health check timeout
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
}

func (RuleVmHttpHealthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleVmHttpHealth)(nil)).Elem()
}

func (i RuleVmHttpHealthArgs) ToRuleVmHttpHealthOutput() RuleVmHttpHealthOutput {
	return i.ToRuleVmHttpHealthOutputWithContext(context.Background())
}

func (i RuleVmHttpHealthArgs) ToRuleVmHttpHealthOutputWithContext(ctx context.Context) RuleVmHttpHealthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleVmHttpHealthOutput)
}

// RuleVmHttpHealthArrayInput is an input type that accepts RuleVmHttpHealthArray and RuleVmHttpHealthArrayOutput values.
// You can construct a concrete instance of `RuleVmHttpHealthArrayInput` via:
//
//	RuleVmHttpHealthArray{ RuleVmHttpHealthArgs{...} }
type RuleVmHttpHealthArrayInput interface {
	pulumi.Input

	ToRuleVmHttpHealthArrayOutput() RuleVmHttpHealthArrayOutput
	ToRuleVmHttpHealthArrayOutputWithContext(context.Context) RuleVmHttpHealthArrayOutput
}

type RuleVmHttpHealthArray []RuleVmHttpHealthInput

func (RuleVmHttpHealthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleVmHttpHealth)(nil)).Elem()
}

func (i RuleVmHttpHealthArray) ToRuleVmHttpHealthArrayOutput() RuleVmHttpHealthArrayOutput {
	return i.ToRuleVmHttpHealthArrayOutputWithContext(context.Background())
}

func (i RuleVmHttpHealthArray) ToRuleVmHttpHealthArrayOutputWithContext(ctx context.Context) RuleVmHttpHealthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleVmHttpHealthArrayOutput)
}

type RuleVmHttpHealthOutput struct{ *pulumi.OutputState }

func (RuleVmHttpHealthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleVmHttpHealth)(nil)).Elem()
}

func (o RuleVmHttpHealthOutput) ToRuleVmHttpHealthOutput() RuleVmHttpHealthOutput {
	return o
}

func (o RuleVmHttpHealthOutput) ToRuleVmHttpHealthOutputWithContext(ctx context.Context) RuleVmHttpHealthOutput {
	return o
}

// API path to use for health check
func (o RuleVmHttpHealthOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleVmHttpHealth) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Health check port on the VM
func (o RuleVmHttpHealthOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v RuleVmHttpHealth) int { return v.Port }).(pulumi.IntOutput)
}

// Protocol can be http or https
func (o RuleVmHttpHealthOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v RuleVmHttpHealth) string { return v.Protocol }).(pulumi.StringOutput)
}

// Lower limit for acceptable status code
func (o RuleVmHttpHealthOutput) StatusCodeFrom() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleVmHttpHealth) *int { return v.StatusCodeFrom }).(pulumi.IntPtrOutput)
}

// Upper limit for acceptable status code
func (o RuleVmHttpHealthOutput) StatusCodeTo() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleVmHttpHealth) *int { return v.StatusCodeTo }).(pulumi.IntPtrOutput)
}

// Health check timeout
func (o RuleVmHttpHealthOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleVmHttpHealth) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type RuleVmHttpHealthArrayOutput struct{ *pulumi.OutputState }

func (RuleVmHttpHealthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleVmHttpHealth)(nil)).Elem()
}

func (o RuleVmHttpHealthArrayOutput) ToRuleVmHttpHealthArrayOutput() RuleVmHttpHealthArrayOutput {
	return o
}

func (o RuleVmHttpHealthArrayOutput) ToRuleVmHttpHealthArrayOutputWithContext(ctx context.Context) RuleVmHttpHealthArrayOutput {
	return o
}

func (o RuleVmHttpHealthArrayOutput) Index(i pulumi.IntInput) RuleVmHttpHealthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleVmHttpHealth {
		return vs[0].([]RuleVmHttpHealth)[vs[1].(int)]
	}).(RuleVmHttpHealthOutput)
}

type RuleVmHttpRouting struct {
	// Organization Identifier for the Entity
	Action *string `pulumi:"action"`
	// Port on the proxy
	SourcePort *int `pulumi:"sourcePort"`
	// Source protocol of the proxy can be http or https
	SourceProtocol string `pulumi:"sourceProtocol"`
	// Port on the VM
	TargetPort *int `pulumi:"targetPort"`
	// Target protocol of the instance can be http or https
	TargetProtocol string `pulumi:"targetProtocol"`
}

// RuleVmHttpRoutingInput is an input type that accepts RuleVmHttpRoutingArgs and RuleVmHttpRoutingOutput values.
// You can construct a concrete instance of `RuleVmHttpRoutingInput` via:
//
//	RuleVmHttpRoutingArgs{...}
type RuleVmHttpRoutingInput interface {
	pulumi.Input

	ToRuleVmHttpRoutingOutput() RuleVmHttpRoutingOutput
	ToRuleVmHttpRoutingOutputWithContext(context.Context) RuleVmHttpRoutingOutput
}

type RuleVmHttpRoutingArgs struct {
	// Organization Identifier for the Entity
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Port on the proxy
	SourcePort pulumi.IntPtrInput `pulumi:"sourcePort"`
	// Source protocol of the proxy can be http or https
	SourceProtocol pulumi.StringInput `pulumi:"sourceProtocol"`
	// Port on the VM
	TargetPort pulumi.IntPtrInput `pulumi:"targetPort"`
	// Target protocol of the instance can be http or https
	TargetProtocol pulumi.StringInput `pulumi:"targetProtocol"`
}

func (RuleVmHttpRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleVmHttpRouting)(nil)).Elem()
}

func (i RuleVmHttpRoutingArgs) ToRuleVmHttpRoutingOutput() RuleVmHttpRoutingOutput {
	return i.ToRuleVmHttpRoutingOutputWithContext(context.Background())
}

func (i RuleVmHttpRoutingArgs) ToRuleVmHttpRoutingOutputWithContext(ctx context.Context) RuleVmHttpRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleVmHttpRoutingOutput)
}

// RuleVmHttpRoutingArrayInput is an input type that accepts RuleVmHttpRoutingArray and RuleVmHttpRoutingArrayOutput values.
// You can construct a concrete instance of `RuleVmHttpRoutingArrayInput` via:
//
//	RuleVmHttpRoutingArray{ RuleVmHttpRoutingArgs{...} }
type RuleVmHttpRoutingArrayInput interface {
	pulumi.Input

	ToRuleVmHttpRoutingArrayOutput() RuleVmHttpRoutingArrayOutput
	ToRuleVmHttpRoutingArrayOutputWithContext(context.Context) RuleVmHttpRoutingArrayOutput
}

type RuleVmHttpRoutingArray []RuleVmHttpRoutingInput

func (RuleVmHttpRoutingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleVmHttpRouting)(nil)).Elem()
}

func (i RuleVmHttpRoutingArray) ToRuleVmHttpRoutingArrayOutput() RuleVmHttpRoutingArrayOutput {
	return i.ToRuleVmHttpRoutingArrayOutputWithContext(context.Background())
}

func (i RuleVmHttpRoutingArray) ToRuleVmHttpRoutingArrayOutputWithContext(ctx context.Context) RuleVmHttpRoutingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleVmHttpRoutingArrayOutput)
}

type RuleVmHttpRoutingOutput struct{ *pulumi.OutputState }

func (RuleVmHttpRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleVmHttpRouting)(nil)).Elem()
}

func (o RuleVmHttpRoutingOutput) ToRuleVmHttpRoutingOutput() RuleVmHttpRoutingOutput {
	return o
}

func (o RuleVmHttpRoutingOutput) ToRuleVmHttpRoutingOutputWithContext(ctx context.Context) RuleVmHttpRoutingOutput {
	return o
}

// Organization Identifier for the Entity
func (o RuleVmHttpRoutingOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleVmHttpRouting) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Port on the proxy
func (o RuleVmHttpRoutingOutput) SourcePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleVmHttpRouting) *int { return v.SourcePort }).(pulumi.IntPtrOutput)
}

// Source protocol of the proxy can be http or https
func (o RuleVmHttpRoutingOutput) SourceProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v RuleVmHttpRouting) string { return v.SourceProtocol }).(pulumi.StringOutput)
}

// Port on the VM
func (o RuleVmHttpRoutingOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleVmHttpRouting) *int { return v.TargetPort }).(pulumi.IntPtrOutput)
}

// Target protocol of the instance can be http or https
func (o RuleVmHttpRoutingOutput) TargetProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v RuleVmHttpRouting) string { return v.TargetProtocol }).(pulumi.StringOutput)
}

type RuleVmHttpRoutingArrayOutput struct{ *pulumi.OutputState }

func (RuleVmHttpRoutingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleVmHttpRouting)(nil)).Elem()
}

func (o RuleVmHttpRoutingArrayOutput) ToRuleVmHttpRoutingArrayOutput() RuleVmHttpRoutingArrayOutput {
	return o
}

func (o RuleVmHttpRoutingArrayOutput) ToRuleVmHttpRoutingArrayOutputWithContext(ctx context.Context) RuleVmHttpRoutingArrayOutput {
	return o
}

func (o RuleVmHttpRoutingArrayOutput) Index(i pulumi.IntInput) RuleVmHttpRoutingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleVmHttpRouting {
		return vs[0].([]RuleVmHttpRouting)[vs[1].(int)]
	}).(RuleVmHttpRoutingOutput)
}

type RuleVmTcp struct {
	// Additional tcp forwarding rules
	ForwardRules []RuleVmTcpForwardRule `pulumi:"forwardRules"`
	// Id of the Proxy
	ProxyId string `pulumi:"proxyId"`
	// RDP configuration
	Rdps []RuleVmTcpRdp `pulumi:"rdps"`
	// SSH configuration
	Sshes []RuleVmTcpSsh `pulumi:"sshes"`
}

// RuleVmTcpInput is an input type that accepts RuleVmTcpArgs and RuleVmTcpOutput values.
// You can construct a concrete instance of `RuleVmTcpInput` via:
//
//	RuleVmTcpArgs{...}
type RuleVmTcpInput interface {
	pulumi.Input

	ToRuleVmTcpOutput() RuleVmTcpOutput
	ToRuleVmTcpOutputWithContext(context.Context) RuleVmTcpOutput
}

type RuleVmTcpArgs struct {
	// Additional tcp forwarding rules
	ForwardRules RuleVmTcpForwardRuleArrayInput `pulumi:"forwardRules"`
	// Id of the Proxy
	ProxyId pulumi.StringInput `pulumi:"proxyId"`
	// RDP configuration
	Rdps RuleVmTcpRdpArrayInput `pulumi:"rdps"`
	// SSH configuration
	Sshes RuleVmTcpSshArrayInput `pulumi:"sshes"`
}

func (RuleVmTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleVmTcp)(nil)).Elem()
}

func (i RuleVmTcpArgs) ToRuleVmTcpOutput() RuleVmTcpOutput {
	return i.ToRuleVmTcpOutputWithContext(context.Background())
}

func (i RuleVmTcpArgs) ToRuleVmTcpOutputWithContext(ctx context.Context) RuleVmTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleVmTcpOutput)
}

// RuleVmTcpArrayInput is an input type that accepts RuleVmTcpArray and RuleVmTcpArrayOutput values.
// You can construct a concrete instance of `RuleVmTcpArrayInput` via:
//
//	RuleVmTcpArray{ RuleVmTcpArgs{...} }
type RuleVmTcpArrayInput interface {
	pulumi.Input

	ToRuleVmTcpArrayOutput() RuleVmTcpArrayOutput
	ToRuleVmTcpArrayOutputWithContext(context.Context) RuleVmTcpArrayOutput
}

type RuleVmTcpArray []RuleVmTcpInput

func (RuleVmTcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleVmTcp)(nil)).Elem()
}

func (i RuleVmTcpArray) ToRuleVmTcpArrayOutput() RuleVmTcpArrayOutput {
	return i.ToRuleVmTcpArrayOutputWithContext(context.Background())
}

func (i RuleVmTcpArray) ToRuleVmTcpArrayOutputWithContext(ctx context.Context) RuleVmTcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleVmTcpArrayOutput)
}

type RuleVmTcpOutput struct{ *pulumi.OutputState }

func (RuleVmTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleVmTcp)(nil)).Elem()
}

func (o RuleVmTcpOutput) ToRuleVmTcpOutput() RuleVmTcpOutput {
	return o
}

func (o RuleVmTcpOutput) ToRuleVmTcpOutputWithContext(ctx context.Context) RuleVmTcpOutput {
	return o
}

// Additional tcp forwarding rules
func (o RuleVmTcpOutput) ForwardRules() RuleVmTcpForwardRuleArrayOutput {
	return o.ApplyT(func(v RuleVmTcp) []RuleVmTcpForwardRule { return v.ForwardRules }).(RuleVmTcpForwardRuleArrayOutput)
}

// Id of the Proxy
func (o RuleVmTcpOutput) ProxyId() pulumi.StringOutput {
	return o.ApplyT(func(v RuleVmTcp) string { return v.ProxyId }).(pulumi.StringOutput)
}

// RDP configuration
func (o RuleVmTcpOutput) Rdps() RuleVmTcpRdpArrayOutput {
	return o.ApplyT(func(v RuleVmTcp) []RuleVmTcpRdp { return v.Rdps }).(RuleVmTcpRdpArrayOutput)
}

// SSH configuration
func (o RuleVmTcpOutput) Sshes() RuleVmTcpSshArrayOutput {
	return o.ApplyT(func(v RuleVmTcp) []RuleVmTcpSsh { return v.Sshes }).(RuleVmTcpSshArrayOutput)
}

type RuleVmTcpArrayOutput struct{ *pulumi.OutputState }

func (RuleVmTcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleVmTcp)(nil)).Elem()
}

func (o RuleVmTcpArrayOutput) ToRuleVmTcpArrayOutput() RuleVmTcpArrayOutput {
	return o
}

func (o RuleVmTcpArrayOutput) ToRuleVmTcpArrayOutputWithContext(ctx context.Context) RuleVmTcpArrayOutput {
	return o
}

func (o RuleVmTcpArrayOutput) Index(i pulumi.IntInput) RuleVmTcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleVmTcp {
		return vs[0].([]RuleVmTcp)[vs[1].(int)]
	}).(RuleVmTcpOutput)
}

type RuleVmTcpForwardRule struct {
	// Port to listen on the proxy
	ConnectOn *int `pulumi:"connectOn"`
	// Port to listen on the vm
	Port int `pulumi:"port"`
}

// RuleVmTcpForwardRuleInput is an input type that accepts RuleVmTcpForwardRuleArgs and RuleVmTcpForwardRuleOutput values.
// You can construct a concrete instance of `RuleVmTcpForwardRuleInput` via:
//
//	RuleVmTcpForwardRuleArgs{...}
type RuleVmTcpForwardRuleInput interface {
	pulumi.Input

	ToRuleVmTcpForwardRuleOutput() RuleVmTcpForwardRuleOutput
	ToRuleVmTcpForwardRuleOutputWithContext(context.Context) RuleVmTcpForwardRuleOutput
}

type RuleVmTcpForwardRuleArgs struct {
	// Port to listen on the proxy
	ConnectOn pulumi.IntPtrInput `pulumi:"connectOn"`
	// Port to listen on the vm
	Port pulumi.IntInput `pulumi:"port"`
}

func (RuleVmTcpForwardRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleVmTcpForwardRule)(nil)).Elem()
}

func (i RuleVmTcpForwardRuleArgs) ToRuleVmTcpForwardRuleOutput() RuleVmTcpForwardRuleOutput {
	return i.ToRuleVmTcpForwardRuleOutputWithContext(context.Background())
}

func (i RuleVmTcpForwardRuleArgs) ToRuleVmTcpForwardRuleOutputWithContext(ctx context.Context) RuleVmTcpForwardRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleVmTcpForwardRuleOutput)
}

// RuleVmTcpForwardRuleArrayInput is an input type that accepts RuleVmTcpForwardRuleArray and RuleVmTcpForwardRuleArrayOutput values.
// You can construct a concrete instance of `RuleVmTcpForwardRuleArrayInput` via:
//
//	RuleVmTcpForwardRuleArray{ RuleVmTcpForwardRuleArgs{...} }
type RuleVmTcpForwardRuleArrayInput interface {
	pulumi.Input

	ToRuleVmTcpForwardRuleArrayOutput() RuleVmTcpForwardRuleArrayOutput
	ToRuleVmTcpForwardRuleArrayOutputWithContext(context.Context) RuleVmTcpForwardRuleArrayOutput
}

type RuleVmTcpForwardRuleArray []RuleVmTcpForwardRuleInput

func (RuleVmTcpForwardRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleVmTcpForwardRule)(nil)).Elem()
}

func (i RuleVmTcpForwardRuleArray) ToRuleVmTcpForwardRuleArrayOutput() RuleVmTcpForwardRuleArrayOutput {
	return i.ToRuleVmTcpForwardRuleArrayOutputWithContext(context.Background())
}

func (i RuleVmTcpForwardRuleArray) ToRuleVmTcpForwardRuleArrayOutputWithContext(ctx context.Context) RuleVmTcpForwardRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleVmTcpForwardRuleArrayOutput)
}

type RuleVmTcpForwardRuleOutput struct{ *pulumi.OutputState }

func (RuleVmTcpForwardRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleVmTcpForwardRule)(nil)).Elem()
}

func (o RuleVmTcpForwardRuleOutput) ToRuleVmTcpForwardRuleOutput() RuleVmTcpForwardRuleOutput {
	return o
}

func (o RuleVmTcpForwardRuleOutput) ToRuleVmTcpForwardRuleOutputWithContext(ctx context.Context) RuleVmTcpForwardRuleOutput {
	return o
}

// Port to listen on the proxy
func (o RuleVmTcpForwardRuleOutput) ConnectOn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleVmTcpForwardRule) *int { return v.ConnectOn }).(pulumi.IntPtrOutput)
}

// Port to listen on the vm
func (o RuleVmTcpForwardRuleOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v RuleVmTcpForwardRule) int { return v.Port }).(pulumi.IntOutput)
}

type RuleVmTcpForwardRuleArrayOutput struct{ *pulumi.OutputState }

func (RuleVmTcpForwardRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleVmTcpForwardRule)(nil)).Elem()
}

func (o RuleVmTcpForwardRuleArrayOutput) ToRuleVmTcpForwardRuleArrayOutput() RuleVmTcpForwardRuleArrayOutput {
	return o
}

func (o RuleVmTcpForwardRuleArrayOutput) ToRuleVmTcpForwardRuleArrayOutputWithContext(ctx context.Context) RuleVmTcpForwardRuleArrayOutput {
	return o
}

func (o RuleVmTcpForwardRuleArrayOutput) Index(i pulumi.IntInput) RuleVmTcpForwardRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleVmTcpForwardRule {
		return vs[0].([]RuleVmTcpForwardRule)[vs[1].(int)]
	}).(RuleVmTcpForwardRuleOutput)
}

type RuleVmTcpRdp struct {
	// Port to listen on the proxy
	ConnectOn *int `pulumi:"connectOn"`
	// Port to listen on the vm
	Port *int `pulumi:"port"`
}

// RuleVmTcpRdpInput is an input type that accepts RuleVmTcpRdpArgs and RuleVmTcpRdpOutput values.
// You can construct a concrete instance of `RuleVmTcpRdpInput` via:
//
//	RuleVmTcpRdpArgs{...}
type RuleVmTcpRdpInput interface {
	pulumi.Input

	ToRuleVmTcpRdpOutput() RuleVmTcpRdpOutput
	ToRuleVmTcpRdpOutputWithContext(context.Context) RuleVmTcpRdpOutput
}

type RuleVmTcpRdpArgs struct {
	// Port to listen on the proxy
	ConnectOn pulumi.IntPtrInput `pulumi:"connectOn"`
	// Port to listen on the vm
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (RuleVmTcpRdpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleVmTcpRdp)(nil)).Elem()
}

func (i RuleVmTcpRdpArgs) ToRuleVmTcpRdpOutput() RuleVmTcpRdpOutput {
	return i.ToRuleVmTcpRdpOutputWithContext(context.Background())
}

func (i RuleVmTcpRdpArgs) ToRuleVmTcpRdpOutputWithContext(ctx context.Context) RuleVmTcpRdpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleVmTcpRdpOutput)
}

// RuleVmTcpRdpArrayInput is an input type that accepts RuleVmTcpRdpArray and RuleVmTcpRdpArrayOutput values.
// You can construct a concrete instance of `RuleVmTcpRdpArrayInput` via:
//
//	RuleVmTcpRdpArray{ RuleVmTcpRdpArgs{...} }
type RuleVmTcpRdpArrayInput interface {
	pulumi.Input

	ToRuleVmTcpRdpArrayOutput() RuleVmTcpRdpArrayOutput
	ToRuleVmTcpRdpArrayOutputWithContext(context.Context) RuleVmTcpRdpArrayOutput
}

type RuleVmTcpRdpArray []RuleVmTcpRdpInput

func (RuleVmTcpRdpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleVmTcpRdp)(nil)).Elem()
}

func (i RuleVmTcpRdpArray) ToRuleVmTcpRdpArrayOutput() RuleVmTcpRdpArrayOutput {
	return i.ToRuleVmTcpRdpArrayOutputWithContext(context.Background())
}

func (i RuleVmTcpRdpArray) ToRuleVmTcpRdpArrayOutputWithContext(ctx context.Context) RuleVmTcpRdpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleVmTcpRdpArrayOutput)
}

type RuleVmTcpRdpOutput struct{ *pulumi.OutputState }

func (RuleVmTcpRdpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleVmTcpRdp)(nil)).Elem()
}

func (o RuleVmTcpRdpOutput) ToRuleVmTcpRdpOutput() RuleVmTcpRdpOutput {
	return o
}

func (o RuleVmTcpRdpOutput) ToRuleVmTcpRdpOutputWithContext(ctx context.Context) RuleVmTcpRdpOutput {
	return o
}

// Port to listen on the proxy
func (o RuleVmTcpRdpOutput) ConnectOn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleVmTcpRdp) *int { return v.ConnectOn }).(pulumi.IntPtrOutput)
}

// Port to listen on the vm
func (o RuleVmTcpRdpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleVmTcpRdp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type RuleVmTcpRdpArrayOutput struct{ *pulumi.OutputState }

func (RuleVmTcpRdpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleVmTcpRdp)(nil)).Elem()
}

func (o RuleVmTcpRdpArrayOutput) ToRuleVmTcpRdpArrayOutput() RuleVmTcpRdpArrayOutput {
	return o
}

func (o RuleVmTcpRdpArrayOutput) ToRuleVmTcpRdpArrayOutputWithContext(ctx context.Context) RuleVmTcpRdpArrayOutput {
	return o
}

func (o RuleVmTcpRdpArrayOutput) Index(i pulumi.IntInput) RuleVmTcpRdpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleVmTcpRdp {
		return vs[0].([]RuleVmTcpRdp)[vs[1].(int)]
	}).(RuleVmTcpRdpOutput)
}

type RuleVmTcpSsh struct {
	// Port to listen on the proxy
	ConnectOn *int `pulumi:"connectOn"`
	// Port to listen on the vm
	Port *int `pulumi:"port"`
}

// RuleVmTcpSshInput is an input type that accepts RuleVmTcpSshArgs and RuleVmTcpSshOutput values.
// You can construct a concrete instance of `RuleVmTcpSshInput` via:
//
//	RuleVmTcpSshArgs{...}
type RuleVmTcpSshInput interface {
	pulumi.Input

	ToRuleVmTcpSshOutput() RuleVmTcpSshOutput
	ToRuleVmTcpSshOutputWithContext(context.Context) RuleVmTcpSshOutput
}

type RuleVmTcpSshArgs struct {
	// Port to listen on the proxy
	ConnectOn pulumi.IntPtrInput `pulumi:"connectOn"`
	// Port to listen on the vm
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (RuleVmTcpSshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleVmTcpSsh)(nil)).Elem()
}

func (i RuleVmTcpSshArgs) ToRuleVmTcpSshOutput() RuleVmTcpSshOutput {
	return i.ToRuleVmTcpSshOutputWithContext(context.Background())
}

func (i RuleVmTcpSshArgs) ToRuleVmTcpSshOutputWithContext(ctx context.Context) RuleVmTcpSshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleVmTcpSshOutput)
}

// RuleVmTcpSshArrayInput is an input type that accepts RuleVmTcpSshArray and RuleVmTcpSshArrayOutput values.
// You can construct a concrete instance of `RuleVmTcpSshArrayInput` via:
//
//	RuleVmTcpSshArray{ RuleVmTcpSshArgs{...} }
type RuleVmTcpSshArrayInput interface {
	pulumi.Input

	ToRuleVmTcpSshArrayOutput() RuleVmTcpSshArrayOutput
	ToRuleVmTcpSshArrayOutputWithContext(context.Context) RuleVmTcpSshArrayOutput
}

type RuleVmTcpSshArray []RuleVmTcpSshInput

func (RuleVmTcpSshArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleVmTcpSsh)(nil)).Elem()
}

func (i RuleVmTcpSshArray) ToRuleVmTcpSshArrayOutput() RuleVmTcpSshArrayOutput {
	return i.ToRuleVmTcpSshArrayOutputWithContext(context.Background())
}

func (i RuleVmTcpSshArray) ToRuleVmTcpSshArrayOutputWithContext(ctx context.Context) RuleVmTcpSshArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleVmTcpSshArrayOutput)
}

type RuleVmTcpSshOutput struct{ *pulumi.OutputState }

func (RuleVmTcpSshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleVmTcpSsh)(nil)).Elem()
}

func (o RuleVmTcpSshOutput) ToRuleVmTcpSshOutput() RuleVmTcpSshOutput {
	return o
}

func (o RuleVmTcpSshOutput) ToRuleVmTcpSshOutputWithContext(ctx context.Context) RuleVmTcpSshOutput {
	return o
}

// Port to listen on the proxy
func (o RuleVmTcpSshOutput) ConnectOn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleVmTcpSsh) *int { return v.ConnectOn }).(pulumi.IntPtrOutput)
}

// Port to listen on the vm
func (o RuleVmTcpSshOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleVmTcpSsh) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type RuleVmTcpSshArrayOutput struct{ *pulumi.OutputState }

func (RuleVmTcpSshArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleVmTcpSsh)(nil)).Elem()
}

func (o RuleVmTcpSshArrayOutput) ToRuleVmTcpSshArrayOutput() RuleVmTcpSshArrayOutput {
	return o
}

func (o RuleVmTcpSshArrayOutput) ToRuleVmTcpSshArrayOutputWithContext(ctx context.Context) RuleVmTcpSshArrayOutput {
	return o
}

func (o RuleVmTcpSshArrayOutput) Index(i pulumi.IntInput) RuleVmTcpSshOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleVmTcpSsh {
		return vs[0].([]RuleVmTcpSsh)[vs[1].(int)]
	}).(RuleVmTcpSshOutput)
}

type ScheduleRepeat struct {
	// List of days on which schedule need to be active. Valid values are SUN, MON, TUE, WED, THU, FRI and SAT.
	Days []string `pulumi:"days"`
	// Ending time of schedule action on the day. Defaults to 24:00Hrs unless specified. Accepted format is HH:MM. Eg : 20:00 for 8pm
	EndTime *string `pulumi:"endTime"`
	// Starting time of schedule action on the day. Defaults to 00:00Hrs unless specified. Accepted format is HH:MM. Eg : 13:15 for 01:15pm
	StartTime *string `pulumi:"startTime"`
}

// ScheduleRepeatInput is an input type that accepts ScheduleRepeatArgs and ScheduleRepeatOutput values.
// You can construct a concrete instance of `ScheduleRepeatInput` via:
//
//	ScheduleRepeatArgs{...}
type ScheduleRepeatInput interface {
	pulumi.Input

	ToScheduleRepeatOutput() ScheduleRepeatOutput
	ToScheduleRepeatOutputWithContext(context.Context) ScheduleRepeatOutput
}

type ScheduleRepeatArgs struct {
	// List of days on which schedule need to be active. Valid values are SUN, MON, TUE, WED, THU, FRI and SAT.
	Days pulumi.StringArrayInput `pulumi:"days"`
	// Ending time of schedule action on the day. Defaults to 24:00Hrs unless specified. Accepted format is HH:MM. Eg : 20:00 for 8pm
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Starting time of schedule action on the day. Defaults to 00:00Hrs unless specified. Accepted format is HH:MM. Eg : 13:15 for 01:15pm
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (ScheduleRepeatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRepeat)(nil)).Elem()
}

func (i ScheduleRepeatArgs) ToScheduleRepeatOutput() ScheduleRepeatOutput {
	return i.ToScheduleRepeatOutputWithContext(context.Background())
}

func (i ScheduleRepeatArgs) ToScheduleRepeatOutputWithContext(ctx context.Context) ScheduleRepeatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRepeatOutput)
}

// ScheduleRepeatArrayInput is an input type that accepts ScheduleRepeatArray and ScheduleRepeatArrayOutput values.
// You can construct a concrete instance of `ScheduleRepeatArrayInput` via:
//
//	ScheduleRepeatArray{ ScheduleRepeatArgs{...} }
type ScheduleRepeatArrayInput interface {
	pulumi.Input

	ToScheduleRepeatArrayOutput() ScheduleRepeatArrayOutput
	ToScheduleRepeatArrayOutputWithContext(context.Context) ScheduleRepeatArrayOutput
}

type ScheduleRepeatArray []ScheduleRepeatInput

func (ScheduleRepeatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleRepeat)(nil)).Elem()
}

func (i ScheduleRepeatArray) ToScheduleRepeatArrayOutput() ScheduleRepeatArrayOutput {
	return i.ToScheduleRepeatArrayOutputWithContext(context.Background())
}

func (i ScheduleRepeatArray) ToScheduleRepeatArrayOutputWithContext(ctx context.Context) ScheduleRepeatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRepeatArrayOutput)
}

type ScheduleRepeatOutput struct{ *pulumi.OutputState }

func (ScheduleRepeatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRepeat)(nil)).Elem()
}

func (o ScheduleRepeatOutput) ToScheduleRepeatOutput() ScheduleRepeatOutput {
	return o
}

func (o ScheduleRepeatOutput) ToScheduleRepeatOutputWithContext(ctx context.Context) ScheduleRepeatOutput {
	return o
}

// List of days on which schedule need to be active. Valid values are SUN, MON, TUE, WED, THU, FRI and SAT.
func (o ScheduleRepeatOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleRepeat) []string { return v.Days }).(pulumi.StringArrayOutput)
}

// Ending time of schedule action on the day. Defaults to 24:00Hrs unless specified. Accepted format is HH:MM. Eg : 20:00 for 8pm
func (o ScheduleRepeatOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleRepeat) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Starting time of schedule action on the day. Defaults to 00:00Hrs unless specified. Accepted format is HH:MM. Eg : 13:15 for 01:15pm
func (o ScheduleRepeatOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleRepeat) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type ScheduleRepeatArrayOutput struct{ *pulumi.OutputState }

func (ScheduleRepeatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleRepeat)(nil)).Elem()
}

func (o ScheduleRepeatArrayOutput) ToScheduleRepeatArrayOutput() ScheduleRepeatArrayOutput {
	return o
}

func (o ScheduleRepeatArrayOutput) ToScheduleRepeatArrayOutputWithContext(ctx context.Context) ScheduleRepeatArrayOutput {
	return o
}

func (o ScheduleRepeatArrayOutput) Index(i pulumi.IntInput) ScheduleRepeatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleRepeat {
		return vs[0].([]ScheduleRepeat)[vs[1].(int)]
	}).(ScheduleRepeatOutput)
}

type GetAwsProxyCertificates struct {
	// Certificate secret ID
	CertSecretId string `pulumi:"certSecretId"`
	// Private key secret ID
	KeySecretId string `pulumi:"keySecretId"`
}

// GetAwsProxyCertificatesInput is an input type that accepts GetAwsProxyCertificatesArgs and GetAwsProxyCertificatesOutput values.
// You can construct a concrete instance of `GetAwsProxyCertificatesInput` via:
//
//	GetAwsProxyCertificatesArgs{...}
type GetAwsProxyCertificatesInput interface {
	pulumi.Input

	ToGetAwsProxyCertificatesOutput() GetAwsProxyCertificatesOutput
	ToGetAwsProxyCertificatesOutputWithContext(context.Context) GetAwsProxyCertificatesOutput
}

type GetAwsProxyCertificatesArgs struct {
	// Certificate secret ID
	CertSecretId pulumi.StringInput `pulumi:"certSecretId"`
	// Private key secret ID
	KeySecretId pulumi.StringInput `pulumi:"keySecretId"`
}

func (GetAwsProxyCertificatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAwsProxyCertificates)(nil)).Elem()
}

func (i GetAwsProxyCertificatesArgs) ToGetAwsProxyCertificatesOutput() GetAwsProxyCertificatesOutput {
	return i.ToGetAwsProxyCertificatesOutputWithContext(context.Background())
}

func (i GetAwsProxyCertificatesArgs) ToGetAwsProxyCertificatesOutputWithContext(ctx context.Context) GetAwsProxyCertificatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAwsProxyCertificatesOutput)
}

func (i GetAwsProxyCertificatesArgs) ToGetAwsProxyCertificatesPtrOutput() GetAwsProxyCertificatesPtrOutput {
	return i.ToGetAwsProxyCertificatesPtrOutputWithContext(context.Background())
}

func (i GetAwsProxyCertificatesArgs) ToGetAwsProxyCertificatesPtrOutputWithContext(ctx context.Context) GetAwsProxyCertificatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAwsProxyCertificatesOutput).ToGetAwsProxyCertificatesPtrOutputWithContext(ctx)
}

// GetAwsProxyCertificatesPtrInput is an input type that accepts GetAwsProxyCertificatesArgs, GetAwsProxyCertificatesPtr and GetAwsProxyCertificatesPtrOutput values.
// You can construct a concrete instance of `GetAwsProxyCertificatesPtrInput` via:
//
//	        GetAwsProxyCertificatesArgs{...}
//
//	or:
//
//	        nil
type GetAwsProxyCertificatesPtrInput interface {
	pulumi.Input

	ToGetAwsProxyCertificatesPtrOutput() GetAwsProxyCertificatesPtrOutput
	ToGetAwsProxyCertificatesPtrOutputWithContext(context.Context) GetAwsProxyCertificatesPtrOutput
}

type getAwsProxyCertificatesPtrType GetAwsProxyCertificatesArgs

func GetAwsProxyCertificatesPtr(v *GetAwsProxyCertificatesArgs) GetAwsProxyCertificatesPtrInput {
	return (*getAwsProxyCertificatesPtrType)(v)
}

func (*getAwsProxyCertificatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAwsProxyCertificates)(nil)).Elem()
}

func (i *getAwsProxyCertificatesPtrType) ToGetAwsProxyCertificatesPtrOutput() GetAwsProxyCertificatesPtrOutput {
	return i.ToGetAwsProxyCertificatesPtrOutputWithContext(context.Background())
}

func (i *getAwsProxyCertificatesPtrType) ToGetAwsProxyCertificatesPtrOutputWithContext(ctx context.Context) GetAwsProxyCertificatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAwsProxyCertificatesPtrOutput)
}

type GetAwsProxyCertificatesOutput struct{ *pulumi.OutputState }

func (GetAwsProxyCertificatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAwsProxyCertificates)(nil)).Elem()
}

func (o GetAwsProxyCertificatesOutput) ToGetAwsProxyCertificatesOutput() GetAwsProxyCertificatesOutput {
	return o
}

func (o GetAwsProxyCertificatesOutput) ToGetAwsProxyCertificatesOutputWithContext(ctx context.Context) GetAwsProxyCertificatesOutput {
	return o
}

func (o GetAwsProxyCertificatesOutput) ToGetAwsProxyCertificatesPtrOutput() GetAwsProxyCertificatesPtrOutput {
	return o.ToGetAwsProxyCertificatesPtrOutputWithContext(context.Background())
}

func (o GetAwsProxyCertificatesOutput) ToGetAwsProxyCertificatesPtrOutputWithContext(ctx context.Context) GetAwsProxyCertificatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetAwsProxyCertificates) *GetAwsProxyCertificates {
		return &v
	}).(GetAwsProxyCertificatesPtrOutput)
}

// Certificate secret ID
func (o GetAwsProxyCertificatesOutput) CertSecretId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAwsProxyCertificates) string { return v.CertSecretId }).(pulumi.StringOutput)
}

// Private key secret ID
func (o GetAwsProxyCertificatesOutput) KeySecretId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAwsProxyCertificates) string { return v.KeySecretId }).(pulumi.StringOutput)
}

type GetAwsProxyCertificatesPtrOutput struct{ *pulumi.OutputState }

func (GetAwsProxyCertificatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAwsProxyCertificates)(nil)).Elem()
}

func (o GetAwsProxyCertificatesPtrOutput) ToGetAwsProxyCertificatesPtrOutput() GetAwsProxyCertificatesPtrOutput {
	return o
}

func (o GetAwsProxyCertificatesPtrOutput) ToGetAwsProxyCertificatesPtrOutputWithContext(ctx context.Context) GetAwsProxyCertificatesPtrOutput {
	return o
}

func (o GetAwsProxyCertificatesPtrOutput) Elem() GetAwsProxyCertificatesOutput {
	return o.ApplyT(func(v *GetAwsProxyCertificates) GetAwsProxyCertificates {
		if v != nil {
			return *v
		}
		var ret GetAwsProxyCertificates
		return ret
	}).(GetAwsProxyCertificatesOutput)
}

// Certificate secret ID
func (o GetAwsProxyCertificatesPtrOutput) CertSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAwsProxyCertificates) *string {
		if v == nil {
			return nil
		}
		return &v.CertSecretId
	}).(pulumi.StringPtrOutput)
}

// Private key secret ID
func (o GetAwsProxyCertificatesPtrOutput) KeySecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAwsProxyCertificates) *string {
		if v == nil {
			return nil
		}
		return &v.KeySecretId
	}).(pulumi.StringPtrOutput)
}

type GetAzureProxyCertificates struct {
	// ID of certificate secret uploaded to vault
	CertSecretId string `pulumi:"certSecretId"`
	// ID of certificate key uploaded to vault
	KeySecretId string `pulumi:"keySecretId"`
}

// GetAzureProxyCertificatesInput is an input type that accepts GetAzureProxyCertificatesArgs and GetAzureProxyCertificatesOutput values.
// You can construct a concrete instance of `GetAzureProxyCertificatesInput` via:
//
//	GetAzureProxyCertificatesArgs{...}
type GetAzureProxyCertificatesInput interface {
	pulumi.Input

	ToGetAzureProxyCertificatesOutput() GetAzureProxyCertificatesOutput
	ToGetAzureProxyCertificatesOutputWithContext(context.Context) GetAzureProxyCertificatesOutput
}

type GetAzureProxyCertificatesArgs struct {
	// ID of certificate secret uploaded to vault
	CertSecretId pulumi.StringInput `pulumi:"certSecretId"`
	// ID of certificate key uploaded to vault
	KeySecretId pulumi.StringInput `pulumi:"keySecretId"`
}

func (GetAzureProxyCertificatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAzureProxyCertificates)(nil)).Elem()
}

func (i GetAzureProxyCertificatesArgs) ToGetAzureProxyCertificatesOutput() GetAzureProxyCertificatesOutput {
	return i.ToGetAzureProxyCertificatesOutputWithContext(context.Background())
}

func (i GetAzureProxyCertificatesArgs) ToGetAzureProxyCertificatesOutputWithContext(ctx context.Context) GetAzureProxyCertificatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAzureProxyCertificatesOutput)
}

func (i GetAzureProxyCertificatesArgs) ToGetAzureProxyCertificatesPtrOutput() GetAzureProxyCertificatesPtrOutput {
	return i.ToGetAzureProxyCertificatesPtrOutputWithContext(context.Background())
}

func (i GetAzureProxyCertificatesArgs) ToGetAzureProxyCertificatesPtrOutputWithContext(ctx context.Context) GetAzureProxyCertificatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAzureProxyCertificatesOutput).ToGetAzureProxyCertificatesPtrOutputWithContext(ctx)
}

// GetAzureProxyCertificatesPtrInput is an input type that accepts GetAzureProxyCertificatesArgs, GetAzureProxyCertificatesPtr and GetAzureProxyCertificatesPtrOutput values.
// You can construct a concrete instance of `GetAzureProxyCertificatesPtrInput` via:
//
//	        GetAzureProxyCertificatesArgs{...}
//
//	or:
//
//	        nil
type GetAzureProxyCertificatesPtrInput interface {
	pulumi.Input

	ToGetAzureProxyCertificatesPtrOutput() GetAzureProxyCertificatesPtrOutput
	ToGetAzureProxyCertificatesPtrOutputWithContext(context.Context) GetAzureProxyCertificatesPtrOutput
}

type getAzureProxyCertificatesPtrType GetAzureProxyCertificatesArgs

func GetAzureProxyCertificatesPtr(v *GetAzureProxyCertificatesArgs) GetAzureProxyCertificatesPtrInput {
	return (*getAzureProxyCertificatesPtrType)(v)
}

func (*getAzureProxyCertificatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAzureProxyCertificates)(nil)).Elem()
}

func (i *getAzureProxyCertificatesPtrType) ToGetAzureProxyCertificatesPtrOutput() GetAzureProxyCertificatesPtrOutput {
	return i.ToGetAzureProxyCertificatesPtrOutputWithContext(context.Background())
}

func (i *getAzureProxyCertificatesPtrType) ToGetAzureProxyCertificatesPtrOutputWithContext(ctx context.Context) GetAzureProxyCertificatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAzureProxyCertificatesPtrOutput)
}

type GetAzureProxyCertificatesOutput struct{ *pulumi.OutputState }

func (GetAzureProxyCertificatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAzureProxyCertificates)(nil)).Elem()
}

func (o GetAzureProxyCertificatesOutput) ToGetAzureProxyCertificatesOutput() GetAzureProxyCertificatesOutput {
	return o
}

func (o GetAzureProxyCertificatesOutput) ToGetAzureProxyCertificatesOutputWithContext(ctx context.Context) GetAzureProxyCertificatesOutput {
	return o
}

func (o GetAzureProxyCertificatesOutput) ToGetAzureProxyCertificatesPtrOutput() GetAzureProxyCertificatesPtrOutput {
	return o.ToGetAzureProxyCertificatesPtrOutputWithContext(context.Background())
}

func (o GetAzureProxyCertificatesOutput) ToGetAzureProxyCertificatesPtrOutputWithContext(ctx context.Context) GetAzureProxyCertificatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetAzureProxyCertificates) *GetAzureProxyCertificates {
		return &v
	}).(GetAzureProxyCertificatesPtrOutput)
}

// ID of certificate secret uploaded to vault
func (o GetAzureProxyCertificatesOutput) CertSecretId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAzureProxyCertificates) string { return v.CertSecretId }).(pulumi.StringOutput)
}

// ID of certificate key uploaded to vault
func (o GetAzureProxyCertificatesOutput) KeySecretId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAzureProxyCertificates) string { return v.KeySecretId }).(pulumi.StringOutput)
}

type GetAzureProxyCertificatesPtrOutput struct{ *pulumi.OutputState }

func (GetAzureProxyCertificatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAzureProxyCertificates)(nil)).Elem()
}

func (o GetAzureProxyCertificatesPtrOutput) ToGetAzureProxyCertificatesPtrOutput() GetAzureProxyCertificatesPtrOutput {
	return o
}

func (o GetAzureProxyCertificatesPtrOutput) ToGetAzureProxyCertificatesPtrOutputWithContext(ctx context.Context) GetAzureProxyCertificatesPtrOutput {
	return o
}

func (o GetAzureProxyCertificatesPtrOutput) Elem() GetAzureProxyCertificatesOutput {
	return o.ApplyT(func(v *GetAzureProxyCertificates) GetAzureProxyCertificates {
		if v != nil {
			return *v
		}
		var ret GetAzureProxyCertificates
		return ret
	}).(GetAzureProxyCertificatesOutput)
}

// ID of certificate secret uploaded to vault
func (o GetAzureProxyCertificatesPtrOutput) CertSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAzureProxyCertificates) *string {
		if v == nil {
			return nil
		}
		return &v.CertSecretId
	}).(pulumi.StringPtrOutput)
}

// ID of certificate key uploaded to vault
func (o GetAzureProxyCertificatesPtrOutput) KeySecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAzureProxyCertificates) *string {
		if v == nil {
			return nil
		}
		return &v.KeySecretId
	}).(pulumi.StringPtrOutput)
}

type GetGcpProxyCertificates struct {
	// Certificate secret ID
	CertSecretId string `pulumi:"certSecretId"`
	// Private key secret ID
	KeySecretId string `pulumi:"keySecretId"`
}

// GetGcpProxyCertificatesInput is an input type that accepts GetGcpProxyCertificatesArgs and GetGcpProxyCertificatesOutput values.
// You can construct a concrete instance of `GetGcpProxyCertificatesInput` via:
//
//	GetGcpProxyCertificatesArgs{...}
type GetGcpProxyCertificatesInput interface {
	pulumi.Input

	ToGetGcpProxyCertificatesOutput() GetGcpProxyCertificatesOutput
	ToGetGcpProxyCertificatesOutputWithContext(context.Context) GetGcpProxyCertificatesOutput
}

type GetGcpProxyCertificatesArgs struct {
	// Certificate secret ID
	CertSecretId pulumi.StringInput `pulumi:"certSecretId"`
	// Private key secret ID
	KeySecretId pulumi.StringInput `pulumi:"keySecretId"`
}

func (GetGcpProxyCertificatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGcpProxyCertificates)(nil)).Elem()
}

func (i GetGcpProxyCertificatesArgs) ToGetGcpProxyCertificatesOutput() GetGcpProxyCertificatesOutput {
	return i.ToGetGcpProxyCertificatesOutputWithContext(context.Background())
}

func (i GetGcpProxyCertificatesArgs) ToGetGcpProxyCertificatesOutputWithContext(ctx context.Context) GetGcpProxyCertificatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGcpProxyCertificatesOutput)
}

func (i GetGcpProxyCertificatesArgs) ToGetGcpProxyCertificatesPtrOutput() GetGcpProxyCertificatesPtrOutput {
	return i.ToGetGcpProxyCertificatesPtrOutputWithContext(context.Background())
}

func (i GetGcpProxyCertificatesArgs) ToGetGcpProxyCertificatesPtrOutputWithContext(ctx context.Context) GetGcpProxyCertificatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGcpProxyCertificatesOutput).ToGetGcpProxyCertificatesPtrOutputWithContext(ctx)
}

// GetGcpProxyCertificatesPtrInput is an input type that accepts GetGcpProxyCertificatesArgs, GetGcpProxyCertificatesPtr and GetGcpProxyCertificatesPtrOutput values.
// You can construct a concrete instance of `GetGcpProxyCertificatesPtrInput` via:
//
//	        GetGcpProxyCertificatesArgs{...}
//
//	or:
//
//	        nil
type GetGcpProxyCertificatesPtrInput interface {
	pulumi.Input

	ToGetGcpProxyCertificatesPtrOutput() GetGcpProxyCertificatesPtrOutput
	ToGetGcpProxyCertificatesPtrOutputWithContext(context.Context) GetGcpProxyCertificatesPtrOutput
}

type getGcpProxyCertificatesPtrType GetGcpProxyCertificatesArgs

func GetGcpProxyCertificatesPtr(v *GetGcpProxyCertificatesArgs) GetGcpProxyCertificatesPtrInput {
	return (*getGcpProxyCertificatesPtrType)(v)
}

func (*getGcpProxyCertificatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetGcpProxyCertificates)(nil)).Elem()
}

func (i *getGcpProxyCertificatesPtrType) ToGetGcpProxyCertificatesPtrOutput() GetGcpProxyCertificatesPtrOutput {
	return i.ToGetGcpProxyCertificatesPtrOutputWithContext(context.Background())
}

func (i *getGcpProxyCertificatesPtrType) ToGetGcpProxyCertificatesPtrOutputWithContext(ctx context.Context) GetGcpProxyCertificatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGcpProxyCertificatesPtrOutput)
}

type GetGcpProxyCertificatesOutput struct{ *pulumi.OutputState }

func (GetGcpProxyCertificatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGcpProxyCertificates)(nil)).Elem()
}

func (o GetGcpProxyCertificatesOutput) ToGetGcpProxyCertificatesOutput() GetGcpProxyCertificatesOutput {
	return o
}

func (o GetGcpProxyCertificatesOutput) ToGetGcpProxyCertificatesOutputWithContext(ctx context.Context) GetGcpProxyCertificatesOutput {
	return o
}

func (o GetGcpProxyCertificatesOutput) ToGetGcpProxyCertificatesPtrOutput() GetGcpProxyCertificatesPtrOutput {
	return o.ToGetGcpProxyCertificatesPtrOutputWithContext(context.Background())
}

func (o GetGcpProxyCertificatesOutput) ToGetGcpProxyCertificatesPtrOutputWithContext(ctx context.Context) GetGcpProxyCertificatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetGcpProxyCertificates) *GetGcpProxyCertificates {
		return &v
	}).(GetGcpProxyCertificatesPtrOutput)
}

// Certificate secret ID
func (o GetGcpProxyCertificatesOutput) CertSecretId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGcpProxyCertificates) string { return v.CertSecretId }).(pulumi.StringOutput)
}

// Private key secret ID
func (o GetGcpProxyCertificatesOutput) KeySecretId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGcpProxyCertificates) string { return v.KeySecretId }).(pulumi.StringOutput)
}

type GetGcpProxyCertificatesPtrOutput struct{ *pulumi.OutputState }

func (GetGcpProxyCertificatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetGcpProxyCertificates)(nil)).Elem()
}

func (o GetGcpProxyCertificatesPtrOutput) ToGetGcpProxyCertificatesPtrOutput() GetGcpProxyCertificatesPtrOutput {
	return o
}

func (o GetGcpProxyCertificatesPtrOutput) ToGetGcpProxyCertificatesPtrOutputWithContext(ctx context.Context) GetGcpProxyCertificatesPtrOutput {
	return o
}

func (o GetGcpProxyCertificatesPtrOutput) Elem() GetGcpProxyCertificatesOutput {
	return o.ApplyT(func(v *GetGcpProxyCertificates) GetGcpProxyCertificates {
		if v != nil {
			return *v
		}
		var ret GetGcpProxyCertificates
		return ret
	}).(GetGcpProxyCertificatesOutput)
}

// Certificate secret ID
func (o GetGcpProxyCertificatesPtrOutput) CertSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetGcpProxyCertificates) *string {
		if v == nil {
			return nil
		}
		return &v.CertSecretId
	}).(pulumi.StringPtrOutput)
}

// Private key secret ID
func (o GetGcpProxyCertificatesPtrOutput) KeySecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetGcpProxyCertificates) *string {
		if v == nil {
			return nil
		}
		return &v.KeySecretId
	}).(pulumi.StringPtrOutput)
}

type GetRuleEcsContainer struct {
	// Name of cluster in which service belong to
	Cluster string `pulumi:"cluster"`
	// Region of cluster
	Region string `pulumi:"region"`
	// Name of service to be onboarded
	Service string `pulumi:"service"`
	// Desired number of tasks on warming up a rule
	TaskCount *int `pulumi:"taskCount"`
}

// GetRuleEcsContainerInput is an input type that accepts GetRuleEcsContainerArgs and GetRuleEcsContainerOutput values.
// You can construct a concrete instance of `GetRuleEcsContainerInput` via:
//
//	GetRuleEcsContainerArgs{...}
type GetRuleEcsContainerInput interface {
	pulumi.Input

	ToGetRuleEcsContainerOutput() GetRuleEcsContainerOutput
	ToGetRuleEcsContainerOutputWithContext(context.Context) GetRuleEcsContainerOutput
}

type GetRuleEcsContainerArgs struct {
	// Name of cluster in which service belong to
	Cluster pulumi.StringInput `pulumi:"cluster"`
	// Region of cluster
	Region pulumi.StringInput `pulumi:"region"`
	// Name of service to be onboarded
	Service pulumi.StringInput `pulumi:"service"`
	// Desired number of tasks on warming up a rule
	TaskCount pulumi.IntPtrInput `pulumi:"taskCount"`
}

func (GetRuleEcsContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleEcsContainer)(nil)).Elem()
}

func (i GetRuleEcsContainerArgs) ToGetRuleEcsContainerOutput() GetRuleEcsContainerOutput {
	return i.ToGetRuleEcsContainerOutputWithContext(context.Background())
}

func (i GetRuleEcsContainerArgs) ToGetRuleEcsContainerOutputWithContext(ctx context.Context) GetRuleEcsContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleEcsContainerOutput)
}

func (i GetRuleEcsContainerArgs) ToGetRuleEcsContainerPtrOutput() GetRuleEcsContainerPtrOutput {
	return i.ToGetRuleEcsContainerPtrOutputWithContext(context.Background())
}

func (i GetRuleEcsContainerArgs) ToGetRuleEcsContainerPtrOutputWithContext(ctx context.Context) GetRuleEcsContainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleEcsContainerOutput).ToGetRuleEcsContainerPtrOutputWithContext(ctx)
}

// GetRuleEcsContainerPtrInput is an input type that accepts GetRuleEcsContainerArgs, GetRuleEcsContainerPtr and GetRuleEcsContainerPtrOutput values.
// You can construct a concrete instance of `GetRuleEcsContainerPtrInput` via:
//
//	        GetRuleEcsContainerArgs{...}
//
//	or:
//
//	        nil
type GetRuleEcsContainerPtrInput interface {
	pulumi.Input

	ToGetRuleEcsContainerPtrOutput() GetRuleEcsContainerPtrOutput
	ToGetRuleEcsContainerPtrOutputWithContext(context.Context) GetRuleEcsContainerPtrOutput
}

type getRuleEcsContainerPtrType GetRuleEcsContainerArgs

func GetRuleEcsContainerPtr(v *GetRuleEcsContainerArgs) GetRuleEcsContainerPtrInput {
	return (*getRuleEcsContainerPtrType)(v)
}

func (*getRuleEcsContainerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetRuleEcsContainer)(nil)).Elem()
}

func (i *getRuleEcsContainerPtrType) ToGetRuleEcsContainerPtrOutput() GetRuleEcsContainerPtrOutput {
	return i.ToGetRuleEcsContainerPtrOutputWithContext(context.Background())
}

func (i *getRuleEcsContainerPtrType) ToGetRuleEcsContainerPtrOutputWithContext(ctx context.Context) GetRuleEcsContainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleEcsContainerPtrOutput)
}

type GetRuleEcsContainerOutput struct{ *pulumi.OutputState }

func (GetRuleEcsContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleEcsContainer)(nil)).Elem()
}

func (o GetRuleEcsContainerOutput) ToGetRuleEcsContainerOutput() GetRuleEcsContainerOutput {
	return o
}

func (o GetRuleEcsContainerOutput) ToGetRuleEcsContainerOutputWithContext(ctx context.Context) GetRuleEcsContainerOutput {
	return o
}

func (o GetRuleEcsContainerOutput) ToGetRuleEcsContainerPtrOutput() GetRuleEcsContainerPtrOutput {
	return o.ToGetRuleEcsContainerPtrOutputWithContext(context.Background())
}

func (o GetRuleEcsContainerOutput) ToGetRuleEcsContainerPtrOutputWithContext(ctx context.Context) GetRuleEcsContainerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetRuleEcsContainer) *GetRuleEcsContainer {
		return &v
	}).(GetRuleEcsContainerPtrOutput)
}

// Name of cluster in which service belong to
func (o GetRuleEcsContainerOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleEcsContainer) string { return v.Cluster }).(pulumi.StringOutput)
}

// Region of cluster
func (o GetRuleEcsContainerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleEcsContainer) string { return v.Region }).(pulumi.StringOutput)
}

// Name of service to be onboarded
func (o GetRuleEcsContainerOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleEcsContainer) string { return v.Service }).(pulumi.StringOutput)
}

// Desired number of tasks on warming up a rule
func (o GetRuleEcsContainerOutput) TaskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRuleEcsContainer) *int { return v.TaskCount }).(pulumi.IntPtrOutput)
}

type GetRuleEcsContainerPtrOutput struct{ *pulumi.OutputState }

func (GetRuleEcsContainerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetRuleEcsContainer)(nil)).Elem()
}

func (o GetRuleEcsContainerPtrOutput) ToGetRuleEcsContainerPtrOutput() GetRuleEcsContainerPtrOutput {
	return o
}

func (o GetRuleEcsContainerPtrOutput) ToGetRuleEcsContainerPtrOutputWithContext(ctx context.Context) GetRuleEcsContainerPtrOutput {
	return o
}

func (o GetRuleEcsContainerPtrOutput) Elem() GetRuleEcsContainerOutput {
	return o.ApplyT(func(v *GetRuleEcsContainer) GetRuleEcsContainer {
		if v != nil {
			return *v
		}
		var ret GetRuleEcsContainer
		return ret
	}).(GetRuleEcsContainerOutput)
}

// Name of cluster in which service belong to
func (o GetRuleEcsContainerPtrOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRuleEcsContainer) *string {
		if v == nil {
			return nil
		}
		return &v.Cluster
	}).(pulumi.StringPtrOutput)
}

// Region of cluster
func (o GetRuleEcsContainerPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRuleEcsContainer) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// Name of service to be onboarded
func (o GetRuleEcsContainerPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRuleEcsContainer) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

// Desired number of tasks on warming up a rule
func (o GetRuleEcsContainerPtrOutput) TaskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetRuleEcsContainer) *int {
		if v == nil {
			return nil
		}
		return v.TaskCount
	}).(pulumi.IntPtrOutput)
}

type GetRuleEcsDepend struct {
	// Number of seconds the rule should wait after warming up the dependent rule
	DelayInSec *int `pulumi:"delayInSec"`
	// Rule id of the dependent rule
	RuleId int `pulumi:"ruleId"`
}

// GetRuleEcsDependInput is an input type that accepts GetRuleEcsDependArgs and GetRuleEcsDependOutput values.
// You can construct a concrete instance of `GetRuleEcsDependInput` via:
//
//	GetRuleEcsDependArgs{...}
type GetRuleEcsDependInput interface {
	pulumi.Input

	ToGetRuleEcsDependOutput() GetRuleEcsDependOutput
	ToGetRuleEcsDependOutputWithContext(context.Context) GetRuleEcsDependOutput
}

type GetRuleEcsDependArgs struct {
	// Number of seconds the rule should wait after warming up the dependent rule
	DelayInSec pulumi.IntPtrInput `pulumi:"delayInSec"`
	// Rule id of the dependent rule
	RuleId pulumi.IntInput `pulumi:"ruleId"`
}

func (GetRuleEcsDependArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleEcsDepend)(nil)).Elem()
}

func (i GetRuleEcsDependArgs) ToGetRuleEcsDependOutput() GetRuleEcsDependOutput {
	return i.ToGetRuleEcsDependOutputWithContext(context.Background())
}

func (i GetRuleEcsDependArgs) ToGetRuleEcsDependOutputWithContext(ctx context.Context) GetRuleEcsDependOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleEcsDependOutput)
}

// GetRuleEcsDependArrayInput is an input type that accepts GetRuleEcsDependArray and GetRuleEcsDependArrayOutput values.
// You can construct a concrete instance of `GetRuleEcsDependArrayInput` via:
//
//	GetRuleEcsDependArray{ GetRuleEcsDependArgs{...} }
type GetRuleEcsDependArrayInput interface {
	pulumi.Input

	ToGetRuleEcsDependArrayOutput() GetRuleEcsDependArrayOutput
	ToGetRuleEcsDependArrayOutputWithContext(context.Context) GetRuleEcsDependArrayOutput
}

type GetRuleEcsDependArray []GetRuleEcsDependInput

func (GetRuleEcsDependArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleEcsDepend)(nil)).Elem()
}

func (i GetRuleEcsDependArray) ToGetRuleEcsDependArrayOutput() GetRuleEcsDependArrayOutput {
	return i.ToGetRuleEcsDependArrayOutputWithContext(context.Background())
}

func (i GetRuleEcsDependArray) ToGetRuleEcsDependArrayOutputWithContext(ctx context.Context) GetRuleEcsDependArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleEcsDependArrayOutput)
}

type GetRuleEcsDependOutput struct{ *pulumi.OutputState }

func (GetRuleEcsDependOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleEcsDepend)(nil)).Elem()
}

func (o GetRuleEcsDependOutput) ToGetRuleEcsDependOutput() GetRuleEcsDependOutput {
	return o
}

func (o GetRuleEcsDependOutput) ToGetRuleEcsDependOutputWithContext(ctx context.Context) GetRuleEcsDependOutput {
	return o
}

// Number of seconds the rule should wait after warming up the dependent rule
func (o GetRuleEcsDependOutput) DelayInSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRuleEcsDepend) *int { return v.DelayInSec }).(pulumi.IntPtrOutput)
}

// Rule id of the dependent rule
func (o GetRuleEcsDependOutput) RuleId() pulumi.IntOutput {
	return o.ApplyT(func(v GetRuleEcsDepend) int { return v.RuleId }).(pulumi.IntOutput)
}

type GetRuleEcsDependArrayOutput struct{ *pulumi.OutputState }

func (GetRuleEcsDependArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleEcsDepend)(nil)).Elem()
}

func (o GetRuleEcsDependArrayOutput) ToGetRuleEcsDependArrayOutput() GetRuleEcsDependArrayOutput {
	return o
}

func (o GetRuleEcsDependArrayOutput) ToGetRuleEcsDependArrayOutputWithContext(ctx context.Context) GetRuleEcsDependArrayOutput {
	return o
}

func (o GetRuleEcsDependArrayOutput) Index(i pulumi.IntInput) GetRuleEcsDependOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRuleEcsDepend {
		return vs[0].([]GetRuleEcsDepend)[vs[1].(int)]
	}).(GetRuleEcsDependOutput)
}

type GetRuleEcsHttp struct {
	// Id of the proxy
	ProxyId string `pulumi:"proxyId"`
}

// GetRuleEcsHttpInput is an input type that accepts GetRuleEcsHttpArgs and GetRuleEcsHttpOutput values.
// You can construct a concrete instance of `GetRuleEcsHttpInput` via:
//
//	GetRuleEcsHttpArgs{...}
type GetRuleEcsHttpInput interface {
	pulumi.Input

	ToGetRuleEcsHttpOutput() GetRuleEcsHttpOutput
	ToGetRuleEcsHttpOutputWithContext(context.Context) GetRuleEcsHttpOutput
}

type GetRuleEcsHttpArgs struct {
	// Id of the proxy
	ProxyId pulumi.StringInput `pulumi:"proxyId"`
}

func (GetRuleEcsHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleEcsHttp)(nil)).Elem()
}

func (i GetRuleEcsHttpArgs) ToGetRuleEcsHttpOutput() GetRuleEcsHttpOutput {
	return i.ToGetRuleEcsHttpOutputWithContext(context.Background())
}

func (i GetRuleEcsHttpArgs) ToGetRuleEcsHttpOutputWithContext(ctx context.Context) GetRuleEcsHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleEcsHttpOutput)
}

// GetRuleEcsHttpArrayInput is an input type that accepts GetRuleEcsHttpArray and GetRuleEcsHttpArrayOutput values.
// You can construct a concrete instance of `GetRuleEcsHttpArrayInput` via:
//
//	GetRuleEcsHttpArray{ GetRuleEcsHttpArgs{...} }
type GetRuleEcsHttpArrayInput interface {
	pulumi.Input

	ToGetRuleEcsHttpArrayOutput() GetRuleEcsHttpArrayOutput
	ToGetRuleEcsHttpArrayOutputWithContext(context.Context) GetRuleEcsHttpArrayOutput
}

type GetRuleEcsHttpArray []GetRuleEcsHttpInput

func (GetRuleEcsHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleEcsHttp)(nil)).Elem()
}

func (i GetRuleEcsHttpArray) ToGetRuleEcsHttpArrayOutput() GetRuleEcsHttpArrayOutput {
	return i.ToGetRuleEcsHttpArrayOutputWithContext(context.Background())
}

func (i GetRuleEcsHttpArray) ToGetRuleEcsHttpArrayOutputWithContext(ctx context.Context) GetRuleEcsHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleEcsHttpArrayOutput)
}

type GetRuleEcsHttpOutput struct{ *pulumi.OutputState }

func (GetRuleEcsHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleEcsHttp)(nil)).Elem()
}

func (o GetRuleEcsHttpOutput) ToGetRuleEcsHttpOutput() GetRuleEcsHttpOutput {
	return o
}

func (o GetRuleEcsHttpOutput) ToGetRuleEcsHttpOutputWithContext(ctx context.Context) GetRuleEcsHttpOutput {
	return o
}

// Id of the proxy
func (o GetRuleEcsHttpOutput) ProxyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleEcsHttp) string { return v.ProxyId }).(pulumi.StringOutput)
}

type GetRuleEcsHttpArrayOutput struct{ *pulumi.OutputState }

func (GetRuleEcsHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleEcsHttp)(nil)).Elem()
}

func (o GetRuleEcsHttpArrayOutput) ToGetRuleEcsHttpArrayOutput() GetRuleEcsHttpArrayOutput {
	return o
}

func (o GetRuleEcsHttpArrayOutput) ToGetRuleEcsHttpArrayOutputWithContext(ctx context.Context) GetRuleEcsHttpArrayOutput {
	return o
}

func (o GetRuleEcsHttpArrayOutput) Index(i pulumi.IntInput) GetRuleEcsHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRuleEcsHttp {
		return vs[0].([]GetRuleEcsHttp)[vs[1].(int)]
	}).(GetRuleEcsHttpOutput)
}

type GetRuleRdsDatabase struct {
	// ID of the database
	Id string `pulumi:"id"`
	// Region to which database belong to
	Region string `pulumi:"region"`
}

// GetRuleRdsDatabaseInput is an input type that accepts GetRuleRdsDatabaseArgs and GetRuleRdsDatabaseOutput values.
// You can construct a concrete instance of `GetRuleRdsDatabaseInput` via:
//
//	GetRuleRdsDatabaseArgs{...}
type GetRuleRdsDatabaseInput interface {
	pulumi.Input

	ToGetRuleRdsDatabaseOutput() GetRuleRdsDatabaseOutput
	ToGetRuleRdsDatabaseOutputWithContext(context.Context) GetRuleRdsDatabaseOutput
}

type GetRuleRdsDatabaseArgs struct {
	// ID of the database
	Id pulumi.StringInput `pulumi:"id"`
	// Region to which database belong to
	Region pulumi.StringInput `pulumi:"region"`
}

func (GetRuleRdsDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleRdsDatabase)(nil)).Elem()
}

func (i GetRuleRdsDatabaseArgs) ToGetRuleRdsDatabaseOutput() GetRuleRdsDatabaseOutput {
	return i.ToGetRuleRdsDatabaseOutputWithContext(context.Background())
}

func (i GetRuleRdsDatabaseArgs) ToGetRuleRdsDatabaseOutputWithContext(ctx context.Context) GetRuleRdsDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleRdsDatabaseOutput)
}

type GetRuleRdsDatabaseOutput struct{ *pulumi.OutputState }

func (GetRuleRdsDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleRdsDatabase)(nil)).Elem()
}

func (o GetRuleRdsDatabaseOutput) ToGetRuleRdsDatabaseOutput() GetRuleRdsDatabaseOutput {
	return o
}

func (o GetRuleRdsDatabaseOutput) ToGetRuleRdsDatabaseOutputWithContext(ctx context.Context) GetRuleRdsDatabaseOutput {
	return o
}

// ID of the database
func (o GetRuleRdsDatabaseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleRdsDatabase) string { return v.Id }).(pulumi.StringOutput)
}

// Region to which database belong to
func (o GetRuleRdsDatabaseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleRdsDatabase) string { return v.Region }).(pulumi.StringOutput)
}

type GetRuleRdsDepend struct {
	// Number of seconds the rule should wait after warming up the dependent rule
	DelayInSec *int `pulumi:"delayInSec"`
	// Rule id of the dependent rule
	RuleId int `pulumi:"ruleId"`
}

// GetRuleRdsDependInput is an input type that accepts GetRuleRdsDependArgs and GetRuleRdsDependOutput values.
// You can construct a concrete instance of `GetRuleRdsDependInput` via:
//
//	GetRuleRdsDependArgs{...}
type GetRuleRdsDependInput interface {
	pulumi.Input

	ToGetRuleRdsDependOutput() GetRuleRdsDependOutput
	ToGetRuleRdsDependOutputWithContext(context.Context) GetRuleRdsDependOutput
}

type GetRuleRdsDependArgs struct {
	// Number of seconds the rule should wait after warming up the dependent rule
	DelayInSec pulumi.IntPtrInput `pulumi:"delayInSec"`
	// Rule id of the dependent rule
	RuleId pulumi.IntInput `pulumi:"ruleId"`
}

func (GetRuleRdsDependArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleRdsDepend)(nil)).Elem()
}

func (i GetRuleRdsDependArgs) ToGetRuleRdsDependOutput() GetRuleRdsDependOutput {
	return i.ToGetRuleRdsDependOutputWithContext(context.Background())
}

func (i GetRuleRdsDependArgs) ToGetRuleRdsDependOutputWithContext(ctx context.Context) GetRuleRdsDependOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleRdsDependOutput)
}

// GetRuleRdsDependArrayInput is an input type that accepts GetRuleRdsDependArray and GetRuleRdsDependArrayOutput values.
// You can construct a concrete instance of `GetRuleRdsDependArrayInput` via:
//
//	GetRuleRdsDependArray{ GetRuleRdsDependArgs{...} }
type GetRuleRdsDependArrayInput interface {
	pulumi.Input

	ToGetRuleRdsDependArrayOutput() GetRuleRdsDependArrayOutput
	ToGetRuleRdsDependArrayOutputWithContext(context.Context) GetRuleRdsDependArrayOutput
}

type GetRuleRdsDependArray []GetRuleRdsDependInput

func (GetRuleRdsDependArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleRdsDepend)(nil)).Elem()
}

func (i GetRuleRdsDependArray) ToGetRuleRdsDependArrayOutput() GetRuleRdsDependArrayOutput {
	return i.ToGetRuleRdsDependArrayOutputWithContext(context.Background())
}

func (i GetRuleRdsDependArray) ToGetRuleRdsDependArrayOutputWithContext(ctx context.Context) GetRuleRdsDependArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleRdsDependArrayOutput)
}

type GetRuleRdsDependOutput struct{ *pulumi.OutputState }

func (GetRuleRdsDependOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleRdsDepend)(nil)).Elem()
}

func (o GetRuleRdsDependOutput) ToGetRuleRdsDependOutput() GetRuleRdsDependOutput {
	return o
}

func (o GetRuleRdsDependOutput) ToGetRuleRdsDependOutputWithContext(ctx context.Context) GetRuleRdsDependOutput {
	return o
}

// Number of seconds the rule should wait after warming up the dependent rule
func (o GetRuleRdsDependOutput) DelayInSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRuleRdsDepend) *int { return v.DelayInSec }).(pulumi.IntPtrOutput)
}

// Rule id of the dependent rule
func (o GetRuleRdsDependOutput) RuleId() pulumi.IntOutput {
	return o.ApplyT(func(v GetRuleRdsDepend) int { return v.RuleId }).(pulumi.IntOutput)
}

type GetRuleRdsDependArrayOutput struct{ *pulumi.OutputState }

func (GetRuleRdsDependArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleRdsDepend)(nil)).Elem()
}

func (o GetRuleRdsDependArrayOutput) ToGetRuleRdsDependArrayOutput() GetRuleRdsDependArrayOutput {
	return o
}

func (o GetRuleRdsDependArrayOutput) ToGetRuleRdsDependArrayOutputWithContext(ctx context.Context) GetRuleRdsDependArrayOutput {
	return o
}

func (o GetRuleRdsDependArrayOutput) Index(i pulumi.IntInput) GetRuleRdsDependOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRuleRdsDepend {
		return vs[0].([]GetRuleRdsDepend)[vs[1].(int)]
	}).(GetRuleRdsDependOutput)
}

type GetRuleRdsTcp struct {
	// Additional tcp forwarding rules
	ForwardRules []GetRuleRdsTcpForwardRule `pulumi:"forwardRules"`
	// Id of the Proxy
	ProxyId string `pulumi:"proxyId"`
}

// GetRuleRdsTcpInput is an input type that accepts GetRuleRdsTcpArgs and GetRuleRdsTcpOutput values.
// You can construct a concrete instance of `GetRuleRdsTcpInput` via:
//
//	GetRuleRdsTcpArgs{...}
type GetRuleRdsTcpInput interface {
	pulumi.Input

	ToGetRuleRdsTcpOutput() GetRuleRdsTcpOutput
	ToGetRuleRdsTcpOutputWithContext(context.Context) GetRuleRdsTcpOutput
}

type GetRuleRdsTcpArgs struct {
	// Additional tcp forwarding rules
	ForwardRules GetRuleRdsTcpForwardRuleArrayInput `pulumi:"forwardRules"`
	// Id of the Proxy
	ProxyId pulumi.StringInput `pulumi:"proxyId"`
}

func (GetRuleRdsTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleRdsTcp)(nil)).Elem()
}

func (i GetRuleRdsTcpArgs) ToGetRuleRdsTcpOutput() GetRuleRdsTcpOutput {
	return i.ToGetRuleRdsTcpOutputWithContext(context.Background())
}

func (i GetRuleRdsTcpArgs) ToGetRuleRdsTcpOutputWithContext(ctx context.Context) GetRuleRdsTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleRdsTcpOutput)
}

// GetRuleRdsTcpArrayInput is an input type that accepts GetRuleRdsTcpArray and GetRuleRdsTcpArrayOutput values.
// You can construct a concrete instance of `GetRuleRdsTcpArrayInput` via:
//
//	GetRuleRdsTcpArray{ GetRuleRdsTcpArgs{...} }
type GetRuleRdsTcpArrayInput interface {
	pulumi.Input

	ToGetRuleRdsTcpArrayOutput() GetRuleRdsTcpArrayOutput
	ToGetRuleRdsTcpArrayOutputWithContext(context.Context) GetRuleRdsTcpArrayOutput
}

type GetRuleRdsTcpArray []GetRuleRdsTcpInput

func (GetRuleRdsTcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleRdsTcp)(nil)).Elem()
}

func (i GetRuleRdsTcpArray) ToGetRuleRdsTcpArrayOutput() GetRuleRdsTcpArrayOutput {
	return i.ToGetRuleRdsTcpArrayOutputWithContext(context.Background())
}

func (i GetRuleRdsTcpArray) ToGetRuleRdsTcpArrayOutputWithContext(ctx context.Context) GetRuleRdsTcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleRdsTcpArrayOutput)
}

type GetRuleRdsTcpOutput struct{ *pulumi.OutputState }

func (GetRuleRdsTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleRdsTcp)(nil)).Elem()
}

func (o GetRuleRdsTcpOutput) ToGetRuleRdsTcpOutput() GetRuleRdsTcpOutput {
	return o
}

func (o GetRuleRdsTcpOutput) ToGetRuleRdsTcpOutputWithContext(ctx context.Context) GetRuleRdsTcpOutput {
	return o
}

// Additional tcp forwarding rules
func (o GetRuleRdsTcpOutput) ForwardRules() GetRuleRdsTcpForwardRuleArrayOutput {
	return o.ApplyT(func(v GetRuleRdsTcp) []GetRuleRdsTcpForwardRule { return v.ForwardRules }).(GetRuleRdsTcpForwardRuleArrayOutput)
}

// Id of the Proxy
func (o GetRuleRdsTcpOutput) ProxyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleRdsTcp) string { return v.ProxyId }).(pulumi.StringOutput)
}

type GetRuleRdsTcpArrayOutput struct{ *pulumi.OutputState }

func (GetRuleRdsTcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleRdsTcp)(nil)).Elem()
}

func (o GetRuleRdsTcpArrayOutput) ToGetRuleRdsTcpArrayOutput() GetRuleRdsTcpArrayOutput {
	return o
}

func (o GetRuleRdsTcpArrayOutput) ToGetRuleRdsTcpArrayOutputWithContext(ctx context.Context) GetRuleRdsTcpArrayOutput {
	return o
}

func (o GetRuleRdsTcpArrayOutput) Index(i pulumi.IntInput) GetRuleRdsTcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRuleRdsTcp {
		return vs[0].([]GetRuleRdsTcp)[vs[1].(int)]
	}).(GetRuleRdsTcpOutput)
}

type GetRuleRdsTcpForwardRule struct {
	// Port to listen on the proxy
	ConnectOn *int `pulumi:"connectOn"`
	// Port to listen on the vm
	Port int `pulumi:"port"`
}

// GetRuleRdsTcpForwardRuleInput is an input type that accepts GetRuleRdsTcpForwardRuleArgs and GetRuleRdsTcpForwardRuleOutput values.
// You can construct a concrete instance of `GetRuleRdsTcpForwardRuleInput` via:
//
//	GetRuleRdsTcpForwardRuleArgs{...}
type GetRuleRdsTcpForwardRuleInput interface {
	pulumi.Input

	ToGetRuleRdsTcpForwardRuleOutput() GetRuleRdsTcpForwardRuleOutput
	ToGetRuleRdsTcpForwardRuleOutputWithContext(context.Context) GetRuleRdsTcpForwardRuleOutput
}

type GetRuleRdsTcpForwardRuleArgs struct {
	// Port to listen on the proxy
	ConnectOn pulumi.IntPtrInput `pulumi:"connectOn"`
	// Port to listen on the vm
	Port pulumi.IntInput `pulumi:"port"`
}

func (GetRuleRdsTcpForwardRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleRdsTcpForwardRule)(nil)).Elem()
}

func (i GetRuleRdsTcpForwardRuleArgs) ToGetRuleRdsTcpForwardRuleOutput() GetRuleRdsTcpForwardRuleOutput {
	return i.ToGetRuleRdsTcpForwardRuleOutputWithContext(context.Background())
}

func (i GetRuleRdsTcpForwardRuleArgs) ToGetRuleRdsTcpForwardRuleOutputWithContext(ctx context.Context) GetRuleRdsTcpForwardRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleRdsTcpForwardRuleOutput)
}

// GetRuleRdsTcpForwardRuleArrayInput is an input type that accepts GetRuleRdsTcpForwardRuleArray and GetRuleRdsTcpForwardRuleArrayOutput values.
// You can construct a concrete instance of `GetRuleRdsTcpForwardRuleArrayInput` via:
//
//	GetRuleRdsTcpForwardRuleArray{ GetRuleRdsTcpForwardRuleArgs{...} }
type GetRuleRdsTcpForwardRuleArrayInput interface {
	pulumi.Input

	ToGetRuleRdsTcpForwardRuleArrayOutput() GetRuleRdsTcpForwardRuleArrayOutput
	ToGetRuleRdsTcpForwardRuleArrayOutputWithContext(context.Context) GetRuleRdsTcpForwardRuleArrayOutput
}

type GetRuleRdsTcpForwardRuleArray []GetRuleRdsTcpForwardRuleInput

func (GetRuleRdsTcpForwardRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleRdsTcpForwardRule)(nil)).Elem()
}

func (i GetRuleRdsTcpForwardRuleArray) ToGetRuleRdsTcpForwardRuleArrayOutput() GetRuleRdsTcpForwardRuleArrayOutput {
	return i.ToGetRuleRdsTcpForwardRuleArrayOutputWithContext(context.Background())
}

func (i GetRuleRdsTcpForwardRuleArray) ToGetRuleRdsTcpForwardRuleArrayOutputWithContext(ctx context.Context) GetRuleRdsTcpForwardRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleRdsTcpForwardRuleArrayOutput)
}

type GetRuleRdsTcpForwardRuleOutput struct{ *pulumi.OutputState }

func (GetRuleRdsTcpForwardRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleRdsTcpForwardRule)(nil)).Elem()
}

func (o GetRuleRdsTcpForwardRuleOutput) ToGetRuleRdsTcpForwardRuleOutput() GetRuleRdsTcpForwardRuleOutput {
	return o
}

func (o GetRuleRdsTcpForwardRuleOutput) ToGetRuleRdsTcpForwardRuleOutputWithContext(ctx context.Context) GetRuleRdsTcpForwardRuleOutput {
	return o
}

// Port to listen on the proxy
func (o GetRuleRdsTcpForwardRuleOutput) ConnectOn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRuleRdsTcpForwardRule) *int { return v.ConnectOn }).(pulumi.IntPtrOutput)
}

// Port to listen on the vm
func (o GetRuleRdsTcpForwardRuleOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetRuleRdsTcpForwardRule) int { return v.Port }).(pulumi.IntOutput)
}

type GetRuleRdsTcpForwardRuleArrayOutput struct{ *pulumi.OutputState }

func (GetRuleRdsTcpForwardRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleRdsTcpForwardRule)(nil)).Elem()
}

func (o GetRuleRdsTcpForwardRuleArrayOutput) ToGetRuleRdsTcpForwardRuleArrayOutput() GetRuleRdsTcpForwardRuleArrayOutput {
	return o
}

func (o GetRuleRdsTcpForwardRuleArrayOutput) ToGetRuleRdsTcpForwardRuleArrayOutputWithContext(ctx context.Context) GetRuleRdsTcpForwardRuleArrayOutput {
	return o
}

func (o GetRuleRdsTcpForwardRuleArrayOutput) Index(i pulumi.IntInput) GetRuleRdsTcpForwardRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRuleRdsTcpForwardRule {
		return vs[0].([]GetRuleRdsTcpForwardRule)[vs[1].(int)]
	}).(GetRuleRdsTcpForwardRuleOutput)
}

type GetRuleVmDepend struct {
	// Number of seconds the rule should wait after warming up the dependent rule
	DelayInSec *int `pulumi:"delayInSec"`
	// Rule id of the dependent rule
	RuleId int `pulumi:"ruleId"`
}

// GetRuleVmDependInput is an input type that accepts GetRuleVmDependArgs and GetRuleVmDependOutput values.
// You can construct a concrete instance of `GetRuleVmDependInput` via:
//
//	GetRuleVmDependArgs{...}
type GetRuleVmDependInput interface {
	pulumi.Input

	ToGetRuleVmDependOutput() GetRuleVmDependOutput
	ToGetRuleVmDependOutputWithContext(context.Context) GetRuleVmDependOutput
}

type GetRuleVmDependArgs struct {
	// Number of seconds the rule should wait after warming up the dependent rule
	DelayInSec pulumi.IntPtrInput `pulumi:"delayInSec"`
	// Rule id of the dependent rule
	RuleId pulumi.IntInput `pulumi:"ruleId"`
}

func (GetRuleVmDependArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleVmDepend)(nil)).Elem()
}

func (i GetRuleVmDependArgs) ToGetRuleVmDependOutput() GetRuleVmDependOutput {
	return i.ToGetRuleVmDependOutputWithContext(context.Background())
}

func (i GetRuleVmDependArgs) ToGetRuleVmDependOutputWithContext(ctx context.Context) GetRuleVmDependOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleVmDependOutput)
}

// GetRuleVmDependArrayInput is an input type that accepts GetRuleVmDependArray and GetRuleVmDependArrayOutput values.
// You can construct a concrete instance of `GetRuleVmDependArrayInput` via:
//
//	GetRuleVmDependArray{ GetRuleVmDependArgs{...} }
type GetRuleVmDependArrayInput interface {
	pulumi.Input

	ToGetRuleVmDependArrayOutput() GetRuleVmDependArrayOutput
	ToGetRuleVmDependArrayOutputWithContext(context.Context) GetRuleVmDependArrayOutput
}

type GetRuleVmDependArray []GetRuleVmDependInput

func (GetRuleVmDependArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleVmDepend)(nil)).Elem()
}

func (i GetRuleVmDependArray) ToGetRuleVmDependArrayOutput() GetRuleVmDependArrayOutput {
	return i.ToGetRuleVmDependArrayOutputWithContext(context.Background())
}

func (i GetRuleVmDependArray) ToGetRuleVmDependArrayOutputWithContext(ctx context.Context) GetRuleVmDependArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleVmDependArrayOutput)
}

type GetRuleVmDependOutput struct{ *pulumi.OutputState }

func (GetRuleVmDependOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleVmDepend)(nil)).Elem()
}

func (o GetRuleVmDependOutput) ToGetRuleVmDependOutput() GetRuleVmDependOutput {
	return o
}

func (o GetRuleVmDependOutput) ToGetRuleVmDependOutputWithContext(ctx context.Context) GetRuleVmDependOutput {
	return o
}

// Number of seconds the rule should wait after warming up the dependent rule
func (o GetRuleVmDependOutput) DelayInSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRuleVmDepend) *int { return v.DelayInSec }).(pulumi.IntPtrOutput)
}

// Rule id of the dependent rule
func (o GetRuleVmDependOutput) RuleId() pulumi.IntOutput {
	return o.ApplyT(func(v GetRuleVmDepend) int { return v.RuleId }).(pulumi.IntOutput)
}

type GetRuleVmDependArrayOutput struct{ *pulumi.OutputState }

func (GetRuleVmDependArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleVmDepend)(nil)).Elem()
}

func (o GetRuleVmDependArrayOutput) ToGetRuleVmDependArrayOutput() GetRuleVmDependArrayOutput {
	return o
}

func (o GetRuleVmDependArrayOutput) ToGetRuleVmDependArrayOutputWithContext(ctx context.Context) GetRuleVmDependArrayOutput {
	return o
}

func (o GetRuleVmDependArrayOutput) Index(i pulumi.IntInput) GetRuleVmDependOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRuleVmDepend {
		return vs[0].([]GetRuleVmDepend)[vs[1].(int)]
	}).(GetRuleVmDependOutput)
}

type GetRuleVmFilter struct {
	// Regions of instances that needs to be managed using the AutoStopping rules
	Regions []string `pulumi:"regions"`
	// Tags of instances that needs to be managed using the AutoStopping rules
	Tags []GetRuleVmFilterTag `pulumi:"tags"`
	// Ids of instances that needs to be managed using the AutoStopping rules
	VmIds []string `pulumi:"vmIds"`
	// Zones of instances that needs to be managed using the AutoStopping rules
	Zones []string `pulumi:"zones"`
}

// GetRuleVmFilterInput is an input type that accepts GetRuleVmFilterArgs and GetRuleVmFilterOutput values.
// You can construct a concrete instance of `GetRuleVmFilterInput` via:
//
//	GetRuleVmFilterArgs{...}
type GetRuleVmFilterInput interface {
	pulumi.Input

	ToGetRuleVmFilterOutput() GetRuleVmFilterOutput
	ToGetRuleVmFilterOutputWithContext(context.Context) GetRuleVmFilterOutput
}

type GetRuleVmFilterArgs struct {
	// Regions of instances that needs to be managed using the AutoStopping rules
	Regions pulumi.StringArrayInput `pulumi:"regions"`
	// Tags of instances that needs to be managed using the AutoStopping rules
	Tags GetRuleVmFilterTagArrayInput `pulumi:"tags"`
	// Ids of instances that needs to be managed using the AutoStopping rules
	VmIds pulumi.StringArrayInput `pulumi:"vmIds"`
	// Zones of instances that needs to be managed using the AutoStopping rules
	Zones pulumi.StringArrayInput `pulumi:"zones"`
}

func (GetRuleVmFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleVmFilter)(nil)).Elem()
}

func (i GetRuleVmFilterArgs) ToGetRuleVmFilterOutput() GetRuleVmFilterOutput {
	return i.ToGetRuleVmFilterOutputWithContext(context.Background())
}

func (i GetRuleVmFilterArgs) ToGetRuleVmFilterOutputWithContext(ctx context.Context) GetRuleVmFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleVmFilterOutput)
}

type GetRuleVmFilterOutput struct{ *pulumi.OutputState }

func (GetRuleVmFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleVmFilter)(nil)).Elem()
}

func (o GetRuleVmFilterOutput) ToGetRuleVmFilterOutput() GetRuleVmFilterOutput {
	return o
}

func (o GetRuleVmFilterOutput) ToGetRuleVmFilterOutputWithContext(ctx context.Context) GetRuleVmFilterOutput {
	return o
}

// Regions of instances that needs to be managed using the AutoStopping rules
func (o GetRuleVmFilterOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRuleVmFilter) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

// Tags of instances that needs to be managed using the AutoStopping rules
func (o GetRuleVmFilterOutput) Tags() GetRuleVmFilterTagArrayOutput {
	return o.ApplyT(func(v GetRuleVmFilter) []GetRuleVmFilterTag { return v.Tags }).(GetRuleVmFilterTagArrayOutput)
}

// Ids of instances that needs to be managed using the AutoStopping rules
func (o GetRuleVmFilterOutput) VmIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRuleVmFilter) []string { return v.VmIds }).(pulumi.StringArrayOutput)
}

// Zones of instances that needs to be managed using the AutoStopping rules
func (o GetRuleVmFilterOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRuleVmFilter) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

type GetRuleVmFilterTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetRuleVmFilterTagInput is an input type that accepts GetRuleVmFilterTagArgs and GetRuleVmFilterTagOutput values.
// You can construct a concrete instance of `GetRuleVmFilterTagInput` via:
//
//	GetRuleVmFilterTagArgs{...}
type GetRuleVmFilterTagInput interface {
	pulumi.Input

	ToGetRuleVmFilterTagOutput() GetRuleVmFilterTagOutput
	ToGetRuleVmFilterTagOutputWithContext(context.Context) GetRuleVmFilterTagOutput
}

type GetRuleVmFilterTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetRuleVmFilterTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleVmFilterTag)(nil)).Elem()
}

func (i GetRuleVmFilterTagArgs) ToGetRuleVmFilterTagOutput() GetRuleVmFilterTagOutput {
	return i.ToGetRuleVmFilterTagOutputWithContext(context.Background())
}

func (i GetRuleVmFilterTagArgs) ToGetRuleVmFilterTagOutputWithContext(ctx context.Context) GetRuleVmFilterTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleVmFilterTagOutput)
}

// GetRuleVmFilterTagArrayInput is an input type that accepts GetRuleVmFilterTagArray and GetRuleVmFilterTagArrayOutput values.
// You can construct a concrete instance of `GetRuleVmFilterTagArrayInput` via:
//
//	GetRuleVmFilterTagArray{ GetRuleVmFilterTagArgs{...} }
type GetRuleVmFilterTagArrayInput interface {
	pulumi.Input

	ToGetRuleVmFilterTagArrayOutput() GetRuleVmFilterTagArrayOutput
	ToGetRuleVmFilterTagArrayOutputWithContext(context.Context) GetRuleVmFilterTagArrayOutput
}

type GetRuleVmFilterTagArray []GetRuleVmFilterTagInput

func (GetRuleVmFilterTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleVmFilterTag)(nil)).Elem()
}

func (i GetRuleVmFilterTagArray) ToGetRuleVmFilterTagArrayOutput() GetRuleVmFilterTagArrayOutput {
	return i.ToGetRuleVmFilterTagArrayOutputWithContext(context.Background())
}

func (i GetRuleVmFilterTagArray) ToGetRuleVmFilterTagArrayOutputWithContext(ctx context.Context) GetRuleVmFilterTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleVmFilterTagArrayOutput)
}

type GetRuleVmFilterTagOutput struct{ *pulumi.OutputState }

func (GetRuleVmFilterTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleVmFilterTag)(nil)).Elem()
}

func (o GetRuleVmFilterTagOutput) ToGetRuleVmFilterTagOutput() GetRuleVmFilterTagOutput {
	return o
}

func (o GetRuleVmFilterTagOutput) ToGetRuleVmFilterTagOutputWithContext(ctx context.Context) GetRuleVmFilterTagOutput {
	return o
}

func (o GetRuleVmFilterTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleVmFilterTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetRuleVmFilterTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleVmFilterTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetRuleVmFilterTagArrayOutput struct{ *pulumi.OutputState }

func (GetRuleVmFilterTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleVmFilterTag)(nil)).Elem()
}

func (o GetRuleVmFilterTagArrayOutput) ToGetRuleVmFilterTagArrayOutput() GetRuleVmFilterTagArrayOutput {
	return o
}

func (o GetRuleVmFilterTagArrayOutput) ToGetRuleVmFilterTagArrayOutputWithContext(ctx context.Context) GetRuleVmFilterTagArrayOutput {
	return o
}

func (o GetRuleVmFilterTagArrayOutput) Index(i pulumi.IntInput) GetRuleVmFilterTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRuleVmFilterTag {
		return vs[0].([]GetRuleVmFilterTag)[vs[1].(int)]
	}).(GetRuleVmFilterTagOutput)
}

type GetRuleVmHttp struct {
	// Health Check Details
	Healths []GetRuleVmHttpHealth `pulumi:"healths"`
	// Id of the proxy
	ProxyId string `pulumi:"proxyId"`
	// Routing configuration used to access the instances
	Routings []GetRuleVmHttpRouting `pulumi:"routings"`
}

// GetRuleVmHttpInput is an input type that accepts GetRuleVmHttpArgs and GetRuleVmHttpOutput values.
// You can construct a concrete instance of `GetRuleVmHttpInput` via:
//
//	GetRuleVmHttpArgs{...}
type GetRuleVmHttpInput interface {
	pulumi.Input

	ToGetRuleVmHttpOutput() GetRuleVmHttpOutput
	ToGetRuleVmHttpOutputWithContext(context.Context) GetRuleVmHttpOutput
}

type GetRuleVmHttpArgs struct {
	// Health Check Details
	Healths GetRuleVmHttpHealthArrayInput `pulumi:"healths"`
	// Id of the proxy
	ProxyId pulumi.StringInput `pulumi:"proxyId"`
	// Routing configuration used to access the instances
	Routings GetRuleVmHttpRoutingArrayInput `pulumi:"routings"`
}

func (GetRuleVmHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleVmHttp)(nil)).Elem()
}

func (i GetRuleVmHttpArgs) ToGetRuleVmHttpOutput() GetRuleVmHttpOutput {
	return i.ToGetRuleVmHttpOutputWithContext(context.Background())
}

func (i GetRuleVmHttpArgs) ToGetRuleVmHttpOutputWithContext(ctx context.Context) GetRuleVmHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleVmHttpOutput)
}

// GetRuleVmHttpArrayInput is an input type that accepts GetRuleVmHttpArray and GetRuleVmHttpArrayOutput values.
// You can construct a concrete instance of `GetRuleVmHttpArrayInput` via:
//
//	GetRuleVmHttpArray{ GetRuleVmHttpArgs{...} }
type GetRuleVmHttpArrayInput interface {
	pulumi.Input

	ToGetRuleVmHttpArrayOutput() GetRuleVmHttpArrayOutput
	ToGetRuleVmHttpArrayOutputWithContext(context.Context) GetRuleVmHttpArrayOutput
}

type GetRuleVmHttpArray []GetRuleVmHttpInput

func (GetRuleVmHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleVmHttp)(nil)).Elem()
}

func (i GetRuleVmHttpArray) ToGetRuleVmHttpArrayOutput() GetRuleVmHttpArrayOutput {
	return i.ToGetRuleVmHttpArrayOutputWithContext(context.Background())
}

func (i GetRuleVmHttpArray) ToGetRuleVmHttpArrayOutputWithContext(ctx context.Context) GetRuleVmHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleVmHttpArrayOutput)
}

type GetRuleVmHttpOutput struct{ *pulumi.OutputState }

func (GetRuleVmHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleVmHttp)(nil)).Elem()
}

func (o GetRuleVmHttpOutput) ToGetRuleVmHttpOutput() GetRuleVmHttpOutput {
	return o
}

func (o GetRuleVmHttpOutput) ToGetRuleVmHttpOutputWithContext(ctx context.Context) GetRuleVmHttpOutput {
	return o
}

// Health Check Details
func (o GetRuleVmHttpOutput) Healths() GetRuleVmHttpHealthArrayOutput {
	return o.ApplyT(func(v GetRuleVmHttp) []GetRuleVmHttpHealth { return v.Healths }).(GetRuleVmHttpHealthArrayOutput)
}

// Id of the proxy
func (o GetRuleVmHttpOutput) ProxyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleVmHttp) string { return v.ProxyId }).(pulumi.StringOutput)
}

// Routing configuration used to access the instances
func (o GetRuleVmHttpOutput) Routings() GetRuleVmHttpRoutingArrayOutput {
	return o.ApplyT(func(v GetRuleVmHttp) []GetRuleVmHttpRouting { return v.Routings }).(GetRuleVmHttpRoutingArrayOutput)
}

type GetRuleVmHttpArrayOutput struct{ *pulumi.OutputState }

func (GetRuleVmHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleVmHttp)(nil)).Elem()
}

func (o GetRuleVmHttpArrayOutput) ToGetRuleVmHttpArrayOutput() GetRuleVmHttpArrayOutput {
	return o
}

func (o GetRuleVmHttpArrayOutput) ToGetRuleVmHttpArrayOutputWithContext(ctx context.Context) GetRuleVmHttpArrayOutput {
	return o
}

func (o GetRuleVmHttpArrayOutput) Index(i pulumi.IntInput) GetRuleVmHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRuleVmHttp {
		return vs[0].([]GetRuleVmHttp)[vs[1].(int)]
	}).(GetRuleVmHttpOutput)
}

type GetRuleVmHttpHealth struct {
	// API path to use for health check
	Path *string `pulumi:"path"`
	// Health check port on the VM
	Port int `pulumi:"port"`
	// Protocol can be http or https
	Protocol string `pulumi:"protocol"`
	// Lower limit for acceptable status code
	StatusCodeFrom *int `pulumi:"statusCodeFrom"`
	// Upper limit for acceptable status code
	StatusCodeTo *int `pulumi:"statusCodeTo"`
	// Health check timeout
	Timeout *int `pulumi:"timeout"`
}

// GetRuleVmHttpHealthInput is an input type that accepts GetRuleVmHttpHealthArgs and GetRuleVmHttpHealthOutput values.
// You can construct a concrete instance of `GetRuleVmHttpHealthInput` via:
//
//	GetRuleVmHttpHealthArgs{...}
type GetRuleVmHttpHealthInput interface {
	pulumi.Input

	ToGetRuleVmHttpHealthOutput() GetRuleVmHttpHealthOutput
	ToGetRuleVmHttpHealthOutputWithContext(context.Context) GetRuleVmHttpHealthOutput
}

type GetRuleVmHttpHealthArgs struct {
	// API path to use for health check
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Health check port on the VM
	Port pulumi.IntInput `pulumi:"port"`
	// Protocol can be http or https
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// Lower limit for acceptable status code
	StatusCodeFrom pulumi.IntPtrInput `pulumi:"statusCodeFrom"`
	// Upper limit for acceptable status code
	StatusCodeTo pulumi.IntPtrInput `pulumi:"statusCodeTo"`
	// Health check timeout
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
}

func (GetRuleVmHttpHealthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleVmHttpHealth)(nil)).Elem()
}

func (i GetRuleVmHttpHealthArgs) ToGetRuleVmHttpHealthOutput() GetRuleVmHttpHealthOutput {
	return i.ToGetRuleVmHttpHealthOutputWithContext(context.Background())
}

func (i GetRuleVmHttpHealthArgs) ToGetRuleVmHttpHealthOutputWithContext(ctx context.Context) GetRuleVmHttpHealthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleVmHttpHealthOutput)
}

// GetRuleVmHttpHealthArrayInput is an input type that accepts GetRuleVmHttpHealthArray and GetRuleVmHttpHealthArrayOutput values.
// You can construct a concrete instance of `GetRuleVmHttpHealthArrayInput` via:
//
//	GetRuleVmHttpHealthArray{ GetRuleVmHttpHealthArgs{...} }
type GetRuleVmHttpHealthArrayInput interface {
	pulumi.Input

	ToGetRuleVmHttpHealthArrayOutput() GetRuleVmHttpHealthArrayOutput
	ToGetRuleVmHttpHealthArrayOutputWithContext(context.Context) GetRuleVmHttpHealthArrayOutput
}

type GetRuleVmHttpHealthArray []GetRuleVmHttpHealthInput

func (GetRuleVmHttpHealthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleVmHttpHealth)(nil)).Elem()
}

func (i GetRuleVmHttpHealthArray) ToGetRuleVmHttpHealthArrayOutput() GetRuleVmHttpHealthArrayOutput {
	return i.ToGetRuleVmHttpHealthArrayOutputWithContext(context.Background())
}

func (i GetRuleVmHttpHealthArray) ToGetRuleVmHttpHealthArrayOutputWithContext(ctx context.Context) GetRuleVmHttpHealthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleVmHttpHealthArrayOutput)
}

type GetRuleVmHttpHealthOutput struct{ *pulumi.OutputState }

func (GetRuleVmHttpHealthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleVmHttpHealth)(nil)).Elem()
}

func (o GetRuleVmHttpHealthOutput) ToGetRuleVmHttpHealthOutput() GetRuleVmHttpHealthOutput {
	return o
}

func (o GetRuleVmHttpHealthOutput) ToGetRuleVmHttpHealthOutputWithContext(ctx context.Context) GetRuleVmHttpHealthOutput {
	return o
}

// API path to use for health check
func (o GetRuleVmHttpHealthOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRuleVmHttpHealth) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Health check port on the VM
func (o GetRuleVmHttpHealthOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetRuleVmHttpHealth) int { return v.Port }).(pulumi.IntOutput)
}

// Protocol can be http or https
func (o GetRuleVmHttpHealthOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleVmHttpHealth) string { return v.Protocol }).(pulumi.StringOutput)
}

// Lower limit for acceptable status code
func (o GetRuleVmHttpHealthOutput) StatusCodeFrom() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRuleVmHttpHealth) *int { return v.StatusCodeFrom }).(pulumi.IntPtrOutput)
}

// Upper limit for acceptable status code
func (o GetRuleVmHttpHealthOutput) StatusCodeTo() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRuleVmHttpHealth) *int { return v.StatusCodeTo }).(pulumi.IntPtrOutput)
}

// Health check timeout
func (o GetRuleVmHttpHealthOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRuleVmHttpHealth) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type GetRuleVmHttpHealthArrayOutput struct{ *pulumi.OutputState }

func (GetRuleVmHttpHealthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleVmHttpHealth)(nil)).Elem()
}

func (o GetRuleVmHttpHealthArrayOutput) ToGetRuleVmHttpHealthArrayOutput() GetRuleVmHttpHealthArrayOutput {
	return o
}

func (o GetRuleVmHttpHealthArrayOutput) ToGetRuleVmHttpHealthArrayOutputWithContext(ctx context.Context) GetRuleVmHttpHealthArrayOutput {
	return o
}

func (o GetRuleVmHttpHealthArrayOutput) Index(i pulumi.IntInput) GetRuleVmHttpHealthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRuleVmHttpHealth {
		return vs[0].([]GetRuleVmHttpHealth)[vs[1].(int)]
	}).(GetRuleVmHttpHealthOutput)
}

type GetRuleVmHttpRouting struct {
	// Organization Identifier for the Entity
	Action *string `pulumi:"action"`
	// Port on the proxy
	SourcePort *int `pulumi:"sourcePort"`
	// Source protocol of the proxy can be http or https
	SourceProtocol string `pulumi:"sourceProtocol"`
	// Port on the VM
	TargetPort *int `pulumi:"targetPort"`
	// Target protocol of the instance can be http or https
	TargetProtocol string `pulumi:"targetProtocol"`
}

// GetRuleVmHttpRoutingInput is an input type that accepts GetRuleVmHttpRoutingArgs and GetRuleVmHttpRoutingOutput values.
// You can construct a concrete instance of `GetRuleVmHttpRoutingInput` via:
//
//	GetRuleVmHttpRoutingArgs{...}
type GetRuleVmHttpRoutingInput interface {
	pulumi.Input

	ToGetRuleVmHttpRoutingOutput() GetRuleVmHttpRoutingOutput
	ToGetRuleVmHttpRoutingOutputWithContext(context.Context) GetRuleVmHttpRoutingOutput
}

type GetRuleVmHttpRoutingArgs struct {
	// Organization Identifier for the Entity
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Port on the proxy
	SourcePort pulumi.IntPtrInput `pulumi:"sourcePort"`
	// Source protocol of the proxy can be http or https
	SourceProtocol pulumi.StringInput `pulumi:"sourceProtocol"`
	// Port on the VM
	TargetPort pulumi.IntPtrInput `pulumi:"targetPort"`
	// Target protocol of the instance can be http or https
	TargetProtocol pulumi.StringInput `pulumi:"targetProtocol"`
}

func (GetRuleVmHttpRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleVmHttpRouting)(nil)).Elem()
}

func (i GetRuleVmHttpRoutingArgs) ToGetRuleVmHttpRoutingOutput() GetRuleVmHttpRoutingOutput {
	return i.ToGetRuleVmHttpRoutingOutputWithContext(context.Background())
}

func (i GetRuleVmHttpRoutingArgs) ToGetRuleVmHttpRoutingOutputWithContext(ctx context.Context) GetRuleVmHttpRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleVmHttpRoutingOutput)
}

// GetRuleVmHttpRoutingArrayInput is an input type that accepts GetRuleVmHttpRoutingArray and GetRuleVmHttpRoutingArrayOutput values.
// You can construct a concrete instance of `GetRuleVmHttpRoutingArrayInput` via:
//
//	GetRuleVmHttpRoutingArray{ GetRuleVmHttpRoutingArgs{...} }
type GetRuleVmHttpRoutingArrayInput interface {
	pulumi.Input

	ToGetRuleVmHttpRoutingArrayOutput() GetRuleVmHttpRoutingArrayOutput
	ToGetRuleVmHttpRoutingArrayOutputWithContext(context.Context) GetRuleVmHttpRoutingArrayOutput
}

type GetRuleVmHttpRoutingArray []GetRuleVmHttpRoutingInput

func (GetRuleVmHttpRoutingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleVmHttpRouting)(nil)).Elem()
}

func (i GetRuleVmHttpRoutingArray) ToGetRuleVmHttpRoutingArrayOutput() GetRuleVmHttpRoutingArrayOutput {
	return i.ToGetRuleVmHttpRoutingArrayOutputWithContext(context.Background())
}

func (i GetRuleVmHttpRoutingArray) ToGetRuleVmHttpRoutingArrayOutputWithContext(ctx context.Context) GetRuleVmHttpRoutingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleVmHttpRoutingArrayOutput)
}

type GetRuleVmHttpRoutingOutput struct{ *pulumi.OutputState }

func (GetRuleVmHttpRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleVmHttpRouting)(nil)).Elem()
}

func (o GetRuleVmHttpRoutingOutput) ToGetRuleVmHttpRoutingOutput() GetRuleVmHttpRoutingOutput {
	return o
}

func (o GetRuleVmHttpRoutingOutput) ToGetRuleVmHttpRoutingOutputWithContext(ctx context.Context) GetRuleVmHttpRoutingOutput {
	return o
}

// Organization Identifier for the Entity
func (o GetRuleVmHttpRoutingOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRuleVmHttpRouting) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Port on the proxy
func (o GetRuleVmHttpRoutingOutput) SourcePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRuleVmHttpRouting) *int { return v.SourcePort }).(pulumi.IntPtrOutput)
}

// Source protocol of the proxy can be http or https
func (o GetRuleVmHttpRoutingOutput) SourceProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleVmHttpRouting) string { return v.SourceProtocol }).(pulumi.StringOutput)
}

// Port on the VM
func (o GetRuleVmHttpRoutingOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRuleVmHttpRouting) *int { return v.TargetPort }).(pulumi.IntPtrOutput)
}

// Target protocol of the instance can be http or https
func (o GetRuleVmHttpRoutingOutput) TargetProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleVmHttpRouting) string { return v.TargetProtocol }).(pulumi.StringOutput)
}

type GetRuleVmHttpRoutingArrayOutput struct{ *pulumi.OutputState }

func (GetRuleVmHttpRoutingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleVmHttpRouting)(nil)).Elem()
}

func (o GetRuleVmHttpRoutingArrayOutput) ToGetRuleVmHttpRoutingArrayOutput() GetRuleVmHttpRoutingArrayOutput {
	return o
}

func (o GetRuleVmHttpRoutingArrayOutput) ToGetRuleVmHttpRoutingArrayOutputWithContext(ctx context.Context) GetRuleVmHttpRoutingArrayOutput {
	return o
}

func (o GetRuleVmHttpRoutingArrayOutput) Index(i pulumi.IntInput) GetRuleVmHttpRoutingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRuleVmHttpRouting {
		return vs[0].([]GetRuleVmHttpRouting)[vs[1].(int)]
	}).(GetRuleVmHttpRoutingOutput)
}

type GetRuleVmTcp struct {
	// Additional tcp forwarding rules
	ForwardRules []GetRuleVmTcpForwardRule `pulumi:"forwardRules"`
	// Id of the Proxy
	ProxyId string `pulumi:"proxyId"`
	// RDP configuration
	Rdps []GetRuleVmTcpRdp `pulumi:"rdps"`
	// SSH configuration
	Sshes []GetRuleVmTcpSsh `pulumi:"sshes"`
}

// GetRuleVmTcpInput is an input type that accepts GetRuleVmTcpArgs and GetRuleVmTcpOutput values.
// You can construct a concrete instance of `GetRuleVmTcpInput` via:
//
//	GetRuleVmTcpArgs{...}
type GetRuleVmTcpInput interface {
	pulumi.Input

	ToGetRuleVmTcpOutput() GetRuleVmTcpOutput
	ToGetRuleVmTcpOutputWithContext(context.Context) GetRuleVmTcpOutput
}

type GetRuleVmTcpArgs struct {
	// Additional tcp forwarding rules
	ForwardRules GetRuleVmTcpForwardRuleArrayInput `pulumi:"forwardRules"`
	// Id of the Proxy
	ProxyId pulumi.StringInput `pulumi:"proxyId"`
	// RDP configuration
	Rdps GetRuleVmTcpRdpArrayInput `pulumi:"rdps"`
	// SSH configuration
	Sshes GetRuleVmTcpSshArrayInput `pulumi:"sshes"`
}

func (GetRuleVmTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleVmTcp)(nil)).Elem()
}

func (i GetRuleVmTcpArgs) ToGetRuleVmTcpOutput() GetRuleVmTcpOutput {
	return i.ToGetRuleVmTcpOutputWithContext(context.Background())
}

func (i GetRuleVmTcpArgs) ToGetRuleVmTcpOutputWithContext(ctx context.Context) GetRuleVmTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleVmTcpOutput)
}

// GetRuleVmTcpArrayInput is an input type that accepts GetRuleVmTcpArray and GetRuleVmTcpArrayOutput values.
// You can construct a concrete instance of `GetRuleVmTcpArrayInput` via:
//
//	GetRuleVmTcpArray{ GetRuleVmTcpArgs{...} }
type GetRuleVmTcpArrayInput interface {
	pulumi.Input

	ToGetRuleVmTcpArrayOutput() GetRuleVmTcpArrayOutput
	ToGetRuleVmTcpArrayOutputWithContext(context.Context) GetRuleVmTcpArrayOutput
}

type GetRuleVmTcpArray []GetRuleVmTcpInput

func (GetRuleVmTcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleVmTcp)(nil)).Elem()
}

func (i GetRuleVmTcpArray) ToGetRuleVmTcpArrayOutput() GetRuleVmTcpArrayOutput {
	return i.ToGetRuleVmTcpArrayOutputWithContext(context.Background())
}

func (i GetRuleVmTcpArray) ToGetRuleVmTcpArrayOutputWithContext(ctx context.Context) GetRuleVmTcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleVmTcpArrayOutput)
}

type GetRuleVmTcpOutput struct{ *pulumi.OutputState }

func (GetRuleVmTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleVmTcp)(nil)).Elem()
}

func (o GetRuleVmTcpOutput) ToGetRuleVmTcpOutput() GetRuleVmTcpOutput {
	return o
}

func (o GetRuleVmTcpOutput) ToGetRuleVmTcpOutputWithContext(ctx context.Context) GetRuleVmTcpOutput {
	return o
}

// Additional tcp forwarding rules
func (o GetRuleVmTcpOutput) ForwardRules() GetRuleVmTcpForwardRuleArrayOutput {
	return o.ApplyT(func(v GetRuleVmTcp) []GetRuleVmTcpForwardRule { return v.ForwardRules }).(GetRuleVmTcpForwardRuleArrayOutput)
}

// Id of the Proxy
func (o GetRuleVmTcpOutput) ProxyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleVmTcp) string { return v.ProxyId }).(pulumi.StringOutput)
}

// RDP configuration
func (o GetRuleVmTcpOutput) Rdps() GetRuleVmTcpRdpArrayOutput {
	return o.ApplyT(func(v GetRuleVmTcp) []GetRuleVmTcpRdp { return v.Rdps }).(GetRuleVmTcpRdpArrayOutput)
}

// SSH configuration
func (o GetRuleVmTcpOutput) Sshes() GetRuleVmTcpSshArrayOutput {
	return o.ApplyT(func(v GetRuleVmTcp) []GetRuleVmTcpSsh { return v.Sshes }).(GetRuleVmTcpSshArrayOutput)
}

type GetRuleVmTcpArrayOutput struct{ *pulumi.OutputState }

func (GetRuleVmTcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleVmTcp)(nil)).Elem()
}

func (o GetRuleVmTcpArrayOutput) ToGetRuleVmTcpArrayOutput() GetRuleVmTcpArrayOutput {
	return o
}

func (o GetRuleVmTcpArrayOutput) ToGetRuleVmTcpArrayOutputWithContext(ctx context.Context) GetRuleVmTcpArrayOutput {
	return o
}

func (o GetRuleVmTcpArrayOutput) Index(i pulumi.IntInput) GetRuleVmTcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRuleVmTcp {
		return vs[0].([]GetRuleVmTcp)[vs[1].(int)]
	}).(GetRuleVmTcpOutput)
}

type GetRuleVmTcpForwardRule struct {
	// Port to listen on the proxy
	ConnectOn *int `pulumi:"connectOn"`
	// Port to listen on the vm
	Port int `pulumi:"port"`
}

// GetRuleVmTcpForwardRuleInput is an input type that accepts GetRuleVmTcpForwardRuleArgs and GetRuleVmTcpForwardRuleOutput values.
// You can construct a concrete instance of `GetRuleVmTcpForwardRuleInput` via:
//
//	GetRuleVmTcpForwardRuleArgs{...}
type GetRuleVmTcpForwardRuleInput interface {
	pulumi.Input

	ToGetRuleVmTcpForwardRuleOutput() GetRuleVmTcpForwardRuleOutput
	ToGetRuleVmTcpForwardRuleOutputWithContext(context.Context) GetRuleVmTcpForwardRuleOutput
}

type GetRuleVmTcpForwardRuleArgs struct {
	// Port to listen on the proxy
	ConnectOn pulumi.IntPtrInput `pulumi:"connectOn"`
	// Port to listen on the vm
	Port pulumi.IntInput `pulumi:"port"`
}

func (GetRuleVmTcpForwardRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleVmTcpForwardRule)(nil)).Elem()
}

func (i GetRuleVmTcpForwardRuleArgs) ToGetRuleVmTcpForwardRuleOutput() GetRuleVmTcpForwardRuleOutput {
	return i.ToGetRuleVmTcpForwardRuleOutputWithContext(context.Background())
}

func (i GetRuleVmTcpForwardRuleArgs) ToGetRuleVmTcpForwardRuleOutputWithContext(ctx context.Context) GetRuleVmTcpForwardRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleVmTcpForwardRuleOutput)
}

// GetRuleVmTcpForwardRuleArrayInput is an input type that accepts GetRuleVmTcpForwardRuleArray and GetRuleVmTcpForwardRuleArrayOutput values.
// You can construct a concrete instance of `GetRuleVmTcpForwardRuleArrayInput` via:
//
//	GetRuleVmTcpForwardRuleArray{ GetRuleVmTcpForwardRuleArgs{...} }
type GetRuleVmTcpForwardRuleArrayInput interface {
	pulumi.Input

	ToGetRuleVmTcpForwardRuleArrayOutput() GetRuleVmTcpForwardRuleArrayOutput
	ToGetRuleVmTcpForwardRuleArrayOutputWithContext(context.Context) GetRuleVmTcpForwardRuleArrayOutput
}

type GetRuleVmTcpForwardRuleArray []GetRuleVmTcpForwardRuleInput

func (GetRuleVmTcpForwardRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleVmTcpForwardRule)(nil)).Elem()
}

func (i GetRuleVmTcpForwardRuleArray) ToGetRuleVmTcpForwardRuleArrayOutput() GetRuleVmTcpForwardRuleArrayOutput {
	return i.ToGetRuleVmTcpForwardRuleArrayOutputWithContext(context.Background())
}

func (i GetRuleVmTcpForwardRuleArray) ToGetRuleVmTcpForwardRuleArrayOutputWithContext(ctx context.Context) GetRuleVmTcpForwardRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleVmTcpForwardRuleArrayOutput)
}

type GetRuleVmTcpForwardRuleOutput struct{ *pulumi.OutputState }

func (GetRuleVmTcpForwardRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleVmTcpForwardRule)(nil)).Elem()
}

func (o GetRuleVmTcpForwardRuleOutput) ToGetRuleVmTcpForwardRuleOutput() GetRuleVmTcpForwardRuleOutput {
	return o
}

func (o GetRuleVmTcpForwardRuleOutput) ToGetRuleVmTcpForwardRuleOutputWithContext(ctx context.Context) GetRuleVmTcpForwardRuleOutput {
	return o
}

// Port to listen on the proxy
func (o GetRuleVmTcpForwardRuleOutput) ConnectOn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRuleVmTcpForwardRule) *int { return v.ConnectOn }).(pulumi.IntPtrOutput)
}

// Port to listen on the vm
func (o GetRuleVmTcpForwardRuleOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetRuleVmTcpForwardRule) int { return v.Port }).(pulumi.IntOutput)
}

type GetRuleVmTcpForwardRuleArrayOutput struct{ *pulumi.OutputState }

func (GetRuleVmTcpForwardRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleVmTcpForwardRule)(nil)).Elem()
}

func (o GetRuleVmTcpForwardRuleArrayOutput) ToGetRuleVmTcpForwardRuleArrayOutput() GetRuleVmTcpForwardRuleArrayOutput {
	return o
}

func (o GetRuleVmTcpForwardRuleArrayOutput) ToGetRuleVmTcpForwardRuleArrayOutputWithContext(ctx context.Context) GetRuleVmTcpForwardRuleArrayOutput {
	return o
}

func (o GetRuleVmTcpForwardRuleArrayOutput) Index(i pulumi.IntInput) GetRuleVmTcpForwardRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRuleVmTcpForwardRule {
		return vs[0].([]GetRuleVmTcpForwardRule)[vs[1].(int)]
	}).(GetRuleVmTcpForwardRuleOutput)
}

type GetRuleVmTcpRdp struct {
	// Port to listen on the proxy
	ConnectOn *int `pulumi:"connectOn"`
	// Port to listen on the vm
	Port *int `pulumi:"port"`
}

// GetRuleVmTcpRdpInput is an input type that accepts GetRuleVmTcpRdpArgs and GetRuleVmTcpRdpOutput values.
// You can construct a concrete instance of `GetRuleVmTcpRdpInput` via:
//
//	GetRuleVmTcpRdpArgs{...}
type GetRuleVmTcpRdpInput interface {
	pulumi.Input

	ToGetRuleVmTcpRdpOutput() GetRuleVmTcpRdpOutput
	ToGetRuleVmTcpRdpOutputWithContext(context.Context) GetRuleVmTcpRdpOutput
}

type GetRuleVmTcpRdpArgs struct {
	// Port to listen on the proxy
	ConnectOn pulumi.IntPtrInput `pulumi:"connectOn"`
	// Port to listen on the vm
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (GetRuleVmTcpRdpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleVmTcpRdp)(nil)).Elem()
}

func (i GetRuleVmTcpRdpArgs) ToGetRuleVmTcpRdpOutput() GetRuleVmTcpRdpOutput {
	return i.ToGetRuleVmTcpRdpOutputWithContext(context.Background())
}

func (i GetRuleVmTcpRdpArgs) ToGetRuleVmTcpRdpOutputWithContext(ctx context.Context) GetRuleVmTcpRdpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleVmTcpRdpOutput)
}

// GetRuleVmTcpRdpArrayInput is an input type that accepts GetRuleVmTcpRdpArray and GetRuleVmTcpRdpArrayOutput values.
// You can construct a concrete instance of `GetRuleVmTcpRdpArrayInput` via:
//
//	GetRuleVmTcpRdpArray{ GetRuleVmTcpRdpArgs{...} }
type GetRuleVmTcpRdpArrayInput interface {
	pulumi.Input

	ToGetRuleVmTcpRdpArrayOutput() GetRuleVmTcpRdpArrayOutput
	ToGetRuleVmTcpRdpArrayOutputWithContext(context.Context) GetRuleVmTcpRdpArrayOutput
}

type GetRuleVmTcpRdpArray []GetRuleVmTcpRdpInput

func (GetRuleVmTcpRdpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleVmTcpRdp)(nil)).Elem()
}

func (i GetRuleVmTcpRdpArray) ToGetRuleVmTcpRdpArrayOutput() GetRuleVmTcpRdpArrayOutput {
	return i.ToGetRuleVmTcpRdpArrayOutputWithContext(context.Background())
}

func (i GetRuleVmTcpRdpArray) ToGetRuleVmTcpRdpArrayOutputWithContext(ctx context.Context) GetRuleVmTcpRdpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleVmTcpRdpArrayOutput)
}

type GetRuleVmTcpRdpOutput struct{ *pulumi.OutputState }

func (GetRuleVmTcpRdpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleVmTcpRdp)(nil)).Elem()
}

func (o GetRuleVmTcpRdpOutput) ToGetRuleVmTcpRdpOutput() GetRuleVmTcpRdpOutput {
	return o
}

func (o GetRuleVmTcpRdpOutput) ToGetRuleVmTcpRdpOutputWithContext(ctx context.Context) GetRuleVmTcpRdpOutput {
	return o
}

// Port to listen on the proxy
func (o GetRuleVmTcpRdpOutput) ConnectOn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRuleVmTcpRdp) *int { return v.ConnectOn }).(pulumi.IntPtrOutput)
}

// Port to listen on the vm
func (o GetRuleVmTcpRdpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRuleVmTcpRdp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type GetRuleVmTcpRdpArrayOutput struct{ *pulumi.OutputState }

func (GetRuleVmTcpRdpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleVmTcpRdp)(nil)).Elem()
}

func (o GetRuleVmTcpRdpArrayOutput) ToGetRuleVmTcpRdpArrayOutput() GetRuleVmTcpRdpArrayOutput {
	return o
}

func (o GetRuleVmTcpRdpArrayOutput) ToGetRuleVmTcpRdpArrayOutputWithContext(ctx context.Context) GetRuleVmTcpRdpArrayOutput {
	return o
}

func (o GetRuleVmTcpRdpArrayOutput) Index(i pulumi.IntInput) GetRuleVmTcpRdpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRuleVmTcpRdp {
		return vs[0].([]GetRuleVmTcpRdp)[vs[1].(int)]
	}).(GetRuleVmTcpRdpOutput)
}

type GetRuleVmTcpSsh struct {
	// Port to listen on the proxy
	ConnectOn *int `pulumi:"connectOn"`
	// Port to listen on the vm
	Port *int `pulumi:"port"`
}

// GetRuleVmTcpSshInput is an input type that accepts GetRuleVmTcpSshArgs and GetRuleVmTcpSshOutput values.
// You can construct a concrete instance of `GetRuleVmTcpSshInput` via:
//
//	GetRuleVmTcpSshArgs{...}
type GetRuleVmTcpSshInput interface {
	pulumi.Input

	ToGetRuleVmTcpSshOutput() GetRuleVmTcpSshOutput
	ToGetRuleVmTcpSshOutputWithContext(context.Context) GetRuleVmTcpSshOutput
}

type GetRuleVmTcpSshArgs struct {
	// Port to listen on the proxy
	ConnectOn pulumi.IntPtrInput `pulumi:"connectOn"`
	// Port to listen on the vm
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (GetRuleVmTcpSshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleVmTcpSsh)(nil)).Elem()
}

func (i GetRuleVmTcpSshArgs) ToGetRuleVmTcpSshOutput() GetRuleVmTcpSshOutput {
	return i.ToGetRuleVmTcpSshOutputWithContext(context.Background())
}

func (i GetRuleVmTcpSshArgs) ToGetRuleVmTcpSshOutputWithContext(ctx context.Context) GetRuleVmTcpSshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleVmTcpSshOutput)
}

// GetRuleVmTcpSshArrayInput is an input type that accepts GetRuleVmTcpSshArray and GetRuleVmTcpSshArrayOutput values.
// You can construct a concrete instance of `GetRuleVmTcpSshArrayInput` via:
//
//	GetRuleVmTcpSshArray{ GetRuleVmTcpSshArgs{...} }
type GetRuleVmTcpSshArrayInput interface {
	pulumi.Input

	ToGetRuleVmTcpSshArrayOutput() GetRuleVmTcpSshArrayOutput
	ToGetRuleVmTcpSshArrayOutputWithContext(context.Context) GetRuleVmTcpSshArrayOutput
}

type GetRuleVmTcpSshArray []GetRuleVmTcpSshInput

func (GetRuleVmTcpSshArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleVmTcpSsh)(nil)).Elem()
}

func (i GetRuleVmTcpSshArray) ToGetRuleVmTcpSshArrayOutput() GetRuleVmTcpSshArrayOutput {
	return i.ToGetRuleVmTcpSshArrayOutputWithContext(context.Background())
}

func (i GetRuleVmTcpSshArray) ToGetRuleVmTcpSshArrayOutputWithContext(ctx context.Context) GetRuleVmTcpSshArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleVmTcpSshArrayOutput)
}

type GetRuleVmTcpSshOutput struct{ *pulumi.OutputState }

func (GetRuleVmTcpSshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleVmTcpSsh)(nil)).Elem()
}

func (o GetRuleVmTcpSshOutput) ToGetRuleVmTcpSshOutput() GetRuleVmTcpSshOutput {
	return o
}

func (o GetRuleVmTcpSshOutput) ToGetRuleVmTcpSshOutputWithContext(ctx context.Context) GetRuleVmTcpSshOutput {
	return o
}

// Port to listen on the proxy
func (o GetRuleVmTcpSshOutput) ConnectOn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRuleVmTcpSsh) *int { return v.ConnectOn }).(pulumi.IntPtrOutput)
}

// Port to listen on the vm
func (o GetRuleVmTcpSshOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRuleVmTcpSsh) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type GetRuleVmTcpSshArrayOutput struct{ *pulumi.OutputState }

func (GetRuleVmTcpSshArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleVmTcpSsh)(nil)).Elem()
}

func (o GetRuleVmTcpSshArrayOutput) ToGetRuleVmTcpSshArrayOutput() GetRuleVmTcpSshArrayOutput {
	return o
}

func (o GetRuleVmTcpSshArrayOutput) ToGetRuleVmTcpSshArrayOutputWithContext(ctx context.Context) GetRuleVmTcpSshArrayOutput {
	return o
}

func (o GetRuleVmTcpSshArrayOutput) Index(i pulumi.IntInput) GetRuleVmTcpSshOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRuleVmTcpSsh {
		return vs[0].([]GetRuleVmTcpSsh)[vs[1].(int)]
	}).(GetRuleVmTcpSshOutput)
}

type GetScheduleRepeat struct {
	// List of days on which schedule need to be active. Valid values are SUN, MON, TUE, WED, THU, FRI and SAT.
	Days []string `pulumi:"days"`
	// Ending time of schedule action on the day. Accepted format is HH:MM. Eg : 20:00 for 8pm
	EndTime string `pulumi:"endTime"`
	// Starting time of schedule action on the day. Accepted format is HH:MM. Eg : 13:15 for 01:15pm
	StartTime string `pulumi:"startTime"`
}

// GetScheduleRepeatInput is an input type that accepts GetScheduleRepeatArgs and GetScheduleRepeatOutput values.
// You can construct a concrete instance of `GetScheduleRepeatInput` via:
//
//	GetScheduleRepeatArgs{...}
type GetScheduleRepeatInput interface {
	pulumi.Input

	ToGetScheduleRepeatOutput() GetScheduleRepeatOutput
	ToGetScheduleRepeatOutputWithContext(context.Context) GetScheduleRepeatOutput
}

type GetScheduleRepeatArgs struct {
	// List of days on which schedule need to be active. Valid values are SUN, MON, TUE, WED, THU, FRI and SAT.
	Days pulumi.StringArrayInput `pulumi:"days"`
	// Ending time of schedule action on the day. Accepted format is HH:MM. Eg : 20:00 for 8pm
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// Starting time of schedule action on the day. Accepted format is HH:MM. Eg : 13:15 for 01:15pm
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (GetScheduleRepeatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScheduleRepeat)(nil)).Elem()
}

func (i GetScheduleRepeatArgs) ToGetScheduleRepeatOutput() GetScheduleRepeatOutput {
	return i.ToGetScheduleRepeatOutputWithContext(context.Background())
}

func (i GetScheduleRepeatArgs) ToGetScheduleRepeatOutputWithContext(ctx context.Context) GetScheduleRepeatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScheduleRepeatOutput)
}

// GetScheduleRepeatArrayInput is an input type that accepts GetScheduleRepeatArray and GetScheduleRepeatArrayOutput values.
// You can construct a concrete instance of `GetScheduleRepeatArrayInput` via:
//
//	GetScheduleRepeatArray{ GetScheduleRepeatArgs{...} }
type GetScheduleRepeatArrayInput interface {
	pulumi.Input

	ToGetScheduleRepeatArrayOutput() GetScheduleRepeatArrayOutput
	ToGetScheduleRepeatArrayOutputWithContext(context.Context) GetScheduleRepeatArrayOutput
}

type GetScheduleRepeatArray []GetScheduleRepeatInput

func (GetScheduleRepeatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScheduleRepeat)(nil)).Elem()
}

func (i GetScheduleRepeatArray) ToGetScheduleRepeatArrayOutput() GetScheduleRepeatArrayOutput {
	return i.ToGetScheduleRepeatArrayOutputWithContext(context.Background())
}

func (i GetScheduleRepeatArray) ToGetScheduleRepeatArrayOutputWithContext(ctx context.Context) GetScheduleRepeatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScheduleRepeatArrayOutput)
}

type GetScheduleRepeatOutput struct{ *pulumi.OutputState }

func (GetScheduleRepeatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScheduleRepeat)(nil)).Elem()
}

func (o GetScheduleRepeatOutput) ToGetScheduleRepeatOutput() GetScheduleRepeatOutput {
	return o
}

func (o GetScheduleRepeatOutput) ToGetScheduleRepeatOutputWithContext(ctx context.Context) GetScheduleRepeatOutput {
	return o
}

// List of days on which schedule need to be active. Valid values are SUN, MON, TUE, WED, THU, FRI and SAT.
func (o GetScheduleRepeatOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetScheduleRepeat) []string { return v.Days }).(pulumi.StringArrayOutput)
}

// Ending time of schedule action on the day. Accepted format is HH:MM. Eg : 20:00 for 8pm
func (o GetScheduleRepeatOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetScheduleRepeat) string { return v.EndTime }).(pulumi.StringOutput)
}

// Starting time of schedule action on the day. Accepted format is HH:MM. Eg : 13:15 for 01:15pm
func (o GetScheduleRepeatOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetScheduleRepeat) string { return v.StartTime }).(pulumi.StringOutput)
}

type GetScheduleRepeatArrayOutput struct{ *pulumi.OutputState }

func (GetScheduleRepeatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScheduleRepeat)(nil)).Elem()
}

func (o GetScheduleRepeatArrayOutput) ToGetScheduleRepeatArrayOutput() GetScheduleRepeatArrayOutput {
	return o
}

func (o GetScheduleRepeatArrayOutput) ToGetScheduleRepeatArrayOutputWithContext(ctx context.Context) GetScheduleRepeatArrayOutput {
	return o
}

func (o GetScheduleRepeatArrayOutput) Index(i pulumi.IntInput) GetScheduleRepeatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetScheduleRepeat {
		return vs[0].([]GetScheduleRepeat)[vs[1].(int)]
	}).(GetScheduleRepeatOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsProxyCertificatesInput)(nil)).Elem(), AwsProxyCertificatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsProxyCertificatesPtrInput)(nil)).Elem(), AwsProxyCertificatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureProxyCertificatesInput)(nil)).Elem(), AzureProxyCertificatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureProxyCertificatesPtrInput)(nil)).Elem(), AzureProxyCertificatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpProxyCertificatesInput)(nil)).Elem(), GcpProxyCertificatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpProxyCertificatesPtrInput)(nil)).Elem(), GcpProxyCertificatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleEcsContainerInput)(nil)).Elem(), RuleEcsContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleEcsContainerPtrInput)(nil)).Elem(), RuleEcsContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleEcsDependInput)(nil)).Elem(), RuleEcsDependArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleEcsDependArrayInput)(nil)).Elem(), RuleEcsDependArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleEcsHttpInput)(nil)).Elem(), RuleEcsHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleEcsHttpArrayInput)(nil)).Elem(), RuleEcsHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRdsDatabaseInput)(nil)).Elem(), RuleRdsDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRdsDatabasePtrInput)(nil)).Elem(), RuleRdsDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRdsDependInput)(nil)).Elem(), RuleRdsDependArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRdsDependArrayInput)(nil)).Elem(), RuleRdsDependArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRdsTcpInput)(nil)).Elem(), RuleRdsTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRdsTcpArrayInput)(nil)).Elem(), RuleRdsTcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRdsTcpForwardRuleInput)(nil)).Elem(), RuleRdsTcpForwardRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRdsTcpForwardRuleArrayInput)(nil)).Elem(), RuleRdsTcpForwardRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleVmDependInput)(nil)).Elem(), RuleVmDependArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleVmDependArrayInput)(nil)).Elem(), RuleVmDependArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleVmFilterInput)(nil)).Elem(), RuleVmFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleVmFilterPtrInput)(nil)).Elem(), RuleVmFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleVmFilterTagInput)(nil)).Elem(), RuleVmFilterTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleVmFilterTagArrayInput)(nil)).Elem(), RuleVmFilterTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleVmHttpInput)(nil)).Elem(), RuleVmHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleVmHttpArrayInput)(nil)).Elem(), RuleVmHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleVmHttpHealthInput)(nil)).Elem(), RuleVmHttpHealthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleVmHttpHealthArrayInput)(nil)).Elem(), RuleVmHttpHealthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleVmHttpRoutingInput)(nil)).Elem(), RuleVmHttpRoutingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleVmHttpRoutingArrayInput)(nil)).Elem(), RuleVmHttpRoutingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleVmTcpInput)(nil)).Elem(), RuleVmTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleVmTcpArrayInput)(nil)).Elem(), RuleVmTcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleVmTcpForwardRuleInput)(nil)).Elem(), RuleVmTcpForwardRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleVmTcpForwardRuleArrayInput)(nil)).Elem(), RuleVmTcpForwardRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleVmTcpRdpInput)(nil)).Elem(), RuleVmTcpRdpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleVmTcpRdpArrayInput)(nil)).Elem(), RuleVmTcpRdpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleVmTcpSshInput)(nil)).Elem(), RuleVmTcpSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleVmTcpSshArrayInput)(nil)).Elem(), RuleVmTcpSshArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRepeatInput)(nil)).Elem(), ScheduleRepeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRepeatArrayInput)(nil)).Elem(), ScheduleRepeatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAwsProxyCertificatesInput)(nil)).Elem(), GetAwsProxyCertificatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAwsProxyCertificatesPtrInput)(nil)).Elem(), GetAwsProxyCertificatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAzureProxyCertificatesInput)(nil)).Elem(), GetAzureProxyCertificatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAzureProxyCertificatesPtrInput)(nil)).Elem(), GetAzureProxyCertificatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGcpProxyCertificatesInput)(nil)).Elem(), GetGcpProxyCertificatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGcpProxyCertificatesPtrInput)(nil)).Elem(), GetGcpProxyCertificatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleEcsContainerInput)(nil)).Elem(), GetRuleEcsContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleEcsContainerPtrInput)(nil)).Elem(), GetRuleEcsContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleEcsDependInput)(nil)).Elem(), GetRuleEcsDependArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleEcsDependArrayInput)(nil)).Elem(), GetRuleEcsDependArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleEcsHttpInput)(nil)).Elem(), GetRuleEcsHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleEcsHttpArrayInput)(nil)).Elem(), GetRuleEcsHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleRdsDatabaseInput)(nil)).Elem(), GetRuleRdsDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleRdsDependInput)(nil)).Elem(), GetRuleRdsDependArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleRdsDependArrayInput)(nil)).Elem(), GetRuleRdsDependArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleRdsTcpInput)(nil)).Elem(), GetRuleRdsTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleRdsTcpArrayInput)(nil)).Elem(), GetRuleRdsTcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleRdsTcpForwardRuleInput)(nil)).Elem(), GetRuleRdsTcpForwardRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleRdsTcpForwardRuleArrayInput)(nil)).Elem(), GetRuleRdsTcpForwardRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleVmDependInput)(nil)).Elem(), GetRuleVmDependArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleVmDependArrayInput)(nil)).Elem(), GetRuleVmDependArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleVmFilterInput)(nil)).Elem(), GetRuleVmFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleVmFilterTagInput)(nil)).Elem(), GetRuleVmFilterTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleVmFilterTagArrayInput)(nil)).Elem(), GetRuleVmFilterTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleVmHttpInput)(nil)).Elem(), GetRuleVmHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleVmHttpArrayInput)(nil)).Elem(), GetRuleVmHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleVmHttpHealthInput)(nil)).Elem(), GetRuleVmHttpHealthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleVmHttpHealthArrayInput)(nil)).Elem(), GetRuleVmHttpHealthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleVmHttpRoutingInput)(nil)).Elem(), GetRuleVmHttpRoutingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleVmHttpRoutingArrayInput)(nil)).Elem(), GetRuleVmHttpRoutingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleVmTcpInput)(nil)).Elem(), GetRuleVmTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleVmTcpArrayInput)(nil)).Elem(), GetRuleVmTcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleVmTcpForwardRuleInput)(nil)).Elem(), GetRuleVmTcpForwardRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleVmTcpForwardRuleArrayInput)(nil)).Elem(), GetRuleVmTcpForwardRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleVmTcpRdpInput)(nil)).Elem(), GetRuleVmTcpRdpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleVmTcpRdpArrayInput)(nil)).Elem(), GetRuleVmTcpRdpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleVmTcpSshInput)(nil)).Elem(), GetRuleVmTcpSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleVmTcpSshArrayInput)(nil)).Elem(), GetRuleVmTcpSshArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetScheduleRepeatInput)(nil)).Elem(), GetScheduleRepeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetScheduleRepeatArrayInput)(nil)).Elem(), GetScheduleRepeatArray{})
	pulumi.RegisterOutputType(AwsProxyCertificatesOutput{})
	pulumi.RegisterOutputType(AwsProxyCertificatesPtrOutput{})
	pulumi.RegisterOutputType(AzureProxyCertificatesOutput{})
	pulumi.RegisterOutputType(AzureProxyCertificatesPtrOutput{})
	pulumi.RegisterOutputType(GcpProxyCertificatesOutput{})
	pulumi.RegisterOutputType(GcpProxyCertificatesPtrOutput{})
	pulumi.RegisterOutputType(RuleEcsContainerOutput{})
	pulumi.RegisterOutputType(RuleEcsContainerPtrOutput{})
	pulumi.RegisterOutputType(RuleEcsDependOutput{})
	pulumi.RegisterOutputType(RuleEcsDependArrayOutput{})
	pulumi.RegisterOutputType(RuleEcsHttpOutput{})
	pulumi.RegisterOutputType(RuleEcsHttpArrayOutput{})
	pulumi.RegisterOutputType(RuleRdsDatabaseOutput{})
	pulumi.RegisterOutputType(RuleRdsDatabasePtrOutput{})
	pulumi.RegisterOutputType(RuleRdsDependOutput{})
	pulumi.RegisterOutputType(RuleRdsDependArrayOutput{})
	pulumi.RegisterOutputType(RuleRdsTcpOutput{})
	pulumi.RegisterOutputType(RuleRdsTcpArrayOutput{})
	pulumi.RegisterOutputType(RuleRdsTcpForwardRuleOutput{})
	pulumi.RegisterOutputType(RuleRdsTcpForwardRuleArrayOutput{})
	pulumi.RegisterOutputType(RuleVmDependOutput{})
	pulumi.RegisterOutputType(RuleVmDependArrayOutput{})
	pulumi.RegisterOutputType(RuleVmFilterOutput{})
	pulumi.RegisterOutputType(RuleVmFilterPtrOutput{})
	pulumi.RegisterOutputType(RuleVmFilterTagOutput{})
	pulumi.RegisterOutputType(RuleVmFilterTagArrayOutput{})
	pulumi.RegisterOutputType(RuleVmHttpOutput{})
	pulumi.RegisterOutputType(RuleVmHttpArrayOutput{})
	pulumi.RegisterOutputType(RuleVmHttpHealthOutput{})
	pulumi.RegisterOutputType(RuleVmHttpHealthArrayOutput{})
	pulumi.RegisterOutputType(RuleVmHttpRoutingOutput{})
	pulumi.RegisterOutputType(RuleVmHttpRoutingArrayOutput{})
	pulumi.RegisterOutputType(RuleVmTcpOutput{})
	pulumi.RegisterOutputType(RuleVmTcpArrayOutput{})
	pulumi.RegisterOutputType(RuleVmTcpForwardRuleOutput{})
	pulumi.RegisterOutputType(RuleVmTcpForwardRuleArrayOutput{})
	pulumi.RegisterOutputType(RuleVmTcpRdpOutput{})
	pulumi.RegisterOutputType(RuleVmTcpRdpArrayOutput{})
	pulumi.RegisterOutputType(RuleVmTcpSshOutput{})
	pulumi.RegisterOutputType(RuleVmTcpSshArrayOutput{})
	pulumi.RegisterOutputType(ScheduleRepeatOutput{})
	pulumi.RegisterOutputType(ScheduleRepeatArrayOutput{})
	pulumi.RegisterOutputType(GetAwsProxyCertificatesOutput{})
	pulumi.RegisterOutputType(GetAwsProxyCertificatesPtrOutput{})
	pulumi.RegisterOutputType(GetAzureProxyCertificatesOutput{})
	pulumi.RegisterOutputType(GetAzureProxyCertificatesPtrOutput{})
	pulumi.RegisterOutputType(GetGcpProxyCertificatesOutput{})
	pulumi.RegisterOutputType(GetGcpProxyCertificatesPtrOutput{})
	pulumi.RegisterOutputType(GetRuleEcsContainerOutput{})
	pulumi.RegisterOutputType(GetRuleEcsContainerPtrOutput{})
	pulumi.RegisterOutputType(GetRuleEcsDependOutput{})
	pulumi.RegisterOutputType(GetRuleEcsDependArrayOutput{})
	pulumi.RegisterOutputType(GetRuleEcsHttpOutput{})
	pulumi.RegisterOutputType(GetRuleEcsHttpArrayOutput{})
	pulumi.RegisterOutputType(GetRuleRdsDatabaseOutput{})
	pulumi.RegisterOutputType(GetRuleRdsDependOutput{})
	pulumi.RegisterOutputType(GetRuleRdsDependArrayOutput{})
	pulumi.RegisterOutputType(GetRuleRdsTcpOutput{})
	pulumi.RegisterOutputType(GetRuleRdsTcpArrayOutput{})
	pulumi.RegisterOutputType(GetRuleRdsTcpForwardRuleOutput{})
	pulumi.RegisterOutputType(GetRuleRdsTcpForwardRuleArrayOutput{})
	pulumi.RegisterOutputType(GetRuleVmDependOutput{})
	pulumi.RegisterOutputType(GetRuleVmDependArrayOutput{})
	pulumi.RegisterOutputType(GetRuleVmFilterOutput{})
	pulumi.RegisterOutputType(GetRuleVmFilterTagOutput{})
	pulumi.RegisterOutputType(GetRuleVmFilterTagArrayOutput{})
	pulumi.RegisterOutputType(GetRuleVmHttpOutput{})
	pulumi.RegisterOutputType(GetRuleVmHttpArrayOutput{})
	pulumi.RegisterOutputType(GetRuleVmHttpHealthOutput{})
	pulumi.RegisterOutputType(GetRuleVmHttpHealthArrayOutput{})
	pulumi.RegisterOutputType(GetRuleVmHttpRoutingOutput{})
	pulumi.RegisterOutputType(GetRuleVmHttpRoutingArrayOutput{})
	pulumi.RegisterOutputType(GetRuleVmTcpOutput{})
	pulumi.RegisterOutputType(GetRuleVmTcpArrayOutput{})
	pulumi.RegisterOutputType(GetRuleVmTcpForwardRuleOutput{})
	pulumi.RegisterOutputType(GetRuleVmTcpForwardRuleArrayOutput{})
	pulumi.RegisterOutputType(GetRuleVmTcpRdpOutput{})
	pulumi.RegisterOutputType(GetRuleVmTcpRdpArrayOutput{})
	pulumi.RegisterOutputType(GetRuleVmTcpSshOutput{})
	pulumi.RegisterOutputType(GetRuleVmTcpSshArrayOutput{})
	pulumi.RegisterOutputType(GetScheduleRepeatOutput{})
	pulumi.RegisterOutputType(GetScheduleRepeatArrayOutput{})
}
