// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autostopping

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating an Azure Application Gateway
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/autostopping"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := autostopping.NewAzureGateway(ctx, "test", &autostopping.AzureGatewayArgs{
//				Name:                          pulumi.String("name"),
//				CloudConnectorId:              pulumi.String("cloud_connector_id"),
//				HostName:                      pulumi.String("host_name"),
//				Region:                        pulumi.String("eastus2"),
//				ResourceGroup:                 pulumi.String("resource_group"),
//				SubnetId:                      pulumi.String("/subscriptions/subscription_id/resourceGroups/resource_group/providers/Microsoft.Network/virtualNetworks/virtual_network/subnets/subnet_id"),
//				Vpc:                           pulumi.String("/subscriptions/subscription_id/resourceGroups/resource_group/providers/Microsoft.Network/virtualNetworks/virtual_network"),
//				AzureFuncRegion:               pulumi.String("westus2"),
//				FrontendIp:                    pulumi.String("/subscriptions/subscription_id/resourceGroups/resource_group/providers/Microsoft.Network/publicIPAddresses/publicip"),
//				SkuSize:                       pulumi.String("sku2"),
//				DeleteCloudResourcesOnDestroy: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = autostopping.NewAzureGateway(ctx, "import_test", &autostopping.AzureGatewayArgs{
//				Name:                          pulumi.String("import_test"),
//				CloudConnectorId:              pulumi.String("cloud_connector_id"),
//				HostName:                      pulumi.String("host_name"),
//				Region:                        pulumi.String("westus2"),
//				ResourceGroup:                 pulumi.String("test_resource_group"),
//				AppGatewayId:                  pulumi.String("/subscriptions/subscription_id/resourceGroups/test_resource_group/providers/Microsoft.Network/applicationGateways/TestAppGateway"),
//				CertificateId:                 pulumi.String("/subscriptions/subscription_id/resourceGroups/test_resource_group/providers/Microsoft.Network/applicationGateways/TestAppGateway/sslCertificates/certificate_name"),
//				AzureFuncRegion:               pulumi.String("westus2"),
//				Vpc:                           pulumi.String("/subscriptions/subscription_id/resourceGroups/test_resource_group/providers/Microsoft.Network/virtualNetworks/test_resource_group_vnet"),
//				DeleteCloudResourcesOnDestroy: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AzureGateway struct {
	pulumi.CustomResourceState

	// ID of Azure AppGateway for importing. Required only for importing exiging AppGateway
	AppGatewayId pulumi.StringPtrOutput `pulumi:"appGatewayId"`
	// Region in which azure cloud function will be provisioned
	AzureFuncRegion pulumi.StringOutput `pulumi:"azureFuncRegion"`
	// ID of existing SSL certificate from AppGateway being imported. Required only for importing existing AppGateway. Required only for SSL based rules
	CertificateId pulumi.StringPtrOutput `pulumi:"certificateId"`
	// Id of the cloud connector
	CloudConnectorId              pulumi.StringOutput `pulumi:"cloudConnectorId"`
	DeleteCloudResourcesOnDestroy pulumi.BoolOutput   `pulumi:"deleteCloudResourcesOnDestroy"`
	// ID of IP address to be used. Required only for creating new AppGateway. See https://learn.microsoft.com/en-us/azure/application-gateway/application-gateway-components#static-versus-dynamic-public-ip-address for more details
	FrontendIp pulumi.StringPtrOutput `pulumi:"frontendIp"`
	// Hostname for the proxy
	HostName pulumi.StringOutput `pulumi:"hostName"`
	// Unique identifier of the resource
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the proxy
	Name pulumi.StringOutput `pulumi:"name"`
	// Region in which cloud resources are hosted
	Region pulumi.StringOutput `pulumi:"region"`
	// Resource group in which cloud resources are hosted
	ResourceGroup pulumi.StringOutput `pulumi:"resourceGroup"`
	// Size of machine used for the gateway. Required only for creating new AppGateway
	SkuSize pulumi.StringPtrOutput `pulumi:"skuSize"`
	// Subnet in which cloud resources are hosted. Required only for creating new AppGateway
	SubnetId pulumi.StringPtrOutput `pulumi:"subnetId"`
	// VNet in which cloud resources are hosted. Required only for creating new AppGateway
	Vpc pulumi.StringOutput `pulumi:"vpc"`
}

// NewAzureGateway registers a new resource with the given unique name, arguments, and options.
func NewAzureGateway(ctx *pulumi.Context,
	name string, args *AzureGatewayArgs, opts ...pulumi.ResourceOption) (*AzureGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AzureFuncRegion == nil {
		return nil, errors.New("invalid value for required argument 'AzureFuncRegion'")
	}
	if args.CloudConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'CloudConnectorId'")
	}
	if args.DeleteCloudResourcesOnDestroy == nil {
		return nil, errors.New("invalid value for required argument 'DeleteCloudResourcesOnDestroy'")
	}
	if args.HostName == nil {
		return nil, errors.New("invalid value for required argument 'HostName'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.ResourceGroup == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroup'")
	}
	if args.Vpc == nil {
		return nil, errors.New("invalid value for required argument 'Vpc'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzureGateway
	err := ctx.RegisterResource("harness:autostopping/azureGateway:AzureGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureGateway gets an existing AzureGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureGatewayState, opts ...pulumi.ResourceOption) (*AzureGateway, error) {
	var resource AzureGateway
	err := ctx.ReadResource("harness:autostopping/azureGateway:AzureGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureGateway resources.
type azureGatewayState struct {
	// ID of Azure AppGateway for importing. Required only for importing exiging AppGateway
	AppGatewayId *string `pulumi:"appGatewayId"`
	// Region in which azure cloud function will be provisioned
	AzureFuncRegion *string `pulumi:"azureFuncRegion"`
	// ID of existing SSL certificate from AppGateway being imported. Required only for importing existing AppGateway. Required only for SSL based rules
	CertificateId *string `pulumi:"certificateId"`
	// Id of the cloud connector
	CloudConnectorId              *string `pulumi:"cloudConnectorId"`
	DeleteCloudResourcesOnDestroy *bool   `pulumi:"deleteCloudResourcesOnDestroy"`
	// ID of IP address to be used. Required only for creating new AppGateway. See https://learn.microsoft.com/en-us/azure/application-gateway/application-gateway-components#static-versus-dynamic-public-ip-address for more details
	FrontendIp *string `pulumi:"frontendIp"`
	// Hostname for the proxy
	HostName *string `pulumi:"hostName"`
	// Unique identifier of the resource
	Identifier *string `pulumi:"identifier"`
	// Name of the proxy
	Name *string `pulumi:"name"`
	// Region in which cloud resources are hosted
	Region *string `pulumi:"region"`
	// Resource group in which cloud resources are hosted
	ResourceGroup *string `pulumi:"resourceGroup"`
	// Size of machine used for the gateway. Required only for creating new AppGateway
	SkuSize *string `pulumi:"skuSize"`
	// Subnet in which cloud resources are hosted. Required only for creating new AppGateway
	SubnetId *string `pulumi:"subnetId"`
	// VNet in which cloud resources are hosted. Required only for creating new AppGateway
	Vpc *string `pulumi:"vpc"`
}

type AzureGatewayState struct {
	// ID of Azure AppGateway for importing. Required only for importing exiging AppGateway
	AppGatewayId pulumi.StringPtrInput
	// Region in which azure cloud function will be provisioned
	AzureFuncRegion pulumi.StringPtrInput
	// ID of existing SSL certificate from AppGateway being imported. Required only for importing existing AppGateway. Required only for SSL based rules
	CertificateId pulumi.StringPtrInput
	// Id of the cloud connector
	CloudConnectorId              pulumi.StringPtrInput
	DeleteCloudResourcesOnDestroy pulumi.BoolPtrInput
	// ID of IP address to be used. Required only for creating new AppGateway. See https://learn.microsoft.com/en-us/azure/application-gateway/application-gateway-components#static-versus-dynamic-public-ip-address for more details
	FrontendIp pulumi.StringPtrInput
	// Hostname for the proxy
	HostName pulumi.StringPtrInput
	// Unique identifier of the resource
	Identifier pulumi.StringPtrInput
	// Name of the proxy
	Name pulumi.StringPtrInput
	// Region in which cloud resources are hosted
	Region pulumi.StringPtrInput
	// Resource group in which cloud resources are hosted
	ResourceGroup pulumi.StringPtrInput
	// Size of machine used for the gateway. Required only for creating new AppGateway
	SkuSize pulumi.StringPtrInput
	// Subnet in which cloud resources are hosted. Required only for creating new AppGateway
	SubnetId pulumi.StringPtrInput
	// VNet in which cloud resources are hosted. Required only for creating new AppGateway
	Vpc pulumi.StringPtrInput
}

func (AzureGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureGatewayState)(nil)).Elem()
}

type azureGatewayArgs struct {
	// ID of Azure AppGateway for importing. Required only for importing exiging AppGateway
	AppGatewayId *string `pulumi:"appGatewayId"`
	// Region in which azure cloud function will be provisioned
	AzureFuncRegion string `pulumi:"azureFuncRegion"`
	// ID of existing SSL certificate from AppGateway being imported. Required only for importing existing AppGateway. Required only for SSL based rules
	CertificateId *string `pulumi:"certificateId"`
	// Id of the cloud connector
	CloudConnectorId              string `pulumi:"cloudConnectorId"`
	DeleteCloudResourcesOnDestroy bool   `pulumi:"deleteCloudResourcesOnDestroy"`
	// ID of IP address to be used. Required only for creating new AppGateway. See https://learn.microsoft.com/en-us/azure/application-gateway/application-gateway-components#static-versus-dynamic-public-ip-address for more details
	FrontendIp *string `pulumi:"frontendIp"`
	// Hostname for the proxy
	HostName string `pulumi:"hostName"`
	// Name of the proxy
	Name *string `pulumi:"name"`
	// Region in which cloud resources are hosted
	Region string `pulumi:"region"`
	// Resource group in which cloud resources are hosted
	ResourceGroup string `pulumi:"resourceGroup"`
	// Size of machine used for the gateway. Required only for creating new AppGateway
	SkuSize *string `pulumi:"skuSize"`
	// Subnet in which cloud resources are hosted. Required only for creating new AppGateway
	SubnetId *string `pulumi:"subnetId"`
	// VNet in which cloud resources are hosted. Required only for creating new AppGateway
	Vpc string `pulumi:"vpc"`
}

// The set of arguments for constructing a AzureGateway resource.
type AzureGatewayArgs struct {
	// ID of Azure AppGateway for importing. Required only for importing exiging AppGateway
	AppGatewayId pulumi.StringPtrInput
	// Region in which azure cloud function will be provisioned
	AzureFuncRegion pulumi.StringInput
	// ID of existing SSL certificate from AppGateway being imported. Required only for importing existing AppGateway. Required only for SSL based rules
	CertificateId pulumi.StringPtrInput
	// Id of the cloud connector
	CloudConnectorId              pulumi.StringInput
	DeleteCloudResourcesOnDestroy pulumi.BoolInput
	// ID of IP address to be used. Required only for creating new AppGateway. See https://learn.microsoft.com/en-us/azure/application-gateway/application-gateway-components#static-versus-dynamic-public-ip-address for more details
	FrontendIp pulumi.StringPtrInput
	// Hostname for the proxy
	HostName pulumi.StringInput
	// Name of the proxy
	Name pulumi.StringPtrInput
	// Region in which cloud resources are hosted
	Region pulumi.StringInput
	// Resource group in which cloud resources are hosted
	ResourceGroup pulumi.StringInput
	// Size of machine used for the gateway. Required only for creating new AppGateway
	SkuSize pulumi.StringPtrInput
	// Subnet in which cloud resources are hosted. Required only for creating new AppGateway
	SubnetId pulumi.StringPtrInput
	// VNet in which cloud resources are hosted. Required only for creating new AppGateway
	Vpc pulumi.StringInput
}

func (AzureGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureGatewayArgs)(nil)).Elem()
}

type AzureGatewayInput interface {
	pulumi.Input

	ToAzureGatewayOutput() AzureGatewayOutput
	ToAzureGatewayOutputWithContext(ctx context.Context) AzureGatewayOutput
}

func (*AzureGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureGateway)(nil)).Elem()
}

func (i *AzureGateway) ToAzureGatewayOutput() AzureGatewayOutput {
	return i.ToAzureGatewayOutputWithContext(context.Background())
}

func (i *AzureGateway) ToAzureGatewayOutputWithContext(ctx context.Context) AzureGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureGatewayOutput)
}

// AzureGatewayArrayInput is an input type that accepts AzureGatewayArray and AzureGatewayArrayOutput values.
// You can construct a concrete instance of `AzureGatewayArrayInput` via:
//
//	AzureGatewayArray{ AzureGatewayArgs{...} }
type AzureGatewayArrayInput interface {
	pulumi.Input

	ToAzureGatewayArrayOutput() AzureGatewayArrayOutput
	ToAzureGatewayArrayOutputWithContext(context.Context) AzureGatewayArrayOutput
}

type AzureGatewayArray []AzureGatewayInput

func (AzureGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureGateway)(nil)).Elem()
}

func (i AzureGatewayArray) ToAzureGatewayArrayOutput() AzureGatewayArrayOutput {
	return i.ToAzureGatewayArrayOutputWithContext(context.Background())
}

func (i AzureGatewayArray) ToAzureGatewayArrayOutputWithContext(ctx context.Context) AzureGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureGatewayArrayOutput)
}

// AzureGatewayMapInput is an input type that accepts AzureGatewayMap and AzureGatewayMapOutput values.
// You can construct a concrete instance of `AzureGatewayMapInput` via:
//
//	AzureGatewayMap{ "key": AzureGatewayArgs{...} }
type AzureGatewayMapInput interface {
	pulumi.Input

	ToAzureGatewayMapOutput() AzureGatewayMapOutput
	ToAzureGatewayMapOutputWithContext(context.Context) AzureGatewayMapOutput
}

type AzureGatewayMap map[string]AzureGatewayInput

func (AzureGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureGateway)(nil)).Elem()
}

func (i AzureGatewayMap) ToAzureGatewayMapOutput() AzureGatewayMapOutput {
	return i.ToAzureGatewayMapOutputWithContext(context.Background())
}

func (i AzureGatewayMap) ToAzureGatewayMapOutputWithContext(ctx context.Context) AzureGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureGatewayMapOutput)
}

type AzureGatewayOutput struct{ *pulumi.OutputState }

func (AzureGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureGateway)(nil)).Elem()
}

func (o AzureGatewayOutput) ToAzureGatewayOutput() AzureGatewayOutput {
	return o
}

func (o AzureGatewayOutput) ToAzureGatewayOutputWithContext(ctx context.Context) AzureGatewayOutput {
	return o
}

// ID of Azure AppGateway for importing. Required only for importing exiging AppGateway
func (o AzureGatewayOutput) AppGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureGateway) pulumi.StringPtrOutput { return v.AppGatewayId }).(pulumi.StringPtrOutput)
}

// Region in which azure cloud function will be provisioned
func (o AzureGatewayOutput) AzureFuncRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureGateway) pulumi.StringOutput { return v.AzureFuncRegion }).(pulumi.StringOutput)
}

// ID of existing SSL certificate from AppGateway being imported. Required only for importing existing AppGateway. Required only for SSL based rules
func (o AzureGatewayOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureGateway) pulumi.StringPtrOutput { return v.CertificateId }).(pulumi.StringPtrOutput)
}

// Id of the cloud connector
func (o AzureGatewayOutput) CloudConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureGateway) pulumi.StringOutput { return v.CloudConnectorId }).(pulumi.StringOutput)
}

func (o AzureGatewayOutput) DeleteCloudResourcesOnDestroy() pulumi.BoolOutput {
	return o.ApplyT(func(v *AzureGateway) pulumi.BoolOutput { return v.DeleteCloudResourcesOnDestroy }).(pulumi.BoolOutput)
}

// ID of IP address to be used. Required only for creating new AppGateway. See https://learn.microsoft.com/en-us/azure/application-gateway/application-gateway-components#static-versus-dynamic-public-ip-address for more details
func (o AzureGatewayOutput) FrontendIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureGateway) pulumi.StringPtrOutput { return v.FrontendIp }).(pulumi.StringPtrOutput)
}

// Hostname for the proxy
func (o AzureGatewayOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureGateway) pulumi.StringOutput { return v.HostName }).(pulumi.StringOutput)
}

// Unique identifier of the resource
func (o AzureGatewayOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureGateway) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the proxy
func (o AzureGatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureGateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Region in which cloud resources are hosted
func (o AzureGatewayOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureGateway) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Resource group in which cloud resources are hosted
func (o AzureGatewayOutput) ResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureGateway) pulumi.StringOutput { return v.ResourceGroup }).(pulumi.StringOutput)
}

// Size of machine used for the gateway. Required only for creating new AppGateway
func (o AzureGatewayOutput) SkuSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureGateway) pulumi.StringPtrOutput { return v.SkuSize }).(pulumi.StringPtrOutput)
}

// Subnet in which cloud resources are hosted. Required only for creating new AppGateway
func (o AzureGatewayOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureGateway) pulumi.StringPtrOutput { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// VNet in which cloud resources are hosted. Required only for creating new AppGateway
func (o AzureGatewayOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureGateway) pulumi.StringOutput { return v.Vpc }).(pulumi.StringOutput)
}

type AzureGatewayArrayOutput struct{ *pulumi.OutputState }

func (AzureGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureGateway)(nil)).Elem()
}

func (o AzureGatewayArrayOutput) ToAzureGatewayArrayOutput() AzureGatewayArrayOutput {
	return o
}

func (o AzureGatewayArrayOutput) ToAzureGatewayArrayOutputWithContext(ctx context.Context) AzureGatewayArrayOutput {
	return o
}

func (o AzureGatewayArrayOutput) Index(i pulumi.IntInput) AzureGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureGateway {
		return vs[0].([]*AzureGateway)[vs[1].(int)]
	}).(AzureGatewayOutput)
}

type AzureGatewayMapOutput struct{ *pulumi.OutputState }

func (AzureGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureGateway)(nil)).Elem()
}

func (o AzureGatewayMapOutput) ToAzureGatewayMapOutput() AzureGatewayMapOutput {
	return o
}

func (o AzureGatewayMapOutput) ToAzureGatewayMapOutputWithContext(ctx context.Context) AzureGatewayMapOutput {
	return o
}

func (o AzureGatewayMapOutput) MapIndex(k pulumi.StringInput) AzureGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureGateway {
		return vs[0].(map[string]*AzureGateway)[vs[1].(string)]
	}).(AzureGatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureGatewayInput)(nil)).Elem(), &AzureGateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureGatewayArrayInput)(nil)).Elem(), AzureGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureGatewayMapInput)(nil)).Elem(), AzureGatewayMap{})
	pulumi.RegisterOutputType(AzureGatewayOutput{})
	pulumi.RegisterOutputType(AzureGatewayArrayOutput{})
	pulumi.RegisterOutputType(AzureGatewayMapOutput{})
}
