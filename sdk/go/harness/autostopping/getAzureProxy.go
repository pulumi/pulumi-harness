// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autostopping

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for Azure Autostopping proxy
//
// ## Example Usage
func LookupAzureProxy(ctx *pulumi.Context, args *LookupAzureProxyArgs, opts ...pulumi.InvokeOption) (*LookupAzureProxyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAzureProxyResult
	err := ctx.Invoke("harness:autostopping/getAzureProxy:getAzureProxy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAzureProxy.
type LookupAzureProxyArgs struct {
	// Boolean value to indicate if proxy vm needs to have static IP
	AllocateStaticIp *bool `pulumi:"allocateStaticIp"`
	// Harness NG API key
	ApiKey        string                     `pulumi:"apiKey"`
	CertificateId *string                    `pulumi:"certificateId"`
	Certificates  *GetAzureProxyCertificates `pulumi:"certificates"`
	// Id of the cloud connector
	CloudConnectorId              string `pulumi:"cloudConnectorId"`
	DeleteCloudResourcesOnDestroy bool   `pulumi:"deleteCloudResourcesOnDestroy"`
	// Hostname for the proxy
	HostName string `pulumi:"hostName"`
	// Name of SSH Key to be used for proxy VM
	Keypair string `pulumi:"keypair"`
	// Type of instance to be used for proxy
	MachineType string `pulumi:"machineType"`
	// Name of the proxy
	Name string `pulumi:"name"`
	// Region in which cloud resources are hosted
	Region string `pulumi:"region"`
	// Resource group in which cloud resources are hosted
	ResourceGroup string `pulumi:"resourceGroup"`
	// Security Group to define the security rules that determine the inbound and outbound traffic
	SecurityGroups []string `pulumi:"securityGroups"`
	// Subnet in which cloud resources are hosted
	SubnetId string `pulumi:"subnetId"`
	// VPC in which cloud resources are hosted
	Vpc string `pulumi:"vpc"`
}

// A collection of values returned by getAzureProxy.
type LookupAzureProxyResult struct {
	// Boolean value to indicate if proxy vm needs to have static IP
	AllocateStaticIp *bool `pulumi:"allocateStaticIp"`
	// Harness NG API key
	ApiKey        string                     `pulumi:"apiKey"`
	CertificateId *string                    `pulumi:"certificateId"`
	Certificates  *GetAzureProxyCertificates `pulumi:"certificates"`
	// Id of the cloud connector
	CloudConnectorId              string `pulumi:"cloudConnectorId"`
	DeleteCloudResourcesOnDestroy bool   `pulumi:"deleteCloudResourcesOnDestroy"`
	// Hostname for the proxy
	HostName string `pulumi:"hostName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource
	Identifier string `pulumi:"identifier"`
	// Name of SSH Key to be used for proxy VM
	Keypair string `pulumi:"keypair"`
	// Type of instance to be used for proxy
	MachineType string `pulumi:"machineType"`
	// Name of the proxy
	Name string `pulumi:"name"`
	// Region in which cloud resources are hosted
	Region string `pulumi:"region"`
	// Resource group in which cloud resources are hosted
	ResourceGroup string `pulumi:"resourceGroup"`
	// Security Group to define the security rules that determine the inbound and outbound traffic
	SecurityGroups []string `pulumi:"securityGroups"`
	// Subnet in which cloud resources are hosted
	SubnetId string `pulumi:"subnetId"`
	// VPC in which cloud resources are hosted
	Vpc string `pulumi:"vpc"`
}

func LookupAzureProxyOutput(ctx *pulumi.Context, args LookupAzureProxyOutputArgs, opts ...pulumi.InvokeOption) LookupAzureProxyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAzureProxyResultOutput, error) {
			args := v.(LookupAzureProxyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:autostopping/getAzureProxy:getAzureProxy", args, LookupAzureProxyResultOutput{}, options).(LookupAzureProxyResultOutput), nil
		}).(LookupAzureProxyResultOutput)
}

// A collection of arguments for invoking getAzureProxy.
type LookupAzureProxyOutputArgs struct {
	// Boolean value to indicate if proxy vm needs to have static IP
	AllocateStaticIp pulumi.BoolPtrInput `pulumi:"allocateStaticIp"`
	// Harness NG API key
	ApiKey        pulumi.StringInput                `pulumi:"apiKey"`
	CertificateId pulumi.StringPtrInput             `pulumi:"certificateId"`
	Certificates  GetAzureProxyCertificatesPtrInput `pulumi:"certificates"`
	// Id of the cloud connector
	CloudConnectorId              pulumi.StringInput `pulumi:"cloudConnectorId"`
	DeleteCloudResourcesOnDestroy pulumi.BoolInput   `pulumi:"deleteCloudResourcesOnDestroy"`
	// Hostname for the proxy
	HostName pulumi.StringInput `pulumi:"hostName"`
	// Name of SSH Key to be used for proxy VM
	Keypair pulumi.StringInput `pulumi:"keypair"`
	// Type of instance to be used for proxy
	MachineType pulumi.StringInput `pulumi:"machineType"`
	// Name of the proxy
	Name pulumi.StringInput `pulumi:"name"`
	// Region in which cloud resources are hosted
	Region pulumi.StringInput `pulumi:"region"`
	// Resource group in which cloud resources are hosted
	ResourceGroup pulumi.StringInput `pulumi:"resourceGroup"`
	// Security Group to define the security rules that determine the inbound and outbound traffic
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	// Subnet in which cloud resources are hosted
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// VPC in which cloud resources are hosted
	Vpc pulumi.StringInput `pulumi:"vpc"`
}

func (LookupAzureProxyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAzureProxyArgs)(nil)).Elem()
}

// A collection of values returned by getAzureProxy.
type LookupAzureProxyResultOutput struct{ *pulumi.OutputState }

func (LookupAzureProxyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAzureProxyResult)(nil)).Elem()
}

func (o LookupAzureProxyResultOutput) ToLookupAzureProxyResultOutput() LookupAzureProxyResultOutput {
	return o
}

func (o LookupAzureProxyResultOutput) ToLookupAzureProxyResultOutputWithContext(ctx context.Context) LookupAzureProxyResultOutput {
	return o
}

// Boolean value to indicate if proxy vm needs to have static IP
func (o LookupAzureProxyResultOutput) AllocateStaticIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupAzureProxyResult) *bool { return v.AllocateStaticIp }).(pulumi.BoolPtrOutput)
}

// Harness NG API key
func (o LookupAzureProxyResultOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureProxyResult) string { return v.ApiKey }).(pulumi.StringOutput)
}

func (o LookupAzureProxyResultOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAzureProxyResult) *string { return v.CertificateId }).(pulumi.StringPtrOutput)
}

func (o LookupAzureProxyResultOutput) Certificates() GetAzureProxyCertificatesPtrOutput {
	return o.ApplyT(func(v LookupAzureProxyResult) *GetAzureProxyCertificates { return v.Certificates }).(GetAzureProxyCertificatesPtrOutput)
}

// Id of the cloud connector
func (o LookupAzureProxyResultOutput) CloudConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureProxyResult) string { return v.CloudConnectorId }).(pulumi.StringOutput)
}

func (o LookupAzureProxyResultOutput) DeleteCloudResourcesOnDestroy() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAzureProxyResult) bool { return v.DeleteCloudResourcesOnDestroy }).(pulumi.BoolOutput)
}

// Hostname for the proxy
func (o LookupAzureProxyResultOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureProxyResult) string { return v.HostName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAzureProxyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureProxyResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource
func (o LookupAzureProxyResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureProxyResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Name of SSH Key to be used for proxy VM
func (o LookupAzureProxyResultOutput) Keypair() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureProxyResult) string { return v.Keypair }).(pulumi.StringOutput)
}

// Type of instance to be used for proxy
func (o LookupAzureProxyResultOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureProxyResult) string { return v.MachineType }).(pulumi.StringOutput)
}

// Name of the proxy
func (o LookupAzureProxyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureProxyResult) string { return v.Name }).(pulumi.StringOutput)
}

// Region in which cloud resources are hosted
func (o LookupAzureProxyResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureProxyResult) string { return v.Region }).(pulumi.StringOutput)
}

// Resource group in which cloud resources are hosted
func (o LookupAzureProxyResultOutput) ResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureProxyResult) string { return v.ResourceGroup }).(pulumi.StringOutput)
}

// Security Group to define the security rules that determine the inbound and outbound traffic
func (o LookupAzureProxyResultOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAzureProxyResult) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// Subnet in which cloud resources are hosted
func (o LookupAzureProxyResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureProxyResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

// VPC in which cloud resources are hosted
func (o LookupAzureProxyResultOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureProxyResult) string { return v.Vpc }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAzureProxyResultOutput{})
}
