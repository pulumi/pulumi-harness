// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harness

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the harness package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// The Harness account id. This can also be set using the `HARNESS_ACCOUNT_ID` environment variable.
	AccountId pulumi.StringPtrOutput `pulumi:"accountId"`
	// The Harness API key. This can also be set using the `HARNESS_API_KEY` environment variable. For more information to
	// create an API key in FirstGen, see https://docs.harness.io/article/smloyragsm-api-keys#create_an_api_key.
	ApiKey pulumi.StringPtrOutput `pulumi:"apiKey"`
	// The URL of the Harness API endpoint. The default is `https://app.harness.io/gateway`. This can also be set using the
	// `HARNESS_ENDPOINT` environment variable.
	Endpoint pulumi.StringPtrOutput `pulumi:"endpoint"`
	// The API key for the Harness next gen platform. This can also be set using the `HARNESS_PLATFORM_API_KEY` environment
	// variable. For more information to create an API key in NextGen, see
	// https://docs.harness.io/article/tdoad7xrh9-add-and-manage-api-keys.
	PlatformApiKey pulumi.StringPtrOutput `pulumi:"platformApiKey"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.AccountId == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "HARNESS_ACCOUNT_ID"); d != nil {
			args.AccountId = pulumi.StringPtr(d.(string))
		}
	}
	if args.ApiKey == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "HARNESS_API_KEY"); d != nil {
			args.ApiKey = pulumi.StringPtr(d.(string))
		}
	}
	if args.Endpoint == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "HARNESS_ENDPOINT"); d != nil {
			args.Endpoint = pulumi.StringPtr(d.(string))
		}
	}
	if args.PlatformApiKey == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "HARNESS_PLATFORM_API_KEY"); d != nil {
			args.PlatformApiKey = pulumi.StringPtr(d.(string))
		}
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:harness", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// The Harness account id. This can also be set using the `HARNESS_ACCOUNT_ID` environment variable.
	AccountId *string `pulumi:"accountId"`
	// The Harness API key. This can also be set using the `HARNESS_API_KEY` environment variable. For more information to
	// create an API key in FirstGen, see https://docs.harness.io/article/smloyragsm-api-keys#create_an_api_key.
	ApiKey *string `pulumi:"apiKey"`
	// The URL of the Harness API endpoint. The default is `https://app.harness.io/gateway`. This can also be set using the
	// `HARNESS_ENDPOINT` environment variable.
	Endpoint *string `pulumi:"endpoint"`
	// The API key for the Harness next gen platform. This can also be set using the `HARNESS_PLATFORM_API_KEY` environment
	// variable. For more information to create an API key in NextGen, see
	// https://docs.harness.io/article/tdoad7xrh9-add-and-manage-api-keys.
	PlatformApiKey *string `pulumi:"platformApiKey"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// The Harness account id. This can also be set using the `HARNESS_ACCOUNT_ID` environment variable.
	AccountId pulumi.StringPtrInput
	// The Harness API key. This can also be set using the `HARNESS_API_KEY` environment variable. For more information to
	// create an API key in FirstGen, see https://docs.harness.io/article/smloyragsm-api-keys#create_an_api_key.
	ApiKey pulumi.StringPtrInput
	// The URL of the Harness API endpoint. The default is `https://app.harness.io/gateway`. This can also be set using the
	// `HARNESS_ENDPOINT` environment variable.
	Endpoint pulumi.StringPtrInput
	// The API key for the Harness next gen platform. This can also be set using the `HARNESS_PLATFORM_API_KEY` environment
	// variable. For more information to create an API key in NextGen, see
	// https://docs.harness.io/article/tdoad7xrh9-add-and-manage-api-keys.
	PlatformApiKey pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

// This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
func (r *Provider) TerraformConfig(ctx *pulumi.Context) (ProviderTerraformConfigResultOutput, error) {
	out, err := ctx.Call("pulumi:providers:harness/terraformConfig", nil, ProviderTerraformConfigResultOutput{}, r)
	if err != nil {
		return ProviderTerraformConfigResultOutput{}, err
	}
	return out.(ProviderTerraformConfigResultOutput), nil
}

type ProviderTerraformConfigResult struct {
	Result map[string]interface{} `pulumi:"result"`
}

type ProviderTerraformConfigResultOutput struct{ *pulumi.OutputState }

func (ProviderTerraformConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderTerraformConfigResult)(nil)).Elem()
}

func (o ProviderTerraformConfigResultOutput) Result() pulumi.MapOutput {
	return o.ApplyT(func(v ProviderTerraformConfigResult) map[string]interface{} { return v.Result }).(pulumi.MapOutput)
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// The Harness account id. This can also be set using the `HARNESS_ACCOUNT_ID` environment variable.
func (o ProviderOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.AccountId }).(pulumi.StringPtrOutput)
}

// The Harness API key. This can also be set using the `HARNESS_API_KEY` environment variable. For more information to
// create an API key in FirstGen, see https://docs.harness.io/article/smloyragsm-api-keys#create_an_api_key.
func (o ProviderOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ApiKey }).(pulumi.StringPtrOutput)
}

// The URL of the Harness API endpoint. The default is `https://app.harness.io/gateway`. This can also be set using the
// `HARNESS_ENDPOINT` environment variable.
func (o ProviderOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The API key for the Harness next gen platform. This can also be set using the `HARNESS_PLATFORM_API_KEY` environment
// variable. For more information to create an API key in NextGen, see
// https://docs.harness.io/article/tdoad7xrh9-add-and-manage-api-keys.
func (o ProviderOutput) PlatformApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.PlatformApiKey }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
	pulumi.RegisterOutputType(ProviderTerraformConfigResultOutput{})
}
