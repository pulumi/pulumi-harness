// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harness

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness application
func LookupGitConnector(ctx *pulumi.Context, args *LookupGitConnectorArgs, opts ...pulumi.InvokeOption) (*LookupGitConnectorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGitConnectorResult
	err := ctx.Invoke("harness:index/getGitConnector:getGitConnector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGitConnector.
type LookupGitConnectorArgs struct {
	// Id of the git connector.
	Id *string `pulumi:"id"`
	// The name of the git connector.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getGitConnector.
type LookupGitConnectorResult struct {
	// The branch of the git connector to use.
	Branch string `pulumi:"branch"`
	// Custom details to use when making commits using this git connector.
	CommitDetails []GetGitConnectorCommitDetail `pulumi:"commitDetails"`
	// The time the git connector was created.
	CreatedAt string `pulumi:"createdAt"`
	// Delegate selectors to apply to this git connector.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Boolean indicating whether or not to generate a webhook url.
	GenerateWebhookUrl bool `pulumi:"generateWebhookUrl"`
	// Id of the git connector.
	Id *string `pulumi:"id"`
	// The name of the git connector.
	Name *string `pulumi:"name"`
	// The id of the secret for connecting to the git repository.
	PasswordSecretId string `pulumi:"passwordSecretId"`
	// The id of the SSH secret to use.
	SshSettingId string `pulumi:"sshSettingId"`
	// The URL of the git repository or account/organization.
	Url string `pulumi:"url"`
	// The type of git url being used. Options are `ACCOUNT`, and `REPO`.
	UrlType string `pulumi:"urlType"`
	// The name of the user used to connect to the git repository.
	Username string `pulumi:"username"`
	// The generated webhook url.
	WebhookUrl string `pulumi:"webhookUrl"`
}

func LookupGitConnectorOutput(ctx *pulumi.Context, args LookupGitConnectorOutputArgs, opts ...pulumi.InvokeOption) LookupGitConnectorResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupGitConnectorResultOutput, error) {
			args := v.(LookupGitConnectorArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:index/getGitConnector:getGitConnector", args, LookupGitConnectorResultOutput{}, options).(LookupGitConnectorResultOutput), nil
		}).(LookupGitConnectorResultOutput)
}

// A collection of arguments for invoking getGitConnector.
type LookupGitConnectorOutputArgs struct {
	// Id of the git connector.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the git connector.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupGitConnectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitConnectorArgs)(nil)).Elem()
}

// A collection of values returned by getGitConnector.
type LookupGitConnectorResultOutput struct{ *pulumi.OutputState }

func (LookupGitConnectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitConnectorResult)(nil)).Elem()
}

func (o LookupGitConnectorResultOutput) ToLookupGitConnectorResultOutput() LookupGitConnectorResultOutput {
	return o
}

func (o LookupGitConnectorResultOutput) ToLookupGitConnectorResultOutputWithContext(ctx context.Context) LookupGitConnectorResultOutput {
	return o
}

// The branch of the git connector to use.
func (o LookupGitConnectorResultOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) string { return v.Branch }).(pulumi.StringOutput)
}

// Custom details to use when making commits using this git connector.
func (o LookupGitConnectorResultOutput) CommitDetails() GetGitConnectorCommitDetailArrayOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) []GetGitConnectorCommitDetail { return v.CommitDetails }).(GetGitConnectorCommitDetailArrayOutput)
}

// The time the git connector was created.
func (o LookupGitConnectorResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Delegate selectors to apply to this git connector.
func (o LookupGitConnectorResultOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) []string { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Boolean indicating whether or not to generate a webhook url.
func (o LookupGitConnectorResultOutput) GenerateWebhookUrl() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) bool { return v.GenerateWebhookUrl }).(pulumi.BoolOutput)
}

// Id of the git connector.
func (o LookupGitConnectorResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the git connector.
func (o LookupGitConnectorResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The id of the secret for connecting to the git repository.
func (o LookupGitConnectorResultOutput) PasswordSecretId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) string { return v.PasswordSecretId }).(pulumi.StringOutput)
}

// The id of the SSH secret to use.
func (o LookupGitConnectorResultOutput) SshSettingId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) string { return v.SshSettingId }).(pulumi.StringOutput)
}

// The URL of the git repository or account/organization.
func (o LookupGitConnectorResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) string { return v.Url }).(pulumi.StringOutput)
}

// The type of git url being used. Options are `ACCOUNT`, and `REPO`.
func (o LookupGitConnectorResultOutput) UrlType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) string { return v.UrlType }).(pulumi.StringOutput)
}

// The name of the user used to connect to the git repository.
func (o LookupGitConnectorResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) string { return v.Username }).(pulumi.StringOutput)
}

// The generated webhook url.
func (o LookupGitConnectorResultOutput) WebhookUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) string { return v.WebhookUrl }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGitConnectorResultOutput{})
}
