// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harness

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for configuring application git sync.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := harness.GetSecretManager(ctx, &harness.GetSecretManagerArgs{
//				Default: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			githubToken, err := harness.NewEncryptedText(ctx, "github_token", &harness.EncryptedTextArgs{
//				Name:            pulumi.String("github_token"),
//				Value:           pulumi.String("<TOKEN>"),
//				SecretManagerId: pulumi.String(_default.Id),
//			})
//			if err != nil {
//				return err
//			}
//			myrepo, err := harness.NewGitConnector(ctx, "myrepo", &harness.GitConnectorArgs{
//				Name:               pulumi.String("myrepo"),
//				Url:                pulumi.String("https://github.com/someorg/myrepo"),
//				Branch:             pulumi.String("main"),
//				GenerateWebhookUrl: pulumi.Bool(true),
//				Username:           pulumi.String("someuser"),
//				PasswordSecretId:   githubToken.ID(),
//				UrlType:            pulumi.String("REPO"),
//			})
//			if err != nil {
//				return err
//			}
//			example, err := harness.NewApplication(ctx, "example", &harness.ApplicationArgs{
//				Name: pulumi.String("example-app"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = harness.NewApplicationGitSync(ctx, "example", &harness.ApplicationGitSyncArgs{
//				AppId:       example.ID(),
//				ConnectorId: myrepo.ID(),
//				Branch:      pulumi.String("main"),
//				Enabled:     pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import using the Harness application id
//
// ```sh
// $ pulumi import harness:index/applicationGitSync:ApplicationGitSync myapp Xyz123
// ```
type ApplicationGitSync struct {
	pulumi.CustomResourceState

	// The id of the application.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The branch of the git repository to sync to.
	Branch pulumi.StringOutput `pulumi:"branch"`
	// The id of the git connector to use.
	ConnectorId pulumi.StringOutput `pulumi:"connectorId"`
	// Whether or not to enable git sync.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The name of the git repository to sync to. This is only used if the git connector is for an account and not an individual repository.
	RepositoryName pulumi.StringPtrOutput `pulumi:"repositoryName"`
}

// NewApplicationGitSync registers a new resource with the given unique name, arguments, and options.
func NewApplicationGitSync(ctx *pulumi.Context,
	name string, args *ApplicationGitSyncArgs, opts ...pulumi.ResourceOption) (*ApplicationGitSync, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.Branch == nil {
		return nil, errors.New("invalid value for required argument 'Branch'")
	}
	if args.ConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationGitSync
	err := ctx.RegisterResource("harness:index/applicationGitSync:ApplicationGitSync", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationGitSync gets an existing ApplicationGitSync resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationGitSync(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationGitSyncState, opts ...pulumi.ResourceOption) (*ApplicationGitSync, error) {
	var resource ApplicationGitSync
	err := ctx.ReadResource("harness:index/applicationGitSync:ApplicationGitSync", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationGitSync resources.
type applicationGitSyncState struct {
	// The id of the application.
	AppId *string `pulumi:"appId"`
	// The branch of the git repository to sync to.
	Branch *string `pulumi:"branch"`
	// The id of the git connector to use.
	ConnectorId *string `pulumi:"connectorId"`
	// Whether or not to enable git sync.
	Enabled *bool `pulumi:"enabled"`
	// The name of the git repository to sync to. This is only used if the git connector is for an account and not an individual repository.
	RepositoryName *string `pulumi:"repositoryName"`
}

type ApplicationGitSyncState struct {
	// The id of the application.
	AppId pulumi.StringPtrInput
	// The branch of the git repository to sync to.
	Branch pulumi.StringPtrInput
	// The id of the git connector to use.
	ConnectorId pulumi.StringPtrInput
	// Whether or not to enable git sync.
	Enabled pulumi.BoolPtrInput
	// The name of the git repository to sync to. This is only used if the git connector is for an account and not an individual repository.
	RepositoryName pulumi.StringPtrInput
}

func (ApplicationGitSyncState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationGitSyncState)(nil)).Elem()
}

type applicationGitSyncArgs struct {
	// The id of the application.
	AppId string `pulumi:"appId"`
	// The branch of the git repository to sync to.
	Branch string `pulumi:"branch"`
	// The id of the git connector to use.
	ConnectorId string `pulumi:"connectorId"`
	// Whether or not to enable git sync.
	Enabled *bool `pulumi:"enabled"`
	// The name of the git repository to sync to. This is only used if the git connector is for an account and not an individual repository.
	RepositoryName *string `pulumi:"repositoryName"`
}

// The set of arguments for constructing a ApplicationGitSync resource.
type ApplicationGitSyncArgs struct {
	// The id of the application.
	AppId pulumi.StringInput
	// The branch of the git repository to sync to.
	Branch pulumi.StringInput
	// The id of the git connector to use.
	ConnectorId pulumi.StringInput
	// Whether or not to enable git sync.
	Enabled pulumi.BoolPtrInput
	// The name of the git repository to sync to. This is only used if the git connector is for an account and not an individual repository.
	RepositoryName pulumi.StringPtrInput
}

func (ApplicationGitSyncArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationGitSyncArgs)(nil)).Elem()
}

type ApplicationGitSyncInput interface {
	pulumi.Input

	ToApplicationGitSyncOutput() ApplicationGitSyncOutput
	ToApplicationGitSyncOutputWithContext(ctx context.Context) ApplicationGitSyncOutput
}

func (*ApplicationGitSync) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationGitSync)(nil)).Elem()
}

func (i *ApplicationGitSync) ToApplicationGitSyncOutput() ApplicationGitSyncOutput {
	return i.ToApplicationGitSyncOutputWithContext(context.Background())
}

func (i *ApplicationGitSync) ToApplicationGitSyncOutputWithContext(ctx context.Context) ApplicationGitSyncOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationGitSyncOutput)
}

// ApplicationGitSyncArrayInput is an input type that accepts ApplicationGitSyncArray and ApplicationGitSyncArrayOutput values.
// You can construct a concrete instance of `ApplicationGitSyncArrayInput` via:
//
//	ApplicationGitSyncArray{ ApplicationGitSyncArgs{...} }
type ApplicationGitSyncArrayInput interface {
	pulumi.Input

	ToApplicationGitSyncArrayOutput() ApplicationGitSyncArrayOutput
	ToApplicationGitSyncArrayOutputWithContext(context.Context) ApplicationGitSyncArrayOutput
}

type ApplicationGitSyncArray []ApplicationGitSyncInput

func (ApplicationGitSyncArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationGitSync)(nil)).Elem()
}

func (i ApplicationGitSyncArray) ToApplicationGitSyncArrayOutput() ApplicationGitSyncArrayOutput {
	return i.ToApplicationGitSyncArrayOutputWithContext(context.Background())
}

func (i ApplicationGitSyncArray) ToApplicationGitSyncArrayOutputWithContext(ctx context.Context) ApplicationGitSyncArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationGitSyncArrayOutput)
}

// ApplicationGitSyncMapInput is an input type that accepts ApplicationGitSyncMap and ApplicationGitSyncMapOutput values.
// You can construct a concrete instance of `ApplicationGitSyncMapInput` via:
//
//	ApplicationGitSyncMap{ "key": ApplicationGitSyncArgs{...} }
type ApplicationGitSyncMapInput interface {
	pulumi.Input

	ToApplicationGitSyncMapOutput() ApplicationGitSyncMapOutput
	ToApplicationGitSyncMapOutputWithContext(context.Context) ApplicationGitSyncMapOutput
}

type ApplicationGitSyncMap map[string]ApplicationGitSyncInput

func (ApplicationGitSyncMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationGitSync)(nil)).Elem()
}

func (i ApplicationGitSyncMap) ToApplicationGitSyncMapOutput() ApplicationGitSyncMapOutput {
	return i.ToApplicationGitSyncMapOutputWithContext(context.Background())
}

func (i ApplicationGitSyncMap) ToApplicationGitSyncMapOutputWithContext(ctx context.Context) ApplicationGitSyncMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationGitSyncMapOutput)
}

type ApplicationGitSyncOutput struct{ *pulumi.OutputState }

func (ApplicationGitSyncOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationGitSync)(nil)).Elem()
}

func (o ApplicationGitSyncOutput) ToApplicationGitSyncOutput() ApplicationGitSyncOutput {
	return o
}

func (o ApplicationGitSyncOutput) ToApplicationGitSyncOutputWithContext(ctx context.Context) ApplicationGitSyncOutput {
	return o
}

// The id of the application.
func (o ApplicationGitSyncOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationGitSync) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// The branch of the git repository to sync to.
func (o ApplicationGitSyncOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationGitSync) pulumi.StringOutput { return v.Branch }).(pulumi.StringOutput)
}

// The id of the git connector to use.
func (o ApplicationGitSyncOutput) ConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationGitSync) pulumi.StringOutput { return v.ConnectorId }).(pulumi.StringOutput)
}

// Whether or not to enable git sync.
func (o ApplicationGitSyncOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationGitSync) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The name of the git repository to sync to. This is only used if the git connector is for an account and not an individual repository.
func (o ApplicationGitSyncOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationGitSync) pulumi.StringPtrOutput { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

type ApplicationGitSyncArrayOutput struct{ *pulumi.OutputState }

func (ApplicationGitSyncArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationGitSync)(nil)).Elem()
}

func (o ApplicationGitSyncArrayOutput) ToApplicationGitSyncArrayOutput() ApplicationGitSyncArrayOutput {
	return o
}

func (o ApplicationGitSyncArrayOutput) ToApplicationGitSyncArrayOutputWithContext(ctx context.Context) ApplicationGitSyncArrayOutput {
	return o
}

func (o ApplicationGitSyncArrayOutput) Index(i pulumi.IntInput) ApplicationGitSyncOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationGitSync {
		return vs[0].([]*ApplicationGitSync)[vs[1].(int)]
	}).(ApplicationGitSyncOutput)
}

type ApplicationGitSyncMapOutput struct{ *pulumi.OutputState }

func (ApplicationGitSyncMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationGitSync)(nil)).Elem()
}

func (o ApplicationGitSyncMapOutput) ToApplicationGitSyncMapOutput() ApplicationGitSyncMapOutput {
	return o
}

func (o ApplicationGitSyncMapOutput) ToApplicationGitSyncMapOutputWithContext(ctx context.Context) ApplicationGitSyncMapOutput {
	return o
}

func (o ApplicationGitSyncMapOutput) MapIndex(k pulumi.StringInput) ApplicationGitSyncOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationGitSync {
		return vs[0].(map[string]*ApplicationGitSync)[vs[1].(string)]
	}).(ApplicationGitSyncOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationGitSyncInput)(nil)).Elem(), &ApplicationGitSync{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationGitSyncArrayInput)(nil)).Elem(), ApplicationGitSyncArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationGitSyncMapInput)(nil)).Elem(), ApplicationGitSyncMap{})
	pulumi.RegisterOutputType(ApplicationGitSyncOutput{})
	pulumi.RegisterOutputType(ApplicationGitSyncArrayOutput{})
	pulumi.RegisterOutputType(ApplicationGitSyncMapOutput{})
}
