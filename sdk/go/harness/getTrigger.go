// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harness

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness trigger.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := harness.GetTrigger(ctx, &harness.GetTriggerArgs{
//				AppId: pulumi.StringRef("app_id"),
//				Name:  pulumi.StringRef("name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = harness.GetTrigger(ctx, &harness.GetTriggerArgs{
//				Id: pulumi.StringRef("trigger_id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetTrigger(ctx *pulumi.Context, args *GetTriggerArgs, opts ...pulumi.InvokeOption) (*GetTriggerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTriggerResult
	err := ctx.Invoke("harness:index/getTrigger:getTrigger", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTrigger.
type GetTriggerArgs struct {
	// The id of the application.
	AppId *string `pulumi:"appId"`
	// The trigger description.
	Description *string `pulumi:"description"`
	// Unique identifier of the trigger.
	Id *string `pulumi:"id"`
	// The name of the trigger.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getTrigger.
type GetTriggerResult struct {
	// The id of the application.
	AppId *string `pulumi:"appId"`
	// The condition that will execute the Trigger: On new artifact, On pipeline completion, On Cron schedule, On webhook, On New Manifest.
	Conditions []GetTriggerCondition `pulumi:"conditions"`
	// The trigger description.
	Description *string `pulumi:"description"`
	// Unique identifier of the trigger.
	Id *string `pulumi:"id"`
	// The name of the trigger.
	Name *string `pulumi:"name"`
}

func GetTriggerOutput(ctx *pulumi.Context, args GetTriggerOutputArgs, opts ...pulumi.InvokeOption) GetTriggerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetTriggerResultOutput, error) {
			args := v.(GetTriggerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:index/getTrigger:getTrigger", args, GetTriggerResultOutput{}, options).(GetTriggerResultOutput), nil
		}).(GetTriggerResultOutput)
}

// A collection of arguments for invoking getTrigger.
type GetTriggerOutputArgs struct {
	// The id of the application.
	AppId pulumi.StringPtrInput `pulumi:"appId"`
	// The trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Unique identifier of the trigger.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the trigger.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GetTriggerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTriggerArgs)(nil)).Elem()
}

// A collection of values returned by getTrigger.
type GetTriggerResultOutput struct{ *pulumi.OutputState }

func (GetTriggerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTriggerResult)(nil)).Elem()
}

func (o GetTriggerResultOutput) ToGetTriggerResultOutput() GetTriggerResultOutput {
	return o
}

func (o GetTriggerResultOutput) ToGetTriggerResultOutputWithContext(ctx context.Context) GetTriggerResultOutput {
	return o
}

// The id of the application.
func (o GetTriggerResultOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTriggerResult) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// The condition that will execute the Trigger: On new artifact, On pipeline completion, On Cron schedule, On webhook, On New Manifest.
func (o GetTriggerResultOutput) Conditions() GetTriggerConditionArrayOutput {
	return o.ApplyT(func(v GetTriggerResult) []GetTriggerCondition { return v.Conditions }).(GetTriggerConditionArrayOutput)
}

// The trigger description.
func (o GetTriggerResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTriggerResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the trigger.
func (o GetTriggerResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTriggerResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the trigger.
func (o GetTriggerResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTriggerResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTriggerResultOutput{})
}
