// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harness

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating am infrastructure definition. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `createBeforeDestroy = true` lifecycle setting.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness"
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/cloudprovider"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Creating a Kubernetes infrastructure definition
//			dev, err := cloudprovider.NewKubernetes(ctx, "dev", &cloudprovider.KubernetesArgs{
//				Name: pulumi.String("k8s-dev"),
//				Authentication: &cloudprovider.KubernetesAuthenticationArgs{
//					DelegateSelectors: pulumi.StringArray{
//						pulumi.String("k8s"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			example, err := harness.NewApplication(ctx, "example", &harness.ApplicationArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			devEnvironment, err := harness.NewEnvironment(ctx, "dev", &harness.EnvironmentArgs{
//				Name:  pulumi.String("dev"),
//				AppId: example.ID(),
//				Type:  pulumi.String("NON_PROD"),
//			})
//			if err != nil {
//				return err
//			}
//			// Creating a infrastructure of type KUBERNETES
//			_, err = harness.NewInfrastructureDefinition(ctx, "k8s", &harness.InfrastructureDefinitionArgs{
//				Name:              pulumi.String("k8s-eks-us-east-1"),
//				AppId:             example.ID(),
//				EnvId:             devEnvironment.ID(),
//				CloudProviderType: pulumi.String("KUBERNETES_CLUSTER"),
//				DeploymentType:    pulumi.String("KUBERNETES"),
//				Kubernetes: &harness.InfrastructureDefinitionKubernetesArgs{
//					CloudProviderName: dev.Name,
//					Namespace:         pulumi.String("dev"),
//					ReleaseName:       pulumi.String("${service.name}"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Creating a Deployment Template for CUSTOM infrastructure type
//			exampleYaml, err := harness.NewYamlConfig(ctx, "example_yaml", &harness.YamlConfigArgs{
//				Path: pulumi.String("Setup/Template Library/Example Folder/deployment_template.yaml"),
//				Content: pulumi.String(`harnessApiVersion: '1.0'
//
// type: CUSTOM_DEPLOYMENT_TYPE
// fetchInstanceScript: |-
//
//	set -ex
//	curl http://${url}/${file_name} > ${INSTANCE_OUTPUT_PATH}
//
// hostAttributes:
//
//	hostname: host
//
// hostObjectArrayPath: hosts
// variables:
// - name: url
// - name: file_name
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			// Creating a infrastructure of type CUSTOM
//			_, err = harness.NewInfrastructureDefinition(ctx, "custom", &harness.InfrastructureDefinitionArgs{
//				Name:              pulumi.String("custom-infra"),
//				AppId:             example.ID(),
//				EnvId:             devEnvironment.ID(),
//				CloudProviderType: pulumi.String("CUSTOM"),
//				DeploymentType:    pulumi.String("CUSTOM"),
//				DeploymentTemplateUri: exampleYaml.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("Example Folder/%v", name), nil
//				}).(pulumi.StringOutput),
//				Custom: &harness.InfrastructureDefinitionCustomArgs{
//					DeploymentTypeTemplateVersion: pulumi.String("1"),
//					Variables: harness.InfrastructureDefinitionCustomVariableArray{
//						&harness.InfrastructureDefinitionCustomVariableArgs{
//							Name:  pulumi.String("url"),
//							Value: pulumi.String("localhost:8081"),
//						},
//						&harness.InfrastructureDefinitionCustomVariableArgs{
//							Name:  pulumi.String("file_name"),
//							Value: pulumi.String("instances.json"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import using the Harness application id, environment id, and infrastructure definition id
//
// ```sh
// $ pulumi import harness:index/infrastructureDefinition:InfrastructureDefinition example <app_id>/<env_id>/<infradef_id>
// ```
type InfrastructureDefinition struct {
	pulumi.CustomResourceState

	// The id of the application the infrastructure definition belongs to.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The configuration details for Aws AMI deployments.
	AwsAmi InfrastructureDefinitionAwsAmiPtrOutput `pulumi:"awsAmi"`
	// The configuration details for Aws AMI deployments.
	AwsEcs InfrastructureDefinitionAwsEcsPtrOutput `pulumi:"awsEcs"`
	// The configuration details for Aws Lambda deployments.
	AwsLambda InfrastructureDefinitionAwsLambdaPtrOutput `pulumi:"awsLambda"`
	// The configuration details for AWS SSH deployments.
	AwsSsh InfrastructureDefinitionAwsSshPtrOutput `pulumi:"awsSsh"`
	// The configuration details for AWS WinRM deployments.
	AwsWinrm InfrastructureDefinitionAwsWinrmPtrOutput `pulumi:"awsWinrm"`
	// The configuration details for Azure VMSS deployments.
	AzureVmss InfrastructureDefinitionAzureVmssPtrOutput `pulumi:"azureVmss"`
	// The configuration details for Azure WebApp deployments.
	AzureWebapp InfrastructureDefinitionAzureWebappPtrOutput `pulumi:"azureWebapp"`
	// The type of the cloud provider to connect with. Valid options are AWS, AZURE, CUSTOM, PHYSICAL*DATA*CENTER, KUBERNETES*CLUSTER, PCF, SPOT*INST
	CloudProviderType pulumi.StringOutput `pulumi:"cloudProviderType"`
	// The configuration details for Custom deployments.
	Custom InfrastructureDefinitionCustomPtrOutput `pulumi:"custom"`
	// The configuration details for SSH datacenter deployments.
	DatacenterSsh InfrastructureDefinitionDatacenterSshPtrOutput `pulumi:"datacenterSsh"`
	// The configuration details for WinRM datacenter deployments.
	DatacenterWinrm InfrastructureDefinitionDatacenterWinrmPtrOutput `pulumi:"datacenterWinrm"`
	// The URI of the deployment template to use. Only used if deploymentType is `CUSTOM`.
	DeploymentTemplateUri pulumi.StringPtrOutput `pulumi:"deploymentTemplateUri"`
	// The type of the deployment to use. Valid options are AMI, AWS*CODEDEPLOY, AWS*LAMBDA, AZURE*VMSS, AZURE*WEBAPP, CUSTOM, ECS, HELM, KUBERNETES, PCF, SSH, WINRM
	DeploymentType pulumi.StringOutput `pulumi:"deploymentType"`
	// The id of the environment the infrastructure definition belongs to.
	EnvId pulumi.StringOutput `pulumi:"envId"`
	// The configuration details for Kubernetes deployments.
	Kubernetes InfrastructureDefinitionKubernetesPtrOutput `pulumi:"kubernetes"`
	// The configuration details for Kubernetes on GCP deployments.
	KubernetesGcp InfrastructureDefinitionKubernetesGcpPtrOutput `pulumi:"kubernetesGcp"`
	// The name of the infrastructure definition
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the infrastructure provisioner to use.
	ProvisionerName pulumi.StringPtrOutput `pulumi:"provisionerName"`
	// The list of service names to scope this infrastructure definition to.
	ScopedServices pulumi.StringArrayOutput `pulumi:"scopedServices"`
	// The configuration details for PCF deployments.
	Tanzu InfrastructureDefinitionTanzuPtrOutput `pulumi:"tanzu"`
}

// NewInfrastructureDefinition registers a new resource with the given unique name, arguments, and options.
func NewInfrastructureDefinition(ctx *pulumi.Context,
	name string, args *InfrastructureDefinitionArgs, opts ...pulumi.ResourceOption) (*InfrastructureDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.CloudProviderType == nil {
		return nil, errors.New("invalid value for required argument 'CloudProviderType'")
	}
	if args.DeploymentType == nil {
		return nil, errors.New("invalid value for required argument 'DeploymentType'")
	}
	if args.EnvId == nil {
		return nil, errors.New("invalid value for required argument 'EnvId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InfrastructureDefinition
	err := ctx.RegisterResource("harness:index/infrastructureDefinition:InfrastructureDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInfrastructureDefinition gets an existing InfrastructureDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInfrastructureDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InfrastructureDefinitionState, opts ...pulumi.ResourceOption) (*InfrastructureDefinition, error) {
	var resource InfrastructureDefinition
	err := ctx.ReadResource("harness:index/infrastructureDefinition:InfrastructureDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InfrastructureDefinition resources.
type infrastructureDefinitionState struct {
	// The id of the application the infrastructure definition belongs to.
	AppId *string `pulumi:"appId"`
	// The configuration details for Aws AMI deployments.
	AwsAmi *InfrastructureDefinitionAwsAmi `pulumi:"awsAmi"`
	// The configuration details for Aws AMI deployments.
	AwsEcs *InfrastructureDefinitionAwsEcs `pulumi:"awsEcs"`
	// The configuration details for Aws Lambda deployments.
	AwsLambda *InfrastructureDefinitionAwsLambda `pulumi:"awsLambda"`
	// The configuration details for AWS SSH deployments.
	AwsSsh *InfrastructureDefinitionAwsSsh `pulumi:"awsSsh"`
	// The configuration details for AWS WinRM deployments.
	AwsWinrm *InfrastructureDefinitionAwsWinrm `pulumi:"awsWinrm"`
	// The configuration details for Azure VMSS deployments.
	AzureVmss *InfrastructureDefinitionAzureVmss `pulumi:"azureVmss"`
	// The configuration details for Azure WebApp deployments.
	AzureWebapp *InfrastructureDefinitionAzureWebapp `pulumi:"azureWebapp"`
	// The type of the cloud provider to connect with. Valid options are AWS, AZURE, CUSTOM, PHYSICAL*DATA*CENTER, KUBERNETES*CLUSTER, PCF, SPOT*INST
	CloudProviderType *string `pulumi:"cloudProviderType"`
	// The configuration details for Custom deployments.
	Custom *InfrastructureDefinitionCustom `pulumi:"custom"`
	// The configuration details for SSH datacenter deployments.
	DatacenterSsh *InfrastructureDefinitionDatacenterSsh `pulumi:"datacenterSsh"`
	// The configuration details for WinRM datacenter deployments.
	DatacenterWinrm *InfrastructureDefinitionDatacenterWinrm `pulumi:"datacenterWinrm"`
	// The URI of the deployment template to use. Only used if deploymentType is `CUSTOM`.
	DeploymentTemplateUri *string `pulumi:"deploymentTemplateUri"`
	// The type of the deployment to use. Valid options are AMI, AWS*CODEDEPLOY, AWS*LAMBDA, AZURE*VMSS, AZURE*WEBAPP, CUSTOM, ECS, HELM, KUBERNETES, PCF, SSH, WINRM
	DeploymentType *string `pulumi:"deploymentType"`
	// The id of the environment the infrastructure definition belongs to.
	EnvId *string `pulumi:"envId"`
	// The configuration details for Kubernetes deployments.
	Kubernetes *InfrastructureDefinitionKubernetes `pulumi:"kubernetes"`
	// The configuration details for Kubernetes on GCP deployments.
	KubernetesGcp *InfrastructureDefinitionKubernetesGcp `pulumi:"kubernetesGcp"`
	// The name of the infrastructure definition
	Name *string `pulumi:"name"`
	// The name of the infrastructure provisioner to use.
	ProvisionerName *string `pulumi:"provisionerName"`
	// The list of service names to scope this infrastructure definition to.
	ScopedServices []string `pulumi:"scopedServices"`
	// The configuration details for PCF deployments.
	Tanzu *InfrastructureDefinitionTanzu `pulumi:"tanzu"`
}

type InfrastructureDefinitionState struct {
	// The id of the application the infrastructure definition belongs to.
	AppId pulumi.StringPtrInput
	// The configuration details for Aws AMI deployments.
	AwsAmi InfrastructureDefinitionAwsAmiPtrInput
	// The configuration details for Aws AMI deployments.
	AwsEcs InfrastructureDefinitionAwsEcsPtrInput
	// The configuration details for Aws Lambda deployments.
	AwsLambda InfrastructureDefinitionAwsLambdaPtrInput
	// The configuration details for AWS SSH deployments.
	AwsSsh InfrastructureDefinitionAwsSshPtrInput
	// The configuration details for AWS WinRM deployments.
	AwsWinrm InfrastructureDefinitionAwsWinrmPtrInput
	// The configuration details for Azure VMSS deployments.
	AzureVmss InfrastructureDefinitionAzureVmssPtrInput
	// The configuration details for Azure WebApp deployments.
	AzureWebapp InfrastructureDefinitionAzureWebappPtrInput
	// The type of the cloud provider to connect with. Valid options are AWS, AZURE, CUSTOM, PHYSICAL*DATA*CENTER, KUBERNETES*CLUSTER, PCF, SPOT*INST
	CloudProviderType pulumi.StringPtrInput
	// The configuration details for Custom deployments.
	Custom InfrastructureDefinitionCustomPtrInput
	// The configuration details for SSH datacenter deployments.
	DatacenterSsh InfrastructureDefinitionDatacenterSshPtrInput
	// The configuration details for WinRM datacenter deployments.
	DatacenterWinrm InfrastructureDefinitionDatacenterWinrmPtrInput
	// The URI of the deployment template to use. Only used if deploymentType is `CUSTOM`.
	DeploymentTemplateUri pulumi.StringPtrInput
	// The type of the deployment to use. Valid options are AMI, AWS*CODEDEPLOY, AWS*LAMBDA, AZURE*VMSS, AZURE*WEBAPP, CUSTOM, ECS, HELM, KUBERNETES, PCF, SSH, WINRM
	DeploymentType pulumi.StringPtrInput
	// The id of the environment the infrastructure definition belongs to.
	EnvId pulumi.StringPtrInput
	// The configuration details for Kubernetes deployments.
	Kubernetes InfrastructureDefinitionKubernetesPtrInput
	// The configuration details for Kubernetes on GCP deployments.
	KubernetesGcp InfrastructureDefinitionKubernetesGcpPtrInput
	// The name of the infrastructure definition
	Name pulumi.StringPtrInput
	// The name of the infrastructure provisioner to use.
	ProvisionerName pulumi.StringPtrInput
	// The list of service names to scope this infrastructure definition to.
	ScopedServices pulumi.StringArrayInput
	// The configuration details for PCF deployments.
	Tanzu InfrastructureDefinitionTanzuPtrInput
}

func (InfrastructureDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*infrastructureDefinitionState)(nil)).Elem()
}

type infrastructureDefinitionArgs struct {
	// The id of the application the infrastructure definition belongs to.
	AppId string `pulumi:"appId"`
	// The configuration details for Aws AMI deployments.
	AwsAmi *InfrastructureDefinitionAwsAmi `pulumi:"awsAmi"`
	// The configuration details for Aws AMI deployments.
	AwsEcs *InfrastructureDefinitionAwsEcs `pulumi:"awsEcs"`
	// The configuration details for Aws Lambda deployments.
	AwsLambda *InfrastructureDefinitionAwsLambda `pulumi:"awsLambda"`
	// The configuration details for AWS SSH deployments.
	AwsSsh *InfrastructureDefinitionAwsSsh `pulumi:"awsSsh"`
	// The configuration details for AWS WinRM deployments.
	AwsWinrm *InfrastructureDefinitionAwsWinrm `pulumi:"awsWinrm"`
	// The configuration details for Azure VMSS deployments.
	AzureVmss *InfrastructureDefinitionAzureVmss `pulumi:"azureVmss"`
	// The configuration details for Azure WebApp deployments.
	AzureWebapp *InfrastructureDefinitionAzureWebapp `pulumi:"azureWebapp"`
	// The type of the cloud provider to connect with. Valid options are AWS, AZURE, CUSTOM, PHYSICAL*DATA*CENTER, KUBERNETES*CLUSTER, PCF, SPOT*INST
	CloudProviderType string `pulumi:"cloudProviderType"`
	// The configuration details for Custom deployments.
	Custom *InfrastructureDefinitionCustom `pulumi:"custom"`
	// The configuration details for SSH datacenter deployments.
	DatacenterSsh *InfrastructureDefinitionDatacenterSsh `pulumi:"datacenterSsh"`
	// The configuration details for WinRM datacenter deployments.
	DatacenterWinrm *InfrastructureDefinitionDatacenterWinrm `pulumi:"datacenterWinrm"`
	// The URI of the deployment template to use. Only used if deploymentType is `CUSTOM`.
	DeploymentTemplateUri *string `pulumi:"deploymentTemplateUri"`
	// The type of the deployment to use. Valid options are AMI, AWS*CODEDEPLOY, AWS*LAMBDA, AZURE*VMSS, AZURE*WEBAPP, CUSTOM, ECS, HELM, KUBERNETES, PCF, SSH, WINRM
	DeploymentType string `pulumi:"deploymentType"`
	// The id of the environment the infrastructure definition belongs to.
	EnvId string `pulumi:"envId"`
	// The configuration details for Kubernetes deployments.
	Kubernetes *InfrastructureDefinitionKubernetes `pulumi:"kubernetes"`
	// The configuration details for Kubernetes on GCP deployments.
	KubernetesGcp *InfrastructureDefinitionKubernetesGcp `pulumi:"kubernetesGcp"`
	// The name of the infrastructure definition
	Name *string `pulumi:"name"`
	// The name of the infrastructure provisioner to use.
	ProvisionerName *string `pulumi:"provisionerName"`
	// The list of service names to scope this infrastructure definition to.
	ScopedServices []string `pulumi:"scopedServices"`
	// The configuration details for PCF deployments.
	Tanzu *InfrastructureDefinitionTanzu `pulumi:"tanzu"`
}

// The set of arguments for constructing a InfrastructureDefinition resource.
type InfrastructureDefinitionArgs struct {
	// The id of the application the infrastructure definition belongs to.
	AppId pulumi.StringInput
	// The configuration details for Aws AMI deployments.
	AwsAmi InfrastructureDefinitionAwsAmiPtrInput
	// The configuration details for Aws AMI deployments.
	AwsEcs InfrastructureDefinitionAwsEcsPtrInput
	// The configuration details for Aws Lambda deployments.
	AwsLambda InfrastructureDefinitionAwsLambdaPtrInput
	// The configuration details for AWS SSH deployments.
	AwsSsh InfrastructureDefinitionAwsSshPtrInput
	// The configuration details for AWS WinRM deployments.
	AwsWinrm InfrastructureDefinitionAwsWinrmPtrInput
	// The configuration details for Azure VMSS deployments.
	AzureVmss InfrastructureDefinitionAzureVmssPtrInput
	// The configuration details for Azure WebApp deployments.
	AzureWebapp InfrastructureDefinitionAzureWebappPtrInput
	// The type of the cloud provider to connect with. Valid options are AWS, AZURE, CUSTOM, PHYSICAL*DATA*CENTER, KUBERNETES*CLUSTER, PCF, SPOT*INST
	CloudProviderType pulumi.StringInput
	// The configuration details for Custom deployments.
	Custom InfrastructureDefinitionCustomPtrInput
	// The configuration details for SSH datacenter deployments.
	DatacenterSsh InfrastructureDefinitionDatacenterSshPtrInput
	// The configuration details for WinRM datacenter deployments.
	DatacenterWinrm InfrastructureDefinitionDatacenterWinrmPtrInput
	// The URI of the deployment template to use. Only used if deploymentType is `CUSTOM`.
	DeploymentTemplateUri pulumi.StringPtrInput
	// The type of the deployment to use. Valid options are AMI, AWS*CODEDEPLOY, AWS*LAMBDA, AZURE*VMSS, AZURE*WEBAPP, CUSTOM, ECS, HELM, KUBERNETES, PCF, SSH, WINRM
	DeploymentType pulumi.StringInput
	// The id of the environment the infrastructure definition belongs to.
	EnvId pulumi.StringInput
	// The configuration details for Kubernetes deployments.
	Kubernetes InfrastructureDefinitionKubernetesPtrInput
	// The configuration details for Kubernetes on GCP deployments.
	KubernetesGcp InfrastructureDefinitionKubernetesGcpPtrInput
	// The name of the infrastructure definition
	Name pulumi.StringPtrInput
	// The name of the infrastructure provisioner to use.
	ProvisionerName pulumi.StringPtrInput
	// The list of service names to scope this infrastructure definition to.
	ScopedServices pulumi.StringArrayInput
	// The configuration details for PCF deployments.
	Tanzu InfrastructureDefinitionTanzuPtrInput
}

func (InfrastructureDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*infrastructureDefinitionArgs)(nil)).Elem()
}

type InfrastructureDefinitionInput interface {
	pulumi.Input

	ToInfrastructureDefinitionOutput() InfrastructureDefinitionOutput
	ToInfrastructureDefinitionOutputWithContext(ctx context.Context) InfrastructureDefinitionOutput
}

func (*InfrastructureDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinition)(nil)).Elem()
}

func (i *InfrastructureDefinition) ToInfrastructureDefinitionOutput() InfrastructureDefinitionOutput {
	return i.ToInfrastructureDefinitionOutputWithContext(context.Background())
}

func (i *InfrastructureDefinition) ToInfrastructureDefinitionOutputWithContext(ctx context.Context) InfrastructureDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionOutput)
}

// InfrastructureDefinitionArrayInput is an input type that accepts InfrastructureDefinitionArray and InfrastructureDefinitionArrayOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionArrayInput` via:
//
//	InfrastructureDefinitionArray{ InfrastructureDefinitionArgs{...} }
type InfrastructureDefinitionArrayInput interface {
	pulumi.Input

	ToInfrastructureDefinitionArrayOutput() InfrastructureDefinitionArrayOutput
	ToInfrastructureDefinitionArrayOutputWithContext(context.Context) InfrastructureDefinitionArrayOutput
}

type InfrastructureDefinitionArray []InfrastructureDefinitionInput

func (InfrastructureDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InfrastructureDefinition)(nil)).Elem()
}

func (i InfrastructureDefinitionArray) ToInfrastructureDefinitionArrayOutput() InfrastructureDefinitionArrayOutput {
	return i.ToInfrastructureDefinitionArrayOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionArray) ToInfrastructureDefinitionArrayOutputWithContext(ctx context.Context) InfrastructureDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionArrayOutput)
}

// InfrastructureDefinitionMapInput is an input type that accepts InfrastructureDefinitionMap and InfrastructureDefinitionMapOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionMapInput` via:
//
//	InfrastructureDefinitionMap{ "key": InfrastructureDefinitionArgs{...} }
type InfrastructureDefinitionMapInput interface {
	pulumi.Input

	ToInfrastructureDefinitionMapOutput() InfrastructureDefinitionMapOutput
	ToInfrastructureDefinitionMapOutputWithContext(context.Context) InfrastructureDefinitionMapOutput
}

type InfrastructureDefinitionMap map[string]InfrastructureDefinitionInput

func (InfrastructureDefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InfrastructureDefinition)(nil)).Elem()
}

func (i InfrastructureDefinitionMap) ToInfrastructureDefinitionMapOutput() InfrastructureDefinitionMapOutput {
	return i.ToInfrastructureDefinitionMapOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionMap) ToInfrastructureDefinitionMapOutputWithContext(ctx context.Context) InfrastructureDefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionMapOutput)
}

type InfrastructureDefinitionOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinition)(nil)).Elem()
}

func (o InfrastructureDefinitionOutput) ToInfrastructureDefinitionOutput() InfrastructureDefinitionOutput {
	return o
}

func (o InfrastructureDefinitionOutput) ToInfrastructureDefinitionOutputWithContext(ctx context.Context) InfrastructureDefinitionOutput {
	return o
}

// The id of the application the infrastructure definition belongs to.
func (o InfrastructureDefinitionOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureDefinition) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// The configuration details for Aws AMI deployments.
func (o InfrastructureDefinitionOutput) AwsAmi() InfrastructureDefinitionAwsAmiPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinition) InfrastructureDefinitionAwsAmiPtrOutput { return v.AwsAmi }).(InfrastructureDefinitionAwsAmiPtrOutput)
}

// The configuration details for Aws AMI deployments.
func (o InfrastructureDefinitionOutput) AwsEcs() InfrastructureDefinitionAwsEcsPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinition) InfrastructureDefinitionAwsEcsPtrOutput { return v.AwsEcs }).(InfrastructureDefinitionAwsEcsPtrOutput)
}

// The configuration details for Aws Lambda deployments.
func (o InfrastructureDefinitionOutput) AwsLambda() InfrastructureDefinitionAwsLambdaPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinition) InfrastructureDefinitionAwsLambdaPtrOutput { return v.AwsLambda }).(InfrastructureDefinitionAwsLambdaPtrOutput)
}

// The configuration details for AWS SSH deployments.
func (o InfrastructureDefinitionOutput) AwsSsh() InfrastructureDefinitionAwsSshPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinition) InfrastructureDefinitionAwsSshPtrOutput { return v.AwsSsh }).(InfrastructureDefinitionAwsSshPtrOutput)
}

// The configuration details for AWS WinRM deployments.
func (o InfrastructureDefinitionOutput) AwsWinrm() InfrastructureDefinitionAwsWinrmPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinition) InfrastructureDefinitionAwsWinrmPtrOutput { return v.AwsWinrm }).(InfrastructureDefinitionAwsWinrmPtrOutput)
}

// The configuration details for Azure VMSS deployments.
func (o InfrastructureDefinitionOutput) AzureVmss() InfrastructureDefinitionAzureVmssPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinition) InfrastructureDefinitionAzureVmssPtrOutput { return v.AzureVmss }).(InfrastructureDefinitionAzureVmssPtrOutput)
}

// The configuration details for Azure WebApp deployments.
func (o InfrastructureDefinitionOutput) AzureWebapp() InfrastructureDefinitionAzureWebappPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinition) InfrastructureDefinitionAzureWebappPtrOutput { return v.AzureWebapp }).(InfrastructureDefinitionAzureWebappPtrOutput)
}

// The type of the cloud provider to connect with. Valid options are AWS, AZURE, CUSTOM, PHYSICAL*DATA*CENTER, KUBERNETES*CLUSTER, PCF, SPOT*INST
func (o InfrastructureDefinitionOutput) CloudProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureDefinition) pulumi.StringOutput { return v.CloudProviderType }).(pulumi.StringOutput)
}

// The configuration details for Custom deployments.
func (o InfrastructureDefinitionOutput) Custom() InfrastructureDefinitionCustomPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinition) InfrastructureDefinitionCustomPtrOutput { return v.Custom }).(InfrastructureDefinitionCustomPtrOutput)
}

// The configuration details for SSH datacenter deployments.
func (o InfrastructureDefinitionOutput) DatacenterSsh() InfrastructureDefinitionDatacenterSshPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinition) InfrastructureDefinitionDatacenterSshPtrOutput {
		return v.DatacenterSsh
	}).(InfrastructureDefinitionDatacenterSshPtrOutput)
}

// The configuration details for WinRM datacenter deployments.
func (o InfrastructureDefinitionOutput) DatacenterWinrm() InfrastructureDefinitionDatacenterWinrmPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinition) InfrastructureDefinitionDatacenterWinrmPtrOutput {
		return v.DatacenterWinrm
	}).(InfrastructureDefinitionDatacenterWinrmPtrOutput)
}

// The URI of the deployment template to use. Only used if deploymentType is `CUSTOM`.
func (o InfrastructureDefinitionOutput) DeploymentTemplateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinition) pulumi.StringPtrOutput { return v.DeploymentTemplateUri }).(pulumi.StringPtrOutput)
}

// The type of the deployment to use. Valid options are AMI, AWS*CODEDEPLOY, AWS*LAMBDA, AZURE*VMSS, AZURE*WEBAPP, CUSTOM, ECS, HELM, KUBERNETES, PCF, SSH, WINRM
func (o InfrastructureDefinitionOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureDefinition) pulumi.StringOutput { return v.DeploymentType }).(pulumi.StringOutput)
}

// The id of the environment the infrastructure definition belongs to.
func (o InfrastructureDefinitionOutput) EnvId() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureDefinition) pulumi.StringOutput { return v.EnvId }).(pulumi.StringOutput)
}

// The configuration details for Kubernetes deployments.
func (o InfrastructureDefinitionOutput) Kubernetes() InfrastructureDefinitionKubernetesPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinition) InfrastructureDefinitionKubernetesPtrOutput { return v.Kubernetes }).(InfrastructureDefinitionKubernetesPtrOutput)
}

// The configuration details for Kubernetes on GCP deployments.
func (o InfrastructureDefinitionOutput) KubernetesGcp() InfrastructureDefinitionKubernetesGcpPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinition) InfrastructureDefinitionKubernetesGcpPtrOutput {
		return v.KubernetesGcp
	}).(InfrastructureDefinitionKubernetesGcpPtrOutput)
}

// The name of the infrastructure definition
func (o InfrastructureDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureDefinition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the infrastructure provisioner to use.
func (o InfrastructureDefinitionOutput) ProvisionerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinition) pulumi.StringPtrOutput { return v.ProvisionerName }).(pulumi.StringPtrOutput)
}

// The list of service names to scope this infrastructure definition to.
func (o InfrastructureDefinitionOutput) ScopedServices() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InfrastructureDefinition) pulumi.StringArrayOutput { return v.ScopedServices }).(pulumi.StringArrayOutput)
}

// The configuration details for PCF deployments.
func (o InfrastructureDefinitionOutput) Tanzu() InfrastructureDefinitionTanzuPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinition) InfrastructureDefinitionTanzuPtrOutput { return v.Tanzu }).(InfrastructureDefinitionTanzuPtrOutput)
}

type InfrastructureDefinitionArrayOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InfrastructureDefinition)(nil)).Elem()
}

func (o InfrastructureDefinitionArrayOutput) ToInfrastructureDefinitionArrayOutput() InfrastructureDefinitionArrayOutput {
	return o
}

func (o InfrastructureDefinitionArrayOutput) ToInfrastructureDefinitionArrayOutputWithContext(ctx context.Context) InfrastructureDefinitionArrayOutput {
	return o
}

func (o InfrastructureDefinitionArrayOutput) Index(i pulumi.IntInput) InfrastructureDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InfrastructureDefinition {
		return vs[0].([]*InfrastructureDefinition)[vs[1].(int)]
	}).(InfrastructureDefinitionOutput)
}

type InfrastructureDefinitionMapOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InfrastructureDefinition)(nil)).Elem()
}

func (o InfrastructureDefinitionMapOutput) ToInfrastructureDefinitionMapOutput() InfrastructureDefinitionMapOutput {
	return o
}

func (o InfrastructureDefinitionMapOutput) ToInfrastructureDefinitionMapOutputWithContext(ctx context.Context) InfrastructureDefinitionMapOutput {
	return o
}

func (o InfrastructureDefinitionMapOutput) MapIndex(k pulumi.StringInput) InfrastructureDefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InfrastructureDefinition {
		return vs[0].(map[string]*InfrastructureDefinition)[vs[1].(string)]
	}).(InfrastructureDefinitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionInput)(nil)).Elem(), &InfrastructureDefinition{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionArrayInput)(nil)).Elem(), InfrastructureDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionMapInput)(nil)).Elem(), InfrastructureDefinitionMap{})
	pulumi.RegisterOutputType(InfrastructureDefinitionOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionArrayOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionMapOutput{})
}
