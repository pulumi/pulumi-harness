// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harness

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating and managing Harness API Keys. API Keys can be created at the account, organization, or project level.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create API Key at account level
//			_, err := harness.NewPlatformApiKey(ctx, "account_level", &harness.PlatformApiKeyArgs{
//				Identifier: pulumi.String("test_apikey"),
//				Name:       pulumi.String("test_apikey"),
//				ParentId:   pulumi.String("parent_id"),
//				ApikeyType: pulumi.String("USER"),
//				AccountId:  pulumi.String("account_id"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create API Key at organization level
//			_, err = harness.NewPlatformApiKey(ctx, "org_level", &harness.PlatformApiKeyArgs{
//				Identifier: pulumi.String("test_apikey"),
//				Name:       pulumi.String("test_apikey"),
//				ParentId:   pulumi.String("parent_id"),
//				ApikeyType: pulumi.String("USER"),
//				AccountId:  pulumi.String("account_id"),
//				OrgId:      pulumi.String("org_id"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create API Key at project level
//			_, err = harness.NewPlatformApiKey(ctx, "project_level", &harness.PlatformApiKeyArgs{
//				Identifier: pulumi.String("test_apikey"),
//				Name:       pulumi.String("test_apikey"),
//				ParentId:   pulumi.String("parent_id"),
//				ApikeyType: pulumi.String("USER"),
//				AccountId:  pulumi.String("account_id"),
//				OrgId:      pulumi.String("org_id"),
//				ProjectId:  pulumi.String("project_id"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import account level apikey
//
// ```sh
// $ pulumi import harness:index/platformApiKey:PlatformApiKey harness_platform_apikey <parent_id>/<apikey_id>/<apikey_type>
// ```
//
// # Import org level apikey
//
// ```sh
// $ pulumi import harness:index/platformApiKey:PlatformApiKey harness_platform_apikey <org_id>/<parent_id>/<apikey_id>/<apikey_type>
// ```
//
// # Import project level apikey
//
// ```sh
// $ pulumi import harness:index/platformApiKey:PlatformApiKey harness_platform_apikey <org_id>/<project_id>/<parent_id>/<apikey_id>/<apikey_type>
// ```
type PlatformApiKey struct {
	pulumi.CustomResourceState

	// Account Identifier for the Entity
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Type of the API Key
	ApikeyType pulumi.StringOutput `pulumi:"apikeyType"`
	// Default expiration time of the Token within API Key
	DefaultTimeToExpireToken pulumi.IntPtrOutput `pulumi:"defaultTimeToExpireToken"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Parent Entity Identifier of the API Key
	ParentId pulumi.StringOutput `pulumi:"parentId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewPlatformApiKey registers a new resource with the given unique name, arguments, and options.
func NewPlatformApiKey(ctx *pulumi.Context,
	name string, args *PlatformApiKeyArgs, opts ...pulumi.ResourceOption) (*PlatformApiKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.ApikeyType == nil {
		return nil, errors.New("invalid value for required argument 'ApikeyType'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.ParentId == nil {
		return nil, errors.New("invalid value for required argument 'ParentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PlatformApiKey
	err := ctx.RegisterResource("harness:index/platformApiKey:PlatformApiKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlatformApiKey gets an existing PlatformApiKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlatformApiKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlatformApiKeyState, opts ...pulumi.ResourceOption) (*PlatformApiKey, error) {
	var resource PlatformApiKey
	err := ctx.ReadResource("harness:index/platformApiKey:PlatformApiKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PlatformApiKey resources.
type platformApiKeyState struct {
	// Account Identifier for the Entity
	AccountId *string `pulumi:"accountId"`
	// Type of the API Key
	ApikeyType *string `pulumi:"apikeyType"`
	// Default expiration time of the Token within API Key
	DefaultTimeToExpireToken *int `pulumi:"defaultTimeToExpireToken"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Parent Entity Identifier of the API Key
	ParentId *string `pulumi:"parentId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

type PlatformApiKeyState struct {
	// Account Identifier for the Entity
	AccountId pulumi.StringPtrInput
	// Type of the API Key
	ApikeyType pulumi.StringPtrInput
	// Default expiration time of the Token within API Key
	DefaultTimeToExpireToken pulumi.IntPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Parent Entity Identifier of the API Key
	ParentId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (PlatformApiKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*platformApiKeyState)(nil)).Elem()
}

type platformApiKeyArgs struct {
	// Account Identifier for the Entity
	AccountId string `pulumi:"accountId"`
	// Type of the API Key
	ApikeyType string `pulumi:"apikeyType"`
	// Default expiration time of the Token within API Key
	DefaultTimeToExpireToken *int `pulumi:"defaultTimeToExpireToken"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Parent Entity Identifier of the API Key
	ParentId string `pulumi:"parentId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a PlatformApiKey resource.
type PlatformApiKeyArgs struct {
	// Account Identifier for the Entity
	AccountId pulumi.StringInput
	// Type of the API Key
	ApikeyType pulumi.StringInput
	// Default expiration time of the Token within API Key
	DefaultTimeToExpireToken pulumi.IntPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Parent Entity Identifier of the API Key
	ParentId pulumi.StringInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (PlatformApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*platformApiKeyArgs)(nil)).Elem()
}

type PlatformApiKeyInput interface {
	pulumi.Input

	ToPlatformApiKeyOutput() PlatformApiKeyOutput
	ToPlatformApiKeyOutputWithContext(ctx context.Context) PlatformApiKeyOutput
}

func (*PlatformApiKey) ElementType() reflect.Type {
	return reflect.TypeOf((**PlatformApiKey)(nil)).Elem()
}

func (i *PlatformApiKey) ToPlatformApiKeyOutput() PlatformApiKeyOutput {
	return i.ToPlatformApiKeyOutputWithContext(context.Background())
}

func (i *PlatformApiKey) ToPlatformApiKeyOutputWithContext(ctx context.Context) PlatformApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformApiKeyOutput)
}

// PlatformApiKeyArrayInput is an input type that accepts PlatformApiKeyArray and PlatformApiKeyArrayOutput values.
// You can construct a concrete instance of `PlatformApiKeyArrayInput` via:
//
//	PlatformApiKeyArray{ PlatformApiKeyArgs{...} }
type PlatformApiKeyArrayInput interface {
	pulumi.Input

	ToPlatformApiKeyArrayOutput() PlatformApiKeyArrayOutput
	ToPlatformApiKeyArrayOutputWithContext(context.Context) PlatformApiKeyArrayOutput
}

type PlatformApiKeyArray []PlatformApiKeyInput

func (PlatformApiKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlatformApiKey)(nil)).Elem()
}

func (i PlatformApiKeyArray) ToPlatformApiKeyArrayOutput() PlatformApiKeyArrayOutput {
	return i.ToPlatformApiKeyArrayOutputWithContext(context.Background())
}

func (i PlatformApiKeyArray) ToPlatformApiKeyArrayOutputWithContext(ctx context.Context) PlatformApiKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformApiKeyArrayOutput)
}

// PlatformApiKeyMapInput is an input type that accepts PlatformApiKeyMap and PlatformApiKeyMapOutput values.
// You can construct a concrete instance of `PlatformApiKeyMapInput` via:
//
//	PlatformApiKeyMap{ "key": PlatformApiKeyArgs{...} }
type PlatformApiKeyMapInput interface {
	pulumi.Input

	ToPlatformApiKeyMapOutput() PlatformApiKeyMapOutput
	ToPlatformApiKeyMapOutputWithContext(context.Context) PlatformApiKeyMapOutput
}

type PlatformApiKeyMap map[string]PlatformApiKeyInput

func (PlatformApiKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlatformApiKey)(nil)).Elem()
}

func (i PlatformApiKeyMap) ToPlatformApiKeyMapOutput() PlatformApiKeyMapOutput {
	return i.ToPlatformApiKeyMapOutputWithContext(context.Background())
}

func (i PlatformApiKeyMap) ToPlatformApiKeyMapOutputWithContext(ctx context.Context) PlatformApiKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformApiKeyMapOutput)
}

type PlatformApiKeyOutput struct{ *pulumi.OutputState }

func (PlatformApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlatformApiKey)(nil)).Elem()
}

func (o PlatformApiKeyOutput) ToPlatformApiKeyOutput() PlatformApiKeyOutput {
	return o
}

func (o PlatformApiKeyOutput) ToPlatformApiKeyOutputWithContext(ctx context.Context) PlatformApiKeyOutput {
	return o
}

// Account Identifier for the Entity
func (o PlatformApiKeyOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *PlatformApiKey) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Type of the API Key
func (o PlatformApiKeyOutput) ApikeyType() pulumi.StringOutput {
	return o.ApplyT(func(v *PlatformApiKey) pulumi.StringOutput { return v.ApikeyType }).(pulumi.StringOutput)
}

// Default expiration time of the Token within API Key
func (o PlatformApiKeyOutput) DefaultTimeToExpireToken() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PlatformApiKey) pulumi.IntPtrOutput { return v.DefaultTimeToExpireToken }).(pulumi.IntPtrOutput)
}

// Description of the resource.
func (o PlatformApiKeyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlatformApiKey) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o PlatformApiKeyOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *PlatformApiKey) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o PlatformApiKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PlatformApiKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o PlatformApiKeyOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlatformApiKey) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Parent Entity Identifier of the API Key
func (o PlatformApiKeyOutput) ParentId() pulumi.StringOutput {
	return o.ApplyT(func(v *PlatformApiKey) pulumi.StringOutput { return v.ParentId }).(pulumi.StringOutput)
}

// Unique identifier of the project.
func (o PlatformApiKeyOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlatformApiKey) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o PlatformApiKeyOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PlatformApiKey) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type PlatformApiKeyArrayOutput struct{ *pulumi.OutputState }

func (PlatformApiKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlatformApiKey)(nil)).Elem()
}

func (o PlatformApiKeyArrayOutput) ToPlatformApiKeyArrayOutput() PlatformApiKeyArrayOutput {
	return o
}

func (o PlatformApiKeyArrayOutput) ToPlatformApiKeyArrayOutputWithContext(ctx context.Context) PlatformApiKeyArrayOutput {
	return o
}

func (o PlatformApiKeyArrayOutput) Index(i pulumi.IntInput) PlatformApiKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PlatformApiKey {
		return vs[0].([]*PlatformApiKey)[vs[1].(int)]
	}).(PlatformApiKeyOutput)
}

type PlatformApiKeyMapOutput struct{ *pulumi.OutputState }

func (PlatformApiKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlatformApiKey)(nil)).Elem()
}

func (o PlatformApiKeyMapOutput) ToPlatformApiKeyMapOutput() PlatformApiKeyMapOutput {
	return o
}

func (o PlatformApiKeyMapOutput) ToPlatformApiKeyMapOutputWithContext(ctx context.Context) PlatformApiKeyMapOutput {
	return o
}

func (o PlatformApiKeyMapOutput) MapIndex(k pulumi.StringInput) PlatformApiKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PlatformApiKey {
		return vs[0].(map[string]*PlatformApiKey)[vs[1].(string)]
	}).(PlatformApiKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlatformApiKeyInput)(nil)).Elem(), &PlatformApiKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlatformApiKeyArrayInput)(nil)).Elem(), PlatformApiKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlatformApiKeyMapInput)(nil)).Elem(), PlatformApiKeyMap{})
	pulumi.RegisterOutputType(PlatformApiKeyOutput{})
	pulumi.RegisterOutputType(PlatformApiKeyArrayOutput{})
	pulumi.RegisterOutputType(PlatformApiKeyMapOutput{})
}
