// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harness

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a git connector
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := harness.GetSecretManager(ctx, &harness.GetSecretManagerArgs{
//				Default: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			example, err := harness.NewEncryptedText(ctx, "example", &harness.EncryptedTextArgs{
//				Name:            pulumi.String("example-secret"),
//				Value:           pulumi.String("foo"),
//				SecretManagerId: pulumi.String(_default.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = harness.NewGitConnector(ctx, "example", &harness.GitConnectorArgs{
//				Name:               pulumi.String("example"),
//				Url:                pulumi.String("https://github.com/harness/terraform-provider-harness"),
//				Branch:             pulumi.String("master"),
//				GenerateWebhookUrl: pulumi.Bool(true),
//				PasswordSecretId:   example.ID(),
//				UrlType:            pulumi.String("REPO"),
//				Username:           pulumi.String("someuser"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import using the Harness git connector id
//
// ```sh
// $ pulumi import harness:index/gitConnector:GitConnector example <connector_id>
// ```
type GitConnector struct {
	pulumi.CustomResourceState

	// The branch of the git connector to use
	Branch pulumi.StringPtrOutput `pulumi:"branch"`
	// Custom details to use when making commits using this git connector
	CommitDetails GitConnectorCommitDetailsPtrOutput `pulumi:"commitDetails"`
	// The time the git connector was created
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Delegate selectors to apply to this git connector.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Boolean indicating whether or not to generate a webhook url.
	GenerateWebhookUrl pulumi.BoolPtrOutput `pulumi:"generateWebhookUrl"`
	// Name of the git connector.
	Name pulumi.StringOutput `pulumi:"name"`
	// The id of the secret for connecting to the git repository.
	PasswordSecretId pulumi.StringPtrOutput `pulumi:"passwordSecretId"`
	// The id of the SSH secret to use
	SshSettingId pulumi.StringPtrOutput `pulumi:"sshSettingId"`
	// The URL of the git repository or account/organization
	Url pulumi.StringOutput `pulumi:"url"`
	// The type of git url being used. Options are `ACCOUNT`, and `REPO.`
	UrlType pulumi.StringOutput `pulumi:"urlType"`
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes GitConnectorUsageScopeArrayOutput `pulumi:"usageScopes"`
	// The name of the user used to connect to the git repository
	Username pulumi.StringPtrOutput `pulumi:"username"`
	// The generated webhook url
	WebhookUrl pulumi.StringOutput `pulumi:"webhookUrl"`
}

// NewGitConnector registers a new resource with the given unique name, arguments, and options.
func NewGitConnector(ctx *pulumi.Context,
	name string, args *GitConnectorArgs, opts ...pulumi.ResourceOption) (*GitConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.UrlType == nil {
		return nil, errors.New("invalid value for required argument 'UrlType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GitConnector
	err := ctx.RegisterResource("harness:index/gitConnector:GitConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitConnector gets an existing GitConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitConnectorState, opts ...pulumi.ResourceOption) (*GitConnector, error) {
	var resource GitConnector
	err := ctx.ReadResource("harness:index/gitConnector:GitConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitConnector resources.
type gitConnectorState struct {
	// The branch of the git connector to use
	Branch *string `pulumi:"branch"`
	// Custom details to use when making commits using this git connector
	CommitDetails *GitConnectorCommitDetails `pulumi:"commitDetails"`
	// The time the git connector was created
	CreatedAt *string `pulumi:"createdAt"`
	// Delegate selectors to apply to this git connector.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Boolean indicating whether or not to generate a webhook url.
	GenerateWebhookUrl *bool `pulumi:"generateWebhookUrl"`
	// Name of the git connector.
	Name *string `pulumi:"name"`
	// The id of the secret for connecting to the git repository.
	PasswordSecretId *string `pulumi:"passwordSecretId"`
	// The id of the SSH secret to use
	SshSettingId *string `pulumi:"sshSettingId"`
	// The URL of the git repository or account/organization
	Url *string `pulumi:"url"`
	// The type of git url being used. Options are `ACCOUNT`, and `REPO.`
	UrlType *string `pulumi:"urlType"`
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes []GitConnectorUsageScope `pulumi:"usageScopes"`
	// The name of the user used to connect to the git repository
	Username *string `pulumi:"username"`
	// The generated webhook url
	WebhookUrl *string `pulumi:"webhookUrl"`
}

type GitConnectorState struct {
	// The branch of the git connector to use
	Branch pulumi.StringPtrInput
	// Custom details to use when making commits using this git connector
	CommitDetails GitConnectorCommitDetailsPtrInput
	// The time the git connector was created
	CreatedAt pulumi.StringPtrInput
	// Delegate selectors to apply to this git connector.
	DelegateSelectors pulumi.StringArrayInput
	// Boolean indicating whether or not to generate a webhook url.
	GenerateWebhookUrl pulumi.BoolPtrInput
	// Name of the git connector.
	Name pulumi.StringPtrInput
	// The id of the secret for connecting to the git repository.
	PasswordSecretId pulumi.StringPtrInput
	// The id of the SSH secret to use
	SshSettingId pulumi.StringPtrInput
	// The URL of the git repository or account/organization
	Url pulumi.StringPtrInput
	// The type of git url being used. Options are `ACCOUNT`, and `REPO.`
	UrlType pulumi.StringPtrInput
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes GitConnectorUsageScopeArrayInput
	// The name of the user used to connect to the git repository
	Username pulumi.StringPtrInput
	// The generated webhook url
	WebhookUrl pulumi.StringPtrInput
}

func (GitConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitConnectorState)(nil)).Elem()
}

type gitConnectorArgs struct {
	// The branch of the git connector to use
	Branch *string `pulumi:"branch"`
	// Custom details to use when making commits using this git connector
	CommitDetails *GitConnectorCommitDetails `pulumi:"commitDetails"`
	// Delegate selectors to apply to this git connector.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Boolean indicating whether or not to generate a webhook url.
	GenerateWebhookUrl *bool `pulumi:"generateWebhookUrl"`
	// Name of the git connector.
	Name *string `pulumi:"name"`
	// The id of the secret for connecting to the git repository.
	PasswordSecretId *string `pulumi:"passwordSecretId"`
	// The id of the SSH secret to use
	SshSettingId *string `pulumi:"sshSettingId"`
	// The URL of the git repository or account/organization
	Url string `pulumi:"url"`
	// The type of git url being used. Options are `ACCOUNT`, and `REPO.`
	UrlType string `pulumi:"urlType"`
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes []GitConnectorUsageScope `pulumi:"usageScopes"`
	// The name of the user used to connect to the git repository
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a GitConnector resource.
type GitConnectorArgs struct {
	// The branch of the git connector to use
	Branch pulumi.StringPtrInput
	// Custom details to use when making commits using this git connector
	CommitDetails GitConnectorCommitDetailsPtrInput
	// Delegate selectors to apply to this git connector.
	DelegateSelectors pulumi.StringArrayInput
	// Boolean indicating whether or not to generate a webhook url.
	GenerateWebhookUrl pulumi.BoolPtrInput
	// Name of the git connector.
	Name pulumi.StringPtrInput
	// The id of the secret for connecting to the git repository.
	PasswordSecretId pulumi.StringPtrInput
	// The id of the SSH secret to use
	SshSettingId pulumi.StringPtrInput
	// The URL of the git repository or account/organization
	Url pulumi.StringInput
	// The type of git url being used. Options are `ACCOUNT`, and `REPO.`
	UrlType pulumi.StringInput
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes GitConnectorUsageScopeArrayInput
	// The name of the user used to connect to the git repository
	Username pulumi.StringPtrInput
}

func (GitConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitConnectorArgs)(nil)).Elem()
}

type GitConnectorInput interface {
	pulumi.Input

	ToGitConnectorOutput() GitConnectorOutput
	ToGitConnectorOutputWithContext(ctx context.Context) GitConnectorOutput
}

func (*GitConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**GitConnector)(nil)).Elem()
}

func (i *GitConnector) ToGitConnectorOutput() GitConnectorOutput {
	return i.ToGitConnectorOutputWithContext(context.Background())
}

func (i *GitConnector) ToGitConnectorOutputWithContext(ctx context.Context) GitConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitConnectorOutput)
}

// GitConnectorArrayInput is an input type that accepts GitConnectorArray and GitConnectorArrayOutput values.
// You can construct a concrete instance of `GitConnectorArrayInput` via:
//
//	GitConnectorArray{ GitConnectorArgs{...} }
type GitConnectorArrayInput interface {
	pulumi.Input

	ToGitConnectorArrayOutput() GitConnectorArrayOutput
	ToGitConnectorArrayOutputWithContext(context.Context) GitConnectorArrayOutput
}

type GitConnectorArray []GitConnectorInput

func (GitConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitConnector)(nil)).Elem()
}

func (i GitConnectorArray) ToGitConnectorArrayOutput() GitConnectorArrayOutput {
	return i.ToGitConnectorArrayOutputWithContext(context.Background())
}

func (i GitConnectorArray) ToGitConnectorArrayOutputWithContext(ctx context.Context) GitConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitConnectorArrayOutput)
}

// GitConnectorMapInput is an input type that accepts GitConnectorMap and GitConnectorMapOutput values.
// You can construct a concrete instance of `GitConnectorMapInput` via:
//
//	GitConnectorMap{ "key": GitConnectorArgs{...} }
type GitConnectorMapInput interface {
	pulumi.Input

	ToGitConnectorMapOutput() GitConnectorMapOutput
	ToGitConnectorMapOutputWithContext(context.Context) GitConnectorMapOutput
}

type GitConnectorMap map[string]GitConnectorInput

func (GitConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitConnector)(nil)).Elem()
}

func (i GitConnectorMap) ToGitConnectorMapOutput() GitConnectorMapOutput {
	return i.ToGitConnectorMapOutputWithContext(context.Background())
}

func (i GitConnectorMap) ToGitConnectorMapOutputWithContext(ctx context.Context) GitConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitConnectorMapOutput)
}

type GitConnectorOutput struct{ *pulumi.OutputState }

func (GitConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitConnector)(nil)).Elem()
}

func (o GitConnectorOutput) ToGitConnectorOutput() GitConnectorOutput {
	return o
}

func (o GitConnectorOutput) ToGitConnectorOutputWithContext(ctx context.Context) GitConnectorOutput {
	return o
}

// The branch of the git connector to use
func (o GitConnectorOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.StringPtrOutput { return v.Branch }).(pulumi.StringPtrOutput)
}

// Custom details to use when making commits using this git connector
func (o GitConnectorOutput) CommitDetails() GitConnectorCommitDetailsPtrOutput {
	return o.ApplyT(func(v *GitConnector) GitConnectorCommitDetailsPtrOutput { return v.CommitDetails }).(GitConnectorCommitDetailsPtrOutput)
}

// The time the git connector was created
func (o GitConnectorOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Delegate selectors to apply to this git connector.
func (o GitConnectorOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Boolean indicating whether or not to generate a webhook url.
func (o GitConnectorOutput) GenerateWebhookUrl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.BoolPtrOutput { return v.GenerateWebhookUrl }).(pulumi.BoolPtrOutput)
}

// Name of the git connector.
func (o GitConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The id of the secret for connecting to the git repository.
func (o GitConnectorOutput) PasswordSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.StringPtrOutput { return v.PasswordSecretId }).(pulumi.StringPtrOutput)
}

// The id of the SSH secret to use
func (o GitConnectorOutput) SshSettingId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.StringPtrOutput { return v.SshSettingId }).(pulumi.StringPtrOutput)
}

// The URL of the git repository or account/organization
func (o GitConnectorOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// The type of git url being used. Options are `ACCOUNT`, and `REPO.`
func (o GitConnectorOutput) UrlType() pulumi.StringOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.StringOutput { return v.UrlType }).(pulumi.StringOutput)
}

// This block is used for scoping the resource to a specific set of applications or environments.
func (o GitConnectorOutput) UsageScopes() GitConnectorUsageScopeArrayOutput {
	return o.ApplyT(func(v *GitConnector) GitConnectorUsageScopeArrayOutput { return v.UsageScopes }).(GitConnectorUsageScopeArrayOutput)
}

// The name of the user used to connect to the git repository
func (o GitConnectorOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

// The generated webhook url
func (o GitConnectorOutput) WebhookUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.StringOutput { return v.WebhookUrl }).(pulumi.StringOutput)
}

type GitConnectorArrayOutput struct{ *pulumi.OutputState }

func (GitConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitConnector)(nil)).Elem()
}

func (o GitConnectorArrayOutput) ToGitConnectorArrayOutput() GitConnectorArrayOutput {
	return o
}

func (o GitConnectorArrayOutput) ToGitConnectorArrayOutputWithContext(ctx context.Context) GitConnectorArrayOutput {
	return o
}

func (o GitConnectorArrayOutput) Index(i pulumi.IntInput) GitConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitConnector {
		return vs[0].([]*GitConnector)[vs[1].(int)]
	}).(GitConnectorOutput)
}

type GitConnectorMapOutput struct{ *pulumi.OutputState }

func (GitConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitConnector)(nil)).Elem()
}

func (o GitConnectorMapOutput) ToGitConnectorMapOutput() GitConnectorMapOutput {
	return o
}

func (o GitConnectorMapOutput) ToGitConnectorMapOutputWithContext(ctx context.Context) GitConnectorMapOutput {
	return o
}

func (o GitConnectorMapOutput) MapIndex(k pulumi.StringInput) GitConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitConnector {
		return vs[0].(map[string]*GitConnector)[vs[1].(string)]
	}).(GitConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitConnectorInput)(nil)).Elem(), &GitConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitConnectorArrayInput)(nil)).Elem(), GitConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitConnectorMapInput)(nil)).Elem(), GitConnectorMap{})
	pulumi.RegisterOutputType(GitConnectorOutput{})
	pulumi.RegisterOutputType(GitConnectorArrayOutput{})
	pulumi.RegisterOutputType(GitConnectorMapOutput{})
}
