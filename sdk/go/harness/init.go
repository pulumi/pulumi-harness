// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harness

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "harness:index/addUserToGroup:AddUserToGroup":
		r = &AddUserToGroup{}
	case "harness:index/application:Application":
		r = &Application{}
	case "harness:index/applicationGitSync:ApplicationGitSync":
		r = &ApplicationGitSync{}
	case "harness:index/chaosInfrastructure:ChaosInfrastructure":
		r = &ChaosInfrastructure{}
	case "harness:index/delegateApproval:DelegateApproval":
		r = &DelegateApproval{}
	case "harness:index/encryptedText:EncryptedText":
		r = &EncryptedText{}
	case "harness:index/environment:Environment":
		r = &Environment{}
	case "harness:index/gitConnector:GitConnector":
		r = &GitConnector{}
	case "harness:index/infrastructureDefinition:InfrastructureDefinition":
		r = &InfrastructureDefinition{}
	case "harness:index/platformApiKey:PlatformApiKey":
		r = &PlatformApiKey{}
	case "harness:index/platformCcmFilters:PlatformCcmFilters":
		r = &PlatformCcmFilters{}
	case "harness:index/sshCredential:SshCredential":
		r = &SshCredential{}
	case "harness:index/user:User":
		r = &User{}
	case "harness:index/userGroup:UserGroup":
		r = &UserGroup{}
	case "harness:index/userGroupPermissions:UserGroupPermissions":
		r = &UserGroupPermissions{}
	case "harness:index/yamlConfig:YamlConfig":
		r = &YamlConfig{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:harness" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"harness",
		"index/addUserToGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"index/application",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"index/applicationGitSync",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"index/chaosInfrastructure",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"index/delegateApproval",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"index/encryptedText",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"index/environment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"index/gitConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"index/infrastructureDefinition",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"index/platformApiKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"index/platformCcmFilters",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"index/sshCredential",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"index/user",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"index/userGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"index/userGroupPermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"index/yamlConfig",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"harness",
		&pkg{version},
	)
}
