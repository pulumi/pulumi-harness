// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chaos

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for syncing a Harness Chaos Hub
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/chaos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := chaos.NewHubSync(ctx, "example", &chaos.HubSyncArgs{
//				OrgId:     pulumi.String("<org_id>"),
//				ProjectId: pulumi.String("<project_id>"),
//				HubId:     pulumi.String("<hub_id>"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type HubSync struct {
	pulumi.CustomResourceState

	// The ID of the Chaos Hub to sync
	HubId pulumi.StringOutput `pulumi:"hubId"`
	// Timestamp of the last sync
	LastSyncedAt pulumi.StringOutput `pulumi:"lastSyncedAt"`
	OrgId        pulumi.StringOutput `pulumi:"orgId"`
	ProjectId    pulumi.StringOutput `pulumi:"projectId"`
}

// NewHubSync registers a new resource with the given unique name, arguments, and options.
func NewHubSync(ctx *pulumi.Context,
	name string, args *HubSyncArgs, opts ...pulumi.ResourceOption) (*HubSync, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HubId == nil {
		return nil, errors.New("invalid value for required argument 'HubId'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HubSync
	err := ctx.RegisterResource("harness:chaos/hubSync:HubSync", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHubSync gets an existing HubSync resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHubSync(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HubSyncState, opts ...pulumi.ResourceOption) (*HubSync, error) {
	var resource HubSync
	err := ctx.ReadResource("harness:chaos/hubSync:HubSync", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HubSync resources.
type hubSyncState struct {
	// The ID of the Chaos Hub to sync
	HubId *string `pulumi:"hubId"`
	// Timestamp of the last sync
	LastSyncedAt *string `pulumi:"lastSyncedAt"`
	OrgId        *string `pulumi:"orgId"`
	ProjectId    *string `pulumi:"projectId"`
}

type HubSyncState struct {
	// The ID of the Chaos Hub to sync
	HubId pulumi.StringPtrInput
	// Timestamp of the last sync
	LastSyncedAt pulumi.StringPtrInput
	OrgId        pulumi.StringPtrInput
	ProjectId    pulumi.StringPtrInput
}

func (HubSyncState) ElementType() reflect.Type {
	return reflect.TypeOf((*hubSyncState)(nil)).Elem()
}

type hubSyncArgs struct {
	// The ID of the Chaos Hub to sync
	HubId     string `pulumi:"hubId"`
	OrgId     string `pulumi:"orgId"`
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a HubSync resource.
type HubSyncArgs struct {
	// The ID of the Chaos Hub to sync
	HubId     pulumi.StringInput
	OrgId     pulumi.StringInput
	ProjectId pulumi.StringInput
}

func (HubSyncArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hubSyncArgs)(nil)).Elem()
}

type HubSyncInput interface {
	pulumi.Input

	ToHubSyncOutput() HubSyncOutput
	ToHubSyncOutputWithContext(ctx context.Context) HubSyncOutput
}

func (*HubSync) ElementType() reflect.Type {
	return reflect.TypeOf((**HubSync)(nil)).Elem()
}

func (i *HubSync) ToHubSyncOutput() HubSyncOutput {
	return i.ToHubSyncOutputWithContext(context.Background())
}

func (i *HubSync) ToHubSyncOutputWithContext(ctx context.Context) HubSyncOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubSyncOutput)
}

// HubSyncArrayInput is an input type that accepts HubSyncArray and HubSyncArrayOutput values.
// You can construct a concrete instance of `HubSyncArrayInput` via:
//
//	HubSyncArray{ HubSyncArgs{...} }
type HubSyncArrayInput interface {
	pulumi.Input

	ToHubSyncArrayOutput() HubSyncArrayOutput
	ToHubSyncArrayOutputWithContext(context.Context) HubSyncArrayOutput
}

type HubSyncArray []HubSyncInput

func (HubSyncArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HubSync)(nil)).Elem()
}

func (i HubSyncArray) ToHubSyncArrayOutput() HubSyncArrayOutput {
	return i.ToHubSyncArrayOutputWithContext(context.Background())
}

func (i HubSyncArray) ToHubSyncArrayOutputWithContext(ctx context.Context) HubSyncArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubSyncArrayOutput)
}

// HubSyncMapInput is an input type that accepts HubSyncMap and HubSyncMapOutput values.
// You can construct a concrete instance of `HubSyncMapInput` via:
//
//	HubSyncMap{ "key": HubSyncArgs{...} }
type HubSyncMapInput interface {
	pulumi.Input

	ToHubSyncMapOutput() HubSyncMapOutput
	ToHubSyncMapOutputWithContext(context.Context) HubSyncMapOutput
}

type HubSyncMap map[string]HubSyncInput

func (HubSyncMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HubSync)(nil)).Elem()
}

func (i HubSyncMap) ToHubSyncMapOutput() HubSyncMapOutput {
	return i.ToHubSyncMapOutputWithContext(context.Background())
}

func (i HubSyncMap) ToHubSyncMapOutputWithContext(ctx context.Context) HubSyncMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubSyncMapOutput)
}

type HubSyncOutput struct{ *pulumi.OutputState }

func (HubSyncOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HubSync)(nil)).Elem()
}

func (o HubSyncOutput) ToHubSyncOutput() HubSyncOutput {
	return o
}

func (o HubSyncOutput) ToHubSyncOutputWithContext(ctx context.Context) HubSyncOutput {
	return o
}

// The ID of the Chaos Hub to sync
func (o HubSyncOutput) HubId() pulumi.StringOutput {
	return o.ApplyT(func(v *HubSync) pulumi.StringOutput { return v.HubId }).(pulumi.StringOutput)
}

// Timestamp of the last sync
func (o HubSyncOutput) LastSyncedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *HubSync) pulumi.StringOutput { return v.LastSyncedAt }).(pulumi.StringOutput)
}

func (o HubSyncOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *HubSync) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

func (o HubSyncOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *HubSync) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

type HubSyncArrayOutput struct{ *pulumi.OutputState }

func (HubSyncArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HubSync)(nil)).Elem()
}

func (o HubSyncArrayOutput) ToHubSyncArrayOutput() HubSyncArrayOutput {
	return o
}

func (o HubSyncArrayOutput) ToHubSyncArrayOutputWithContext(ctx context.Context) HubSyncArrayOutput {
	return o
}

func (o HubSyncArrayOutput) Index(i pulumi.IntInput) HubSyncOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HubSync {
		return vs[0].([]*HubSync)[vs[1].(int)]
	}).(HubSyncOutput)
}

type HubSyncMapOutput struct{ *pulumi.OutputState }

func (HubSyncMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HubSync)(nil)).Elem()
}

func (o HubSyncMapOutput) ToHubSyncMapOutput() HubSyncMapOutput {
	return o
}

func (o HubSyncMapOutput) ToHubSyncMapOutputWithContext(ctx context.Context) HubSyncMapOutput {
	return o
}

func (o HubSyncMapOutput) MapIndex(k pulumi.StringInput) HubSyncOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HubSync {
		return vs[0].(map[string]*HubSync)[vs[1].(string)]
	}).(HubSyncOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HubSyncInput)(nil)).Elem(), &HubSync{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubSyncArrayInput)(nil)).Elem(), HubSyncArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubSyncMapInput)(nil)).Elem(), HubSyncMap{})
	pulumi.RegisterOutputType(HubSyncOutput{})
	pulumi.RegisterOutputType(HubSyncArrayOutput{})
	pulumi.RegisterOutputType(HubSyncMapOutput{})
}
