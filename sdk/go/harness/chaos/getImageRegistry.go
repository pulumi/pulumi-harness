// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chaos

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness Chaos Image Registry and checking override status
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/chaos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Data source to verify the registry
//			_, err := chaos.LookupImageRegistry(ctx, &chaos.LookupImageRegistryArgs{
//				OrgId:     pulumi.StringRef("<org_id>"),
//				ProjectId: pulumi.StringRef("<project_id>"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Example of checking override status
//			_, err = chaos.LookupImageRegistry(ctx, &chaos.LookupImageRegistryArgs{
//				OrgId:         pulumi.StringRef("<org_id>"),
//				ProjectId:     pulumi.StringRef("<project_id>"),
//				CheckOverride: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupImageRegistry(ctx *pulumi.Context, args *LookupImageRegistryArgs, opts ...pulumi.InvokeOption) (*LookupImageRegistryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupImageRegistryResult
	err := ctx.Invoke("harness:chaos/getImageRegistry:getImageRegistry", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImageRegistry.
type LookupImageRegistryArgs struct {
	// Whether to check if override is allowed
	CheckOverride *bool `pulumi:"checkOverride"`
	// The infrastructure ID to set up the image registry
	InfraId *string `pulumi:"infraId"`
	// The organization ID of the image registry
	OrgId *string `pulumi:"orgId"`
	// The project ID of the image registry
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getImageRegistry.
type LookupImageRegistryResult struct {
	// Whether to check if override is allowed
	CheckOverride *bool `pulumi:"checkOverride"`
	// Creation timestamp
	CreatedAt string `pulumi:"createdAt"`
	// Custom images configuration
	CustomImages []GetImageRegistryCustomImage `pulumi:"customImages"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The infrastructure ID to set up the image registry
	InfraId *string `pulumi:"infraId"`
	// Whether this is the default registry
	IsDefault bool `pulumi:"isDefault"`
	// Whether override is allowed for this registry
	IsOverrideAllowed bool `pulumi:"isOverrideAllowed"`
	// Whether the registry is private
	IsPrivate bool `pulumi:"isPrivate"`
	// The organization ID of the image registry
	OrgId *string `pulumi:"orgId"`
	// Indicates if override is blocked by scope (only populated if checkOverride is true)
	OverrideBlockedByScope string `pulumi:"overrideBlockedByScope"`
	// The project ID of the image registry
	ProjectId *string `pulumi:"projectId"`
	// The registry account name
	RegistryAccount string `pulumi:"registryAccount"`
	// The registry server URL
	RegistryServer string `pulumi:"registryServer"`
	// The name of the secret for authentication
	SecretName string `pulumi:"secretName"`
	// Last update timestamp
	UpdatedAt string `pulumi:"updatedAt"`
	// Whether custom images are used
	UseCustomImages bool `pulumi:"useCustomImages"`
}

func LookupImageRegistryOutput(ctx *pulumi.Context, args LookupImageRegistryOutputArgs, opts ...pulumi.InvokeOption) LookupImageRegistryResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupImageRegistryResultOutput, error) {
			args := v.(LookupImageRegistryArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:chaos/getImageRegistry:getImageRegistry", args, LookupImageRegistryResultOutput{}, options).(LookupImageRegistryResultOutput), nil
		}).(LookupImageRegistryResultOutput)
}

// A collection of arguments for invoking getImageRegistry.
type LookupImageRegistryOutputArgs struct {
	// Whether to check if override is allowed
	CheckOverride pulumi.BoolPtrInput `pulumi:"checkOverride"`
	// The infrastructure ID to set up the image registry
	InfraId pulumi.StringPtrInput `pulumi:"infraId"`
	// The organization ID of the image registry
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// The project ID of the image registry
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupImageRegistryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImageRegistryArgs)(nil)).Elem()
}

// A collection of values returned by getImageRegistry.
type LookupImageRegistryResultOutput struct{ *pulumi.OutputState }

func (LookupImageRegistryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImageRegistryResult)(nil)).Elem()
}

func (o LookupImageRegistryResultOutput) ToLookupImageRegistryResultOutput() LookupImageRegistryResultOutput {
	return o
}

func (o LookupImageRegistryResultOutput) ToLookupImageRegistryResultOutputWithContext(ctx context.Context) LookupImageRegistryResultOutput {
	return o
}

// Whether to check if override is allowed
func (o LookupImageRegistryResultOutput) CheckOverride() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupImageRegistryResult) *bool { return v.CheckOverride }).(pulumi.BoolPtrOutput)
}

// Creation timestamp
func (o LookupImageRegistryResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageRegistryResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Custom images configuration
func (o LookupImageRegistryResultOutput) CustomImages() GetImageRegistryCustomImageArrayOutput {
	return o.ApplyT(func(v LookupImageRegistryResult) []GetImageRegistryCustomImage { return v.CustomImages }).(GetImageRegistryCustomImageArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupImageRegistryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageRegistryResult) string { return v.Id }).(pulumi.StringOutput)
}

// The infrastructure ID to set up the image registry
func (o LookupImageRegistryResultOutput) InfraId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageRegistryResult) *string { return v.InfraId }).(pulumi.StringPtrOutput)
}

// Whether this is the default registry
func (o LookupImageRegistryResultOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupImageRegistryResult) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// Whether override is allowed for this registry
func (o LookupImageRegistryResultOutput) IsOverrideAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupImageRegistryResult) bool { return v.IsOverrideAllowed }).(pulumi.BoolOutput)
}

// Whether the registry is private
func (o LookupImageRegistryResultOutput) IsPrivate() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupImageRegistryResult) bool { return v.IsPrivate }).(pulumi.BoolOutput)
}

// The organization ID of the image registry
func (o LookupImageRegistryResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageRegistryResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Indicates if override is blocked by scope (only populated if checkOverride is true)
func (o LookupImageRegistryResultOutput) OverrideBlockedByScope() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageRegistryResult) string { return v.OverrideBlockedByScope }).(pulumi.StringOutput)
}

// The project ID of the image registry
func (o LookupImageRegistryResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageRegistryResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The registry account name
func (o LookupImageRegistryResultOutput) RegistryAccount() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageRegistryResult) string { return v.RegistryAccount }).(pulumi.StringOutput)
}

// The registry server URL
func (o LookupImageRegistryResultOutput) RegistryServer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageRegistryResult) string { return v.RegistryServer }).(pulumi.StringOutput)
}

// The name of the secret for authentication
func (o LookupImageRegistryResultOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageRegistryResult) string { return v.SecretName }).(pulumi.StringOutput)
}

// Last update timestamp
func (o LookupImageRegistryResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageRegistryResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Whether custom images are used
func (o LookupImageRegistryResultOutput) UseCustomImages() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupImageRegistryResult) bool { return v.UseCustomImages }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupImageRegistryResultOutput{})
}
