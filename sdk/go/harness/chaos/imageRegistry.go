// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chaos

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing a Harness Chaos Image Registry
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/chaos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := chaos.NewImageRegistry(ctx, "example", &chaos.ImageRegistryArgs{
//				OrgId:             pulumi.String("<org_id>"),
//				ProjectId:         pulumi.String("<project_id>"),
//				RegistryServer:    pulumi.String("<registry_server>"),
//				RegistryAccount:   pulumi.String("<registry_account>"),
//				IsPrivate:         pulumi.Bool(true),
//				SecretName:        pulumi.String("<secret_name>"),
//				IsDefault:         pulumi.Bool(false),
//				IsOverrideAllowed: pulumi.Bool(true),
//				UseCustomImages:   pulumi.Bool(true),
//				CustomImages: chaos.ImageRegistryCustomImageArray{
//					&chaos.ImageRegistryCustomImageArgs{
//						LogWatcher: pulumi.String("<log_watcher_image>"),
//						Ddcr:       pulumi.String("<ddcr_image>"),
//						DdcrLib:    pulumi.String("<ddcr_lib_image>"),
//						DdcrFault:  pulumi.String("<ddcr_fault_image>"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ImageRegistry struct {
	pulumi.CustomResourceState

	// Creation timestamp
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Custom images configuration
	CustomImages ImageRegistryCustomImageArrayOutput `pulumi:"customImages"`
	// The infrastructure ID to set up the image registry
	InfraId pulumi.StringPtrOutput `pulumi:"infraId"`
	// Whether this is the default registry
	IsDefault pulumi.BoolPtrOutput `pulumi:"isDefault"`
	// Whether override is allowed for this registry
	IsOverrideAllowed pulumi.BoolPtrOutput `pulumi:"isOverrideAllowed"`
	// Whether the registry is private
	IsPrivate pulumi.BoolOutput `pulumi:"isPrivate"`
	// The organization ID of the image registry
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// The project ID of the image registry
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// The registry account name
	RegistryAccount pulumi.StringOutput `pulumi:"registryAccount"`
	// The registry server URL
	RegistryServer pulumi.StringOutput `pulumi:"registryServer"`
	// The name of the secret for authentication
	SecretName pulumi.StringPtrOutput `pulumi:"secretName"`
	// Last update timestamp
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Whether to use custom images
	UseCustomImages pulumi.BoolPtrOutput `pulumi:"useCustomImages"`
}

// NewImageRegistry registers a new resource with the given unique name, arguments, and options.
func NewImageRegistry(ctx *pulumi.Context,
	name string, args *ImageRegistryArgs, opts ...pulumi.ResourceOption) (*ImageRegistry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IsPrivate == nil {
		return nil, errors.New("invalid value for required argument 'IsPrivate'")
	}
	if args.RegistryAccount == nil {
		return nil, errors.New("invalid value for required argument 'RegistryAccount'")
	}
	if args.RegistryServer == nil {
		return nil, errors.New("invalid value for required argument 'RegistryServer'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ImageRegistry
	err := ctx.RegisterResource("harness:chaos/imageRegistry:ImageRegistry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageRegistry gets an existing ImageRegistry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageRegistry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageRegistryState, opts ...pulumi.ResourceOption) (*ImageRegistry, error) {
	var resource ImageRegistry
	err := ctx.ReadResource("harness:chaos/imageRegistry:ImageRegistry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageRegistry resources.
type imageRegistryState struct {
	// Creation timestamp
	CreatedAt *string `pulumi:"createdAt"`
	// Custom images configuration
	CustomImages []ImageRegistryCustomImage `pulumi:"customImages"`
	// The infrastructure ID to set up the image registry
	InfraId *string `pulumi:"infraId"`
	// Whether this is the default registry
	IsDefault *bool `pulumi:"isDefault"`
	// Whether override is allowed for this registry
	IsOverrideAllowed *bool `pulumi:"isOverrideAllowed"`
	// Whether the registry is private
	IsPrivate *bool `pulumi:"isPrivate"`
	// The organization ID of the image registry
	OrgId *string `pulumi:"orgId"`
	// The project ID of the image registry
	ProjectId *string `pulumi:"projectId"`
	// The registry account name
	RegistryAccount *string `pulumi:"registryAccount"`
	// The registry server URL
	RegistryServer *string `pulumi:"registryServer"`
	// The name of the secret for authentication
	SecretName *string `pulumi:"secretName"`
	// Last update timestamp
	UpdatedAt *string `pulumi:"updatedAt"`
	// Whether to use custom images
	UseCustomImages *bool `pulumi:"useCustomImages"`
}

type ImageRegistryState struct {
	// Creation timestamp
	CreatedAt pulumi.StringPtrInput
	// Custom images configuration
	CustomImages ImageRegistryCustomImageArrayInput
	// The infrastructure ID to set up the image registry
	InfraId pulumi.StringPtrInput
	// Whether this is the default registry
	IsDefault pulumi.BoolPtrInput
	// Whether override is allowed for this registry
	IsOverrideAllowed pulumi.BoolPtrInput
	// Whether the registry is private
	IsPrivate pulumi.BoolPtrInput
	// The organization ID of the image registry
	OrgId pulumi.StringPtrInput
	// The project ID of the image registry
	ProjectId pulumi.StringPtrInput
	// The registry account name
	RegistryAccount pulumi.StringPtrInput
	// The registry server URL
	RegistryServer pulumi.StringPtrInput
	// The name of the secret for authentication
	SecretName pulumi.StringPtrInput
	// Last update timestamp
	UpdatedAt pulumi.StringPtrInput
	// Whether to use custom images
	UseCustomImages pulumi.BoolPtrInput
}

func (ImageRegistryState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageRegistryState)(nil)).Elem()
}

type imageRegistryArgs struct {
	// Custom images configuration
	CustomImages []ImageRegistryCustomImage `pulumi:"customImages"`
	// The infrastructure ID to set up the image registry
	InfraId *string `pulumi:"infraId"`
	// Whether this is the default registry
	IsDefault *bool `pulumi:"isDefault"`
	// Whether override is allowed for this registry
	IsOverrideAllowed *bool `pulumi:"isOverrideAllowed"`
	// Whether the registry is private
	IsPrivate bool `pulumi:"isPrivate"`
	// The organization ID of the image registry
	OrgId *string `pulumi:"orgId"`
	// The project ID of the image registry
	ProjectId *string `pulumi:"projectId"`
	// The registry account name
	RegistryAccount string `pulumi:"registryAccount"`
	// The registry server URL
	RegistryServer string `pulumi:"registryServer"`
	// The name of the secret for authentication
	SecretName *string `pulumi:"secretName"`
	// Whether to use custom images
	UseCustomImages *bool `pulumi:"useCustomImages"`
}

// The set of arguments for constructing a ImageRegistry resource.
type ImageRegistryArgs struct {
	// Custom images configuration
	CustomImages ImageRegistryCustomImageArrayInput
	// The infrastructure ID to set up the image registry
	InfraId pulumi.StringPtrInput
	// Whether this is the default registry
	IsDefault pulumi.BoolPtrInput
	// Whether override is allowed for this registry
	IsOverrideAllowed pulumi.BoolPtrInput
	// Whether the registry is private
	IsPrivate pulumi.BoolInput
	// The organization ID of the image registry
	OrgId pulumi.StringPtrInput
	// The project ID of the image registry
	ProjectId pulumi.StringPtrInput
	// The registry account name
	RegistryAccount pulumi.StringInput
	// The registry server URL
	RegistryServer pulumi.StringInput
	// The name of the secret for authentication
	SecretName pulumi.StringPtrInput
	// Whether to use custom images
	UseCustomImages pulumi.BoolPtrInput
}

func (ImageRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageRegistryArgs)(nil)).Elem()
}

type ImageRegistryInput interface {
	pulumi.Input

	ToImageRegistryOutput() ImageRegistryOutput
	ToImageRegistryOutputWithContext(ctx context.Context) ImageRegistryOutput
}

func (*ImageRegistry) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRegistry)(nil)).Elem()
}

func (i *ImageRegistry) ToImageRegistryOutput() ImageRegistryOutput {
	return i.ToImageRegistryOutputWithContext(context.Background())
}

func (i *ImageRegistry) ToImageRegistryOutputWithContext(ctx context.Context) ImageRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryOutput)
}

// ImageRegistryArrayInput is an input type that accepts ImageRegistryArray and ImageRegistryArrayOutput values.
// You can construct a concrete instance of `ImageRegistryArrayInput` via:
//
//	ImageRegistryArray{ ImageRegistryArgs{...} }
type ImageRegistryArrayInput interface {
	pulumi.Input

	ToImageRegistryArrayOutput() ImageRegistryArrayOutput
	ToImageRegistryArrayOutputWithContext(context.Context) ImageRegistryArrayOutput
}

type ImageRegistryArray []ImageRegistryInput

func (ImageRegistryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageRegistry)(nil)).Elem()
}

func (i ImageRegistryArray) ToImageRegistryArrayOutput() ImageRegistryArrayOutput {
	return i.ToImageRegistryArrayOutputWithContext(context.Background())
}

func (i ImageRegistryArray) ToImageRegistryArrayOutputWithContext(ctx context.Context) ImageRegistryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryArrayOutput)
}

// ImageRegistryMapInput is an input type that accepts ImageRegistryMap and ImageRegistryMapOutput values.
// You can construct a concrete instance of `ImageRegistryMapInput` via:
//
//	ImageRegistryMap{ "key": ImageRegistryArgs{...} }
type ImageRegistryMapInput interface {
	pulumi.Input

	ToImageRegistryMapOutput() ImageRegistryMapOutput
	ToImageRegistryMapOutputWithContext(context.Context) ImageRegistryMapOutput
}

type ImageRegistryMap map[string]ImageRegistryInput

func (ImageRegistryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageRegistry)(nil)).Elem()
}

func (i ImageRegistryMap) ToImageRegistryMapOutput() ImageRegistryMapOutput {
	return i.ToImageRegistryMapOutputWithContext(context.Background())
}

func (i ImageRegistryMap) ToImageRegistryMapOutputWithContext(ctx context.Context) ImageRegistryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryMapOutput)
}

type ImageRegistryOutput struct{ *pulumi.OutputState }

func (ImageRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRegistry)(nil)).Elem()
}

func (o ImageRegistryOutput) ToImageRegistryOutput() ImageRegistryOutput {
	return o
}

func (o ImageRegistryOutput) ToImageRegistryOutputWithContext(ctx context.Context) ImageRegistryOutput {
	return o
}

// Creation timestamp
func (o ImageRegistryOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Custom images configuration
func (o ImageRegistryOutput) CustomImages() ImageRegistryCustomImageArrayOutput {
	return o.ApplyT(func(v *ImageRegistry) ImageRegistryCustomImageArrayOutput { return v.CustomImages }).(ImageRegistryCustomImageArrayOutput)
}

// The infrastructure ID to set up the image registry
func (o ImageRegistryOutput) InfraId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.StringPtrOutput { return v.InfraId }).(pulumi.StringPtrOutput)
}

// Whether this is the default registry
func (o ImageRegistryOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.BoolPtrOutput { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// Whether override is allowed for this registry
func (o ImageRegistryOutput) IsOverrideAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.BoolPtrOutput { return v.IsOverrideAllowed }).(pulumi.BoolPtrOutput)
}

// Whether the registry is private
func (o ImageRegistryOutput) IsPrivate() pulumi.BoolOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.BoolOutput { return v.IsPrivate }).(pulumi.BoolOutput)
}

// The organization ID of the image registry
func (o ImageRegistryOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// The project ID of the image registry
func (o ImageRegistryOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The registry account name
func (o ImageRegistryOutput) RegistryAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.StringOutput { return v.RegistryAccount }).(pulumi.StringOutput)
}

// The registry server URL
func (o ImageRegistryOutput) RegistryServer() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.StringOutput { return v.RegistryServer }).(pulumi.StringOutput)
}

// The name of the secret for authentication
func (o ImageRegistryOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.StringPtrOutput { return v.SecretName }).(pulumi.StringPtrOutput)
}

// Last update timestamp
func (o ImageRegistryOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Whether to use custom images
func (o ImageRegistryOutput) UseCustomImages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.BoolPtrOutput { return v.UseCustomImages }).(pulumi.BoolPtrOutput)
}

type ImageRegistryArrayOutput struct{ *pulumi.OutputState }

func (ImageRegistryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageRegistry)(nil)).Elem()
}

func (o ImageRegistryArrayOutput) ToImageRegistryArrayOutput() ImageRegistryArrayOutput {
	return o
}

func (o ImageRegistryArrayOutput) ToImageRegistryArrayOutputWithContext(ctx context.Context) ImageRegistryArrayOutput {
	return o
}

func (o ImageRegistryArrayOutput) Index(i pulumi.IntInput) ImageRegistryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageRegistry {
		return vs[0].([]*ImageRegistry)[vs[1].(int)]
	}).(ImageRegistryOutput)
}

type ImageRegistryMapOutput struct{ *pulumi.OutputState }

func (ImageRegistryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageRegistry)(nil)).Elem()
}

func (o ImageRegistryMapOutput) ToImageRegistryMapOutput() ImageRegistryMapOutput {
	return o
}

func (o ImageRegistryMapOutput) ToImageRegistryMapOutputWithContext(ctx context.Context) ImageRegistryMapOutput {
	return o
}

func (o ImageRegistryMapOutput) MapIndex(k pulumi.StringInput) ImageRegistryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageRegistry {
		return vs[0].(map[string]*ImageRegistry)[vs[1].(string)]
	}).(ImageRegistryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRegistryInput)(nil)).Elem(), &ImageRegistry{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRegistryArrayInput)(nil)).Elem(), ImageRegistryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRegistryMapInput)(nil)).Elem(), ImageRegistryMap{})
	pulumi.RegisterOutputType(ImageRegistryOutput{})
	pulumi.RegisterOutputType(ImageRegistryArrayOutput{})
	pulumi.RegisterOutputType(ImageRegistryMapOutput{})
}
