// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chaos

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "harness:chaos/hub:Hub":
		r = &Hub{}
	case "harness:chaos/hubSync:HubSync":
		r = &HubSync{}
	case "harness:chaos/imageRegistry:ImageRegistry":
		r = &ImageRegistry{}
	case "harness:chaos/infrastructureV2:InfrastructureV2":
		r = &InfrastructureV2{}
	case "harness:chaos/securityGovernanceCondition:SecurityGovernanceCondition":
		r = &SecurityGovernanceCondition{}
	case "harness:chaos/securityGovernanceRule:SecurityGovernanceRule":
		r = &SecurityGovernanceRule{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"harness",
		"chaos/hub",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"chaos/hubSync",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"chaos/imageRegistry",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"chaos/infrastructureV2",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"chaos/securityGovernanceCondition",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"chaos/securityGovernanceRule",
		&module{version},
	)
}
