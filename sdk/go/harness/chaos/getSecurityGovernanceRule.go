// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chaos

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness Chaos Security Governance Rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/chaos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Data sources to verify the rules
//			_, err := chaos.LookupSecurityGovernanceRule(ctx, &chaos.LookupSecurityGovernanceRuleArgs{
//				Id:        pulumi.StringRef("<rule_id>"),
//				OrgId:     "<org_id>",
//				ProjectId: "<project_id>",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = chaos.LookupSecurityGovernanceRule(ctx, &chaos.LookupSecurityGovernanceRuleArgs{
//				Id:        pulumi.StringRef("<rule_id>"),
//				OrgId:     "<org_id>",
//				ProjectId: "<project_id>",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = chaos.LookupSecurityGovernanceRule(ctx, &chaos.LookupSecurityGovernanceRuleArgs{
//				Id:        pulumi.StringRef("<rule_id>"),
//				OrgId:     "<org_id>",
//				ProjectId: "<project_id>",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSecurityGovernanceRule(ctx *pulumi.Context, args *LookupSecurityGovernanceRuleArgs, opts ...pulumi.InvokeOption) (*LookupSecurityGovernanceRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSecurityGovernanceRuleResult
	err := ctx.Invoke("harness:chaos/getSecurityGovernanceRule:getSecurityGovernanceRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecurityGovernanceRule.
type LookupSecurityGovernanceRuleArgs struct {
	// The ID of the rule.
	Id *string `pulumi:"id"`
	// The name of the rule.
	Name *string `pulumi:"name"`
	// The organization identifier.
	OrgId string `pulumi:"orgId"`
	// The project identifier.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getSecurityGovernanceRule.
type LookupSecurityGovernanceRuleResult struct {
	// List of condition IDs associated with the rule.
	ConditionIds []string `pulumi:"conditionIds"`
	// The description of the rule.
	Description string `pulumi:"description"`
	// The ID of the rule.
	Id *string `pulumi:"id"`
	// Whether the rule is enabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// The name of the rule.
	Name *string `pulumi:"name"`
	// The organization identifier.
	OrgId string `pulumi:"orgId"`
	// The project identifier.
	ProjectId string `pulumi:"projectId"`
	// Tags associated with the rule.
	Tags []string `pulumi:"tags"`
	// Time windows when the rule is active.
	TimeWindows []GetSecurityGovernanceRuleTimeWindow `pulumi:"timeWindows"`
	// List of user group IDs associated with the rule.
	UserGroupIds []string `pulumi:"userGroupIds"`
}

func LookupSecurityGovernanceRuleOutput(ctx *pulumi.Context, args LookupSecurityGovernanceRuleOutputArgs, opts ...pulumi.InvokeOption) LookupSecurityGovernanceRuleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSecurityGovernanceRuleResultOutput, error) {
			args := v.(LookupSecurityGovernanceRuleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:chaos/getSecurityGovernanceRule:getSecurityGovernanceRule", args, LookupSecurityGovernanceRuleResultOutput{}, options).(LookupSecurityGovernanceRuleResultOutput), nil
		}).(LookupSecurityGovernanceRuleResultOutput)
}

// A collection of arguments for invoking getSecurityGovernanceRule.
type LookupSecurityGovernanceRuleOutputArgs struct {
	// The ID of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The organization identifier.
	OrgId pulumi.StringInput `pulumi:"orgId"`
	// The project identifier.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupSecurityGovernanceRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecurityGovernanceRuleArgs)(nil)).Elem()
}

// A collection of values returned by getSecurityGovernanceRule.
type LookupSecurityGovernanceRuleResultOutput struct{ *pulumi.OutputState }

func (LookupSecurityGovernanceRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecurityGovernanceRuleResult)(nil)).Elem()
}

func (o LookupSecurityGovernanceRuleResultOutput) ToLookupSecurityGovernanceRuleResultOutput() LookupSecurityGovernanceRuleResultOutput {
	return o
}

func (o LookupSecurityGovernanceRuleResultOutput) ToLookupSecurityGovernanceRuleResultOutputWithContext(ctx context.Context) LookupSecurityGovernanceRuleResultOutput {
	return o
}

// List of condition IDs associated with the rule.
func (o LookupSecurityGovernanceRuleResultOutput) ConditionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSecurityGovernanceRuleResult) []string { return v.ConditionIds }).(pulumi.StringArrayOutput)
}

// The description of the rule.
func (o LookupSecurityGovernanceRuleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityGovernanceRuleResult) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the rule.
func (o LookupSecurityGovernanceRuleResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecurityGovernanceRuleResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Whether the rule is enabled.
func (o LookupSecurityGovernanceRuleResultOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSecurityGovernanceRuleResult) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The name of the rule.
func (o LookupSecurityGovernanceRuleResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecurityGovernanceRuleResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The organization identifier.
func (o LookupSecurityGovernanceRuleResultOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityGovernanceRuleResult) string { return v.OrgId }).(pulumi.StringOutput)
}

// The project identifier.
func (o LookupSecurityGovernanceRuleResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityGovernanceRuleResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Tags associated with the rule.
func (o LookupSecurityGovernanceRuleResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSecurityGovernanceRuleResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Time windows when the rule is active.
func (o LookupSecurityGovernanceRuleResultOutput) TimeWindows() GetSecurityGovernanceRuleTimeWindowArrayOutput {
	return o.ApplyT(func(v LookupSecurityGovernanceRuleResult) []GetSecurityGovernanceRuleTimeWindow { return v.TimeWindows }).(GetSecurityGovernanceRuleTimeWindowArrayOutput)
}

// List of user group IDs associated with the rule.
func (o LookupSecurityGovernanceRuleResultOutput) UserGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSecurityGovernanceRuleResult) []string { return v.UserGroupIds }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSecurityGovernanceRuleResultOutput{})
}
