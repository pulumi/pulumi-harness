// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chaos

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing a Harness Chaos Security Governance Rule
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/chaos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// K8s Rule
//			_, err := chaos.NewSecurityGovernanceRule(ctx, "example", &chaos.SecurityGovernanceRuleArgs{
//				OrgId:       pulumi.String("<org_id>"),
//				ProjectId:   pulumi.String("<project_id>"),
//				Name:        pulumi.String("<name>"),
//				Description: pulumi.String("<description>"),
//				IsEnabled:   pulumi.Bool(true),
//				ConditionIds: pulumi.StringArray{
//					pulumi.String("<condition_id>"),
//				},
//				UserGroupIds: pulumi.StringArray{
//					pulumi.String("_project_all_users"),
//				},
//				Tags: pulumi.StringArray{
//					pulumi.String("<tag1>"),
//					pulumi.String("<tag2>"),
//				},
//				TimeWindows: chaos.SecurityGovernanceRuleTimeWindowArray{
//					&chaos.SecurityGovernanceRuleTimeWindowArgs{
//						TimeZone:  pulumi.String("UTC"),
//						StartTime: pulumi.Int(1711238400000),
//						Duration:  pulumi.String("24h"),
//						Recurrence: &chaos.SecurityGovernanceRuleTimeWindowRecurrenceArgs{
//							Type:  pulumi.String("Daily"),
//							Until: pulumi.Int(-1),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Linux Rule
//			_, err = chaos.NewSecurityGovernanceRule(ctx, "linux_rule", &chaos.SecurityGovernanceRuleArgs{
//				OrgId:       pulumi.String("<org_id>"),
//				ProjectId:   pulumi.String("<project_id>"),
//				Name:        pulumi.String("<name>"),
//				Description: pulumi.String("<description>"),
//				IsEnabled:   pulumi.Bool(true),
//				ConditionIds: pulumi.StringArray{
//					pulumi.String("<condition_id>"),
//				},
//				UserGroupIds: pulumi.StringArray{
//					pulumi.String("_project_all_users"),
//				},
//				Tags: pulumi.StringArray{
//					pulumi.String("<tag1>"),
//					pulumi.String("<tag2>"),
//				},
//				TimeWindows: chaos.SecurityGovernanceRuleTimeWindowArray{
//					&chaos.SecurityGovernanceRuleTimeWindowArgs{
//						TimeZone:  pulumi.String("UTC"),
//						StartTime: pulumi.Int(1711238400000),
//						Duration:  pulumi.String("24h"),
//						Recurrence: &chaos.SecurityGovernanceRuleTimeWindowRecurrenceArgs{
//							Type:  pulumi.String("Daily"),
//							Until: pulumi.Int(-1),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Windows Rule
//			_, err = chaos.NewSecurityGovernanceRule(ctx, "windows_rule", &chaos.SecurityGovernanceRuleArgs{
//				OrgId:       pulumi.String("<org_id>"),
//				ProjectId:   pulumi.String("<project_id>"),
//				Name:        pulumi.String("<name>"),
//				Description: pulumi.String("<description>"),
//				IsEnabled:   pulumi.Bool(true),
//				ConditionIds: pulumi.StringArray{
//					pulumi.String("<condition_id>"),
//				},
//				UserGroupIds: pulumi.StringArray{
//					pulumi.String("_project_all_users"),
//				},
//				Tags: pulumi.StringArray{
//					pulumi.String("<tag1>"),
//					pulumi.String("<tag2>"),
//				},
//				TimeWindows: chaos.SecurityGovernanceRuleTimeWindowArray{
//					&chaos.SecurityGovernanceRuleTimeWindowArgs{
//						TimeZone:  pulumi.String("UTC"),
//						StartTime: pulumi.Int(1711238400000),
//						Duration:  pulumi.String("24h"),
//						Recurrence: &chaos.SecurityGovernanceRuleTimeWindowRecurrenceArgs{
//							Type:  pulumi.String("Daily"),
//							Until: pulumi.Int(-1),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import Project level Chaos Security Governance Rule
//
// ```sh
// $ pulumi import harness:chaos/securityGovernanceRule:SecurityGovernanceRule example org_id/project_id/rule_id
// ```
type SecurityGovernanceRule struct {
	pulumi.CustomResourceState

	// List of condition IDs associated with this rule
	ConditionIds pulumi.StringArrayOutput `pulumi:"conditionIds"`
	// Description of the security governance rule
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the rule is enabled
	IsEnabled pulumi.BoolPtrOutput `pulumi:"isEnabled"`
	// Name of the security governance rule
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization ID of the security governance rule
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// The project ID of the security governance rule
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Tags for the security governance rule
	Tags        pulumi.StringArrayOutput                    `pulumi:"tags"`
	TimeWindows SecurityGovernanceRuleTimeWindowArrayOutput `pulumi:"timeWindows"`
	// List of user group IDs associated with this rule
	UserGroupIds pulumi.StringArrayOutput `pulumi:"userGroupIds"`
}

// NewSecurityGovernanceRule registers a new resource with the given unique name, arguments, and options.
func NewSecurityGovernanceRule(ctx *pulumi.Context,
	name string, args *SecurityGovernanceRuleArgs, opts ...pulumi.ResourceOption) (*SecurityGovernanceRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConditionIds == nil {
		return nil, errors.New("invalid value for required argument 'ConditionIds'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.TimeWindows == nil {
		return nil, errors.New("invalid value for required argument 'TimeWindows'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityGovernanceRule
	err := ctx.RegisterResource("harness:chaos/securityGovernanceRule:SecurityGovernanceRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGovernanceRule gets an existing SecurityGovernanceRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGovernanceRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityGovernanceRuleState, opts ...pulumi.ResourceOption) (*SecurityGovernanceRule, error) {
	var resource SecurityGovernanceRule
	err := ctx.ReadResource("harness:chaos/securityGovernanceRule:SecurityGovernanceRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityGovernanceRule resources.
type securityGovernanceRuleState struct {
	// List of condition IDs associated with this rule
	ConditionIds []string `pulumi:"conditionIds"`
	// Description of the security governance rule
	Description *string `pulumi:"description"`
	// Whether the rule is enabled
	IsEnabled *bool `pulumi:"isEnabled"`
	// Name of the security governance rule
	Name *string `pulumi:"name"`
	// The organization ID of the security governance rule
	OrgId *string `pulumi:"orgId"`
	// The project ID of the security governance rule
	ProjectId *string `pulumi:"projectId"`
	// Tags for the security governance rule
	Tags        []string                           `pulumi:"tags"`
	TimeWindows []SecurityGovernanceRuleTimeWindow `pulumi:"timeWindows"`
	// List of user group IDs associated with this rule
	UserGroupIds []string `pulumi:"userGroupIds"`
}

type SecurityGovernanceRuleState struct {
	// List of condition IDs associated with this rule
	ConditionIds pulumi.StringArrayInput
	// Description of the security governance rule
	Description pulumi.StringPtrInput
	// Whether the rule is enabled
	IsEnabled pulumi.BoolPtrInput
	// Name of the security governance rule
	Name pulumi.StringPtrInput
	// The organization ID of the security governance rule
	OrgId pulumi.StringPtrInput
	// The project ID of the security governance rule
	ProjectId pulumi.StringPtrInput
	// Tags for the security governance rule
	Tags        pulumi.StringArrayInput
	TimeWindows SecurityGovernanceRuleTimeWindowArrayInput
	// List of user group IDs associated with this rule
	UserGroupIds pulumi.StringArrayInput
}

func (SecurityGovernanceRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGovernanceRuleState)(nil)).Elem()
}

type securityGovernanceRuleArgs struct {
	// List of condition IDs associated with this rule
	ConditionIds []string `pulumi:"conditionIds"`
	// Description of the security governance rule
	Description *string `pulumi:"description"`
	// Whether the rule is enabled
	IsEnabled *bool `pulumi:"isEnabled"`
	// Name of the security governance rule
	Name *string `pulumi:"name"`
	// The organization ID of the security governance rule
	OrgId string `pulumi:"orgId"`
	// The project ID of the security governance rule
	ProjectId string `pulumi:"projectId"`
	// Tags for the security governance rule
	Tags        []string                           `pulumi:"tags"`
	TimeWindows []SecurityGovernanceRuleTimeWindow `pulumi:"timeWindows"`
	// List of user group IDs associated with this rule
	UserGroupIds []string `pulumi:"userGroupIds"`
}

// The set of arguments for constructing a SecurityGovernanceRule resource.
type SecurityGovernanceRuleArgs struct {
	// List of condition IDs associated with this rule
	ConditionIds pulumi.StringArrayInput
	// Description of the security governance rule
	Description pulumi.StringPtrInput
	// Whether the rule is enabled
	IsEnabled pulumi.BoolPtrInput
	// Name of the security governance rule
	Name pulumi.StringPtrInput
	// The organization ID of the security governance rule
	OrgId pulumi.StringInput
	// The project ID of the security governance rule
	ProjectId pulumi.StringInput
	// Tags for the security governance rule
	Tags        pulumi.StringArrayInput
	TimeWindows SecurityGovernanceRuleTimeWindowArrayInput
	// List of user group IDs associated with this rule
	UserGroupIds pulumi.StringArrayInput
}

func (SecurityGovernanceRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGovernanceRuleArgs)(nil)).Elem()
}

type SecurityGovernanceRuleInput interface {
	pulumi.Input

	ToSecurityGovernanceRuleOutput() SecurityGovernanceRuleOutput
	ToSecurityGovernanceRuleOutputWithContext(ctx context.Context) SecurityGovernanceRuleOutput
}

func (*SecurityGovernanceRule) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGovernanceRule)(nil)).Elem()
}

func (i *SecurityGovernanceRule) ToSecurityGovernanceRuleOutput() SecurityGovernanceRuleOutput {
	return i.ToSecurityGovernanceRuleOutputWithContext(context.Background())
}

func (i *SecurityGovernanceRule) ToSecurityGovernanceRuleOutputWithContext(ctx context.Context) SecurityGovernanceRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGovernanceRuleOutput)
}

// SecurityGovernanceRuleArrayInput is an input type that accepts SecurityGovernanceRuleArray and SecurityGovernanceRuleArrayOutput values.
// You can construct a concrete instance of `SecurityGovernanceRuleArrayInput` via:
//
//	SecurityGovernanceRuleArray{ SecurityGovernanceRuleArgs{...} }
type SecurityGovernanceRuleArrayInput interface {
	pulumi.Input

	ToSecurityGovernanceRuleArrayOutput() SecurityGovernanceRuleArrayOutput
	ToSecurityGovernanceRuleArrayOutputWithContext(context.Context) SecurityGovernanceRuleArrayOutput
}

type SecurityGovernanceRuleArray []SecurityGovernanceRuleInput

func (SecurityGovernanceRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGovernanceRule)(nil)).Elem()
}

func (i SecurityGovernanceRuleArray) ToSecurityGovernanceRuleArrayOutput() SecurityGovernanceRuleArrayOutput {
	return i.ToSecurityGovernanceRuleArrayOutputWithContext(context.Background())
}

func (i SecurityGovernanceRuleArray) ToSecurityGovernanceRuleArrayOutputWithContext(ctx context.Context) SecurityGovernanceRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGovernanceRuleArrayOutput)
}

// SecurityGovernanceRuleMapInput is an input type that accepts SecurityGovernanceRuleMap and SecurityGovernanceRuleMapOutput values.
// You can construct a concrete instance of `SecurityGovernanceRuleMapInput` via:
//
//	SecurityGovernanceRuleMap{ "key": SecurityGovernanceRuleArgs{...} }
type SecurityGovernanceRuleMapInput interface {
	pulumi.Input

	ToSecurityGovernanceRuleMapOutput() SecurityGovernanceRuleMapOutput
	ToSecurityGovernanceRuleMapOutputWithContext(context.Context) SecurityGovernanceRuleMapOutput
}

type SecurityGovernanceRuleMap map[string]SecurityGovernanceRuleInput

func (SecurityGovernanceRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGovernanceRule)(nil)).Elem()
}

func (i SecurityGovernanceRuleMap) ToSecurityGovernanceRuleMapOutput() SecurityGovernanceRuleMapOutput {
	return i.ToSecurityGovernanceRuleMapOutputWithContext(context.Background())
}

func (i SecurityGovernanceRuleMap) ToSecurityGovernanceRuleMapOutputWithContext(ctx context.Context) SecurityGovernanceRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGovernanceRuleMapOutput)
}

type SecurityGovernanceRuleOutput struct{ *pulumi.OutputState }

func (SecurityGovernanceRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGovernanceRule)(nil)).Elem()
}

func (o SecurityGovernanceRuleOutput) ToSecurityGovernanceRuleOutput() SecurityGovernanceRuleOutput {
	return o
}

func (o SecurityGovernanceRuleOutput) ToSecurityGovernanceRuleOutputWithContext(ctx context.Context) SecurityGovernanceRuleOutput {
	return o
}

// List of condition IDs associated with this rule
func (o SecurityGovernanceRuleOutput) ConditionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityGovernanceRule) pulumi.StringArrayOutput { return v.ConditionIds }).(pulumi.StringArrayOutput)
}

// Description of the security governance rule
func (o SecurityGovernanceRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGovernanceRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the rule is enabled
func (o SecurityGovernanceRuleOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityGovernanceRule) pulumi.BoolPtrOutput { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// Name of the security governance rule
func (o SecurityGovernanceRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGovernanceRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization ID of the security governance rule
func (o SecurityGovernanceRuleOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGovernanceRule) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// The project ID of the security governance rule
func (o SecurityGovernanceRuleOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGovernanceRule) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Tags for the security governance rule
func (o SecurityGovernanceRuleOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityGovernanceRule) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o SecurityGovernanceRuleOutput) TimeWindows() SecurityGovernanceRuleTimeWindowArrayOutput {
	return o.ApplyT(func(v *SecurityGovernanceRule) SecurityGovernanceRuleTimeWindowArrayOutput { return v.TimeWindows }).(SecurityGovernanceRuleTimeWindowArrayOutput)
}

// List of user group IDs associated with this rule
func (o SecurityGovernanceRuleOutput) UserGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityGovernanceRule) pulumi.StringArrayOutput { return v.UserGroupIds }).(pulumi.StringArrayOutput)
}

type SecurityGovernanceRuleArrayOutput struct{ *pulumi.OutputState }

func (SecurityGovernanceRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGovernanceRule)(nil)).Elem()
}

func (o SecurityGovernanceRuleArrayOutput) ToSecurityGovernanceRuleArrayOutput() SecurityGovernanceRuleArrayOutput {
	return o
}

func (o SecurityGovernanceRuleArrayOutput) ToSecurityGovernanceRuleArrayOutputWithContext(ctx context.Context) SecurityGovernanceRuleArrayOutput {
	return o
}

func (o SecurityGovernanceRuleArrayOutput) Index(i pulumi.IntInput) SecurityGovernanceRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityGovernanceRule {
		return vs[0].([]*SecurityGovernanceRule)[vs[1].(int)]
	}).(SecurityGovernanceRuleOutput)
}

type SecurityGovernanceRuleMapOutput struct{ *pulumi.OutputState }

func (SecurityGovernanceRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGovernanceRule)(nil)).Elem()
}

func (o SecurityGovernanceRuleMapOutput) ToSecurityGovernanceRuleMapOutput() SecurityGovernanceRuleMapOutput {
	return o
}

func (o SecurityGovernanceRuleMapOutput) ToSecurityGovernanceRuleMapOutputWithContext(ctx context.Context) SecurityGovernanceRuleMapOutput {
	return o
}

func (o SecurityGovernanceRuleMapOutput) MapIndex(k pulumi.StringInput) SecurityGovernanceRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityGovernanceRule {
		return vs[0].(map[string]*SecurityGovernanceRule)[vs[1].(string)]
	}).(SecurityGovernanceRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGovernanceRuleInput)(nil)).Elem(), &SecurityGovernanceRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGovernanceRuleArrayInput)(nil)).Elem(), SecurityGovernanceRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGovernanceRuleMapInput)(nil)).Elem(), SecurityGovernanceRuleMap{})
	pulumi.RegisterOutputType(SecurityGovernanceRuleOutput{})
	pulumi.RegisterOutputType(SecurityGovernanceRuleArrayOutput{})
	pulumi.RegisterOutputType(SecurityGovernanceRuleMapOutput{})
}
