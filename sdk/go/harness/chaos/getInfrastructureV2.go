// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chaos

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness Chaos Infrastructure V2.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/service"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Data source to fetch a specific agent by name
//			byName, err := service.LookupDiscoveryAgent(ctx, &service.LookupDiscoveryAgentArgs{
//				Name:                  pulumi.StringRef("example-agent"),
//				OrgIdentifier:         pulumi.StringRef(orgIdentifier),
//				ProjectIdentifier:     pulumi.StringRef(projectIdentifier),
//				EnvironmentIdentifier: environmentIdentifier,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("agentDetailsByName", byName)
//			// Data source to fetch a specific agent by identity
//			byIdentity, err := service.LookupDiscoveryAgent(ctx, &service.LookupDiscoveryAgentArgs{
//				Identity:              pulumi.StringRef("example-infra"),
//				OrgIdentifier:         pulumi.StringRef(orgIdentifier),
//				ProjectIdentifier:     pulumi.StringRef(projectIdentifier),
//				EnvironmentIdentifier: environmentIdentifier,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("agentDetailsByIdentity", byIdentity)
//			return nil
//		})
//	}
//
// ```
func LookupInfrastructureV2(ctx *pulumi.Context, args *LookupInfrastructureV2Args, opts ...pulumi.InvokeOption) (*LookupInfrastructureV2Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInfrastructureV2Result
	err := ctx.Invoke("harness:chaos/getInfrastructureV2:getInfrastructureV2", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInfrastructureV2.
type LookupInfrastructureV2Args struct {
	// The ID of the environment.
	EnvironmentId string `pulumi:"environmentId"`
	// Configuration for the container image registry.
	ImageRegistries []GetInfrastructureV2ImageRegistry `pulumi:"imageRegistries"`
	// The ID of the infrastructure.
	InfraId string `pulumi:"infraId"`
	// mTLS configuration for the infrastructure.
	Mtls *GetInfrastructureV2Mtls `pulumi:"mtls"`
	// The ID of the organization.
	OrgId string `pulumi:"orgId"`
	// The ID of the project.
	ProjectId string `pulumi:"projectId"`
	// Proxy configuration for the infrastructure.
	Proxy *GetInfrastructureV2Proxy `pulumi:"proxy"`
	// If specified, the pod's tolerations.
	Tolerations []GetInfrastructureV2Toleration `pulumi:"tolerations"`
	// Volume mounts for the container.
	VolumeMounts []GetInfrastructureV2VolumeMount `pulumi:"volumeMounts"`
	// Volumes to be created in the infrastructure.
	Volumes []GetInfrastructureV2Volume `pulumi:"volumes"`
}

// A collection of values returned by getInfrastructureV2.
type LookupInfrastructureV2Result struct {
	Annotation map[string]string `pulumi:"annotation"`
	// List of containers in the infrastructure.
	Containers string `pulumi:"containers"`
	// Created at of the infrastructure.
	CreatedAt string `pulumi:"createdAt"`
	// Created by of the infrastructure.
	CreatedBy string `pulumi:"createdBy"`
	// Description of the infrastructure.
	Description string `pulumi:"description"`
	// The ID of the environment.
	EnvironmentId string `pulumi:"environmentId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Identifier of the infrastructure.
	Identifier string `pulumi:"identifier"`
	// Identity of the infrastructure.
	Identity string `pulumi:"identity"`
	// Configuration for the container image registry.
	ImageRegistries []GetInfrastructureV2ImageRegistry `pulumi:"imageRegistries"`
	// The ID of the infrastructure.
	InfraId string `pulumi:"infraId"`
	// Scope of the infrastructure.
	InfraScope string `pulumi:"infraScope"`
	// Type of the infrastructure.
	InfraType          string            `pulumi:"infraType"`
	InsecureSkipVerify bool              `pulumi:"insecureSkipVerify"`
	IsAiEnabled        bool              `pulumi:"isAiEnabled"`
	IsChaosEnabled     bool              `pulumi:"isChaosEnabled"`
	Label              map[string]string `pulumi:"label"`
	// Last heartbeat of the infrastructure.
	LastHeartbeat int `pulumi:"lastHeartbeat"`
	// Last workflow timestamp of the infrastructure.
	LastWorkflowTimestamp string `pulumi:"lastWorkflowTimestamp"`
	// mTLS configuration for the infrastructure.
	Mtls *GetInfrastructureV2Mtls `pulumi:"mtls"`
	// Name of the infrastructure.
	Name string `pulumi:"name"`
	// Kubernetes namespace for the infrastructure.
	Namespace string `pulumi:"namespace"`
	// Number of schedules for the infrastructure.
	NoOfSchedules int `pulumi:"noOfSchedules"`
	// Number of workflows for the infrastructure.
	NoOfWorkflows int               `pulumi:"noOfWorkflows"`
	NodeSelector  map[string]string `pulumi:"nodeSelector"`
	// The ID of the organization.
	OrgId string `pulumi:"orgId"`
	// The ID of the project.
	ProjectId string `pulumi:"projectId"`
	// Proxy configuration for the infrastructure.
	Proxy      *GetInfrastructureV2Proxy `pulumi:"proxy"`
	RunAsGroup int                       `pulumi:"runAsGroup"`
	RunAsUser  int                       `pulumi:"runAsUser"`
	// Service account used by the infrastructure.
	ServiceAccount string `pulumi:"serviceAccount"`
	// Status of the infrastructure.
	Status string `pulumi:"status"`
	// Tags of the infrastructure.
	Tags []string `pulumi:"tags"`
	// If specified, the pod's tolerations.
	Tolerations []GetInfrastructureV2Toleration `pulumi:"tolerations"`
	// Update status of the infrastructure.
	UpdateStatus string `pulumi:"updateStatus"`
	// Updated at of the infrastructure.
	UpdatedAt string `pulumi:"updatedAt"`
	// Updated by of the infrastructure.
	UpdatedBy string `pulumi:"updatedBy"`
	// Volume mounts for the container.
	VolumeMounts []GetInfrastructureV2VolumeMount `pulumi:"volumeMounts"`
	// Volumes to be created in the infrastructure.
	Volumes []GetInfrastructureV2Volume `pulumi:"volumes"`
}

func LookupInfrastructureV2Output(ctx *pulumi.Context, args LookupInfrastructureV2OutputArgs, opts ...pulumi.InvokeOption) LookupInfrastructureV2ResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupInfrastructureV2ResultOutput, error) {
			args := v.(LookupInfrastructureV2Args)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:chaos/getInfrastructureV2:getInfrastructureV2", args, LookupInfrastructureV2ResultOutput{}, options).(LookupInfrastructureV2ResultOutput), nil
		}).(LookupInfrastructureV2ResultOutput)
}

// A collection of arguments for invoking getInfrastructureV2.
type LookupInfrastructureV2OutputArgs struct {
	// The ID of the environment.
	EnvironmentId pulumi.StringInput `pulumi:"environmentId"`
	// Configuration for the container image registry.
	ImageRegistries GetInfrastructureV2ImageRegistryArrayInput `pulumi:"imageRegistries"`
	// The ID of the infrastructure.
	InfraId pulumi.StringInput `pulumi:"infraId"`
	// mTLS configuration for the infrastructure.
	Mtls GetInfrastructureV2MtlsPtrInput `pulumi:"mtls"`
	// The ID of the organization.
	OrgId pulumi.StringInput `pulumi:"orgId"`
	// The ID of the project.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// Proxy configuration for the infrastructure.
	Proxy GetInfrastructureV2ProxyPtrInput `pulumi:"proxy"`
	// If specified, the pod's tolerations.
	Tolerations GetInfrastructureV2TolerationArrayInput `pulumi:"tolerations"`
	// Volume mounts for the container.
	VolumeMounts GetInfrastructureV2VolumeMountArrayInput `pulumi:"volumeMounts"`
	// Volumes to be created in the infrastructure.
	Volumes GetInfrastructureV2VolumeArrayInput `pulumi:"volumes"`
}

func (LookupInfrastructureV2OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInfrastructureV2Args)(nil)).Elem()
}

// A collection of values returned by getInfrastructureV2.
type LookupInfrastructureV2ResultOutput struct{ *pulumi.OutputState }

func (LookupInfrastructureV2ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInfrastructureV2Result)(nil)).Elem()
}

func (o LookupInfrastructureV2ResultOutput) ToLookupInfrastructureV2ResultOutput() LookupInfrastructureV2ResultOutput {
	return o
}

func (o LookupInfrastructureV2ResultOutput) ToLookupInfrastructureV2ResultOutputWithContext(ctx context.Context) LookupInfrastructureV2ResultOutput {
	return o
}

func (o LookupInfrastructureV2ResultOutput) Annotation() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) map[string]string { return v.Annotation }).(pulumi.StringMapOutput)
}

// List of containers in the infrastructure.
func (o LookupInfrastructureV2ResultOutput) Containers() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) string { return v.Containers }).(pulumi.StringOutput)
}

// Created at of the infrastructure.
func (o LookupInfrastructureV2ResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Created by of the infrastructure.
func (o LookupInfrastructureV2ResultOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) string { return v.CreatedBy }).(pulumi.StringOutput)
}

// Description of the infrastructure.
func (o LookupInfrastructureV2ResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the environment.
func (o LookupInfrastructureV2ResultOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) string { return v.EnvironmentId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupInfrastructureV2ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) string { return v.Id }).(pulumi.StringOutput)
}

// Identifier of the infrastructure.
func (o LookupInfrastructureV2ResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) string { return v.Identifier }).(pulumi.StringOutput)
}

// Identity of the infrastructure.
func (o LookupInfrastructureV2ResultOutput) Identity() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) string { return v.Identity }).(pulumi.StringOutput)
}

// Configuration for the container image registry.
func (o LookupInfrastructureV2ResultOutput) ImageRegistries() GetInfrastructureV2ImageRegistryArrayOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) []GetInfrastructureV2ImageRegistry { return v.ImageRegistries }).(GetInfrastructureV2ImageRegistryArrayOutput)
}

// The ID of the infrastructure.
func (o LookupInfrastructureV2ResultOutput) InfraId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) string { return v.InfraId }).(pulumi.StringOutput)
}

// Scope of the infrastructure.
func (o LookupInfrastructureV2ResultOutput) InfraScope() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) string { return v.InfraScope }).(pulumi.StringOutput)
}

// Type of the infrastructure.
func (o LookupInfrastructureV2ResultOutput) InfraType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) string { return v.InfraType }).(pulumi.StringOutput)
}

func (o LookupInfrastructureV2ResultOutput) InsecureSkipVerify() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) bool { return v.InsecureSkipVerify }).(pulumi.BoolOutput)
}

func (o LookupInfrastructureV2ResultOutput) IsAiEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) bool { return v.IsAiEnabled }).(pulumi.BoolOutput)
}

func (o LookupInfrastructureV2ResultOutput) IsChaosEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) bool { return v.IsChaosEnabled }).(pulumi.BoolOutput)
}

func (o LookupInfrastructureV2ResultOutput) Label() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) map[string]string { return v.Label }).(pulumi.StringMapOutput)
}

// Last heartbeat of the infrastructure.
func (o LookupInfrastructureV2ResultOutput) LastHeartbeat() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) int { return v.LastHeartbeat }).(pulumi.IntOutput)
}

// Last workflow timestamp of the infrastructure.
func (o LookupInfrastructureV2ResultOutput) LastWorkflowTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) string { return v.LastWorkflowTimestamp }).(pulumi.StringOutput)
}

// mTLS configuration for the infrastructure.
func (o LookupInfrastructureV2ResultOutput) Mtls() GetInfrastructureV2MtlsPtrOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) *GetInfrastructureV2Mtls { return v.Mtls }).(GetInfrastructureV2MtlsPtrOutput)
}

// Name of the infrastructure.
func (o LookupInfrastructureV2ResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) string { return v.Name }).(pulumi.StringOutput)
}

// Kubernetes namespace for the infrastructure.
func (o LookupInfrastructureV2ResultOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) string { return v.Namespace }).(pulumi.StringOutput)
}

// Number of schedules for the infrastructure.
func (o LookupInfrastructureV2ResultOutput) NoOfSchedules() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) int { return v.NoOfSchedules }).(pulumi.IntOutput)
}

// Number of workflows for the infrastructure.
func (o LookupInfrastructureV2ResultOutput) NoOfWorkflows() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) int { return v.NoOfWorkflows }).(pulumi.IntOutput)
}

func (o LookupInfrastructureV2ResultOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// The ID of the organization.
func (o LookupInfrastructureV2ResultOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) string { return v.OrgId }).(pulumi.StringOutput)
}

// The ID of the project.
func (o LookupInfrastructureV2ResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Proxy configuration for the infrastructure.
func (o LookupInfrastructureV2ResultOutput) Proxy() GetInfrastructureV2ProxyPtrOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) *GetInfrastructureV2Proxy { return v.Proxy }).(GetInfrastructureV2ProxyPtrOutput)
}

func (o LookupInfrastructureV2ResultOutput) RunAsGroup() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) int { return v.RunAsGroup }).(pulumi.IntOutput)
}

func (o LookupInfrastructureV2ResultOutput) RunAsUser() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) int { return v.RunAsUser }).(pulumi.IntOutput)
}

// Service account used by the infrastructure.
func (o LookupInfrastructureV2ResultOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Status of the infrastructure.
func (o LookupInfrastructureV2ResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) string { return v.Status }).(pulumi.StringOutput)
}

// Tags of the infrastructure.
func (o LookupInfrastructureV2ResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// If specified, the pod's tolerations.
func (o LookupInfrastructureV2ResultOutput) Tolerations() GetInfrastructureV2TolerationArrayOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) []GetInfrastructureV2Toleration { return v.Tolerations }).(GetInfrastructureV2TolerationArrayOutput)
}

// Update status of the infrastructure.
func (o LookupInfrastructureV2ResultOutput) UpdateStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) string { return v.UpdateStatus }).(pulumi.StringOutput)
}

// Updated at of the infrastructure.
func (o LookupInfrastructureV2ResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Updated by of the infrastructure.
func (o LookupInfrastructureV2ResultOutput) UpdatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) string { return v.UpdatedBy }).(pulumi.StringOutput)
}

// Volume mounts for the container.
func (o LookupInfrastructureV2ResultOutput) VolumeMounts() GetInfrastructureV2VolumeMountArrayOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) []GetInfrastructureV2VolumeMount { return v.VolumeMounts }).(GetInfrastructureV2VolumeMountArrayOutput)
}

// Volumes to be created in the infrastructure.
func (o LookupInfrastructureV2ResultOutput) Volumes() GetInfrastructureV2VolumeArrayOutput {
	return o.ApplyT(func(v LookupInfrastructureV2Result) []GetInfrastructureV2Volume { return v.Volumes }).(GetInfrastructureV2VolumeArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInfrastructureV2ResultOutput{})
}
