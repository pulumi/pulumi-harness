// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chaos

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing a Harness Chaos Hub
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/chaos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := chaos.NewHub(ctx, "example", &chaos.HubArgs{
//				OrgId:       pulumi.String("<org_id>"),
//				ProjectId:   pulumi.String("<project_id>"),
//				Name:        pulumi.String("<name>"),
//				Description: pulumi.String("<description>"),
//				ConnectorId: pulumi.String("<connector_id>"),
//				RepoBranch:  pulumi.String("<repo_branch>"),
//				RepoName:    pulumi.String("<repo_name>"),
//				IsDefault:   pulumi.Bool(false),
//				Tags: pulumi.StringArray{
//					pulumi.String("<tag1>"),
//					pulumi.String("<tag2>"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import Project level Chaos Hub
//
// ```sh
// $ pulumi import harness:chaos/hub:Hub example <org_id>/<project_id>/<hub_id>
// ```
type Hub struct {
	pulumi.CustomResourceState

	// ID of the Git connector
	ConnectorId pulumi.StringOutput `pulumi:"connectorId"`
	// Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
	ConnectorScope pulumi.StringPtrOutput `pulumi:"connectorScope"`
	// Creation timestamp
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Description of the chaos hub
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the chaos hub is available
	IsAvailable pulumi.BoolOutput `pulumi:"isAvailable"`
	// Whether this is the default chaos hub
	IsDefault pulumi.BoolPtrOutput `pulumi:"isDefault"`
	// Timestamp of the last sync
	LastSyncedAt pulumi.StringOutput `pulumi:"lastSyncedAt"`
	// Name of the chaos hub
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization ID of the chaos hub
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// The project ID of the chaos hub
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Git repository branch
	RepoBranch pulumi.StringOutput `pulumi:"repoBranch"`
	// Name of the Git repository (required for account-level connectors)
	RepoName pulumi.StringPtrOutput `pulumi:"repoName"`
	// Tags to associate with the chaos hub
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Total number of experiments in the hub
	TotalExperiments pulumi.IntOutput `pulumi:"totalExperiments"`
	// Total number of faults in the hub
	TotalFaults pulumi.IntOutput `pulumi:"totalFaults"`
	// Last update timestamp
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewHub registers a new resource with the given unique name, arguments, and options.
func NewHub(ctx *pulumi.Context,
	name string, args *HubArgs, opts ...pulumi.ResourceOption) (*Hub, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorId'")
	}
	if args.RepoBranch == nil {
		return nil, errors.New("invalid value for required argument 'RepoBranch'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Hub
	err := ctx.RegisterResource("harness:chaos/hub:Hub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHub gets an existing Hub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HubState, opts ...pulumi.ResourceOption) (*Hub, error) {
	var resource Hub
	err := ctx.ReadResource("harness:chaos/hub:Hub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hub resources.
type hubState struct {
	// ID of the Git connector
	ConnectorId *string `pulumi:"connectorId"`
	// Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
	ConnectorScope *string `pulumi:"connectorScope"`
	// Creation timestamp
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the chaos hub
	Description *string `pulumi:"description"`
	// Whether the chaos hub is available
	IsAvailable *bool `pulumi:"isAvailable"`
	// Whether this is the default chaos hub
	IsDefault *bool `pulumi:"isDefault"`
	// Timestamp of the last sync
	LastSyncedAt *string `pulumi:"lastSyncedAt"`
	// Name of the chaos hub
	Name *string `pulumi:"name"`
	// The organization ID of the chaos hub
	OrgId *string `pulumi:"orgId"`
	// The project ID of the chaos hub
	ProjectId *string `pulumi:"projectId"`
	// Git repository branch
	RepoBranch *string `pulumi:"repoBranch"`
	// Name of the Git repository (required for account-level connectors)
	RepoName *string `pulumi:"repoName"`
	// Tags to associate with the chaos hub
	Tags []string `pulumi:"tags"`
	// Total number of experiments in the hub
	TotalExperiments *int `pulumi:"totalExperiments"`
	// Total number of faults in the hub
	TotalFaults *int `pulumi:"totalFaults"`
	// Last update timestamp
	UpdatedAt *string `pulumi:"updatedAt"`
}

type HubState struct {
	// ID of the Git connector
	ConnectorId pulumi.StringPtrInput
	// Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
	ConnectorScope pulumi.StringPtrInput
	// Creation timestamp
	CreatedAt pulumi.StringPtrInput
	// Description of the chaos hub
	Description pulumi.StringPtrInput
	// Whether the chaos hub is available
	IsAvailable pulumi.BoolPtrInput
	// Whether this is the default chaos hub
	IsDefault pulumi.BoolPtrInput
	// Timestamp of the last sync
	LastSyncedAt pulumi.StringPtrInput
	// Name of the chaos hub
	Name pulumi.StringPtrInput
	// The organization ID of the chaos hub
	OrgId pulumi.StringPtrInput
	// The project ID of the chaos hub
	ProjectId pulumi.StringPtrInput
	// Git repository branch
	RepoBranch pulumi.StringPtrInput
	// Name of the Git repository (required for account-level connectors)
	RepoName pulumi.StringPtrInput
	// Tags to associate with the chaos hub
	Tags pulumi.StringArrayInput
	// Total number of experiments in the hub
	TotalExperiments pulumi.IntPtrInput
	// Total number of faults in the hub
	TotalFaults pulumi.IntPtrInput
	// Last update timestamp
	UpdatedAt pulumi.StringPtrInput
}

func (HubState) ElementType() reflect.Type {
	return reflect.TypeOf((*hubState)(nil)).Elem()
}

type hubArgs struct {
	// ID of the Git connector
	ConnectorId string `pulumi:"connectorId"`
	// Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
	ConnectorScope *string `pulumi:"connectorScope"`
	// Description of the chaos hub
	Description *string `pulumi:"description"`
	// Whether this is the default chaos hub
	IsDefault *bool `pulumi:"isDefault"`
	// Name of the chaos hub
	Name *string `pulumi:"name"`
	// The organization ID of the chaos hub
	OrgId *string `pulumi:"orgId"`
	// The project ID of the chaos hub
	ProjectId *string `pulumi:"projectId"`
	// Git repository branch
	RepoBranch string `pulumi:"repoBranch"`
	// Name of the Git repository (required for account-level connectors)
	RepoName *string `pulumi:"repoName"`
	// Tags to associate with the chaos hub
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a Hub resource.
type HubArgs struct {
	// ID of the Git connector
	ConnectorId pulumi.StringInput
	// Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
	ConnectorScope pulumi.StringPtrInput
	// Description of the chaos hub
	Description pulumi.StringPtrInput
	// Whether this is the default chaos hub
	IsDefault pulumi.BoolPtrInput
	// Name of the chaos hub
	Name pulumi.StringPtrInput
	// The organization ID of the chaos hub
	OrgId pulumi.StringPtrInput
	// The project ID of the chaos hub
	ProjectId pulumi.StringPtrInput
	// Git repository branch
	RepoBranch pulumi.StringInput
	// Name of the Git repository (required for account-level connectors)
	RepoName pulumi.StringPtrInput
	// Tags to associate with the chaos hub
	Tags pulumi.StringArrayInput
}

func (HubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hubArgs)(nil)).Elem()
}

type HubInput interface {
	pulumi.Input

	ToHubOutput() HubOutput
	ToHubOutputWithContext(ctx context.Context) HubOutput
}

func (*Hub) ElementType() reflect.Type {
	return reflect.TypeOf((**Hub)(nil)).Elem()
}

func (i *Hub) ToHubOutput() HubOutput {
	return i.ToHubOutputWithContext(context.Background())
}

func (i *Hub) ToHubOutputWithContext(ctx context.Context) HubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubOutput)
}

// HubArrayInput is an input type that accepts HubArray and HubArrayOutput values.
// You can construct a concrete instance of `HubArrayInput` via:
//
//	HubArray{ HubArgs{...} }
type HubArrayInput interface {
	pulumi.Input

	ToHubArrayOutput() HubArrayOutput
	ToHubArrayOutputWithContext(context.Context) HubArrayOutput
}

type HubArray []HubInput

func (HubArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hub)(nil)).Elem()
}

func (i HubArray) ToHubArrayOutput() HubArrayOutput {
	return i.ToHubArrayOutputWithContext(context.Background())
}

func (i HubArray) ToHubArrayOutputWithContext(ctx context.Context) HubArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubArrayOutput)
}

// HubMapInput is an input type that accepts HubMap and HubMapOutput values.
// You can construct a concrete instance of `HubMapInput` via:
//
//	HubMap{ "key": HubArgs{...} }
type HubMapInput interface {
	pulumi.Input

	ToHubMapOutput() HubMapOutput
	ToHubMapOutputWithContext(context.Context) HubMapOutput
}

type HubMap map[string]HubInput

func (HubMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hub)(nil)).Elem()
}

func (i HubMap) ToHubMapOutput() HubMapOutput {
	return i.ToHubMapOutputWithContext(context.Background())
}

func (i HubMap) ToHubMapOutputWithContext(ctx context.Context) HubMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubMapOutput)
}

type HubOutput struct{ *pulumi.OutputState }

func (HubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hub)(nil)).Elem()
}

func (o HubOutput) ToHubOutput() HubOutput {
	return o
}

func (o HubOutput) ToHubOutputWithContext(ctx context.Context) HubOutput {
	return o
}

// ID of the Git connector
func (o HubOutput) ConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.ConnectorId }).(pulumi.StringOutput)
}

// Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
func (o HubOutput) ConnectorScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringPtrOutput { return v.ConnectorScope }).(pulumi.StringPtrOutput)
}

// Creation timestamp
func (o HubOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Description of the chaos hub
func (o HubOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the chaos hub is available
func (o HubOutput) IsAvailable() pulumi.BoolOutput {
	return o.ApplyT(func(v *Hub) pulumi.BoolOutput { return v.IsAvailable }).(pulumi.BoolOutput)
}

// Whether this is the default chaos hub
func (o HubOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Hub) pulumi.BoolPtrOutput { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// Timestamp of the last sync
func (o HubOutput) LastSyncedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.LastSyncedAt }).(pulumi.StringOutput)
}

// Name of the chaos hub
func (o HubOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization ID of the chaos hub
func (o HubOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// The project ID of the chaos hub
func (o HubOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Git repository branch
func (o HubOutput) RepoBranch() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.RepoBranch }).(pulumi.StringOutput)
}

// Name of the Git repository (required for account-level connectors)
func (o HubOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringPtrOutput { return v.RepoName }).(pulumi.StringPtrOutput)
}

// Tags to associate with the chaos hub
func (o HubOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Total number of experiments in the hub
func (o HubOutput) TotalExperiments() pulumi.IntOutput {
	return o.ApplyT(func(v *Hub) pulumi.IntOutput { return v.TotalExperiments }).(pulumi.IntOutput)
}

// Total number of faults in the hub
func (o HubOutput) TotalFaults() pulumi.IntOutput {
	return o.ApplyT(func(v *Hub) pulumi.IntOutput { return v.TotalFaults }).(pulumi.IntOutput)
}

// Last update timestamp
func (o HubOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type HubArrayOutput struct{ *pulumi.OutputState }

func (HubArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hub)(nil)).Elem()
}

func (o HubArrayOutput) ToHubArrayOutput() HubArrayOutput {
	return o
}

func (o HubArrayOutput) ToHubArrayOutputWithContext(ctx context.Context) HubArrayOutput {
	return o
}

func (o HubArrayOutput) Index(i pulumi.IntInput) HubOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Hub {
		return vs[0].([]*Hub)[vs[1].(int)]
	}).(HubOutput)
}

type HubMapOutput struct{ *pulumi.OutputState }

func (HubMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hub)(nil)).Elem()
}

func (o HubMapOutput) ToHubMapOutput() HubMapOutput {
	return o
}

func (o HubMapOutput) ToHubMapOutputWithContext(ctx context.Context) HubMapOutput {
	return o
}

func (o HubMapOutput) MapIndex(k pulumi.StringInput) HubOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Hub {
		return vs[0].(map[string]*Hub)[vs[1].(string)]
	}).(HubOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HubInput)(nil)).Elem(), &Hub{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubArrayInput)(nil)).Elem(), HubArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubMapInput)(nil)).Elem(), HubMap{})
	pulumi.RegisterOutputType(HubOutput{})
	pulumi.RegisterOutputType(HubArrayOutput{})
	pulumi.RegisterOutputType(HubMapOutput{})
}
