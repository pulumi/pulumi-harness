// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chaos

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness Chaos Hub
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/chaos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := chaos.LookupHub(ctx, &chaos.LookupHubArgs{
//				Name:      "<name>",
//				OrgId:     pulumi.StringRef("<org_id>"),
//				ProjectId: pulumi.StringRef("<project_id>"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupHub(ctx *pulumi.Context, args *LookupHubArgs, opts ...pulumi.InvokeOption) (*LookupHubResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupHubResult
	err := ctx.Invoke("harness:chaos/getHub:getHub", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getHub.
type LookupHubArgs struct {
	// Name of the chaos hub
	Name string `pulumi:"name"`
	// The organization ID of the chaos hub
	OrgId *string `pulumi:"orgId"`
	// The project ID of the chaos hub
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getHub.
type LookupHubResult struct {
	// ID of the Git connector
	ConnectorId string `pulumi:"connectorId"`
	// Creation timestamp
	CreatedAt string `pulumi:"createdAt"`
	// Description of the chaos hub
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Whether the chaos hub is available
	IsAvailable bool `pulumi:"isAvailable"`
	// Whether this is the default chaos hub
	IsDefault bool `pulumi:"isDefault"`
	// Timestamp of the last sync
	LastSyncedAt string `pulumi:"lastSyncedAt"`
	// Name of the chaos hub
	Name string `pulumi:"name"`
	// The organization ID of the chaos hub
	OrgId *string `pulumi:"orgId"`
	// The project ID of the chaos hub
	ProjectId *string `pulumi:"projectId"`
	// Git repository branch
	RepoBranch string `pulumi:"repoBranch"`
	// Name of the Git repository
	RepoName string `pulumi:"repoName"`
	// Tags associated with the chaos hub
	Tags []string `pulumi:"tags"`
	// Total number of experiments in the hub
	TotalExperiments int `pulumi:"totalExperiments"`
	// Total number of faults in the hub
	TotalFaults int `pulumi:"totalFaults"`
	// Last update timestamp
	UpdatedAt string `pulumi:"updatedAt"`
}

func LookupHubOutput(ctx *pulumi.Context, args LookupHubOutputArgs, opts ...pulumi.InvokeOption) LookupHubResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupHubResultOutput, error) {
			args := v.(LookupHubArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:chaos/getHub:getHub", args, LookupHubResultOutput{}, options).(LookupHubResultOutput), nil
		}).(LookupHubResultOutput)
}

// A collection of arguments for invoking getHub.
type LookupHubOutputArgs struct {
	// Name of the chaos hub
	Name pulumi.StringInput `pulumi:"name"`
	// The organization ID of the chaos hub
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// The project ID of the chaos hub
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupHubOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHubArgs)(nil)).Elem()
}

// A collection of values returned by getHub.
type LookupHubResultOutput struct{ *pulumi.OutputState }

func (LookupHubResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHubResult)(nil)).Elem()
}

func (o LookupHubResultOutput) ToLookupHubResultOutput() LookupHubResultOutput {
	return o
}

func (o LookupHubResultOutput) ToLookupHubResultOutputWithContext(ctx context.Context) LookupHubResultOutput {
	return o
}

// ID of the Git connector
func (o LookupHubResultOutput) ConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHubResult) string { return v.ConnectorId }).(pulumi.StringOutput)
}

// Creation timestamp
func (o LookupHubResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHubResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Description of the chaos hub
func (o LookupHubResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHubResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupHubResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHubResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether the chaos hub is available
func (o LookupHubResultOutput) IsAvailable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHubResult) bool { return v.IsAvailable }).(pulumi.BoolOutput)
}

// Whether this is the default chaos hub
func (o LookupHubResultOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHubResult) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// Timestamp of the last sync
func (o LookupHubResultOutput) LastSyncedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHubResult) string { return v.LastSyncedAt }).(pulumi.StringOutput)
}

// Name of the chaos hub
func (o LookupHubResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHubResult) string { return v.Name }).(pulumi.StringOutput)
}

// The organization ID of the chaos hub
func (o LookupHubResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupHubResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// The project ID of the chaos hub
func (o LookupHubResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupHubResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Git repository branch
func (o LookupHubResultOutput) RepoBranch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHubResult) string { return v.RepoBranch }).(pulumi.StringOutput)
}

// Name of the Git repository
func (o LookupHubResultOutput) RepoName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHubResult) string { return v.RepoName }).(pulumi.StringOutput)
}

// Tags associated with the chaos hub
func (o LookupHubResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupHubResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Total number of experiments in the hub
func (o LookupHubResultOutput) TotalExperiments() pulumi.IntOutput {
	return o.ApplyT(func(v LookupHubResult) int { return v.TotalExperiments }).(pulumi.IntOutput)
}

// Total number of faults in the hub
func (o LookupHubResultOutput) TotalFaults() pulumi.IntOutput {
	return o.ApplyT(func(v LookupHubResult) int { return v.TotalFaults }).(pulumi.IntOutput)
}

// Last update timestamp
func (o LookupHubResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHubResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupHubResultOutput{})
}
