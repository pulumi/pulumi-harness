// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chaos

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing Harness Chaos Infrastructure V2.
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import Project level Chaos Infrastructure v2
//
// ```sh
// $ pulumi import harness:chaos/infrastructureV2:InfrastructureV2 example <org_id>/<project_id>/<environment_id>/<infra_id>
// ```
type InfrastructureV2 struct {
	pulumi.CustomResourceState

	// Enable AI features for the infrastructure.
	AiEnabled pulumi.BoolPtrOutput `pulumi:"aiEnabled"`
	// Annotations to apply to the infrastructure pods.
	Annotation pulumi.StringMapOutput `pulumi:"annotation"`
	// Container configurations.
	Containers pulumi.StringPtrOutput `pulumi:"containers"`
	// Correlation ID for the request.
	CorrelationId pulumi.StringOutput `pulumi:"correlationId"`
	// Creation timestamp.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Description of the infrastructure.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// ID of the discovery agent to use.
	DiscoveryAgentId pulumi.StringPtrOutput `pulumi:"discoveryAgentId"`
	// The ID of the environment.
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// List of environment variables to set in the container.
	Envs InfrastructureV2EnvArrayOutput `pulumi:"envs"`
	// Identifier for the infrastructure.
	Identifiers InfrastructureV2IdentifierArrayOutput `pulumi:"identifiers"`
	// Identity for the infrastructure.
	Identity pulumi.StringOutput `pulumi:"identity"`
	// Configuration for the container image registry.
	ImageRegistries InfrastructureV2ImageRegistryArrayOutput `pulumi:"imageRegistries"`
	// ID of the infrastructure.
	InfraId pulumi.StringOutput `pulumi:"infraId"`
	// Namespace where the infrastructure is installed.
	InfraNamespace pulumi.StringOutput `pulumi:"infraNamespace"`
	// Scope of the infrastructure. Valid values: NAMESPACE, CLUSTER
	InfraScope pulumi.StringOutput `pulumi:"infraScope"`
	// Type of the infrastructure. Valid values: KUBERNETES, KUBERNETESV2
	InfraType pulumi.StringPtrOutput `pulumi:"infraType"`
	// Skip TLS verification for the infrastructure.
	InsecureSkipVerify pulumi.BoolPtrOutput `pulumi:"insecureSkipVerify"`
	// Installation command for the infrastructure.
	InstallCommand pulumi.StringOutput `pulumi:"installCommand"`
	// Kubernetes connector identifier.
	K8sConnectorId pulumi.StringOutput `pulumi:"k8sConnectorId"`
	// Labels to apply to the infrastructure pods.
	Label pulumi.StringMapOutput `pulumi:"label"`
	// mTLS configuration for the infrastructure.
	Mtls InfrastructureV2MtlsPtrOutput `pulumi:"mtls"`
	// Name of the infrastructure.
	Name pulumi.StringOutput `pulumi:"name"`
	// Kubernetes namespace where the infrastructure will be installed. Maps to the infrastructure namespace.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Node selector for the infrastructure pods.
	NodeSelector pulumi.StringMapOutput `pulumi:"nodeSelector"`
	// The ID of the organization.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// The ID of the project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Proxy configuration for the infrastructure.
	Proxy InfrastructureV2ProxyPtrOutput `pulumi:"proxy"`
	// Group ID to run the infrastructure as.
	RunAsGroup pulumi.IntPtrOutput `pulumi:"runAsGroup"`
	// User ID to run the infrastructure as.
	RunAsUser pulumi.IntPtrOutput `pulumi:"runAsUser"`
	// Service account used by the infrastructure.
	ServiceAccount pulumi.StringPtrOutput `pulumi:"serviceAccount"`
	// Status of the infrastructure.
	Status pulumi.StringOutput `pulumi:"status"`
	// Tags for the infrastructure.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// If specified, the pod's tolerations.
	Tolerations InfrastructureV2TolerationArrayOutput `pulumi:"tolerations"`
	// Last update timestamp.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Volume mounts for the container.
	VolumeMounts InfrastructureV2VolumeMountArrayOutput `pulumi:"volumeMounts"`
	// Volumes to be created in the infrastructure.
	Volumes InfrastructureV2VolumeArrayOutput `pulumi:"volumes"`
}

// NewInfrastructureV2 registers a new resource with the given unique name, arguments, and options.
func NewInfrastructureV2(ctx *pulumi.Context,
	name string, args *InfrastructureV2Args, opts ...pulumi.ResourceOption) (*InfrastructureV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.InfraId == nil {
		return nil, errors.New("invalid value for required argument 'InfraId'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InfrastructureV2
	err := ctx.RegisterResource("harness:chaos/infrastructureV2:InfrastructureV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInfrastructureV2 gets an existing InfrastructureV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInfrastructureV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InfrastructureV2State, opts ...pulumi.ResourceOption) (*InfrastructureV2, error) {
	var resource InfrastructureV2
	err := ctx.ReadResource("harness:chaos/infrastructureV2:InfrastructureV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InfrastructureV2 resources.
type infrastructureV2State struct {
	// Enable AI features for the infrastructure.
	AiEnabled *bool `pulumi:"aiEnabled"`
	// Annotations to apply to the infrastructure pods.
	Annotation map[string]string `pulumi:"annotation"`
	// Container configurations.
	Containers *string `pulumi:"containers"`
	// Correlation ID for the request.
	CorrelationId *string `pulumi:"correlationId"`
	// Creation timestamp.
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the infrastructure.
	Description *string `pulumi:"description"`
	// ID of the discovery agent to use.
	DiscoveryAgentId *string `pulumi:"discoveryAgentId"`
	// The ID of the environment.
	EnvironmentId *string `pulumi:"environmentId"`
	// List of environment variables to set in the container.
	Envs []InfrastructureV2Env `pulumi:"envs"`
	// Identifier for the infrastructure.
	Identifiers []InfrastructureV2Identifier `pulumi:"identifiers"`
	// Identity for the infrastructure.
	Identity *string `pulumi:"identity"`
	// Configuration for the container image registry.
	ImageRegistries []InfrastructureV2ImageRegistry `pulumi:"imageRegistries"`
	// ID of the infrastructure.
	InfraId *string `pulumi:"infraId"`
	// Namespace where the infrastructure is installed.
	InfraNamespace *string `pulumi:"infraNamespace"`
	// Scope of the infrastructure. Valid values: NAMESPACE, CLUSTER
	InfraScope *string `pulumi:"infraScope"`
	// Type of the infrastructure. Valid values: KUBERNETES, KUBERNETESV2
	InfraType *string `pulumi:"infraType"`
	// Skip TLS verification for the infrastructure.
	InsecureSkipVerify *bool `pulumi:"insecureSkipVerify"`
	// Installation command for the infrastructure.
	InstallCommand *string `pulumi:"installCommand"`
	// Kubernetes connector identifier.
	K8sConnectorId *string `pulumi:"k8sConnectorId"`
	// Labels to apply to the infrastructure pods.
	Label map[string]string `pulumi:"label"`
	// mTLS configuration for the infrastructure.
	Mtls *InfrastructureV2Mtls `pulumi:"mtls"`
	// Name of the infrastructure.
	Name *string `pulumi:"name"`
	// Kubernetes namespace where the infrastructure will be installed. Maps to the infrastructure namespace.
	Namespace *string `pulumi:"namespace"`
	// Node selector for the infrastructure pods.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// The ID of the organization.
	OrgId *string `pulumi:"orgId"`
	// The ID of the project.
	ProjectId *string `pulumi:"projectId"`
	// Proxy configuration for the infrastructure.
	Proxy *InfrastructureV2Proxy `pulumi:"proxy"`
	// Group ID to run the infrastructure as.
	RunAsGroup *int `pulumi:"runAsGroup"`
	// User ID to run the infrastructure as.
	RunAsUser *int `pulumi:"runAsUser"`
	// Service account used by the infrastructure.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Status of the infrastructure.
	Status *string `pulumi:"status"`
	// Tags for the infrastructure.
	Tags []string `pulumi:"tags"`
	// If specified, the pod's tolerations.
	Tolerations []InfrastructureV2Toleration `pulumi:"tolerations"`
	// Last update timestamp.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Volume mounts for the container.
	VolumeMounts []InfrastructureV2VolumeMount `pulumi:"volumeMounts"`
	// Volumes to be created in the infrastructure.
	Volumes []InfrastructureV2Volume `pulumi:"volumes"`
}

type InfrastructureV2State struct {
	// Enable AI features for the infrastructure.
	AiEnabled pulumi.BoolPtrInput
	// Annotations to apply to the infrastructure pods.
	Annotation pulumi.StringMapInput
	// Container configurations.
	Containers pulumi.StringPtrInput
	// Correlation ID for the request.
	CorrelationId pulumi.StringPtrInput
	// Creation timestamp.
	CreatedAt pulumi.StringPtrInput
	// Description of the infrastructure.
	Description pulumi.StringPtrInput
	// ID of the discovery agent to use.
	DiscoveryAgentId pulumi.StringPtrInput
	// The ID of the environment.
	EnvironmentId pulumi.StringPtrInput
	// List of environment variables to set in the container.
	Envs InfrastructureV2EnvArrayInput
	// Identifier for the infrastructure.
	Identifiers InfrastructureV2IdentifierArrayInput
	// Identity for the infrastructure.
	Identity pulumi.StringPtrInput
	// Configuration for the container image registry.
	ImageRegistries InfrastructureV2ImageRegistryArrayInput
	// ID of the infrastructure.
	InfraId pulumi.StringPtrInput
	// Namespace where the infrastructure is installed.
	InfraNamespace pulumi.StringPtrInput
	// Scope of the infrastructure. Valid values: NAMESPACE, CLUSTER
	InfraScope pulumi.StringPtrInput
	// Type of the infrastructure. Valid values: KUBERNETES, KUBERNETESV2
	InfraType pulumi.StringPtrInput
	// Skip TLS verification for the infrastructure.
	InsecureSkipVerify pulumi.BoolPtrInput
	// Installation command for the infrastructure.
	InstallCommand pulumi.StringPtrInput
	// Kubernetes connector identifier.
	K8sConnectorId pulumi.StringPtrInput
	// Labels to apply to the infrastructure pods.
	Label pulumi.StringMapInput
	// mTLS configuration for the infrastructure.
	Mtls InfrastructureV2MtlsPtrInput
	// Name of the infrastructure.
	Name pulumi.StringPtrInput
	// Kubernetes namespace where the infrastructure will be installed. Maps to the infrastructure namespace.
	Namespace pulumi.StringPtrInput
	// Node selector for the infrastructure pods.
	NodeSelector pulumi.StringMapInput
	// The ID of the organization.
	OrgId pulumi.StringPtrInput
	// The ID of the project.
	ProjectId pulumi.StringPtrInput
	// Proxy configuration for the infrastructure.
	Proxy InfrastructureV2ProxyPtrInput
	// Group ID to run the infrastructure as.
	RunAsGroup pulumi.IntPtrInput
	// User ID to run the infrastructure as.
	RunAsUser pulumi.IntPtrInput
	// Service account used by the infrastructure.
	ServiceAccount pulumi.StringPtrInput
	// Status of the infrastructure.
	Status pulumi.StringPtrInput
	// Tags for the infrastructure.
	Tags pulumi.StringArrayInput
	// If specified, the pod's tolerations.
	Tolerations InfrastructureV2TolerationArrayInput
	// Last update timestamp.
	UpdatedAt pulumi.StringPtrInput
	// Volume mounts for the container.
	VolumeMounts InfrastructureV2VolumeMountArrayInput
	// Volumes to be created in the infrastructure.
	Volumes InfrastructureV2VolumeArrayInput
}

func (InfrastructureV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*infrastructureV2State)(nil)).Elem()
}

type infrastructureV2Args struct {
	// Enable AI features for the infrastructure.
	AiEnabled *bool `pulumi:"aiEnabled"`
	// Annotations to apply to the infrastructure pods.
	Annotation map[string]string `pulumi:"annotation"`
	// Container configurations.
	Containers *string `pulumi:"containers"`
	// Correlation ID for the request.
	CorrelationId *string `pulumi:"correlationId"`
	// Description of the infrastructure.
	Description *string `pulumi:"description"`
	// ID of the discovery agent to use.
	DiscoveryAgentId *string `pulumi:"discoveryAgentId"`
	// The ID of the environment.
	EnvironmentId string `pulumi:"environmentId"`
	// List of environment variables to set in the container.
	Envs []InfrastructureV2Env `pulumi:"envs"`
	// Configuration for the container image registry.
	ImageRegistries []InfrastructureV2ImageRegistry `pulumi:"imageRegistries"`
	// ID of the infrastructure.
	InfraId string `pulumi:"infraId"`
	// Scope of the infrastructure. Valid values: NAMESPACE, CLUSTER
	InfraScope *string `pulumi:"infraScope"`
	// Type of the infrastructure. Valid values: KUBERNETES, KUBERNETESV2
	InfraType *string `pulumi:"infraType"`
	// Skip TLS verification for the infrastructure.
	InsecureSkipVerify *bool `pulumi:"insecureSkipVerify"`
	// Labels to apply to the infrastructure pods.
	Label map[string]string `pulumi:"label"`
	// mTLS configuration for the infrastructure.
	Mtls *InfrastructureV2Mtls `pulumi:"mtls"`
	// Name of the infrastructure.
	Name *string `pulumi:"name"`
	// Kubernetes namespace where the infrastructure will be installed. Maps to the infrastructure namespace.
	Namespace *string `pulumi:"namespace"`
	// Node selector for the infrastructure pods.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// The ID of the organization.
	OrgId string `pulumi:"orgId"`
	// The ID of the project.
	ProjectId string `pulumi:"projectId"`
	// Proxy configuration for the infrastructure.
	Proxy *InfrastructureV2Proxy `pulumi:"proxy"`
	// Group ID to run the infrastructure as.
	RunAsGroup *int `pulumi:"runAsGroup"`
	// User ID to run the infrastructure as.
	RunAsUser *int `pulumi:"runAsUser"`
	// Service account used by the infrastructure.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Tags for the infrastructure.
	Tags []string `pulumi:"tags"`
	// If specified, the pod's tolerations.
	Tolerations []InfrastructureV2Toleration `pulumi:"tolerations"`
	// Volume mounts for the container.
	VolumeMounts []InfrastructureV2VolumeMount `pulumi:"volumeMounts"`
	// Volumes to be created in the infrastructure.
	Volumes []InfrastructureV2Volume `pulumi:"volumes"`
}

// The set of arguments for constructing a InfrastructureV2 resource.
type InfrastructureV2Args struct {
	// Enable AI features for the infrastructure.
	AiEnabled pulumi.BoolPtrInput
	// Annotations to apply to the infrastructure pods.
	Annotation pulumi.StringMapInput
	// Container configurations.
	Containers pulumi.StringPtrInput
	// Correlation ID for the request.
	CorrelationId pulumi.StringPtrInput
	// Description of the infrastructure.
	Description pulumi.StringPtrInput
	// ID of the discovery agent to use.
	DiscoveryAgentId pulumi.StringPtrInput
	// The ID of the environment.
	EnvironmentId pulumi.StringInput
	// List of environment variables to set in the container.
	Envs InfrastructureV2EnvArrayInput
	// Configuration for the container image registry.
	ImageRegistries InfrastructureV2ImageRegistryArrayInput
	// ID of the infrastructure.
	InfraId pulumi.StringInput
	// Scope of the infrastructure. Valid values: NAMESPACE, CLUSTER
	InfraScope pulumi.StringPtrInput
	// Type of the infrastructure. Valid values: KUBERNETES, KUBERNETESV2
	InfraType pulumi.StringPtrInput
	// Skip TLS verification for the infrastructure.
	InsecureSkipVerify pulumi.BoolPtrInput
	// Labels to apply to the infrastructure pods.
	Label pulumi.StringMapInput
	// mTLS configuration for the infrastructure.
	Mtls InfrastructureV2MtlsPtrInput
	// Name of the infrastructure.
	Name pulumi.StringPtrInput
	// Kubernetes namespace where the infrastructure will be installed. Maps to the infrastructure namespace.
	Namespace pulumi.StringPtrInput
	// Node selector for the infrastructure pods.
	NodeSelector pulumi.StringMapInput
	// The ID of the organization.
	OrgId pulumi.StringInput
	// The ID of the project.
	ProjectId pulumi.StringInput
	// Proxy configuration for the infrastructure.
	Proxy InfrastructureV2ProxyPtrInput
	// Group ID to run the infrastructure as.
	RunAsGroup pulumi.IntPtrInput
	// User ID to run the infrastructure as.
	RunAsUser pulumi.IntPtrInput
	// Service account used by the infrastructure.
	ServiceAccount pulumi.StringPtrInput
	// Tags for the infrastructure.
	Tags pulumi.StringArrayInput
	// If specified, the pod's tolerations.
	Tolerations InfrastructureV2TolerationArrayInput
	// Volume mounts for the container.
	VolumeMounts InfrastructureV2VolumeMountArrayInput
	// Volumes to be created in the infrastructure.
	Volumes InfrastructureV2VolumeArrayInput
}

func (InfrastructureV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*infrastructureV2Args)(nil)).Elem()
}

type InfrastructureV2Input interface {
	pulumi.Input

	ToInfrastructureV2Output() InfrastructureV2Output
	ToInfrastructureV2OutputWithContext(ctx context.Context) InfrastructureV2Output
}

func (*InfrastructureV2) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureV2)(nil)).Elem()
}

func (i *InfrastructureV2) ToInfrastructureV2Output() InfrastructureV2Output {
	return i.ToInfrastructureV2OutputWithContext(context.Background())
}

func (i *InfrastructureV2) ToInfrastructureV2OutputWithContext(ctx context.Context) InfrastructureV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureV2Output)
}

// InfrastructureV2ArrayInput is an input type that accepts InfrastructureV2Array and InfrastructureV2ArrayOutput values.
// You can construct a concrete instance of `InfrastructureV2ArrayInput` via:
//
//	InfrastructureV2Array{ InfrastructureV2Args{...} }
type InfrastructureV2ArrayInput interface {
	pulumi.Input

	ToInfrastructureV2ArrayOutput() InfrastructureV2ArrayOutput
	ToInfrastructureV2ArrayOutputWithContext(context.Context) InfrastructureV2ArrayOutput
}

type InfrastructureV2Array []InfrastructureV2Input

func (InfrastructureV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InfrastructureV2)(nil)).Elem()
}

func (i InfrastructureV2Array) ToInfrastructureV2ArrayOutput() InfrastructureV2ArrayOutput {
	return i.ToInfrastructureV2ArrayOutputWithContext(context.Background())
}

func (i InfrastructureV2Array) ToInfrastructureV2ArrayOutputWithContext(ctx context.Context) InfrastructureV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureV2ArrayOutput)
}

// InfrastructureV2MapInput is an input type that accepts InfrastructureV2Map and InfrastructureV2MapOutput values.
// You can construct a concrete instance of `InfrastructureV2MapInput` via:
//
//	InfrastructureV2Map{ "key": InfrastructureV2Args{...} }
type InfrastructureV2MapInput interface {
	pulumi.Input

	ToInfrastructureV2MapOutput() InfrastructureV2MapOutput
	ToInfrastructureV2MapOutputWithContext(context.Context) InfrastructureV2MapOutput
}

type InfrastructureV2Map map[string]InfrastructureV2Input

func (InfrastructureV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InfrastructureV2)(nil)).Elem()
}

func (i InfrastructureV2Map) ToInfrastructureV2MapOutput() InfrastructureV2MapOutput {
	return i.ToInfrastructureV2MapOutputWithContext(context.Background())
}

func (i InfrastructureV2Map) ToInfrastructureV2MapOutputWithContext(ctx context.Context) InfrastructureV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureV2MapOutput)
}

type InfrastructureV2Output struct{ *pulumi.OutputState }

func (InfrastructureV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureV2)(nil)).Elem()
}

func (o InfrastructureV2Output) ToInfrastructureV2Output() InfrastructureV2Output {
	return o
}

func (o InfrastructureV2Output) ToInfrastructureV2OutputWithContext(ctx context.Context) InfrastructureV2Output {
	return o
}

// Enable AI features for the infrastructure.
func (o InfrastructureV2Output) AiEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.BoolPtrOutput { return v.AiEnabled }).(pulumi.BoolPtrOutput)
}

// Annotations to apply to the infrastructure pods.
func (o InfrastructureV2Output) Annotation() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringMapOutput { return v.Annotation }).(pulumi.StringMapOutput)
}

// Container configurations.
func (o InfrastructureV2Output) Containers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringPtrOutput { return v.Containers }).(pulumi.StringPtrOutput)
}

// Correlation ID for the request.
func (o InfrastructureV2Output) CorrelationId() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringOutput { return v.CorrelationId }).(pulumi.StringOutput)
}

// Creation timestamp.
func (o InfrastructureV2Output) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Description of the infrastructure.
func (o InfrastructureV2Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// ID of the discovery agent to use.
func (o InfrastructureV2Output) DiscoveryAgentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringPtrOutput { return v.DiscoveryAgentId }).(pulumi.StringPtrOutput)
}

// The ID of the environment.
func (o InfrastructureV2Output) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// List of environment variables to set in the container.
func (o InfrastructureV2Output) Envs() InfrastructureV2EnvArrayOutput {
	return o.ApplyT(func(v *InfrastructureV2) InfrastructureV2EnvArrayOutput { return v.Envs }).(InfrastructureV2EnvArrayOutput)
}

// Identifier for the infrastructure.
func (o InfrastructureV2Output) Identifiers() InfrastructureV2IdentifierArrayOutput {
	return o.ApplyT(func(v *InfrastructureV2) InfrastructureV2IdentifierArrayOutput { return v.Identifiers }).(InfrastructureV2IdentifierArrayOutput)
}

// Identity for the infrastructure.
func (o InfrastructureV2Output) Identity() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringOutput { return v.Identity }).(pulumi.StringOutput)
}

// Configuration for the container image registry.
func (o InfrastructureV2Output) ImageRegistries() InfrastructureV2ImageRegistryArrayOutput {
	return o.ApplyT(func(v *InfrastructureV2) InfrastructureV2ImageRegistryArrayOutput { return v.ImageRegistries }).(InfrastructureV2ImageRegistryArrayOutput)
}

// ID of the infrastructure.
func (o InfrastructureV2Output) InfraId() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringOutput { return v.InfraId }).(pulumi.StringOutput)
}

// Namespace where the infrastructure is installed.
func (o InfrastructureV2Output) InfraNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringOutput { return v.InfraNamespace }).(pulumi.StringOutput)
}

// Scope of the infrastructure. Valid values: NAMESPACE, CLUSTER
func (o InfrastructureV2Output) InfraScope() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringOutput { return v.InfraScope }).(pulumi.StringOutput)
}

// Type of the infrastructure. Valid values: KUBERNETES, KUBERNETESV2
func (o InfrastructureV2Output) InfraType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringPtrOutput { return v.InfraType }).(pulumi.StringPtrOutput)
}

// Skip TLS verification for the infrastructure.
func (o InfrastructureV2Output) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.BoolPtrOutput { return v.InsecureSkipVerify }).(pulumi.BoolPtrOutput)
}

// Installation command for the infrastructure.
func (o InfrastructureV2Output) InstallCommand() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringOutput { return v.InstallCommand }).(pulumi.StringOutput)
}

// Kubernetes connector identifier.
func (o InfrastructureV2Output) K8sConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringOutput { return v.K8sConnectorId }).(pulumi.StringOutput)
}

// Labels to apply to the infrastructure pods.
func (o InfrastructureV2Output) Label() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringMapOutput { return v.Label }).(pulumi.StringMapOutput)
}

// mTLS configuration for the infrastructure.
func (o InfrastructureV2Output) Mtls() InfrastructureV2MtlsPtrOutput {
	return o.ApplyT(func(v *InfrastructureV2) InfrastructureV2MtlsPtrOutput { return v.Mtls }).(InfrastructureV2MtlsPtrOutput)
}

// Name of the infrastructure.
func (o InfrastructureV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Kubernetes namespace where the infrastructure will be installed. Maps to the infrastructure namespace.
func (o InfrastructureV2Output) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Node selector for the infrastructure pods.
func (o InfrastructureV2Output) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringMapOutput { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// The ID of the organization.
func (o InfrastructureV2Output) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// The ID of the project.
func (o InfrastructureV2Output) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Proxy configuration for the infrastructure.
func (o InfrastructureV2Output) Proxy() InfrastructureV2ProxyPtrOutput {
	return o.ApplyT(func(v *InfrastructureV2) InfrastructureV2ProxyPtrOutput { return v.Proxy }).(InfrastructureV2ProxyPtrOutput)
}

// Group ID to run the infrastructure as.
func (o InfrastructureV2Output) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.IntPtrOutput { return v.RunAsGroup }).(pulumi.IntPtrOutput)
}

// User ID to run the infrastructure as.
func (o InfrastructureV2Output) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.IntPtrOutput { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

// Service account used by the infrastructure.
func (o InfrastructureV2Output) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringPtrOutput { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Status of the infrastructure.
func (o InfrastructureV2Output) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Tags for the infrastructure.
func (o InfrastructureV2Output) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// If specified, the pod's tolerations.
func (o InfrastructureV2Output) Tolerations() InfrastructureV2TolerationArrayOutput {
	return o.ApplyT(func(v *InfrastructureV2) InfrastructureV2TolerationArrayOutput { return v.Tolerations }).(InfrastructureV2TolerationArrayOutput)
}

// Last update timestamp.
func (o InfrastructureV2Output) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *InfrastructureV2) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Volume mounts for the container.
func (o InfrastructureV2Output) VolumeMounts() InfrastructureV2VolumeMountArrayOutput {
	return o.ApplyT(func(v *InfrastructureV2) InfrastructureV2VolumeMountArrayOutput { return v.VolumeMounts }).(InfrastructureV2VolumeMountArrayOutput)
}

// Volumes to be created in the infrastructure.
func (o InfrastructureV2Output) Volumes() InfrastructureV2VolumeArrayOutput {
	return o.ApplyT(func(v *InfrastructureV2) InfrastructureV2VolumeArrayOutput { return v.Volumes }).(InfrastructureV2VolumeArrayOutput)
}

type InfrastructureV2ArrayOutput struct{ *pulumi.OutputState }

func (InfrastructureV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InfrastructureV2)(nil)).Elem()
}

func (o InfrastructureV2ArrayOutput) ToInfrastructureV2ArrayOutput() InfrastructureV2ArrayOutput {
	return o
}

func (o InfrastructureV2ArrayOutput) ToInfrastructureV2ArrayOutputWithContext(ctx context.Context) InfrastructureV2ArrayOutput {
	return o
}

func (o InfrastructureV2ArrayOutput) Index(i pulumi.IntInput) InfrastructureV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InfrastructureV2 {
		return vs[0].([]*InfrastructureV2)[vs[1].(int)]
	}).(InfrastructureV2Output)
}

type InfrastructureV2MapOutput struct{ *pulumi.OutputState }

func (InfrastructureV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InfrastructureV2)(nil)).Elem()
}

func (o InfrastructureV2MapOutput) ToInfrastructureV2MapOutput() InfrastructureV2MapOutput {
	return o
}

func (o InfrastructureV2MapOutput) ToInfrastructureV2MapOutputWithContext(ctx context.Context) InfrastructureV2MapOutput {
	return o
}

func (o InfrastructureV2MapOutput) MapIndex(k pulumi.StringInput) InfrastructureV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InfrastructureV2 {
		return vs[0].(map[string]*InfrastructureV2)[vs[1].(string)]
	}).(InfrastructureV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureV2Input)(nil)).Elem(), &InfrastructureV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureV2ArrayInput)(nil)).Elem(), InfrastructureV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureV2MapInput)(nil)).Elem(), InfrastructureV2Map{})
	pulumi.RegisterOutputType(InfrastructureV2Output{})
	pulumi.RegisterOutputType(InfrastructureV2ArrayOutput{})
	pulumi.RegisterOutputType(InfrastructureV2MapOutput{})
}
