// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chaos

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness Chaos Security Governance Condition
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/chaos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Example of looking up a security governance condition by name
//			byName, err := chaos.LookupSecurityGovernanceCondition(ctx, &chaos.LookupSecurityGovernanceConditionArgs{
//				OrgId:     pulumi.StringRef(orgId),
//				ProjectId: pulumi.StringRef(projectId),
//				Name:      pulumi.StringRef("k8s-security-condition"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Example of looking up a security governance condition by ID
//			byId, err := chaos.LookupSecurityGovernanceCondition(ctx, &chaos.LookupSecurityGovernanceConditionArgs{
//				OrgId:     pulumi.StringRef(orgId),
//				ProjectId: pulumi.StringRef(projectId),
//				Id:        pulumi.StringRef("<condition_id>"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("securityGovernanceConditionByName", byName)
//			ctx.Export("securityGovernanceConditionById", byId)
//			return nil
//		})
//	}
//
// ```
func LookupSecurityGovernanceCondition(ctx *pulumi.Context, args *LookupSecurityGovernanceConditionArgs, opts ...pulumi.InvokeOption) (*LookupSecurityGovernanceConditionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSecurityGovernanceConditionResult
	err := ctx.Invoke("harness:chaos/getSecurityGovernanceCondition:getSecurityGovernanceCondition", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecurityGovernanceCondition.
type LookupSecurityGovernanceConditionArgs struct {
	// The ID of the security governance condition. Either `id` or `name` must be specified.
	Id *string `pulumi:"id"`
	// The name of the security governance condition. Either `id` or `name` must be specified.
	Name *string `pulumi:"name"`
	// The organization ID of the security governance condition
	OrgId *string `pulumi:"orgId"`
	// The project ID of the security governance condition
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getSecurityGovernanceCondition.
type LookupSecurityGovernanceConditionResult struct {
	// The description of the security governance condition
	Description string `pulumi:"description"`
	// Fault specification for the condition
	FaultSpecs []GetSecurityGovernanceConditionFaultSpec `pulumi:"faultSpecs"`
	// The ID of the security governance condition. Either `id` or `name` must be specified.
	Id string `pulumi:"id"`
	// The infrastructure type (KubernetesV2, Linux, Windows)
	InfraType string `pulumi:"infraType"`
	// Kubernetes specific configuration
	K8sSpecs []GetSecurityGovernanceConditionK8sSpec `pulumi:"k8sSpecs"`
	// Machine specific configuration
	MachineSpecs []GetSecurityGovernanceConditionMachineSpec `pulumi:"machineSpecs"`
	// The name of the security governance condition. Either `id` or `name` must be specified.
	Name string `pulumi:"name"`
	// The organization ID of the security governance condition
	OrgId *string `pulumi:"orgId"`
	// The project ID of the security governance condition
	ProjectId *string `pulumi:"projectId"`
	// Tags associated with the condition
	Tags []string `pulumi:"tags"`
}

func LookupSecurityGovernanceConditionOutput(ctx *pulumi.Context, args LookupSecurityGovernanceConditionOutputArgs, opts ...pulumi.InvokeOption) LookupSecurityGovernanceConditionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSecurityGovernanceConditionResultOutput, error) {
			args := v.(LookupSecurityGovernanceConditionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:chaos/getSecurityGovernanceCondition:getSecurityGovernanceCondition", args, LookupSecurityGovernanceConditionResultOutput{}, options).(LookupSecurityGovernanceConditionResultOutput), nil
		}).(LookupSecurityGovernanceConditionResultOutput)
}

// A collection of arguments for invoking getSecurityGovernanceCondition.
type LookupSecurityGovernanceConditionOutputArgs struct {
	// The ID of the security governance condition. Either `id` or `name` must be specified.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the security governance condition. Either `id` or `name` must be specified.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The organization ID of the security governance condition
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// The project ID of the security governance condition
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupSecurityGovernanceConditionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecurityGovernanceConditionArgs)(nil)).Elem()
}

// A collection of values returned by getSecurityGovernanceCondition.
type LookupSecurityGovernanceConditionResultOutput struct{ *pulumi.OutputState }

func (LookupSecurityGovernanceConditionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecurityGovernanceConditionResult)(nil)).Elem()
}

func (o LookupSecurityGovernanceConditionResultOutput) ToLookupSecurityGovernanceConditionResultOutput() LookupSecurityGovernanceConditionResultOutput {
	return o
}

func (o LookupSecurityGovernanceConditionResultOutput) ToLookupSecurityGovernanceConditionResultOutputWithContext(ctx context.Context) LookupSecurityGovernanceConditionResultOutput {
	return o
}

// The description of the security governance condition
func (o LookupSecurityGovernanceConditionResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityGovernanceConditionResult) string { return v.Description }).(pulumi.StringOutput)
}

// Fault specification for the condition
func (o LookupSecurityGovernanceConditionResultOutput) FaultSpecs() GetSecurityGovernanceConditionFaultSpecArrayOutput {
	return o.ApplyT(func(v LookupSecurityGovernanceConditionResult) []GetSecurityGovernanceConditionFaultSpec {
		return v.FaultSpecs
	}).(GetSecurityGovernanceConditionFaultSpecArrayOutput)
}

// The ID of the security governance condition. Either `id` or `name` must be specified.
func (o LookupSecurityGovernanceConditionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityGovernanceConditionResult) string { return v.Id }).(pulumi.StringOutput)
}

// The infrastructure type (KubernetesV2, Linux, Windows)
func (o LookupSecurityGovernanceConditionResultOutput) InfraType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityGovernanceConditionResult) string { return v.InfraType }).(pulumi.StringOutput)
}

// Kubernetes specific configuration
func (o LookupSecurityGovernanceConditionResultOutput) K8sSpecs() GetSecurityGovernanceConditionK8sSpecArrayOutput {
	return o.ApplyT(func(v LookupSecurityGovernanceConditionResult) []GetSecurityGovernanceConditionK8sSpec {
		return v.K8sSpecs
	}).(GetSecurityGovernanceConditionK8sSpecArrayOutput)
}

// Machine specific configuration
func (o LookupSecurityGovernanceConditionResultOutput) MachineSpecs() GetSecurityGovernanceConditionMachineSpecArrayOutput {
	return o.ApplyT(func(v LookupSecurityGovernanceConditionResult) []GetSecurityGovernanceConditionMachineSpec {
		return v.MachineSpecs
	}).(GetSecurityGovernanceConditionMachineSpecArrayOutput)
}

// The name of the security governance condition. Either `id` or `name` must be specified.
func (o LookupSecurityGovernanceConditionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityGovernanceConditionResult) string { return v.Name }).(pulumi.StringOutput)
}

// The organization ID of the security governance condition
func (o LookupSecurityGovernanceConditionResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecurityGovernanceConditionResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// The project ID of the security governance condition
func (o LookupSecurityGovernanceConditionResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecurityGovernanceConditionResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags associated with the condition
func (o LookupSecurityGovernanceConditionResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSecurityGovernanceConditionResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSecurityGovernanceConditionResultOutput{})
}
