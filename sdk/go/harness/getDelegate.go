// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harness

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness delegate. If more than one delegate matches the query the first one will be returned.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := harness.GetDelegate(ctx, &harness.GetDelegateArgs{
//				Name:   pulumi.StringRef("harness-delegate"),
//				Type:   pulumi.StringRef("KUBERNETES"),
//				Status: pulumi.StringRef("ENABLED"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDelegate(ctx *pulumi.Context, args *GetDelegateArgs, opts ...pulumi.InvokeOption) (*GetDelegateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDelegateResult
	err := ctx.Invoke("harness:index/getDelegate:getDelegate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDelegate.
type GetDelegateArgs struct {
	// The hostname of the delegate.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the delegate
	Id *string `pulumi:"id"`
	// The name of the delegate to query for.
	Name *string `pulumi:"name"`
	// The status of the delegate to query for. Valid values are DELETED, ENABLED, WAITING*FOR*APPROVAL
	Status *string `pulumi:"status"`
	// The type of the delegate to query for. Valid values are DOCKER, ECS, HELM*DELEGATE, KUBERNETES, SHELL*SCRIPT
	Type *string `pulumi:"type"`
}

// A collection of values returned by getDelegate.
type GetDelegateResult struct {
	// The account id the delegate belongs to.
	AccountId string `pulumi:"accountId"`
	// The description of the delegate.
	Description string `pulumi:"description"`
	// The hostname of the delegate.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the delegate
	Id *string `pulumi:"id"`
	// The ip address of the delegate.
	Ip string `pulumi:"ip"`
	// The last time the delegate was heard from.
	LastHeartbeat string `pulumi:"lastHeartbeat"`
	// The name of the delegate to query for.
	Name *string `pulumi:"name"`
	// Whether the delegate is in polling mode.
	PollingModeEnabled bool `pulumi:"pollingModeEnabled"`
	// The id of the profile assigned to the delegate.
	ProfileId string `pulumi:"profileId"`
	// The status of the delegate to query for. Valid values are DELETED, ENABLED, WAITING*FOR*APPROVAL
	Status *string `pulumi:"status"`
	// The type of the delegate to query for. Valid values are DOCKER, ECS, HELM*DELEGATE, KUBERNETES, SHELL*SCRIPT
	Type *string `pulumi:"type"`
	// The version of the delegate.
	Version string `pulumi:"version"`
}

func GetDelegateOutput(ctx *pulumi.Context, args GetDelegateOutputArgs, opts ...pulumi.InvokeOption) GetDelegateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDelegateResultOutput, error) {
			args := v.(GetDelegateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:index/getDelegate:getDelegate", args, GetDelegateResultOutput{}, options).(GetDelegateResultOutput), nil
		}).(GetDelegateResultOutput)
}

// A collection of arguments for invoking getDelegate.
type GetDelegateOutputArgs struct {
	// The hostname of the delegate.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the delegate
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the delegate to query for.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The status of the delegate to query for. Valid values are DELETED, ENABLED, WAITING*FOR*APPROVAL
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The type of the delegate to query for. Valid values are DOCKER, ECS, HELM*DELEGATE, KUBERNETES, SHELL*SCRIPT
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GetDelegateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDelegateArgs)(nil)).Elem()
}

// A collection of values returned by getDelegate.
type GetDelegateResultOutput struct{ *pulumi.OutputState }

func (GetDelegateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDelegateResult)(nil)).Elem()
}

func (o GetDelegateResultOutput) ToGetDelegateResultOutput() GetDelegateResultOutput {
	return o
}

func (o GetDelegateResultOutput) ToGetDelegateResultOutputWithContext(ctx context.Context) GetDelegateResultOutput {
	return o
}

// The account id the delegate belongs to.
func (o GetDelegateResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDelegateResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// The description of the delegate.
func (o GetDelegateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetDelegateResult) string { return v.Description }).(pulumi.StringOutput)
}

// The hostname of the delegate.
func (o GetDelegateResultOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDelegateResult) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the delegate
func (o GetDelegateResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDelegateResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The ip address of the delegate.
func (o GetDelegateResultOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetDelegateResult) string { return v.Ip }).(pulumi.StringOutput)
}

// The last time the delegate was heard from.
func (o GetDelegateResultOutput) LastHeartbeat() pulumi.StringOutput {
	return o.ApplyT(func(v GetDelegateResult) string { return v.LastHeartbeat }).(pulumi.StringOutput)
}

// The name of the delegate to query for.
func (o GetDelegateResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDelegateResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Whether the delegate is in polling mode.
func (o GetDelegateResultOutput) PollingModeEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDelegateResult) bool { return v.PollingModeEnabled }).(pulumi.BoolOutput)
}

// The id of the profile assigned to the delegate.
func (o GetDelegateResultOutput) ProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDelegateResult) string { return v.ProfileId }).(pulumi.StringOutput)
}

// The status of the delegate to query for. Valid values are DELETED, ENABLED, WAITING*FOR*APPROVAL
func (o GetDelegateResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDelegateResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The type of the delegate to query for. Valid values are DOCKER, ECS, HELM*DELEGATE, KUBERNETES, SHELL*SCRIPT
func (o GetDelegateResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDelegateResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The version of the delegate.
func (o GetDelegateResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetDelegateResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDelegateResultOutput{})
}
