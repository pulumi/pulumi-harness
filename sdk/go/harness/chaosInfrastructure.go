// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harness

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Chaos Infrastructure.
//
// ## Example to create Chaos Infrastructure
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := harness.NewChaosInfrastructure(ctx, "example", &harness.ChaosInfrastructureArgs{
//				Identifier:     pulumi.String("identifier"),
//				Name:           pulumi.String("name"),
//				OrgId:          pulumi.String("org_id"),
//				ProjectId:      pulumi.String("project_id"),
//				EnvironmentId:  pulumi.String("env_id"),
//				Namespace:      pulumi.String("namespace"),
//				ServiceAccount: pulumi.String("service_acc_name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import using the Chaos Infra ID.
//
// ```sh
// $ pulumi import harness:index/chaosInfrastructure:ChaosInfrastructure example <chaos_infra_id>
// ```
type ChaosInfrastructure struct {
	pulumi.CustomResourceState

	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Environment ID of the chaos infrastructure.
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Namespace of the chaos infrastructure.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Service Account of the chaos infrastructure.
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewChaosInfrastructure registers a new resource with the given unique name, arguments, and options.
func NewChaosInfrastructure(ctx *pulumi.Context,
	name string, args *ChaosInfrastructureArgs, opts ...pulumi.ResourceOption) (*ChaosInfrastructure, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.ServiceAccount == nil {
		return nil, errors.New("invalid value for required argument 'ServiceAccount'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ChaosInfrastructure
	err := ctx.RegisterResource("harness:index/chaosInfrastructure:ChaosInfrastructure", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChaosInfrastructure gets an existing ChaosInfrastructure resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChaosInfrastructure(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChaosInfrastructureState, opts ...pulumi.ResourceOption) (*ChaosInfrastructure, error) {
	var resource ChaosInfrastructure
	err := ctx.ReadResource("harness:index/chaosInfrastructure:ChaosInfrastructure", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChaosInfrastructure resources.
type chaosInfrastructureState struct {
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Environment ID of the chaos infrastructure.
	EnvironmentId *string `pulumi:"environmentId"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Namespace of the chaos infrastructure.
	Namespace *string `pulumi:"namespace"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Service Account of the chaos infrastructure.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

type ChaosInfrastructureState struct {
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Environment ID of the chaos infrastructure.
	EnvironmentId pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Namespace of the chaos infrastructure.
	Namespace pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Service Account of the chaos infrastructure.
	ServiceAccount pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (ChaosInfrastructureState) ElementType() reflect.Type {
	return reflect.TypeOf((*chaosInfrastructureState)(nil)).Elem()
}

type chaosInfrastructureArgs struct {
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Environment ID of the chaos infrastructure.
	EnvironmentId string `pulumi:"environmentId"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Namespace of the chaos infrastructure.
	Namespace string `pulumi:"namespace"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Service Account of the chaos infrastructure.
	ServiceAccount string `pulumi:"serviceAccount"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a ChaosInfrastructure resource.
type ChaosInfrastructureArgs struct {
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Environment ID of the chaos infrastructure.
	EnvironmentId pulumi.StringInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Namespace of the chaos infrastructure.
	Namespace pulumi.StringInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Service Account of the chaos infrastructure.
	ServiceAccount pulumi.StringInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (ChaosInfrastructureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*chaosInfrastructureArgs)(nil)).Elem()
}

type ChaosInfrastructureInput interface {
	pulumi.Input

	ToChaosInfrastructureOutput() ChaosInfrastructureOutput
	ToChaosInfrastructureOutputWithContext(ctx context.Context) ChaosInfrastructureOutput
}

func (*ChaosInfrastructure) ElementType() reflect.Type {
	return reflect.TypeOf((**ChaosInfrastructure)(nil)).Elem()
}

func (i *ChaosInfrastructure) ToChaosInfrastructureOutput() ChaosInfrastructureOutput {
	return i.ToChaosInfrastructureOutputWithContext(context.Background())
}

func (i *ChaosInfrastructure) ToChaosInfrastructureOutputWithContext(ctx context.Context) ChaosInfrastructureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChaosInfrastructureOutput)
}

// ChaosInfrastructureArrayInput is an input type that accepts ChaosInfrastructureArray and ChaosInfrastructureArrayOutput values.
// You can construct a concrete instance of `ChaosInfrastructureArrayInput` via:
//
//	ChaosInfrastructureArray{ ChaosInfrastructureArgs{...} }
type ChaosInfrastructureArrayInput interface {
	pulumi.Input

	ToChaosInfrastructureArrayOutput() ChaosInfrastructureArrayOutput
	ToChaosInfrastructureArrayOutputWithContext(context.Context) ChaosInfrastructureArrayOutput
}

type ChaosInfrastructureArray []ChaosInfrastructureInput

func (ChaosInfrastructureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChaosInfrastructure)(nil)).Elem()
}

func (i ChaosInfrastructureArray) ToChaosInfrastructureArrayOutput() ChaosInfrastructureArrayOutput {
	return i.ToChaosInfrastructureArrayOutputWithContext(context.Background())
}

func (i ChaosInfrastructureArray) ToChaosInfrastructureArrayOutputWithContext(ctx context.Context) ChaosInfrastructureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChaosInfrastructureArrayOutput)
}

// ChaosInfrastructureMapInput is an input type that accepts ChaosInfrastructureMap and ChaosInfrastructureMapOutput values.
// You can construct a concrete instance of `ChaosInfrastructureMapInput` via:
//
//	ChaosInfrastructureMap{ "key": ChaosInfrastructureArgs{...} }
type ChaosInfrastructureMapInput interface {
	pulumi.Input

	ToChaosInfrastructureMapOutput() ChaosInfrastructureMapOutput
	ToChaosInfrastructureMapOutputWithContext(context.Context) ChaosInfrastructureMapOutput
}

type ChaosInfrastructureMap map[string]ChaosInfrastructureInput

func (ChaosInfrastructureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChaosInfrastructure)(nil)).Elem()
}

func (i ChaosInfrastructureMap) ToChaosInfrastructureMapOutput() ChaosInfrastructureMapOutput {
	return i.ToChaosInfrastructureMapOutputWithContext(context.Background())
}

func (i ChaosInfrastructureMap) ToChaosInfrastructureMapOutputWithContext(ctx context.Context) ChaosInfrastructureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChaosInfrastructureMapOutput)
}

type ChaosInfrastructureOutput struct{ *pulumi.OutputState }

func (ChaosInfrastructureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChaosInfrastructure)(nil)).Elem()
}

func (o ChaosInfrastructureOutput) ToChaosInfrastructureOutput() ChaosInfrastructureOutput {
	return o
}

func (o ChaosInfrastructureOutput) ToChaosInfrastructureOutputWithContext(ctx context.Context) ChaosInfrastructureOutput {
	return o
}

// Description of the resource.
func (o ChaosInfrastructureOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChaosInfrastructure) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Environment ID of the chaos infrastructure.
func (o ChaosInfrastructureOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ChaosInfrastructure) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o ChaosInfrastructureOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ChaosInfrastructure) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o ChaosInfrastructureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ChaosInfrastructure) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Namespace of the chaos infrastructure.
func (o ChaosInfrastructureOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *ChaosInfrastructure) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o ChaosInfrastructureOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChaosInfrastructure) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o ChaosInfrastructureOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChaosInfrastructure) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Service Account of the chaos infrastructure.
func (o ChaosInfrastructureOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *ChaosInfrastructure) pulumi.StringOutput { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Tags to associate with the resource.
func (o ChaosInfrastructureOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ChaosInfrastructure) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type ChaosInfrastructureArrayOutput struct{ *pulumi.OutputState }

func (ChaosInfrastructureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChaosInfrastructure)(nil)).Elem()
}

func (o ChaosInfrastructureArrayOutput) ToChaosInfrastructureArrayOutput() ChaosInfrastructureArrayOutput {
	return o
}

func (o ChaosInfrastructureArrayOutput) ToChaosInfrastructureArrayOutputWithContext(ctx context.Context) ChaosInfrastructureArrayOutput {
	return o
}

func (o ChaosInfrastructureArrayOutput) Index(i pulumi.IntInput) ChaosInfrastructureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ChaosInfrastructure {
		return vs[0].([]*ChaosInfrastructure)[vs[1].(int)]
	}).(ChaosInfrastructureOutput)
}

type ChaosInfrastructureMapOutput struct{ *pulumi.OutputState }

func (ChaosInfrastructureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChaosInfrastructure)(nil)).Elem()
}

func (o ChaosInfrastructureMapOutput) ToChaosInfrastructureMapOutput() ChaosInfrastructureMapOutput {
	return o
}

func (o ChaosInfrastructureMapOutput) ToChaosInfrastructureMapOutputWithContext(ctx context.Context) ChaosInfrastructureMapOutput {
	return o
}

func (o ChaosInfrastructureMapOutput) MapIndex(k pulumi.StringInput) ChaosInfrastructureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ChaosInfrastructure {
		return vs[0].(map[string]*ChaosInfrastructure)[vs[1].(string)]
	}).(ChaosInfrastructureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChaosInfrastructureInput)(nil)).Elem(), &ChaosInfrastructure{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChaosInfrastructureArrayInput)(nil)).Elem(), ChaosInfrastructureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChaosInfrastructureMapInput)(nil)).Elem(), ChaosInfrastructureMap{})
	pulumi.RegisterOutputType(ChaosInfrastructureOutput{})
	pulumi.RegisterOutputType(ChaosInfrastructureArrayOutput{})
	pulumi.RegisterOutputType(ChaosInfrastructureMapOutput{})
}
