// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudprovider

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating an AWS cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `createBeforeDestroy = true` lifecycle setting.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness"
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/cloudprovider"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := harness.GetSecretManager(ctx, &harness.GetSecretManagerArgs{
//				Default: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			awsAccessKey, err := harness.NewEncryptedText(ctx, "aws_access_key", &harness.EncryptedTextArgs{
//				Name:            pulumi.String("aws_access_key"),
//				Value:           pulumi.String("<ACCESS_KEY_ID>"),
//				SecretManagerId: pulumi.String(_default.Id),
//			})
//			if err != nil {
//				return err
//			}
//			awsSecretKey, err := harness.NewEncryptedText(ctx, "aws_secret_key", &harness.EncryptedTextArgs{
//				Name:            pulumi.String("aws_secret_key"),
//				Value:           pulumi.String("<SECRET_KEY_ID>"),
//				SecretManagerId: pulumi.String(_default.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudprovider.NewAws(ctx, "aws", &cloudprovider.AwsArgs{
//				Name:                      pulumi.String("Example aws cloud provider"),
//				AccessKeyIdSecretName:     awsAccessKey.Name,
//				SecretAccessKeySecretName: awsSecretKey.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import using the Harness aws cloud provider id.
//
// ```sh
// $ pulumi import harness:cloudprovider/aws:Aws example <provider_id>
// ```
type Aws struct {
	pulumi.CustomResourceState

	// The plain text AWS access key id.
	AccessKeyId pulumi.StringPtrOutput `pulumi:"accessKeyId"`
	// The name of the Harness secret containing the AWS access key id
	AccessKeyIdSecretName pulumi.StringPtrOutput `pulumi:"accessKeyIdSecretName"`
	// Configuration for assuming a cross account role.
	AssumeCrossAccountRole AwsAssumeCrossAccountRolePtrOutput `pulumi:"assumeCrossAccountRole"`
	// Select the Delegate to use via one of its Selectors.
	DelegateSelector pulumi.StringPtrOutput `pulumi:"delegateSelector"`
	// The name of the cloud provider.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Harness secret containing the AWS secret access key.
	SecretAccessKeySecretName pulumi.StringPtrOutput `pulumi:"secretAccessKeySecretName"`
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes AwsUsageScopeArrayOutput `pulumi:"usageScopes"`
	// Use the EC2 Instance Profile for Service Accounts.
	UseEc2IamCredentials pulumi.BoolPtrOutput `pulumi:"useEc2IamCredentials"`
	// Use the AWS IAM Role for Service Accounts.
	UseIrsa pulumi.BoolPtrOutput `pulumi:"useIrsa"`
}

// NewAws registers a new resource with the given unique name, arguments, and options.
func NewAws(ctx *pulumi.Context,
	name string, args *AwsArgs, opts ...pulumi.ResourceOption) (*Aws, error) {
	if args == nil {
		args = &AwsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Aws
	err := ctx.RegisterResource("harness:cloudprovider/aws:Aws", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAws gets an existing Aws resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAws(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsState, opts ...pulumi.ResourceOption) (*Aws, error) {
	var resource Aws
	err := ctx.ReadResource("harness:cloudprovider/aws:Aws", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Aws resources.
type awsState struct {
	// The plain text AWS access key id.
	AccessKeyId *string `pulumi:"accessKeyId"`
	// The name of the Harness secret containing the AWS access key id
	AccessKeyIdSecretName *string `pulumi:"accessKeyIdSecretName"`
	// Configuration for assuming a cross account role.
	AssumeCrossAccountRole *AwsAssumeCrossAccountRole `pulumi:"assumeCrossAccountRole"`
	// Select the Delegate to use via one of its Selectors.
	DelegateSelector *string `pulumi:"delegateSelector"`
	// The name of the cloud provider.
	Name *string `pulumi:"name"`
	// The name of the Harness secret containing the AWS secret access key.
	SecretAccessKeySecretName *string `pulumi:"secretAccessKeySecretName"`
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes []AwsUsageScope `pulumi:"usageScopes"`
	// Use the EC2 Instance Profile for Service Accounts.
	UseEc2IamCredentials *bool `pulumi:"useEc2IamCredentials"`
	// Use the AWS IAM Role for Service Accounts.
	UseIrsa *bool `pulumi:"useIrsa"`
}

type AwsState struct {
	// The plain text AWS access key id.
	AccessKeyId pulumi.StringPtrInput
	// The name of the Harness secret containing the AWS access key id
	AccessKeyIdSecretName pulumi.StringPtrInput
	// Configuration for assuming a cross account role.
	AssumeCrossAccountRole AwsAssumeCrossAccountRolePtrInput
	// Select the Delegate to use via one of its Selectors.
	DelegateSelector pulumi.StringPtrInput
	// The name of the cloud provider.
	Name pulumi.StringPtrInput
	// The name of the Harness secret containing the AWS secret access key.
	SecretAccessKeySecretName pulumi.StringPtrInput
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes AwsUsageScopeArrayInput
	// Use the EC2 Instance Profile for Service Accounts.
	UseEc2IamCredentials pulumi.BoolPtrInput
	// Use the AWS IAM Role for Service Accounts.
	UseIrsa pulumi.BoolPtrInput
}

func (AwsState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsState)(nil)).Elem()
}

type awsArgs struct {
	// The plain text AWS access key id.
	AccessKeyId *string `pulumi:"accessKeyId"`
	// The name of the Harness secret containing the AWS access key id
	AccessKeyIdSecretName *string `pulumi:"accessKeyIdSecretName"`
	// Configuration for assuming a cross account role.
	AssumeCrossAccountRole *AwsAssumeCrossAccountRole `pulumi:"assumeCrossAccountRole"`
	// Select the Delegate to use via one of its Selectors.
	DelegateSelector *string `pulumi:"delegateSelector"`
	// The name of the cloud provider.
	Name *string `pulumi:"name"`
	// The name of the Harness secret containing the AWS secret access key.
	SecretAccessKeySecretName *string `pulumi:"secretAccessKeySecretName"`
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes []AwsUsageScope `pulumi:"usageScopes"`
	// Use the EC2 Instance Profile for Service Accounts.
	UseEc2IamCredentials *bool `pulumi:"useEc2IamCredentials"`
	// Use the AWS IAM Role for Service Accounts.
	UseIrsa *bool `pulumi:"useIrsa"`
}

// The set of arguments for constructing a Aws resource.
type AwsArgs struct {
	// The plain text AWS access key id.
	AccessKeyId pulumi.StringPtrInput
	// The name of the Harness secret containing the AWS access key id
	AccessKeyIdSecretName pulumi.StringPtrInput
	// Configuration for assuming a cross account role.
	AssumeCrossAccountRole AwsAssumeCrossAccountRolePtrInput
	// Select the Delegate to use via one of its Selectors.
	DelegateSelector pulumi.StringPtrInput
	// The name of the cloud provider.
	Name pulumi.StringPtrInput
	// The name of the Harness secret containing the AWS secret access key.
	SecretAccessKeySecretName pulumi.StringPtrInput
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes AwsUsageScopeArrayInput
	// Use the EC2 Instance Profile for Service Accounts.
	UseEc2IamCredentials pulumi.BoolPtrInput
	// Use the AWS IAM Role for Service Accounts.
	UseIrsa pulumi.BoolPtrInput
}

func (AwsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsArgs)(nil)).Elem()
}

type AwsInput interface {
	pulumi.Input

	ToAwsOutput() AwsOutput
	ToAwsOutputWithContext(ctx context.Context) AwsOutput
}

func (*Aws) ElementType() reflect.Type {
	return reflect.TypeOf((**Aws)(nil)).Elem()
}

func (i *Aws) ToAwsOutput() AwsOutput {
	return i.ToAwsOutputWithContext(context.Background())
}

func (i *Aws) ToAwsOutputWithContext(ctx context.Context) AwsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsOutput)
}

// AwsArrayInput is an input type that accepts AwsArray and AwsArrayOutput values.
// You can construct a concrete instance of `AwsArrayInput` via:
//
//	AwsArray{ AwsArgs{...} }
type AwsArrayInput interface {
	pulumi.Input

	ToAwsArrayOutput() AwsArrayOutput
	ToAwsArrayOutputWithContext(context.Context) AwsArrayOutput
}

type AwsArray []AwsInput

func (AwsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Aws)(nil)).Elem()
}

func (i AwsArray) ToAwsArrayOutput() AwsArrayOutput {
	return i.ToAwsArrayOutputWithContext(context.Background())
}

func (i AwsArray) ToAwsArrayOutputWithContext(ctx context.Context) AwsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsArrayOutput)
}

// AwsMapInput is an input type that accepts AwsMap and AwsMapOutput values.
// You can construct a concrete instance of `AwsMapInput` via:
//
//	AwsMap{ "key": AwsArgs{...} }
type AwsMapInput interface {
	pulumi.Input

	ToAwsMapOutput() AwsMapOutput
	ToAwsMapOutputWithContext(context.Context) AwsMapOutput
}

type AwsMap map[string]AwsInput

func (AwsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Aws)(nil)).Elem()
}

func (i AwsMap) ToAwsMapOutput() AwsMapOutput {
	return i.ToAwsMapOutputWithContext(context.Background())
}

func (i AwsMap) ToAwsMapOutputWithContext(ctx context.Context) AwsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsMapOutput)
}

type AwsOutput struct{ *pulumi.OutputState }

func (AwsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Aws)(nil)).Elem()
}

func (o AwsOutput) ToAwsOutput() AwsOutput {
	return o
}

func (o AwsOutput) ToAwsOutputWithContext(ctx context.Context) AwsOutput {
	return o
}

// The plain text AWS access key id.
func (o AwsOutput) AccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aws) pulumi.StringPtrOutput { return v.AccessKeyId }).(pulumi.StringPtrOutput)
}

// The name of the Harness secret containing the AWS access key id
func (o AwsOutput) AccessKeyIdSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aws) pulumi.StringPtrOutput { return v.AccessKeyIdSecretName }).(pulumi.StringPtrOutput)
}

// Configuration for assuming a cross account role.
func (o AwsOutput) AssumeCrossAccountRole() AwsAssumeCrossAccountRolePtrOutput {
	return o.ApplyT(func(v *Aws) AwsAssumeCrossAccountRolePtrOutput { return v.AssumeCrossAccountRole }).(AwsAssumeCrossAccountRolePtrOutput)
}

// Select the Delegate to use via one of its Selectors.
func (o AwsOutput) DelegateSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aws) pulumi.StringPtrOutput { return v.DelegateSelector }).(pulumi.StringPtrOutput)
}

// The name of the cloud provider.
func (o AwsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Aws) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Harness secret containing the AWS secret access key.
func (o AwsOutput) SecretAccessKeySecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aws) pulumi.StringPtrOutput { return v.SecretAccessKeySecretName }).(pulumi.StringPtrOutput)
}

// This block is used for scoping the resource to a specific set of applications or environments.
func (o AwsOutput) UsageScopes() AwsUsageScopeArrayOutput {
	return o.ApplyT(func(v *Aws) AwsUsageScopeArrayOutput { return v.UsageScopes }).(AwsUsageScopeArrayOutput)
}

// Use the EC2 Instance Profile for Service Accounts.
func (o AwsOutput) UseEc2IamCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Aws) pulumi.BoolPtrOutput { return v.UseEc2IamCredentials }).(pulumi.BoolPtrOutput)
}

// Use the AWS IAM Role for Service Accounts.
func (o AwsOutput) UseIrsa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Aws) pulumi.BoolPtrOutput { return v.UseIrsa }).(pulumi.BoolPtrOutput)
}

type AwsArrayOutput struct{ *pulumi.OutputState }

func (AwsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Aws)(nil)).Elem()
}

func (o AwsArrayOutput) ToAwsArrayOutput() AwsArrayOutput {
	return o
}

func (o AwsArrayOutput) ToAwsArrayOutputWithContext(ctx context.Context) AwsArrayOutput {
	return o
}

func (o AwsArrayOutput) Index(i pulumi.IntInput) AwsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Aws {
		return vs[0].([]*Aws)[vs[1].(int)]
	}).(AwsOutput)
}

type AwsMapOutput struct{ *pulumi.OutputState }

func (AwsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Aws)(nil)).Elem()
}

func (o AwsMapOutput) ToAwsMapOutput() AwsMapOutput {
	return o
}

func (o AwsMapOutput) ToAwsMapOutputWithContext(ctx context.Context) AwsMapOutput {
	return o
}

func (o AwsMapOutput) MapIndex(k pulumi.StringInput) AwsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Aws {
		return vs[0].(map[string]*Aws)[vs[1].(string)]
	}).(AwsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsInput)(nil)).Elem(), &Aws{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsArrayInput)(nil)).Elem(), AwsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsMapInput)(nil)).Elem(), AwsMap{})
	pulumi.RegisterOutputType(AwsOutput{})
	pulumi.RegisterOutputType(AwsArrayOutput{})
	pulumi.RegisterOutputType(AwsMapOutput{})
}
