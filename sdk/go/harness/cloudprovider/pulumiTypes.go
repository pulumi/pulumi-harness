// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudprovider

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AwsAssumeCrossAccountRole struct {
	// If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.
	ExternalId *string `pulumi:"externalId"`
	// This is an IAM role in the target deployment AWS account.
	RoleArn string `pulumi:"roleArn"`
}

// AwsAssumeCrossAccountRoleInput is an input type that accepts AwsAssumeCrossAccountRoleArgs and AwsAssumeCrossAccountRoleOutput values.
// You can construct a concrete instance of `AwsAssumeCrossAccountRoleInput` via:
//
//	AwsAssumeCrossAccountRoleArgs{...}
type AwsAssumeCrossAccountRoleInput interface {
	pulumi.Input

	ToAwsAssumeCrossAccountRoleOutput() AwsAssumeCrossAccountRoleOutput
	ToAwsAssumeCrossAccountRoleOutputWithContext(context.Context) AwsAssumeCrossAccountRoleOutput
}

type AwsAssumeCrossAccountRoleArgs struct {
	// If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.
	ExternalId pulumi.StringPtrInput `pulumi:"externalId"`
	// This is an IAM role in the target deployment AWS account.
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
}

func (AwsAssumeCrossAccountRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsAssumeCrossAccountRole)(nil)).Elem()
}

func (i AwsAssumeCrossAccountRoleArgs) ToAwsAssumeCrossAccountRoleOutput() AwsAssumeCrossAccountRoleOutput {
	return i.ToAwsAssumeCrossAccountRoleOutputWithContext(context.Background())
}

func (i AwsAssumeCrossAccountRoleArgs) ToAwsAssumeCrossAccountRoleOutputWithContext(ctx context.Context) AwsAssumeCrossAccountRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsAssumeCrossAccountRoleOutput)
}

func (i AwsAssumeCrossAccountRoleArgs) ToAwsAssumeCrossAccountRolePtrOutput() AwsAssumeCrossAccountRolePtrOutput {
	return i.ToAwsAssumeCrossAccountRolePtrOutputWithContext(context.Background())
}

func (i AwsAssumeCrossAccountRoleArgs) ToAwsAssumeCrossAccountRolePtrOutputWithContext(ctx context.Context) AwsAssumeCrossAccountRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsAssumeCrossAccountRoleOutput).ToAwsAssumeCrossAccountRolePtrOutputWithContext(ctx)
}

// AwsAssumeCrossAccountRolePtrInput is an input type that accepts AwsAssumeCrossAccountRoleArgs, AwsAssumeCrossAccountRolePtr and AwsAssumeCrossAccountRolePtrOutput values.
// You can construct a concrete instance of `AwsAssumeCrossAccountRolePtrInput` via:
//
//	        AwsAssumeCrossAccountRoleArgs{...}
//
//	or:
//
//	        nil
type AwsAssumeCrossAccountRolePtrInput interface {
	pulumi.Input

	ToAwsAssumeCrossAccountRolePtrOutput() AwsAssumeCrossAccountRolePtrOutput
	ToAwsAssumeCrossAccountRolePtrOutputWithContext(context.Context) AwsAssumeCrossAccountRolePtrOutput
}

type awsAssumeCrossAccountRolePtrType AwsAssumeCrossAccountRoleArgs

func AwsAssumeCrossAccountRolePtr(v *AwsAssumeCrossAccountRoleArgs) AwsAssumeCrossAccountRolePtrInput {
	return (*awsAssumeCrossAccountRolePtrType)(v)
}

func (*awsAssumeCrossAccountRolePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsAssumeCrossAccountRole)(nil)).Elem()
}

func (i *awsAssumeCrossAccountRolePtrType) ToAwsAssumeCrossAccountRolePtrOutput() AwsAssumeCrossAccountRolePtrOutput {
	return i.ToAwsAssumeCrossAccountRolePtrOutputWithContext(context.Background())
}

func (i *awsAssumeCrossAccountRolePtrType) ToAwsAssumeCrossAccountRolePtrOutputWithContext(ctx context.Context) AwsAssumeCrossAccountRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsAssumeCrossAccountRolePtrOutput)
}

type AwsAssumeCrossAccountRoleOutput struct{ *pulumi.OutputState }

func (AwsAssumeCrossAccountRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsAssumeCrossAccountRole)(nil)).Elem()
}

func (o AwsAssumeCrossAccountRoleOutput) ToAwsAssumeCrossAccountRoleOutput() AwsAssumeCrossAccountRoleOutput {
	return o
}

func (o AwsAssumeCrossAccountRoleOutput) ToAwsAssumeCrossAccountRoleOutputWithContext(ctx context.Context) AwsAssumeCrossAccountRoleOutput {
	return o
}

func (o AwsAssumeCrossAccountRoleOutput) ToAwsAssumeCrossAccountRolePtrOutput() AwsAssumeCrossAccountRolePtrOutput {
	return o.ToAwsAssumeCrossAccountRolePtrOutputWithContext(context.Background())
}

func (o AwsAssumeCrossAccountRoleOutput) ToAwsAssumeCrossAccountRolePtrOutputWithContext(ctx context.Context) AwsAssumeCrossAccountRolePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AwsAssumeCrossAccountRole) *AwsAssumeCrossAccountRole {
		return &v
	}).(AwsAssumeCrossAccountRolePtrOutput)
}

// If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.
func (o AwsAssumeCrossAccountRoleOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AwsAssumeCrossAccountRole) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

// This is an IAM role in the target deployment AWS account.
func (o AwsAssumeCrossAccountRoleOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v AwsAssumeCrossAccountRole) string { return v.RoleArn }).(pulumi.StringOutput)
}

type AwsAssumeCrossAccountRolePtrOutput struct{ *pulumi.OutputState }

func (AwsAssumeCrossAccountRolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsAssumeCrossAccountRole)(nil)).Elem()
}

func (o AwsAssumeCrossAccountRolePtrOutput) ToAwsAssumeCrossAccountRolePtrOutput() AwsAssumeCrossAccountRolePtrOutput {
	return o
}

func (o AwsAssumeCrossAccountRolePtrOutput) ToAwsAssumeCrossAccountRolePtrOutputWithContext(ctx context.Context) AwsAssumeCrossAccountRolePtrOutput {
	return o
}

func (o AwsAssumeCrossAccountRolePtrOutput) Elem() AwsAssumeCrossAccountRoleOutput {
	return o.ApplyT(func(v *AwsAssumeCrossAccountRole) AwsAssumeCrossAccountRole {
		if v != nil {
			return *v
		}
		var ret AwsAssumeCrossAccountRole
		return ret
	}).(AwsAssumeCrossAccountRoleOutput)
}

// If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.
func (o AwsAssumeCrossAccountRolePtrOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsAssumeCrossAccountRole) *string {
		if v == nil {
			return nil
		}
		return v.ExternalId
	}).(pulumi.StringPtrOutput)
}

// This is an IAM role in the target deployment AWS account.
func (o AwsAssumeCrossAccountRolePtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsAssumeCrossAccountRole) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

type AwsUsageScope struct {
	// Id of the application to scope to. If empty then this scope applies to all applications.
	ApplicationId *string `pulumi:"applicationId"`
	// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	EnvironmentFilterType *string `pulumi:"environmentFilterType"`
	// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
	EnvironmentId *string `pulumi:"environmentId"`
}

// AwsUsageScopeInput is an input type that accepts AwsUsageScopeArgs and AwsUsageScopeOutput values.
// You can construct a concrete instance of `AwsUsageScopeInput` via:
//
//	AwsUsageScopeArgs{...}
type AwsUsageScopeInput interface {
	pulumi.Input

	ToAwsUsageScopeOutput() AwsUsageScopeOutput
	ToAwsUsageScopeOutputWithContext(context.Context) AwsUsageScopeOutput
}

type AwsUsageScopeArgs struct {
	// Id of the application to scope to. If empty then this scope applies to all applications.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
	// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	EnvironmentFilterType pulumi.StringPtrInput `pulumi:"environmentFilterType"`
	// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
}

func (AwsUsageScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsUsageScope)(nil)).Elem()
}

func (i AwsUsageScopeArgs) ToAwsUsageScopeOutput() AwsUsageScopeOutput {
	return i.ToAwsUsageScopeOutputWithContext(context.Background())
}

func (i AwsUsageScopeArgs) ToAwsUsageScopeOutputWithContext(ctx context.Context) AwsUsageScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsUsageScopeOutput)
}

// AwsUsageScopeArrayInput is an input type that accepts AwsUsageScopeArray and AwsUsageScopeArrayOutput values.
// You can construct a concrete instance of `AwsUsageScopeArrayInput` via:
//
//	AwsUsageScopeArray{ AwsUsageScopeArgs{...} }
type AwsUsageScopeArrayInput interface {
	pulumi.Input

	ToAwsUsageScopeArrayOutput() AwsUsageScopeArrayOutput
	ToAwsUsageScopeArrayOutputWithContext(context.Context) AwsUsageScopeArrayOutput
}

type AwsUsageScopeArray []AwsUsageScopeInput

func (AwsUsageScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AwsUsageScope)(nil)).Elem()
}

func (i AwsUsageScopeArray) ToAwsUsageScopeArrayOutput() AwsUsageScopeArrayOutput {
	return i.ToAwsUsageScopeArrayOutputWithContext(context.Background())
}

func (i AwsUsageScopeArray) ToAwsUsageScopeArrayOutputWithContext(ctx context.Context) AwsUsageScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsUsageScopeArrayOutput)
}

type AwsUsageScopeOutput struct{ *pulumi.OutputState }

func (AwsUsageScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsUsageScope)(nil)).Elem()
}

func (o AwsUsageScopeOutput) ToAwsUsageScopeOutput() AwsUsageScopeOutput {
	return o
}

func (o AwsUsageScopeOutput) ToAwsUsageScopeOutputWithContext(ctx context.Context) AwsUsageScopeOutput {
	return o
}

// Id of the application to scope to. If empty then this scope applies to all applications.
func (o AwsUsageScopeOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AwsUsageScope) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
func (o AwsUsageScopeOutput) EnvironmentFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AwsUsageScope) *string { return v.EnvironmentFilterType }).(pulumi.StringPtrOutput)
}

// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
func (o AwsUsageScopeOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AwsUsageScope) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

type AwsUsageScopeArrayOutput struct{ *pulumi.OutputState }

func (AwsUsageScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AwsUsageScope)(nil)).Elem()
}

func (o AwsUsageScopeArrayOutput) ToAwsUsageScopeArrayOutput() AwsUsageScopeArrayOutput {
	return o
}

func (o AwsUsageScopeArrayOutput) ToAwsUsageScopeArrayOutputWithContext(ctx context.Context) AwsUsageScopeArrayOutput {
	return o
}

func (o AwsUsageScopeArrayOutput) Index(i pulumi.IntInput) AwsUsageScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AwsUsageScope {
		return vs[0].([]AwsUsageScope)[vs[1].(int)]
	}).(AwsUsageScopeOutput)
}

type DatacenterUsageScope struct {
	// Id of the application to scope to. If empty then this scope applies to all applications.
	ApplicationId *string `pulumi:"applicationId"`
	// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	EnvironmentFilterType *string `pulumi:"environmentFilterType"`
	// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
	EnvironmentId *string `pulumi:"environmentId"`
}

// DatacenterUsageScopeInput is an input type that accepts DatacenterUsageScopeArgs and DatacenterUsageScopeOutput values.
// You can construct a concrete instance of `DatacenterUsageScopeInput` via:
//
//	DatacenterUsageScopeArgs{...}
type DatacenterUsageScopeInput interface {
	pulumi.Input

	ToDatacenterUsageScopeOutput() DatacenterUsageScopeOutput
	ToDatacenterUsageScopeOutputWithContext(context.Context) DatacenterUsageScopeOutput
}

type DatacenterUsageScopeArgs struct {
	// Id of the application to scope to. If empty then this scope applies to all applications.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
	// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	EnvironmentFilterType pulumi.StringPtrInput `pulumi:"environmentFilterType"`
	// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
}

func (DatacenterUsageScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatacenterUsageScope)(nil)).Elem()
}

func (i DatacenterUsageScopeArgs) ToDatacenterUsageScopeOutput() DatacenterUsageScopeOutput {
	return i.ToDatacenterUsageScopeOutputWithContext(context.Background())
}

func (i DatacenterUsageScopeArgs) ToDatacenterUsageScopeOutputWithContext(ctx context.Context) DatacenterUsageScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacenterUsageScopeOutput)
}

// DatacenterUsageScopeArrayInput is an input type that accepts DatacenterUsageScopeArray and DatacenterUsageScopeArrayOutput values.
// You can construct a concrete instance of `DatacenterUsageScopeArrayInput` via:
//
//	DatacenterUsageScopeArray{ DatacenterUsageScopeArgs{...} }
type DatacenterUsageScopeArrayInput interface {
	pulumi.Input

	ToDatacenterUsageScopeArrayOutput() DatacenterUsageScopeArrayOutput
	ToDatacenterUsageScopeArrayOutputWithContext(context.Context) DatacenterUsageScopeArrayOutput
}

type DatacenterUsageScopeArray []DatacenterUsageScopeInput

func (DatacenterUsageScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatacenterUsageScope)(nil)).Elem()
}

func (i DatacenterUsageScopeArray) ToDatacenterUsageScopeArrayOutput() DatacenterUsageScopeArrayOutput {
	return i.ToDatacenterUsageScopeArrayOutputWithContext(context.Background())
}

func (i DatacenterUsageScopeArray) ToDatacenterUsageScopeArrayOutputWithContext(ctx context.Context) DatacenterUsageScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacenterUsageScopeArrayOutput)
}

type DatacenterUsageScopeOutput struct{ *pulumi.OutputState }

func (DatacenterUsageScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatacenterUsageScope)(nil)).Elem()
}

func (o DatacenterUsageScopeOutput) ToDatacenterUsageScopeOutput() DatacenterUsageScopeOutput {
	return o
}

func (o DatacenterUsageScopeOutput) ToDatacenterUsageScopeOutputWithContext(ctx context.Context) DatacenterUsageScopeOutput {
	return o
}

// Id of the application to scope to. If empty then this scope applies to all applications.
func (o DatacenterUsageScopeOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatacenterUsageScope) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
func (o DatacenterUsageScopeOutput) EnvironmentFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatacenterUsageScope) *string { return v.EnvironmentFilterType }).(pulumi.StringPtrOutput)
}

// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
func (o DatacenterUsageScopeOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatacenterUsageScope) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

type DatacenterUsageScopeArrayOutput struct{ *pulumi.OutputState }

func (DatacenterUsageScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatacenterUsageScope)(nil)).Elem()
}

func (o DatacenterUsageScopeArrayOutput) ToDatacenterUsageScopeArrayOutput() DatacenterUsageScopeArrayOutput {
	return o
}

func (o DatacenterUsageScopeArrayOutput) ToDatacenterUsageScopeArrayOutputWithContext(ctx context.Context) DatacenterUsageScopeArrayOutput {
	return o
}

func (o DatacenterUsageScopeArrayOutput) Index(i pulumi.IntInput) DatacenterUsageScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatacenterUsageScope {
		return vs[0].([]DatacenterUsageScope)[vs[1].(int)]
	}).(DatacenterUsageScopeOutput)
}

type GcpUsageScope struct {
	// Id of the application to scope to. If empty then this scope applies to all applications.
	ApplicationId *string `pulumi:"applicationId"`
	// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	EnvironmentFilterType *string `pulumi:"environmentFilterType"`
	// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
	EnvironmentId *string `pulumi:"environmentId"`
}

// GcpUsageScopeInput is an input type that accepts GcpUsageScopeArgs and GcpUsageScopeOutput values.
// You can construct a concrete instance of `GcpUsageScopeInput` via:
//
//	GcpUsageScopeArgs{...}
type GcpUsageScopeInput interface {
	pulumi.Input

	ToGcpUsageScopeOutput() GcpUsageScopeOutput
	ToGcpUsageScopeOutputWithContext(context.Context) GcpUsageScopeOutput
}

type GcpUsageScopeArgs struct {
	// Id of the application to scope to. If empty then this scope applies to all applications.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
	// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	EnvironmentFilterType pulumi.StringPtrInput `pulumi:"environmentFilterType"`
	// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
}

func (GcpUsageScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcpUsageScope)(nil)).Elem()
}

func (i GcpUsageScopeArgs) ToGcpUsageScopeOutput() GcpUsageScopeOutput {
	return i.ToGcpUsageScopeOutputWithContext(context.Background())
}

func (i GcpUsageScopeArgs) ToGcpUsageScopeOutputWithContext(ctx context.Context) GcpUsageScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpUsageScopeOutput)
}

// GcpUsageScopeArrayInput is an input type that accepts GcpUsageScopeArray and GcpUsageScopeArrayOutput values.
// You can construct a concrete instance of `GcpUsageScopeArrayInput` via:
//
//	GcpUsageScopeArray{ GcpUsageScopeArgs{...} }
type GcpUsageScopeArrayInput interface {
	pulumi.Input

	ToGcpUsageScopeArrayOutput() GcpUsageScopeArrayOutput
	ToGcpUsageScopeArrayOutputWithContext(context.Context) GcpUsageScopeArrayOutput
}

type GcpUsageScopeArray []GcpUsageScopeInput

func (GcpUsageScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GcpUsageScope)(nil)).Elem()
}

func (i GcpUsageScopeArray) ToGcpUsageScopeArrayOutput() GcpUsageScopeArrayOutput {
	return i.ToGcpUsageScopeArrayOutputWithContext(context.Background())
}

func (i GcpUsageScopeArray) ToGcpUsageScopeArrayOutputWithContext(ctx context.Context) GcpUsageScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpUsageScopeArrayOutput)
}

type GcpUsageScopeOutput struct{ *pulumi.OutputState }

func (GcpUsageScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcpUsageScope)(nil)).Elem()
}

func (o GcpUsageScopeOutput) ToGcpUsageScopeOutput() GcpUsageScopeOutput {
	return o
}

func (o GcpUsageScopeOutput) ToGcpUsageScopeOutputWithContext(ctx context.Context) GcpUsageScopeOutput {
	return o
}

// Id of the application to scope to. If empty then this scope applies to all applications.
func (o GcpUsageScopeOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcpUsageScope) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
func (o GcpUsageScopeOutput) EnvironmentFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcpUsageScope) *string { return v.EnvironmentFilterType }).(pulumi.StringPtrOutput)
}

// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
func (o GcpUsageScopeOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcpUsageScope) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

type GcpUsageScopeArrayOutput struct{ *pulumi.OutputState }

func (GcpUsageScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GcpUsageScope)(nil)).Elem()
}

func (o GcpUsageScopeArrayOutput) ToGcpUsageScopeArrayOutput() GcpUsageScopeArrayOutput {
	return o
}

func (o GcpUsageScopeArrayOutput) ToGcpUsageScopeArrayOutputWithContext(ctx context.Context) GcpUsageScopeArrayOutput {
	return o
}

func (o GcpUsageScopeArrayOutput) Index(i pulumi.IntInput) GcpUsageScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GcpUsageScope {
		return vs[0].([]GcpUsageScope)[vs[1].(int)]
	}).(GcpUsageScopeOutput)
}

type KubernetesAuthentication struct {
	// Delegate selectors to inherit the GCP credentials from.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Service account configuration for connecting to the Kubernetes cluster
	Oidc *KubernetesAuthenticationOidc `pulumi:"oidc"`
	// Username and password for authentication to the cluster
	ServiceAccount *KubernetesAuthenticationServiceAccount `pulumi:"serviceAccount"`
	// Username and password for authentication to the cluster
	UsernamePassword *KubernetesAuthenticationUsernamePassword `pulumi:"usernamePassword"`
}

// KubernetesAuthenticationInput is an input type that accepts KubernetesAuthenticationArgs and KubernetesAuthenticationOutput values.
// You can construct a concrete instance of `KubernetesAuthenticationInput` via:
//
//	KubernetesAuthenticationArgs{...}
type KubernetesAuthenticationInput interface {
	pulumi.Input

	ToKubernetesAuthenticationOutput() KubernetesAuthenticationOutput
	ToKubernetesAuthenticationOutputWithContext(context.Context) KubernetesAuthenticationOutput
}

type KubernetesAuthenticationArgs struct {
	// Delegate selectors to inherit the GCP credentials from.
	DelegateSelectors pulumi.StringArrayInput `pulumi:"delegateSelectors"`
	// Service account configuration for connecting to the Kubernetes cluster
	Oidc KubernetesAuthenticationOidcPtrInput `pulumi:"oidc"`
	// Username and password for authentication to the cluster
	ServiceAccount KubernetesAuthenticationServiceAccountPtrInput `pulumi:"serviceAccount"`
	// Username and password for authentication to the cluster
	UsernamePassword KubernetesAuthenticationUsernamePasswordPtrInput `pulumi:"usernamePassword"`
}

func (KubernetesAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesAuthentication)(nil)).Elem()
}

func (i KubernetesAuthenticationArgs) ToKubernetesAuthenticationOutput() KubernetesAuthenticationOutput {
	return i.ToKubernetesAuthenticationOutputWithContext(context.Background())
}

func (i KubernetesAuthenticationArgs) ToKubernetesAuthenticationOutputWithContext(ctx context.Context) KubernetesAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesAuthenticationOutput)
}

func (i KubernetesAuthenticationArgs) ToKubernetesAuthenticationPtrOutput() KubernetesAuthenticationPtrOutput {
	return i.ToKubernetesAuthenticationPtrOutputWithContext(context.Background())
}

func (i KubernetesAuthenticationArgs) ToKubernetesAuthenticationPtrOutputWithContext(ctx context.Context) KubernetesAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesAuthenticationOutput).ToKubernetesAuthenticationPtrOutputWithContext(ctx)
}

// KubernetesAuthenticationPtrInput is an input type that accepts KubernetesAuthenticationArgs, KubernetesAuthenticationPtr and KubernetesAuthenticationPtrOutput values.
// You can construct a concrete instance of `KubernetesAuthenticationPtrInput` via:
//
//	        KubernetesAuthenticationArgs{...}
//
//	or:
//
//	        nil
type KubernetesAuthenticationPtrInput interface {
	pulumi.Input

	ToKubernetesAuthenticationPtrOutput() KubernetesAuthenticationPtrOutput
	ToKubernetesAuthenticationPtrOutputWithContext(context.Context) KubernetesAuthenticationPtrOutput
}

type kubernetesAuthenticationPtrType KubernetesAuthenticationArgs

func KubernetesAuthenticationPtr(v *KubernetesAuthenticationArgs) KubernetesAuthenticationPtrInput {
	return (*kubernetesAuthenticationPtrType)(v)
}

func (*kubernetesAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesAuthentication)(nil)).Elem()
}

func (i *kubernetesAuthenticationPtrType) ToKubernetesAuthenticationPtrOutput() KubernetesAuthenticationPtrOutput {
	return i.ToKubernetesAuthenticationPtrOutputWithContext(context.Background())
}

func (i *kubernetesAuthenticationPtrType) ToKubernetesAuthenticationPtrOutputWithContext(ctx context.Context) KubernetesAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesAuthenticationPtrOutput)
}

type KubernetesAuthenticationOutput struct{ *pulumi.OutputState }

func (KubernetesAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesAuthentication)(nil)).Elem()
}

func (o KubernetesAuthenticationOutput) ToKubernetesAuthenticationOutput() KubernetesAuthenticationOutput {
	return o
}

func (o KubernetesAuthenticationOutput) ToKubernetesAuthenticationOutputWithContext(ctx context.Context) KubernetesAuthenticationOutput {
	return o
}

func (o KubernetesAuthenticationOutput) ToKubernetesAuthenticationPtrOutput() KubernetesAuthenticationPtrOutput {
	return o.ToKubernetesAuthenticationPtrOutputWithContext(context.Background())
}

func (o KubernetesAuthenticationOutput) ToKubernetesAuthenticationPtrOutputWithContext(ctx context.Context) KubernetesAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KubernetesAuthentication) *KubernetesAuthentication {
		return &v
	}).(KubernetesAuthenticationPtrOutput)
}

// Delegate selectors to inherit the GCP credentials from.
func (o KubernetesAuthenticationOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KubernetesAuthentication) []string { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Service account configuration for connecting to the Kubernetes cluster
func (o KubernetesAuthenticationOutput) Oidc() KubernetesAuthenticationOidcPtrOutput {
	return o.ApplyT(func(v KubernetesAuthentication) *KubernetesAuthenticationOidc { return v.Oidc }).(KubernetesAuthenticationOidcPtrOutput)
}

// Username and password for authentication to the cluster
func (o KubernetesAuthenticationOutput) ServiceAccount() KubernetesAuthenticationServiceAccountPtrOutput {
	return o.ApplyT(func(v KubernetesAuthentication) *KubernetesAuthenticationServiceAccount { return v.ServiceAccount }).(KubernetesAuthenticationServiceAccountPtrOutput)
}

// Username and password for authentication to the cluster
func (o KubernetesAuthenticationOutput) UsernamePassword() KubernetesAuthenticationUsernamePasswordPtrOutput {
	return o.ApplyT(func(v KubernetesAuthentication) *KubernetesAuthenticationUsernamePassword { return v.UsernamePassword }).(KubernetesAuthenticationUsernamePasswordPtrOutput)
}

type KubernetesAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (KubernetesAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesAuthentication)(nil)).Elem()
}

func (o KubernetesAuthenticationPtrOutput) ToKubernetesAuthenticationPtrOutput() KubernetesAuthenticationPtrOutput {
	return o
}

func (o KubernetesAuthenticationPtrOutput) ToKubernetesAuthenticationPtrOutputWithContext(ctx context.Context) KubernetesAuthenticationPtrOutput {
	return o
}

func (o KubernetesAuthenticationPtrOutput) Elem() KubernetesAuthenticationOutput {
	return o.ApplyT(func(v *KubernetesAuthentication) KubernetesAuthentication {
		if v != nil {
			return *v
		}
		var ret KubernetesAuthentication
		return ret
	}).(KubernetesAuthenticationOutput)
}

// Delegate selectors to inherit the GCP credentials from.
func (o KubernetesAuthenticationPtrOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesAuthentication) []string {
		if v == nil {
			return nil
		}
		return v.DelegateSelectors
	}).(pulumi.StringArrayOutput)
}

// Service account configuration for connecting to the Kubernetes cluster
func (o KubernetesAuthenticationPtrOutput) Oidc() KubernetesAuthenticationOidcPtrOutput {
	return o.ApplyT(func(v *KubernetesAuthentication) *KubernetesAuthenticationOidc {
		if v == nil {
			return nil
		}
		return v.Oidc
	}).(KubernetesAuthenticationOidcPtrOutput)
}

// Username and password for authentication to the cluster
func (o KubernetesAuthenticationPtrOutput) ServiceAccount() KubernetesAuthenticationServiceAccountPtrOutput {
	return o.ApplyT(func(v *KubernetesAuthentication) *KubernetesAuthenticationServiceAccount {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(KubernetesAuthenticationServiceAccountPtrOutput)
}

// Username and password for authentication to the cluster
func (o KubernetesAuthenticationPtrOutput) UsernamePassword() KubernetesAuthenticationUsernamePasswordPtrOutput {
	return o.ApplyT(func(v *KubernetesAuthentication) *KubernetesAuthenticationUsernamePassword {
		if v == nil {
			return nil
		}
		return v.UsernamePassword
	}).(KubernetesAuthenticationUsernamePasswordPtrOutput)
}

type KubernetesAuthenticationOidc struct {
	// Name of the Harness secret containing the client ID for the cluster.
	ClientIdSecretName string `pulumi:"clientIdSecretName"`
	// Name of the Harness secret containing the client secret for the cluster.
	ClientSecretSecretName *string `pulumi:"clientSecretSecretName"`
	// URL of the identity provider to use.
	IdentityProviderUrl string `pulumi:"identityProviderUrl"`
	// URL of the Kubernetes master to connect to.
	MasterUrl string `pulumi:"masterUrl"`
	// Name of the Harness secret containing the password for the cluster.
	PasswordSecretName string `pulumi:"passwordSecretName"`
	// Scopes to request from the identity provider.
	Scopes []string `pulumi:"scopes"`
	// Username for authentication to the cluster. This can be the username itself or the ID of a harness secret.
	Username string `pulumi:"username"`
}

// KubernetesAuthenticationOidcInput is an input type that accepts KubernetesAuthenticationOidcArgs and KubernetesAuthenticationOidcOutput values.
// You can construct a concrete instance of `KubernetesAuthenticationOidcInput` via:
//
//	KubernetesAuthenticationOidcArgs{...}
type KubernetesAuthenticationOidcInput interface {
	pulumi.Input

	ToKubernetesAuthenticationOidcOutput() KubernetesAuthenticationOidcOutput
	ToKubernetesAuthenticationOidcOutputWithContext(context.Context) KubernetesAuthenticationOidcOutput
}

type KubernetesAuthenticationOidcArgs struct {
	// Name of the Harness secret containing the client ID for the cluster.
	ClientIdSecretName pulumi.StringInput `pulumi:"clientIdSecretName"`
	// Name of the Harness secret containing the client secret for the cluster.
	ClientSecretSecretName pulumi.StringPtrInput `pulumi:"clientSecretSecretName"`
	// URL of the identity provider to use.
	IdentityProviderUrl pulumi.StringInput `pulumi:"identityProviderUrl"`
	// URL of the Kubernetes master to connect to.
	MasterUrl pulumi.StringInput `pulumi:"masterUrl"`
	// Name of the Harness secret containing the password for the cluster.
	PasswordSecretName pulumi.StringInput `pulumi:"passwordSecretName"`
	// Scopes to request from the identity provider.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
	// Username for authentication to the cluster. This can be the username itself or the ID of a harness secret.
	Username pulumi.StringInput `pulumi:"username"`
}

func (KubernetesAuthenticationOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesAuthenticationOidc)(nil)).Elem()
}

func (i KubernetesAuthenticationOidcArgs) ToKubernetesAuthenticationOidcOutput() KubernetesAuthenticationOidcOutput {
	return i.ToKubernetesAuthenticationOidcOutputWithContext(context.Background())
}

func (i KubernetesAuthenticationOidcArgs) ToKubernetesAuthenticationOidcOutputWithContext(ctx context.Context) KubernetesAuthenticationOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesAuthenticationOidcOutput)
}

func (i KubernetesAuthenticationOidcArgs) ToKubernetesAuthenticationOidcPtrOutput() KubernetesAuthenticationOidcPtrOutput {
	return i.ToKubernetesAuthenticationOidcPtrOutputWithContext(context.Background())
}

func (i KubernetesAuthenticationOidcArgs) ToKubernetesAuthenticationOidcPtrOutputWithContext(ctx context.Context) KubernetesAuthenticationOidcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesAuthenticationOidcOutput).ToKubernetesAuthenticationOidcPtrOutputWithContext(ctx)
}

// KubernetesAuthenticationOidcPtrInput is an input type that accepts KubernetesAuthenticationOidcArgs, KubernetesAuthenticationOidcPtr and KubernetesAuthenticationOidcPtrOutput values.
// You can construct a concrete instance of `KubernetesAuthenticationOidcPtrInput` via:
//
//	        KubernetesAuthenticationOidcArgs{...}
//
//	or:
//
//	        nil
type KubernetesAuthenticationOidcPtrInput interface {
	pulumi.Input

	ToKubernetesAuthenticationOidcPtrOutput() KubernetesAuthenticationOidcPtrOutput
	ToKubernetesAuthenticationOidcPtrOutputWithContext(context.Context) KubernetesAuthenticationOidcPtrOutput
}

type kubernetesAuthenticationOidcPtrType KubernetesAuthenticationOidcArgs

func KubernetesAuthenticationOidcPtr(v *KubernetesAuthenticationOidcArgs) KubernetesAuthenticationOidcPtrInput {
	return (*kubernetesAuthenticationOidcPtrType)(v)
}

func (*kubernetesAuthenticationOidcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesAuthenticationOidc)(nil)).Elem()
}

func (i *kubernetesAuthenticationOidcPtrType) ToKubernetesAuthenticationOidcPtrOutput() KubernetesAuthenticationOidcPtrOutput {
	return i.ToKubernetesAuthenticationOidcPtrOutputWithContext(context.Background())
}

func (i *kubernetesAuthenticationOidcPtrType) ToKubernetesAuthenticationOidcPtrOutputWithContext(ctx context.Context) KubernetesAuthenticationOidcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesAuthenticationOidcPtrOutput)
}

type KubernetesAuthenticationOidcOutput struct{ *pulumi.OutputState }

func (KubernetesAuthenticationOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesAuthenticationOidc)(nil)).Elem()
}

func (o KubernetesAuthenticationOidcOutput) ToKubernetesAuthenticationOidcOutput() KubernetesAuthenticationOidcOutput {
	return o
}

func (o KubernetesAuthenticationOidcOutput) ToKubernetesAuthenticationOidcOutputWithContext(ctx context.Context) KubernetesAuthenticationOidcOutput {
	return o
}

func (o KubernetesAuthenticationOidcOutput) ToKubernetesAuthenticationOidcPtrOutput() KubernetesAuthenticationOidcPtrOutput {
	return o.ToKubernetesAuthenticationOidcPtrOutputWithContext(context.Background())
}

func (o KubernetesAuthenticationOidcOutput) ToKubernetesAuthenticationOidcPtrOutputWithContext(ctx context.Context) KubernetesAuthenticationOidcPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KubernetesAuthenticationOidc) *KubernetesAuthenticationOidc {
		return &v
	}).(KubernetesAuthenticationOidcPtrOutput)
}

// Name of the Harness secret containing the client ID for the cluster.
func (o KubernetesAuthenticationOidcOutput) ClientIdSecretName() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesAuthenticationOidc) string { return v.ClientIdSecretName }).(pulumi.StringOutput)
}

// Name of the Harness secret containing the client secret for the cluster.
func (o KubernetesAuthenticationOidcOutput) ClientSecretSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesAuthenticationOidc) *string { return v.ClientSecretSecretName }).(pulumi.StringPtrOutput)
}

// URL of the identity provider to use.
func (o KubernetesAuthenticationOidcOutput) IdentityProviderUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesAuthenticationOidc) string { return v.IdentityProviderUrl }).(pulumi.StringOutput)
}

// URL of the Kubernetes master to connect to.
func (o KubernetesAuthenticationOidcOutput) MasterUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesAuthenticationOidc) string { return v.MasterUrl }).(pulumi.StringOutput)
}

// Name of the Harness secret containing the password for the cluster.
func (o KubernetesAuthenticationOidcOutput) PasswordSecretName() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesAuthenticationOidc) string { return v.PasswordSecretName }).(pulumi.StringOutput)
}

// Scopes to request from the identity provider.
func (o KubernetesAuthenticationOidcOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KubernetesAuthenticationOidc) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// Username for authentication to the cluster. This can be the username itself or the ID of a harness secret.
func (o KubernetesAuthenticationOidcOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesAuthenticationOidc) string { return v.Username }).(pulumi.StringOutput)
}

type KubernetesAuthenticationOidcPtrOutput struct{ *pulumi.OutputState }

func (KubernetesAuthenticationOidcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesAuthenticationOidc)(nil)).Elem()
}

func (o KubernetesAuthenticationOidcPtrOutput) ToKubernetesAuthenticationOidcPtrOutput() KubernetesAuthenticationOidcPtrOutput {
	return o
}

func (o KubernetesAuthenticationOidcPtrOutput) ToKubernetesAuthenticationOidcPtrOutputWithContext(ctx context.Context) KubernetesAuthenticationOidcPtrOutput {
	return o
}

func (o KubernetesAuthenticationOidcPtrOutput) Elem() KubernetesAuthenticationOidcOutput {
	return o.ApplyT(func(v *KubernetesAuthenticationOidc) KubernetesAuthenticationOidc {
		if v != nil {
			return *v
		}
		var ret KubernetesAuthenticationOidc
		return ret
	}).(KubernetesAuthenticationOidcOutput)
}

// Name of the Harness secret containing the client ID for the cluster.
func (o KubernetesAuthenticationOidcPtrOutput) ClientIdSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesAuthenticationOidc) *string {
		if v == nil {
			return nil
		}
		return &v.ClientIdSecretName
	}).(pulumi.StringPtrOutput)
}

// Name of the Harness secret containing the client secret for the cluster.
func (o KubernetesAuthenticationOidcPtrOutput) ClientSecretSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesAuthenticationOidc) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretSecretName
	}).(pulumi.StringPtrOutput)
}

// URL of the identity provider to use.
func (o KubernetesAuthenticationOidcPtrOutput) IdentityProviderUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesAuthenticationOidc) *string {
		if v == nil {
			return nil
		}
		return &v.IdentityProviderUrl
	}).(pulumi.StringPtrOutput)
}

// URL of the Kubernetes master to connect to.
func (o KubernetesAuthenticationOidcPtrOutput) MasterUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesAuthenticationOidc) *string {
		if v == nil {
			return nil
		}
		return &v.MasterUrl
	}).(pulumi.StringPtrOutput)
}

// Name of the Harness secret containing the password for the cluster.
func (o KubernetesAuthenticationOidcPtrOutput) PasswordSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesAuthenticationOidc) *string {
		if v == nil {
			return nil
		}
		return &v.PasswordSecretName
	}).(pulumi.StringPtrOutput)
}

// Scopes to request from the identity provider.
func (o KubernetesAuthenticationOidcPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesAuthenticationOidc) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// Username for authentication to the cluster. This can be the username itself or the ID of a harness secret.
func (o KubernetesAuthenticationOidcPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesAuthenticationOidc) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type KubernetesAuthenticationServiceAccount struct {
	// Name of the Harness secret containing the CA certificate for the cluster.
	CaCertificateSecretName *string `pulumi:"caCertificateSecretName"`
	// URL of the Kubernetes master to connect to.
	MasterUrl string `pulumi:"masterUrl"`
	// Name of the Harness secret containing the service account token for the cluster.
	ServiceAccountTokenSecretName string `pulumi:"serviceAccountTokenSecretName"`
}

// KubernetesAuthenticationServiceAccountInput is an input type that accepts KubernetesAuthenticationServiceAccountArgs and KubernetesAuthenticationServiceAccountOutput values.
// You can construct a concrete instance of `KubernetesAuthenticationServiceAccountInput` via:
//
//	KubernetesAuthenticationServiceAccountArgs{...}
type KubernetesAuthenticationServiceAccountInput interface {
	pulumi.Input

	ToKubernetesAuthenticationServiceAccountOutput() KubernetesAuthenticationServiceAccountOutput
	ToKubernetesAuthenticationServiceAccountOutputWithContext(context.Context) KubernetesAuthenticationServiceAccountOutput
}

type KubernetesAuthenticationServiceAccountArgs struct {
	// Name of the Harness secret containing the CA certificate for the cluster.
	CaCertificateSecretName pulumi.StringPtrInput `pulumi:"caCertificateSecretName"`
	// URL of the Kubernetes master to connect to.
	MasterUrl pulumi.StringInput `pulumi:"masterUrl"`
	// Name of the Harness secret containing the service account token for the cluster.
	ServiceAccountTokenSecretName pulumi.StringInput `pulumi:"serviceAccountTokenSecretName"`
}

func (KubernetesAuthenticationServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesAuthenticationServiceAccount)(nil)).Elem()
}

func (i KubernetesAuthenticationServiceAccountArgs) ToKubernetesAuthenticationServiceAccountOutput() KubernetesAuthenticationServiceAccountOutput {
	return i.ToKubernetesAuthenticationServiceAccountOutputWithContext(context.Background())
}

func (i KubernetesAuthenticationServiceAccountArgs) ToKubernetesAuthenticationServiceAccountOutputWithContext(ctx context.Context) KubernetesAuthenticationServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesAuthenticationServiceAccountOutput)
}

func (i KubernetesAuthenticationServiceAccountArgs) ToKubernetesAuthenticationServiceAccountPtrOutput() KubernetesAuthenticationServiceAccountPtrOutput {
	return i.ToKubernetesAuthenticationServiceAccountPtrOutputWithContext(context.Background())
}

func (i KubernetesAuthenticationServiceAccountArgs) ToKubernetesAuthenticationServiceAccountPtrOutputWithContext(ctx context.Context) KubernetesAuthenticationServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesAuthenticationServiceAccountOutput).ToKubernetesAuthenticationServiceAccountPtrOutputWithContext(ctx)
}

// KubernetesAuthenticationServiceAccountPtrInput is an input type that accepts KubernetesAuthenticationServiceAccountArgs, KubernetesAuthenticationServiceAccountPtr and KubernetesAuthenticationServiceAccountPtrOutput values.
// You can construct a concrete instance of `KubernetesAuthenticationServiceAccountPtrInput` via:
//
//	        KubernetesAuthenticationServiceAccountArgs{...}
//
//	or:
//
//	        nil
type KubernetesAuthenticationServiceAccountPtrInput interface {
	pulumi.Input

	ToKubernetesAuthenticationServiceAccountPtrOutput() KubernetesAuthenticationServiceAccountPtrOutput
	ToKubernetesAuthenticationServiceAccountPtrOutputWithContext(context.Context) KubernetesAuthenticationServiceAccountPtrOutput
}

type kubernetesAuthenticationServiceAccountPtrType KubernetesAuthenticationServiceAccountArgs

func KubernetesAuthenticationServiceAccountPtr(v *KubernetesAuthenticationServiceAccountArgs) KubernetesAuthenticationServiceAccountPtrInput {
	return (*kubernetesAuthenticationServiceAccountPtrType)(v)
}

func (*kubernetesAuthenticationServiceAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesAuthenticationServiceAccount)(nil)).Elem()
}

func (i *kubernetesAuthenticationServiceAccountPtrType) ToKubernetesAuthenticationServiceAccountPtrOutput() KubernetesAuthenticationServiceAccountPtrOutput {
	return i.ToKubernetesAuthenticationServiceAccountPtrOutputWithContext(context.Background())
}

func (i *kubernetesAuthenticationServiceAccountPtrType) ToKubernetesAuthenticationServiceAccountPtrOutputWithContext(ctx context.Context) KubernetesAuthenticationServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesAuthenticationServiceAccountPtrOutput)
}

type KubernetesAuthenticationServiceAccountOutput struct{ *pulumi.OutputState }

func (KubernetesAuthenticationServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesAuthenticationServiceAccount)(nil)).Elem()
}

func (o KubernetesAuthenticationServiceAccountOutput) ToKubernetesAuthenticationServiceAccountOutput() KubernetesAuthenticationServiceAccountOutput {
	return o
}

func (o KubernetesAuthenticationServiceAccountOutput) ToKubernetesAuthenticationServiceAccountOutputWithContext(ctx context.Context) KubernetesAuthenticationServiceAccountOutput {
	return o
}

func (o KubernetesAuthenticationServiceAccountOutput) ToKubernetesAuthenticationServiceAccountPtrOutput() KubernetesAuthenticationServiceAccountPtrOutput {
	return o.ToKubernetesAuthenticationServiceAccountPtrOutputWithContext(context.Background())
}

func (o KubernetesAuthenticationServiceAccountOutput) ToKubernetesAuthenticationServiceAccountPtrOutputWithContext(ctx context.Context) KubernetesAuthenticationServiceAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KubernetesAuthenticationServiceAccount) *KubernetesAuthenticationServiceAccount {
		return &v
	}).(KubernetesAuthenticationServiceAccountPtrOutput)
}

// Name of the Harness secret containing the CA certificate for the cluster.
func (o KubernetesAuthenticationServiceAccountOutput) CaCertificateSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesAuthenticationServiceAccount) *string { return v.CaCertificateSecretName }).(pulumi.StringPtrOutput)
}

// URL of the Kubernetes master to connect to.
func (o KubernetesAuthenticationServiceAccountOutput) MasterUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesAuthenticationServiceAccount) string { return v.MasterUrl }).(pulumi.StringOutput)
}

// Name of the Harness secret containing the service account token for the cluster.
func (o KubernetesAuthenticationServiceAccountOutput) ServiceAccountTokenSecretName() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesAuthenticationServiceAccount) string { return v.ServiceAccountTokenSecretName }).(pulumi.StringOutput)
}

type KubernetesAuthenticationServiceAccountPtrOutput struct{ *pulumi.OutputState }

func (KubernetesAuthenticationServiceAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesAuthenticationServiceAccount)(nil)).Elem()
}

func (o KubernetesAuthenticationServiceAccountPtrOutput) ToKubernetesAuthenticationServiceAccountPtrOutput() KubernetesAuthenticationServiceAccountPtrOutput {
	return o
}

func (o KubernetesAuthenticationServiceAccountPtrOutput) ToKubernetesAuthenticationServiceAccountPtrOutputWithContext(ctx context.Context) KubernetesAuthenticationServiceAccountPtrOutput {
	return o
}

func (o KubernetesAuthenticationServiceAccountPtrOutput) Elem() KubernetesAuthenticationServiceAccountOutput {
	return o.ApplyT(func(v *KubernetesAuthenticationServiceAccount) KubernetesAuthenticationServiceAccount {
		if v != nil {
			return *v
		}
		var ret KubernetesAuthenticationServiceAccount
		return ret
	}).(KubernetesAuthenticationServiceAccountOutput)
}

// Name of the Harness secret containing the CA certificate for the cluster.
func (o KubernetesAuthenticationServiceAccountPtrOutput) CaCertificateSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesAuthenticationServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificateSecretName
	}).(pulumi.StringPtrOutput)
}

// URL of the Kubernetes master to connect to.
func (o KubernetesAuthenticationServiceAccountPtrOutput) MasterUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesAuthenticationServiceAccount) *string {
		if v == nil {
			return nil
		}
		return &v.MasterUrl
	}).(pulumi.StringPtrOutput)
}

// Name of the Harness secret containing the service account token for the cluster.
func (o KubernetesAuthenticationServiceAccountPtrOutput) ServiceAccountTokenSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesAuthenticationServiceAccount) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceAccountTokenSecretName
	}).(pulumi.StringPtrOutput)
}

type KubernetesAuthenticationUsernamePassword struct {
	// URL of the Kubernetes master to connect to.
	MasterUrl string `pulumi:"masterUrl"`
	// Name of the Harness secret containing the password for the cluster.
	PasswordSecretName string `pulumi:"passwordSecretName"`
	// Username for authentication to the cluster
	Username *string `pulumi:"username"`
	// Name of the Harness secret containing the username for authentication to the cluster
	UsernameSecretName *string `pulumi:"usernameSecretName"`
}

// KubernetesAuthenticationUsernamePasswordInput is an input type that accepts KubernetesAuthenticationUsernamePasswordArgs and KubernetesAuthenticationUsernamePasswordOutput values.
// You can construct a concrete instance of `KubernetesAuthenticationUsernamePasswordInput` via:
//
//	KubernetesAuthenticationUsernamePasswordArgs{...}
type KubernetesAuthenticationUsernamePasswordInput interface {
	pulumi.Input

	ToKubernetesAuthenticationUsernamePasswordOutput() KubernetesAuthenticationUsernamePasswordOutput
	ToKubernetesAuthenticationUsernamePasswordOutputWithContext(context.Context) KubernetesAuthenticationUsernamePasswordOutput
}

type KubernetesAuthenticationUsernamePasswordArgs struct {
	// URL of the Kubernetes master to connect to.
	MasterUrl pulumi.StringInput `pulumi:"masterUrl"`
	// Name of the Harness secret containing the password for the cluster.
	PasswordSecretName pulumi.StringInput `pulumi:"passwordSecretName"`
	// Username for authentication to the cluster
	Username pulumi.StringPtrInput `pulumi:"username"`
	// Name of the Harness secret containing the username for authentication to the cluster
	UsernameSecretName pulumi.StringPtrInput `pulumi:"usernameSecretName"`
}

func (KubernetesAuthenticationUsernamePasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesAuthenticationUsernamePassword)(nil)).Elem()
}

func (i KubernetesAuthenticationUsernamePasswordArgs) ToKubernetesAuthenticationUsernamePasswordOutput() KubernetesAuthenticationUsernamePasswordOutput {
	return i.ToKubernetesAuthenticationUsernamePasswordOutputWithContext(context.Background())
}

func (i KubernetesAuthenticationUsernamePasswordArgs) ToKubernetesAuthenticationUsernamePasswordOutputWithContext(ctx context.Context) KubernetesAuthenticationUsernamePasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesAuthenticationUsernamePasswordOutput)
}

func (i KubernetesAuthenticationUsernamePasswordArgs) ToKubernetesAuthenticationUsernamePasswordPtrOutput() KubernetesAuthenticationUsernamePasswordPtrOutput {
	return i.ToKubernetesAuthenticationUsernamePasswordPtrOutputWithContext(context.Background())
}

func (i KubernetesAuthenticationUsernamePasswordArgs) ToKubernetesAuthenticationUsernamePasswordPtrOutputWithContext(ctx context.Context) KubernetesAuthenticationUsernamePasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesAuthenticationUsernamePasswordOutput).ToKubernetesAuthenticationUsernamePasswordPtrOutputWithContext(ctx)
}

// KubernetesAuthenticationUsernamePasswordPtrInput is an input type that accepts KubernetesAuthenticationUsernamePasswordArgs, KubernetesAuthenticationUsernamePasswordPtr and KubernetesAuthenticationUsernamePasswordPtrOutput values.
// You can construct a concrete instance of `KubernetesAuthenticationUsernamePasswordPtrInput` via:
//
//	        KubernetesAuthenticationUsernamePasswordArgs{...}
//
//	or:
//
//	        nil
type KubernetesAuthenticationUsernamePasswordPtrInput interface {
	pulumi.Input

	ToKubernetesAuthenticationUsernamePasswordPtrOutput() KubernetesAuthenticationUsernamePasswordPtrOutput
	ToKubernetesAuthenticationUsernamePasswordPtrOutputWithContext(context.Context) KubernetesAuthenticationUsernamePasswordPtrOutput
}

type kubernetesAuthenticationUsernamePasswordPtrType KubernetesAuthenticationUsernamePasswordArgs

func KubernetesAuthenticationUsernamePasswordPtr(v *KubernetesAuthenticationUsernamePasswordArgs) KubernetesAuthenticationUsernamePasswordPtrInput {
	return (*kubernetesAuthenticationUsernamePasswordPtrType)(v)
}

func (*kubernetesAuthenticationUsernamePasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesAuthenticationUsernamePassword)(nil)).Elem()
}

func (i *kubernetesAuthenticationUsernamePasswordPtrType) ToKubernetesAuthenticationUsernamePasswordPtrOutput() KubernetesAuthenticationUsernamePasswordPtrOutput {
	return i.ToKubernetesAuthenticationUsernamePasswordPtrOutputWithContext(context.Background())
}

func (i *kubernetesAuthenticationUsernamePasswordPtrType) ToKubernetesAuthenticationUsernamePasswordPtrOutputWithContext(ctx context.Context) KubernetesAuthenticationUsernamePasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesAuthenticationUsernamePasswordPtrOutput)
}

type KubernetesAuthenticationUsernamePasswordOutput struct{ *pulumi.OutputState }

func (KubernetesAuthenticationUsernamePasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesAuthenticationUsernamePassword)(nil)).Elem()
}

func (o KubernetesAuthenticationUsernamePasswordOutput) ToKubernetesAuthenticationUsernamePasswordOutput() KubernetesAuthenticationUsernamePasswordOutput {
	return o
}

func (o KubernetesAuthenticationUsernamePasswordOutput) ToKubernetesAuthenticationUsernamePasswordOutputWithContext(ctx context.Context) KubernetesAuthenticationUsernamePasswordOutput {
	return o
}

func (o KubernetesAuthenticationUsernamePasswordOutput) ToKubernetesAuthenticationUsernamePasswordPtrOutput() KubernetesAuthenticationUsernamePasswordPtrOutput {
	return o.ToKubernetesAuthenticationUsernamePasswordPtrOutputWithContext(context.Background())
}

func (o KubernetesAuthenticationUsernamePasswordOutput) ToKubernetesAuthenticationUsernamePasswordPtrOutputWithContext(ctx context.Context) KubernetesAuthenticationUsernamePasswordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KubernetesAuthenticationUsernamePassword) *KubernetesAuthenticationUsernamePassword {
		return &v
	}).(KubernetesAuthenticationUsernamePasswordPtrOutput)
}

// URL of the Kubernetes master to connect to.
func (o KubernetesAuthenticationUsernamePasswordOutput) MasterUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesAuthenticationUsernamePassword) string { return v.MasterUrl }).(pulumi.StringOutput)
}

// Name of the Harness secret containing the password for the cluster.
func (o KubernetesAuthenticationUsernamePasswordOutput) PasswordSecretName() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesAuthenticationUsernamePassword) string { return v.PasswordSecretName }).(pulumi.StringOutput)
}

// Username for authentication to the cluster
func (o KubernetesAuthenticationUsernamePasswordOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesAuthenticationUsernamePassword) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// Name of the Harness secret containing the username for authentication to the cluster
func (o KubernetesAuthenticationUsernamePasswordOutput) UsernameSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesAuthenticationUsernamePassword) *string { return v.UsernameSecretName }).(pulumi.StringPtrOutput)
}

type KubernetesAuthenticationUsernamePasswordPtrOutput struct{ *pulumi.OutputState }

func (KubernetesAuthenticationUsernamePasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesAuthenticationUsernamePassword)(nil)).Elem()
}

func (o KubernetesAuthenticationUsernamePasswordPtrOutput) ToKubernetesAuthenticationUsernamePasswordPtrOutput() KubernetesAuthenticationUsernamePasswordPtrOutput {
	return o
}

func (o KubernetesAuthenticationUsernamePasswordPtrOutput) ToKubernetesAuthenticationUsernamePasswordPtrOutputWithContext(ctx context.Context) KubernetesAuthenticationUsernamePasswordPtrOutput {
	return o
}

func (o KubernetesAuthenticationUsernamePasswordPtrOutput) Elem() KubernetesAuthenticationUsernamePasswordOutput {
	return o.ApplyT(func(v *KubernetesAuthenticationUsernamePassword) KubernetesAuthenticationUsernamePassword {
		if v != nil {
			return *v
		}
		var ret KubernetesAuthenticationUsernamePassword
		return ret
	}).(KubernetesAuthenticationUsernamePasswordOutput)
}

// URL of the Kubernetes master to connect to.
func (o KubernetesAuthenticationUsernamePasswordPtrOutput) MasterUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesAuthenticationUsernamePassword) *string {
		if v == nil {
			return nil
		}
		return &v.MasterUrl
	}).(pulumi.StringPtrOutput)
}

// Name of the Harness secret containing the password for the cluster.
func (o KubernetesAuthenticationUsernamePasswordPtrOutput) PasswordSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesAuthenticationUsernamePassword) *string {
		if v == nil {
			return nil
		}
		return &v.PasswordSecretName
	}).(pulumi.StringPtrOutput)
}

// Username for authentication to the cluster
func (o KubernetesAuthenticationUsernamePasswordPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesAuthenticationUsernamePassword) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Name of the Harness secret containing the username for authentication to the cluster
func (o KubernetesAuthenticationUsernamePasswordPtrOutput) UsernameSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesAuthenticationUsernamePassword) *string {
		if v == nil {
			return nil
		}
		return v.UsernameSecretName
	}).(pulumi.StringPtrOutput)
}

type KubernetesUsageScope struct {
	// Id of the application to scope to. If empty then this scope applies to all applications.
	ApplicationId *string `pulumi:"applicationId"`
	// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	EnvironmentFilterType *string `pulumi:"environmentFilterType"`
	// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
	EnvironmentId *string `pulumi:"environmentId"`
}

// KubernetesUsageScopeInput is an input type that accepts KubernetesUsageScopeArgs and KubernetesUsageScopeOutput values.
// You can construct a concrete instance of `KubernetesUsageScopeInput` via:
//
//	KubernetesUsageScopeArgs{...}
type KubernetesUsageScopeInput interface {
	pulumi.Input

	ToKubernetesUsageScopeOutput() KubernetesUsageScopeOutput
	ToKubernetesUsageScopeOutputWithContext(context.Context) KubernetesUsageScopeOutput
}

type KubernetesUsageScopeArgs struct {
	// Id of the application to scope to. If empty then this scope applies to all applications.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
	// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	EnvironmentFilterType pulumi.StringPtrInput `pulumi:"environmentFilterType"`
	// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
}

func (KubernetesUsageScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesUsageScope)(nil)).Elem()
}

func (i KubernetesUsageScopeArgs) ToKubernetesUsageScopeOutput() KubernetesUsageScopeOutput {
	return i.ToKubernetesUsageScopeOutputWithContext(context.Background())
}

func (i KubernetesUsageScopeArgs) ToKubernetesUsageScopeOutputWithContext(ctx context.Context) KubernetesUsageScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesUsageScopeOutput)
}

// KubernetesUsageScopeArrayInput is an input type that accepts KubernetesUsageScopeArray and KubernetesUsageScopeArrayOutput values.
// You can construct a concrete instance of `KubernetesUsageScopeArrayInput` via:
//
//	KubernetesUsageScopeArray{ KubernetesUsageScopeArgs{...} }
type KubernetesUsageScopeArrayInput interface {
	pulumi.Input

	ToKubernetesUsageScopeArrayOutput() KubernetesUsageScopeArrayOutput
	ToKubernetesUsageScopeArrayOutputWithContext(context.Context) KubernetesUsageScopeArrayOutput
}

type KubernetesUsageScopeArray []KubernetesUsageScopeInput

func (KubernetesUsageScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesUsageScope)(nil)).Elem()
}

func (i KubernetesUsageScopeArray) ToKubernetesUsageScopeArrayOutput() KubernetesUsageScopeArrayOutput {
	return i.ToKubernetesUsageScopeArrayOutputWithContext(context.Background())
}

func (i KubernetesUsageScopeArray) ToKubernetesUsageScopeArrayOutputWithContext(ctx context.Context) KubernetesUsageScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesUsageScopeArrayOutput)
}

type KubernetesUsageScopeOutput struct{ *pulumi.OutputState }

func (KubernetesUsageScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesUsageScope)(nil)).Elem()
}

func (o KubernetesUsageScopeOutput) ToKubernetesUsageScopeOutput() KubernetesUsageScopeOutput {
	return o
}

func (o KubernetesUsageScopeOutput) ToKubernetesUsageScopeOutputWithContext(ctx context.Context) KubernetesUsageScopeOutput {
	return o
}

// Id of the application to scope to. If empty then this scope applies to all applications.
func (o KubernetesUsageScopeOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesUsageScope) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
func (o KubernetesUsageScopeOutput) EnvironmentFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesUsageScope) *string { return v.EnvironmentFilterType }).(pulumi.StringPtrOutput)
}

// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
func (o KubernetesUsageScopeOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesUsageScope) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

type KubernetesUsageScopeArrayOutput struct{ *pulumi.OutputState }

func (KubernetesUsageScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesUsageScope)(nil)).Elem()
}

func (o KubernetesUsageScopeArrayOutput) ToKubernetesUsageScopeArrayOutput() KubernetesUsageScopeArrayOutput {
	return o
}

func (o KubernetesUsageScopeArrayOutput) ToKubernetesUsageScopeArrayOutputWithContext(ctx context.Context) KubernetesUsageScopeArrayOutput {
	return o
}

func (o KubernetesUsageScopeArrayOutput) Index(i pulumi.IntInput) KubernetesUsageScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KubernetesUsageScope {
		return vs[0].([]KubernetesUsageScope)[vs[1].(int)]
	}).(KubernetesUsageScopeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsAssumeCrossAccountRoleInput)(nil)).Elem(), AwsAssumeCrossAccountRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsAssumeCrossAccountRolePtrInput)(nil)).Elem(), AwsAssumeCrossAccountRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsUsageScopeInput)(nil)).Elem(), AwsUsageScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsUsageScopeArrayInput)(nil)).Elem(), AwsUsageScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatacenterUsageScopeInput)(nil)).Elem(), DatacenterUsageScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatacenterUsageScopeArrayInput)(nil)).Elem(), DatacenterUsageScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpUsageScopeInput)(nil)).Elem(), GcpUsageScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpUsageScopeArrayInput)(nil)).Elem(), GcpUsageScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesAuthenticationInput)(nil)).Elem(), KubernetesAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesAuthenticationPtrInput)(nil)).Elem(), KubernetesAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesAuthenticationOidcInput)(nil)).Elem(), KubernetesAuthenticationOidcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesAuthenticationOidcPtrInput)(nil)).Elem(), KubernetesAuthenticationOidcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesAuthenticationServiceAccountInput)(nil)).Elem(), KubernetesAuthenticationServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesAuthenticationServiceAccountPtrInput)(nil)).Elem(), KubernetesAuthenticationServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesAuthenticationUsernamePasswordInput)(nil)).Elem(), KubernetesAuthenticationUsernamePasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesAuthenticationUsernamePasswordPtrInput)(nil)).Elem(), KubernetesAuthenticationUsernamePasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesUsageScopeInput)(nil)).Elem(), KubernetesUsageScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesUsageScopeArrayInput)(nil)).Elem(), KubernetesUsageScopeArray{})
	pulumi.RegisterOutputType(AwsAssumeCrossAccountRoleOutput{})
	pulumi.RegisterOutputType(AwsAssumeCrossAccountRolePtrOutput{})
	pulumi.RegisterOutputType(AwsUsageScopeOutput{})
	pulumi.RegisterOutputType(AwsUsageScopeArrayOutput{})
	pulumi.RegisterOutputType(DatacenterUsageScopeOutput{})
	pulumi.RegisterOutputType(DatacenterUsageScopeArrayOutput{})
	pulumi.RegisterOutputType(GcpUsageScopeOutput{})
	pulumi.RegisterOutputType(GcpUsageScopeArrayOutput{})
	pulumi.RegisterOutputType(KubernetesAuthenticationOutput{})
	pulumi.RegisterOutputType(KubernetesAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(KubernetesAuthenticationOidcOutput{})
	pulumi.RegisterOutputType(KubernetesAuthenticationOidcPtrOutput{})
	pulumi.RegisterOutputType(KubernetesAuthenticationServiceAccountOutput{})
	pulumi.RegisterOutputType(KubernetesAuthenticationServiceAccountPtrOutput{})
	pulumi.RegisterOutputType(KubernetesAuthenticationUsernamePasswordOutput{})
	pulumi.RegisterOutputType(KubernetesAuthenticationUsernamePasswordPtrOutput{})
	pulumi.RegisterOutputType(KubernetesUsageScopeOutput{})
	pulumi.RegisterOutputType(KubernetesUsageScopeArrayOutput{})
}
