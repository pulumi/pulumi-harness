// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudprovider

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a physical data center cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `createBeforeDestroy = true` lifecycle setting.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/cloudprovider"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudprovider.NewDatacenter(ctx, "example", &cloudprovider.DatacenterArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// Import using the Harness datacenter cloud provider id.
//
// ```sh
// $ pulumi import harness:cloudprovider/datacenter:Datacenter example <provider_id>
// ```
type Datacenter struct {
	pulumi.CustomResourceState

	// The name of the cloud provider.
	Name pulumi.StringOutput `pulumi:"name"`
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes DatacenterUsageScopeArrayOutput `pulumi:"usageScopes"`
}

// NewDatacenter registers a new resource with the given unique name, arguments, and options.
func NewDatacenter(ctx *pulumi.Context,
	name string, args *DatacenterArgs, opts ...pulumi.ResourceOption) (*Datacenter, error) {
	if args == nil {
		args = &DatacenterArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Datacenter
	err := ctx.RegisterResource("harness:cloudprovider/datacenter:Datacenter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatacenter gets an existing Datacenter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatacenter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatacenterState, opts ...pulumi.ResourceOption) (*Datacenter, error) {
	var resource Datacenter
	err := ctx.ReadResource("harness:cloudprovider/datacenter:Datacenter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Datacenter resources.
type datacenterState struct {
	// The name of the cloud provider.
	Name *string `pulumi:"name"`
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes []DatacenterUsageScope `pulumi:"usageScopes"`
}

type DatacenterState struct {
	// The name of the cloud provider.
	Name pulumi.StringPtrInput
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes DatacenterUsageScopeArrayInput
}

func (DatacenterState) ElementType() reflect.Type {
	return reflect.TypeOf((*datacenterState)(nil)).Elem()
}

type datacenterArgs struct {
	// The name of the cloud provider.
	Name *string `pulumi:"name"`
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes []DatacenterUsageScope `pulumi:"usageScopes"`
}

// The set of arguments for constructing a Datacenter resource.
type DatacenterArgs struct {
	// The name of the cloud provider.
	Name pulumi.StringPtrInput
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes DatacenterUsageScopeArrayInput
}

func (DatacenterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datacenterArgs)(nil)).Elem()
}

type DatacenterInput interface {
	pulumi.Input

	ToDatacenterOutput() DatacenterOutput
	ToDatacenterOutputWithContext(ctx context.Context) DatacenterOutput
}

func (*Datacenter) ElementType() reflect.Type {
	return reflect.TypeOf((**Datacenter)(nil)).Elem()
}

func (i *Datacenter) ToDatacenterOutput() DatacenterOutput {
	return i.ToDatacenterOutputWithContext(context.Background())
}

func (i *Datacenter) ToDatacenterOutputWithContext(ctx context.Context) DatacenterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacenterOutput)
}

// DatacenterArrayInput is an input type that accepts DatacenterArray and DatacenterArrayOutput values.
// You can construct a concrete instance of `DatacenterArrayInput` via:
//
//	DatacenterArray{ DatacenterArgs{...} }
type DatacenterArrayInput interface {
	pulumi.Input

	ToDatacenterArrayOutput() DatacenterArrayOutput
	ToDatacenterArrayOutputWithContext(context.Context) DatacenterArrayOutput
}

type DatacenterArray []DatacenterInput

func (DatacenterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Datacenter)(nil)).Elem()
}

func (i DatacenterArray) ToDatacenterArrayOutput() DatacenterArrayOutput {
	return i.ToDatacenterArrayOutputWithContext(context.Background())
}

func (i DatacenterArray) ToDatacenterArrayOutputWithContext(ctx context.Context) DatacenterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacenterArrayOutput)
}

// DatacenterMapInput is an input type that accepts DatacenterMap and DatacenterMapOutput values.
// You can construct a concrete instance of `DatacenterMapInput` via:
//
//	DatacenterMap{ "key": DatacenterArgs{...} }
type DatacenterMapInput interface {
	pulumi.Input

	ToDatacenterMapOutput() DatacenterMapOutput
	ToDatacenterMapOutputWithContext(context.Context) DatacenterMapOutput
}

type DatacenterMap map[string]DatacenterInput

func (DatacenterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Datacenter)(nil)).Elem()
}

func (i DatacenterMap) ToDatacenterMapOutput() DatacenterMapOutput {
	return i.ToDatacenterMapOutputWithContext(context.Background())
}

func (i DatacenterMap) ToDatacenterMapOutputWithContext(ctx context.Context) DatacenterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacenterMapOutput)
}

type DatacenterOutput struct{ *pulumi.OutputState }

func (DatacenterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Datacenter)(nil)).Elem()
}

func (o DatacenterOutput) ToDatacenterOutput() DatacenterOutput {
	return o
}

func (o DatacenterOutput) ToDatacenterOutputWithContext(ctx context.Context) DatacenterOutput {
	return o
}

// The name of the cloud provider.
func (o DatacenterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Datacenter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// This block is used for scoping the resource to a specific set of applications or environments.
func (o DatacenterOutput) UsageScopes() DatacenterUsageScopeArrayOutput {
	return o.ApplyT(func(v *Datacenter) DatacenterUsageScopeArrayOutput { return v.UsageScopes }).(DatacenterUsageScopeArrayOutput)
}

type DatacenterArrayOutput struct{ *pulumi.OutputState }

func (DatacenterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Datacenter)(nil)).Elem()
}

func (o DatacenterArrayOutput) ToDatacenterArrayOutput() DatacenterArrayOutput {
	return o
}

func (o DatacenterArrayOutput) ToDatacenterArrayOutputWithContext(ctx context.Context) DatacenterArrayOutput {
	return o
}

func (o DatacenterArrayOutput) Index(i pulumi.IntInput) DatacenterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Datacenter {
		return vs[0].([]*Datacenter)[vs[1].(int)]
	}).(DatacenterOutput)
}

type DatacenterMapOutput struct{ *pulumi.OutputState }

func (DatacenterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Datacenter)(nil)).Elem()
}

func (o DatacenterMapOutput) ToDatacenterMapOutput() DatacenterMapOutput {
	return o
}

func (o DatacenterMapOutput) ToDatacenterMapOutputWithContext(ctx context.Context) DatacenterMapOutput {
	return o
}

func (o DatacenterMapOutput) MapIndex(k pulumi.StringInput) DatacenterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Datacenter {
		return vs[0].(map[string]*Datacenter)[vs[1].(string)]
	}).(DatacenterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatacenterInput)(nil)).Elem(), &Datacenter{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatacenterArrayInput)(nil)).Elem(), DatacenterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatacenterMapInput)(nil)).Elem(), DatacenterMap{})
	pulumi.RegisterOutputType(DatacenterOutput{})
	pulumi.RegisterOutputType(DatacenterArrayOutput{})
	pulumi.RegisterOutputType(DatacenterMapOutput{})
}
