// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harness

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a yaml config.
func LookupYamlConfig(ctx *pulumi.Context, args *LookupYamlConfigArgs, opts ...pulumi.InvokeOption) (*LookupYamlConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupYamlConfigResult
	err := ctx.Invoke("harness:index/getYamlConfig:getYamlConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getYamlConfig.
type LookupYamlConfigArgs struct {
	// Unique identifier of the application. This is not required for account level resources (i.e. cloud providers, connectors, etc.).
	AppId *string `pulumi:"appId"`
	// Path to the yaml file.
	Path string `pulumi:"path"`
}

// A collection of values returned by getYamlConfig.
type LookupYamlConfigResult struct {
	// Unique identifier of the application. This is not required for account level resources (i.e. cloud providers, connectors, etc.).
	AppId *string `pulumi:"appId"`
	// Content of the yaml file.
	Content string `pulumi:"content"`
	// Unique identifier of the yaml resource.
	Id string `pulumi:"id"`
	// Name of the yaml resource.
	Name string `pulumi:"name"`
	// Path to the yaml file.
	Path string `pulumi:"path"`
}

func LookupYamlConfigOutput(ctx *pulumi.Context, args LookupYamlConfigOutputArgs, opts ...pulumi.InvokeOption) LookupYamlConfigResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupYamlConfigResultOutput, error) {
			args := v.(LookupYamlConfigArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:index/getYamlConfig:getYamlConfig", args, LookupYamlConfigResultOutput{}, options).(LookupYamlConfigResultOutput), nil
		}).(LookupYamlConfigResultOutput)
}

// A collection of arguments for invoking getYamlConfig.
type LookupYamlConfigOutputArgs struct {
	// Unique identifier of the application. This is not required for account level resources (i.e. cloud providers, connectors, etc.).
	AppId pulumi.StringPtrInput `pulumi:"appId"`
	// Path to the yaml file.
	Path pulumi.StringInput `pulumi:"path"`
}

func (LookupYamlConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupYamlConfigArgs)(nil)).Elem()
}

// A collection of values returned by getYamlConfig.
type LookupYamlConfigResultOutput struct{ *pulumi.OutputState }

func (LookupYamlConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupYamlConfigResult)(nil)).Elem()
}

func (o LookupYamlConfigResultOutput) ToLookupYamlConfigResultOutput() LookupYamlConfigResultOutput {
	return o
}

func (o LookupYamlConfigResultOutput) ToLookupYamlConfigResultOutputWithContext(ctx context.Context) LookupYamlConfigResultOutput {
	return o
}

// Unique identifier of the application. This is not required for account level resources (i.e. cloud providers, connectors, etc.).
func (o LookupYamlConfigResultOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupYamlConfigResult) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// Content of the yaml file.
func (o LookupYamlConfigResultOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v LookupYamlConfigResult) string { return v.Content }).(pulumi.StringOutput)
}

// Unique identifier of the yaml resource.
func (o LookupYamlConfigResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupYamlConfigResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the yaml resource.
func (o LookupYamlConfigResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupYamlConfigResult) string { return v.Name }).(pulumi.StringOutput)
}

// Path to the yaml file.
func (o LookupYamlConfigResultOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v LookupYamlConfigResult) string { return v.Path }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupYamlConfigResultOutput{})
}
