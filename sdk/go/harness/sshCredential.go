// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harness

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating an encrypted text secret
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness"
//	"github.com/pulumi/pulumi-tls/sdk/go/tls"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			harnessDeployKey, err := tls.NewPrivateKey(ctx, "harness_deploy_key", &tls.PrivateKeyArgs{
//				Algorithm: "RSA",
//				RsaBits:   4096,
//			})
//			if err != nil {
//				return err
//			}
//			secretManager, err := harness.GetSecretManager(ctx, &harness.GetSecretManagerArgs{
//				Default: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			mySecret, err := harness.NewEncryptedText(ctx, "my_secret", &harness.EncryptedTextArgs{
//				Name:            pulumi.String("my_secret"),
//				Value:           harnessDeployKey.PrivateKeyPem,
//				SecretManagerId: pulumi.String(secretManager.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = harness.NewSshCredential(ctx, "ssh_creds", &harness.SshCredentialArgs{
//				Name: pulumi.String("ssh-test"),
//				SshAuthentication: &harness.SshCredentialSshAuthenticationArgs{
//					Port:     pulumi.Int(22),
//					Username: pulumi.String("git"),
//					InlineSsh: &harness.SshCredentialSshAuthenticationInlineSshArgs{
//						SshKeyFileId: mySecret.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import using the Harness ssh credential id
//
// ```sh
// $ pulumi import harness:index/sshCredential:SshCredential example <credential_id>
// ```
type SshCredential struct {
	pulumi.CustomResourceState

	// Kerberos authentication for SSH. Cannot be used if ssh*authentication is specified
	KerberosAuthentication SshCredentialKerberosAuthenticationPtrOutput `pulumi:"kerberosAuthentication"`
	// Name of the encrypted text secret
	Name pulumi.StringOutput `pulumi:"name"`
	// Authentication method for SSH. Cannot be used if kerberos*authentication is specified. Only one of `inlineSsh`, `serverPassword`, or `sshKeyFile` should be set
	SshAuthentication SshCredentialSshAuthenticationPtrOutput `pulumi:"sshAuthentication"`
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes SshCredentialUsageScopeArrayOutput `pulumi:"usageScopes"`
}

// NewSshCredential registers a new resource with the given unique name, arguments, and options.
func NewSshCredential(ctx *pulumi.Context,
	name string, args *SshCredentialArgs, opts ...pulumi.ResourceOption) (*SshCredential, error) {
	if args == nil {
		args = &SshCredentialArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SshCredential
	err := ctx.RegisterResource("harness:index/sshCredential:SshCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSshCredential gets an existing SshCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSshCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SshCredentialState, opts ...pulumi.ResourceOption) (*SshCredential, error) {
	var resource SshCredential
	err := ctx.ReadResource("harness:index/sshCredential:SshCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SshCredential resources.
type sshCredentialState struct {
	// Kerberos authentication for SSH. Cannot be used if ssh*authentication is specified
	KerberosAuthentication *SshCredentialKerberosAuthentication `pulumi:"kerberosAuthentication"`
	// Name of the encrypted text secret
	Name *string `pulumi:"name"`
	// Authentication method for SSH. Cannot be used if kerberos*authentication is specified. Only one of `inlineSsh`, `serverPassword`, or `sshKeyFile` should be set
	SshAuthentication *SshCredentialSshAuthentication `pulumi:"sshAuthentication"`
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes []SshCredentialUsageScope `pulumi:"usageScopes"`
}

type SshCredentialState struct {
	// Kerberos authentication for SSH. Cannot be used if ssh*authentication is specified
	KerberosAuthentication SshCredentialKerberosAuthenticationPtrInput
	// Name of the encrypted text secret
	Name pulumi.StringPtrInput
	// Authentication method for SSH. Cannot be used if kerberos*authentication is specified. Only one of `inlineSsh`, `serverPassword`, or `sshKeyFile` should be set
	SshAuthentication SshCredentialSshAuthenticationPtrInput
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes SshCredentialUsageScopeArrayInput
}

func (SshCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*sshCredentialState)(nil)).Elem()
}

type sshCredentialArgs struct {
	// Kerberos authentication for SSH. Cannot be used if ssh*authentication is specified
	KerberosAuthentication *SshCredentialKerberosAuthentication `pulumi:"kerberosAuthentication"`
	// Name of the encrypted text secret
	Name *string `pulumi:"name"`
	// Authentication method for SSH. Cannot be used if kerberos*authentication is specified. Only one of `inlineSsh`, `serverPassword`, or `sshKeyFile` should be set
	SshAuthentication *SshCredentialSshAuthentication `pulumi:"sshAuthentication"`
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes []SshCredentialUsageScope `pulumi:"usageScopes"`
}

// The set of arguments for constructing a SshCredential resource.
type SshCredentialArgs struct {
	// Kerberos authentication for SSH. Cannot be used if ssh*authentication is specified
	KerberosAuthentication SshCredentialKerberosAuthenticationPtrInput
	// Name of the encrypted text secret
	Name pulumi.StringPtrInput
	// Authentication method for SSH. Cannot be used if kerberos*authentication is specified. Only one of `inlineSsh`, `serverPassword`, or `sshKeyFile` should be set
	SshAuthentication SshCredentialSshAuthenticationPtrInput
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes SshCredentialUsageScopeArrayInput
}

func (SshCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sshCredentialArgs)(nil)).Elem()
}

type SshCredentialInput interface {
	pulumi.Input

	ToSshCredentialOutput() SshCredentialOutput
	ToSshCredentialOutputWithContext(ctx context.Context) SshCredentialOutput
}

func (*SshCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**SshCredential)(nil)).Elem()
}

func (i *SshCredential) ToSshCredentialOutput() SshCredentialOutput {
	return i.ToSshCredentialOutputWithContext(context.Background())
}

func (i *SshCredential) ToSshCredentialOutputWithContext(ctx context.Context) SshCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialOutput)
}

// SshCredentialArrayInput is an input type that accepts SshCredentialArray and SshCredentialArrayOutput values.
// You can construct a concrete instance of `SshCredentialArrayInput` via:
//
//	SshCredentialArray{ SshCredentialArgs{...} }
type SshCredentialArrayInput interface {
	pulumi.Input

	ToSshCredentialArrayOutput() SshCredentialArrayOutput
	ToSshCredentialArrayOutputWithContext(context.Context) SshCredentialArrayOutput
}

type SshCredentialArray []SshCredentialInput

func (SshCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SshCredential)(nil)).Elem()
}

func (i SshCredentialArray) ToSshCredentialArrayOutput() SshCredentialArrayOutput {
	return i.ToSshCredentialArrayOutputWithContext(context.Background())
}

func (i SshCredentialArray) ToSshCredentialArrayOutputWithContext(ctx context.Context) SshCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialArrayOutput)
}

// SshCredentialMapInput is an input type that accepts SshCredentialMap and SshCredentialMapOutput values.
// You can construct a concrete instance of `SshCredentialMapInput` via:
//
//	SshCredentialMap{ "key": SshCredentialArgs{...} }
type SshCredentialMapInput interface {
	pulumi.Input

	ToSshCredentialMapOutput() SshCredentialMapOutput
	ToSshCredentialMapOutputWithContext(context.Context) SshCredentialMapOutput
}

type SshCredentialMap map[string]SshCredentialInput

func (SshCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SshCredential)(nil)).Elem()
}

func (i SshCredentialMap) ToSshCredentialMapOutput() SshCredentialMapOutput {
	return i.ToSshCredentialMapOutputWithContext(context.Background())
}

func (i SshCredentialMap) ToSshCredentialMapOutputWithContext(ctx context.Context) SshCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialMapOutput)
}

type SshCredentialOutput struct{ *pulumi.OutputState }

func (SshCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshCredential)(nil)).Elem()
}

func (o SshCredentialOutput) ToSshCredentialOutput() SshCredentialOutput {
	return o
}

func (o SshCredentialOutput) ToSshCredentialOutputWithContext(ctx context.Context) SshCredentialOutput {
	return o
}

// Kerberos authentication for SSH. Cannot be used if ssh*authentication is specified
func (o SshCredentialOutput) KerberosAuthentication() SshCredentialKerberosAuthenticationPtrOutput {
	return o.ApplyT(func(v *SshCredential) SshCredentialKerberosAuthenticationPtrOutput { return v.KerberosAuthentication }).(SshCredentialKerberosAuthenticationPtrOutput)
}

// Name of the encrypted text secret
func (o SshCredentialOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SshCredential) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Authentication method for SSH. Cannot be used if kerberos*authentication is specified. Only one of `inlineSsh`, `serverPassword`, or `sshKeyFile` should be set
func (o SshCredentialOutput) SshAuthentication() SshCredentialSshAuthenticationPtrOutput {
	return o.ApplyT(func(v *SshCredential) SshCredentialSshAuthenticationPtrOutput { return v.SshAuthentication }).(SshCredentialSshAuthenticationPtrOutput)
}

// This block is used for scoping the resource to a specific set of applications or environments.
func (o SshCredentialOutput) UsageScopes() SshCredentialUsageScopeArrayOutput {
	return o.ApplyT(func(v *SshCredential) SshCredentialUsageScopeArrayOutput { return v.UsageScopes }).(SshCredentialUsageScopeArrayOutput)
}

type SshCredentialArrayOutput struct{ *pulumi.OutputState }

func (SshCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SshCredential)(nil)).Elem()
}

func (o SshCredentialArrayOutput) ToSshCredentialArrayOutput() SshCredentialArrayOutput {
	return o
}

func (o SshCredentialArrayOutput) ToSshCredentialArrayOutputWithContext(ctx context.Context) SshCredentialArrayOutput {
	return o
}

func (o SshCredentialArrayOutput) Index(i pulumi.IntInput) SshCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SshCredential {
		return vs[0].([]*SshCredential)[vs[1].(int)]
	}).(SshCredentialOutput)
}

type SshCredentialMapOutput struct{ *pulumi.OutputState }

func (SshCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SshCredential)(nil)).Elem()
}

func (o SshCredentialMapOutput) ToSshCredentialMapOutput() SshCredentialMapOutput {
	return o
}

func (o SshCredentialMapOutput) ToSshCredentialMapOutputWithContext(ctx context.Context) SshCredentialMapOutput {
	return o
}

func (o SshCredentialMapOutput) MapIndex(k pulumi.StringInput) SshCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SshCredential {
		return vs[0].(map[string]*SshCredential)[vs[1].(string)]
	}).(SshCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SshCredentialInput)(nil)).Elem(), &SshCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshCredentialArrayInput)(nil)).Elem(), SshCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshCredentialMapInput)(nil)).Elem(), SshCredentialMap{})
	pulumi.RegisterOutputType(SshCredentialOutput{})
	pulumi.RegisterOutputType(SshCredentialArrayOutput{})
	pulumi.RegisterOutputType(SshCredentialMapOutput{})
}
