// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harness

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness user
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("harness:index/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	// The email of the user.
	Email *string `pulumi:"email"`
	// Unique identifier of the user
	Id *string `pulumi:"id"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	// The email of the user.
	Email *string `pulumi:"email"`
	// Unique identifier of the user
	Id *string `pulumi:"id"`
	// Flag indicating whether or not the users email has been verified.
	IsEmailVerified bool `pulumi:"isEmailVerified"`
	// Flag indicating whether or not the user was imported from an identity provider.
	IsImportedFromIdentityProvider bool `pulumi:"isImportedFromIdentityProvider"`
	// Flag indicating whether or not the users password has expired.
	IsPasswordExpired bool `pulumi:"isPasswordExpired"`
	// Flag indicating whether or not two-factor authentication is enabled for the user.
	IsTwoFactorAuthEnabled bool `pulumi:"isTwoFactorAuthEnabled"`
	// Flag indicating whether or not the user is locked out.
	IsUserLocked bool `pulumi:"isUserLocked"`
	// The name of the user.
	Name string `pulumi:"name"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupUserResultOutput, error) {
			args := v.(LookupUserArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:index/getUser:getUser", args, LookupUserResultOutput{}, options).(LookupUserResultOutput), nil
		}).(LookupUserResultOutput)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	// The email of the user.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Unique identifier of the user
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (LookupUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserArgs)(nil)).Elem()
}

// A collection of values returned by getUser.
type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToLookupUserResultOutput() LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToLookupUserResultOutputWithContext(ctx context.Context) LookupUserResultOutput {
	return o
}

// The email of the user.
func (o LookupUserResultOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Unique identifier of the user
func (o LookupUserResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Flag indicating whether or not the users email has been verified.
func (o LookupUserResultOutput) IsEmailVerified() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.IsEmailVerified }).(pulumi.BoolOutput)
}

// Flag indicating whether or not the user was imported from an identity provider.
func (o LookupUserResultOutput) IsImportedFromIdentityProvider() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.IsImportedFromIdentityProvider }).(pulumi.BoolOutput)
}

// Flag indicating whether or not the users password has expired.
func (o LookupUserResultOutput) IsPasswordExpired() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.IsPasswordExpired }).(pulumi.BoolOutput)
}

// Flag indicating whether or not two-factor authentication is enabled for the user.
func (o LookupUserResultOutput) IsTwoFactorAuthEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.IsTwoFactorAuthEnabled }).(pulumi.BoolOutput)
}

// Flag indicating whether or not the user is locked out.
func (o LookupUserResultOutput) IsUserLocked() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.IsUserLocked }).(pulumi.BoolOutput)
}

// The name of the user.
func (o LookupUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserResultOutput{})
}
