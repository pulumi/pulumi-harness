// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package governance

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating, updating, and managing rule enforcement.
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import governance enforcement
//
// ```sh
// $ pulumi import harness:governance/ruleEnforcement:RuleEnforcement example <enforcement_id>
// ```
type RuleEnforcement struct {
	pulumi.CustomResourceState

	// The cloud provider for the rule enforcement. It should be either AWS, AZURE or GCP.
	CloudProvider pulumi.StringOutput `pulumi:"cloudProvider"`
	// Description for rule enforcement.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Id of the rule enforcement.
	EnforcementId pulumi.StringOutput `pulumi:"enforcementId"`
	// Execution schedule in cron format.
	ExecutionSchedule pulumi.StringOutput `pulumi:"executionSchedule"`
	// Timezone for the execution schedule.
	ExecutionTimezone pulumi.StringOutput `pulumi:"executionTimezone"`
	// Indicates if the rule enforcement is a dry run. This by default is set to false.
	IsDryRun pulumi.BoolPtrOutput `pulumi:"isDryRun"`
	// Indicates if the rule enforcement is enabled. This by default is set to true.
	IsEnabled pulumi.BoolPtrOutput `pulumi:"isEnabled"`
	// Name of the rule enforcement.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of rule IDs. Either rule*ids or rule*set_ids should be provided.
	RuleIds pulumi.StringArrayOutput `pulumi:"ruleIds"`
	// List of rule set IDs. Either rule*ids or rule*set_ids should be provided.
	RuleSetIds pulumi.StringArrayOutput `pulumi:"ruleSetIds"`
	// List of target account which can be either AWS Account Ids or Azure Subscription Ids or Gcp Project Ids.
	TargetAccounts pulumi.StringArrayOutput `pulumi:"targetAccounts"`
	// List of target regions. For GCP it should be left empty but is required in case of AWS or Azure.
	TargetRegions pulumi.StringArrayOutput `pulumi:"targetRegions"`
}

// NewRuleEnforcement registers a new resource with the given unique name, arguments, and options.
func NewRuleEnforcement(ctx *pulumi.Context,
	name string, args *RuleEnforcementArgs, opts ...pulumi.ResourceOption) (*RuleEnforcement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudProvider == nil {
		return nil, errors.New("invalid value for required argument 'CloudProvider'")
	}
	if args.ExecutionSchedule == nil {
		return nil, errors.New("invalid value for required argument 'ExecutionSchedule'")
	}
	if args.ExecutionTimezone == nil {
		return nil, errors.New("invalid value for required argument 'ExecutionTimezone'")
	}
	if args.TargetAccounts == nil {
		return nil, errors.New("invalid value for required argument 'TargetAccounts'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RuleEnforcement
	err := ctx.RegisterResource("harness:governance/ruleEnforcement:RuleEnforcement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleEnforcement gets an existing RuleEnforcement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleEnforcement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleEnforcementState, opts ...pulumi.ResourceOption) (*RuleEnforcement, error) {
	var resource RuleEnforcement
	err := ctx.ReadResource("harness:governance/ruleEnforcement:RuleEnforcement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleEnforcement resources.
type ruleEnforcementState struct {
	// The cloud provider for the rule enforcement. It should be either AWS, AZURE or GCP.
	CloudProvider *string `pulumi:"cloudProvider"`
	// Description for rule enforcement.
	Description *string `pulumi:"description"`
	// Id of the rule enforcement.
	EnforcementId *string `pulumi:"enforcementId"`
	// Execution schedule in cron format.
	ExecutionSchedule *string `pulumi:"executionSchedule"`
	// Timezone for the execution schedule.
	ExecutionTimezone *string `pulumi:"executionTimezone"`
	// Indicates if the rule enforcement is a dry run. This by default is set to false.
	IsDryRun *bool `pulumi:"isDryRun"`
	// Indicates if the rule enforcement is enabled. This by default is set to true.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Name of the rule enforcement.
	Name *string `pulumi:"name"`
	// List of rule IDs. Either rule*ids or rule*set_ids should be provided.
	RuleIds []string `pulumi:"ruleIds"`
	// List of rule set IDs. Either rule*ids or rule*set_ids should be provided.
	RuleSetIds []string `pulumi:"ruleSetIds"`
	// List of target account which can be either AWS Account Ids or Azure Subscription Ids or Gcp Project Ids.
	TargetAccounts []string `pulumi:"targetAccounts"`
	// List of target regions. For GCP it should be left empty but is required in case of AWS or Azure.
	TargetRegions []string `pulumi:"targetRegions"`
}

type RuleEnforcementState struct {
	// The cloud provider for the rule enforcement. It should be either AWS, AZURE or GCP.
	CloudProvider pulumi.StringPtrInput
	// Description for rule enforcement.
	Description pulumi.StringPtrInput
	// Id of the rule enforcement.
	EnforcementId pulumi.StringPtrInput
	// Execution schedule in cron format.
	ExecutionSchedule pulumi.StringPtrInput
	// Timezone for the execution schedule.
	ExecutionTimezone pulumi.StringPtrInput
	// Indicates if the rule enforcement is a dry run. This by default is set to false.
	IsDryRun pulumi.BoolPtrInput
	// Indicates if the rule enforcement is enabled. This by default is set to true.
	IsEnabled pulumi.BoolPtrInput
	// Name of the rule enforcement.
	Name pulumi.StringPtrInput
	// List of rule IDs. Either rule*ids or rule*set_ids should be provided.
	RuleIds pulumi.StringArrayInput
	// List of rule set IDs. Either rule*ids or rule*set_ids should be provided.
	RuleSetIds pulumi.StringArrayInput
	// List of target account which can be either AWS Account Ids or Azure Subscription Ids or Gcp Project Ids.
	TargetAccounts pulumi.StringArrayInput
	// List of target regions. For GCP it should be left empty but is required in case of AWS or Azure.
	TargetRegions pulumi.StringArrayInput
}

func (RuleEnforcementState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleEnforcementState)(nil)).Elem()
}

type ruleEnforcementArgs struct {
	// The cloud provider for the rule enforcement. It should be either AWS, AZURE or GCP.
	CloudProvider string `pulumi:"cloudProvider"`
	// Description for rule enforcement.
	Description *string `pulumi:"description"`
	// Execution schedule in cron format.
	ExecutionSchedule string `pulumi:"executionSchedule"`
	// Timezone for the execution schedule.
	ExecutionTimezone string `pulumi:"executionTimezone"`
	// Indicates if the rule enforcement is a dry run. This by default is set to false.
	IsDryRun *bool `pulumi:"isDryRun"`
	// Indicates if the rule enforcement is enabled. This by default is set to true.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Name of the rule enforcement.
	Name *string `pulumi:"name"`
	// List of rule IDs. Either rule*ids or rule*set_ids should be provided.
	RuleIds []string `pulumi:"ruleIds"`
	// List of rule set IDs. Either rule*ids or rule*set_ids should be provided.
	RuleSetIds []string `pulumi:"ruleSetIds"`
	// List of target account which can be either AWS Account Ids or Azure Subscription Ids or Gcp Project Ids.
	TargetAccounts []string `pulumi:"targetAccounts"`
	// List of target regions. For GCP it should be left empty but is required in case of AWS or Azure.
	TargetRegions []string `pulumi:"targetRegions"`
}

// The set of arguments for constructing a RuleEnforcement resource.
type RuleEnforcementArgs struct {
	// The cloud provider for the rule enforcement. It should be either AWS, AZURE or GCP.
	CloudProvider pulumi.StringInput
	// Description for rule enforcement.
	Description pulumi.StringPtrInput
	// Execution schedule in cron format.
	ExecutionSchedule pulumi.StringInput
	// Timezone for the execution schedule.
	ExecutionTimezone pulumi.StringInput
	// Indicates if the rule enforcement is a dry run. This by default is set to false.
	IsDryRun pulumi.BoolPtrInput
	// Indicates if the rule enforcement is enabled. This by default is set to true.
	IsEnabled pulumi.BoolPtrInput
	// Name of the rule enforcement.
	Name pulumi.StringPtrInput
	// List of rule IDs. Either rule*ids or rule*set_ids should be provided.
	RuleIds pulumi.StringArrayInput
	// List of rule set IDs. Either rule*ids or rule*set_ids should be provided.
	RuleSetIds pulumi.StringArrayInput
	// List of target account which can be either AWS Account Ids or Azure Subscription Ids or Gcp Project Ids.
	TargetAccounts pulumi.StringArrayInput
	// List of target regions. For GCP it should be left empty but is required in case of AWS or Azure.
	TargetRegions pulumi.StringArrayInput
}

func (RuleEnforcementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleEnforcementArgs)(nil)).Elem()
}

type RuleEnforcementInput interface {
	pulumi.Input

	ToRuleEnforcementOutput() RuleEnforcementOutput
	ToRuleEnforcementOutputWithContext(ctx context.Context) RuleEnforcementOutput
}

func (*RuleEnforcement) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleEnforcement)(nil)).Elem()
}

func (i *RuleEnforcement) ToRuleEnforcementOutput() RuleEnforcementOutput {
	return i.ToRuleEnforcementOutputWithContext(context.Background())
}

func (i *RuleEnforcement) ToRuleEnforcementOutputWithContext(ctx context.Context) RuleEnforcementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleEnforcementOutput)
}

// RuleEnforcementArrayInput is an input type that accepts RuleEnforcementArray and RuleEnforcementArrayOutput values.
// You can construct a concrete instance of `RuleEnforcementArrayInput` via:
//
//	RuleEnforcementArray{ RuleEnforcementArgs{...} }
type RuleEnforcementArrayInput interface {
	pulumi.Input

	ToRuleEnforcementArrayOutput() RuleEnforcementArrayOutput
	ToRuleEnforcementArrayOutputWithContext(context.Context) RuleEnforcementArrayOutput
}

type RuleEnforcementArray []RuleEnforcementInput

func (RuleEnforcementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleEnforcement)(nil)).Elem()
}

func (i RuleEnforcementArray) ToRuleEnforcementArrayOutput() RuleEnforcementArrayOutput {
	return i.ToRuleEnforcementArrayOutputWithContext(context.Background())
}

func (i RuleEnforcementArray) ToRuleEnforcementArrayOutputWithContext(ctx context.Context) RuleEnforcementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleEnforcementArrayOutput)
}

// RuleEnforcementMapInput is an input type that accepts RuleEnforcementMap and RuleEnforcementMapOutput values.
// You can construct a concrete instance of `RuleEnforcementMapInput` via:
//
//	RuleEnforcementMap{ "key": RuleEnforcementArgs{...} }
type RuleEnforcementMapInput interface {
	pulumi.Input

	ToRuleEnforcementMapOutput() RuleEnforcementMapOutput
	ToRuleEnforcementMapOutputWithContext(context.Context) RuleEnforcementMapOutput
}

type RuleEnforcementMap map[string]RuleEnforcementInput

func (RuleEnforcementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleEnforcement)(nil)).Elem()
}

func (i RuleEnforcementMap) ToRuleEnforcementMapOutput() RuleEnforcementMapOutput {
	return i.ToRuleEnforcementMapOutputWithContext(context.Background())
}

func (i RuleEnforcementMap) ToRuleEnforcementMapOutputWithContext(ctx context.Context) RuleEnforcementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleEnforcementMapOutput)
}

type RuleEnforcementOutput struct{ *pulumi.OutputState }

func (RuleEnforcementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleEnforcement)(nil)).Elem()
}

func (o RuleEnforcementOutput) ToRuleEnforcementOutput() RuleEnforcementOutput {
	return o
}

func (o RuleEnforcementOutput) ToRuleEnforcementOutputWithContext(ctx context.Context) RuleEnforcementOutput {
	return o
}

// The cloud provider for the rule enforcement. It should be either AWS, AZURE or GCP.
func (o RuleEnforcementOutput) CloudProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleEnforcement) pulumi.StringOutput { return v.CloudProvider }).(pulumi.StringOutput)
}

// Description for rule enforcement.
func (o RuleEnforcementOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleEnforcement) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Id of the rule enforcement.
func (o RuleEnforcementOutput) EnforcementId() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleEnforcement) pulumi.StringOutput { return v.EnforcementId }).(pulumi.StringOutput)
}

// Execution schedule in cron format.
func (o RuleEnforcementOutput) ExecutionSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleEnforcement) pulumi.StringOutput { return v.ExecutionSchedule }).(pulumi.StringOutput)
}

// Timezone for the execution schedule.
func (o RuleEnforcementOutput) ExecutionTimezone() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleEnforcement) pulumi.StringOutput { return v.ExecutionTimezone }).(pulumi.StringOutput)
}

// Indicates if the rule enforcement is a dry run. This by default is set to false.
func (o RuleEnforcementOutput) IsDryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuleEnforcement) pulumi.BoolPtrOutput { return v.IsDryRun }).(pulumi.BoolPtrOutput)
}

// Indicates if the rule enforcement is enabled. This by default is set to true.
func (o RuleEnforcementOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuleEnforcement) pulumi.BoolPtrOutput { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// Name of the rule enforcement.
func (o RuleEnforcementOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleEnforcement) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of rule IDs. Either rule*ids or rule*set_ids should be provided.
func (o RuleEnforcementOutput) RuleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuleEnforcement) pulumi.StringArrayOutput { return v.RuleIds }).(pulumi.StringArrayOutput)
}

// List of rule set IDs. Either rule*ids or rule*set_ids should be provided.
func (o RuleEnforcementOutput) RuleSetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuleEnforcement) pulumi.StringArrayOutput { return v.RuleSetIds }).(pulumi.StringArrayOutput)
}

// List of target account which can be either AWS Account Ids or Azure Subscription Ids or Gcp Project Ids.
func (o RuleEnforcementOutput) TargetAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuleEnforcement) pulumi.StringArrayOutput { return v.TargetAccounts }).(pulumi.StringArrayOutput)
}

// List of target regions. For GCP it should be left empty but is required in case of AWS or Azure.
func (o RuleEnforcementOutput) TargetRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuleEnforcement) pulumi.StringArrayOutput { return v.TargetRegions }).(pulumi.StringArrayOutput)
}

type RuleEnforcementArrayOutput struct{ *pulumi.OutputState }

func (RuleEnforcementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleEnforcement)(nil)).Elem()
}

func (o RuleEnforcementArrayOutput) ToRuleEnforcementArrayOutput() RuleEnforcementArrayOutput {
	return o
}

func (o RuleEnforcementArrayOutput) ToRuleEnforcementArrayOutputWithContext(ctx context.Context) RuleEnforcementArrayOutput {
	return o
}

func (o RuleEnforcementArrayOutput) Index(i pulumi.IntInput) RuleEnforcementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RuleEnforcement {
		return vs[0].([]*RuleEnforcement)[vs[1].(int)]
	}).(RuleEnforcementOutput)
}

type RuleEnforcementMapOutput struct{ *pulumi.OutputState }

func (RuleEnforcementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleEnforcement)(nil)).Elem()
}

func (o RuleEnforcementMapOutput) ToRuleEnforcementMapOutput() RuleEnforcementMapOutput {
	return o
}

func (o RuleEnforcementMapOutput) ToRuleEnforcementMapOutputWithContext(ctx context.Context) RuleEnforcementMapOutput {
	return o
}

func (o RuleEnforcementMapOutput) MapIndex(k pulumi.StringInput) RuleEnforcementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RuleEnforcement {
		return vs[0].(map[string]*RuleEnforcement)[vs[1].(string)]
	}).(RuleEnforcementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleEnforcementInput)(nil)).Elem(), &RuleEnforcement{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleEnforcementArrayInput)(nil)).Elem(), RuleEnforcementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleEnforcementMapInput)(nil)).Elem(), RuleEnforcementMap{})
	pulumi.RegisterOutputType(RuleEnforcementOutput{})
	pulumi.RegisterOutputType(RuleEnforcementArrayOutput{})
	pulumi.RegisterOutputType(RuleEnforcementMapOutput{})
}
