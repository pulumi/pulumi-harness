// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package governance

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating, updating, and managing rule.
type RuleSet struct {
	pulumi.CustomResourceState

	// The cloud provider for the rule set. It should be either AWS, AZURE or GCP.
	CloudProvider pulumi.StringOutput `pulumi:"cloudProvider"`
	// Description for rule set.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the rule set.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of rule IDs
	RuleIds pulumi.StringArrayOutput `pulumi:"ruleIds"`
	// Id of the rule.
	RuleSetId pulumi.StringOutput `pulumi:"ruleSetId"`
}

// NewRuleSet registers a new resource with the given unique name, arguments, and options.
func NewRuleSet(ctx *pulumi.Context,
	name string, args *RuleSetArgs, opts ...pulumi.ResourceOption) (*RuleSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudProvider == nil {
		return nil, errors.New("invalid value for required argument 'CloudProvider'")
	}
	if args.RuleIds == nil {
		return nil, errors.New("invalid value for required argument 'RuleIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RuleSet
	err := ctx.RegisterResource("harness:governance/ruleSet:RuleSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleSet gets an existing RuleSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleSetState, opts ...pulumi.ResourceOption) (*RuleSet, error) {
	var resource RuleSet
	err := ctx.ReadResource("harness:governance/ruleSet:RuleSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleSet resources.
type ruleSetState struct {
	// The cloud provider for the rule set. It should be either AWS, AZURE or GCP.
	CloudProvider *string `pulumi:"cloudProvider"`
	// Description for rule set.
	Description *string `pulumi:"description"`
	// Name of the rule set.
	Name *string `pulumi:"name"`
	// List of rule IDs
	RuleIds []string `pulumi:"ruleIds"`
	// Id of the rule.
	RuleSetId *string `pulumi:"ruleSetId"`
}

type RuleSetState struct {
	// The cloud provider for the rule set. It should be either AWS, AZURE or GCP.
	CloudProvider pulumi.StringPtrInput
	// Description for rule set.
	Description pulumi.StringPtrInput
	// Name of the rule set.
	Name pulumi.StringPtrInput
	// List of rule IDs
	RuleIds pulumi.StringArrayInput
	// Id of the rule.
	RuleSetId pulumi.StringPtrInput
}

func (RuleSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleSetState)(nil)).Elem()
}

type ruleSetArgs struct {
	// The cloud provider for the rule set. It should be either AWS, AZURE or GCP.
	CloudProvider string `pulumi:"cloudProvider"`
	// Description for rule set.
	Description *string `pulumi:"description"`
	// Name of the rule set.
	Name *string `pulumi:"name"`
	// List of rule IDs
	RuleIds []string `pulumi:"ruleIds"`
}

// The set of arguments for constructing a RuleSet resource.
type RuleSetArgs struct {
	// The cloud provider for the rule set. It should be either AWS, AZURE or GCP.
	CloudProvider pulumi.StringInput
	// Description for rule set.
	Description pulumi.StringPtrInput
	// Name of the rule set.
	Name pulumi.StringPtrInput
	// List of rule IDs
	RuleIds pulumi.StringArrayInput
}

func (RuleSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleSetArgs)(nil)).Elem()
}

type RuleSetInput interface {
	pulumi.Input

	ToRuleSetOutput() RuleSetOutput
	ToRuleSetOutputWithContext(ctx context.Context) RuleSetOutput
}

func (*RuleSet) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleSet)(nil)).Elem()
}

func (i *RuleSet) ToRuleSetOutput() RuleSetOutput {
	return i.ToRuleSetOutputWithContext(context.Background())
}

func (i *RuleSet) ToRuleSetOutputWithContext(ctx context.Context) RuleSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSetOutput)
}

// RuleSetArrayInput is an input type that accepts RuleSetArray and RuleSetArrayOutput values.
// You can construct a concrete instance of `RuleSetArrayInput` via:
//
//	RuleSetArray{ RuleSetArgs{...} }
type RuleSetArrayInput interface {
	pulumi.Input

	ToRuleSetArrayOutput() RuleSetArrayOutput
	ToRuleSetArrayOutputWithContext(context.Context) RuleSetArrayOutput
}

type RuleSetArray []RuleSetInput

func (RuleSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleSet)(nil)).Elem()
}

func (i RuleSetArray) ToRuleSetArrayOutput() RuleSetArrayOutput {
	return i.ToRuleSetArrayOutputWithContext(context.Background())
}

func (i RuleSetArray) ToRuleSetArrayOutputWithContext(ctx context.Context) RuleSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSetArrayOutput)
}

// RuleSetMapInput is an input type that accepts RuleSetMap and RuleSetMapOutput values.
// You can construct a concrete instance of `RuleSetMapInput` via:
//
//	RuleSetMap{ "key": RuleSetArgs{...} }
type RuleSetMapInput interface {
	pulumi.Input

	ToRuleSetMapOutput() RuleSetMapOutput
	ToRuleSetMapOutputWithContext(context.Context) RuleSetMapOutput
}

type RuleSetMap map[string]RuleSetInput

func (RuleSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleSet)(nil)).Elem()
}

func (i RuleSetMap) ToRuleSetMapOutput() RuleSetMapOutput {
	return i.ToRuleSetMapOutputWithContext(context.Background())
}

func (i RuleSetMap) ToRuleSetMapOutputWithContext(ctx context.Context) RuleSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSetMapOutput)
}

type RuleSetOutput struct{ *pulumi.OutputState }

func (RuleSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleSet)(nil)).Elem()
}

func (o RuleSetOutput) ToRuleSetOutput() RuleSetOutput {
	return o
}

func (o RuleSetOutput) ToRuleSetOutputWithContext(ctx context.Context) RuleSetOutput {
	return o
}

// The cloud provider for the rule set. It should be either AWS, AZURE or GCP.
func (o RuleSetOutput) CloudProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleSet) pulumi.StringOutput { return v.CloudProvider }).(pulumi.StringOutput)
}

// Description for rule set.
func (o RuleSetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleSet) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the rule set.
func (o RuleSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of rule IDs
func (o RuleSetOutput) RuleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuleSet) pulumi.StringArrayOutput { return v.RuleIds }).(pulumi.StringArrayOutput)
}

// Id of the rule.
func (o RuleSetOutput) RuleSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleSet) pulumi.StringOutput { return v.RuleSetId }).(pulumi.StringOutput)
}

type RuleSetArrayOutput struct{ *pulumi.OutputState }

func (RuleSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleSet)(nil)).Elem()
}

func (o RuleSetArrayOutput) ToRuleSetArrayOutput() RuleSetArrayOutput {
	return o
}

func (o RuleSetArrayOutput) ToRuleSetArrayOutputWithContext(ctx context.Context) RuleSetArrayOutput {
	return o
}

func (o RuleSetArrayOutput) Index(i pulumi.IntInput) RuleSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RuleSet {
		return vs[0].([]*RuleSet)[vs[1].(int)]
	}).(RuleSetOutput)
}

type RuleSetMapOutput struct{ *pulumi.OutputState }

func (RuleSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleSet)(nil)).Elem()
}

func (o RuleSetMapOutput) ToRuleSetMapOutput() RuleSetMapOutput {
	return o
}

func (o RuleSetMapOutput) ToRuleSetMapOutputWithContext(ctx context.Context) RuleSetMapOutput {
	return o
}

func (o RuleSetMapOutput) MapIndex(k pulumi.StringInput) RuleSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RuleSet {
		return vs[0].(map[string]*RuleSet)[vs[1].(string)]
	}).(RuleSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleSetInput)(nil)).Elem(), &RuleSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleSetArrayInput)(nil)).Elem(), RuleSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleSetMapInput)(nil)).Elem(), RuleSetMap{})
	pulumi.RegisterOutputType(RuleSetOutput{})
	pulumi.RegisterOutputType(RuleSetArrayOutput{})
	pulumi.RegisterOutputType(RuleSetMapOutput{})
}
