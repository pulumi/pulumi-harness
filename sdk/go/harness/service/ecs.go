// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package service

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating an AWS ECS service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `createBeforeDestroy = true` lifecycle setting.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness"
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/service"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := harness.NewApplication(ctx, "example", &harness.ApplicationArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = service.NewEcs(ctx, "example", &service.EcsArgs{
//				AppId:       example.ID(),
//				Name:        pulumi.String("ecs-example-service"),
//				Description: pulumi.String("Service for deploying AWS ECS tasks."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import using the Harness application id and service id
//
// ```sh
// $ pulumi import harness:service/ecs:Ecs example <app_id>/<svc_id>
// ```
type Ecs struct {
	pulumi.CustomResourceState

	// The id of the application the service belongs to
	AppId pulumi.StringOutput `pulumi:"appId"`
	// Description of th service
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the service
	Name pulumi.StringOutput `pulumi:"name"`
	// Variables to be used in the service
	Variables EcsVariableArrayOutput `pulumi:"variables"`
}

// NewEcs registers a new resource with the given unique name, arguments, and options.
func NewEcs(ctx *pulumi.Context,
	name string, args *EcsArgs, opts ...pulumi.ResourceOption) (*Ecs, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ecs
	err := ctx.RegisterResource("harness:service/ecs:Ecs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEcs gets an existing Ecs resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEcs(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EcsState, opts ...pulumi.ResourceOption) (*Ecs, error) {
	var resource Ecs
	err := ctx.ReadResource("harness:service/ecs:Ecs", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ecs resources.
type ecsState struct {
	// The id of the application the service belongs to
	AppId *string `pulumi:"appId"`
	// Description of th service
	Description *string `pulumi:"description"`
	// Name of the service
	Name *string `pulumi:"name"`
	// Variables to be used in the service
	Variables []EcsVariable `pulumi:"variables"`
}

type EcsState struct {
	// The id of the application the service belongs to
	AppId pulumi.StringPtrInput
	// Description of th service
	Description pulumi.StringPtrInput
	// Name of the service
	Name pulumi.StringPtrInput
	// Variables to be used in the service
	Variables EcsVariableArrayInput
}

func (EcsState) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsState)(nil)).Elem()
}

type ecsArgs struct {
	// The id of the application the service belongs to
	AppId string `pulumi:"appId"`
	// Description of th service
	Description *string `pulumi:"description"`
	// Name of the service
	Name *string `pulumi:"name"`
	// Variables to be used in the service
	Variables []EcsVariable `pulumi:"variables"`
}

// The set of arguments for constructing a Ecs resource.
type EcsArgs struct {
	// The id of the application the service belongs to
	AppId pulumi.StringInput
	// Description of th service
	Description pulumi.StringPtrInput
	// Name of the service
	Name pulumi.StringPtrInput
	// Variables to be used in the service
	Variables EcsVariableArrayInput
}

func (EcsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsArgs)(nil)).Elem()
}

type EcsInput interface {
	pulumi.Input

	ToEcsOutput() EcsOutput
	ToEcsOutputWithContext(ctx context.Context) EcsOutput
}

func (*Ecs) ElementType() reflect.Type {
	return reflect.TypeOf((**Ecs)(nil)).Elem()
}

func (i *Ecs) ToEcsOutput() EcsOutput {
	return i.ToEcsOutputWithContext(context.Background())
}

func (i *Ecs) ToEcsOutputWithContext(ctx context.Context) EcsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsOutput)
}

// EcsArrayInput is an input type that accepts EcsArray and EcsArrayOutput values.
// You can construct a concrete instance of `EcsArrayInput` via:
//
//	EcsArray{ EcsArgs{...} }
type EcsArrayInput interface {
	pulumi.Input

	ToEcsArrayOutput() EcsArrayOutput
	ToEcsArrayOutputWithContext(context.Context) EcsArrayOutput
}

type EcsArray []EcsInput

func (EcsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ecs)(nil)).Elem()
}

func (i EcsArray) ToEcsArrayOutput() EcsArrayOutput {
	return i.ToEcsArrayOutputWithContext(context.Background())
}

func (i EcsArray) ToEcsArrayOutputWithContext(ctx context.Context) EcsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsArrayOutput)
}

// EcsMapInput is an input type that accepts EcsMap and EcsMapOutput values.
// You can construct a concrete instance of `EcsMapInput` via:
//
//	EcsMap{ "key": EcsArgs{...} }
type EcsMapInput interface {
	pulumi.Input

	ToEcsMapOutput() EcsMapOutput
	ToEcsMapOutputWithContext(context.Context) EcsMapOutput
}

type EcsMap map[string]EcsInput

func (EcsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ecs)(nil)).Elem()
}

func (i EcsMap) ToEcsMapOutput() EcsMapOutput {
	return i.ToEcsMapOutputWithContext(context.Background())
}

func (i EcsMap) ToEcsMapOutputWithContext(ctx context.Context) EcsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsMapOutput)
}

type EcsOutput struct{ *pulumi.OutputState }

func (EcsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ecs)(nil)).Elem()
}

func (o EcsOutput) ToEcsOutput() EcsOutput {
	return o
}

func (o EcsOutput) ToEcsOutputWithContext(ctx context.Context) EcsOutput {
	return o
}

// The id of the application the service belongs to
func (o EcsOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ecs) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// Description of th service
func (o EcsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ecs) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the service
func (o EcsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ecs) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Variables to be used in the service
func (o EcsOutput) Variables() EcsVariableArrayOutput {
	return o.ApplyT(func(v *Ecs) EcsVariableArrayOutput { return v.Variables }).(EcsVariableArrayOutput)
}

type EcsArrayOutput struct{ *pulumi.OutputState }

func (EcsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ecs)(nil)).Elem()
}

func (o EcsArrayOutput) ToEcsArrayOutput() EcsArrayOutput {
	return o
}

func (o EcsArrayOutput) ToEcsArrayOutputWithContext(ctx context.Context) EcsArrayOutput {
	return o
}

func (o EcsArrayOutput) Index(i pulumi.IntInput) EcsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ecs {
		return vs[0].([]*Ecs)[vs[1].(int)]
	}).(EcsOutput)
}

type EcsMapOutput struct{ *pulumi.OutputState }

func (EcsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ecs)(nil)).Elem()
}

func (o EcsMapOutput) ToEcsMapOutput() EcsMapOutput {
	return o
}

func (o EcsMapOutput) ToEcsMapOutputWithContext(ctx context.Context) EcsMapOutput {
	return o
}

func (o EcsMapOutput) MapIndex(k pulumi.StringInput) EcsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ecs {
		return vs[0].(map[string]*Ecs)[vs[1].(string)]
	}).(EcsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EcsInput)(nil)).Elem(), &Ecs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsArrayInput)(nil)).Elem(), EcsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsMapInput)(nil)).Elem(), EcsMap{})
	pulumi.RegisterOutputType(EcsOutput{})
	pulumi.RegisterOutputType(EcsArrayOutput{})
	pulumi.RegisterOutputType(EcsMapOutput{})
}
