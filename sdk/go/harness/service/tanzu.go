// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package service

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Tanzu (PCF) service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `createBeforeDestroy = true` lifecycle setting.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness"
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/service"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := harness.NewApplication(ctx, "example", &harness.ApplicationArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = service.NewTanzu(ctx, "example", &service.TanzuArgs{
//				AppId:       example.ID(),
//				Name:        pulumi.String("tanzu-svc"),
//				Description: pulumi.String("A service for deploying Tanzu applications."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import using the Harness application id and service id
//
// ```sh
// $ pulumi import harness:service/tanzu:Tanzu example <app_id>/<svc_id>
// ```
type Tanzu struct {
	pulumi.CustomResourceState

	// The id of the application the service belongs to
	AppId pulumi.StringOutput `pulumi:"appId"`
	// Description of th service
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the service
	Name pulumi.StringOutput `pulumi:"name"`
	// Variables to be used in the service
	Variables TanzuVariableArrayOutput `pulumi:"variables"`
}

// NewTanzu registers a new resource with the given unique name, arguments, and options.
func NewTanzu(ctx *pulumi.Context,
	name string, args *TanzuArgs, opts ...pulumi.ResourceOption) (*Tanzu, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Tanzu
	err := ctx.RegisterResource("harness:service/tanzu:Tanzu", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTanzu gets an existing Tanzu resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTanzu(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TanzuState, opts ...pulumi.ResourceOption) (*Tanzu, error) {
	var resource Tanzu
	err := ctx.ReadResource("harness:service/tanzu:Tanzu", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Tanzu resources.
type tanzuState struct {
	// The id of the application the service belongs to
	AppId *string `pulumi:"appId"`
	// Description of th service
	Description *string `pulumi:"description"`
	// Name of the service
	Name *string `pulumi:"name"`
	// Variables to be used in the service
	Variables []TanzuVariable `pulumi:"variables"`
}

type TanzuState struct {
	// The id of the application the service belongs to
	AppId pulumi.StringPtrInput
	// Description of th service
	Description pulumi.StringPtrInput
	// Name of the service
	Name pulumi.StringPtrInput
	// Variables to be used in the service
	Variables TanzuVariableArrayInput
}

func (TanzuState) ElementType() reflect.Type {
	return reflect.TypeOf((*tanzuState)(nil)).Elem()
}

type tanzuArgs struct {
	// The id of the application the service belongs to
	AppId string `pulumi:"appId"`
	// Description of th service
	Description *string `pulumi:"description"`
	// Name of the service
	Name *string `pulumi:"name"`
	// Variables to be used in the service
	Variables []TanzuVariable `pulumi:"variables"`
}

// The set of arguments for constructing a Tanzu resource.
type TanzuArgs struct {
	// The id of the application the service belongs to
	AppId pulumi.StringInput
	// Description of th service
	Description pulumi.StringPtrInput
	// Name of the service
	Name pulumi.StringPtrInput
	// Variables to be used in the service
	Variables TanzuVariableArrayInput
}

func (TanzuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tanzuArgs)(nil)).Elem()
}

type TanzuInput interface {
	pulumi.Input

	ToTanzuOutput() TanzuOutput
	ToTanzuOutputWithContext(ctx context.Context) TanzuOutput
}

func (*Tanzu) ElementType() reflect.Type {
	return reflect.TypeOf((**Tanzu)(nil)).Elem()
}

func (i *Tanzu) ToTanzuOutput() TanzuOutput {
	return i.ToTanzuOutputWithContext(context.Background())
}

func (i *Tanzu) ToTanzuOutputWithContext(ctx context.Context) TanzuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TanzuOutput)
}

// TanzuArrayInput is an input type that accepts TanzuArray and TanzuArrayOutput values.
// You can construct a concrete instance of `TanzuArrayInput` via:
//
//	TanzuArray{ TanzuArgs{...} }
type TanzuArrayInput interface {
	pulumi.Input

	ToTanzuArrayOutput() TanzuArrayOutput
	ToTanzuArrayOutputWithContext(context.Context) TanzuArrayOutput
}

type TanzuArray []TanzuInput

func (TanzuArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tanzu)(nil)).Elem()
}

func (i TanzuArray) ToTanzuArrayOutput() TanzuArrayOutput {
	return i.ToTanzuArrayOutputWithContext(context.Background())
}

func (i TanzuArray) ToTanzuArrayOutputWithContext(ctx context.Context) TanzuArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TanzuArrayOutput)
}

// TanzuMapInput is an input type that accepts TanzuMap and TanzuMapOutput values.
// You can construct a concrete instance of `TanzuMapInput` via:
//
//	TanzuMap{ "key": TanzuArgs{...} }
type TanzuMapInput interface {
	pulumi.Input

	ToTanzuMapOutput() TanzuMapOutput
	ToTanzuMapOutputWithContext(context.Context) TanzuMapOutput
}

type TanzuMap map[string]TanzuInput

func (TanzuMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tanzu)(nil)).Elem()
}

func (i TanzuMap) ToTanzuMapOutput() TanzuMapOutput {
	return i.ToTanzuMapOutputWithContext(context.Background())
}

func (i TanzuMap) ToTanzuMapOutputWithContext(ctx context.Context) TanzuMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TanzuMapOutput)
}

type TanzuOutput struct{ *pulumi.OutputState }

func (TanzuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tanzu)(nil)).Elem()
}

func (o TanzuOutput) ToTanzuOutput() TanzuOutput {
	return o
}

func (o TanzuOutput) ToTanzuOutputWithContext(ctx context.Context) TanzuOutput {
	return o
}

// The id of the application the service belongs to
func (o TanzuOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *Tanzu) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// Description of th service
func (o TanzuOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tanzu) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the service
func (o TanzuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Tanzu) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Variables to be used in the service
func (o TanzuOutput) Variables() TanzuVariableArrayOutput {
	return o.ApplyT(func(v *Tanzu) TanzuVariableArrayOutput { return v.Variables }).(TanzuVariableArrayOutput)
}

type TanzuArrayOutput struct{ *pulumi.OutputState }

func (TanzuArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tanzu)(nil)).Elem()
}

func (o TanzuArrayOutput) ToTanzuArrayOutput() TanzuArrayOutput {
	return o
}

func (o TanzuArrayOutput) ToTanzuArrayOutputWithContext(ctx context.Context) TanzuArrayOutput {
	return o
}

func (o TanzuArrayOutput) Index(i pulumi.IntInput) TanzuOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Tanzu {
		return vs[0].([]*Tanzu)[vs[1].(int)]
	}).(TanzuOutput)
}

type TanzuMapOutput struct{ *pulumi.OutputState }

func (TanzuMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tanzu)(nil)).Elem()
}

func (o TanzuMapOutput) ToTanzuMapOutput() TanzuMapOutput {
	return o
}

func (o TanzuMapOutput) ToTanzuMapOutputWithContext(ctx context.Context) TanzuMapOutput {
	return o
}

func (o TanzuMapOutput) MapIndex(k pulumi.StringInput) TanzuOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Tanzu {
		return vs[0].(map[string]*Tanzu)[vs[1].(string)]
	}).(TanzuOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TanzuInput)(nil)).Elem(), &Tanzu{})
	pulumi.RegisterInputType(reflect.TypeOf((*TanzuArrayInput)(nil)).Elem(), TanzuArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TanzuMapInput)(nil)).Elem(), TanzuMap{})
	pulumi.RegisterOutputType(TanzuOutput{})
	pulumi.RegisterOutputType(TanzuArrayOutput{})
	pulumi.RegisterOutputType(TanzuMapOutput{})
}
