// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package service

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing a Harness Service Discovery Agent.
//
// This resource allows you to create, read, update, and delete a Service Discovery Agent in Harness.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/service"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := service.NewDiscoveryAgent(ctx, "example", &service.DiscoveryAgentArgs{
//				Name:                  pulumi.String("ExampleAgent"),
//				OrgIdentifier:         pulumi.String("your_org_id"),
//				ProjectIdentifier:     pulumi.String("your_project_id"),
//				EnvironmentIdentifier: pulumi.String("your_environment_id"),
//				InfraIdentifier:       pulumi.String("your_infra_id"),
//				Configs: service.DiscoveryAgentConfigArray{
//					&service.DiscoveryAgentConfigArgs{
//						CollectorImage:  pulumi.String("harness/service-discovery-collector:main-latest"),
//						LogWatcherImage: pulumi.String("harness/chaos-log-watcher:main-latest"),
//						Kubernetes: service.DiscoveryAgentConfigKuberneteArray{
//							&service.DiscoveryAgentConfigKuberneteArgs{
//								Namespace: pulumi.String("harness-sd"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Additional Examples
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/service"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a new service discovery agent with minimal configuration
//			_, err := service.NewDiscoveryAgent(ctx, "example", &service.DiscoveryAgentArgs{
//				Name:                  pulumi.String("example-agent"),
//				OrgIdentifier:         pulumi.Any(orgIdentifier),
//				ProjectIdentifier:     pulumi.Any(projectIdentifier),
//				EnvironmentIdentifier: pulumi.Any(environmentIdentifier),
//				InfraIdentifier:       pulumi.String("example-infra"),
//				Configs: service.DiscoveryAgentConfigArray{
//					&service.DiscoveryAgentConfigArgs{
//						Kubernetes: service.DiscoveryAgentConfigKuberneteArray{
//							&service.DiscoveryAgentConfigKuberneteArgs{
//								Namespace: pulumi.String("harness-sd"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Create a new service discovery agent with node agent enabled
//			_, err = service.NewDiscoveryAgent(ctx, "node_agent", &service.DiscoveryAgentArgs{
//				Name:                  pulumi.String("node-agent-example"),
//				OrgIdentifier:         pulumi.Any(orgIdentifier),
//				ProjectIdentifier:     pulumi.Any(projectIdentifier),
//				EnvironmentIdentifier: pulumi.Any(environmentIdentifier),
//				InfraIdentifier:       pulumi.String("node-agent-example"),
//				Configs: service.DiscoveryAgentConfigArray{
//					&service.DiscoveryAgentConfigArgs{
//						Kubernetes: service.DiscoveryAgentConfigKuberneteArray{
//							&service.DiscoveryAgentConfigKuberneteArgs{
//								Namespace: pulumi.String("harness-sd"),
//							},
//						},
//						Datas: service.DiscoveryAgentConfigDataArray{
//							&service.DiscoveryAgentConfigDataArgs{
//								EnableNodeAgent: pulumi.Bool(true),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Create a new service discovery agent with full configuration
//			_, err = service.NewDiscoveryAgent(ctx, "full_config", &service.DiscoveryAgentArgs{
//				Name:                  pulumi.String("full-config-example"),
//				OrgIdentifier:         pulumi.Any(orgIdentifier),
//				ProjectIdentifier:     pulumi.Any(projectIdentifier),
//				EnvironmentIdentifier: pulumi.Any(environmentIdentifier),
//				InfraIdentifier:       pulumi.String("full-config-example"),
//				PermanentInstallation: pulumi.Bool(false),
//				CorrelationId:         pulumi.String("full-config-correlation-123"),
//				Configs: service.DiscoveryAgentConfigArray{
//					&service.DiscoveryAgentConfigArgs{
//						CollectorImage:   pulumi.String("harness/service-discovery-collector:main-latest"),
//						LogWatcherImage:  pulumi.String("harness/chaos-log-watcher:main-latest"),
//						SkipSecureVerify: pulumi.Bool(false),
//						Kubernetes: service.DiscoveryAgentConfigKuberneteArray{
//							&service.DiscoveryAgentConfigKuberneteArgs{
//								Namespace:       pulumi.String("harness-sd"),
//								ServiceAccount:  pulumi.String("harness-sd-sa"),
//								ImagePullPolicy: pulumi.String("IfNotPresent"),
//								RunAsUser:       pulumi.Int(2000),
//								RunAsGroup:      pulumi.Int(2000),
//								Labels: pulumi.StringMap{
//									"app": pulumi.String("service-discovery"),
//									"env": pulumi.String("dev"),
//								},
//								Annotations: pulumi.StringMap{
//									"example.com/annotation": pulumi.String("value"),
//								},
//								NodeSelector: pulumi.StringMap{
//									"kubernetes.io/os": pulumi.String("linux"),
//								},
//								Resources: service.DiscoveryAgentConfigKuberneteResourceArray{
//									&service.DiscoveryAgentConfigKuberneteResourceArgs{
//										Limits: service.DiscoveryAgentConfigKuberneteResourceLimitArray{
//											Cpu:    "500m",
//											Memory: "512Mi",
//										},
//										Requests: service.DiscoveryAgentConfigKuberneteResourceRequestArray{
//											Cpu:    "250m",
//											Memory: "256Mi",
//										},
//									},
//								},
//								Tolerations: service.DiscoveryAgentConfigKuberneteTolerationArray{
//									&service.DiscoveryAgentConfigKuberneteTolerationArgs{
//										Key:      pulumi.String("key1"),
//										Operator: pulumi.String("Equal"),
//										Value:    pulumi.String("value1"),
//										Effect:   pulumi.String("NoSchedule"),
//									},
//								},
//							},
//						},
//						Datas: service.DiscoveryAgentConfigDataArray{
//							&service.DiscoveryAgentConfigDataArgs{
//								EnableNodeAgent:       pulumi.Bool(true),
//								NodeAgentSelector:     pulumi.String("node-role.kubernetes.io/worker="),
//								EnableBatchResources:  pulumi.Bool(true),
//								EnableOrphanedPod:     pulumi.Bool(true),
//								NamespaceSelector:     pulumi.String("environment=dev"),
//								CollectionWindowInMin: pulumi.Int(15),
//								BlacklistedNamespaces: pulumi.StringArray{
//									pulumi.String("kube-system"),
//									pulumi.String("kube-public"),
//								},
//								ObservedNamespaces: pulumi.StringArray{
//									pulumi.String("default"),
//									pulumi.String("harness"),
//								},
//								Crons: service.DiscoveryAgentConfigDataCronArray{
//									&service.DiscoveryAgentConfigDataCronArgs{
//										Expression: pulumi.String("0/10 * * * *"),
//									},
//								},
//							},
//						},
//						Mtls: service.DiscoveryAgentConfigMtlArray{
//							&service.DiscoveryAgentConfigMtlArgs{
//								CertPath:   pulumi.String("/etc/certs/tls.crt"),
//								KeyPath:    pulumi.String("/etc/certs/tls.key"),
//								SecretName: pulumi.String("mtls-secret"),
//								Url:        pulumi.String("https://mtls.example.com:8443"),
//							},
//						},
//						Proxies: service.DiscoveryAgentConfigProxyArray{
//							&service.DiscoveryAgentConfigProxyArgs{
//								HttpProxy:  pulumi.String("http://proxy.example.com:8080"),
//								HttpsProxy: pulumi.String("https://proxy.example.com:8080"),
//								NoProxy:    pulumi.String("localhost,127.0.0.1,.svc,.cluster.local"),
//								Url:        pulumi.String("https://proxy.example.com"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import Project level Service Discovery Agent
//
// # Account and Org level agents are not supported yet
//
// ```sh
// $ pulumi import harness:service/discoveryAgent:DiscoveryAgent example <org_identifier>/<project_identifier>/<environment_identifier>/<infra_identifier>
// ```
type DiscoveryAgent struct {
	pulumi.CustomResourceState

	// Configuration for the agent. This is a required field.
	Configs DiscoveryAgentConfigArrayOutput `pulumi:"configs"`
	// Correlation ID for the agent.
	CorrelationId pulumi.StringOutput `pulumi:"correlationId"`
	// Timestamp when the agent was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// User who created the agent.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// Description of the agent.
	Description pulumi.StringOutput `pulumi:"description"`
	// The environment identifier of the agent. This is a required field.
	EnvironmentIdentifier pulumi.StringOutput `pulumi:"environmentIdentifier"`
	// The unique identity of the agent.
	Identity pulumi.StringOutput `pulumi:"identity"`
	// The infrastructure identifier of the agent. This is a required field.
	InfraIdentifier pulumi.StringOutput `pulumi:"infraIdentifier"`
	// Installation details of the agent.
	InstallationDetails DiscoveryAgentInstallationDetailArrayOutput `pulumi:"installationDetails"`
	// Type of installation for the agent.
	InstallationType pulumi.StringPtrOutput `pulumi:"installationType"`
	// The name of the agent. This is a required field.
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of network maps associated with this agent.
	NetworkMapCount pulumi.IntOutput `pulumi:"networkMapCount"`
	// The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
	OrgIdentifier pulumi.StringPtrOutput `pulumi:"orgIdentifier"`
	// Whether this is a permanent installation.
	PermanentInstallation pulumi.BoolPtrOutput `pulumi:"permanentInstallation"`
	// The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
	ProjectIdentifier pulumi.StringPtrOutput `pulumi:"projectIdentifier"`
	// Whether the agent has been removed.
	Removed pulumi.BoolOutput `pulumi:"removed"`
	// Timestamp when the agent was removed.
	RemovedAt pulumi.StringOutput `pulumi:"removedAt"`
	// Number of services managed by this agent.
	ServiceCount pulumi.IntOutput `pulumi:"serviceCount"`
	// List of resource tags for the agent.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Timestamp when the agent was last updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// User who last updated the agent.
	UpdatedBy pulumi.StringOutput `pulumi:"updatedBy"`
	// Webhook URL for the agent.
	WebhookUrl pulumi.StringPtrOutput `pulumi:"webhookUrl"`
}

// NewDiscoveryAgent registers a new resource with the given unique name, arguments, and options.
func NewDiscoveryAgent(ctx *pulumi.Context,
	name string, args *DiscoveryAgentArgs, opts ...pulumi.ResourceOption) (*DiscoveryAgent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configs == nil {
		return nil, errors.New("invalid value for required argument 'Configs'")
	}
	if args.EnvironmentIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentIdentifier'")
	}
	if args.InfraIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'InfraIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DiscoveryAgent
	err := ctx.RegisterResource("harness:service/discoveryAgent:DiscoveryAgent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiscoveryAgent gets an existing DiscoveryAgent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiscoveryAgent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiscoveryAgentState, opts ...pulumi.ResourceOption) (*DiscoveryAgent, error) {
	var resource DiscoveryAgent
	err := ctx.ReadResource("harness:service/discoveryAgent:DiscoveryAgent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiscoveryAgent resources.
type discoveryAgentState struct {
	// Configuration for the agent. This is a required field.
	Configs []DiscoveryAgentConfig `pulumi:"configs"`
	// Correlation ID for the agent.
	CorrelationId *string `pulumi:"correlationId"`
	// Timestamp when the agent was created.
	CreatedAt *string `pulumi:"createdAt"`
	// User who created the agent.
	CreatedBy *string `pulumi:"createdBy"`
	// Description of the agent.
	Description *string `pulumi:"description"`
	// The environment identifier of the agent. This is a required field.
	EnvironmentIdentifier *string `pulumi:"environmentIdentifier"`
	// The unique identity of the agent.
	Identity *string `pulumi:"identity"`
	// The infrastructure identifier of the agent. This is a required field.
	InfraIdentifier *string `pulumi:"infraIdentifier"`
	// Installation details of the agent.
	InstallationDetails []DiscoveryAgentInstallationDetail `pulumi:"installationDetails"`
	// Type of installation for the agent.
	InstallationType *string `pulumi:"installationType"`
	// The name of the agent. This is a required field.
	Name *string `pulumi:"name"`
	// Number of network maps associated with this agent.
	NetworkMapCount *int `pulumi:"networkMapCount"`
	// The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
	OrgIdentifier *string `pulumi:"orgIdentifier"`
	// Whether this is a permanent installation.
	PermanentInstallation *bool `pulumi:"permanentInstallation"`
	// The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
	ProjectIdentifier *string `pulumi:"projectIdentifier"`
	// Whether the agent has been removed.
	Removed *bool `pulumi:"removed"`
	// Timestamp when the agent was removed.
	RemovedAt *string `pulumi:"removedAt"`
	// Number of services managed by this agent.
	ServiceCount *int `pulumi:"serviceCount"`
	// List of resource tags for the agent.
	Tags []string `pulumi:"tags"`
	// Timestamp when the agent was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
	// User who last updated the agent.
	UpdatedBy *string `pulumi:"updatedBy"`
	// Webhook URL for the agent.
	WebhookUrl *string `pulumi:"webhookUrl"`
}

type DiscoveryAgentState struct {
	// Configuration for the agent. This is a required field.
	Configs DiscoveryAgentConfigArrayInput
	// Correlation ID for the agent.
	CorrelationId pulumi.StringPtrInput
	// Timestamp when the agent was created.
	CreatedAt pulumi.StringPtrInput
	// User who created the agent.
	CreatedBy pulumi.StringPtrInput
	// Description of the agent.
	Description pulumi.StringPtrInput
	// The environment identifier of the agent. This is a required field.
	EnvironmentIdentifier pulumi.StringPtrInput
	// The unique identity of the agent.
	Identity pulumi.StringPtrInput
	// The infrastructure identifier of the agent. This is a required field.
	InfraIdentifier pulumi.StringPtrInput
	// Installation details of the agent.
	InstallationDetails DiscoveryAgentInstallationDetailArrayInput
	// Type of installation for the agent.
	InstallationType pulumi.StringPtrInput
	// The name of the agent. This is a required field.
	Name pulumi.StringPtrInput
	// Number of network maps associated with this agent.
	NetworkMapCount pulumi.IntPtrInput
	// The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
	OrgIdentifier pulumi.StringPtrInput
	// Whether this is a permanent installation.
	PermanentInstallation pulumi.BoolPtrInput
	// The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
	ProjectIdentifier pulumi.StringPtrInput
	// Whether the agent has been removed.
	Removed pulumi.BoolPtrInput
	// Timestamp when the agent was removed.
	RemovedAt pulumi.StringPtrInput
	// Number of services managed by this agent.
	ServiceCount pulumi.IntPtrInput
	// List of resource tags for the agent.
	Tags pulumi.StringArrayInput
	// Timestamp when the agent was last updated.
	UpdatedAt pulumi.StringPtrInput
	// User who last updated the agent.
	UpdatedBy pulumi.StringPtrInput
	// Webhook URL for the agent.
	WebhookUrl pulumi.StringPtrInput
}

func (DiscoveryAgentState) ElementType() reflect.Type {
	return reflect.TypeOf((*discoveryAgentState)(nil)).Elem()
}

type discoveryAgentArgs struct {
	// Configuration for the agent. This is a required field.
	Configs []DiscoveryAgentConfig `pulumi:"configs"`
	// Correlation ID for the agent.
	CorrelationId *string `pulumi:"correlationId"`
	// The environment identifier of the agent. This is a required field.
	EnvironmentIdentifier string `pulumi:"environmentIdentifier"`
	// The infrastructure identifier of the agent. This is a required field.
	InfraIdentifier string `pulumi:"infraIdentifier"`
	// Type of installation for the agent.
	InstallationType *string `pulumi:"installationType"`
	// The name of the agent. This is a required field.
	Name *string `pulumi:"name"`
	// The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
	OrgIdentifier *string `pulumi:"orgIdentifier"`
	// Whether this is a permanent installation.
	PermanentInstallation *bool `pulumi:"permanentInstallation"`
	// The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
	ProjectIdentifier *string `pulumi:"projectIdentifier"`
	// Webhook URL for the agent.
	WebhookUrl *string `pulumi:"webhookUrl"`
}

// The set of arguments for constructing a DiscoveryAgent resource.
type DiscoveryAgentArgs struct {
	// Configuration for the agent. This is a required field.
	Configs DiscoveryAgentConfigArrayInput
	// Correlation ID for the agent.
	CorrelationId pulumi.StringPtrInput
	// The environment identifier of the agent. This is a required field.
	EnvironmentIdentifier pulumi.StringInput
	// The infrastructure identifier of the agent. This is a required field.
	InfraIdentifier pulumi.StringInput
	// Type of installation for the agent.
	InstallationType pulumi.StringPtrInput
	// The name of the agent. This is a required field.
	Name pulumi.StringPtrInput
	// The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
	OrgIdentifier pulumi.StringPtrInput
	// Whether this is a permanent installation.
	PermanentInstallation pulumi.BoolPtrInput
	// The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
	ProjectIdentifier pulumi.StringPtrInput
	// Webhook URL for the agent.
	WebhookUrl pulumi.StringPtrInput
}

func (DiscoveryAgentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*discoveryAgentArgs)(nil)).Elem()
}

type DiscoveryAgentInput interface {
	pulumi.Input

	ToDiscoveryAgentOutput() DiscoveryAgentOutput
	ToDiscoveryAgentOutputWithContext(ctx context.Context) DiscoveryAgentOutput
}

func (*DiscoveryAgent) ElementType() reflect.Type {
	return reflect.TypeOf((**DiscoveryAgent)(nil)).Elem()
}

func (i *DiscoveryAgent) ToDiscoveryAgentOutput() DiscoveryAgentOutput {
	return i.ToDiscoveryAgentOutputWithContext(context.Background())
}

func (i *DiscoveryAgent) ToDiscoveryAgentOutputWithContext(ctx context.Context) DiscoveryAgentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryAgentOutput)
}

// DiscoveryAgentArrayInput is an input type that accepts DiscoveryAgentArray and DiscoveryAgentArrayOutput values.
// You can construct a concrete instance of `DiscoveryAgentArrayInput` via:
//
//	DiscoveryAgentArray{ DiscoveryAgentArgs{...} }
type DiscoveryAgentArrayInput interface {
	pulumi.Input

	ToDiscoveryAgentArrayOutput() DiscoveryAgentArrayOutput
	ToDiscoveryAgentArrayOutputWithContext(context.Context) DiscoveryAgentArrayOutput
}

type DiscoveryAgentArray []DiscoveryAgentInput

func (DiscoveryAgentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DiscoveryAgent)(nil)).Elem()
}

func (i DiscoveryAgentArray) ToDiscoveryAgentArrayOutput() DiscoveryAgentArrayOutput {
	return i.ToDiscoveryAgentArrayOutputWithContext(context.Background())
}

func (i DiscoveryAgentArray) ToDiscoveryAgentArrayOutputWithContext(ctx context.Context) DiscoveryAgentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryAgentArrayOutput)
}

// DiscoveryAgentMapInput is an input type that accepts DiscoveryAgentMap and DiscoveryAgentMapOutput values.
// You can construct a concrete instance of `DiscoveryAgentMapInput` via:
//
//	DiscoveryAgentMap{ "key": DiscoveryAgentArgs{...} }
type DiscoveryAgentMapInput interface {
	pulumi.Input

	ToDiscoveryAgentMapOutput() DiscoveryAgentMapOutput
	ToDiscoveryAgentMapOutputWithContext(context.Context) DiscoveryAgentMapOutput
}

type DiscoveryAgentMap map[string]DiscoveryAgentInput

func (DiscoveryAgentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DiscoveryAgent)(nil)).Elem()
}

func (i DiscoveryAgentMap) ToDiscoveryAgentMapOutput() DiscoveryAgentMapOutput {
	return i.ToDiscoveryAgentMapOutputWithContext(context.Background())
}

func (i DiscoveryAgentMap) ToDiscoveryAgentMapOutputWithContext(ctx context.Context) DiscoveryAgentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryAgentMapOutput)
}

type DiscoveryAgentOutput struct{ *pulumi.OutputState }

func (DiscoveryAgentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiscoveryAgent)(nil)).Elem()
}

func (o DiscoveryAgentOutput) ToDiscoveryAgentOutput() DiscoveryAgentOutput {
	return o
}

func (o DiscoveryAgentOutput) ToDiscoveryAgentOutputWithContext(ctx context.Context) DiscoveryAgentOutput {
	return o
}

// Configuration for the agent. This is a required field.
func (o DiscoveryAgentOutput) Configs() DiscoveryAgentConfigArrayOutput {
	return o.ApplyT(func(v *DiscoveryAgent) DiscoveryAgentConfigArrayOutput { return v.Configs }).(DiscoveryAgentConfigArrayOutput)
}

// Correlation ID for the agent.
func (o DiscoveryAgentOutput) CorrelationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryAgent) pulumi.StringOutput { return v.CorrelationId }).(pulumi.StringOutput)
}

// Timestamp when the agent was created.
func (o DiscoveryAgentOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryAgent) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// User who created the agent.
func (o DiscoveryAgentOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryAgent) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// Description of the agent.
func (o DiscoveryAgentOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryAgent) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The environment identifier of the agent. This is a required field.
func (o DiscoveryAgentOutput) EnvironmentIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryAgent) pulumi.StringOutput { return v.EnvironmentIdentifier }).(pulumi.StringOutput)
}

// The unique identity of the agent.
func (o DiscoveryAgentOutput) Identity() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryAgent) pulumi.StringOutput { return v.Identity }).(pulumi.StringOutput)
}

// The infrastructure identifier of the agent. This is a required field.
func (o DiscoveryAgentOutput) InfraIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryAgent) pulumi.StringOutput { return v.InfraIdentifier }).(pulumi.StringOutput)
}

// Installation details of the agent.
func (o DiscoveryAgentOutput) InstallationDetails() DiscoveryAgentInstallationDetailArrayOutput {
	return o.ApplyT(func(v *DiscoveryAgent) DiscoveryAgentInstallationDetailArrayOutput { return v.InstallationDetails }).(DiscoveryAgentInstallationDetailArrayOutput)
}

// Type of installation for the agent.
func (o DiscoveryAgentOutput) InstallationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiscoveryAgent) pulumi.StringPtrOutput { return v.InstallationType }).(pulumi.StringPtrOutput)
}

// The name of the agent. This is a required field.
func (o DiscoveryAgentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryAgent) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of network maps associated with this agent.
func (o DiscoveryAgentOutput) NetworkMapCount() pulumi.IntOutput {
	return o.ApplyT(func(v *DiscoveryAgent) pulumi.IntOutput { return v.NetworkMapCount }).(pulumi.IntOutput)
}

// The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
func (o DiscoveryAgentOutput) OrgIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiscoveryAgent) pulumi.StringPtrOutput { return v.OrgIdentifier }).(pulumi.StringPtrOutput)
}

// Whether this is a permanent installation.
func (o DiscoveryAgentOutput) PermanentInstallation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DiscoveryAgent) pulumi.BoolPtrOutput { return v.PermanentInstallation }).(pulumi.BoolPtrOutput)
}

// The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
func (o DiscoveryAgentOutput) ProjectIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiscoveryAgent) pulumi.StringPtrOutput { return v.ProjectIdentifier }).(pulumi.StringPtrOutput)
}

// Whether the agent has been removed.
func (o DiscoveryAgentOutput) Removed() pulumi.BoolOutput {
	return o.ApplyT(func(v *DiscoveryAgent) pulumi.BoolOutput { return v.Removed }).(pulumi.BoolOutput)
}

// Timestamp when the agent was removed.
func (o DiscoveryAgentOutput) RemovedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryAgent) pulumi.StringOutput { return v.RemovedAt }).(pulumi.StringOutput)
}

// Number of services managed by this agent.
func (o DiscoveryAgentOutput) ServiceCount() pulumi.IntOutput {
	return o.ApplyT(func(v *DiscoveryAgent) pulumi.IntOutput { return v.ServiceCount }).(pulumi.IntOutput)
}

// List of resource tags for the agent.
func (o DiscoveryAgentOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DiscoveryAgent) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Timestamp when the agent was last updated.
func (o DiscoveryAgentOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryAgent) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// User who last updated the agent.
func (o DiscoveryAgentOutput) UpdatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryAgent) pulumi.StringOutput { return v.UpdatedBy }).(pulumi.StringOutput)
}

// Webhook URL for the agent.
func (o DiscoveryAgentOutput) WebhookUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiscoveryAgent) pulumi.StringPtrOutput { return v.WebhookUrl }).(pulumi.StringPtrOutput)
}

type DiscoveryAgentArrayOutput struct{ *pulumi.OutputState }

func (DiscoveryAgentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DiscoveryAgent)(nil)).Elem()
}

func (o DiscoveryAgentArrayOutput) ToDiscoveryAgentArrayOutput() DiscoveryAgentArrayOutput {
	return o
}

func (o DiscoveryAgentArrayOutput) ToDiscoveryAgentArrayOutputWithContext(ctx context.Context) DiscoveryAgentArrayOutput {
	return o
}

func (o DiscoveryAgentArrayOutput) Index(i pulumi.IntInput) DiscoveryAgentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DiscoveryAgent {
		return vs[0].([]*DiscoveryAgent)[vs[1].(int)]
	}).(DiscoveryAgentOutput)
}

type DiscoveryAgentMapOutput struct{ *pulumi.OutputState }

func (DiscoveryAgentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DiscoveryAgent)(nil)).Elem()
}

func (o DiscoveryAgentMapOutput) ToDiscoveryAgentMapOutput() DiscoveryAgentMapOutput {
	return o
}

func (o DiscoveryAgentMapOutput) ToDiscoveryAgentMapOutputWithContext(ctx context.Context) DiscoveryAgentMapOutput {
	return o
}

func (o DiscoveryAgentMapOutput) MapIndex(k pulumi.StringInput) DiscoveryAgentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DiscoveryAgent {
		return vs[0].(map[string]*DiscoveryAgent)[vs[1].(string)]
	}).(DiscoveryAgentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveryAgentInput)(nil)).Elem(), &DiscoveryAgent{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveryAgentArrayInput)(nil)).Elem(), DiscoveryAgentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveryAgentMapInput)(nil)).Elem(), DiscoveryAgentMap{})
	pulumi.RegisterOutputType(DiscoveryAgentOutput{})
	pulumi.RegisterOutputType(DiscoveryAgentArrayOutput{})
	pulumi.RegisterOutputType(DiscoveryAgentMapOutput{})
}
