// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package service

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating an AMI service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `createBeforeDestroy = true` lifecycle setting.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness"
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/service"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := harness.NewApplication(ctx, "example", &harness.ApplicationArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = service.NewAmi(ctx, "example", &service.AmiArgs{
//				AppId:       example.ID(),
//				Name:        pulumi.String("ami-example"),
//				Description: pulumi.String("Service for deploying AMI's"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import using the Harness application id and service id
//
// ```sh
// $ pulumi import harness:service/ami:Ami example <app_id>/<svc_id>
// ```
type Ami struct {
	pulumi.CustomResourceState

	// The id of the application the service belongs to
	AppId pulumi.StringOutput `pulumi:"appId"`
	// Description of th service
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the service
	Name pulumi.StringOutput `pulumi:"name"`
	// Variables to be used in the service
	Variables AmiVariableArrayOutput `pulumi:"variables"`
}

// NewAmi registers a new resource with the given unique name, arguments, and options.
func NewAmi(ctx *pulumi.Context,
	name string, args *AmiArgs, opts ...pulumi.ResourceOption) (*Ami, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ami
	err := ctx.RegisterResource("harness:service/ami:Ami", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAmi gets an existing Ami resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAmi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AmiState, opts ...pulumi.ResourceOption) (*Ami, error) {
	var resource Ami
	err := ctx.ReadResource("harness:service/ami:Ami", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ami resources.
type amiState struct {
	// The id of the application the service belongs to
	AppId *string `pulumi:"appId"`
	// Description of th service
	Description *string `pulumi:"description"`
	// Name of the service
	Name *string `pulumi:"name"`
	// Variables to be used in the service
	Variables []AmiVariable `pulumi:"variables"`
}

type AmiState struct {
	// The id of the application the service belongs to
	AppId pulumi.StringPtrInput
	// Description of th service
	Description pulumi.StringPtrInput
	// Name of the service
	Name pulumi.StringPtrInput
	// Variables to be used in the service
	Variables AmiVariableArrayInput
}

func (AmiState) ElementType() reflect.Type {
	return reflect.TypeOf((*amiState)(nil)).Elem()
}

type amiArgs struct {
	// The id of the application the service belongs to
	AppId string `pulumi:"appId"`
	// Description of th service
	Description *string `pulumi:"description"`
	// Name of the service
	Name *string `pulumi:"name"`
	// Variables to be used in the service
	Variables []AmiVariable `pulumi:"variables"`
}

// The set of arguments for constructing a Ami resource.
type AmiArgs struct {
	// The id of the application the service belongs to
	AppId pulumi.StringInput
	// Description of th service
	Description pulumi.StringPtrInput
	// Name of the service
	Name pulumi.StringPtrInput
	// Variables to be used in the service
	Variables AmiVariableArrayInput
}

func (AmiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*amiArgs)(nil)).Elem()
}

type AmiInput interface {
	pulumi.Input

	ToAmiOutput() AmiOutput
	ToAmiOutputWithContext(ctx context.Context) AmiOutput
}

func (*Ami) ElementType() reflect.Type {
	return reflect.TypeOf((**Ami)(nil)).Elem()
}

func (i *Ami) ToAmiOutput() AmiOutput {
	return i.ToAmiOutputWithContext(context.Background())
}

func (i *Ami) ToAmiOutputWithContext(ctx context.Context) AmiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmiOutput)
}

// AmiArrayInput is an input type that accepts AmiArray and AmiArrayOutput values.
// You can construct a concrete instance of `AmiArrayInput` via:
//
//	AmiArray{ AmiArgs{...} }
type AmiArrayInput interface {
	pulumi.Input

	ToAmiArrayOutput() AmiArrayOutput
	ToAmiArrayOutputWithContext(context.Context) AmiArrayOutput
}

type AmiArray []AmiInput

func (AmiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ami)(nil)).Elem()
}

func (i AmiArray) ToAmiArrayOutput() AmiArrayOutput {
	return i.ToAmiArrayOutputWithContext(context.Background())
}

func (i AmiArray) ToAmiArrayOutputWithContext(ctx context.Context) AmiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmiArrayOutput)
}

// AmiMapInput is an input type that accepts AmiMap and AmiMapOutput values.
// You can construct a concrete instance of `AmiMapInput` via:
//
//	AmiMap{ "key": AmiArgs{...} }
type AmiMapInput interface {
	pulumi.Input

	ToAmiMapOutput() AmiMapOutput
	ToAmiMapOutputWithContext(context.Context) AmiMapOutput
}

type AmiMap map[string]AmiInput

func (AmiMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ami)(nil)).Elem()
}

func (i AmiMap) ToAmiMapOutput() AmiMapOutput {
	return i.ToAmiMapOutputWithContext(context.Background())
}

func (i AmiMap) ToAmiMapOutputWithContext(ctx context.Context) AmiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmiMapOutput)
}

type AmiOutput struct{ *pulumi.OutputState }

func (AmiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ami)(nil)).Elem()
}

func (o AmiOutput) ToAmiOutput() AmiOutput {
	return o
}

func (o AmiOutput) ToAmiOutputWithContext(ctx context.Context) AmiOutput {
	return o
}

// The id of the application the service belongs to
func (o AmiOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ami) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// Description of th service
func (o AmiOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ami) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the service
func (o AmiOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ami) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Variables to be used in the service
func (o AmiOutput) Variables() AmiVariableArrayOutput {
	return o.ApplyT(func(v *Ami) AmiVariableArrayOutput { return v.Variables }).(AmiVariableArrayOutput)
}

type AmiArrayOutput struct{ *pulumi.OutputState }

func (AmiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ami)(nil)).Elem()
}

func (o AmiArrayOutput) ToAmiArrayOutput() AmiArrayOutput {
	return o
}

func (o AmiArrayOutput) ToAmiArrayOutputWithContext(ctx context.Context) AmiArrayOutput {
	return o
}

func (o AmiArrayOutput) Index(i pulumi.IntInput) AmiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ami {
		return vs[0].([]*Ami)[vs[1].(int)]
	}).(AmiOutput)
}

type AmiMapOutput struct{ *pulumi.OutputState }

func (AmiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ami)(nil)).Elem()
}

func (o AmiMapOutput) ToAmiMapOutput() AmiMapOutput {
	return o
}

func (o AmiMapOutput) ToAmiMapOutputWithContext(ctx context.Context) AmiMapOutput {
	return o
}

func (o AmiMapOutput) MapIndex(k pulumi.StringInput) AmiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ami {
		return vs[0].(map[string]*Ami)[vs[1].(string)]
	}).(AmiOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AmiInput)(nil)).Elem(), &Ami{})
	pulumi.RegisterInputType(reflect.TypeOf((*AmiArrayInput)(nil)).Elem(), AmiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AmiMapInput)(nil)).Elem(), AmiMap{})
	pulumi.RegisterOutputType(AmiOutput{})
	pulumi.RegisterOutputType(AmiArrayOutput{})
	pulumi.RegisterOutputType(AmiMapOutput{})
}
