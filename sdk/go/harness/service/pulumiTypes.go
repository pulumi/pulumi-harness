// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package service

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AmiVariable struct {
	// Name of the variable
	Name string `pulumi:"name"`
	// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
	Type string `pulumi:"type"`
	// Value of the variable
	Value string `pulumi:"value"`
}

// AmiVariableInput is an input type that accepts AmiVariableArgs and AmiVariableOutput values.
// You can construct a concrete instance of `AmiVariableInput` via:
//
//	AmiVariableArgs{...}
type AmiVariableInput interface {
	pulumi.Input

	ToAmiVariableOutput() AmiVariableOutput
	ToAmiVariableOutputWithContext(context.Context) AmiVariableOutput
}

type AmiVariableArgs struct {
	// Name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
	Type pulumi.StringInput `pulumi:"type"`
	// Value of the variable
	Value pulumi.StringInput `pulumi:"value"`
}

func (AmiVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmiVariable)(nil)).Elem()
}

func (i AmiVariableArgs) ToAmiVariableOutput() AmiVariableOutput {
	return i.ToAmiVariableOutputWithContext(context.Background())
}

func (i AmiVariableArgs) ToAmiVariableOutputWithContext(ctx context.Context) AmiVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmiVariableOutput)
}

// AmiVariableArrayInput is an input type that accepts AmiVariableArray and AmiVariableArrayOutput values.
// You can construct a concrete instance of `AmiVariableArrayInput` via:
//
//	AmiVariableArray{ AmiVariableArgs{...} }
type AmiVariableArrayInput interface {
	pulumi.Input

	ToAmiVariableArrayOutput() AmiVariableArrayOutput
	ToAmiVariableArrayOutputWithContext(context.Context) AmiVariableArrayOutput
}

type AmiVariableArray []AmiVariableInput

func (AmiVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AmiVariable)(nil)).Elem()
}

func (i AmiVariableArray) ToAmiVariableArrayOutput() AmiVariableArrayOutput {
	return i.ToAmiVariableArrayOutputWithContext(context.Background())
}

func (i AmiVariableArray) ToAmiVariableArrayOutputWithContext(ctx context.Context) AmiVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmiVariableArrayOutput)
}

type AmiVariableOutput struct{ *pulumi.OutputState }

func (AmiVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmiVariable)(nil)).Elem()
}

func (o AmiVariableOutput) ToAmiVariableOutput() AmiVariableOutput {
	return o
}

func (o AmiVariableOutput) ToAmiVariableOutputWithContext(ctx context.Context) AmiVariableOutput {
	return o
}

// Name of the variable
func (o AmiVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AmiVariable) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
func (o AmiVariableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmiVariable) string { return v.Type }).(pulumi.StringOutput)
}

// Value of the variable
func (o AmiVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AmiVariable) string { return v.Value }).(pulumi.StringOutput)
}

type AmiVariableArrayOutput struct{ *pulumi.OutputState }

func (AmiVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AmiVariable)(nil)).Elem()
}

func (o AmiVariableArrayOutput) ToAmiVariableArrayOutput() AmiVariableArrayOutput {
	return o
}

func (o AmiVariableArrayOutput) ToAmiVariableArrayOutputWithContext(ctx context.Context) AmiVariableArrayOutput {
	return o
}

func (o AmiVariableArrayOutput) Index(i pulumi.IntInput) AmiVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AmiVariable {
		return vs[0].([]AmiVariable)[vs[1].(int)]
	}).(AmiVariableOutput)
}

type CodedeployVariable struct {
	// Name of the variable
	Name string `pulumi:"name"`
	// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
	Type string `pulumi:"type"`
	// Value of the variable
	Value string `pulumi:"value"`
}

// CodedeployVariableInput is an input type that accepts CodedeployVariableArgs and CodedeployVariableOutput values.
// You can construct a concrete instance of `CodedeployVariableInput` via:
//
//	CodedeployVariableArgs{...}
type CodedeployVariableInput interface {
	pulumi.Input

	ToCodedeployVariableOutput() CodedeployVariableOutput
	ToCodedeployVariableOutputWithContext(context.Context) CodedeployVariableOutput
}

type CodedeployVariableArgs struct {
	// Name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
	Type pulumi.StringInput `pulumi:"type"`
	// Value of the variable
	Value pulumi.StringInput `pulumi:"value"`
}

func (CodedeployVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodedeployVariable)(nil)).Elem()
}

func (i CodedeployVariableArgs) ToCodedeployVariableOutput() CodedeployVariableOutput {
	return i.ToCodedeployVariableOutputWithContext(context.Background())
}

func (i CodedeployVariableArgs) ToCodedeployVariableOutputWithContext(ctx context.Context) CodedeployVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodedeployVariableOutput)
}

// CodedeployVariableArrayInput is an input type that accepts CodedeployVariableArray and CodedeployVariableArrayOutput values.
// You can construct a concrete instance of `CodedeployVariableArrayInput` via:
//
//	CodedeployVariableArray{ CodedeployVariableArgs{...} }
type CodedeployVariableArrayInput interface {
	pulumi.Input

	ToCodedeployVariableArrayOutput() CodedeployVariableArrayOutput
	ToCodedeployVariableArrayOutputWithContext(context.Context) CodedeployVariableArrayOutput
}

type CodedeployVariableArray []CodedeployVariableInput

func (CodedeployVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CodedeployVariable)(nil)).Elem()
}

func (i CodedeployVariableArray) ToCodedeployVariableArrayOutput() CodedeployVariableArrayOutput {
	return i.ToCodedeployVariableArrayOutputWithContext(context.Background())
}

func (i CodedeployVariableArray) ToCodedeployVariableArrayOutputWithContext(ctx context.Context) CodedeployVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodedeployVariableArrayOutput)
}

type CodedeployVariableOutput struct{ *pulumi.OutputState }

func (CodedeployVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodedeployVariable)(nil)).Elem()
}

func (o CodedeployVariableOutput) ToCodedeployVariableOutput() CodedeployVariableOutput {
	return o
}

func (o CodedeployVariableOutput) ToCodedeployVariableOutputWithContext(ctx context.Context) CodedeployVariableOutput {
	return o
}

// Name of the variable
func (o CodedeployVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CodedeployVariable) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
func (o CodedeployVariableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CodedeployVariable) string { return v.Type }).(pulumi.StringOutput)
}

// Value of the variable
func (o CodedeployVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CodedeployVariable) string { return v.Value }).(pulumi.StringOutput)
}

type CodedeployVariableArrayOutput struct{ *pulumi.OutputState }

func (CodedeployVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CodedeployVariable)(nil)).Elem()
}

func (o CodedeployVariableArrayOutput) ToCodedeployVariableArrayOutput() CodedeployVariableArrayOutput {
	return o
}

func (o CodedeployVariableArrayOutput) ToCodedeployVariableArrayOutputWithContext(ctx context.Context) CodedeployVariableArrayOutput {
	return o
}

func (o CodedeployVariableArrayOutput) Index(i pulumi.IntInput) CodedeployVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CodedeployVariable {
		return vs[0].([]CodedeployVariable)[vs[1].(int)]
	}).(CodedeployVariableOutput)
}

type EcsVariable struct {
	// Name of the variable
	Name string `pulumi:"name"`
	// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
	Type string `pulumi:"type"`
	// Value of the variable
	Value string `pulumi:"value"`
}

// EcsVariableInput is an input type that accepts EcsVariableArgs and EcsVariableOutput values.
// You can construct a concrete instance of `EcsVariableInput` via:
//
//	EcsVariableArgs{...}
type EcsVariableInput interface {
	pulumi.Input

	ToEcsVariableOutput() EcsVariableOutput
	ToEcsVariableOutputWithContext(context.Context) EcsVariableOutput
}

type EcsVariableArgs struct {
	// Name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
	Type pulumi.StringInput `pulumi:"type"`
	// Value of the variable
	Value pulumi.StringInput `pulumi:"value"`
}

func (EcsVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EcsVariable)(nil)).Elem()
}

func (i EcsVariableArgs) ToEcsVariableOutput() EcsVariableOutput {
	return i.ToEcsVariableOutputWithContext(context.Background())
}

func (i EcsVariableArgs) ToEcsVariableOutputWithContext(ctx context.Context) EcsVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsVariableOutput)
}

// EcsVariableArrayInput is an input type that accepts EcsVariableArray and EcsVariableArrayOutput values.
// You can construct a concrete instance of `EcsVariableArrayInput` via:
//
//	EcsVariableArray{ EcsVariableArgs{...} }
type EcsVariableArrayInput interface {
	pulumi.Input

	ToEcsVariableArrayOutput() EcsVariableArrayOutput
	ToEcsVariableArrayOutputWithContext(context.Context) EcsVariableArrayOutput
}

type EcsVariableArray []EcsVariableInput

func (EcsVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EcsVariable)(nil)).Elem()
}

func (i EcsVariableArray) ToEcsVariableArrayOutput() EcsVariableArrayOutput {
	return i.ToEcsVariableArrayOutputWithContext(context.Background())
}

func (i EcsVariableArray) ToEcsVariableArrayOutputWithContext(ctx context.Context) EcsVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsVariableArrayOutput)
}

type EcsVariableOutput struct{ *pulumi.OutputState }

func (EcsVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EcsVariable)(nil)).Elem()
}

func (o EcsVariableOutput) ToEcsVariableOutput() EcsVariableOutput {
	return o
}

func (o EcsVariableOutput) ToEcsVariableOutputWithContext(ctx context.Context) EcsVariableOutput {
	return o
}

// Name of the variable
func (o EcsVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EcsVariable) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
func (o EcsVariableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EcsVariable) string { return v.Type }).(pulumi.StringOutput)
}

// Value of the variable
func (o EcsVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EcsVariable) string { return v.Value }).(pulumi.StringOutput)
}

type EcsVariableArrayOutput struct{ *pulumi.OutputState }

func (EcsVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EcsVariable)(nil)).Elem()
}

func (o EcsVariableArrayOutput) ToEcsVariableArrayOutput() EcsVariableArrayOutput {
	return o
}

func (o EcsVariableArrayOutput) ToEcsVariableArrayOutputWithContext(ctx context.Context) EcsVariableArrayOutput {
	return o
}

func (o EcsVariableArrayOutput) Index(i pulumi.IntInput) EcsVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EcsVariable {
		return vs[0].([]EcsVariable)[vs[1].(int)]
	}).(EcsVariableOutput)
}

type HelmVariable struct {
	// Name of the variable
	Name string `pulumi:"name"`
	// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
	Type string `pulumi:"type"`
	// Value of the variable
	Value string `pulumi:"value"`
}

// HelmVariableInput is an input type that accepts HelmVariableArgs and HelmVariableOutput values.
// You can construct a concrete instance of `HelmVariableInput` via:
//
//	HelmVariableArgs{...}
type HelmVariableInput interface {
	pulumi.Input

	ToHelmVariableOutput() HelmVariableOutput
	ToHelmVariableOutputWithContext(context.Context) HelmVariableOutput
}

type HelmVariableArgs struct {
	// Name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
	Type pulumi.StringInput `pulumi:"type"`
	// Value of the variable
	Value pulumi.StringInput `pulumi:"value"`
}

func (HelmVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmVariable)(nil)).Elem()
}

func (i HelmVariableArgs) ToHelmVariableOutput() HelmVariableOutput {
	return i.ToHelmVariableOutputWithContext(context.Background())
}

func (i HelmVariableArgs) ToHelmVariableOutputWithContext(ctx context.Context) HelmVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmVariableOutput)
}

// HelmVariableArrayInput is an input type that accepts HelmVariableArray and HelmVariableArrayOutput values.
// You can construct a concrete instance of `HelmVariableArrayInput` via:
//
//	HelmVariableArray{ HelmVariableArgs{...} }
type HelmVariableArrayInput interface {
	pulumi.Input

	ToHelmVariableArrayOutput() HelmVariableArrayOutput
	ToHelmVariableArrayOutputWithContext(context.Context) HelmVariableArrayOutput
}

type HelmVariableArray []HelmVariableInput

func (HelmVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmVariable)(nil)).Elem()
}

func (i HelmVariableArray) ToHelmVariableArrayOutput() HelmVariableArrayOutput {
	return i.ToHelmVariableArrayOutputWithContext(context.Background())
}

func (i HelmVariableArray) ToHelmVariableArrayOutputWithContext(ctx context.Context) HelmVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmVariableArrayOutput)
}

type HelmVariableOutput struct{ *pulumi.OutputState }

func (HelmVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmVariable)(nil)).Elem()
}

func (o HelmVariableOutput) ToHelmVariableOutput() HelmVariableOutput {
	return o
}

func (o HelmVariableOutput) ToHelmVariableOutputWithContext(ctx context.Context) HelmVariableOutput {
	return o
}

// Name of the variable
func (o HelmVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HelmVariable) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
func (o HelmVariableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HelmVariable) string { return v.Type }).(pulumi.StringOutput)
}

// Value of the variable
func (o HelmVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v HelmVariable) string { return v.Value }).(pulumi.StringOutput)
}

type HelmVariableArrayOutput struct{ *pulumi.OutputState }

func (HelmVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmVariable)(nil)).Elem()
}

func (o HelmVariableArrayOutput) ToHelmVariableArrayOutput() HelmVariableArrayOutput {
	return o
}

func (o HelmVariableArrayOutput) ToHelmVariableArrayOutputWithContext(ctx context.Context) HelmVariableArrayOutput {
	return o
}

func (o HelmVariableArrayOutput) Index(i pulumi.IntInput) HelmVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmVariable {
		return vs[0].([]HelmVariable)[vs[1].(int)]
	}).(HelmVariableOutput)
}

type KubernetesVariable struct {
	// Name of the variable
	Name string `pulumi:"name"`
	// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
	Type string `pulumi:"type"`
	// Value of the variable
	Value string `pulumi:"value"`
}

// KubernetesVariableInput is an input type that accepts KubernetesVariableArgs and KubernetesVariableOutput values.
// You can construct a concrete instance of `KubernetesVariableInput` via:
//
//	KubernetesVariableArgs{...}
type KubernetesVariableInput interface {
	pulumi.Input

	ToKubernetesVariableOutput() KubernetesVariableOutput
	ToKubernetesVariableOutputWithContext(context.Context) KubernetesVariableOutput
}

type KubernetesVariableArgs struct {
	// Name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
	Type pulumi.StringInput `pulumi:"type"`
	// Value of the variable
	Value pulumi.StringInput `pulumi:"value"`
}

func (KubernetesVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesVariable)(nil)).Elem()
}

func (i KubernetesVariableArgs) ToKubernetesVariableOutput() KubernetesVariableOutput {
	return i.ToKubernetesVariableOutputWithContext(context.Background())
}

func (i KubernetesVariableArgs) ToKubernetesVariableOutputWithContext(ctx context.Context) KubernetesVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesVariableOutput)
}

// KubernetesVariableArrayInput is an input type that accepts KubernetesVariableArray and KubernetesVariableArrayOutput values.
// You can construct a concrete instance of `KubernetesVariableArrayInput` via:
//
//	KubernetesVariableArray{ KubernetesVariableArgs{...} }
type KubernetesVariableArrayInput interface {
	pulumi.Input

	ToKubernetesVariableArrayOutput() KubernetesVariableArrayOutput
	ToKubernetesVariableArrayOutputWithContext(context.Context) KubernetesVariableArrayOutput
}

type KubernetesVariableArray []KubernetesVariableInput

func (KubernetesVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesVariable)(nil)).Elem()
}

func (i KubernetesVariableArray) ToKubernetesVariableArrayOutput() KubernetesVariableArrayOutput {
	return i.ToKubernetesVariableArrayOutputWithContext(context.Background())
}

func (i KubernetesVariableArray) ToKubernetesVariableArrayOutputWithContext(ctx context.Context) KubernetesVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesVariableArrayOutput)
}

type KubernetesVariableOutput struct{ *pulumi.OutputState }

func (KubernetesVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesVariable)(nil)).Elem()
}

func (o KubernetesVariableOutput) ToKubernetesVariableOutput() KubernetesVariableOutput {
	return o
}

func (o KubernetesVariableOutput) ToKubernetesVariableOutputWithContext(ctx context.Context) KubernetesVariableOutput {
	return o
}

// Name of the variable
func (o KubernetesVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesVariable) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
func (o KubernetesVariableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesVariable) string { return v.Type }).(pulumi.StringOutput)
}

// Value of the variable
func (o KubernetesVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesVariable) string { return v.Value }).(pulumi.StringOutput)
}

type KubernetesVariableArrayOutput struct{ *pulumi.OutputState }

func (KubernetesVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesVariable)(nil)).Elem()
}

func (o KubernetesVariableArrayOutput) ToKubernetesVariableArrayOutput() KubernetesVariableArrayOutput {
	return o
}

func (o KubernetesVariableArrayOutput) ToKubernetesVariableArrayOutputWithContext(ctx context.Context) KubernetesVariableArrayOutput {
	return o
}

func (o KubernetesVariableArrayOutput) Index(i pulumi.IntInput) KubernetesVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KubernetesVariable {
		return vs[0].([]KubernetesVariable)[vs[1].(int)]
	}).(KubernetesVariableOutput)
}

type LambdaVariable struct {
	// Name of the variable
	Name string `pulumi:"name"`
	// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
	Type string `pulumi:"type"`
	// Value of the variable
	Value string `pulumi:"value"`
}

// LambdaVariableInput is an input type that accepts LambdaVariableArgs and LambdaVariableOutput values.
// You can construct a concrete instance of `LambdaVariableInput` via:
//
//	LambdaVariableArgs{...}
type LambdaVariableInput interface {
	pulumi.Input

	ToLambdaVariableOutput() LambdaVariableOutput
	ToLambdaVariableOutputWithContext(context.Context) LambdaVariableOutput
}

type LambdaVariableArgs struct {
	// Name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
	Type pulumi.StringInput `pulumi:"type"`
	// Value of the variable
	Value pulumi.StringInput `pulumi:"value"`
}

func (LambdaVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LambdaVariable)(nil)).Elem()
}

func (i LambdaVariableArgs) ToLambdaVariableOutput() LambdaVariableOutput {
	return i.ToLambdaVariableOutputWithContext(context.Background())
}

func (i LambdaVariableArgs) ToLambdaVariableOutputWithContext(ctx context.Context) LambdaVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LambdaVariableOutput)
}

// LambdaVariableArrayInput is an input type that accepts LambdaVariableArray and LambdaVariableArrayOutput values.
// You can construct a concrete instance of `LambdaVariableArrayInput` via:
//
//	LambdaVariableArray{ LambdaVariableArgs{...} }
type LambdaVariableArrayInput interface {
	pulumi.Input

	ToLambdaVariableArrayOutput() LambdaVariableArrayOutput
	ToLambdaVariableArrayOutputWithContext(context.Context) LambdaVariableArrayOutput
}

type LambdaVariableArray []LambdaVariableInput

func (LambdaVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LambdaVariable)(nil)).Elem()
}

func (i LambdaVariableArray) ToLambdaVariableArrayOutput() LambdaVariableArrayOutput {
	return i.ToLambdaVariableArrayOutputWithContext(context.Background())
}

func (i LambdaVariableArray) ToLambdaVariableArrayOutputWithContext(ctx context.Context) LambdaVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LambdaVariableArrayOutput)
}

type LambdaVariableOutput struct{ *pulumi.OutputState }

func (LambdaVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LambdaVariable)(nil)).Elem()
}

func (o LambdaVariableOutput) ToLambdaVariableOutput() LambdaVariableOutput {
	return o
}

func (o LambdaVariableOutput) ToLambdaVariableOutputWithContext(ctx context.Context) LambdaVariableOutput {
	return o
}

// Name of the variable
func (o LambdaVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LambdaVariable) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
func (o LambdaVariableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LambdaVariable) string { return v.Type }).(pulumi.StringOutput)
}

// Value of the variable
func (o LambdaVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LambdaVariable) string { return v.Value }).(pulumi.StringOutput)
}

type LambdaVariableArrayOutput struct{ *pulumi.OutputState }

func (LambdaVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LambdaVariable)(nil)).Elem()
}

func (o LambdaVariableArrayOutput) ToLambdaVariableArrayOutput() LambdaVariableArrayOutput {
	return o
}

func (o LambdaVariableArrayOutput) ToLambdaVariableArrayOutputWithContext(ctx context.Context) LambdaVariableArrayOutput {
	return o
}

func (o LambdaVariableArrayOutput) Index(i pulumi.IntInput) LambdaVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LambdaVariable {
		return vs[0].([]LambdaVariable)[vs[1].(int)]
	}).(LambdaVariableOutput)
}

type SshVariable struct {
	// Name of the variable
	Name string `pulumi:"name"`
	// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
	Type string `pulumi:"type"`
	// Value of the variable
	Value string `pulumi:"value"`
}

// SshVariableInput is an input type that accepts SshVariableArgs and SshVariableOutput values.
// You can construct a concrete instance of `SshVariableInput` via:
//
//	SshVariableArgs{...}
type SshVariableInput interface {
	pulumi.Input

	ToSshVariableOutput() SshVariableOutput
	ToSshVariableOutputWithContext(context.Context) SshVariableOutput
}

type SshVariableArgs struct {
	// Name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
	Type pulumi.StringInput `pulumi:"type"`
	// Value of the variable
	Value pulumi.StringInput `pulumi:"value"`
}

func (SshVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshVariable)(nil)).Elem()
}

func (i SshVariableArgs) ToSshVariableOutput() SshVariableOutput {
	return i.ToSshVariableOutputWithContext(context.Background())
}

func (i SshVariableArgs) ToSshVariableOutputWithContext(ctx context.Context) SshVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshVariableOutput)
}

// SshVariableArrayInput is an input type that accepts SshVariableArray and SshVariableArrayOutput values.
// You can construct a concrete instance of `SshVariableArrayInput` via:
//
//	SshVariableArray{ SshVariableArgs{...} }
type SshVariableArrayInput interface {
	pulumi.Input

	ToSshVariableArrayOutput() SshVariableArrayOutput
	ToSshVariableArrayOutputWithContext(context.Context) SshVariableArrayOutput
}

type SshVariableArray []SshVariableInput

func (SshVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SshVariable)(nil)).Elem()
}

func (i SshVariableArray) ToSshVariableArrayOutput() SshVariableArrayOutput {
	return i.ToSshVariableArrayOutputWithContext(context.Background())
}

func (i SshVariableArray) ToSshVariableArrayOutputWithContext(ctx context.Context) SshVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshVariableArrayOutput)
}

type SshVariableOutput struct{ *pulumi.OutputState }

func (SshVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshVariable)(nil)).Elem()
}

func (o SshVariableOutput) ToSshVariableOutput() SshVariableOutput {
	return o
}

func (o SshVariableOutput) ToSshVariableOutputWithContext(ctx context.Context) SshVariableOutput {
	return o
}

// Name of the variable
func (o SshVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SshVariable) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
func (o SshVariableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SshVariable) string { return v.Type }).(pulumi.StringOutput)
}

// Value of the variable
func (o SshVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SshVariable) string { return v.Value }).(pulumi.StringOutput)
}

type SshVariableArrayOutput struct{ *pulumi.OutputState }

func (SshVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SshVariable)(nil)).Elem()
}

func (o SshVariableArrayOutput) ToSshVariableArrayOutput() SshVariableArrayOutput {
	return o
}

func (o SshVariableArrayOutput) ToSshVariableArrayOutputWithContext(ctx context.Context) SshVariableArrayOutput {
	return o
}

func (o SshVariableArrayOutput) Index(i pulumi.IntInput) SshVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SshVariable {
		return vs[0].([]SshVariable)[vs[1].(int)]
	}).(SshVariableOutput)
}

type TanzuVariable struct {
	// Name of the variable
	Name string `pulumi:"name"`
	// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
	Type string `pulumi:"type"`
	// Value of the variable
	Value string `pulumi:"value"`
}

// TanzuVariableInput is an input type that accepts TanzuVariableArgs and TanzuVariableOutput values.
// You can construct a concrete instance of `TanzuVariableInput` via:
//
//	TanzuVariableArgs{...}
type TanzuVariableInput interface {
	pulumi.Input

	ToTanzuVariableOutput() TanzuVariableOutput
	ToTanzuVariableOutputWithContext(context.Context) TanzuVariableOutput
}

type TanzuVariableArgs struct {
	// Name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
	Type pulumi.StringInput `pulumi:"type"`
	// Value of the variable
	Value pulumi.StringInput `pulumi:"value"`
}

func (TanzuVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TanzuVariable)(nil)).Elem()
}

func (i TanzuVariableArgs) ToTanzuVariableOutput() TanzuVariableOutput {
	return i.ToTanzuVariableOutputWithContext(context.Background())
}

func (i TanzuVariableArgs) ToTanzuVariableOutputWithContext(ctx context.Context) TanzuVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TanzuVariableOutput)
}

// TanzuVariableArrayInput is an input type that accepts TanzuVariableArray and TanzuVariableArrayOutput values.
// You can construct a concrete instance of `TanzuVariableArrayInput` via:
//
//	TanzuVariableArray{ TanzuVariableArgs{...} }
type TanzuVariableArrayInput interface {
	pulumi.Input

	ToTanzuVariableArrayOutput() TanzuVariableArrayOutput
	ToTanzuVariableArrayOutputWithContext(context.Context) TanzuVariableArrayOutput
}

type TanzuVariableArray []TanzuVariableInput

func (TanzuVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TanzuVariable)(nil)).Elem()
}

func (i TanzuVariableArray) ToTanzuVariableArrayOutput() TanzuVariableArrayOutput {
	return i.ToTanzuVariableArrayOutputWithContext(context.Background())
}

func (i TanzuVariableArray) ToTanzuVariableArrayOutputWithContext(ctx context.Context) TanzuVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TanzuVariableArrayOutput)
}

type TanzuVariableOutput struct{ *pulumi.OutputState }

func (TanzuVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TanzuVariable)(nil)).Elem()
}

func (o TanzuVariableOutput) ToTanzuVariableOutput() TanzuVariableOutput {
	return o
}

func (o TanzuVariableOutput) ToTanzuVariableOutputWithContext(ctx context.Context) TanzuVariableOutput {
	return o
}

// Name of the variable
func (o TanzuVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TanzuVariable) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
func (o TanzuVariableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TanzuVariable) string { return v.Type }).(pulumi.StringOutput)
}

// Value of the variable
func (o TanzuVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TanzuVariable) string { return v.Value }).(pulumi.StringOutput)
}

type TanzuVariableArrayOutput struct{ *pulumi.OutputState }

func (TanzuVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TanzuVariable)(nil)).Elem()
}

func (o TanzuVariableArrayOutput) ToTanzuVariableArrayOutput() TanzuVariableArrayOutput {
	return o
}

func (o TanzuVariableArrayOutput) ToTanzuVariableArrayOutputWithContext(ctx context.Context) TanzuVariableArrayOutput {
	return o
}

func (o TanzuVariableArrayOutput) Index(i pulumi.IntInput) TanzuVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TanzuVariable {
		return vs[0].([]TanzuVariable)[vs[1].(int)]
	}).(TanzuVariableOutput)
}

type WinrmVariable struct {
	// Name of the variable
	Name string `pulumi:"name"`
	// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
	Type string `pulumi:"type"`
	// Value of the variable
	Value string `pulumi:"value"`
}

// WinrmVariableInput is an input type that accepts WinrmVariableArgs and WinrmVariableOutput values.
// You can construct a concrete instance of `WinrmVariableInput` via:
//
//	WinrmVariableArgs{...}
type WinrmVariableInput interface {
	pulumi.Input

	ToWinrmVariableOutput() WinrmVariableOutput
	ToWinrmVariableOutputWithContext(context.Context) WinrmVariableOutput
}

type WinrmVariableArgs struct {
	// Name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
	Type pulumi.StringInput `pulumi:"type"`
	// Value of the variable
	Value pulumi.StringInput `pulumi:"value"`
}

func (WinrmVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WinrmVariable)(nil)).Elem()
}

func (i WinrmVariableArgs) ToWinrmVariableOutput() WinrmVariableOutput {
	return i.ToWinrmVariableOutputWithContext(context.Background())
}

func (i WinrmVariableArgs) ToWinrmVariableOutputWithContext(ctx context.Context) WinrmVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WinrmVariableOutput)
}

// WinrmVariableArrayInput is an input type that accepts WinrmVariableArray and WinrmVariableArrayOutput values.
// You can construct a concrete instance of `WinrmVariableArrayInput` via:
//
//	WinrmVariableArray{ WinrmVariableArgs{...} }
type WinrmVariableArrayInput interface {
	pulumi.Input

	ToWinrmVariableArrayOutput() WinrmVariableArrayOutput
	ToWinrmVariableArrayOutputWithContext(context.Context) WinrmVariableArrayOutput
}

type WinrmVariableArray []WinrmVariableInput

func (WinrmVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WinrmVariable)(nil)).Elem()
}

func (i WinrmVariableArray) ToWinrmVariableArrayOutput() WinrmVariableArrayOutput {
	return i.ToWinrmVariableArrayOutputWithContext(context.Background())
}

func (i WinrmVariableArray) ToWinrmVariableArrayOutputWithContext(ctx context.Context) WinrmVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WinrmVariableArrayOutput)
}

type WinrmVariableOutput struct{ *pulumi.OutputState }

func (WinrmVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WinrmVariable)(nil)).Elem()
}

func (o WinrmVariableOutput) ToWinrmVariableOutput() WinrmVariableOutput {
	return o
}

func (o WinrmVariableOutput) ToWinrmVariableOutputWithContext(ctx context.Context) WinrmVariableOutput {
	return o
}

// Name of the variable
func (o WinrmVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WinrmVariable) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'
func (o WinrmVariableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WinrmVariable) string { return v.Type }).(pulumi.StringOutput)
}

// Value of the variable
func (o WinrmVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v WinrmVariable) string { return v.Value }).(pulumi.StringOutput)
}

type WinrmVariableArrayOutput struct{ *pulumi.OutputState }

func (WinrmVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WinrmVariable)(nil)).Elem()
}

func (o WinrmVariableArrayOutput) ToWinrmVariableArrayOutput() WinrmVariableArrayOutput {
	return o
}

func (o WinrmVariableArrayOutput) ToWinrmVariableArrayOutputWithContext(ctx context.Context) WinrmVariableArrayOutput {
	return o
}

func (o WinrmVariableArrayOutput) Index(i pulumi.IntInput) WinrmVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WinrmVariable {
		return vs[0].([]WinrmVariable)[vs[1].(int)]
	}).(WinrmVariableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AmiVariableInput)(nil)).Elem(), AmiVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AmiVariableArrayInput)(nil)).Elem(), AmiVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CodedeployVariableInput)(nil)).Elem(), CodedeployVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CodedeployVariableArrayInput)(nil)).Elem(), CodedeployVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsVariableInput)(nil)).Elem(), EcsVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsVariableArrayInput)(nil)).Elem(), EcsVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmVariableInput)(nil)).Elem(), HelmVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmVariableArrayInput)(nil)).Elem(), HelmVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesVariableInput)(nil)).Elem(), KubernetesVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesVariableArrayInput)(nil)).Elem(), KubernetesVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LambdaVariableInput)(nil)).Elem(), LambdaVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LambdaVariableArrayInput)(nil)).Elem(), LambdaVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshVariableInput)(nil)).Elem(), SshVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshVariableArrayInput)(nil)).Elem(), SshVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TanzuVariableInput)(nil)).Elem(), TanzuVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TanzuVariableArrayInput)(nil)).Elem(), TanzuVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WinrmVariableInput)(nil)).Elem(), WinrmVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WinrmVariableArrayInput)(nil)).Elem(), WinrmVariableArray{})
	pulumi.RegisterOutputType(AmiVariableOutput{})
	pulumi.RegisterOutputType(AmiVariableArrayOutput{})
	pulumi.RegisterOutputType(CodedeployVariableOutput{})
	pulumi.RegisterOutputType(CodedeployVariableArrayOutput{})
	pulumi.RegisterOutputType(EcsVariableOutput{})
	pulumi.RegisterOutputType(EcsVariableArrayOutput{})
	pulumi.RegisterOutputType(HelmVariableOutput{})
	pulumi.RegisterOutputType(HelmVariableArrayOutput{})
	pulumi.RegisterOutputType(KubernetesVariableOutput{})
	pulumi.RegisterOutputType(KubernetesVariableArrayOutput{})
	pulumi.RegisterOutputType(LambdaVariableOutput{})
	pulumi.RegisterOutputType(LambdaVariableArrayOutput{})
	pulumi.RegisterOutputType(SshVariableOutput{})
	pulumi.RegisterOutputType(SshVariableArrayOutput{})
	pulumi.RegisterOutputType(TanzuVariableOutput{})
	pulumi.RegisterOutputType(TanzuVariableArrayOutput{})
	pulumi.RegisterOutputType(WinrmVariableOutput{})
	pulumi.RegisterOutputType(WinrmVariableArrayOutput{})
}
