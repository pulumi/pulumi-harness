// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harness

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for adding permissions to an existing Harness user group.
type UserGroupPermissions struct {
	pulumi.CustomResourceState

	// The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS
	AccountPermissions pulumi.StringArrayOutput `pulumi:"accountPermissions"`
	// Application specific permissions
	AppPermissions UserGroupPermissionsAppPermissionsPtrOutput `pulumi:"appPermissions"`
	// Unique identifier of the user group.
	UserGroupId pulumi.StringOutput `pulumi:"userGroupId"`
}

// NewUserGroupPermissions registers a new resource with the given unique name, arguments, and options.
func NewUserGroupPermissions(ctx *pulumi.Context,
	name string, args *UserGroupPermissionsArgs, opts ...pulumi.ResourceOption) (*UserGroupPermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserGroupId == nil {
		return nil, errors.New("invalid value for required argument 'UserGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserGroupPermissions
	err := ctx.RegisterResource("harness:index/userGroupPermissions:UserGroupPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserGroupPermissions gets an existing UserGroupPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserGroupPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserGroupPermissionsState, opts ...pulumi.ResourceOption) (*UserGroupPermissions, error) {
	var resource UserGroupPermissions
	err := ctx.ReadResource("harness:index/userGroupPermissions:UserGroupPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserGroupPermissions resources.
type userGroupPermissionsState struct {
	// The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS
	AccountPermissions []string `pulumi:"accountPermissions"`
	// Application specific permissions
	AppPermissions *UserGroupPermissionsAppPermissions `pulumi:"appPermissions"`
	// Unique identifier of the user group.
	UserGroupId *string `pulumi:"userGroupId"`
}

type UserGroupPermissionsState struct {
	// The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS
	AccountPermissions pulumi.StringArrayInput
	// Application specific permissions
	AppPermissions UserGroupPermissionsAppPermissionsPtrInput
	// Unique identifier of the user group.
	UserGroupId pulumi.StringPtrInput
}

func (UserGroupPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupPermissionsState)(nil)).Elem()
}

type userGroupPermissionsArgs struct {
	// The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS
	AccountPermissions []string `pulumi:"accountPermissions"`
	// Application specific permissions
	AppPermissions *UserGroupPermissionsAppPermissions `pulumi:"appPermissions"`
	// Unique identifier of the user group.
	UserGroupId string `pulumi:"userGroupId"`
}

// The set of arguments for constructing a UserGroupPermissions resource.
type UserGroupPermissionsArgs struct {
	// The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS
	AccountPermissions pulumi.StringArrayInput
	// Application specific permissions
	AppPermissions UserGroupPermissionsAppPermissionsPtrInput
	// Unique identifier of the user group.
	UserGroupId pulumi.StringInput
}

func (UserGroupPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupPermissionsArgs)(nil)).Elem()
}

type UserGroupPermissionsInput interface {
	pulumi.Input

	ToUserGroupPermissionsOutput() UserGroupPermissionsOutput
	ToUserGroupPermissionsOutputWithContext(ctx context.Context) UserGroupPermissionsOutput
}

func (*UserGroupPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupPermissions)(nil)).Elem()
}

func (i *UserGroupPermissions) ToUserGroupPermissionsOutput() UserGroupPermissionsOutput {
	return i.ToUserGroupPermissionsOutputWithContext(context.Background())
}

func (i *UserGroupPermissions) ToUserGroupPermissionsOutputWithContext(ctx context.Context) UserGroupPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsOutput)
}

// UserGroupPermissionsArrayInput is an input type that accepts UserGroupPermissionsArray and UserGroupPermissionsArrayOutput values.
// You can construct a concrete instance of `UserGroupPermissionsArrayInput` via:
//
//	UserGroupPermissionsArray{ UserGroupPermissionsArgs{...} }
type UserGroupPermissionsArrayInput interface {
	pulumi.Input

	ToUserGroupPermissionsArrayOutput() UserGroupPermissionsArrayOutput
	ToUserGroupPermissionsArrayOutputWithContext(context.Context) UserGroupPermissionsArrayOutput
}

type UserGroupPermissionsArray []UserGroupPermissionsInput

func (UserGroupPermissionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserGroupPermissions)(nil)).Elem()
}

func (i UserGroupPermissionsArray) ToUserGroupPermissionsArrayOutput() UserGroupPermissionsArrayOutput {
	return i.ToUserGroupPermissionsArrayOutputWithContext(context.Background())
}

func (i UserGroupPermissionsArray) ToUserGroupPermissionsArrayOutputWithContext(ctx context.Context) UserGroupPermissionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsArrayOutput)
}

// UserGroupPermissionsMapInput is an input type that accepts UserGroupPermissionsMap and UserGroupPermissionsMapOutput values.
// You can construct a concrete instance of `UserGroupPermissionsMapInput` via:
//
//	UserGroupPermissionsMap{ "key": UserGroupPermissionsArgs{...} }
type UserGroupPermissionsMapInput interface {
	pulumi.Input

	ToUserGroupPermissionsMapOutput() UserGroupPermissionsMapOutput
	ToUserGroupPermissionsMapOutputWithContext(context.Context) UserGroupPermissionsMapOutput
}

type UserGroupPermissionsMap map[string]UserGroupPermissionsInput

func (UserGroupPermissionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserGroupPermissions)(nil)).Elem()
}

func (i UserGroupPermissionsMap) ToUserGroupPermissionsMapOutput() UserGroupPermissionsMapOutput {
	return i.ToUserGroupPermissionsMapOutputWithContext(context.Background())
}

func (i UserGroupPermissionsMap) ToUserGroupPermissionsMapOutputWithContext(ctx context.Context) UserGroupPermissionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsMapOutput)
}

type UserGroupPermissionsOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupPermissions)(nil)).Elem()
}

func (o UserGroupPermissionsOutput) ToUserGroupPermissionsOutput() UserGroupPermissionsOutput {
	return o
}

func (o UserGroupPermissionsOutput) ToUserGroupPermissionsOutputWithContext(ctx context.Context) UserGroupPermissionsOutput {
	return o
}

// The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS
func (o UserGroupPermissionsOutput) AccountPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UserGroupPermissions) pulumi.StringArrayOutput { return v.AccountPermissions }).(pulumi.StringArrayOutput)
}

// Application specific permissions
func (o UserGroupPermissionsOutput) AppPermissions() UserGroupPermissionsAppPermissionsPtrOutput {
	return o.ApplyT(func(v *UserGroupPermissions) UserGroupPermissionsAppPermissionsPtrOutput { return v.AppPermissions }).(UserGroupPermissionsAppPermissionsPtrOutput)
}

// Unique identifier of the user group.
func (o UserGroupPermissionsOutput) UserGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroupPermissions) pulumi.StringOutput { return v.UserGroupId }).(pulumi.StringOutput)
}

type UserGroupPermissionsArrayOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserGroupPermissions)(nil)).Elem()
}

func (o UserGroupPermissionsArrayOutput) ToUserGroupPermissionsArrayOutput() UserGroupPermissionsArrayOutput {
	return o
}

func (o UserGroupPermissionsArrayOutput) ToUserGroupPermissionsArrayOutputWithContext(ctx context.Context) UserGroupPermissionsArrayOutput {
	return o
}

func (o UserGroupPermissionsArrayOutput) Index(i pulumi.IntInput) UserGroupPermissionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserGroupPermissions {
		return vs[0].([]*UserGroupPermissions)[vs[1].(int)]
	}).(UserGroupPermissionsOutput)
}

type UserGroupPermissionsMapOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserGroupPermissions)(nil)).Elem()
}

func (o UserGroupPermissionsMapOutput) ToUserGroupPermissionsMapOutput() UserGroupPermissionsMapOutput {
	return o
}

func (o UserGroupPermissionsMapOutput) ToUserGroupPermissionsMapOutputWithContext(ctx context.Context) UserGroupPermissionsMapOutput {
	return o
}

func (o UserGroupPermissionsMapOutput) MapIndex(k pulumi.StringInput) UserGroupPermissionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserGroupPermissions {
		return vs[0].(map[string]*UserGroupPermissions)[vs[1].(string)]
	}).(UserGroupPermissionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsInput)(nil)).Elem(), &UserGroupPermissions{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsArrayInput)(nil)).Elem(), UserGroupPermissionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsMapInput)(nil)).Elem(), UserGroupPermissionsMap{})
	pulumi.RegisterOutputType(UserGroupPermissionsOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsArrayOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsMapOutput{})
}
