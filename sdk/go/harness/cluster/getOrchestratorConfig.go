// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cluster

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for ClusterOrchestrator Config.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/cluster"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cluster.LookupOrchestratorConfig(ctx, &cluster.LookupOrchestratorConfigArgs{
//				OrchestratorId: "identifier",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupOrchestratorConfig(ctx *pulumi.Context, args *LookupOrchestratorConfigArgs, opts ...pulumi.InvokeOption) (*LookupOrchestratorConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupOrchestratorConfigResult
	err := ctx.Invoke("harness:cluster/getOrchestratorConfig:getOrchestratorConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOrchestratorConfig.
type LookupOrchestratorConfigArgs struct {
	// Binpacking preferences for Cluster Orchestrator
	Binpacking *GetOrchestratorConfigBinpacking `pulumi:"binpacking"`
	// Spot and Ondemand Distribution Preferences for workload replicas
	Distribution *GetOrchestratorConfigDistribution `pulumi:"distribution"`
	// Node preferences for Cluster Orchestrator
	NodePreferences *GetOrchestratorConfigNodePreferences `pulumi:"nodePreferences"`
	// ID of the Cluster Orchestrator Object
	OrchestratorId string `pulumi:"orchestratorId"`
}

// A collection of values returned by getOrchestratorConfig.
type LookupOrchestratorConfigResult struct {
	// Binpacking preferences for Cluster Orchestrator
	Binpacking *GetOrchestratorConfigBinpacking `pulumi:"binpacking"`
	// Spot and Ondemand Distribution Preferences for workload replicas
	Distribution *GetOrchestratorConfigDistribution `pulumi:"distribution"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Node preferences for Cluster Orchestrator
	NodePreferences *GetOrchestratorConfigNodePreferences `pulumi:"nodePreferences"`
	// ID of the Cluster Orchestrator Object
	OrchestratorId string `pulumi:"orchestratorId"`
}

func LookupOrchestratorConfigOutput(ctx *pulumi.Context, args LookupOrchestratorConfigOutputArgs, opts ...pulumi.InvokeOption) LookupOrchestratorConfigResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupOrchestratorConfigResultOutput, error) {
			args := v.(LookupOrchestratorConfigArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:cluster/getOrchestratorConfig:getOrchestratorConfig", args, LookupOrchestratorConfigResultOutput{}, options).(LookupOrchestratorConfigResultOutput), nil
		}).(LookupOrchestratorConfigResultOutput)
}

// A collection of arguments for invoking getOrchestratorConfig.
type LookupOrchestratorConfigOutputArgs struct {
	// Binpacking preferences for Cluster Orchestrator
	Binpacking GetOrchestratorConfigBinpackingPtrInput `pulumi:"binpacking"`
	// Spot and Ondemand Distribution Preferences for workload replicas
	Distribution GetOrchestratorConfigDistributionPtrInput `pulumi:"distribution"`
	// Node preferences for Cluster Orchestrator
	NodePreferences GetOrchestratorConfigNodePreferencesPtrInput `pulumi:"nodePreferences"`
	// ID of the Cluster Orchestrator Object
	OrchestratorId pulumi.StringInput `pulumi:"orchestratorId"`
}

func (LookupOrchestratorConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOrchestratorConfigArgs)(nil)).Elem()
}

// A collection of values returned by getOrchestratorConfig.
type LookupOrchestratorConfigResultOutput struct{ *pulumi.OutputState }

func (LookupOrchestratorConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOrchestratorConfigResult)(nil)).Elem()
}

func (o LookupOrchestratorConfigResultOutput) ToLookupOrchestratorConfigResultOutput() LookupOrchestratorConfigResultOutput {
	return o
}

func (o LookupOrchestratorConfigResultOutput) ToLookupOrchestratorConfigResultOutputWithContext(ctx context.Context) LookupOrchestratorConfigResultOutput {
	return o
}

// Binpacking preferences for Cluster Orchestrator
func (o LookupOrchestratorConfigResultOutput) Binpacking() GetOrchestratorConfigBinpackingPtrOutput {
	return o.ApplyT(func(v LookupOrchestratorConfigResult) *GetOrchestratorConfigBinpacking { return v.Binpacking }).(GetOrchestratorConfigBinpackingPtrOutput)
}

// Spot and Ondemand Distribution Preferences for workload replicas
func (o LookupOrchestratorConfigResultOutput) Distribution() GetOrchestratorConfigDistributionPtrOutput {
	return o.ApplyT(func(v LookupOrchestratorConfigResult) *GetOrchestratorConfigDistribution { return v.Distribution }).(GetOrchestratorConfigDistributionPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupOrchestratorConfigResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOrchestratorConfigResult) string { return v.Id }).(pulumi.StringOutput)
}

// Node preferences for Cluster Orchestrator
func (o LookupOrchestratorConfigResultOutput) NodePreferences() GetOrchestratorConfigNodePreferencesPtrOutput {
	return o.ApplyT(func(v LookupOrchestratorConfigResult) *GetOrchestratorConfigNodePreferences { return v.NodePreferences }).(GetOrchestratorConfigNodePreferencesPtrOutput)
}

// ID of the Cluster Orchestrator Object
func (o LookupOrchestratorConfigResultOutput) OrchestratorId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOrchestratorConfigResult) string { return v.OrchestratorId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupOrchestratorConfigResultOutput{})
}
