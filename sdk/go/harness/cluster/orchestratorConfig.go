// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cluster

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OrchestratorConfig struct {
	pulumi.CustomResourceState

	// Binpacking preferences for Cluster Orchestrator
	Binpacking OrchestratorConfigBinpackingPtrOutput `pulumi:"binpacking"`
	// Spot and Ondemand Distribution Preferences for workload replicas
	Distribution OrchestratorConfigDistributionOutput `pulumi:"distribution"`
	// Node preferences for Cluster Orchestrator
	NodePreferences OrchestratorConfigNodePreferencesPtrOutput `pulumi:"nodePreferences"`
	// ID of the Cluster Orchestrator Object
	OrchestratorId pulumi.StringOutput `pulumi:"orchestratorId"`
}

// NewOrchestratorConfig registers a new resource with the given unique name, arguments, and options.
func NewOrchestratorConfig(ctx *pulumi.Context,
	name string, args *OrchestratorConfigArgs, opts ...pulumi.ResourceOption) (*OrchestratorConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Distribution == nil {
		return nil, errors.New("invalid value for required argument 'Distribution'")
	}
	if args.OrchestratorId == nil {
		return nil, errors.New("invalid value for required argument 'OrchestratorId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrchestratorConfig
	err := ctx.RegisterResource("harness:cluster/orchestratorConfig:OrchestratorConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrchestratorConfig gets an existing OrchestratorConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrchestratorConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrchestratorConfigState, opts ...pulumi.ResourceOption) (*OrchestratorConfig, error) {
	var resource OrchestratorConfig
	err := ctx.ReadResource("harness:cluster/orchestratorConfig:OrchestratorConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrchestratorConfig resources.
type orchestratorConfigState struct {
	// Binpacking preferences for Cluster Orchestrator
	Binpacking *OrchestratorConfigBinpacking `pulumi:"binpacking"`
	// Spot and Ondemand Distribution Preferences for workload replicas
	Distribution *OrchestratorConfigDistribution `pulumi:"distribution"`
	// Node preferences for Cluster Orchestrator
	NodePreferences *OrchestratorConfigNodePreferences `pulumi:"nodePreferences"`
	// ID of the Cluster Orchestrator Object
	OrchestratorId *string `pulumi:"orchestratorId"`
}

type OrchestratorConfigState struct {
	// Binpacking preferences for Cluster Orchestrator
	Binpacking OrchestratorConfigBinpackingPtrInput
	// Spot and Ondemand Distribution Preferences for workload replicas
	Distribution OrchestratorConfigDistributionPtrInput
	// Node preferences for Cluster Orchestrator
	NodePreferences OrchestratorConfigNodePreferencesPtrInput
	// ID of the Cluster Orchestrator Object
	OrchestratorId pulumi.StringPtrInput
}

func (OrchestratorConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*orchestratorConfigState)(nil)).Elem()
}

type orchestratorConfigArgs struct {
	// Binpacking preferences for Cluster Orchestrator
	Binpacking *OrchestratorConfigBinpacking `pulumi:"binpacking"`
	// Spot and Ondemand Distribution Preferences for workload replicas
	Distribution OrchestratorConfigDistribution `pulumi:"distribution"`
	// Node preferences for Cluster Orchestrator
	NodePreferences *OrchestratorConfigNodePreferences `pulumi:"nodePreferences"`
	// ID of the Cluster Orchestrator Object
	OrchestratorId string `pulumi:"orchestratorId"`
}

// The set of arguments for constructing a OrchestratorConfig resource.
type OrchestratorConfigArgs struct {
	// Binpacking preferences for Cluster Orchestrator
	Binpacking OrchestratorConfigBinpackingPtrInput
	// Spot and Ondemand Distribution Preferences for workload replicas
	Distribution OrchestratorConfigDistributionInput
	// Node preferences for Cluster Orchestrator
	NodePreferences OrchestratorConfigNodePreferencesPtrInput
	// ID of the Cluster Orchestrator Object
	OrchestratorId pulumi.StringInput
}

func (OrchestratorConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orchestratorConfigArgs)(nil)).Elem()
}

type OrchestratorConfigInput interface {
	pulumi.Input

	ToOrchestratorConfigOutput() OrchestratorConfigOutput
	ToOrchestratorConfigOutputWithContext(ctx context.Context) OrchestratorConfigOutput
}

func (*OrchestratorConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfig)(nil)).Elem()
}

func (i *OrchestratorConfig) ToOrchestratorConfigOutput() OrchestratorConfigOutput {
	return i.ToOrchestratorConfigOutputWithContext(context.Background())
}

func (i *OrchestratorConfig) ToOrchestratorConfigOutputWithContext(ctx context.Context) OrchestratorConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigOutput)
}

// OrchestratorConfigArrayInput is an input type that accepts OrchestratorConfigArray and OrchestratorConfigArrayOutput values.
// You can construct a concrete instance of `OrchestratorConfigArrayInput` via:
//
//	OrchestratorConfigArray{ OrchestratorConfigArgs{...} }
type OrchestratorConfigArrayInput interface {
	pulumi.Input

	ToOrchestratorConfigArrayOutput() OrchestratorConfigArrayOutput
	ToOrchestratorConfigArrayOutputWithContext(context.Context) OrchestratorConfigArrayOutput
}

type OrchestratorConfigArray []OrchestratorConfigInput

func (OrchestratorConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrchestratorConfig)(nil)).Elem()
}

func (i OrchestratorConfigArray) ToOrchestratorConfigArrayOutput() OrchestratorConfigArrayOutput {
	return i.ToOrchestratorConfigArrayOutputWithContext(context.Background())
}

func (i OrchestratorConfigArray) ToOrchestratorConfigArrayOutputWithContext(ctx context.Context) OrchestratorConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigArrayOutput)
}

// OrchestratorConfigMapInput is an input type that accepts OrchestratorConfigMap and OrchestratorConfigMapOutput values.
// You can construct a concrete instance of `OrchestratorConfigMapInput` via:
//
//	OrchestratorConfigMap{ "key": OrchestratorConfigArgs{...} }
type OrchestratorConfigMapInput interface {
	pulumi.Input

	ToOrchestratorConfigMapOutput() OrchestratorConfigMapOutput
	ToOrchestratorConfigMapOutputWithContext(context.Context) OrchestratorConfigMapOutput
}

type OrchestratorConfigMap map[string]OrchestratorConfigInput

func (OrchestratorConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrchestratorConfig)(nil)).Elem()
}

func (i OrchestratorConfigMap) ToOrchestratorConfigMapOutput() OrchestratorConfigMapOutput {
	return i.ToOrchestratorConfigMapOutputWithContext(context.Background())
}

func (i OrchestratorConfigMap) ToOrchestratorConfigMapOutputWithContext(ctx context.Context) OrchestratorConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigMapOutput)
}

type OrchestratorConfigOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfig)(nil)).Elem()
}

func (o OrchestratorConfigOutput) ToOrchestratorConfigOutput() OrchestratorConfigOutput {
	return o
}

func (o OrchestratorConfigOutput) ToOrchestratorConfigOutputWithContext(ctx context.Context) OrchestratorConfigOutput {
	return o
}

// Binpacking preferences for Cluster Orchestrator
func (o OrchestratorConfigOutput) Binpacking() OrchestratorConfigBinpackingPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfig) OrchestratorConfigBinpackingPtrOutput { return v.Binpacking }).(OrchestratorConfigBinpackingPtrOutput)
}

// Spot and Ondemand Distribution Preferences for workload replicas
func (o OrchestratorConfigOutput) Distribution() OrchestratorConfigDistributionOutput {
	return o.ApplyT(func(v *OrchestratorConfig) OrchestratorConfigDistributionOutput { return v.Distribution }).(OrchestratorConfigDistributionOutput)
}

// Node preferences for Cluster Orchestrator
func (o OrchestratorConfigOutput) NodePreferences() OrchestratorConfigNodePreferencesPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfig) OrchestratorConfigNodePreferencesPtrOutput { return v.NodePreferences }).(OrchestratorConfigNodePreferencesPtrOutput)
}

// ID of the Cluster Orchestrator Object
func (o OrchestratorConfigOutput) OrchestratorId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrchestratorConfig) pulumi.StringOutput { return v.OrchestratorId }).(pulumi.StringOutput)
}

type OrchestratorConfigArrayOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrchestratorConfig)(nil)).Elem()
}

func (o OrchestratorConfigArrayOutput) ToOrchestratorConfigArrayOutput() OrchestratorConfigArrayOutput {
	return o
}

func (o OrchestratorConfigArrayOutput) ToOrchestratorConfigArrayOutputWithContext(ctx context.Context) OrchestratorConfigArrayOutput {
	return o
}

func (o OrchestratorConfigArrayOutput) Index(i pulumi.IntInput) OrchestratorConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrchestratorConfig {
		return vs[0].([]*OrchestratorConfig)[vs[1].(int)]
	}).(OrchestratorConfigOutput)
}

type OrchestratorConfigMapOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrchestratorConfig)(nil)).Elem()
}

func (o OrchestratorConfigMapOutput) ToOrchestratorConfigMapOutput() OrchestratorConfigMapOutput {
	return o
}

func (o OrchestratorConfigMapOutput) ToOrchestratorConfigMapOutputWithContext(ctx context.Context) OrchestratorConfigMapOutput {
	return o
}

func (o OrchestratorConfigMapOutput) MapIndex(k pulumi.StringInput) OrchestratorConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrchestratorConfig {
		return vs[0].(map[string]*OrchestratorConfig)[vs[1].(string)]
	}).(OrchestratorConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigInput)(nil)).Elem(), &OrchestratorConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigArrayInput)(nil)).Elem(), OrchestratorConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigMapInput)(nil)).Elem(), OrchestratorConfigMap{})
	pulumi.RegisterOutputType(OrchestratorConfigOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigArrayOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigMapOutput{})
}
