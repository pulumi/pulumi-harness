// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cluster

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type OrchestratorConfigBinpacking struct {
	// Harness disruption configuration
	Disruption *OrchestratorConfigBinpackingDisruption `pulumi:"disruption"`
	// Harness Pod Evictor Configuration
	PodEviction *OrchestratorConfigBinpackingPodEviction `pulumi:"podEviction"`
}

// OrchestratorConfigBinpackingInput is an input type that accepts OrchestratorConfigBinpackingArgs and OrchestratorConfigBinpackingOutput values.
// You can construct a concrete instance of `OrchestratorConfigBinpackingInput` via:
//
//	OrchestratorConfigBinpackingArgs{...}
type OrchestratorConfigBinpackingInput interface {
	pulumi.Input

	ToOrchestratorConfigBinpackingOutput() OrchestratorConfigBinpackingOutput
	ToOrchestratorConfigBinpackingOutputWithContext(context.Context) OrchestratorConfigBinpackingOutput
}

type OrchestratorConfigBinpackingArgs struct {
	// Harness disruption configuration
	Disruption OrchestratorConfigBinpackingDisruptionPtrInput `pulumi:"disruption"`
	// Harness Pod Evictor Configuration
	PodEviction OrchestratorConfigBinpackingPodEvictionPtrInput `pulumi:"podEviction"`
}

func (OrchestratorConfigBinpackingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigBinpacking)(nil)).Elem()
}

func (i OrchestratorConfigBinpackingArgs) ToOrchestratorConfigBinpackingOutput() OrchestratorConfigBinpackingOutput {
	return i.ToOrchestratorConfigBinpackingOutputWithContext(context.Background())
}

func (i OrchestratorConfigBinpackingArgs) ToOrchestratorConfigBinpackingOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigBinpackingOutput)
}

func (i OrchestratorConfigBinpackingArgs) ToOrchestratorConfigBinpackingPtrOutput() OrchestratorConfigBinpackingPtrOutput {
	return i.ToOrchestratorConfigBinpackingPtrOutputWithContext(context.Background())
}

func (i OrchestratorConfigBinpackingArgs) ToOrchestratorConfigBinpackingPtrOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigBinpackingOutput).ToOrchestratorConfigBinpackingPtrOutputWithContext(ctx)
}

// OrchestratorConfigBinpackingPtrInput is an input type that accepts OrchestratorConfigBinpackingArgs, OrchestratorConfigBinpackingPtr and OrchestratorConfigBinpackingPtrOutput values.
// You can construct a concrete instance of `OrchestratorConfigBinpackingPtrInput` via:
//
//	        OrchestratorConfigBinpackingArgs{...}
//
//	or:
//
//	        nil
type OrchestratorConfigBinpackingPtrInput interface {
	pulumi.Input

	ToOrchestratorConfigBinpackingPtrOutput() OrchestratorConfigBinpackingPtrOutput
	ToOrchestratorConfigBinpackingPtrOutputWithContext(context.Context) OrchestratorConfigBinpackingPtrOutput
}

type orchestratorConfigBinpackingPtrType OrchestratorConfigBinpackingArgs

func OrchestratorConfigBinpackingPtr(v *OrchestratorConfigBinpackingArgs) OrchestratorConfigBinpackingPtrInput {
	return (*orchestratorConfigBinpackingPtrType)(v)
}

func (*orchestratorConfigBinpackingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigBinpacking)(nil)).Elem()
}

func (i *orchestratorConfigBinpackingPtrType) ToOrchestratorConfigBinpackingPtrOutput() OrchestratorConfigBinpackingPtrOutput {
	return i.ToOrchestratorConfigBinpackingPtrOutputWithContext(context.Background())
}

func (i *orchestratorConfigBinpackingPtrType) ToOrchestratorConfigBinpackingPtrOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigBinpackingPtrOutput)
}

type OrchestratorConfigBinpackingOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigBinpackingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigBinpacking)(nil)).Elem()
}

func (o OrchestratorConfigBinpackingOutput) ToOrchestratorConfigBinpackingOutput() OrchestratorConfigBinpackingOutput {
	return o
}

func (o OrchestratorConfigBinpackingOutput) ToOrchestratorConfigBinpackingOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingOutput {
	return o
}

func (o OrchestratorConfigBinpackingOutput) ToOrchestratorConfigBinpackingPtrOutput() OrchestratorConfigBinpackingPtrOutput {
	return o.ToOrchestratorConfigBinpackingPtrOutputWithContext(context.Background())
}

func (o OrchestratorConfigBinpackingOutput) ToOrchestratorConfigBinpackingPtrOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrchestratorConfigBinpacking) *OrchestratorConfigBinpacking {
		return &v
	}).(OrchestratorConfigBinpackingPtrOutput)
}

// Harness disruption configuration
func (o OrchestratorConfigBinpackingOutput) Disruption() OrchestratorConfigBinpackingDisruptionPtrOutput {
	return o.ApplyT(func(v OrchestratorConfigBinpacking) *OrchestratorConfigBinpackingDisruption { return v.Disruption }).(OrchestratorConfigBinpackingDisruptionPtrOutput)
}

// Harness Pod Evictor Configuration
func (o OrchestratorConfigBinpackingOutput) PodEviction() OrchestratorConfigBinpackingPodEvictionPtrOutput {
	return o.ApplyT(func(v OrchestratorConfigBinpacking) *OrchestratorConfigBinpackingPodEviction { return v.PodEviction }).(OrchestratorConfigBinpackingPodEvictionPtrOutput)
}

type OrchestratorConfigBinpackingPtrOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigBinpackingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigBinpacking)(nil)).Elem()
}

func (o OrchestratorConfigBinpackingPtrOutput) ToOrchestratorConfigBinpackingPtrOutput() OrchestratorConfigBinpackingPtrOutput {
	return o
}

func (o OrchestratorConfigBinpackingPtrOutput) ToOrchestratorConfigBinpackingPtrOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingPtrOutput {
	return o
}

func (o OrchestratorConfigBinpackingPtrOutput) Elem() OrchestratorConfigBinpackingOutput {
	return o.ApplyT(func(v *OrchestratorConfigBinpacking) OrchestratorConfigBinpacking {
		if v != nil {
			return *v
		}
		var ret OrchestratorConfigBinpacking
		return ret
	}).(OrchestratorConfigBinpackingOutput)
}

// Harness disruption configuration
func (o OrchestratorConfigBinpackingPtrOutput) Disruption() OrchestratorConfigBinpackingDisruptionPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigBinpacking) *OrchestratorConfigBinpackingDisruption {
		if v == nil {
			return nil
		}
		return v.Disruption
	}).(OrchestratorConfigBinpackingDisruptionPtrOutput)
}

// Harness Pod Evictor Configuration
func (o OrchestratorConfigBinpackingPtrOutput) PodEviction() OrchestratorConfigBinpackingPodEvictionPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigBinpacking) *OrchestratorConfigBinpackingPodEviction {
		if v == nil {
			return nil
		}
		return v.PodEviction
	}).(OrchestratorConfigBinpackingPodEvictionPtrOutput)
}

type OrchestratorConfigBinpackingDisruption struct {
	// Budgets for disruption
	Budgets []OrchestratorConfigBinpackingDisruptionBudget `pulumi:"budgets"`
	// Criteria for considering a nodes for disruption
	Criteria *string `pulumi:"criteria"`
	// Deletion delay
	Delay *string `pulumi:"delay"`
}

// OrchestratorConfigBinpackingDisruptionInput is an input type that accepts OrchestratorConfigBinpackingDisruptionArgs and OrchestratorConfigBinpackingDisruptionOutput values.
// You can construct a concrete instance of `OrchestratorConfigBinpackingDisruptionInput` via:
//
//	OrchestratorConfigBinpackingDisruptionArgs{...}
type OrchestratorConfigBinpackingDisruptionInput interface {
	pulumi.Input

	ToOrchestratorConfigBinpackingDisruptionOutput() OrchestratorConfigBinpackingDisruptionOutput
	ToOrchestratorConfigBinpackingDisruptionOutputWithContext(context.Context) OrchestratorConfigBinpackingDisruptionOutput
}

type OrchestratorConfigBinpackingDisruptionArgs struct {
	// Budgets for disruption
	Budgets OrchestratorConfigBinpackingDisruptionBudgetArrayInput `pulumi:"budgets"`
	// Criteria for considering a nodes for disruption
	Criteria pulumi.StringPtrInput `pulumi:"criteria"`
	// Deletion delay
	Delay pulumi.StringPtrInput `pulumi:"delay"`
}

func (OrchestratorConfigBinpackingDisruptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigBinpackingDisruption)(nil)).Elem()
}

func (i OrchestratorConfigBinpackingDisruptionArgs) ToOrchestratorConfigBinpackingDisruptionOutput() OrchestratorConfigBinpackingDisruptionOutput {
	return i.ToOrchestratorConfigBinpackingDisruptionOutputWithContext(context.Background())
}

func (i OrchestratorConfigBinpackingDisruptionArgs) ToOrchestratorConfigBinpackingDisruptionOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingDisruptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigBinpackingDisruptionOutput)
}

func (i OrchestratorConfigBinpackingDisruptionArgs) ToOrchestratorConfigBinpackingDisruptionPtrOutput() OrchestratorConfigBinpackingDisruptionPtrOutput {
	return i.ToOrchestratorConfigBinpackingDisruptionPtrOutputWithContext(context.Background())
}

func (i OrchestratorConfigBinpackingDisruptionArgs) ToOrchestratorConfigBinpackingDisruptionPtrOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingDisruptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigBinpackingDisruptionOutput).ToOrchestratorConfigBinpackingDisruptionPtrOutputWithContext(ctx)
}

// OrchestratorConfigBinpackingDisruptionPtrInput is an input type that accepts OrchestratorConfigBinpackingDisruptionArgs, OrchestratorConfigBinpackingDisruptionPtr and OrchestratorConfigBinpackingDisruptionPtrOutput values.
// You can construct a concrete instance of `OrchestratorConfigBinpackingDisruptionPtrInput` via:
//
//	        OrchestratorConfigBinpackingDisruptionArgs{...}
//
//	or:
//
//	        nil
type OrchestratorConfigBinpackingDisruptionPtrInput interface {
	pulumi.Input

	ToOrchestratorConfigBinpackingDisruptionPtrOutput() OrchestratorConfigBinpackingDisruptionPtrOutput
	ToOrchestratorConfigBinpackingDisruptionPtrOutputWithContext(context.Context) OrchestratorConfigBinpackingDisruptionPtrOutput
}

type orchestratorConfigBinpackingDisruptionPtrType OrchestratorConfigBinpackingDisruptionArgs

func OrchestratorConfigBinpackingDisruptionPtr(v *OrchestratorConfigBinpackingDisruptionArgs) OrchestratorConfigBinpackingDisruptionPtrInput {
	return (*orchestratorConfigBinpackingDisruptionPtrType)(v)
}

func (*orchestratorConfigBinpackingDisruptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigBinpackingDisruption)(nil)).Elem()
}

func (i *orchestratorConfigBinpackingDisruptionPtrType) ToOrchestratorConfigBinpackingDisruptionPtrOutput() OrchestratorConfigBinpackingDisruptionPtrOutput {
	return i.ToOrchestratorConfigBinpackingDisruptionPtrOutputWithContext(context.Background())
}

func (i *orchestratorConfigBinpackingDisruptionPtrType) ToOrchestratorConfigBinpackingDisruptionPtrOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingDisruptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigBinpackingDisruptionPtrOutput)
}

type OrchestratorConfigBinpackingDisruptionOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigBinpackingDisruptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigBinpackingDisruption)(nil)).Elem()
}

func (o OrchestratorConfigBinpackingDisruptionOutput) ToOrchestratorConfigBinpackingDisruptionOutput() OrchestratorConfigBinpackingDisruptionOutput {
	return o
}

func (o OrchestratorConfigBinpackingDisruptionOutput) ToOrchestratorConfigBinpackingDisruptionOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingDisruptionOutput {
	return o
}

func (o OrchestratorConfigBinpackingDisruptionOutput) ToOrchestratorConfigBinpackingDisruptionPtrOutput() OrchestratorConfigBinpackingDisruptionPtrOutput {
	return o.ToOrchestratorConfigBinpackingDisruptionPtrOutputWithContext(context.Background())
}

func (o OrchestratorConfigBinpackingDisruptionOutput) ToOrchestratorConfigBinpackingDisruptionPtrOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingDisruptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrchestratorConfigBinpackingDisruption) *OrchestratorConfigBinpackingDisruption {
		return &v
	}).(OrchestratorConfigBinpackingDisruptionPtrOutput)
}

// Budgets for disruption
func (o OrchestratorConfigBinpackingDisruptionOutput) Budgets() OrchestratorConfigBinpackingDisruptionBudgetArrayOutput {
	return o.ApplyT(func(v OrchestratorConfigBinpackingDisruption) []OrchestratorConfigBinpackingDisruptionBudget {
		return v.Budgets
	}).(OrchestratorConfigBinpackingDisruptionBudgetArrayOutput)
}

// Criteria for considering a nodes for disruption
func (o OrchestratorConfigBinpackingDisruptionOutput) Criteria() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorConfigBinpackingDisruption) *string { return v.Criteria }).(pulumi.StringPtrOutput)
}

// Deletion delay
func (o OrchestratorConfigBinpackingDisruptionOutput) Delay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorConfigBinpackingDisruption) *string { return v.Delay }).(pulumi.StringPtrOutput)
}

type OrchestratorConfigBinpackingDisruptionPtrOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigBinpackingDisruptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigBinpackingDisruption)(nil)).Elem()
}

func (o OrchestratorConfigBinpackingDisruptionPtrOutput) ToOrchestratorConfigBinpackingDisruptionPtrOutput() OrchestratorConfigBinpackingDisruptionPtrOutput {
	return o
}

func (o OrchestratorConfigBinpackingDisruptionPtrOutput) ToOrchestratorConfigBinpackingDisruptionPtrOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingDisruptionPtrOutput {
	return o
}

func (o OrchestratorConfigBinpackingDisruptionPtrOutput) Elem() OrchestratorConfigBinpackingDisruptionOutput {
	return o.ApplyT(func(v *OrchestratorConfigBinpackingDisruption) OrchestratorConfigBinpackingDisruption {
		if v != nil {
			return *v
		}
		var ret OrchestratorConfigBinpackingDisruption
		return ret
	}).(OrchestratorConfigBinpackingDisruptionOutput)
}

// Budgets for disruption
func (o OrchestratorConfigBinpackingDisruptionPtrOutput) Budgets() OrchestratorConfigBinpackingDisruptionBudgetArrayOutput {
	return o.ApplyT(func(v *OrchestratorConfigBinpackingDisruption) []OrchestratorConfigBinpackingDisruptionBudget {
		if v == nil {
			return nil
		}
		return v.Budgets
	}).(OrchestratorConfigBinpackingDisruptionBudgetArrayOutput)
}

// Criteria for considering a nodes for disruption
func (o OrchestratorConfigBinpackingDisruptionPtrOutput) Criteria() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigBinpackingDisruption) *string {
		if v == nil {
			return nil
		}
		return v.Criteria
	}).(pulumi.StringPtrOutput)
}

// Deletion delay
func (o OrchestratorConfigBinpackingDisruptionPtrOutput) Delay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigBinpackingDisruption) *string {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(pulumi.StringPtrOutput)
}

type OrchestratorConfigBinpackingDisruptionBudget struct {
	// Number or percentage of Nodes to consider for disruption
	Nodes string `pulumi:"nodes"`
	// Reasons for disruption
	Reasons []string `pulumi:"reasons"`
	// Schedule for disruption budget
	Schedule *OrchestratorConfigBinpackingDisruptionBudgetSchedule `pulumi:"schedule"`
}

// OrchestratorConfigBinpackingDisruptionBudgetInput is an input type that accepts OrchestratorConfigBinpackingDisruptionBudgetArgs and OrchestratorConfigBinpackingDisruptionBudgetOutput values.
// You can construct a concrete instance of `OrchestratorConfigBinpackingDisruptionBudgetInput` via:
//
//	OrchestratorConfigBinpackingDisruptionBudgetArgs{...}
type OrchestratorConfigBinpackingDisruptionBudgetInput interface {
	pulumi.Input

	ToOrchestratorConfigBinpackingDisruptionBudgetOutput() OrchestratorConfigBinpackingDisruptionBudgetOutput
	ToOrchestratorConfigBinpackingDisruptionBudgetOutputWithContext(context.Context) OrchestratorConfigBinpackingDisruptionBudgetOutput
}

type OrchestratorConfigBinpackingDisruptionBudgetArgs struct {
	// Number or percentage of Nodes to consider for disruption
	Nodes pulumi.StringInput `pulumi:"nodes"`
	// Reasons for disruption
	Reasons pulumi.StringArrayInput `pulumi:"reasons"`
	// Schedule for disruption budget
	Schedule OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrInput `pulumi:"schedule"`
}

func (OrchestratorConfigBinpackingDisruptionBudgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigBinpackingDisruptionBudget)(nil)).Elem()
}

func (i OrchestratorConfigBinpackingDisruptionBudgetArgs) ToOrchestratorConfigBinpackingDisruptionBudgetOutput() OrchestratorConfigBinpackingDisruptionBudgetOutput {
	return i.ToOrchestratorConfigBinpackingDisruptionBudgetOutputWithContext(context.Background())
}

func (i OrchestratorConfigBinpackingDisruptionBudgetArgs) ToOrchestratorConfigBinpackingDisruptionBudgetOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingDisruptionBudgetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigBinpackingDisruptionBudgetOutput)
}

// OrchestratorConfigBinpackingDisruptionBudgetArrayInput is an input type that accepts OrchestratorConfigBinpackingDisruptionBudgetArray and OrchestratorConfigBinpackingDisruptionBudgetArrayOutput values.
// You can construct a concrete instance of `OrchestratorConfigBinpackingDisruptionBudgetArrayInput` via:
//
//	OrchestratorConfigBinpackingDisruptionBudgetArray{ OrchestratorConfigBinpackingDisruptionBudgetArgs{...} }
type OrchestratorConfigBinpackingDisruptionBudgetArrayInput interface {
	pulumi.Input

	ToOrchestratorConfigBinpackingDisruptionBudgetArrayOutput() OrchestratorConfigBinpackingDisruptionBudgetArrayOutput
	ToOrchestratorConfigBinpackingDisruptionBudgetArrayOutputWithContext(context.Context) OrchestratorConfigBinpackingDisruptionBudgetArrayOutput
}

type OrchestratorConfigBinpackingDisruptionBudgetArray []OrchestratorConfigBinpackingDisruptionBudgetInput

func (OrchestratorConfigBinpackingDisruptionBudgetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrchestratorConfigBinpackingDisruptionBudget)(nil)).Elem()
}

func (i OrchestratorConfigBinpackingDisruptionBudgetArray) ToOrchestratorConfigBinpackingDisruptionBudgetArrayOutput() OrchestratorConfigBinpackingDisruptionBudgetArrayOutput {
	return i.ToOrchestratorConfigBinpackingDisruptionBudgetArrayOutputWithContext(context.Background())
}

func (i OrchestratorConfigBinpackingDisruptionBudgetArray) ToOrchestratorConfigBinpackingDisruptionBudgetArrayOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingDisruptionBudgetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigBinpackingDisruptionBudgetArrayOutput)
}

type OrchestratorConfigBinpackingDisruptionBudgetOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigBinpackingDisruptionBudgetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigBinpackingDisruptionBudget)(nil)).Elem()
}

func (o OrchestratorConfigBinpackingDisruptionBudgetOutput) ToOrchestratorConfigBinpackingDisruptionBudgetOutput() OrchestratorConfigBinpackingDisruptionBudgetOutput {
	return o
}

func (o OrchestratorConfigBinpackingDisruptionBudgetOutput) ToOrchestratorConfigBinpackingDisruptionBudgetOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingDisruptionBudgetOutput {
	return o
}

// Number or percentage of Nodes to consider for disruption
func (o OrchestratorConfigBinpackingDisruptionBudgetOutput) Nodes() pulumi.StringOutput {
	return o.ApplyT(func(v OrchestratorConfigBinpackingDisruptionBudget) string { return v.Nodes }).(pulumi.StringOutput)
}

// Reasons for disruption
func (o OrchestratorConfigBinpackingDisruptionBudgetOutput) Reasons() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OrchestratorConfigBinpackingDisruptionBudget) []string { return v.Reasons }).(pulumi.StringArrayOutput)
}

// Schedule for disruption budget
func (o OrchestratorConfigBinpackingDisruptionBudgetOutput) Schedule() OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput {
	return o.ApplyT(func(v OrchestratorConfigBinpackingDisruptionBudget) *OrchestratorConfigBinpackingDisruptionBudgetSchedule {
		return v.Schedule
	}).(OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput)
}

type OrchestratorConfigBinpackingDisruptionBudgetArrayOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigBinpackingDisruptionBudgetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrchestratorConfigBinpackingDisruptionBudget)(nil)).Elem()
}

func (o OrchestratorConfigBinpackingDisruptionBudgetArrayOutput) ToOrchestratorConfigBinpackingDisruptionBudgetArrayOutput() OrchestratorConfigBinpackingDisruptionBudgetArrayOutput {
	return o
}

func (o OrchestratorConfigBinpackingDisruptionBudgetArrayOutput) ToOrchestratorConfigBinpackingDisruptionBudgetArrayOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingDisruptionBudgetArrayOutput {
	return o
}

func (o OrchestratorConfigBinpackingDisruptionBudgetArrayOutput) Index(i pulumi.IntInput) OrchestratorConfigBinpackingDisruptionBudgetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OrchestratorConfigBinpackingDisruptionBudget {
		return vs[0].([]OrchestratorConfigBinpackingDisruptionBudget)[vs[1].(int)]
	}).(OrchestratorConfigBinpackingDisruptionBudgetOutput)
}

type OrchestratorConfigBinpackingDisruptionBudgetSchedule struct {
	// Duration for disruption budget
	Duration string `pulumi:"duration"`
	// Frequency for disruption budget
	Frequency string `pulumi:"frequency"`
}

// OrchestratorConfigBinpackingDisruptionBudgetScheduleInput is an input type that accepts OrchestratorConfigBinpackingDisruptionBudgetScheduleArgs and OrchestratorConfigBinpackingDisruptionBudgetScheduleOutput values.
// You can construct a concrete instance of `OrchestratorConfigBinpackingDisruptionBudgetScheduleInput` via:
//
//	OrchestratorConfigBinpackingDisruptionBudgetScheduleArgs{...}
type OrchestratorConfigBinpackingDisruptionBudgetScheduleInput interface {
	pulumi.Input

	ToOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput() OrchestratorConfigBinpackingDisruptionBudgetScheduleOutput
	ToOrchestratorConfigBinpackingDisruptionBudgetScheduleOutputWithContext(context.Context) OrchestratorConfigBinpackingDisruptionBudgetScheduleOutput
}

type OrchestratorConfigBinpackingDisruptionBudgetScheduleArgs struct {
	// Duration for disruption budget
	Duration pulumi.StringInput `pulumi:"duration"`
	// Frequency for disruption budget
	Frequency pulumi.StringInput `pulumi:"frequency"`
}

func (OrchestratorConfigBinpackingDisruptionBudgetScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigBinpackingDisruptionBudgetSchedule)(nil)).Elem()
}

func (i OrchestratorConfigBinpackingDisruptionBudgetScheduleArgs) ToOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput() OrchestratorConfigBinpackingDisruptionBudgetScheduleOutput {
	return i.ToOrchestratorConfigBinpackingDisruptionBudgetScheduleOutputWithContext(context.Background())
}

func (i OrchestratorConfigBinpackingDisruptionBudgetScheduleArgs) ToOrchestratorConfigBinpackingDisruptionBudgetScheduleOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingDisruptionBudgetScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigBinpackingDisruptionBudgetScheduleOutput)
}

func (i OrchestratorConfigBinpackingDisruptionBudgetScheduleArgs) ToOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput() OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput {
	return i.ToOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutputWithContext(context.Background())
}

func (i OrchestratorConfigBinpackingDisruptionBudgetScheduleArgs) ToOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigBinpackingDisruptionBudgetScheduleOutput).ToOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutputWithContext(ctx)
}

// OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrInput is an input type that accepts OrchestratorConfigBinpackingDisruptionBudgetScheduleArgs, OrchestratorConfigBinpackingDisruptionBudgetSchedulePtr and OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput values.
// You can construct a concrete instance of `OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrInput` via:
//
//	        OrchestratorConfigBinpackingDisruptionBudgetScheduleArgs{...}
//
//	or:
//
//	        nil
type OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrInput interface {
	pulumi.Input

	ToOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput() OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput
	ToOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutputWithContext(context.Context) OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput
}

type orchestratorConfigBinpackingDisruptionBudgetSchedulePtrType OrchestratorConfigBinpackingDisruptionBudgetScheduleArgs

func OrchestratorConfigBinpackingDisruptionBudgetSchedulePtr(v *OrchestratorConfigBinpackingDisruptionBudgetScheduleArgs) OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrInput {
	return (*orchestratorConfigBinpackingDisruptionBudgetSchedulePtrType)(v)
}

func (*orchestratorConfigBinpackingDisruptionBudgetSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigBinpackingDisruptionBudgetSchedule)(nil)).Elem()
}

func (i *orchestratorConfigBinpackingDisruptionBudgetSchedulePtrType) ToOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput() OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput {
	return i.ToOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutputWithContext(context.Background())
}

func (i *orchestratorConfigBinpackingDisruptionBudgetSchedulePtrType) ToOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput)
}

type OrchestratorConfigBinpackingDisruptionBudgetScheduleOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigBinpackingDisruptionBudgetScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigBinpackingDisruptionBudgetSchedule)(nil)).Elem()
}

func (o OrchestratorConfigBinpackingDisruptionBudgetScheduleOutput) ToOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput() OrchestratorConfigBinpackingDisruptionBudgetScheduleOutput {
	return o
}

func (o OrchestratorConfigBinpackingDisruptionBudgetScheduleOutput) ToOrchestratorConfigBinpackingDisruptionBudgetScheduleOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingDisruptionBudgetScheduleOutput {
	return o
}

func (o OrchestratorConfigBinpackingDisruptionBudgetScheduleOutput) ToOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput() OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput {
	return o.ToOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutputWithContext(context.Background())
}

func (o OrchestratorConfigBinpackingDisruptionBudgetScheduleOutput) ToOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrchestratorConfigBinpackingDisruptionBudgetSchedule) *OrchestratorConfigBinpackingDisruptionBudgetSchedule {
		return &v
	}).(OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput)
}

// Duration for disruption budget
func (o OrchestratorConfigBinpackingDisruptionBudgetScheduleOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v OrchestratorConfigBinpackingDisruptionBudgetSchedule) string { return v.Duration }).(pulumi.StringOutput)
}

// Frequency for disruption budget
func (o OrchestratorConfigBinpackingDisruptionBudgetScheduleOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v OrchestratorConfigBinpackingDisruptionBudgetSchedule) string { return v.Frequency }).(pulumi.StringOutput)
}

type OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigBinpackingDisruptionBudgetSchedule)(nil)).Elem()
}

func (o OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput) ToOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput() OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput {
	return o
}

func (o OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput) ToOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput {
	return o
}

func (o OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput) Elem() OrchestratorConfigBinpackingDisruptionBudgetScheduleOutput {
	return o.ApplyT(func(v *OrchestratorConfigBinpackingDisruptionBudgetSchedule) OrchestratorConfigBinpackingDisruptionBudgetSchedule {
		if v != nil {
			return *v
		}
		var ret OrchestratorConfigBinpackingDisruptionBudgetSchedule
		return ret
	}).(OrchestratorConfigBinpackingDisruptionBudgetScheduleOutput)
}

// Duration for disruption budget
func (o OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigBinpackingDisruptionBudgetSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.Duration
	}).(pulumi.StringPtrOutput)
}

// Frequency for disruption budget
func (o OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigBinpackingDisruptionBudgetSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.Frequency
	}).(pulumi.StringPtrOutput)
}

type OrchestratorConfigBinpackingPodEviction struct {
	// Minimum Threshold for considering a node as underutilized
	Threshold OrchestratorConfigBinpackingPodEvictionThreshold `pulumi:"threshold"`
}

// OrchestratorConfigBinpackingPodEvictionInput is an input type that accepts OrchestratorConfigBinpackingPodEvictionArgs and OrchestratorConfigBinpackingPodEvictionOutput values.
// You can construct a concrete instance of `OrchestratorConfigBinpackingPodEvictionInput` via:
//
//	OrchestratorConfigBinpackingPodEvictionArgs{...}
type OrchestratorConfigBinpackingPodEvictionInput interface {
	pulumi.Input

	ToOrchestratorConfigBinpackingPodEvictionOutput() OrchestratorConfigBinpackingPodEvictionOutput
	ToOrchestratorConfigBinpackingPodEvictionOutputWithContext(context.Context) OrchestratorConfigBinpackingPodEvictionOutput
}

type OrchestratorConfigBinpackingPodEvictionArgs struct {
	// Minimum Threshold for considering a node as underutilized
	Threshold OrchestratorConfigBinpackingPodEvictionThresholdInput `pulumi:"threshold"`
}

func (OrchestratorConfigBinpackingPodEvictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigBinpackingPodEviction)(nil)).Elem()
}

func (i OrchestratorConfigBinpackingPodEvictionArgs) ToOrchestratorConfigBinpackingPodEvictionOutput() OrchestratorConfigBinpackingPodEvictionOutput {
	return i.ToOrchestratorConfigBinpackingPodEvictionOutputWithContext(context.Background())
}

func (i OrchestratorConfigBinpackingPodEvictionArgs) ToOrchestratorConfigBinpackingPodEvictionOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingPodEvictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigBinpackingPodEvictionOutput)
}

func (i OrchestratorConfigBinpackingPodEvictionArgs) ToOrchestratorConfigBinpackingPodEvictionPtrOutput() OrchestratorConfigBinpackingPodEvictionPtrOutput {
	return i.ToOrchestratorConfigBinpackingPodEvictionPtrOutputWithContext(context.Background())
}

func (i OrchestratorConfigBinpackingPodEvictionArgs) ToOrchestratorConfigBinpackingPodEvictionPtrOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingPodEvictionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigBinpackingPodEvictionOutput).ToOrchestratorConfigBinpackingPodEvictionPtrOutputWithContext(ctx)
}

// OrchestratorConfigBinpackingPodEvictionPtrInput is an input type that accepts OrchestratorConfigBinpackingPodEvictionArgs, OrchestratorConfigBinpackingPodEvictionPtr and OrchestratorConfigBinpackingPodEvictionPtrOutput values.
// You can construct a concrete instance of `OrchestratorConfigBinpackingPodEvictionPtrInput` via:
//
//	        OrchestratorConfigBinpackingPodEvictionArgs{...}
//
//	or:
//
//	        nil
type OrchestratorConfigBinpackingPodEvictionPtrInput interface {
	pulumi.Input

	ToOrchestratorConfigBinpackingPodEvictionPtrOutput() OrchestratorConfigBinpackingPodEvictionPtrOutput
	ToOrchestratorConfigBinpackingPodEvictionPtrOutputWithContext(context.Context) OrchestratorConfigBinpackingPodEvictionPtrOutput
}

type orchestratorConfigBinpackingPodEvictionPtrType OrchestratorConfigBinpackingPodEvictionArgs

func OrchestratorConfigBinpackingPodEvictionPtr(v *OrchestratorConfigBinpackingPodEvictionArgs) OrchestratorConfigBinpackingPodEvictionPtrInput {
	return (*orchestratorConfigBinpackingPodEvictionPtrType)(v)
}

func (*orchestratorConfigBinpackingPodEvictionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigBinpackingPodEviction)(nil)).Elem()
}

func (i *orchestratorConfigBinpackingPodEvictionPtrType) ToOrchestratorConfigBinpackingPodEvictionPtrOutput() OrchestratorConfigBinpackingPodEvictionPtrOutput {
	return i.ToOrchestratorConfigBinpackingPodEvictionPtrOutputWithContext(context.Background())
}

func (i *orchestratorConfigBinpackingPodEvictionPtrType) ToOrchestratorConfigBinpackingPodEvictionPtrOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingPodEvictionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigBinpackingPodEvictionPtrOutput)
}

type OrchestratorConfigBinpackingPodEvictionOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigBinpackingPodEvictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigBinpackingPodEviction)(nil)).Elem()
}

func (o OrchestratorConfigBinpackingPodEvictionOutput) ToOrchestratorConfigBinpackingPodEvictionOutput() OrchestratorConfigBinpackingPodEvictionOutput {
	return o
}

func (o OrchestratorConfigBinpackingPodEvictionOutput) ToOrchestratorConfigBinpackingPodEvictionOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingPodEvictionOutput {
	return o
}

func (o OrchestratorConfigBinpackingPodEvictionOutput) ToOrchestratorConfigBinpackingPodEvictionPtrOutput() OrchestratorConfigBinpackingPodEvictionPtrOutput {
	return o.ToOrchestratorConfigBinpackingPodEvictionPtrOutputWithContext(context.Background())
}

func (o OrchestratorConfigBinpackingPodEvictionOutput) ToOrchestratorConfigBinpackingPodEvictionPtrOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingPodEvictionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrchestratorConfigBinpackingPodEviction) *OrchestratorConfigBinpackingPodEviction {
		return &v
	}).(OrchestratorConfigBinpackingPodEvictionPtrOutput)
}

// Minimum Threshold for considering a node as underutilized
func (o OrchestratorConfigBinpackingPodEvictionOutput) Threshold() OrchestratorConfigBinpackingPodEvictionThresholdOutput {
	return o.ApplyT(func(v OrchestratorConfigBinpackingPodEviction) OrchestratorConfigBinpackingPodEvictionThreshold {
		return v.Threshold
	}).(OrchestratorConfigBinpackingPodEvictionThresholdOutput)
}

type OrchestratorConfigBinpackingPodEvictionPtrOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigBinpackingPodEvictionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigBinpackingPodEviction)(nil)).Elem()
}

func (o OrchestratorConfigBinpackingPodEvictionPtrOutput) ToOrchestratorConfigBinpackingPodEvictionPtrOutput() OrchestratorConfigBinpackingPodEvictionPtrOutput {
	return o
}

func (o OrchestratorConfigBinpackingPodEvictionPtrOutput) ToOrchestratorConfigBinpackingPodEvictionPtrOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingPodEvictionPtrOutput {
	return o
}

func (o OrchestratorConfigBinpackingPodEvictionPtrOutput) Elem() OrchestratorConfigBinpackingPodEvictionOutput {
	return o.ApplyT(func(v *OrchestratorConfigBinpackingPodEviction) OrchestratorConfigBinpackingPodEviction {
		if v != nil {
			return *v
		}
		var ret OrchestratorConfigBinpackingPodEviction
		return ret
	}).(OrchestratorConfigBinpackingPodEvictionOutput)
}

// Minimum Threshold for considering a node as underutilized
func (o OrchestratorConfigBinpackingPodEvictionPtrOutput) Threshold() OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigBinpackingPodEviction) *OrchestratorConfigBinpackingPodEvictionThreshold {
		if v == nil {
			return nil
		}
		return &v.Threshold
	}).(OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput)
}

type OrchestratorConfigBinpackingPodEvictionThreshold struct {
	// CPU percentage for considering a node as underutilized
	Cpu float64 `pulumi:"cpu"`
	// Memory percentage for considering a node as underutilized
	Memory float64 `pulumi:"memory"`
}

// OrchestratorConfigBinpackingPodEvictionThresholdInput is an input type that accepts OrchestratorConfigBinpackingPodEvictionThresholdArgs and OrchestratorConfigBinpackingPodEvictionThresholdOutput values.
// You can construct a concrete instance of `OrchestratorConfigBinpackingPodEvictionThresholdInput` via:
//
//	OrchestratorConfigBinpackingPodEvictionThresholdArgs{...}
type OrchestratorConfigBinpackingPodEvictionThresholdInput interface {
	pulumi.Input

	ToOrchestratorConfigBinpackingPodEvictionThresholdOutput() OrchestratorConfigBinpackingPodEvictionThresholdOutput
	ToOrchestratorConfigBinpackingPodEvictionThresholdOutputWithContext(context.Context) OrchestratorConfigBinpackingPodEvictionThresholdOutput
}

type OrchestratorConfigBinpackingPodEvictionThresholdArgs struct {
	// CPU percentage for considering a node as underutilized
	Cpu pulumi.Float64Input `pulumi:"cpu"`
	// Memory percentage for considering a node as underutilized
	Memory pulumi.Float64Input `pulumi:"memory"`
}

func (OrchestratorConfigBinpackingPodEvictionThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigBinpackingPodEvictionThreshold)(nil)).Elem()
}

func (i OrchestratorConfigBinpackingPodEvictionThresholdArgs) ToOrchestratorConfigBinpackingPodEvictionThresholdOutput() OrchestratorConfigBinpackingPodEvictionThresholdOutput {
	return i.ToOrchestratorConfigBinpackingPodEvictionThresholdOutputWithContext(context.Background())
}

func (i OrchestratorConfigBinpackingPodEvictionThresholdArgs) ToOrchestratorConfigBinpackingPodEvictionThresholdOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingPodEvictionThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigBinpackingPodEvictionThresholdOutput)
}

func (i OrchestratorConfigBinpackingPodEvictionThresholdArgs) ToOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput() OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput {
	return i.ToOrchestratorConfigBinpackingPodEvictionThresholdPtrOutputWithContext(context.Background())
}

func (i OrchestratorConfigBinpackingPodEvictionThresholdArgs) ToOrchestratorConfigBinpackingPodEvictionThresholdPtrOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigBinpackingPodEvictionThresholdOutput).ToOrchestratorConfigBinpackingPodEvictionThresholdPtrOutputWithContext(ctx)
}

// OrchestratorConfigBinpackingPodEvictionThresholdPtrInput is an input type that accepts OrchestratorConfigBinpackingPodEvictionThresholdArgs, OrchestratorConfigBinpackingPodEvictionThresholdPtr and OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput values.
// You can construct a concrete instance of `OrchestratorConfigBinpackingPodEvictionThresholdPtrInput` via:
//
//	        OrchestratorConfigBinpackingPodEvictionThresholdArgs{...}
//
//	or:
//
//	        nil
type OrchestratorConfigBinpackingPodEvictionThresholdPtrInput interface {
	pulumi.Input

	ToOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput() OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput
	ToOrchestratorConfigBinpackingPodEvictionThresholdPtrOutputWithContext(context.Context) OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput
}

type orchestratorConfigBinpackingPodEvictionThresholdPtrType OrchestratorConfigBinpackingPodEvictionThresholdArgs

func OrchestratorConfigBinpackingPodEvictionThresholdPtr(v *OrchestratorConfigBinpackingPodEvictionThresholdArgs) OrchestratorConfigBinpackingPodEvictionThresholdPtrInput {
	return (*orchestratorConfigBinpackingPodEvictionThresholdPtrType)(v)
}

func (*orchestratorConfigBinpackingPodEvictionThresholdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigBinpackingPodEvictionThreshold)(nil)).Elem()
}

func (i *orchestratorConfigBinpackingPodEvictionThresholdPtrType) ToOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput() OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput {
	return i.ToOrchestratorConfigBinpackingPodEvictionThresholdPtrOutputWithContext(context.Background())
}

func (i *orchestratorConfigBinpackingPodEvictionThresholdPtrType) ToOrchestratorConfigBinpackingPodEvictionThresholdPtrOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput)
}

type OrchestratorConfigBinpackingPodEvictionThresholdOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigBinpackingPodEvictionThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigBinpackingPodEvictionThreshold)(nil)).Elem()
}

func (o OrchestratorConfigBinpackingPodEvictionThresholdOutput) ToOrchestratorConfigBinpackingPodEvictionThresholdOutput() OrchestratorConfigBinpackingPodEvictionThresholdOutput {
	return o
}

func (o OrchestratorConfigBinpackingPodEvictionThresholdOutput) ToOrchestratorConfigBinpackingPodEvictionThresholdOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingPodEvictionThresholdOutput {
	return o
}

func (o OrchestratorConfigBinpackingPodEvictionThresholdOutput) ToOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput() OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput {
	return o.ToOrchestratorConfigBinpackingPodEvictionThresholdPtrOutputWithContext(context.Background())
}

func (o OrchestratorConfigBinpackingPodEvictionThresholdOutput) ToOrchestratorConfigBinpackingPodEvictionThresholdPtrOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrchestratorConfigBinpackingPodEvictionThreshold) *OrchestratorConfigBinpackingPodEvictionThreshold {
		return &v
	}).(OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput)
}

// CPU percentage for considering a node as underutilized
func (o OrchestratorConfigBinpackingPodEvictionThresholdOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v OrchestratorConfigBinpackingPodEvictionThreshold) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// Memory percentage for considering a node as underutilized
func (o OrchestratorConfigBinpackingPodEvictionThresholdOutput) Memory() pulumi.Float64Output {
	return o.ApplyT(func(v OrchestratorConfigBinpackingPodEvictionThreshold) float64 { return v.Memory }).(pulumi.Float64Output)
}

type OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigBinpackingPodEvictionThreshold)(nil)).Elem()
}

func (o OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput) ToOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput() OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput {
	return o
}

func (o OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput) ToOrchestratorConfigBinpackingPodEvictionThresholdPtrOutputWithContext(ctx context.Context) OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput {
	return o
}

func (o OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput) Elem() OrchestratorConfigBinpackingPodEvictionThresholdOutput {
	return o.ApplyT(func(v *OrchestratorConfigBinpackingPodEvictionThreshold) OrchestratorConfigBinpackingPodEvictionThreshold {
		if v != nil {
			return *v
		}
		var ret OrchestratorConfigBinpackingPodEvictionThreshold
		return ret
	}).(OrchestratorConfigBinpackingPodEvictionThresholdOutput)
}

// CPU percentage for considering a node as underutilized
func (o OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigBinpackingPodEvictionThreshold) *float64 {
		if v == nil {
			return nil
		}
		return &v.Cpu
	}).(pulumi.Float64PtrOutput)
}

// Memory percentage for considering a node as underutilized
func (o OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput) Memory() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigBinpackingPodEvictionThreshold) *float64 {
		if v == nil {
			return nil
		}
		return &v.Memory
	}).(pulumi.Float64PtrOutput)
}

type OrchestratorConfigCommitmentIntegration struct {
	// Flag to enable Commitment Integration
	Enabled bool `pulumi:"enabled"`
	// Master AWS account id for commitment integration
	MasterAccountId string `pulumi:"masterAccountId"`
}

// OrchestratorConfigCommitmentIntegrationInput is an input type that accepts OrchestratorConfigCommitmentIntegrationArgs and OrchestratorConfigCommitmentIntegrationOutput values.
// You can construct a concrete instance of `OrchestratorConfigCommitmentIntegrationInput` via:
//
//	OrchestratorConfigCommitmentIntegrationArgs{...}
type OrchestratorConfigCommitmentIntegrationInput interface {
	pulumi.Input

	ToOrchestratorConfigCommitmentIntegrationOutput() OrchestratorConfigCommitmentIntegrationOutput
	ToOrchestratorConfigCommitmentIntegrationOutputWithContext(context.Context) OrchestratorConfigCommitmentIntegrationOutput
}

type OrchestratorConfigCommitmentIntegrationArgs struct {
	// Flag to enable Commitment Integration
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Master AWS account id for commitment integration
	MasterAccountId pulumi.StringInput `pulumi:"masterAccountId"`
}

func (OrchestratorConfigCommitmentIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigCommitmentIntegration)(nil)).Elem()
}

func (i OrchestratorConfigCommitmentIntegrationArgs) ToOrchestratorConfigCommitmentIntegrationOutput() OrchestratorConfigCommitmentIntegrationOutput {
	return i.ToOrchestratorConfigCommitmentIntegrationOutputWithContext(context.Background())
}

func (i OrchestratorConfigCommitmentIntegrationArgs) ToOrchestratorConfigCommitmentIntegrationOutputWithContext(ctx context.Context) OrchestratorConfigCommitmentIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigCommitmentIntegrationOutput)
}

func (i OrchestratorConfigCommitmentIntegrationArgs) ToOrchestratorConfigCommitmentIntegrationPtrOutput() OrchestratorConfigCommitmentIntegrationPtrOutput {
	return i.ToOrchestratorConfigCommitmentIntegrationPtrOutputWithContext(context.Background())
}

func (i OrchestratorConfigCommitmentIntegrationArgs) ToOrchestratorConfigCommitmentIntegrationPtrOutputWithContext(ctx context.Context) OrchestratorConfigCommitmentIntegrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigCommitmentIntegrationOutput).ToOrchestratorConfigCommitmentIntegrationPtrOutputWithContext(ctx)
}

// OrchestratorConfigCommitmentIntegrationPtrInput is an input type that accepts OrchestratorConfigCommitmentIntegrationArgs, OrchestratorConfigCommitmentIntegrationPtr and OrchestratorConfigCommitmentIntegrationPtrOutput values.
// You can construct a concrete instance of `OrchestratorConfigCommitmentIntegrationPtrInput` via:
//
//	        OrchestratorConfigCommitmentIntegrationArgs{...}
//
//	or:
//
//	        nil
type OrchestratorConfigCommitmentIntegrationPtrInput interface {
	pulumi.Input

	ToOrchestratorConfigCommitmentIntegrationPtrOutput() OrchestratorConfigCommitmentIntegrationPtrOutput
	ToOrchestratorConfigCommitmentIntegrationPtrOutputWithContext(context.Context) OrchestratorConfigCommitmentIntegrationPtrOutput
}

type orchestratorConfigCommitmentIntegrationPtrType OrchestratorConfigCommitmentIntegrationArgs

func OrchestratorConfigCommitmentIntegrationPtr(v *OrchestratorConfigCommitmentIntegrationArgs) OrchestratorConfigCommitmentIntegrationPtrInput {
	return (*orchestratorConfigCommitmentIntegrationPtrType)(v)
}

func (*orchestratorConfigCommitmentIntegrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigCommitmentIntegration)(nil)).Elem()
}

func (i *orchestratorConfigCommitmentIntegrationPtrType) ToOrchestratorConfigCommitmentIntegrationPtrOutput() OrchestratorConfigCommitmentIntegrationPtrOutput {
	return i.ToOrchestratorConfigCommitmentIntegrationPtrOutputWithContext(context.Background())
}

func (i *orchestratorConfigCommitmentIntegrationPtrType) ToOrchestratorConfigCommitmentIntegrationPtrOutputWithContext(ctx context.Context) OrchestratorConfigCommitmentIntegrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigCommitmentIntegrationPtrOutput)
}

type OrchestratorConfigCommitmentIntegrationOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigCommitmentIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigCommitmentIntegration)(nil)).Elem()
}

func (o OrchestratorConfigCommitmentIntegrationOutput) ToOrchestratorConfigCommitmentIntegrationOutput() OrchestratorConfigCommitmentIntegrationOutput {
	return o
}

func (o OrchestratorConfigCommitmentIntegrationOutput) ToOrchestratorConfigCommitmentIntegrationOutputWithContext(ctx context.Context) OrchestratorConfigCommitmentIntegrationOutput {
	return o
}

func (o OrchestratorConfigCommitmentIntegrationOutput) ToOrchestratorConfigCommitmentIntegrationPtrOutput() OrchestratorConfigCommitmentIntegrationPtrOutput {
	return o.ToOrchestratorConfigCommitmentIntegrationPtrOutputWithContext(context.Background())
}

func (o OrchestratorConfigCommitmentIntegrationOutput) ToOrchestratorConfigCommitmentIntegrationPtrOutputWithContext(ctx context.Context) OrchestratorConfigCommitmentIntegrationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrchestratorConfigCommitmentIntegration) *OrchestratorConfigCommitmentIntegration {
		return &v
	}).(OrchestratorConfigCommitmentIntegrationPtrOutput)
}

// Flag to enable Commitment Integration
func (o OrchestratorConfigCommitmentIntegrationOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v OrchestratorConfigCommitmentIntegration) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Master AWS account id for commitment integration
func (o OrchestratorConfigCommitmentIntegrationOutput) MasterAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v OrchestratorConfigCommitmentIntegration) string { return v.MasterAccountId }).(pulumi.StringOutput)
}

type OrchestratorConfigCommitmentIntegrationPtrOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigCommitmentIntegrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigCommitmentIntegration)(nil)).Elem()
}

func (o OrchestratorConfigCommitmentIntegrationPtrOutput) ToOrchestratorConfigCommitmentIntegrationPtrOutput() OrchestratorConfigCommitmentIntegrationPtrOutput {
	return o
}

func (o OrchestratorConfigCommitmentIntegrationPtrOutput) ToOrchestratorConfigCommitmentIntegrationPtrOutputWithContext(ctx context.Context) OrchestratorConfigCommitmentIntegrationPtrOutput {
	return o
}

func (o OrchestratorConfigCommitmentIntegrationPtrOutput) Elem() OrchestratorConfigCommitmentIntegrationOutput {
	return o.ApplyT(func(v *OrchestratorConfigCommitmentIntegration) OrchestratorConfigCommitmentIntegration {
		if v != nil {
			return *v
		}
		var ret OrchestratorConfigCommitmentIntegration
		return ret
	}).(OrchestratorConfigCommitmentIntegrationOutput)
}

// Flag to enable Commitment Integration
func (o OrchestratorConfigCommitmentIntegrationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigCommitmentIntegration) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Master AWS account id for commitment integration
func (o OrchestratorConfigCommitmentIntegrationPtrOutput) MasterAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigCommitmentIntegration) *string {
		if v == nil {
			return nil
		}
		return &v.MasterAccountId
	}).(pulumi.StringPtrOutput)
}

type OrchestratorConfigDistribution struct {
	// Number of minimum ondemand replicas required for workloads
	BaseOndemandCapacity *int `pulumi:"baseOndemandCapacity"`
	// Percentage of on-demand replicas required for workloads
	OndemandReplicaPercentage float64 `pulumi:"ondemandReplicaPercentage"`
	// Selector for choosing workloads for distribution
	Selector *string `pulumi:"selector"`
	// Strategy for choosing spot nodes for cluster
	Strategy *string `pulumi:"strategy"`
}

// OrchestratorConfigDistributionInput is an input type that accepts OrchestratorConfigDistributionArgs and OrchestratorConfigDistributionOutput values.
// You can construct a concrete instance of `OrchestratorConfigDistributionInput` via:
//
//	OrchestratorConfigDistributionArgs{...}
type OrchestratorConfigDistributionInput interface {
	pulumi.Input

	ToOrchestratorConfigDistributionOutput() OrchestratorConfigDistributionOutput
	ToOrchestratorConfigDistributionOutputWithContext(context.Context) OrchestratorConfigDistributionOutput
}

type OrchestratorConfigDistributionArgs struct {
	// Number of minimum ondemand replicas required for workloads
	BaseOndemandCapacity pulumi.IntPtrInput `pulumi:"baseOndemandCapacity"`
	// Percentage of on-demand replicas required for workloads
	OndemandReplicaPercentage pulumi.Float64Input `pulumi:"ondemandReplicaPercentage"`
	// Selector for choosing workloads for distribution
	Selector pulumi.StringPtrInput `pulumi:"selector"`
	// Strategy for choosing spot nodes for cluster
	Strategy pulumi.StringPtrInput `pulumi:"strategy"`
}

func (OrchestratorConfigDistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigDistribution)(nil)).Elem()
}

func (i OrchestratorConfigDistributionArgs) ToOrchestratorConfigDistributionOutput() OrchestratorConfigDistributionOutput {
	return i.ToOrchestratorConfigDistributionOutputWithContext(context.Background())
}

func (i OrchestratorConfigDistributionArgs) ToOrchestratorConfigDistributionOutputWithContext(ctx context.Context) OrchestratorConfigDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigDistributionOutput)
}

func (i OrchestratorConfigDistributionArgs) ToOrchestratorConfigDistributionPtrOutput() OrchestratorConfigDistributionPtrOutput {
	return i.ToOrchestratorConfigDistributionPtrOutputWithContext(context.Background())
}

func (i OrchestratorConfigDistributionArgs) ToOrchestratorConfigDistributionPtrOutputWithContext(ctx context.Context) OrchestratorConfigDistributionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigDistributionOutput).ToOrchestratorConfigDistributionPtrOutputWithContext(ctx)
}

// OrchestratorConfigDistributionPtrInput is an input type that accepts OrchestratorConfigDistributionArgs, OrchestratorConfigDistributionPtr and OrchestratorConfigDistributionPtrOutput values.
// You can construct a concrete instance of `OrchestratorConfigDistributionPtrInput` via:
//
//	        OrchestratorConfigDistributionArgs{...}
//
//	or:
//
//	        nil
type OrchestratorConfigDistributionPtrInput interface {
	pulumi.Input

	ToOrchestratorConfigDistributionPtrOutput() OrchestratorConfigDistributionPtrOutput
	ToOrchestratorConfigDistributionPtrOutputWithContext(context.Context) OrchestratorConfigDistributionPtrOutput
}

type orchestratorConfigDistributionPtrType OrchestratorConfigDistributionArgs

func OrchestratorConfigDistributionPtr(v *OrchestratorConfigDistributionArgs) OrchestratorConfigDistributionPtrInput {
	return (*orchestratorConfigDistributionPtrType)(v)
}

func (*orchestratorConfigDistributionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigDistribution)(nil)).Elem()
}

func (i *orchestratorConfigDistributionPtrType) ToOrchestratorConfigDistributionPtrOutput() OrchestratorConfigDistributionPtrOutput {
	return i.ToOrchestratorConfigDistributionPtrOutputWithContext(context.Background())
}

func (i *orchestratorConfigDistributionPtrType) ToOrchestratorConfigDistributionPtrOutputWithContext(ctx context.Context) OrchestratorConfigDistributionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigDistributionPtrOutput)
}

type OrchestratorConfigDistributionOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigDistribution)(nil)).Elem()
}

func (o OrchestratorConfigDistributionOutput) ToOrchestratorConfigDistributionOutput() OrchestratorConfigDistributionOutput {
	return o
}

func (o OrchestratorConfigDistributionOutput) ToOrchestratorConfigDistributionOutputWithContext(ctx context.Context) OrchestratorConfigDistributionOutput {
	return o
}

func (o OrchestratorConfigDistributionOutput) ToOrchestratorConfigDistributionPtrOutput() OrchestratorConfigDistributionPtrOutput {
	return o.ToOrchestratorConfigDistributionPtrOutputWithContext(context.Background())
}

func (o OrchestratorConfigDistributionOutput) ToOrchestratorConfigDistributionPtrOutputWithContext(ctx context.Context) OrchestratorConfigDistributionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrchestratorConfigDistribution) *OrchestratorConfigDistribution {
		return &v
	}).(OrchestratorConfigDistributionPtrOutput)
}

// Number of minimum ondemand replicas required for workloads
func (o OrchestratorConfigDistributionOutput) BaseOndemandCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrchestratorConfigDistribution) *int { return v.BaseOndemandCapacity }).(pulumi.IntPtrOutput)
}

// Percentage of on-demand replicas required for workloads
func (o OrchestratorConfigDistributionOutput) OndemandReplicaPercentage() pulumi.Float64Output {
	return o.ApplyT(func(v OrchestratorConfigDistribution) float64 { return v.OndemandReplicaPercentage }).(pulumi.Float64Output)
}

// Selector for choosing workloads for distribution
func (o OrchestratorConfigDistributionOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorConfigDistribution) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

// Strategy for choosing spot nodes for cluster
func (o OrchestratorConfigDistributionOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorConfigDistribution) *string { return v.Strategy }).(pulumi.StringPtrOutput)
}

type OrchestratorConfigDistributionPtrOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigDistributionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigDistribution)(nil)).Elem()
}

func (o OrchestratorConfigDistributionPtrOutput) ToOrchestratorConfigDistributionPtrOutput() OrchestratorConfigDistributionPtrOutput {
	return o
}

func (o OrchestratorConfigDistributionPtrOutput) ToOrchestratorConfigDistributionPtrOutputWithContext(ctx context.Context) OrchestratorConfigDistributionPtrOutput {
	return o
}

func (o OrchestratorConfigDistributionPtrOutput) Elem() OrchestratorConfigDistributionOutput {
	return o.ApplyT(func(v *OrchestratorConfigDistribution) OrchestratorConfigDistribution {
		if v != nil {
			return *v
		}
		var ret OrchestratorConfigDistribution
		return ret
	}).(OrchestratorConfigDistributionOutput)
}

// Number of minimum ondemand replicas required for workloads
func (o OrchestratorConfigDistributionPtrOutput) BaseOndemandCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigDistribution) *int {
		if v == nil {
			return nil
		}
		return v.BaseOndemandCapacity
	}).(pulumi.IntPtrOutput)
}

// Percentage of on-demand replicas required for workloads
func (o OrchestratorConfigDistributionPtrOutput) OndemandReplicaPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigDistribution) *float64 {
		if v == nil {
			return nil
		}
		return &v.OndemandReplicaPercentage
	}).(pulumi.Float64PtrOutput)
}

// Selector for choosing workloads for distribution
func (o OrchestratorConfigDistributionPtrOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigDistribution) *string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringPtrOutput)
}

// Strategy for choosing spot nodes for cluster
func (o OrchestratorConfigDistributionPtrOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigDistribution) *string {
		if v == nil {
			return nil
		}
		return v.Strategy
	}).(pulumi.StringPtrOutput)
}

type OrchestratorConfigNodePreferences struct {
	// Reverse fallback interval
	ReverseFallbackInterval *string `pulumi:"reverseFallbackInterval"`
	// TTL for nodes
	Ttl *string `pulumi:"ttl"`
}

// OrchestratorConfigNodePreferencesInput is an input type that accepts OrchestratorConfigNodePreferencesArgs and OrchestratorConfigNodePreferencesOutput values.
// You can construct a concrete instance of `OrchestratorConfigNodePreferencesInput` via:
//
//	OrchestratorConfigNodePreferencesArgs{...}
type OrchestratorConfigNodePreferencesInput interface {
	pulumi.Input

	ToOrchestratorConfigNodePreferencesOutput() OrchestratorConfigNodePreferencesOutput
	ToOrchestratorConfigNodePreferencesOutputWithContext(context.Context) OrchestratorConfigNodePreferencesOutput
}

type OrchestratorConfigNodePreferencesArgs struct {
	// Reverse fallback interval
	ReverseFallbackInterval pulumi.StringPtrInput `pulumi:"reverseFallbackInterval"`
	// TTL for nodes
	Ttl pulumi.StringPtrInput `pulumi:"ttl"`
}

func (OrchestratorConfigNodePreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigNodePreferences)(nil)).Elem()
}

func (i OrchestratorConfigNodePreferencesArgs) ToOrchestratorConfigNodePreferencesOutput() OrchestratorConfigNodePreferencesOutput {
	return i.ToOrchestratorConfigNodePreferencesOutputWithContext(context.Background())
}

func (i OrchestratorConfigNodePreferencesArgs) ToOrchestratorConfigNodePreferencesOutputWithContext(ctx context.Context) OrchestratorConfigNodePreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigNodePreferencesOutput)
}

func (i OrchestratorConfigNodePreferencesArgs) ToOrchestratorConfigNodePreferencesPtrOutput() OrchestratorConfigNodePreferencesPtrOutput {
	return i.ToOrchestratorConfigNodePreferencesPtrOutputWithContext(context.Background())
}

func (i OrchestratorConfigNodePreferencesArgs) ToOrchestratorConfigNodePreferencesPtrOutputWithContext(ctx context.Context) OrchestratorConfigNodePreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigNodePreferencesOutput).ToOrchestratorConfigNodePreferencesPtrOutputWithContext(ctx)
}

// OrchestratorConfigNodePreferencesPtrInput is an input type that accepts OrchestratorConfigNodePreferencesArgs, OrchestratorConfigNodePreferencesPtr and OrchestratorConfigNodePreferencesPtrOutput values.
// You can construct a concrete instance of `OrchestratorConfigNodePreferencesPtrInput` via:
//
//	        OrchestratorConfigNodePreferencesArgs{...}
//
//	or:
//
//	        nil
type OrchestratorConfigNodePreferencesPtrInput interface {
	pulumi.Input

	ToOrchestratorConfigNodePreferencesPtrOutput() OrchestratorConfigNodePreferencesPtrOutput
	ToOrchestratorConfigNodePreferencesPtrOutputWithContext(context.Context) OrchestratorConfigNodePreferencesPtrOutput
}

type orchestratorConfigNodePreferencesPtrType OrchestratorConfigNodePreferencesArgs

func OrchestratorConfigNodePreferencesPtr(v *OrchestratorConfigNodePreferencesArgs) OrchestratorConfigNodePreferencesPtrInput {
	return (*orchestratorConfigNodePreferencesPtrType)(v)
}

func (*orchestratorConfigNodePreferencesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigNodePreferences)(nil)).Elem()
}

func (i *orchestratorConfigNodePreferencesPtrType) ToOrchestratorConfigNodePreferencesPtrOutput() OrchestratorConfigNodePreferencesPtrOutput {
	return i.ToOrchestratorConfigNodePreferencesPtrOutputWithContext(context.Background())
}

func (i *orchestratorConfigNodePreferencesPtrType) ToOrchestratorConfigNodePreferencesPtrOutputWithContext(ctx context.Context) OrchestratorConfigNodePreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigNodePreferencesPtrOutput)
}

type OrchestratorConfigNodePreferencesOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigNodePreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigNodePreferences)(nil)).Elem()
}

func (o OrchestratorConfigNodePreferencesOutput) ToOrchestratorConfigNodePreferencesOutput() OrchestratorConfigNodePreferencesOutput {
	return o
}

func (o OrchestratorConfigNodePreferencesOutput) ToOrchestratorConfigNodePreferencesOutputWithContext(ctx context.Context) OrchestratorConfigNodePreferencesOutput {
	return o
}

func (o OrchestratorConfigNodePreferencesOutput) ToOrchestratorConfigNodePreferencesPtrOutput() OrchestratorConfigNodePreferencesPtrOutput {
	return o.ToOrchestratorConfigNodePreferencesPtrOutputWithContext(context.Background())
}

func (o OrchestratorConfigNodePreferencesOutput) ToOrchestratorConfigNodePreferencesPtrOutputWithContext(ctx context.Context) OrchestratorConfigNodePreferencesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrchestratorConfigNodePreferences) *OrchestratorConfigNodePreferences {
		return &v
	}).(OrchestratorConfigNodePreferencesPtrOutput)
}

// Reverse fallback interval
func (o OrchestratorConfigNodePreferencesOutput) ReverseFallbackInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorConfigNodePreferences) *string { return v.ReverseFallbackInterval }).(pulumi.StringPtrOutput)
}

// TTL for nodes
func (o OrchestratorConfigNodePreferencesOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorConfigNodePreferences) *string { return v.Ttl }).(pulumi.StringPtrOutput)
}

type OrchestratorConfigNodePreferencesPtrOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigNodePreferencesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigNodePreferences)(nil)).Elem()
}

func (o OrchestratorConfigNodePreferencesPtrOutput) ToOrchestratorConfigNodePreferencesPtrOutput() OrchestratorConfigNodePreferencesPtrOutput {
	return o
}

func (o OrchestratorConfigNodePreferencesPtrOutput) ToOrchestratorConfigNodePreferencesPtrOutputWithContext(ctx context.Context) OrchestratorConfigNodePreferencesPtrOutput {
	return o
}

func (o OrchestratorConfigNodePreferencesPtrOutput) Elem() OrchestratorConfigNodePreferencesOutput {
	return o.ApplyT(func(v *OrchestratorConfigNodePreferences) OrchestratorConfigNodePreferences {
		if v != nil {
			return *v
		}
		var ret OrchestratorConfigNodePreferences
		return ret
	}).(OrchestratorConfigNodePreferencesOutput)
}

// Reverse fallback interval
func (o OrchestratorConfigNodePreferencesPtrOutput) ReverseFallbackInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigNodePreferences) *string {
		if v == nil {
			return nil
		}
		return v.ReverseFallbackInterval
	}).(pulumi.StringPtrOutput)
}

// TTL for nodes
func (o OrchestratorConfigNodePreferencesPtrOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigNodePreferences) *string {
		if v == nil {
			return nil
		}
		return v.Ttl
	}).(pulumi.StringPtrOutput)
}

type OrchestratorConfigReplacementSchedule struct {
	// Defines the scope of the replacement schedule
	AppliesTo     OrchestratorConfigReplacementScheduleAppliesTo      `pulumi:"appliesTo"`
	WindowDetails *OrchestratorConfigReplacementScheduleWindowDetails `pulumi:"windowDetails"`
	// Window type for replacement schedule
	WindowType string `pulumi:"windowType"`
}

// OrchestratorConfigReplacementScheduleInput is an input type that accepts OrchestratorConfigReplacementScheduleArgs and OrchestratorConfigReplacementScheduleOutput values.
// You can construct a concrete instance of `OrchestratorConfigReplacementScheduleInput` via:
//
//	OrchestratorConfigReplacementScheduleArgs{...}
type OrchestratorConfigReplacementScheduleInput interface {
	pulumi.Input

	ToOrchestratorConfigReplacementScheduleOutput() OrchestratorConfigReplacementScheduleOutput
	ToOrchestratorConfigReplacementScheduleOutputWithContext(context.Context) OrchestratorConfigReplacementScheduleOutput
}

type OrchestratorConfigReplacementScheduleArgs struct {
	// Defines the scope of the replacement schedule
	AppliesTo     OrchestratorConfigReplacementScheduleAppliesToInput        `pulumi:"appliesTo"`
	WindowDetails OrchestratorConfigReplacementScheduleWindowDetailsPtrInput `pulumi:"windowDetails"`
	// Window type for replacement schedule
	WindowType pulumi.StringInput `pulumi:"windowType"`
}

func (OrchestratorConfigReplacementScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigReplacementSchedule)(nil)).Elem()
}

func (i OrchestratorConfigReplacementScheduleArgs) ToOrchestratorConfigReplacementScheduleOutput() OrchestratorConfigReplacementScheduleOutput {
	return i.ToOrchestratorConfigReplacementScheduleOutputWithContext(context.Background())
}

func (i OrchestratorConfigReplacementScheduleArgs) ToOrchestratorConfigReplacementScheduleOutputWithContext(ctx context.Context) OrchestratorConfigReplacementScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigReplacementScheduleOutput)
}

func (i OrchestratorConfigReplacementScheduleArgs) ToOrchestratorConfigReplacementSchedulePtrOutput() OrchestratorConfigReplacementSchedulePtrOutput {
	return i.ToOrchestratorConfigReplacementSchedulePtrOutputWithContext(context.Background())
}

func (i OrchestratorConfigReplacementScheduleArgs) ToOrchestratorConfigReplacementSchedulePtrOutputWithContext(ctx context.Context) OrchestratorConfigReplacementSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigReplacementScheduleOutput).ToOrchestratorConfigReplacementSchedulePtrOutputWithContext(ctx)
}

// OrchestratorConfigReplacementSchedulePtrInput is an input type that accepts OrchestratorConfigReplacementScheduleArgs, OrchestratorConfigReplacementSchedulePtr and OrchestratorConfigReplacementSchedulePtrOutput values.
// You can construct a concrete instance of `OrchestratorConfigReplacementSchedulePtrInput` via:
//
//	        OrchestratorConfigReplacementScheduleArgs{...}
//
//	or:
//
//	        nil
type OrchestratorConfigReplacementSchedulePtrInput interface {
	pulumi.Input

	ToOrchestratorConfigReplacementSchedulePtrOutput() OrchestratorConfigReplacementSchedulePtrOutput
	ToOrchestratorConfigReplacementSchedulePtrOutputWithContext(context.Context) OrchestratorConfigReplacementSchedulePtrOutput
}

type orchestratorConfigReplacementSchedulePtrType OrchestratorConfigReplacementScheduleArgs

func OrchestratorConfigReplacementSchedulePtr(v *OrchestratorConfigReplacementScheduleArgs) OrchestratorConfigReplacementSchedulePtrInput {
	return (*orchestratorConfigReplacementSchedulePtrType)(v)
}

func (*orchestratorConfigReplacementSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigReplacementSchedule)(nil)).Elem()
}

func (i *orchestratorConfigReplacementSchedulePtrType) ToOrchestratorConfigReplacementSchedulePtrOutput() OrchestratorConfigReplacementSchedulePtrOutput {
	return i.ToOrchestratorConfigReplacementSchedulePtrOutputWithContext(context.Background())
}

func (i *orchestratorConfigReplacementSchedulePtrType) ToOrchestratorConfigReplacementSchedulePtrOutputWithContext(ctx context.Context) OrchestratorConfigReplacementSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigReplacementSchedulePtrOutput)
}

type OrchestratorConfigReplacementScheduleOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigReplacementScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigReplacementSchedule)(nil)).Elem()
}

func (o OrchestratorConfigReplacementScheduleOutput) ToOrchestratorConfigReplacementScheduleOutput() OrchestratorConfigReplacementScheduleOutput {
	return o
}

func (o OrchestratorConfigReplacementScheduleOutput) ToOrchestratorConfigReplacementScheduleOutputWithContext(ctx context.Context) OrchestratorConfigReplacementScheduleOutput {
	return o
}

func (o OrchestratorConfigReplacementScheduleOutput) ToOrchestratorConfigReplacementSchedulePtrOutput() OrchestratorConfigReplacementSchedulePtrOutput {
	return o.ToOrchestratorConfigReplacementSchedulePtrOutputWithContext(context.Background())
}

func (o OrchestratorConfigReplacementScheduleOutput) ToOrchestratorConfigReplacementSchedulePtrOutputWithContext(ctx context.Context) OrchestratorConfigReplacementSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrchestratorConfigReplacementSchedule) *OrchestratorConfigReplacementSchedule {
		return &v
	}).(OrchestratorConfigReplacementSchedulePtrOutput)
}

// Defines the scope of the replacement schedule
func (o OrchestratorConfigReplacementScheduleOutput) AppliesTo() OrchestratorConfigReplacementScheduleAppliesToOutput {
	return o.ApplyT(func(v OrchestratorConfigReplacementSchedule) OrchestratorConfigReplacementScheduleAppliesTo {
		return v.AppliesTo
	}).(OrchestratorConfigReplacementScheduleAppliesToOutput)
}

func (o OrchestratorConfigReplacementScheduleOutput) WindowDetails() OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput {
	return o.ApplyT(func(v OrchestratorConfigReplacementSchedule) *OrchestratorConfigReplacementScheduleWindowDetails {
		return v.WindowDetails
	}).(OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput)
}

// Window type for replacement schedule
func (o OrchestratorConfigReplacementScheduleOutput) WindowType() pulumi.StringOutput {
	return o.ApplyT(func(v OrchestratorConfigReplacementSchedule) string { return v.WindowType }).(pulumi.StringOutput)
}

type OrchestratorConfigReplacementSchedulePtrOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigReplacementSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigReplacementSchedule)(nil)).Elem()
}

func (o OrchestratorConfigReplacementSchedulePtrOutput) ToOrchestratorConfigReplacementSchedulePtrOutput() OrchestratorConfigReplacementSchedulePtrOutput {
	return o
}

func (o OrchestratorConfigReplacementSchedulePtrOutput) ToOrchestratorConfigReplacementSchedulePtrOutputWithContext(ctx context.Context) OrchestratorConfigReplacementSchedulePtrOutput {
	return o
}

func (o OrchestratorConfigReplacementSchedulePtrOutput) Elem() OrchestratorConfigReplacementScheduleOutput {
	return o.ApplyT(func(v *OrchestratorConfigReplacementSchedule) OrchestratorConfigReplacementSchedule {
		if v != nil {
			return *v
		}
		var ret OrchestratorConfigReplacementSchedule
		return ret
	}).(OrchestratorConfigReplacementScheduleOutput)
}

// Defines the scope of the replacement schedule
func (o OrchestratorConfigReplacementSchedulePtrOutput) AppliesTo() OrchestratorConfigReplacementScheduleAppliesToPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigReplacementSchedule) *OrchestratorConfigReplacementScheduleAppliesTo {
		if v == nil {
			return nil
		}
		return &v.AppliesTo
	}).(OrchestratorConfigReplacementScheduleAppliesToPtrOutput)
}

func (o OrchestratorConfigReplacementSchedulePtrOutput) WindowDetails() OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigReplacementSchedule) *OrchestratorConfigReplacementScheduleWindowDetails {
		if v == nil {
			return nil
		}
		return v.WindowDetails
	}).(OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput)
}

// Window type for replacement schedule
func (o OrchestratorConfigReplacementSchedulePtrOutput) WindowType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigReplacementSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.WindowType
	}).(pulumi.StringPtrOutput)
}

type OrchestratorConfigReplacementScheduleAppliesTo struct {
	Consolidation      bool `pulumi:"consolidation"`
	HarnessPodEviction bool `pulumi:"harnessPodEviction"`
	ReverseFallback    bool `pulumi:"reverseFallback"`
}

// OrchestratorConfigReplacementScheduleAppliesToInput is an input type that accepts OrchestratorConfigReplacementScheduleAppliesToArgs and OrchestratorConfigReplacementScheduleAppliesToOutput values.
// You can construct a concrete instance of `OrchestratorConfigReplacementScheduleAppliesToInput` via:
//
//	OrchestratorConfigReplacementScheduleAppliesToArgs{...}
type OrchestratorConfigReplacementScheduleAppliesToInput interface {
	pulumi.Input

	ToOrchestratorConfigReplacementScheduleAppliesToOutput() OrchestratorConfigReplacementScheduleAppliesToOutput
	ToOrchestratorConfigReplacementScheduleAppliesToOutputWithContext(context.Context) OrchestratorConfigReplacementScheduleAppliesToOutput
}

type OrchestratorConfigReplacementScheduleAppliesToArgs struct {
	Consolidation      pulumi.BoolInput `pulumi:"consolidation"`
	HarnessPodEviction pulumi.BoolInput `pulumi:"harnessPodEviction"`
	ReverseFallback    pulumi.BoolInput `pulumi:"reverseFallback"`
}

func (OrchestratorConfigReplacementScheduleAppliesToArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigReplacementScheduleAppliesTo)(nil)).Elem()
}

func (i OrchestratorConfigReplacementScheduleAppliesToArgs) ToOrchestratorConfigReplacementScheduleAppliesToOutput() OrchestratorConfigReplacementScheduleAppliesToOutput {
	return i.ToOrchestratorConfigReplacementScheduleAppliesToOutputWithContext(context.Background())
}

func (i OrchestratorConfigReplacementScheduleAppliesToArgs) ToOrchestratorConfigReplacementScheduleAppliesToOutputWithContext(ctx context.Context) OrchestratorConfigReplacementScheduleAppliesToOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigReplacementScheduleAppliesToOutput)
}

func (i OrchestratorConfigReplacementScheduleAppliesToArgs) ToOrchestratorConfigReplacementScheduleAppliesToPtrOutput() OrchestratorConfigReplacementScheduleAppliesToPtrOutput {
	return i.ToOrchestratorConfigReplacementScheduleAppliesToPtrOutputWithContext(context.Background())
}

func (i OrchestratorConfigReplacementScheduleAppliesToArgs) ToOrchestratorConfigReplacementScheduleAppliesToPtrOutputWithContext(ctx context.Context) OrchestratorConfigReplacementScheduleAppliesToPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigReplacementScheduleAppliesToOutput).ToOrchestratorConfigReplacementScheduleAppliesToPtrOutputWithContext(ctx)
}

// OrchestratorConfigReplacementScheduleAppliesToPtrInput is an input type that accepts OrchestratorConfigReplacementScheduleAppliesToArgs, OrchestratorConfigReplacementScheduleAppliesToPtr and OrchestratorConfigReplacementScheduleAppliesToPtrOutput values.
// You can construct a concrete instance of `OrchestratorConfigReplacementScheduleAppliesToPtrInput` via:
//
//	        OrchestratorConfigReplacementScheduleAppliesToArgs{...}
//
//	or:
//
//	        nil
type OrchestratorConfigReplacementScheduleAppliesToPtrInput interface {
	pulumi.Input

	ToOrchestratorConfigReplacementScheduleAppliesToPtrOutput() OrchestratorConfigReplacementScheduleAppliesToPtrOutput
	ToOrchestratorConfigReplacementScheduleAppliesToPtrOutputWithContext(context.Context) OrchestratorConfigReplacementScheduleAppliesToPtrOutput
}

type orchestratorConfigReplacementScheduleAppliesToPtrType OrchestratorConfigReplacementScheduleAppliesToArgs

func OrchestratorConfigReplacementScheduleAppliesToPtr(v *OrchestratorConfigReplacementScheduleAppliesToArgs) OrchestratorConfigReplacementScheduleAppliesToPtrInput {
	return (*orchestratorConfigReplacementScheduleAppliesToPtrType)(v)
}

func (*orchestratorConfigReplacementScheduleAppliesToPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigReplacementScheduleAppliesTo)(nil)).Elem()
}

func (i *orchestratorConfigReplacementScheduleAppliesToPtrType) ToOrchestratorConfigReplacementScheduleAppliesToPtrOutput() OrchestratorConfigReplacementScheduleAppliesToPtrOutput {
	return i.ToOrchestratorConfigReplacementScheduleAppliesToPtrOutputWithContext(context.Background())
}

func (i *orchestratorConfigReplacementScheduleAppliesToPtrType) ToOrchestratorConfigReplacementScheduleAppliesToPtrOutputWithContext(ctx context.Context) OrchestratorConfigReplacementScheduleAppliesToPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigReplacementScheduleAppliesToPtrOutput)
}

type OrchestratorConfigReplacementScheduleAppliesToOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigReplacementScheduleAppliesToOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigReplacementScheduleAppliesTo)(nil)).Elem()
}

func (o OrchestratorConfigReplacementScheduleAppliesToOutput) ToOrchestratorConfigReplacementScheduleAppliesToOutput() OrchestratorConfigReplacementScheduleAppliesToOutput {
	return o
}

func (o OrchestratorConfigReplacementScheduleAppliesToOutput) ToOrchestratorConfigReplacementScheduleAppliesToOutputWithContext(ctx context.Context) OrchestratorConfigReplacementScheduleAppliesToOutput {
	return o
}

func (o OrchestratorConfigReplacementScheduleAppliesToOutput) ToOrchestratorConfigReplacementScheduleAppliesToPtrOutput() OrchestratorConfigReplacementScheduleAppliesToPtrOutput {
	return o.ToOrchestratorConfigReplacementScheduleAppliesToPtrOutputWithContext(context.Background())
}

func (o OrchestratorConfigReplacementScheduleAppliesToOutput) ToOrchestratorConfigReplacementScheduleAppliesToPtrOutputWithContext(ctx context.Context) OrchestratorConfigReplacementScheduleAppliesToPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrchestratorConfigReplacementScheduleAppliesTo) *OrchestratorConfigReplacementScheduleAppliesTo {
		return &v
	}).(OrchestratorConfigReplacementScheduleAppliesToPtrOutput)
}

func (o OrchestratorConfigReplacementScheduleAppliesToOutput) Consolidation() pulumi.BoolOutput {
	return o.ApplyT(func(v OrchestratorConfigReplacementScheduleAppliesTo) bool { return v.Consolidation }).(pulumi.BoolOutput)
}

func (o OrchestratorConfigReplacementScheduleAppliesToOutput) HarnessPodEviction() pulumi.BoolOutput {
	return o.ApplyT(func(v OrchestratorConfigReplacementScheduleAppliesTo) bool { return v.HarnessPodEviction }).(pulumi.BoolOutput)
}

func (o OrchestratorConfigReplacementScheduleAppliesToOutput) ReverseFallback() pulumi.BoolOutput {
	return o.ApplyT(func(v OrchestratorConfigReplacementScheduleAppliesTo) bool { return v.ReverseFallback }).(pulumi.BoolOutput)
}

type OrchestratorConfigReplacementScheduleAppliesToPtrOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigReplacementScheduleAppliesToPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigReplacementScheduleAppliesTo)(nil)).Elem()
}

func (o OrchestratorConfigReplacementScheduleAppliesToPtrOutput) ToOrchestratorConfigReplacementScheduleAppliesToPtrOutput() OrchestratorConfigReplacementScheduleAppliesToPtrOutput {
	return o
}

func (o OrchestratorConfigReplacementScheduleAppliesToPtrOutput) ToOrchestratorConfigReplacementScheduleAppliesToPtrOutputWithContext(ctx context.Context) OrchestratorConfigReplacementScheduleAppliesToPtrOutput {
	return o
}

func (o OrchestratorConfigReplacementScheduleAppliesToPtrOutput) Elem() OrchestratorConfigReplacementScheduleAppliesToOutput {
	return o.ApplyT(func(v *OrchestratorConfigReplacementScheduleAppliesTo) OrchestratorConfigReplacementScheduleAppliesTo {
		if v != nil {
			return *v
		}
		var ret OrchestratorConfigReplacementScheduleAppliesTo
		return ret
	}).(OrchestratorConfigReplacementScheduleAppliesToOutput)
}

func (o OrchestratorConfigReplacementScheduleAppliesToPtrOutput) Consolidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigReplacementScheduleAppliesTo) *bool {
		if v == nil {
			return nil
		}
		return &v.Consolidation
	}).(pulumi.BoolPtrOutput)
}

func (o OrchestratorConfigReplacementScheduleAppliesToPtrOutput) HarnessPodEviction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigReplacementScheduleAppliesTo) *bool {
		if v == nil {
			return nil
		}
		return &v.HarnessPodEviction
	}).(pulumi.BoolPtrOutput)
}

func (o OrchestratorConfigReplacementScheduleAppliesToPtrOutput) ReverseFallback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigReplacementScheduleAppliesTo) *bool {
		if v == nil {
			return nil
		}
		return &v.ReverseFallback
	}).(pulumi.BoolPtrOutput)
}

type OrchestratorConfigReplacementScheduleWindowDetails struct {
	AllDay *bool `pulumi:"allDay"`
	// List of days on which schedule need to be active. Valid values are SUN, MON, TUE, WED, THU, FRI and SAT.
	Days []string `pulumi:"days"`
	// End time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
	EndTime *string `pulumi:"endTime"`
	// Start time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
	StartTime *string `pulumi:"startTime"`
	// Time zone in which the schedule needs to be executed. Example Valid values: UTC, America/New*York, Europe/London, Asia/Kolkata, Asia/Tokyo, Asia/Hong*Kong, Asia/Singapore, Australia/Melbourne and Australia/Sydney.
	TimeZone string `pulumi:"timeZone"`
}

// OrchestratorConfigReplacementScheduleWindowDetailsInput is an input type that accepts OrchestratorConfigReplacementScheduleWindowDetailsArgs and OrchestratorConfigReplacementScheduleWindowDetailsOutput values.
// You can construct a concrete instance of `OrchestratorConfigReplacementScheduleWindowDetailsInput` via:
//
//	OrchestratorConfigReplacementScheduleWindowDetailsArgs{...}
type OrchestratorConfigReplacementScheduleWindowDetailsInput interface {
	pulumi.Input

	ToOrchestratorConfigReplacementScheduleWindowDetailsOutput() OrchestratorConfigReplacementScheduleWindowDetailsOutput
	ToOrchestratorConfigReplacementScheduleWindowDetailsOutputWithContext(context.Context) OrchestratorConfigReplacementScheduleWindowDetailsOutput
}

type OrchestratorConfigReplacementScheduleWindowDetailsArgs struct {
	AllDay pulumi.BoolPtrInput `pulumi:"allDay"`
	// List of days on which schedule need to be active. Valid values are SUN, MON, TUE, WED, THU, FRI and SAT.
	Days pulumi.StringArrayInput `pulumi:"days"`
	// End time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Start time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Time zone in which the schedule needs to be executed. Example Valid values: UTC, America/New*York, Europe/London, Asia/Kolkata, Asia/Tokyo, Asia/Hong*Kong, Asia/Singapore, Australia/Melbourne and Australia/Sydney.
	TimeZone pulumi.StringInput `pulumi:"timeZone"`
}

func (OrchestratorConfigReplacementScheduleWindowDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigReplacementScheduleWindowDetails)(nil)).Elem()
}

func (i OrchestratorConfigReplacementScheduleWindowDetailsArgs) ToOrchestratorConfigReplacementScheduleWindowDetailsOutput() OrchestratorConfigReplacementScheduleWindowDetailsOutput {
	return i.ToOrchestratorConfigReplacementScheduleWindowDetailsOutputWithContext(context.Background())
}

func (i OrchestratorConfigReplacementScheduleWindowDetailsArgs) ToOrchestratorConfigReplacementScheduleWindowDetailsOutputWithContext(ctx context.Context) OrchestratorConfigReplacementScheduleWindowDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigReplacementScheduleWindowDetailsOutput)
}

func (i OrchestratorConfigReplacementScheduleWindowDetailsArgs) ToOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput() OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput {
	return i.ToOrchestratorConfigReplacementScheduleWindowDetailsPtrOutputWithContext(context.Background())
}

func (i OrchestratorConfigReplacementScheduleWindowDetailsArgs) ToOrchestratorConfigReplacementScheduleWindowDetailsPtrOutputWithContext(ctx context.Context) OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigReplacementScheduleWindowDetailsOutput).ToOrchestratorConfigReplacementScheduleWindowDetailsPtrOutputWithContext(ctx)
}

// OrchestratorConfigReplacementScheduleWindowDetailsPtrInput is an input type that accepts OrchestratorConfigReplacementScheduleWindowDetailsArgs, OrchestratorConfigReplacementScheduleWindowDetailsPtr and OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput values.
// You can construct a concrete instance of `OrchestratorConfigReplacementScheduleWindowDetailsPtrInput` via:
//
//	        OrchestratorConfigReplacementScheduleWindowDetailsArgs{...}
//
//	or:
//
//	        nil
type OrchestratorConfigReplacementScheduleWindowDetailsPtrInput interface {
	pulumi.Input

	ToOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput() OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput
	ToOrchestratorConfigReplacementScheduleWindowDetailsPtrOutputWithContext(context.Context) OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput
}

type orchestratorConfigReplacementScheduleWindowDetailsPtrType OrchestratorConfigReplacementScheduleWindowDetailsArgs

func OrchestratorConfigReplacementScheduleWindowDetailsPtr(v *OrchestratorConfigReplacementScheduleWindowDetailsArgs) OrchestratorConfigReplacementScheduleWindowDetailsPtrInput {
	return (*orchestratorConfigReplacementScheduleWindowDetailsPtrType)(v)
}

func (*orchestratorConfigReplacementScheduleWindowDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigReplacementScheduleWindowDetails)(nil)).Elem()
}

func (i *orchestratorConfigReplacementScheduleWindowDetailsPtrType) ToOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput() OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput {
	return i.ToOrchestratorConfigReplacementScheduleWindowDetailsPtrOutputWithContext(context.Background())
}

func (i *orchestratorConfigReplacementScheduleWindowDetailsPtrType) ToOrchestratorConfigReplacementScheduleWindowDetailsPtrOutputWithContext(ctx context.Context) OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput)
}

type OrchestratorConfigReplacementScheduleWindowDetailsOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigReplacementScheduleWindowDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorConfigReplacementScheduleWindowDetails)(nil)).Elem()
}

func (o OrchestratorConfigReplacementScheduleWindowDetailsOutput) ToOrchestratorConfigReplacementScheduleWindowDetailsOutput() OrchestratorConfigReplacementScheduleWindowDetailsOutput {
	return o
}

func (o OrchestratorConfigReplacementScheduleWindowDetailsOutput) ToOrchestratorConfigReplacementScheduleWindowDetailsOutputWithContext(ctx context.Context) OrchestratorConfigReplacementScheduleWindowDetailsOutput {
	return o
}

func (o OrchestratorConfigReplacementScheduleWindowDetailsOutput) ToOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput() OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput {
	return o.ToOrchestratorConfigReplacementScheduleWindowDetailsPtrOutputWithContext(context.Background())
}

func (o OrchestratorConfigReplacementScheduleWindowDetailsOutput) ToOrchestratorConfigReplacementScheduleWindowDetailsPtrOutputWithContext(ctx context.Context) OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrchestratorConfigReplacementScheduleWindowDetails) *OrchestratorConfigReplacementScheduleWindowDetails {
		return &v
	}).(OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput)
}

func (o OrchestratorConfigReplacementScheduleWindowDetailsOutput) AllDay() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OrchestratorConfigReplacementScheduleWindowDetails) *bool { return v.AllDay }).(pulumi.BoolPtrOutput)
}

// List of days on which schedule need to be active. Valid values are SUN, MON, TUE, WED, THU, FRI and SAT.
func (o OrchestratorConfigReplacementScheduleWindowDetailsOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OrchestratorConfigReplacementScheduleWindowDetails) []string { return v.Days }).(pulumi.StringArrayOutput)
}

// End time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
func (o OrchestratorConfigReplacementScheduleWindowDetailsOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorConfigReplacementScheduleWindowDetails) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Start time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
func (o OrchestratorConfigReplacementScheduleWindowDetailsOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorConfigReplacementScheduleWindowDetails) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Time zone in which the schedule needs to be executed. Example Valid values: UTC, America/New*York, Europe/London, Asia/Kolkata, Asia/Tokyo, Asia/Hong*Kong, Asia/Singapore, Australia/Melbourne and Australia/Sydney.
func (o OrchestratorConfigReplacementScheduleWindowDetailsOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v OrchestratorConfigReplacementScheduleWindowDetails) string { return v.TimeZone }).(pulumi.StringOutput)
}

type OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput struct{ *pulumi.OutputState }

func (OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorConfigReplacementScheduleWindowDetails)(nil)).Elem()
}

func (o OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput) ToOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput() OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput {
	return o
}

func (o OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput) ToOrchestratorConfigReplacementScheduleWindowDetailsPtrOutputWithContext(ctx context.Context) OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput {
	return o
}

func (o OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput) Elem() OrchestratorConfigReplacementScheduleWindowDetailsOutput {
	return o.ApplyT(func(v *OrchestratorConfigReplacementScheduleWindowDetails) OrchestratorConfigReplacementScheduleWindowDetails {
		if v != nil {
			return *v
		}
		var ret OrchestratorConfigReplacementScheduleWindowDetails
		return ret
	}).(OrchestratorConfigReplacementScheduleWindowDetailsOutput)
}

func (o OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput) AllDay() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigReplacementScheduleWindowDetails) *bool {
		if v == nil {
			return nil
		}
		return v.AllDay
	}).(pulumi.BoolPtrOutput)
}

// List of days on which schedule need to be active. Valid values are SUN, MON, TUE, WED, THU, FRI and SAT.
func (o OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrchestratorConfigReplacementScheduleWindowDetails) []string {
		if v == nil {
			return nil
		}
		return v.Days
	}).(pulumi.StringArrayOutput)
}

// End time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
func (o OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigReplacementScheduleWindowDetails) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Start time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
func (o OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigReplacementScheduleWindowDetails) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Time zone in which the schedule needs to be executed. Example Valid values: UTC, America/New*York, Europe/London, Asia/Kolkata, Asia/Tokyo, Asia/Hong*Kong, Asia/Singapore, Australia/Melbourne and Australia/Sydney.
func (o OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorConfigReplacementScheduleWindowDetails) *string {
		if v == nil {
			return nil
		}
		return &v.TimeZone
	}).(pulumi.StringPtrOutput)
}

type GetOrchestratorConfigBinpacking struct {
	// Harness disruption configuration
	Disruption *GetOrchestratorConfigBinpackingDisruption `pulumi:"disruption"`
	// Harness Pod Evictor Configuration
	PodEviction *GetOrchestratorConfigBinpackingPodEviction `pulumi:"podEviction"`
}

// GetOrchestratorConfigBinpackingInput is an input type that accepts GetOrchestratorConfigBinpackingArgs and GetOrchestratorConfigBinpackingOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigBinpackingInput` via:
//
//	GetOrchestratorConfigBinpackingArgs{...}
type GetOrchestratorConfigBinpackingInput interface {
	pulumi.Input

	ToGetOrchestratorConfigBinpackingOutput() GetOrchestratorConfigBinpackingOutput
	ToGetOrchestratorConfigBinpackingOutputWithContext(context.Context) GetOrchestratorConfigBinpackingOutput
}

type GetOrchestratorConfigBinpackingArgs struct {
	// Harness disruption configuration
	Disruption GetOrchestratorConfigBinpackingDisruptionPtrInput `pulumi:"disruption"`
	// Harness Pod Evictor Configuration
	PodEviction GetOrchestratorConfigBinpackingPodEvictionPtrInput `pulumi:"podEviction"`
}

func (GetOrchestratorConfigBinpackingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigBinpacking)(nil)).Elem()
}

func (i GetOrchestratorConfigBinpackingArgs) ToGetOrchestratorConfigBinpackingOutput() GetOrchestratorConfigBinpackingOutput {
	return i.ToGetOrchestratorConfigBinpackingOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigBinpackingArgs) ToGetOrchestratorConfigBinpackingOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigBinpackingOutput)
}

func (i GetOrchestratorConfigBinpackingArgs) ToGetOrchestratorConfigBinpackingPtrOutput() GetOrchestratorConfigBinpackingPtrOutput {
	return i.ToGetOrchestratorConfigBinpackingPtrOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigBinpackingArgs) ToGetOrchestratorConfigBinpackingPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigBinpackingOutput).ToGetOrchestratorConfigBinpackingPtrOutputWithContext(ctx)
}

// GetOrchestratorConfigBinpackingPtrInput is an input type that accepts GetOrchestratorConfigBinpackingArgs, GetOrchestratorConfigBinpackingPtr and GetOrchestratorConfigBinpackingPtrOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigBinpackingPtrInput` via:
//
//	        GetOrchestratorConfigBinpackingArgs{...}
//
//	or:
//
//	        nil
type GetOrchestratorConfigBinpackingPtrInput interface {
	pulumi.Input

	ToGetOrchestratorConfigBinpackingPtrOutput() GetOrchestratorConfigBinpackingPtrOutput
	ToGetOrchestratorConfigBinpackingPtrOutputWithContext(context.Context) GetOrchestratorConfigBinpackingPtrOutput
}

type getOrchestratorConfigBinpackingPtrType GetOrchestratorConfigBinpackingArgs

func GetOrchestratorConfigBinpackingPtr(v *GetOrchestratorConfigBinpackingArgs) GetOrchestratorConfigBinpackingPtrInput {
	return (*getOrchestratorConfigBinpackingPtrType)(v)
}

func (*getOrchestratorConfigBinpackingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigBinpacking)(nil)).Elem()
}

func (i *getOrchestratorConfigBinpackingPtrType) ToGetOrchestratorConfigBinpackingPtrOutput() GetOrchestratorConfigBinpackingPtrOutput {
	return i.ToGetOrchestratorConfigBinpackingPtrOutputWithContext(context.Background())
}

func (i *getOrchestratorConfigBinpackingPtrType) ToGetOrchestratorConfigBinpackingPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigBinpackingPtrOutput)
}

type GetOrchestratorConfigBinpackingOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigBinpackingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigBinpacking)(nil)).Elem()
}

func (o GetOrchestratorConfigBinpackingOutput) ToGetOrchestratorConfigBinpackingOutput() GetOrchestratorConfigBinpackingOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingOutput) ToGetOrchestratorConfigBinpackingOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingOutput) ToGetOrchestratorConfigBinpackingPtrOutput() GetOrchestratorConfigBinpackingPtrOutput {
	return o.ToGetOrchestratorConfigBinpackingPtrOutputWithContext(context.Background())
}

func (o GetOrchestratorConfigBinpackingOutput) ToGetOrchestratorConfigBinpackingPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetOrchestratorConfigBinpacking) *GetOrchestratorConfigBinpacking {
		return &v
	}).(GetOrchestratorConfigBinpackingPtrOutput)
}

// Harness disruption configuration
func (o GetOrchestratorConfigBinpackingOutput) Disruption() GetOrchestratorConfigBinpackingDisruptionPtrOutput {
	return o.ApplyT(func(v GetOrchestratorConfigBinpacking) *GetOrchestratorConfigBinpackingDisruption {
		return v.Disruption
	}).(GetOrchestratorConfigBinpackingDisruptionPtrOutput)
}

// Harness Pod Evictor Configuration
func (o GetOrchestratorConfigBinpackingOutput) PodEviction() GetOrchestratorConfigBinpackingPodEvictionPtrOutput {
	return o.ApplyT(func(v GetOrchestratorConfigBinpacking) *GetOrchestratorConfigBinpackingPodEviction {
		return v.PodEviction
	}).(GetOrchestratorConfigBinpackingPodEvictionPtrOutput)
}

type GetOrchestratorConfigBinpackingPtrOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigBinpackingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigBinpacking)(nil)).Elem()
}

func (o GetOrchestratorConfigBinpackingPtrOutput) ToGetOrchestratorConfigBinpackingPtrOutput() GetOrchestratorConfigBinpackingPtrOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingPtrOutput) ToGetOrchestratorConfigBinpackingPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingPtrOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingPtrOutput) Elem() GetOrchestratorConfigBinpackingOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigBinpacking) GetOrchestratorConfigBinpacking {
		if v != nil {
			return *v
		}
		var ret GetOrchestratorConfigBinpacking
		return ret
	}).(GetOrchestratorConfigBinpackingOutput)
}

// Harness disruption configuration
func (o GetOrchestratorConfigBinpackingPtrOutput) Disruption() GetOrchestratorConfigBinpackingDisruptionPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigBinpacking) *GetOrchestratorConfigBinpackingDisruption {
		if v == nil {
			return nil
		}
		return v.Disruption
	}).(GetOrchestratorConfigBinpackingDisruptionPtrOutput)
}

// Harness Pod Evictor Configuration
func (o GetOrchestratorConfigBinpackingPtrOutput) PodEviction() GetOrchestratorConfigBinpackingPodEvictionPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigBinpacking) *GetOrchestratorConfigBinpackingPodEviction {
		if v == nil {
			return nil
		}
		return v.PodEviction
	}).(GetOrchestratorConfigBinpackingPodEvictionPtrOutput)
}

type GetOrchestratorConfigBinpackingDisruption struct {
	// Budgets for disruption
	Budgets []GetOrchestratorConfigBinpackingDisruptionBudget `pulumi:"budgets"`
	// Criteria for considering a nodes for disruption
	Criteria *string `pulumi:"criteria"`
	// Deletion delay
	Delay *string `pulumi:"delay"`
}

// GetOrchestratorConfigBinpackingDisruptionInput is an input type that accepts GetOrchestratorConfigBinpackingDisruptionArgs and GetOrchestratorConfigBinpackingDisruptionOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigBinpackingDisruptionInput` via:
//
//	GetOrchestratorConfigBinpackingDisruptionArgs{...}
type GetOrchestratorConfigBinpackingDisruptionInput interface {
	pulumi.Input

	ToGetOrchestratorConfigBinpackingDisruptionOutput() GetOrchestratorConfigBinpackingDisruptionOutput
	ToGetOrchestratorConfigBinpackingDisruptionOutputWithContext(context.Context) GetOrchestratorConfigBinpackingDisruptionOutput
}

type GetOrchestratorConfigBinpackingDisruptionArgs struct {
	// Budgets for disruption
	Budgets GetOrchestratorConfigBinpackingDisruptionBudgetArrayInput `pulumi:"budgets"`
	// Criteria for considering a nodes for disruption
	Criteria pulumi.StringPtrInput `pulumi:"criteria"`
	// Deletion delay
	Delay pulumi.StringPtrInput `pulumi:"delay"`
}

func (GetOrchestratorConfigBinpackingDisruptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigBinpackingDisruption)(nil)).Elem()
}

func (i GetOrchestratorConfigBinpackingDisruptionArgs) ToGetOrchestratorConfigBinpackingDisruptionOutput() GetOrchestratorConfigBinpackingDisruptionOutput {
	return i.ToGetOrchestratorConfigBinpackingDisruptionOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigBinpackingDisruptionArgs) ToGetOrchestratorConfigBinpackingDisruptionOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingDisruptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigBinpackingDisruptionOutput)
}

func (i GetOrchestratorConfigBinpackingDisruptionArgs) ToGetOrchestratorConfigBinpackingDisruptionPtrOutput() GetOrchestratorConfigBinpackingDisruptionPtrOutput {
	return i.ToGetOrchestratorConfigBinpackingDisruptionPtrOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigBinpackingDisruptionArgs) ToGetOrchestratorConfigBinpackingDisruptionPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingDisruptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigBinpackingDisruptionOutput).ToGetOrchestratorConfigBinpackingDisruptionPtrOutputWithContext(ctx)
}

// GetOrchestratorConfigBinpackingDisruptionPtrInput is an input type that accepts GetOrchestratorConfigBinpackingDisruptionArgs, GetOrchestratorConfigBinpackingDisruptionPtr and GetOrchestratorConfigBinpackingDisruptionPtrOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigBinpackingDisruptionPtrInput` via:
//
//	        GetOrchestratorConfigBinpackingDisruptionArgs{...}
//
//	or:
//
//	        nil
type GetOrchestratorConfigBinpackingDisruptionPtrInput interface {
	pulumi.Input

	ToGetOrchestratorConfigBinpackingDisruptionPtrOutput() GetOrchestratorConfigBinpackingDisruptionPtrOutput
	ToGetOrchestratorConfigBinpackingDisruptionPtrOutputWithContext(context.Context) GetOrchestratorConfigBinpackingDisruptionPtrOutput
}

type getOrchestratorConfigBinpackingDisruptionPtrType GetOrchestratorConfigBinpackingDisruptionArgs

func GetOrchestratorConfigBinpackingDisruptionPtr(v *GetOrchestratorConfigBinpackingDisruptionArgs) GetOrchestratorConfigBinpackingDisruptionPtrInput {
	return (*getOrchestratorConfigBinpackingDisruptionPtrType)(v)
}

func (*getOrchestratorConfigBinpackingDisruptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigBinpackingDisruption)(nil)).Elem()
}

func (i *getOrchestratorConfigBinpackingDisruptionPtrType) ToGetOrchestratorConfigBinpackingDisruptionPtrOutput() GetOrchestratorConfigBinpackingDisruptionPtrOutput {
	return i.ToGetOrchestratorConfigBinpackingDisruptionPtrOutputWithContext(context.Background())
}

func (i *getOrchestratorConfigBinpackingDisruptionPtrType) ToGetOrchestratorConfigBinpackingDisruptionPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingDisruptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigBinpackingDisruptionPtrOutput)
}

type GetOrchestratorConfigBinpackingDisruptionOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigBinpackingDisruptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigBinpackingDisruption)(nil)).Elem()
}

func (o GetOrchestratorConfigBinpackingDisruptionOutput) ToGetOrchestratorConfigBinpackingDisruptionOutput() GetOrchestratorConfigBinpackingDisruptionOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingDisruptionOutput) ToGetOrchestratorConfigBinpackingDisruptionOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingDisruptionOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingDisruptionOutput) ToGetOrchestratorConfigBinpackingDisruptionPtrOutput() GetOrchestratorConfigBinpackingDisruptionPtrOutput {
	return o.ToGetOrchestratorConfigBinpackingDisruptionPtrOutputWithContext(context.Background())
}

func (o GetOrchestratorConfigBinpackingDisruptionOutput) ToGetOrchestratorConfigBinpackingDisruptionPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingDisruptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetOrchestratorConfigBinpackingDisruption) *GetOrchestratorConfigBinpackingDisruption {
		return &v
	}).(GetOrchestratorConfigBinpackingDisruptionPtrOutput)
}

// Budgets for disruption
func (o GetOrchestratorConfigBinpackingDisruptionOutput) Budgets() GetOrchestratorConfigBinpackingDisruptionBudgetArrayOutput {
	return o.ApplyT(func(v GetOrchestratorConfigBinpackingDisruption) []GetOrchestratorConfigBinpackingDisruptionBudget {
		return v.Budgets
	}).(GetOrchestratorConfigBinpackingDisruptionBudgetArrayOutput)
}

// Criteria for considering a nodes for disruption
func (o GetOrchestratorConfigBinpackingDisruptionOutput) Criteria() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOrchestratorConfigBinpackingDisruption) *string { return v.Criteria }).(pulumi.StringPtrOutput)
}

// Deletion delay
func (o GetOrchestratorConfigBinpackingDisruptionOutput) Delay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOrchestratorConfigBinpackingDisruption) *string { return v.Delay }).(pulumi.StringPtrOutput)
}

type GetOrchestratorConfigBinpackingDisruptionPtrOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigBinpackingDisruptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigBinpackingDisruption)(nil)).Elem()
}

func (o GetOrchestratorConfigBinpackingDisruptionPtrOutput) ToGetOrchestratorConfigBinpackingDisruptionPtrOutput() GetOrchestratorConfigBinpackingDisruptionPtrOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingDisruptionPtrOutput) ToGetOrchestratorConfigBinpackingDisruptionPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingDisruptionPtrOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingDisruptionPtrOutput) Elem() GetOrchestratorConfigBinpackingDisruptionOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigBinpackingDisruption) GetOrchestratorConfigBinpackingDisruption {
		if v != nil {
			return *v
		}
		var ret GetOrchestratorConfigBinpackingDisruption
		return ret
	}).(GetOrchestratorConfigBinpackingDisruptionOutput)
}

// Budgets for disruption
func (o GetOrchestratorConfigBinpackingDisruptionPtrOutput) Budgets() GetOrchestratorConfigBinpackingDisruptionBudgetArrayOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigBinpackingDisruption) []GetOrchestratorConfigBinpackingDisruptionBudget {
		if v == nil {
			return nil
		}
		return v.Budgets
	}).(GetOrchestratorConfigBinpackingDisruptionBudgetArrayOutput)
}

// Criteria for considering a nodes for disruption
func (o GetOrchestratorConfigBinpackingDisruptionPtrOutput) Criteria() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigBinpackingDisruption) *string {
		if v == nil {
			return nil
		}
		return v.Criteria
	}).(pulumi.StringPtrOutput)
}

// Deletion delay
func (o GetOrchestratorConfigBinpackingDisruptionPtrOutput) Delay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigBinpackingDisruption) *string {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(pulumi.StringPtrOutput)
}

type GetOrchestratorConfigBinpackingDisruptionBudget struct {
	// Number or percentage of Nodes to consider for disruption
	Nodes string `pulumi:"nodes"`
	// Reasons for disruption
	Reasons []string `pulumi:"reasons"`
	// Schedule for disruption budget
	Schedule *GetOrchestratorConfigBinpackingDisruptionBudgetSchedule `pulumi:"schedule"`
}

// GetOrchestratorConfigBinpackingDisruptionBudgetInput is an input type that accepts GetOrchestratorConfigBinpackingDisruptionBudgetArgs and GetOrchestratorConfigBinpackingDisruptionBudgetOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigBinpackingDisruptionBudgetInput` via:
//
//	GetOrchestratorConfigBinpackingDisruptionBudgetArgs{...}
type GetOrchestratorConfigBinpackingDisruptionBudgetInput interface {
	pulumi.Input

	ToGetOrchestratorConfigBinpackingDisruptionBudgetOutput() GetOrchestratorConfigBinpackingDisruptionBudgetOutput
	ToGetOrchestratorConfigBinpackingDisruptionBudgetOutputWithContext(context.Context) GetOrchestratorConfigBinpackingDisruptionBudgetOutput
}

type GetOrchestratorConfigBinpackingDisruptionBudgetArgs struct {
	// Number or percentage of Nodes to consider for disruption
	Nodes pulumi.StringInput `pulumi:"nodes"`
	// Reasons for disruption
	Reasons pulumi.StringArrayInput `pulumi:"reasons"`
	// Schedule for disruption budget
	Schedule GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrInput `pulumi:"schedule"`
}

func (GetOrchestratorConfigBinpackingDisruptionBudgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigBinpackingDisruptionBudget)(nil)).Elem()
}

func (i GetOrchestratorConfigBinpackingDisruptionBudgetArgs) ToGetOrchestratorConfigBinpackingDisruptionBudgetOutput() GetOrchestratorConfigBinpackingDisruptionBudgetOutput {
	return i.ToGetOrchestratorConfigBinpackingDisruptionBudgetOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigBinpackingDisruptionBudgetArgs) ToGetOrchestratorConfigBinpackingDisruptionBudgetOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingDisruptionBudgetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigBinpackingDisruptionBudgetOutput)
}

// GetOrchestratorConfigBinpackingDisruptionBudgetArrayInput is an input type that accepts GetOrchestratorConfigBinpackingDisruptionBudgetArray and GetOrchestratorConfigBinpackingDisruptionBudgetArrayOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigBinpackingDisruptionBudgetArrayInput` via:
//
//	GetOrchestratorConfigBinpackingDisruptionBudgetArray{ GetOrchestratorConfigBinpackingDisruptionBudgetArgs{...} }
type GetOrchestratorConfigBinpackingDisruptionBudgetArrayInput interface {
	pulumi.Input

	ToGetOrchestratorConfigBinpackingDisruptionBudgetArrayOutput() GetOrchestratorConfigBinpackingDisruptionBudgetArrayOutput
	ToGetOrchestratorConfigBinpackingDisruptionBudgetArrayOutputWithContext(context.Context) GetOrchestratorConfigBinpackingDisruptionBudgetArrayOutput
}

type GetOrchestratorConfigBinpackingDisruptionBudgetArray []GetOrchestratorConfigBinpackingDisruptionBudgetInput

func (GetOrchestratorConfigBinpackingDisruptionBudgetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrchestratorConfigBinpackingDisruptionBudget)(nil)).Elem()
}

func (i GetOrchestratorConfigBinpackingDisruptionBudgetArray) ToGetOrchestratorConfigBinpackingDisruptionBudgetArrayOutput() GetOrchestratorConfigBinpackingDisruptionBudgetArrayOutput {
	return i.ToGetOrchestratorConfigBinpackingDisruptionBudgetArrayOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigBinpackingDisruptionBudgetArray) ToGetOrchestratorConfigBinpackingDisruptionBudgetArrayOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingDisruptionBudgetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigBinpackingDisruptionBudgetArrayOutput)
}

type GetOrchestratorConfigBinpackingDisruptionBudgetOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigBinpackingDisruptionBudgetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigBinpackingDisruptionBudget)(nil)).Elem()
}

func (o GetOrchestratorConfigBinpackingDisruptionBudgetOutput) ToGetOrchestratorConfigBinpackingDisruptionBudgetOutput() GetOrchestratorConfigBinpackingDisruptionBudgetOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingDisruptionBudgetOutput) ToGetOrchestratorConfigBinpackingDisruptionBudgetOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingDisruptionBudgetOutput {
	return o
}

// Number or percentage of Nodes to consider for disruption
func (o GetOrchestratorConfigBinpackingDisruptionBudgetOutput) Nodes() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrchestratorConfigBinpackingDisruptionBudget) string { return v.Nodes }).(pulumi.StringOutput)
}

// Reasons for disruption
func (o GetOrchestratorConfigBinpackingDisruptionBudgetOutput) Reasons() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetOrchestratorConfigBinpackingDisruptionBudget) []string { return v.Reasons }).(pulumi.StringArrayOutput)
}

// Schedule for disruption budget
func (o GetOrchestratorConfigBinpackingDisruptionBudgetOutput) Schedule() GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput {
	return o.ApplyT(func(v GetOrchestratorConfigBinpackingDisruptionBudget) *GetOrchestratorConfigBinpackingDisruptionBudgetSchedule {
		return v.Schedule
	}).(GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput)
}

type GetOrchestratorConfigBinpackingDisruptionBudgetArrayOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigBinpackingDisruptionBudgetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrchestratorConfigBinpackingDisruptionBudget)(nil)).Elem()
}

func (o GetOrchestratorConfigBinpackingDisruptionBudgetArrayOutput) ToGetOrchestratorConfigBinpackingDisruptionBudgetArrayOutput() GetOrchestratorConfigBinpackingDisruptionBudgetArrayOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingDisruptionBudgetArrayOutput) ToGetOrchestratorConfigBinpackingDisruptionBudgetArrayOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingDisruptionBudgetArrayOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingDisruptionBudgetArrayOutput) Index(i pulumi.IntInput) GetOrchestratorConfigBinpackingDisruptionBudgetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOrchestratorConfigBinpackingDisruptionBudget {
		return vs[0].([]GetOrchestratorConfigBinpackingDisruptionBudget)[vs[1].(int)]
	}).(GetOrchestratorConfigBinpackingDisruptionBudgetOutput)
}

type GetOrchestratorConfigBinpackingDisruptionBudgetSchedule struct {
	// Duration for disruption budget
	Duration string `pulumi:"duration"`
	// Frequency for disruption budget
	Frequency string `pulumi:"frequency"`
}

// GetOrchestratorConfigBinpackingDisruptionBudgetScheduleInput is an input type that accepts GetOrchestratorConfigBinpackingDisruptionBudgetScheduleArgs and GetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigBinpackingDisruptionBudgetScheduleInput` via:
//
//	GetOrchestratorConfigBinpackingDisruptionBudgetScheduleArgs{...}
type GetOrchestratorConfigBinpackingDisruptionBudgetScheduleInput interface {
	pulumi.Input

	ToGetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput() GetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput
	ToGetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutputWithContext(context.Context) GetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput
}

type GetOrchestratorConfigBinpackingDisruptionBudgetScheduleArgs struct {
	// Duration for disruption budget
	Duration pulumi.StringInput `pulumi:"duration"`
	// Frequency for disruption budget
	Frequency pulumi.StringInput `pulumi:"frequency"`
}

func (GetOrchestratorConfigBinpackingDisruptionBudgetScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigBinpackingDisruptionBudgetSchedule)(nil)).Elem()
}

func (i GetOrchestratorConfigBinpackingDisruptionBudgetScheduleArgs) ToGetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput() GetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput {
	return i.ToGetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigBinpackingDisruptionBudgetScheduleArgs) ToGetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput)
}

func (i GetOrchestratorConfigBinpackingDisruptionBudgetScheduleArgs) ToGetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput() GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput {
	return i.ToGetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigBinpackingDisruptionBudgetScheduleArgs) ToGetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput).ToGetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutputWithContext(ctx)
}

// GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrInput is an input type that accepts GetOrchestratorConfigBinpackingDisruptionBudgetScheduleArgs, GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtr and GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrInput` via:
//
//	        GetOrchestratorConfigBinpackingDisruptionBudgetScheduleArgs{...}
//
//	or:
//
//	        nil
type GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrInput interface {
	pulumi.Input

	ToGetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput() GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput
	ToGetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutputWithContext(context.Context) GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput
}

type getOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrType GetOrchestratorConfigBinpackingDisruptionBudgetScheduleArgs

func GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtr(v *GetOrchestratorConfigBinpackingDisruptionBudgetScheduleArgs) GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrInput {
	return (*getOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrType)(v)
}

func (*getOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigBinpackingDisruptionBudgetSchedule)(nil)).Elem()
}

func (i *getOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrType) ToGetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput() GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput {
	return i.ToGetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutputWithContext(context.Background())
}

func (i *getOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrType) ToGetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput)
}

type GetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigBinpackingDisruptionBudgetSchedule)(nil)).Elem()
}

func (o GetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput) ToGetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput() GetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput) ToGetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput) ToGetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput() GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput {
	return o.ToGetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutputWithContext(context.Background())
}

func (o GetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput) ToGetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetOrchestratorConfigBinpackingDisruptionBudgetSchedule) *GetOrchestratorConfigBinpackingDisruptionBudgetSchedule {
		return &v
	}).(GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput)
}

// Duration for disruption budget
func (o GetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrchestratorConfigBinpackingDisruptionBudgetSchedule) string { return v.Duration }).(pulumi.StringOutput)
}

// Frequency for disruption budget
func (o GetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrchestratorConfigBinpackingDisruptionBudgetSchedule) string { return v.Frequency }).(pulumi.StringOutput)
}

type GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigBinpackingDisruptionBudgetSchedule)(nil)).Elem()
}

func (o GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput) ToGetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput() GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput) ToGetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput) Elem() GetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigBinpackingDisruptionBudgetSchedule) GetOrchestratorConfigBinpackingDisruptionBudgetSchedule {
		if v != nil {
			return *v
		}
		var ret GetOrchestratorConfigBinpackingDisruptionBudgetSchedule
		return ret
	}).(GetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput)
}

// Duration for disruption budget
func (o GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigBinpackingDisruptionBudgetSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.Duration
	}).(pulumi.StringPtrOutput)
}

// Frequency for disruption budget
func (o GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigBinpackingDisruptionBudgetSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.Frequency
	}).(pulumi.StringPtrOutput)
}

type GetOrchestratorConfigBinpackingPodEviction struct {
	// Minimum Threshold for considering a node as underutilized
	Threshold GetOrchestratorConfigBinpackingPodEvictionThreshold `pulumi:"threshold"`
}

// GetOrchestratorConfigBinpackingPodEvictionInput is an input type that accepts GetOrchestratorConfigBinpackingPodEvictionArgs and GetOrchestratorConfigBinpackingPodEvictionOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigBinpackingPodEvictionInput` via:
//
//	GetOrchestratorConfigBinpackingPodEvictionArgs{...}
type GetOrchestratorConfigBinpackingPodEvictionInput interface {
	pulumi.Input

	ToGetOrchestratorConfigBinpackingPodEvictionOutput() GetOrchestratorConfigBinpackingPodEvictionOutput
	ToGetOrchestratorConfigBinpackingPodEvictionOutputWithContext(context.Context) GetOrchestratorConfigBinpackingPodEvictionOutput
}

type GetOrchestratorConfigBinpackingPodEvictionArgs struct {
	// Minimum Threshold for considering a node as underutilized
	Threshold GetOrchestratorConfigBinpackingPodEvictionThresholdInput `pulumi:"threshold"`
}

func (GetOrchestratorConfigBinpackingPodEvictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigBinpackingPodEviction)(nil)).Elem()
}

func (i GetOrchestratorConfigBinpackingPodEvictionArgs) ToGetOrchestratorConfigBinpackingPodEvictionOutput() GetOrchestratorConfigBinpackingPodEvictionOutput {
	return i.ToGetOrchestratorConfigBinpackingPodEvictionOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigBinpackingPodEvictionArgs) ToGetOrchestratorConfigBinpackingPodEvictionOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingPodEvictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigBinpackingPodEvictionOutput)
}

func (i GetOrchestratorConfigBinpackingPodEvictionArgs) ToGetOrchestratorConfigBinpackingPodEvictionPtrOutput() GetOrchestratorConfigBinpackingPodEvictionPtrOutput {
	return i.ToGetOrchestratorConfigBinpackingPodEvictionPtrOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigBinpackingPodEvictionArgs) ToGetOrchestratorConfigBinpackingPodEvictionPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingPodEvictionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigBinpackingPodEvictionOutput).ToGetOrchestratorConfigBinpackingPodEvictionPtrOutputWithContext(ctx)
}

// GetOrchestratorConfigBinpackingPodEvictionPtrInput is an input type that accepts GetOrchestratorConfigBinpackingPodEvictionArgs, GetOrchestratorConfigBinpackingPodEvictionPtr and GetOrchestratorConfigBinpackingPodEvictionPtrOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigBinpackingPodEvictionPtrInput` via:
//
//	        GetOrchestratorConfigBinpackingPodEvictionArgs{...}
//
//	or:
//
//	        nil
type GetOrchestratorConfigBinpackingPodEvictionPtrInput interface {
	pulumi.Input

	ToGetOrchestratorConfigBinpackingPodEvictionPtrOutput() GetOrchestratorConfigBinpackingPodEvictionPtrOutput
	ToGetOrchestratorConfigBinpackingPodEvictionPtrOutputWithContext(context.Context) GetOrchestratorConfigBinpackingPodEvictionPtrOutput
}

type getOrchestratorConfigBinpackingPodEvictionPtrType GetOrchestratorConfigBinpackingPodEvictionArgs

func GetOrchestratorConfigBinpackingPodEvictionPtr(v *GetOrchestratorConfigBinpackingPodEvictionArgs) GetOrchestratorConfigBinpackingPodEvictionPtrInput {
	return (*getOrchestratorConfigBinpackingPodEvictionPtrType)(v)
}

func (*getOrchestratorConfigBinpackingPodEvictionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigBinpackingPodEviction)(nil)).Elem()
}

func (i *getOrchestratorConfigBinpackingPodEvictionPtrType) ToGetOrchestratorConfigBinpackingPodEvictionPtrOutput() GetOrchestratorConfigBinpackingPodEvictionPtrOutput {
	return i.ToGetOrchestratorConfigBinpackingPodEvictionPtrOutputWithContext(context.Background())
}

func (i *getOrchestratorConfigBinpackingPodEvictionPtrType) ToGetOrchestratorConfigBinpackingPodEvictionPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingPodEvictionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigBinpackingPodEvictionPtrOutput)
}

type GetOrchestratorConfigBinpackingPodEvictionOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigBinpackingPodEvictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigBinpackingPodEviction)(nil)).Elem()
}

func (o GetOrchestratorConfigBinpackingPodEvictionOutput) ToGetOrchestratorConfigBinpackingPodEvictionOutput() GetOrchestratorConfigBinpackingPodEvictionOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingPodEvictionOutput) ToGetOrchestratorConfigBinpackingPodEvictionOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingPodEvictionOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingPodEvictionOutput) ToGetOrchestratorConfigBinpackingPodEvictionPtrOutput() GetOrchestratorConfigBinpackingPodEvictionPtrOutput {
	return o.ToGetOrchestratorConfigBinpackingPodEvictionPtrOutputWithContext(context.Background())
}

func (o GetOrchestratorConfigBinpackingPodEvictionOutput) ToGetOrchestratorConfigBinpackingPodEvictionPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingPodEvictionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetOrchestratorConfigBinpackingPodEviction) *GetOrchestratorConfigBinpackingPodEviction {
		return &v
	}).(GetOrchestratorConfigBinpackingPodEvictionPtrOutput)
}

// Minimum Threshold for considering a node as underutilized
func (o GetOrchestratorConfigBinpackingPodEvictionOutput) Threshold() GetOrchestratorConfigBinpackingPodEvictionThresholdOutput {
	return o.ApplyT(func(v GetOrchestratorConfigBinpackingPodEviction) GetOrchestratorConfigBinpackingPodEvictionThreshold {
		return v.Threshold
	}).(GetOrchestratorConfigBinpackingPodEvictionThresholdOutput)
}

type GetOrchestratorConfigBinpackingPodEvictionPtrOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigBinpackingPodEvictionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigBinpackingPodEviction)(nil)).Elem()
}

func (o GetOrchestratorConfigBinpackingPodEvictionPtrOutput) ToGetOrchestratorConfigBinpackingPodEvictionPtrOutput() GetOrchestratorConfigBinpackingPodEvictionPtrOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingPodEvictionPtrOutput) ToGetOrchestratorConfigBinpackingPodEvictionPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingPodEvictionPtrOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingPodEvictionPtrOutput) Elem() GetOrchestratorConfigBinpackingPodEvictionOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigBinpackingPodEviction) GetOrchestratorConfigBinpackingPodEviction {
		if v != nil {
			return *v
		}
		var ret GetOrchestratorConfigBinpackingPodEviction
		return ret
	}).(GetOrchestratorConfigBinpackingPodEvictionOutput)
}

// Minimum Threshold for considering a node as underutilized
func (o GetOrchestratorConfigBinpackingPodEvictionPtrOutput) Threshold() GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigBinpackingPodEviction) *GetOrchestratorConfigBinpackingPodEvictionThreshold {
		if v == nil {
			return nil
		}
		return &v.Threshold
	}).(GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput)
}

type GetOrchestratorConfigBinpackingPodEvictionThreshold struct {
	// CPU percentage for considering a node as underutilized
	Cpu float64 `pulumi:"cpu"`
	// Memory percentage for considering a node as underutilized
	Memory float64 `pulumi:"memory"`
}

// GetOrchestratorConfigBinpackingPodEvictionThresholdInput is an input type that accepts GetOrchestratorConfigBinpackingPodEvictionThresholdArgs and GetOrchestratorConfigBinpackingPodEvictionThresholdOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigBinpackingPodEvictionThresholdInput` via:
//
//	GetOrchestratorConfigBinpackingPodEvictionThresholdArgs{...}
type GetOrchestratorConfigBinpackingPodEvictionThresholdInput interface {
	pulumi.Input

	ToGetOrchestratorConfigBinpackingPodEvictionThresholdOutput() GetOrchestratorConfigBinpackingPodEvictionThresholdOutput
	ToGetOrchestratorConfigBinpackingPodEvictionThresholdOutputWithContext(context.Context) GetOrchestratorConfigBinpackingPodEvictionThresholdOutput
}

type GetOrchestratorConfigBinpackingPodEvictionThresholdArgs struct {
	// CPU percentage for considering a node as underutilized
	Cpu pulumi.Float64Input `pulumi:"cpu"`
	// Memory percentage for considering a node as underutilized
	Memory pulumi.Float64Input `pulumi:"memory"`
}

func (GetOrchestratorConfigBinpackingPodEvictionThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigBinpackingPodEvictionThreshold)(nil)).Elem()
}

func (i GetOrchestratorConfigBinpackingPodEvictionThresholdArgs) ToGetOrchestratorConfigBinpackingPodEvictionThresholdOutput() GetOrchestratorConfigBinpackingPodEvictionThresholdOutput {
	return i.ToGetOrchestratorConfigBinpackingPodEvictionThresholdOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigBinpackingPodEvictionThresholdArgs) ToGetOrchestratorConfigBinpackingPodEvictionThresholdOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingPodEvictionThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigBinpackingPodEvictionThresholdOutput)
}

func (i GetOrchestratorConfigBinpackingPodEvictionThresholdArgs) ToGetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput() GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput {
	return i.ToGetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigBinpackingPodEvictionThresholdArgs) ToGetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigBinpackingPodEvictionThresholdOutput).ToGetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutputWithContext(ctx)
}

// GetOrchestratorConfigBinpackingPodEvictionThresholdPtrInput is an input type that accepts GetOrchestratorConfigBinpackingPodEvictionThresholdArgs, GetOrchestratorConfigBinpackingPodEvictionThresholdPtr and GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigBinpackingPodEvictionThresholdPtrInput` via:
//
//	        GetOrchestratorConfigBinpackingPodEvictionThresholdArgs{...}
//
//	or:
//
//	        nil
type GetOrchestratorConfigBinpackingPodEvictionThresholdPtrInput interface {
	pulumi.Input

	ToGetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput() GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput
	ToGetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutputWithContext(context.Context) GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput
}

type getOrchestratorConfigBinpackingPodEvictionThresholdPtrType GetOrchestratorConfigBinpackingPodEvictionThresholdArgs

func GetOrchestratorConfigBinpackingPodEvictionThresholdPtr(v *GetOrchestratorConfigBinpackingPodEvictionThresholdArgs) GetOrchestratorConfigBinpackingPodEvictionThresholdPtrInput {
	return (*getOrchestratorConfigBinpackingPodEvictionThresholdPtrType)(v)
}

func (*getOrchestratorConfigBinpackingPodEvictionThresholdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigBinpackingPodEvictionThreshold)(nil)).Elem()
}

func (i *getOrchestratorConfigBinpackingPodEvictionThresholdPtrType) ToGetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput() GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput {
	return i.ToGetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutputWithContext(context.Background())
}

func (i *getOrchestratorConfigBinpackingPodEvictionThresholdPtrType) ToGetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput)
}

type GetOrchestratorConfigBinpackingPodEvictionThresholdOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigBinpackingPodEvictionThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigBinpackingPodEvictionThreshold)(nil)).Elem()
}

func (o GetOrchestratorConfigBinpackingPodEvictionThresholdOutput) ToGetOrchestratorConfigBinpackingPodEvictionThresholdOutput() GetOrchestratorConfigBinpackingPodEvictionThresholdOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingPodEvictionThresholdOutput) ToGetOrchestratorConfigBinpackingPodEvictionThresholdOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingPodEvictionThresholdOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingPodEvictionThresholdOutput) ToGetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput() GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput {
	return o.ToGetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutputWithContext(context.Background())
}

func (o GetOrchestratorConfigBinpackingPodEvictionThresholdOutput) ToGetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetOrchestratorConfigBinpackingPodEvictionThreshold) *GetOrchestratorConfigBinpackingPodEvictionThreshold {
		return &v
	}).(GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput)
}

// CPU percentage for considering a node as underutilized
func (o GetOrchestratorConfigBinpackingPodEvictionThresholdOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v GetOrchestratorConfigBinpackingPodEvictionThreshold) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// Memory percentage for considering a node as underutilized
func (o GetOrchestratorConfigBinpackingPodEvictionThresholdOutput) Memory() pulumi.Float64Output {
	return o.ApplyT(func(v GetOrchestratorConfigBinpackingPodEvictionThreshold) float64 { return v.Memory }).(pulumi.Float64Output)
}

type GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigBinpackingPodEvictionThreshold)(nil)).Elem()
}

func (o GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput) ToGetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput() GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput) ToGetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput {
	return o
}

func (o GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput) Elem() GetOrchestratorConfigBinpackingPodEvictionThresholdOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigBinpackingPodEvictionThreshold) GetOrchestratorConfigBinpackingPodEvictionThreshold {
		if v != nil {
			return *v
		}
		var ret GetOrchestratorConfigBinpackingPodEvictionThreshold
		return ret
	}).(GetOrchestratorConfigBinpackingPodEvictionThresholdOutput)
}

// CPU percentage for considering a node as underutilized
func (o GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigBinpackingPodEvictionThreshold) *float64 {
		if v == nil {
			return nil
		}
		return &v.Cpu
	}).(pulumi.Float64PtrOutput)
}

// Memory percentage for considering a node as underutilized
func (o GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput) Memory() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigBinpackingPodEvictionThreshold) *float64 {
		if v == nil {
			return nil
		}
		return &v.Memory
	}).(pulumi.Float64PtrOutput)
}

type GetOrchestratorConfigCommitmentIntegration struct {
	// Flag to enable Commitment Integration
	Enabled bool `pulumi:"enabled"`
	// Master AWS account id for commitment integration
	MasterAccountId string `pulumi:"masterAccountId"`
}

// GetOrchestratorConfigCommitmentIntegrationInput is an input type that accepts GetOrchestratorConfigCommitmentIntegrationArgs and GetOrchestratorConfigCommitmentIntegrationOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigCommitmentIntegrationInput` via:
//
//	GetOrchestratorConfigCommitmentIntegrationArgs{...}
type GetOrchestratorConfigCommitmentIntegrationInput interface {
	pulumi.Input

	ToGetOrchestratorConfigCommitmentIntegrationOutput() GetOrchestratorConfigCommitmentIntegrationOutput
	ToGetOrchestratorConfigCommitmentIntegrationOutputWithContext(context.Context) GetOrchestratorConfigCommitmentIntegrationOutput
}

type GetOrchestratorConfigCommitmentIntegrationArgs struct {
	// Flag to enable Commitment Integration
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Master AWS account id for commitment integration
	MasterAccountId pulumi.StringInput `pulumi:"masterAccountId"`
}

func (GetOrchestratorConfigCommitmentIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigCommitmentIntegration)(nil)).Elem()
}

func (i GetOrchestratorConfigCommitmentIntegrationArgs) ToGetOrchestratorConfigCommitmentIntegrationOutput() GetOrchestratorConfigCommitmentIntegrationOutput {
	return i.ToGetOrchestratorConfigCommitmentIntegrationOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigCommitmentIntegrationArgs) ToGetOrchestratorConfigCommitmentIntegrationOutputWithContext(ctx context.Context) GetOrchestratorConfigCommitmentIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigCommitmentIntegrationOutput)
}

func (i GetOrchestratorConfigCommitmentIntegrationArgs) ToGetOrchestratorConfigCommitmentIntegrationPtrOutput() GetOrchestratorConfigCommitmentIntegrationPtrOutput {
	return i.ToGetOrchestratorConfigCommitmentIntegrationPtrOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigCommitmentIntegrationArgs) ToGetOrchestratorConfigCommitmentIntegrationPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigCommitmentIntegrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigCommitmentIntegrationOutput).ToGetOrchestratorConfigCommitmentIntegrationPtrOutputWithContext(ctx)
}

// GetOrchestratorConfigCommitmentIntegrationPtrInput is an input type that accepts GetOrchestratorConfigCommitmentIntegrationArgs, GetOrchestratorConfigCommitmentIntegrationPtr and GetOrchestratorConfigCommitmentIntegrationPtrOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigCommitmentIntegrationPtrInput` via:
//
//	        GetOrchestratorConfigCommitmentIntegrationArgs{...}
//
//	or:
//
//	        nil
type GetOrchestratorConfigCommitmentIntegrationPtrInput interface {
	pulumi.Input

	ToGetOrchestratorConfigCommitmentIntegrationPtrOutput() GetOrchestratorConfigCommitmentIntegrationPtrOutput
	ToGetOrchestratorConfigCommitmentIntegrationPtrOutputWithContext(context.Context) GetOrchestratorConfigCommitmentIntegrationPtrOutput
}

type getOrchestratorConfigCommitmentIntegrationPtrType GetOrchestratorConfigCommitmentIntegrationArgs

func GetOrchestratorConfigCommitmentIntegrationPtr(v *GetOrchestratorConfigCommitmentIntegrationArgs) GetOrchestratorConfigCommitmentIntegrationPtrInput {
	return (*getOrchestratorConfigCommitmentIntegrationPtrType)(v)
}

func (*getOrchestratorConfigCommitmentIntegrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigCommitmentIntegration)(nil)).Elem()
}

func (i *getOrchestratorConfigCommitmentIntegrationPtrType) ToGetOrchestratorConfigCommitmentIntegrationPtrOutput() GetOrchestratorConfigCommitmentIntegrationPtrOutput {
	return i.ToGetOrchestratorConfigCommitmentIntegrationPtrOutputWithContext(context.Background())
}

func (i *getOrchestratorConfigCommitmentIntegrationPtrType) ToGetOrchestratorConfigCommitmentIntegrationPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigCommitmentIntegrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigCommitmentIntegrationPtrOutput)
}

type GetOrchestratorConfigCommitmentIntegrationOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigCommitmentIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigCommitmentIntegration)(nil)).Elem()
}

func (o GetOrchestratorConfigCommitmentIntegrationOutput) ToGetOrchestratorConfigCommitmentIntegrationOutput() GetOrchestratorConfigCommitmentIntegrationOutput {
	return o
}

func (o GetOrchestratorConfigCommitmentIntegrationOutput) ToGetOrchestratorConfigCommitmentIntegrationOutputWithContext(ctx context.Context) GetOrchestratorConfigCommitmentIntegrationOutput {
	return o
}

func (o GetOrchestratorConfigCommitmentIntegrationOutput) ToGetOrchestratorConfigCommitmentIntegrationPtrOutput() GetOrchestratorConfigCommitmentIntegrationPtrOutput {
	return o.ToGetOrchestratorConfigCommitmentIntegrationPtrOutputWithContext(context.Background())
}

func (o GetOrchestratorConfigCommitmentIntegrationOutput) ToGetOrchestratorConfigCommitmentIntegrationPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigCommitmentIntegrationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetOrchestratorConfigCommitmentIntegration) *GetOrchestratorConfigCommitmentIntegration {
		return &v
	}).(GetOrchestratorConfigCommitmentIntegrationPtrOutput)
}

// Flag to enable Commitment Integration
func (o GetOrchestratorConfigCommitmentIntegrationOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOrchestratorConfigCommitmentIntegration) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Master AWS account id for commitment integration
func (o GetOrchestratorConfigCommitmentIntegrationOutput) MasterAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrchestratorConfigCommitmentIntegration) string { return v.MasterAccountId }).(pulumi.StringOutput)
}

type GetOrchestratorConfigCommitmentIntegrationPtrOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigCommitmentIntegrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigCommitmentIntegration)(nil)).Elem()
}

func (o GetOrchestratorConfigCommitmentIntegrationPtrOutput) ToGetOrchestratorConfigCommitmentIntegrationPtrOutput() GetOrchestratorConfigCommitmentIntegrationPtrOutput {
	return o
}

func (o GetOrchestratorConfigCommitmentIntegrationPtrOutput) ToGetOrchestratorConfigCommitmentIntegrationPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigCommitmentIntegrationPtrOutput {
	return o
}

func (o GetOrchestratorConfigCommitmentIntegrationPtrOutput) Elem() GetOrchestratorConfigCommitmentIntegrationOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigCommitmentIntegration) GetOrchestratorConfigCommitmentIntegration {
		if v != nil {
			return *v
		}
		var ret GetOrchestratorConfigCommitmentIntegration
		return ret
	}).(GetOrchestratorConfigCommitmentIntegrationOutput)
}

// Flag to enable Commitment Integration
func (o GetOrchestratorConfigCommitmentIntegrationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigCommitmentIntegration) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Master AWS account id for commitment integration
func (o GetOrchestratorConfigCommitmentIntegrationPtrOutput) MasterAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigCommitmentIntegration) *string {
		if v == nil {
			return nil
		}
		return &v.MasterAccountId
	}).(pulumi.StringPtrOutput)
}

type GetOrchestratorConfigDistribution struct {
	// Number of minimum ondemand replicas required for workloads
	BaseOndemandCapacity *int `pulumi:"baseOndemandCapacity"`
	// Percentage of on-demand replicas required for workloads
	OndemandReplicaPercentage float64 `pulumi:"ondemandReplicaPercentage"`
	// Selector for choosing workloads for distribution
	Selector *string `pulumi:"selector"`
	// Strategy for choosing spot nodes for cluster
	Strategy *string `pulumi:"strategy"`
}

// GetOrchestratorConfigDistributionInput is an input type that accepts GetOrchestratorConfigDistributionArgs and GetOrchestratorConfigDistributionOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigDistributionInput` via:
//
//	GetOrchestratorConfigDistributionArgs{...}
type GetOrchestratorConfigDistributionInput interface {
	pulumi.Input

	ToGetOrchestratorConfigDistributionOutput() GetOrchestratorConfigDistributionOutput
	ToGetOrchestratorConfigDistributionOutputWithContext(context.Context) GetOrchestratorConfigDistributionOutput
}

type GetOrchestratorConfigDistributionArgs struct {
	// Number of minimum ondemand replicas required for workloads
	BaseOndemandCapacity pulumi.IntPtrInput `pulumi:"baseOndemandCapacity"`
	// Percentage of on-demand replicas required for workloads
	OndemandReplicaPercentage pulumi.Float64Input `pulumi:"ondemandReplicaPercentage"`
	// Selector for choosing workloads for distribution
	Selector pulumi.StringPtrInput `pulumi:"selector"`
	// Strategy for choosing spot nodes for cluster
	Strategy pulumi.StringPtrInput `pulumi:"strategy"`
}

func (GetOrchestratorConfigDistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigDistribution)(nil)).Elem()
}

func (i GetOrchestratorConfigDistributionArgs) ToGetOrchestratorConfigDistributionOutput() GetOrchestratorConfigDistributionOutput {
	return i.ToGetOrchestratorConfigDistributionOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigDistributionArgs) ToGetOrchestratorConfigDistributionOutputWithContext(ctx context.Context) GetOrchestratorConfigDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigDistributionOutput)
}

func (i GetOrchestratorConfigDistributionArgs) ToGetOrchestratorConfigDistributionPtrOutput() GetOrchestratorConfigDistributionPtrOutput {
	return i.ToGetOrchestratorConfigDistributionPtrOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigDistributionArgs) ToGetOrchestratorConfigDistributionPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigDistributionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigDistributionOutput).ToGetOrchestratorConfigDistributionPtrOutputWithContext(ctx)
}

// GetOrchestratorConfigDistributionPtrInput is an input type that accepts GetOrchestratorConfigDistributionArgs, GetOrchestratorConfigDistributionPtr and GetOrchestratorConfigDistributionPtrOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigDistributionPtrInput` via:
//
//	        GetOrchestratorConfigDistributionArgs{...}
//
//	or:
//
//	        nil
type GetOrchestratorConfigDistributionPtrInput interface {
	pulumi.Input

	ToGetOrchestratorConfigDistributionPtrOutput() GetOrchestratorConfigDistributionPtrOutput
	ToGetOrchestratorConfigDistributionPtrOutputWithContext(context.Context) GetOrchestratorConfigDistributionPtrOutput
}

type getOrchestratorConfigDistributionPtrType GetOrchestratorConfigDistributionArgs

func GetOrchestratorConfigDistributionPtr(v *GetOrchestratorConfigDistributionArgs) GetOrchestratorConfigDistributionPtrInput {
	return (*getOrchestratorConfigDistributionPtrType)(v)
}

func (*getOrchestratorConfigDistributionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigDistribution)(nil)).Elem()
}

func (i *getOrchestratorConfigDistributionPtrType) ToGetOrchestratorConfigDistributionPtrOutput() GetOrchestratorConfigDistributionPtrOutput {
	return i.ToGetOrchestratorConfigDistributionPtrOutputWithContext(context.Background())
}

func (i *getOrchestratorConfigDistributionPtrType) ToGetOrchestratorConfigDistributionPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigDistributionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigDistributionPtrOutput)
}

type GetOrchestratorConfigDistributionOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigDistribution)(nil)).Elem()
}

func (o GetOrchestratorConfigDistributionOutput) ToGetOrchestratorConfigDistributionOutput() GetOrchestratorConfigDistributionOutput {
	return o
}

func (o GetOrchestratorConfigDistributionOutput) ToGetOrchestratorConfigDistributionOutputWithContext(ctx context.Context) GetOrchestratorConfigDistributionOutput {
	return o
}

func (o GetOrchestratorConfigDistributionOutput) ToGetOrchestratorConfigDistributionPtrOutput() GetOrchestratorConfigDistributionPtrOutput {
	return o.ToGetOrchestratorConfigDistributionPtrOutputWithContext(context.Background())
}

func (o GetOrchestratorConfigDistributionOutput) ToGetOrchestratorConfigDistributionPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigDistributionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetOrchestratorConfigDistribution) *GetOrchestratorConfigDistribution {
		return &v
	}).(GetOrchestratorConfigDistributionPtrOutput)
}

// Number of minimum ondemand replicas required for workloads
func (o GetOrchestratorConfigDistributionOutput) BaseOndemandCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetOrchestratorConfigDistribution) *int { return v.BaseOndemandCapacity }).(pulumi.IntPtrOutput)
}

// Percentage of on-demand replicas required for workloads
func (o GetOrchestratorConfigDistributionOutput) OndemandReplicaPercentage() pulumi.Float64Output {
	return o.ApplyT(func(v GetOrchestratorConfigDistribution) float64 { return v.OndemandReplicaPercentage }).(pulumi.Float64Output)
}

// Selector for choosing workloads for distribution
func (o GetOrchestratorConfigDistributionOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOrchestratorConfigDistribution) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

// Strategy for choosing spot nodes for cluster
func (o GetOrchestratorConfigDistributionOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOrchestratorConfigDistribution) *string { return v.Strategy }).(pulumi.StringPtrOutput)
}

type GetOrchestratorConfigDistributionPtrOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigDistributionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigDistribution)(nil)).Elem()
}

func (o GetOrchestratorConfigDistributionPtrOutput) ToGetOrchestratorConfigDistributionPtrOutput() GetOrchestratorConfigDistributionPtrOutput {
	return o
}

func (o GetOrchestratorConfigDistributionPtrOutput) ToGetOrchestratorConfigDistributionPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigDistributionPtrOutput {
	return o
}

func (o GetOrchestratorConfigDistributionPtrOutput) Elem() GetOrchestratorConfigDistributionOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigDistribution) GetOrchestratorConfigDistribution {
		if v != nil {
			return *v
		}
		var ret GetOrchestratorConfigDistribution
		return ret
	}).(GetOrchestratorConfigDistributionOutput)
}

// Number of minimum ondemand replicas required for workloads
func (o GetOrchestratorConfigDistributionPtrOutput) BaseOndemandCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigDistribution) *int {
		if v == nil {
			return nil
		}
		return v.BaseOndemandCapacity
	}).(pulumi.IntPtrOutput)
}

// Percentage of on-demand replicas required for workloads
func (o GetOrchestratorConfigDistributionPtrOutput) OndemandReplicaPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigDistribution) *float64 {
		if v == nil {
			return nil
		}
		return &v.OndemandReplicaPercentage
	}).(pulumi.Float64PtrOutput)
}

// Selector for choosing workloads for distribution
func (o GetOrchestratorConfigDistributionPtrOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigDistribution) *string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringPtrOutput)
}

// Strategy for choosing spot nodes for cluster
func (o GetOrchestratorConfigDistributionPtrOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigDistribution) *string {
		if v == nil {
			return nil
		}
		return v.Strategy
	}).(pulumi.StringPtrOutput)
}

type GetOrchestratorConfigNodePreferences struct {
	// Reverse fallback interval
	ReverseFallbackInterval *string `pulumi:"reverseFallbackInterval"`
	// TTL for nodes
	Ttl *string `pulumi:"ttl"`
}

// GetOrchestratorConfigNodePreferencesInput is an input type that accepts GetOrchestratorConfigNodePreferencesArgs and GetOrchestratorConfigNodePreferencesOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigNodePreferencesInput` via:
//
//	GetOrchestratorConfigNodePreferencesArgs{...}
type GetOrchestratorConfigNodePreferencesInput interface {
	pulumi.Input

	ToGetOrchestratorConfigNodePreferencesOutput() GetOrchestratorConfigNodePreferencesOutput
	ToGetOrchestratorConfigNodePreferencesOutputWithContext(context.Context) GetOrchestratorConfigNodePreferencesOutput
}

type GetOrchestratorConfigNodePreferencesArgs struct {
	// Reverse fallback interval
	ReverseFallbackInterval pulumi.StringPtrInput `pulumi:"reverseFallbackInterval"`
	// TTL for nodes
	Ttl pulumi.StringPtrInput `pulumi:"ttl"`
}

func (GetOrchestratorConfigNodePreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigNodePreferences)(nil)).Elem()
}

func (i GetOrchestratorConfigNodePreferencesArgs) ToGetOrchestratorConfigNodePreferencesOutput() GetOrchestratorConfigNodePreferencesOutput {
	return i.ToGetOrchestratorConfigNodePreferencesOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigNodePreferencesArgs) ToGetOrchestratorConfigNodePreferencesOutputWithContext(ctx context.Context) GetOrchestratorConfigNodePreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigNodePreferencesOutput)
}

func (i GetOrchestratorConfigNodePreferencesArgs) ToGetOrchestratorConfigNodePreferencesPtrOutput() GetOrchestratorConfigNodePreferencesPtrOutput {
	return i.ToGetOrchestratorConfigNodePreferencesPtrOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigNodePreferencesArgs) ToGetOrchestratorConfigNodePreferencesPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigNodePreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigNodePreferencesOutput).ToGetOrchestratorConfigNodePreferencesPtrOutputWithContext(ctx)
}

// GetOrchestratorConfigNodePreferencesPtrInput is an input type that accepts GetOrchestratorConfigNodePreferencesArgs, GetOrchestratorConfigNodePreferencesPtr and GetOrchestratorConfigNodePreferencesPtrOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigNodePreferencesPtrInput` via:
//
//	        GetOrchestratorConfigNodePreferencesArgs{...}
//
//	or:
//
//	        nil
type GetOrchestratorConfigNodePreferencesPtrInput interface {
	pulumi.Input

	ToGetOrchestratorConfigNodePreferencesPtrOutput() GetOrchestratorConfigNodePreferencesPtrOutput
	ToGetOrchestratorConfigNodePreferencesPtrOutputWithContext(context.Context) GetOrchestratorConfigNodePreferencesPtrOutput
}

type getOrchestratorConfigNodePreferencesPtrType GetOrchestratorConfigNodePreferencesArgs

func GetOrchestratorConfigNodePreferencesPtr(v *GetOrchestratorConfigNodePreferencesArgs) GetOrchestratorConfigNodePreferencesPtrInput {
	return (*getOrchestratorConfigNodePreferencesPtrType)(v)
}

func (*getOrchestratorConfigNodePreferencesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigNodePreferences)(nil)).Elem()
}

func (i *getOrchestratorConfigNodePreferencesPtrType) ToGetOrchestratorConfigNodePreferencesPtrOutput() GetOrchestratorConfigNodePreferencesPtrOutput {
	return i.ToGetOrchestratorConfigNodePreferencesPtrOutputWithContext(context.Background())
}

func (i *getOrchestratorConfigNodePreferencesPtrType) ToGetOrchestratorConfigNodePreferencesPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigNodePreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigNodePreferencesPtrOutput)
}

type GetOrchestratorConfigNodePreferencesOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigNodePreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigNodePreferences)(nil)).Elem()
}

func (o GetOrchestratorConfigNodePreferencesOutput) ToGetOrchestratorConfigNodePreferencesOutput() GetOrchestratorConfigNodePreferencesOutput {
	return o
}

func (o GetOrchestratorConfigNodePreferencesOutput) ToGetOrchestratorConfigNodePreferencesOutputWithContext(ctx context.Context) GetOrchestratorConfigNodePreferencesOutput {
	return o
}

func (o GetOrchestratorConfigNodePreferencesOutput) ToGetOrchestratorConfigNodePreferencesPtrOutput() GetOrchestratorConfigNodePreferencesPtrOutput {
	return o.ToGetOrchestratorConfigNodePreferencesPtrOutputWithContext(context.Background())
}

func (o GetOrchestratorConfigNodePreferencesOutput) ToGetOrchestratorConfigNodePreferencesPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigNodePreferencesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetOrchestratorConfigNodePreferences) *GetOrchestratorConfigNodePreferences {
		return &v
	}).(GetOrchestratorConfigNodePreferencesPtrOutput)
}

// Reverse fallback interval
func (o GetOrchestratorConfigNodePreferencesOutput) ReverseFallbackInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOrchestratorConfigNodePreferences) *string { return v.ReverseFallbackInterval }).(pulumi.StringPtrOutput)
}

// TTL for nodes
func (o GetOrchestratorConfigNodePreferencesOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOrchestratorConfigNodePreferences) *string { return v.Ttl }).(pulumi.StringPtrOutput)
}

type GetOrchestratorConfigNodePreferencesPtrOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigNodePreferencesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigNodePreferences)(nil)).Elem()
}

func (o GetOrchestratorConfigNodePreferencesPtrOutput) ToGetOrchestratorConfigNodePreferencesPtrOutput() GetOrchestratorConfigNodePreferencesPtrOutput {
	return o
}

func (o GetOrchestratorConfigNodePreferencesPtrOutput) ToGetOrchestratorConfigNodePreferencesPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigNodePreferencesPtrOutput {
	return o
}

func (o GetOrchestratorConfigNodePreferencesPtrOutput) Elem() GetOrchestratorConfigNodePreferencesOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigNodePreferences) GetOrchestratorConfigNodePreferences {
		if v != nil {
			return *v
		}
		var ret GetOrchestratorConfigNodePreferences
		return ret
	}).(GetOrchestratorConfigNodePreferencesOutput)
}

// Reverse fallback interval
func (o GetOrchestratorConfigNodePreferencesPtrOutput) ReverseFallbackInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigNodePreferences) *string {
		if v == nil {
			return nil
		}
		return v.ReverseFallbackInterval
	}).(pulumi.StringPtrOutput)
}

// TTL for nodes
func (o GetOrchestratorConfigNodePreferencesPtrOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigNodePreferences) *string {
		if v == nil {
			return nil
		}
		return v.Ttl
	}).(pulumi.StringPtrOutput)
}

type GetOrchestratorConfigReplacementSchedule struct {
	// Defines the scope of the replacement schedule
	AppliesTo     GetOrchestratorConfigReplacementScheduleAppliesTo      `pulumi:"appliesTo"`
	WindowDetails *GetOrchestratorConfigReplacementScheduleWindowDetails `pulumi:"windowDetails"`
	// Window type for replacement schedule
	WindowType string `pulumi:"windowType"`
}

// GetOrchestratorConfigReplacementScheduleInput is an input type that accepts GetOrchestratorConfigReplacementScheduleArgs and GetOrchestratorConfigReplacementScheduleOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigReplacementScheduleInput` via:
//
//	GetOrchestratorConfigReplacementScheduleArgs{...}
type GetOrchestratorConfigReplacementScheduleInput interface {
	pulumi.Input

	ToGetOrchestratorConfigReplacementScheduleOutput() GetOrchestratorConfigReplacementScheduleOutput
	ToGetOrchestratorConfigReplacementScheduleOutputWithContext(context.Context) GetOrchestratorConfigReplacementScheduleOutput
}

type GetOrchestratorConfigReplacementScheduleArgs struct {
	// Defines the scope of the replacement schedule
	AppliesTo     GetOrchestratorConfigReplacementScheduleAppliesToInput        `pulumi:"appliesTo"`
	WindowDetails GetOrchestratorConfigReplacementScheduleWindowDetailsPtrInput `pulumi:"windowDetails"`
	// Window type for replacement schedule
	WindowType pulumi.StringInput `pulumi:"windowType"`
}

func (GetOrchestratorConfigReplacementScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigReplacementSchedule)(nil)).Elem()
}

func (i GetOrchestratorConfigReplacementScheduleArgs) ToGetOrchestratorConfigReplacementScheduleOutput() GetOrchestratorConfigReplacementScheduleOutput {
	return i.ToGetOrchestratorConfigReplacementScheduleOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigReplacementScheduleArgs) ToGetOrchestratorConfigReplacementScheduleOutputWithContext(ctx context.Context) GetOrchestratorConfigReplacementScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigReplacementScheduleOutput)
}

func (i GetOrchestratorConfigReplacementScheduleArgs) ToGetOrchestratorConfigReplacementSchedulePtrOutput() GetOrchestratorConfigReplacementSchedulePtrOutput {
	return i.ToGetOrchestratorConfigReplacementSchedulePtrOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigReplacementScheduleArgs) ToGetOrchestratorConfigReplacementSchedulePtrOutputWithContext(ctx context.Context) GetOrchestratorConfigReplacementSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigReplacementScheduleOutput).ToGetOrchestratorConfigReplacementSchedulePtrOutputWithContext(ctx)
}

// GetOrchestratorConfigReplacementSchedulePtrInput is an input type that accepts GetOrchestratorConfigReplacementScheduleArgs, GetOrchestratorConfigReplacementSchedulePtr and GetOrchestratorConfigReplacementSchedulePtrOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigReplacementSchedulePtrInput` via:
//
//	        GetOrchestratorConfigReplacementScheduleArgs{...}
//
//	or:
//
//	        nil
type GetOrchestratorConfigReplacementSchedulePtrInput interface {
	pulumi.Input

	ToGetOrchestratorConfigReplacementSchedulePtrOutput() GetOrchestratorConfigReplacementSchedulePtrOutput
	ToGetOrchestratorConfigReplacementSchedulePtrOutputWithContext(context.Context) GetOrchestratorConfigReplacementSchedulePtrOutput
}

type getOrchestratorConfigReplacementSchedulePtrType GetOrchestratorConfigReplacementScheduleArgs

func GetOrchestratorConfigReplacementSchedulePtr(v *GetOrchestratorConfigReplacementScheduleArgs) GetOrchestratorConfigReplacementSchedulePtrInput {
	return (*getOrchestratorConfigReplacementSchedulePtrType)(v)
}

func (*getOrchestratorConfigReplacementSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigReplacementSchedule)(nil)).Elem()
}

func (i *getOrchestratorConfigReplacementSchedulePtrType) ToGetOrchestratorConfigReplacementSchedulePtrOutput() GetOrchestratorConfigReplacementSchedulePtrOutput {
	return i.ToGetOrchestratorConfigReplacementSchedulePtrOutputWithContext(context.Background())
}

func (i *getOrchestratorConfigReplacementSchedulePtrType) ToGetOrchestratorConfigReplacementSchedulePtrOutputWithContext(ctx context.Context) GetOrchestratorConfigReplacementSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigReplacementSchedulePtrOutput)
}

type GetOrchestratorConfigReplacementScheduleOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigReplacementScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigReplacementSchedule)(nil)).Elem()
}

func (o GetOrchestratorConfigReplacementScheduleOutput) ToGetOrchestratorConfigReplacementScheduleOutput() GetOrchestratorConfigReplacementScheduleOutput {
	return o
}

func (o GetOrchestratorConfigReplacementScheduleOutput) ToGetOrchestratorConfigReplacementScheduleOutputWithContext(ctx context.Context) GetOrchestratorConfigReplacementScheduleOutput {
	return o
}

func (o GetOrchestratorConfigReplacementScheduleOutput) ToGetOrchestratorConfigReplacementSchedulePtrOutput() GetOrchestratorConfigReplacementSchedulePtrOutput {
	return o.ToGetOrchestratorConfigReplacementSchedulePtrOutputWithContext(context.Background())
}

func (o GetOrchestratorConfigReplacementScheduleOutput) ToGetOrchestratorConfigReplacementSchedulePtrOutputWithContext(ctx context.Context) GetOrchestratorConfigReplacementSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetOrchestratorConfigReplacementSchedule) *GetOrchestratorConfigReplacementSchedule {
		return &v
	}).(GetOrchestratorConfigReplacementSchedulePtrOutput)
}

// Defines the scope of the replacement schedule
func (o GetOrchestratorConfigReplacementScheduleOutput) AppliesTo() GetOrchestratorConfigReplacementScheduleAppliesToOutput {
	return o.ApplyT(func(v GetOrchestratorConfigReplacementSchedule) GetOrchestratorConfigReplacementScheduleAppliesTo {
		return v.AppliesTo
	}).(GetOrchestratorConfigReplacementScheduleAppliesToOutput)
}

func (o GetOrchestratorConfigReplacementScheduleOutput) WindowDetails() GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput {
	return o.ApplyT(func(v GetOrchestratorConfigReplacementSchedule) *GetOrchestratorConfigReplacementScheduleWindowDetails {
		return v.WindowDetails
	}).(GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput)
}

// Window type for replacement schedule
func (o GetOrchestratorConfigReplacementScheduleOutput) WindowType() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrchestratorConfigReplacementSchedule) string { return v.WindowType }).(pulumi.StringOutput)
}

type GetOrchestratorConfigReplacementSchedulePtrOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigReplacementSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigReplacementSchedule)(nil)).Elem()
}

func (o GetOrchestratorConfigReplacementSchedulePtrOutput) ToGetOrchestratorConfigReplacementSchedulePtrOutput() GetOrchestratorConfigReplacementSchedulePtrOutput {
	return o
}

func (o GetOrchestratorConfigReplacementSchedulePtrOutput) ToGetOrchestratorConfigReplacementSchedulePtrOutputWithContext(ctx context.Context) GetOrchestratorConfigReplacementSchedulePtrOutput {
	return o
}

func (o GetOrchestratorConfigReplacementSchedulePtrOutput) Elem() GetOrchestratorConfigReplacementScheduleOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigReplacementSchedule) GetOrchestratorConfigReplacementSchedule {
		if v != nil {
			return *v
		}
		var ret GetOrchestratorConfigReplacementSchedule
		return ret
	}).(GetOrchestratorConfigReplacementScheduleOutput)
}

// Defines the scope of the replacement schedule
func (o GetOrchestratorConfigReplacementSchedulePtrOutput) AppliesTo() GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigReplacementSchedule) *GetOrchestratorConfigReplacementScheduleAppliesTo {
		if v == nil {
			return nil
		}
		return &v.AppliesTo
	}).(GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput)
}

func (o GetOrchestratorConfigReplacementSchedulePtrOutput) WindowDetails() GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigReplacementSchedule) *GetOrchestratorConfigReplacementScheduleWindowDetails {
		if v == nil {
			return nil
		}
		return v.WindowDetails
	}).(GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput)
}

// Window type for replacement schedule
func (o GetOrchestratorConfigReplacementSchedulePtrOutput) WindowType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigReplacementSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.WindowType
	}).(pulumi.StringPtrOutput)
}

type GetOrchestratorConfigReplacementScheduleAppliesTo struct {
	Consolidation      bool `pulumi:"consolidation"`
	HarnessPodEviction bool `pulumi:"harnessPodEviction"`
	ReverseFallback    bool `pulumi:"reverseFallback"`
}

// GetOrchestratorConfigReplacementScheduleAppliesToInput is an input type that accepts GetOrchestratorConfigReplacementScheduleAppliesToArgs and GetOrchestratorConfigReplacementScheduleAppliesToOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigReplacementScheduleAppliesToInput` via:
//
//	GetOrchestratorConfigReplacementScheduleAppliesToArgs{...}
type GetOrchestratorConfigReplacementScheduleAppliesToInput interface {
	pulumi.Input

	ToGetOrchestratorConfigReplacementScheduleAppliesToOutput() GetOrchestratorConfigReplacementScheduleAppliesToOutput
	ToGetOrchestratorConfigReplacementScheduleAppliesToOutputWithContext(context.Context) GetOrchestratorConfigReplacementScheduleAppliesToOutput
}

type GetOrchestratorConfigReplacementScheduleAppliesToArgs struct {
	Consolidation      pulumi.BoolInput `pulumi:"consolidation"`
	HarnessPodEviction pulumi.BoolInput `pulumi:"harnessPodEviction"`
	ReverseFallback    pulumi.BoolInput `pulumi:"reverseFallback"`
}

func (GetOrchestratorConfigReplacementScheduleAppliesToArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigReplacementScheduleAppliesTo)(nil)).Elem()
}

func (i GetOrchestratorConfigReplacementScheduleAppliesToArgs) ToGetOrchestratorConfigReplacementScheduleAppliesToOutput() GetOrchestratorConfigReplacementScheduleAppliesToOutput {
	return i.ToGetOrchestratorConfigReplacementScheduleAppliesToOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigReplacementScheduleAppliesToArgs) ToGetOrchestratorConfigReplacementScheduleAppliesToOutputWithContext(ctx context.Context) GetOrchestratorConfigReplacementScheduleAppliesToOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigReplacementScheduleAppliesToOutput)
}

func (i GetOrchestratorConfigReplacementScheduleAppliesToArgs) ToGetOrchestratorConfigReplacementScheduleAppliesToPtrOutput() GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput {
	return i.ToGetOrchestratorConfigReplacementScheduleAppliesToPtrOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigReplacementScheduleAppliesToArgs) ToGetOrchestratorConfigReplacementScheduleAppliesToPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigReplacementScheduleAppliesToOutput).ToGetOrchestratorConfigReplacementScheduleAppliesToPtrOutputWithContext(ctx)
}

// GetOrchestratorConfigReplacementScheduleAppliesToPtrInput is an input type that accepts GetOrchestratorConfigReplacementScheduleAppliesToArgs, GetOrchestratorConfigReplacementScheduleAppliesToPtr and GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigReplacementScheduleAppliesToPtrInput` via:
//
//	        GetOrchestratorConfigReplacementScheduleAppliesToArgs{...}
//
//	or:
//
//	        nil
type GetOrchestratorConfigReplacementScheduleAppliesToPtrInput interface {
	pulumi.Input

	ToGetOrchestratorConfigReplacementScheduleAppliesToPtrOutput() GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput
	ToGetOrchestratorConfigReplacementScheduleAppliesToPtrOutputWithContext(context.Context) GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput
}

type getOrchestratorConfigReplacementScheduleAppliesToPtrType GetOrchestratorConfigReplacementScheduleAppliesToArgs

func GetOrchestratorConfigReplacementScheduleAppliesToPtr(v *GetOrchestratorConfigReplacementScheduleAppliesToArgs) GetOrchestratorConfigReplacementScheduleAppliesToPtrInput {
	return (*getOrchestratorConfigReplacementScheduleAppliesToPtrType)(v)
}

func (*getOrchestratorConfigReplacementScheduleAppliesToPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigReplacementScheduleAppliesTo)(nil)).Elem()
}

func (i *getOrchestratorConfigReplacementScheduleAppliesToPtrType) ToGetOrchestratorConfigReplacementScheduleAppliesToPtrOutput() GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput {
	return i.ToGetOrchestratorConfigReplacementScheduleAppliesToPtrOutputWithContext(context.Background())
}

func (i *getOrchestratorConfigReplacementScheduleAppliesToPtrType) ToGetOrchestratorConfigReplacementScheduleAppliesToPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput)
}

type GetOrchestratorConfigReplacementScheduleAppliesToOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigReplacementScheduleAppliesToOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigReplacementScheduleAppliesTo)(nil)).Elem()
}

func (o GetOrchestratorConfigReplacementScheduleAppliesToOutput) ToGetOrchestratorConfigReplacementScheduleAppliesToOutput() GetOrchestratorConfigReplacementScheduleAppliesToOutput {
	return o
}

func (o GetOrchestratorConfigReplacementScheduleAppliesToOutput) ToGetOrchestratorConfigReplacementScheduleAppliesToOutputWithContext(ctx context.Context) GetOrchestratorConfigReplacementScheduleAppliesToOutput {
	return o
}

func (o GetOrchestratorConfigReplacementScheduleAppliesToOutput) ToGetOrchestratorConfigReplacementScheduleAppliesToPtrOutput() GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput {
	return o.ToGetOrchestratorConfigReplacementScheduleAppliesToPtrOutputWithContext(context.Background())
}

func (o GetOrchestratorConfigReplacementScheduleAppliesToOutput) ToGetOrchestratorConfigReplacementScheduleAppliesToPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetOrchestratorConfigReplacementScheduleAppliesTo) *GetOrchestratorConfigReplacementScheduleAppliesTo {
		return &v
	}).(GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput)
}

func (o GetOrchestratorConfigReplacementScheduleAppliesToOutput) Consolidation() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOrchestratorConfigReplacementScheduleAppliesTo) bool { return v.Consolidation }).(pulumi.BoolOutput)
}

func (o GetOrchestratorConfigReplacementScheduleAppliesToOutput) HarnessPodEviction() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOrchestratorConfigReplacementScheduleAppliesTo) bool { return v.HarnessPodEviction }).(pulumi.BoolOutput)
}

func (o GetOrchestratorConfigReplacementScheduleAppliesToOutput) ReverseFallback() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOrchestratorConfigReplacementScheduleAppliesTo) bool { return v.ReverseFallback }).(pulumi.BoolOutput)
}

type GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigReplacementScheduleAppliesTo)(nil)).Elem()
}

func (o GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput) ToGetOrchestratorConfigReplacementScheduleAppliesToPtrOutput() GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput {
	return o
}

func (o GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput) ToGetOrchestratorConfigReplacementScheduleAppliesToPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput {
	return o
}

func (o GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput) Elem() GetOrchestratorConfigReplacementScheduleAppliesToOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigReplacementScheduleAppliesTo) GetOrchestratorConfigReplacementScheduleAppliesTo {
		if v != nil {
			return *v
		}
		var ret GetOrchestratorConfigReplacementScheduleAppliesTo
		return ret
	}).(GetOrchestratorConfigReplacementScheduleAppliesToOutput)
}

func (o GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput) Consolidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigReplacementScheduleAppliesTo) *bool {
		if v == nil {
			return nil
		}
		return &v.Consolidation
	}).(pulumi.BoolPtrOutput)
}

func (o GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput) HarnessPodEviction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigReplacementScheduleAppliesTo) *bool {
		if v == nil {
			return nil
		}
		return &v.HarnessPodEviction
	}).(pulumi.BoolPtrOutput)
}

func (o GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput) ReverseFallback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigReplacementScheduleAppliesTo) *bool {
		if v == nil {
			return nil
		}
		return &v.ReverseFallback
	}).(pulumi.BoolPtrOutput)
}

type GetOrchestratorConfigReplacementScheduleWindowDetails struct {
	AllDay *bool `pulumi:"allDay"`
	// List of days on which schedule need to be active. Valid values are SUN, MON, TUE, WED, THU, FRI and SAT.
	Days []string `pulumi:"days"`
	// End time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
	EndTime *string `pulumi:"endTime"`
	// Start time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
	StartTime *string `pulumi:"startTime"`
	// Time zone in which the schedule needs to be executed. Example Valid values: UTC, America/New*York, Europe/London, Asia/Kolkata, Asia/Tokyo, Asia/Hong*Kong, Asia/Singapore, Australia/Melbourne and Australia/Sydney.
	TimeZone string `pulumi:"timeZone"`
}

// GetOrchestratorConfigReplacementScheduleWindowDetailsInput is an input type that accepts GetOrchestratorConfigReplacementScheduleWindowDetailsArgs and GetOrchestratorConfigReplacementScheduleWindowDetailsOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigReplacementScheduleWindowDetailsInput` via:
//
//	GetOrchestratorConfigReplacementScheduleWindowDetailsArgs{...}
type GetOrchestratorConfigReplacementScheduleWindowDetailsInput interface {
	pulumi.Input

	ToGetOrchestratorConfigReplacementScheduleWindowDetailsOutput() GetOrchestratorConfigReplacementScheduleWindowDetailsOutput
	ToGetOrchestratorConfigReplacementScheduleWindowDetailsOutputWithContext(context.Context) GetOrchestratorConfigReplacementScheduleWindowDetailsOutput
}

type GetOrchestratorConfigReplacementScheduleWindowDetailsArgs struct {
	AllDay pulumi.BoolPtrInput `pulumi:"allDay"`
	// List of days on which schedule need to be active. Valid values are SUN, MON, TUE, WED, THU, FRI and SAT.
	Days pulumi.StringArrayInput `pulumi:"days"`
	// End time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Start time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Time zone in which the schedule needs to be executed. Example Valid values: UTC, America/New*York, Europe/London, Asia/Kolkata, Asia/Tokyo, Asia/Hong*Kong, Asia/Singapore, Australia/Melbourne and Australia/Sydney.
	TimeZone pulumi.StringInput `pulumi:"timeZone"`
}

func (GetOrchestratorConfigReplacementScheduleWindowDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigReplacementScheduleWindowDetails)(nil)).Elem()
}

func (i GetOrchestratorConfigReplacementScheduleWindowDetailsArgs) ToGetOrchestratorConfigReplacementScheduleWindowDetailsOutput() GetOrchestratorConfigReplacementScheduleWindowDetailsOutput {
	return i.ToGetOrchestratorConfigReplacementScheduleWindowDetailsOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigReplacementScheduleWindowDetailsArgs) ToGetOrchestratorConfigReplacementScheduleWindowDetailsOutputWithContext(ctx context.Context) GetOrchestratorConfigReplacementScheduleWindowDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigReplacementScheduleWindowDetailsOutput)
}

func (i GetOrchestratorConfigReplacementScheduleWindowDetailsArgs) ToGetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput() GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput {
	return i.ToGetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutputWithContext(context.Background())
}

func (i GetOrchestratorConfigReplacementScheduleWindowDetailsArgs) ToGetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigReplacementScheduleWindowDetailsOutput).ToGetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutputWithContext(ctx)
}

// GetOrchestratorConfigReplacementScheduleWindowDetailsPtrInput is an input type that accepts GetOrchestratorConfigReplacementScheduleWindowDetailsArgs, GetOrchestratorConfigReplacementScheduleWindowDetailsPtr and GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput values.
// You can construct a concrete instance of `GetOrchestratorConfigReplacementScheduleWindowDetailsPtrInput` via:
//
//	        GetOrchestratorConfigReplacementScheduleWindowDetailsArgs{...}
//
//	or:
//
//	        nil
type GetOrchestratorConfigReplacementScheduleWindowDetailsPtrInput interface {
	pulumi.Input

	ToGetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput() GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput
	ToGetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutputWithContext(context.Context) GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput
}

type getOrchestratorConfigReplacementScheduleWindowDetailsPtrType GetOrchestratorConfigReplacementScheduleWindowDetailsArgs

func GetOrchestratorConfigReplacementScheduleWindowDetailsPtr(v *GetOrchestratorConfigReplacementScheduleWindowDetailsArgs) GetOrchestratorConfigReplacementScheduleWindowDetailsPtrInput {
	return (*getOrchestratorConfigReplacementScheduleWindowDetailsPtrType)(v)
}

func (*getOrchestratorConfigReplacementScheduleWindowDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigReplacementScheduleWindowDetails)(nil)).Elem()
}

func (i *getOrchestratorConfigReplacementScheduleWindowDetailsPtrType) ToGetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput() GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput {
	return i.ToGetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutputWithContext(context.Background())
}

func (i *getOrchestratorConfigReplacementScheduleWindowDetailsPtrType) ToGetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput)
}

type GetOrchestratorConfigReplacementScheduleWindowDetailsOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigReplacementScheduleWindowDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrchestratorConfigReplacementScheduleWindowDetails)(nil)).Elem()
}

func (o GetOrchestratorConfigReplacementScheduleWindowDetailsOutput) ToGetOrchestratorConfigReplacementScheduleWindowDetailsOutput() GetOrchestratorConfigReplacementScheduleWindowDetailsOutput {
	return o
}

func (o GetOrchestratorConfigReplacementScheduleWindowDetailsOutput) ToGetOrchestratorConfigReplacementScheduleWindowDetailsOutputWithContext(ctx context.Context) GetOrchestratorConfigReplacementScheduleWindowDetailsOutput {
	return o
}

func (o GetOrchestratorConfigReplacementScheduleWindowDetailsOutput) ToGetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput() GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput {
	return o.ToGetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutputWithContext(context.Background())
}

func (o GetOrchestratorConfigReplacementScheduleWindowDetailsOutput) ToGetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetOrchestratorConfigReplacementScheduleWindowDetails) *GetOrchestratorConfigReplacementScheduleWindowDetails {
		return &v
	}).(GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput)
}

func (o GetOrchestratorConfigReplacementScheduleWindowDetailsOutput) AllDay() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetOrchestratorConfigReplacementScheduleWindowDetails) *bool { return v.AllDay }).(pulumi.BoolPtrOutput)
}

// List of days on which schedule need to be active. Valid values are SUN, MON, TUE, WED, THU, FRI and SAT.
func (o GetOrchestratorConfigReplacementScheduleWindowDetailsOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetOrchestratorConfigReplacementScheduleWindowDetails) []string { return v.Days }).(pulumi.StringArrayOutput)
}

// End time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
func (o GetOrchestratorConfigReplacementScheduleWindowDetailsOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOrchestratorConfigReplacementScheduleWindowDetails) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Start time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
func (o GetOrchestratorConfigReplacementScheduleWindowDetailsOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOrchestratorConfigReplacementScheduleWindowDetails) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Time zone in which the schedule needs to be executed. Example Valid values: UTC, America/New*York, Europe/London, Asia/Kolkata, Asia/Tokyo, Asia/Hong*Kong, Asia/Singapore, Australia/Melbourne and Australia/Sydney.
func (o GetOrchestratorConfigReplacementScheduleWindowDetailsOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrchestratorConfigReplacementScheduleWindowDetails) string { return v.TimeZone }).(pulumi.StringOutput)
}

type GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput struct{ *pulumi.OutputState }

func (GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetOrchestratorConfigReplacementScheduleWindowDetails)(nil)).Elem()
}

func (o GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput) ToGetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput() GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput {
	return o
}

func (o GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput) ToGetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutputWithContext(ctx context.Context) GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput {
	return o
}

func (o GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput) Elem() GetOrchestratorConfigReplacementScheduleWindowDetailsOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigReplacementScheduleWindowDetails) GetOrchestratorConfigReplacementScheduleWindowDetails {
		if v != nil {
			return *v
		}
		var ret GetOrchestratorConfigReplacementScheduleWindowDetails
		return ret
	}).(GetOrchestratorConfigReplacementScheduleWindowDetailsOutput)
}

func (o GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput) AllDay() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigReplacementScheduleWindowDetails) *bool {
		if v == nil {
			return nil
		}
		return v.AllDay
	}).(pulumi.BoolPtrOutput)
}

// List of days on which schedule need to be active. Valid values are SUN, MON, TUE, WED, THU, FRI and SAT.
func (o GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigReplacementScheduleWindowDetails) []string {
		if v == nil {
			return nil
		}
		return v.Days
	}).(pulumi.StringArrayOutput)
}

// End time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
func (o GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigReplacementScheduleWindowDetails) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Start time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
func (o GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigReplacementScheduleWindowDetails) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Time zone in which the schedule needs to be executed. Example Valid values: UTC, America/New*York, Europe/London, Asia/Kolkata, Asia/Tokyo, Asia/Hong*Kong, Asia/Singapore, Australia/Melbourne and Australia/Sydney.
func (o GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetOrchestratorConfigReplacementScheduleWindowDetails) *string {
		if v == nil {
			return nil
		}
		return &v.TimeZone
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigBinpackingInput)(nil)).Elem(), OrchestratorConfigBinpackingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigBinpackingPtrInput)(nil)).Elem(), OrchestratorConfigBinpackingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigBinpackingDisruptionInput)(nil)).Elem(), OrchestratorConfigBinpackingDisruptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigBinpackingDisruptionPtrInput)(nil)).Elem(), OrchestratorConfigBinpackingDisruptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigBinpackingDisruptionBudgetInput)(nil)).Elem(), OrchestratorConfigBinpackingDisruptionBudgetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigBinpackingDisruptionBudgetArrayInput)(nil)).Elem(), OrchestratorConfigBinpackingDisruptionBudgetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigBinpackingDisruptionBudgetScheduleInput)(nil)).Elem(), OrchestratorConfigBinpackingDisruptionBudgetScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrInput)(nil)).Elem(), OrchestratorConfigBinpackingDisruptionBudgetScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigBinpackingPodEvictionInput)(nil)).Elem(), OrchestratorConfigBinpackingPodEvictionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigBinpackingPodEvictionPtrInput)(nil)).Elem(), OrchestratorConfigBinpackingPodEvictionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigBinpackingPodEvictionThresholdInput)(nil)).Elem(), OrchestratorConfigBinpackingPodEvictionThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigBinpackingPodEvictionThresholdPtrInput)(nil)).Elem(), OrchestratorConfigBinpackingPodEvictionThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigCommitmentIntegrationInput)(nil)).Elem(), OrchestratorConfigCommitmentIntegrationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigCommitmentIntegrationPtrInput)(nil)).Elem(), OrchestratorConfigCommitmentIntegrationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigDistributionInput)(nil)).Elem(), OrchestratorConfigDistributionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigDistributionPtrInput)(nil)).Elem(), OrchestratorConfigDistributionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigNodePreferencesInput)(nil)).Elem(), OrchestratorConfigNodePreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigNodePreferencesPtrInput)(nil)).Elem(), OrchestratorConfigNodePreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigReplacementScheduleInput)(nil)).Elem(), OrchestratorConfigReplacementScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigReplacementSchedulePtrInput)(nil)).Elem(), OrchestratorConfigReplacementScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigReplacementScheduleAppliesToInput)(nil)).Elem(), OrchestratorConfigReplacementScheduleAppliesToArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigReplacementScheduleAppliesToPtrInput)(nil)).Elem(), OrchestratorConfigReplacementScheduleAppliesToArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigReplacementScheduleWindowDetailsInput)(nil)).Elem(), OrchestratorConfigReplacementScheduleWindowDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratorConfigReplacementScheduleWindowDetailsPtrInput)(nil)).Elem(), OrchestratorConfigReplacementScheduleWindowDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigBinpackingInput)(nil)).Elem(), GetOrchestratorConfigBinpackingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigBinpackingPtrInput)(nil)).Elem(), GetOrchestratorConfigBinpackingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigBinpackingDisruptionInput)(nil)).Elem(), GetOrchestratorConfigBinpackingDisruptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigBinpackingDisruptionPtrInput)(nil)).Elem(), GetOrchestratorConfigBinpackingDisruptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigBinpackingDisruptionBudgetInput)(nil)).Elem(), GetOrchestratorConfigBinpackingDisruptionBudgetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigBinpackingDisruptionBudgetArrayInput)(nil)).Elem(), GetOrchestratorConfigBinpackingDisruptionBudgetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigBinpackingDisruptionBudgetScheduleInput)(nil)).Elem(), GetOrchestratorConfigBinpackingDisruptionBudgetScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrInput)(nil)).Elem(), GetOrchestratorConfigBinpackingDisruptionBudgetScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigBinpackingPodEvictionInput)(nil)).Elem(), GetOrchestratorConfigBinpackingPodEvictionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigBinpackingPodEvictionPtrInput)(nil)).Elem(), GetOrchestratorConfigBinpackingPodEvictionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigBinpackingPodEvictionThresholdInput)(nil)).Elem(), GetOrchestratorConfigBinpackingPodEvictionThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigBinpackingPodEvictionThresholdPtrInput)(nil)).Elem(), GetOrchestratorConfigBinpackingPodEvictionThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigCommitmentIntegrationInput)(nil)).Elem(), GetOrchestratorConfigCommitmentIntegrationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigCommitmentIntegrationPtrInput)(nil)).Elem(), GetOrchestratorConfigCommitmentIntegrationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigDistributionInput)(nil)).Elem(), GetOrchestratorConfigDistributionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigDistributionPtrInput)(nil)).Elem(), GetOrchestratorConfigDistributionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigNodePreferencesInput)(nil)).Elem(), GetOrchestratorConfigNodePreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigNodePreferencesPtrInput)(nil)).Elem(), GetOrchestratorConfigNodePreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigReplacementScheduleInput)(nil)).Elem(), GetOrchestratorConfigReplacementScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigReplacementSchedulePtrInput)(nil)).Elem(), GetOrchestratorConfigReplacementScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigReplacementScheduleAppliesToInput)(nil)).Elem(), GetOrchestratorConfigReplacementScheduleAppliesToArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigReplacementScheduleAppliesToPtrInput)(nil)).Elem(), GetOrchestratorConfigReplacementScheduleAppliesToArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigReplacementScheduleWindowDetailsInput)(nil)).Elem(), GetOrchestratorConfigReplacementScheduleWindowDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrchestratorConfigReplacementScheduleWindowDetailsPtrInput)(nil)).Elem(), GetOrchestratorConfigReplacementScheduleWindowDetailsArgs{})
	pulumi.RegisterOutputType(OrchestratorConfigBinpackingOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigBinpackingPtrOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigBinpackingDisruptionOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigBinpackingDisruptionPtrOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigBinpackingDisruptionBudgetOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigBinpackingDisruptionBudgetArrayOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigBinpackingDisruptionBudgetScheduleOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigBinpackingPodEvictionOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigBinpackingPodEvictionPtrOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigBinpackingPodEvictionThresholdOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigBinpackingPodEvictionThresholdPtrOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigCommitmentIntegrationOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigCommitmentIntegrationPtrOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigDistributionOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigDistributionPtrOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigNodePreferencesOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigNodePreferencesPtrOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigReplacementScheduleOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigReplacementSchedulePtrOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigReplacementScheduleAppliesToOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigReplacementScheduleAppliesToPtrOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigReplacementScheduleWindowDetailsOutput{})
	pulumi.RegisterOutputType(OrchestratorConfigReplacementScheduleWindowDetailsPtrOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigBinpackingOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigBinpackingPtrOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigBinpackingDisruptionOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigBinpackingDisruptionPtrOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigBinpackingDisruptionBudgetOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigBinpackingDisruptionBudgetArrayOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigBinpackingDisruptionBudgetScheduleOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigBinpackingDisruptionBudgetSchedulePtrOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigBinpackingPodEvictionOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigBinpackingPodEvictionPtrOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigBinpackingPodEvictionThresholdOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigBinpackingPodEvictionThresholdPtrOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigCommitmentIntegrationOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigCommitmentIntegrationPtrOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigDistributionOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigDistributionPtrOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigNodePreferencesOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigNodePreferencesPtrOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigReplacementScheduleOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigReplacementSchedulePtrOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigReplacementScheduleAppliesToOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigReplacementScheduleAppliesToPtrOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigReplacementScheduleWindowDetailsOutput{})
	pulumi.RegisterOutputType(GetOrchestratorConfigReplacementScheduleWindowDetailsPtrOutput{})
}
