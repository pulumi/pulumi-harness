// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Docker connector.
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import account level docker connector
//
// ```sh
// $ pulumi import harness:platform/dockerConnector:DockerConnector example <connector_id>
// ```
//
// # Import org level docker connector
//
// ```sh
// $ pulumi import harness:platform/dockerConnector:DockerConnector example <ord_id>/<connector_id>
// ```
//
// # Import project level docker connector
//
// ```sh
// $ pulumi import harness:platform/dockerConnector:DockerConnector example <org_id>/<project_id>/<connector_id>
// ```
type DockerConnector struct {
	pulumi.CustomResourceState

	// The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.
	Credentials DockerConnectorCredentialsPtrOutput `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Execute on delegate or not.
	ExecuteOnDelegate pulumi.BoolPtrOutput `pulumi:"executeOnDelegate"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay
	Type pulumi.StringOutput `pulumi:"type"`
	// The URL of the docker registry.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewDockerConnector registers a new resource with the given unique name, arguments, and options.
func NewDockerConnector(ctx *pulumi.Context,
	name string, args *DockerConnectorArgs, opts ...pulumi.ResourceOption) (*DockerConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DockerConnector
	err := ctx.RegisterResource("harness:platform/dockerConnector:DockerConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDockerConnector gets an existing DockerConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDockerConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DockerConnectorState, opts ...pulumi.ResourceOption) (*DockerConnector, error) {
	var resource DockerConnector
	err := ctx.ReadResource("harness:platform/dockerConnector:DockerConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DockerConnector resources.
type dockerConnectorState struct {
	// The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.
	Credentials *DockerConnectorCredentials `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Execute on delegate or not.
	ExecuteOnDelegate *bool `pulumi:"executeOnDelegate"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay
	Type *string `pulumi:"type"`
	// The URL of the docker registry.
	Url *string `pulumi:"url"`
}

type DockerConnectorState struct {
	// The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.
	Credentials DockerConnectorCredentialsPtrInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Execute on delegate or not.
	ExecuteOnDelegate pulumi.BoolPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay
	Type pulumi.StringPtrInput
	// The URL of the docker registry.
	Url pulumi.StringPtrInput
}

func (DockerConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*dockerConnectorState)(nil)).Elem()
}

type dockerConnectorArgs struct {
	// The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.
	Credentials *DockerConnectorCredentials `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Execute on delegate or not.
	ExecuteOnDelegate *bool `pulumi:"executeOnDelegate"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay
	Type string `pulumi:"type"`
	// The URL of the docker registry.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a DockerConnector resource.
type DockerConnectorArgs struct {
	// The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.
	Credentials DockerConnectorCredentialsPtrInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Execute on delegate or not.
	ExecuteOnDelegate pulumi.BoolPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay
	Type pulumi.StringInput
	// The URL of the docker registry.
	Url pulumi.StringInput
}

func (DockerConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dockerConnectorArgs)(nil)).Elem()
}

type DockerConnectorInput interface {
	pulumi.Input

	ToDockerConnectorOutput() DockerConnectorOutput
	ToDockerConnectorOutputWithContext(ctx context.Context) DockerConnectorOutput
}

func (*DockerConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerConnector)(nil)).Elem()
}

func (i *DockerConnector) ToDockerConnectorOutput() DockerConnectorOutput {
	return i.ToDockerConnectorOutputWithContext(context.Background())
}

func (i *DockerConnector) ToDockerConnectorOutputWithContext(ctx context.Context) DockerConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerConnectorOutput)
}

// DockerConnectorArrayInput is an input type that accepts DockerConnectorArray and DockerConnectorArrayOutput values.
// You can construct a concrete instance of `DockerConnectorArrayInput` via:
//
//	DockerConnectorArray{ DockerConnectorArgs{...} }
type DockerConnectorArrayInput interface {
	pulumi.Input

	ToDockerConnectorArrayOutput() DockerConnectorArrayOutput
	ToDockerConnectorArrayOutputWithContext(context.Context) DockerConnectorArrayOutput
}

type DockerConnectorArray []DockerConnectorInput

func (DockerConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DockerConnector)(nil)).Elem()
}

func (i DockerConnectorArray) ToDockerConnectorArrayOutput() DockerConnectorArrayOutput {
	return i.ToDockerConnectorArrayOutputWithContext(context.Background())
}

func (i DockerConnectorArray) ToDockerConnectorArrayOutputWithContext(ctx context.Context) DockerConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerConnectorArrayOutput)
}

// DockerConnectorMapInput is an input type that accepts DockerConnectorMap and DockerConnectorMapOutput values.
// You can construct a concrete instance of `DockerConnectorMapInput` via:
//
//	DockerConnectorMap{ "key": DockerConnectorArgs{...} }
type DockerConnectorMapInput interface {
	pulumi.Input

	ToDockerConnectorMapOutput() DockerConnectorMapOutput
	ToDockerConnectorMapOutputWithContext(context.Context) DockerConnectorMapOutput
}

type DockerConnectorMap map[string]DockerConnectorInput

func (DockerConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DockerConnector)(nil)).Elem()
}

func (i DockerConnectorMap) ToDockerConnectorMapOutput() DockerConnectorMapOutput {
	return i.ToDockerConnectorMapOutputWithContext(context.Background())
}

func (i DockerConnectorMap) ToDockerConnectorMapOutputWithContext(ctx context.Context) DockerConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerConnectorMapOutput)
}

type DockerConnectorOutput struct{ *pulumi.OutputState }

func (DockerConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerConnector)(nil)).Elem()
}

func (o DockerConnectorOutput) ToDockerConnectorOutput() DockerConnectorOutput {
	return o
}

func (o DockerConnectorOutput) ToDockerConnectorOutputWithContext(ctx context.Context) DockerConnectorOutput {
	return o
}

// The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.
func (o DockerConnectorOutput) Credentials() DockerConnectorCredentialsPtrOutput {
	return o.ApplyT(func(v *DockerConnector) DockerConnectorCredentialsPtrOutput { return v.Credentials }).(DockerConnectorCredentialsPtrOutput)
}

// Tags to filter delegates for connection.
func (o DockerConnectorOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DockerConnector) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o DockerConnectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerConnector) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Execute on delegate or not.
func (o DockerConnectorOutput) ExecuteOnDelegate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DockerConnector) pulumi.BoolPtrOutput { return v.ExecuteOnDelegate }).(pulumi.BoolPtrOutput)
}

// Unique identifier of the resource.
func (o DockerConnectorOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *DockerConnector) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o DockerConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DockerConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o DockerConnectorOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerConnector) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o DockerConnectorOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerConnector) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o DockerConnectorOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DockerConnector) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay
func (o DockerConnectorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DockerConnector) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The URL of the docker registry.
func (o DockerConnectorOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *DockerConnector) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type DockerConnectorArrayOutput struct{ *pulumi.OutputState }

func (DockerConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DockerConnector)(nil)).Elem()
}

func (o DockerConnectorArrayOutput) ToDockerConnectorArrayOutput() DockerConnectorArrayOutput {
	return o
}

func (o DockerConnectorArrayOutput) ToDockerConnectorArrayOutputWithContext(ctx context.Context) DockerConnectorArrayOutput {
	return o
}

func (o DockerConnectorArrayOutput) Index(i pulumi.IntInput) DockerConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DockerConnector {
		return vs[0].([]*DockerConnector)[vs[1].(int)]
	}).(DockerConnectorOutput)
}

type DockerConnectorMapOutput struct{ *pulumi.OutputState }

func (DockerConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DockerConnector)(nil)).Elem()
}

func (o DockerConnectorMapOutput) ToDockerConnectorMapOutput() DockerConnectorMapOutput {
	return o
}

func (o DockerConnectorMapOutput) ToDockerConnectorMapOutputWithContext(ctx context.Context) DockerConnectorMapOutput {
	return o
}

func (o DockerConnectorMapOutput) MapIndex(k pulumi.StringInput) DockerConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DockerConnector {
		return vs[0].(map[string]*DockerConnector)[vs[1].(string)]
	}).(DockerConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DockerConnectorInput)(nil)).Elem(), &DockerConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerConnectorArrayInput)(nil)).Elem(), DockerConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerConnectorMapInput)(nil)).Elem(), DockerConnectorMap{})
	pulumi.RegisterOutputType(DockerConnectorOutput{})
	pulumi.RegisterOutputType(DockerConnectorArrayOutput{})
	pulumi.RegisterOutputType(DockerConnectorMapOutput{})
}
