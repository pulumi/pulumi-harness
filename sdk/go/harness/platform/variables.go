// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Harness Variables.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewVariables(ctx, "test", &platform.VariablesArgs{
//				Identifier: pulumi.String("identifier"),
//				Name:       pulumi.String("name"),
//				OrgId:      pulumi.String("org_id"),
//				ProjectId:  pulumi.String("project_id"),
//				Type:       pulumi.String("String"),
//				Spec: &platform.VariablesSpecArgs{
//					ValueType:  pulumi.String("FIXED"),
//					FixedValue: pulumi.String("fixedValue"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import account level variables
//
// ```sh
// $ pulumi import harness:platform/variables:Variables example <variable_id>
// ```
//
// # Import org level variables
//
// ```sh
// $ pulumi import harness:platform/variables:Variables example <ord_id>/<variable_id>
// ```
//
// # Import project level variables
//
// ```sh
// $ pulumi import harness:platform/variables:Variables example <org_id>/<project_id>/<variable_id>
// ```
type Variables struct {
	pulumi.CustomResourceState

	// Description of the entity
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the Variable
	Name pulumi.StringOutput `pulumi:"name"`
	// Organization Identifier for the Entity
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Project Identifier for the Entity
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// List of Spec Fields.
	Spec VariablesSpecOutput `pulumi:"spec"`
	// Type of Variable
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewVariables registers a new resource with the given unique name, arguments, and options.
func NewVariables(ctx *pulumi.Context,
	name string, args *VariablesArgs, opts ...pulumi.ResourceOption) (*Variables, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Variables
	err := ctx.RegisterResource("harness:platform/variables:Variables", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVariables gets an existing Variables resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVariables(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VariablesState, opts ...pulumi.ResourceOption) (*Variables, error) {
	var resource Variables
	err := ctx.ReadResource("harness:platform/variables:Variables", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Variables resources.
type variablesState struct {
	// Description of the entity
	Description *string `pulumi:"description"`
	// Unique identifier of the resource
	Identifier *string `pulumi:"identifier"`
	// Name of the Variable
	Name *string `pulumi:"name"`
	// Organization Identifier for the Entity
	OrgId *string `pulumi:"orgId"`
	// Project Identifier for the Entity
	ProjectId *string `pulumi:"projectId"`
	// List of Spec Fields.
	Spec *VariablesSpec `pulumi:"spec"`
	// Type of Variable
	Type *string `pulumi:"type"`
}

type VariablesState struct {
	// Description of the entity
	Description pulumi.StringPtrInput
	// Unique identifier of the resource
	Identifier pulumi.StringPtrInput
	// Name of the Variable
	Name pulumi.StringPtrInput
	// Organization Identifier for the Entity
	OrgId pulumi.StringPtrInput
	// Project Identifier for the Entity
	ProjectId pulumi.StringPtrInput
	// List of Spec Fields.
	Spec VariablesSpecPtrInput
	// Type of Variable
	Type pulumi.StringPtrInput
}

func (VariablesState) ElementType() reflect.Type {
	return reflect.TypeOf((*variablesState)(nil)).Elem()
}

type variablesArgs struct {
	// Description of the entity
	Description *string `pulumi:"description"`
	// Unique identifier of the resource
	Identifier string `pulumi:"identifier"`
	// Name of the Variable
	Name *string `pulumi:"name"`
	// Organization Identifier for the Entity
	OrgId *string `pulumi:"orgId"`
	// Project Identifier for the Entity
	ProjectId *string `pulumi:"projectId"`
	// List of Spec Fields.
	Spec VariablesSpec `pulumi:"spec"`
	// Type of Variable
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Variables resource.
type VariablesArgs struct {
	// Description of the entity
	Description pulumi.StringPtrInput
	// Unique identifier of the resource
	Identifier pulumi.StringInput
	// Name of the Variable
	Name pulumi.StringPtrInput
	// Organization Identifier for the Entity
	OrgId pulumi.StringPtrInput
	// Project Identifier for the Entity
	ProjectId pulumi.StringPtrInput
	// List of Spec Fields.
	Spec VariablesSpecInput
	// Type of Variable
	Type pulumi.StringInput
}

func (VariablesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*variablesArgs)(nil)).Elem()
}

type VariablesInput interface {
	pulumi.Input

	ToVariablesOutput() VariablesOutput
	ToVariablesOutputWithContext(ctx context.Context) VariablesOutput
}

func (*Variables) ElementType() reflect.Type {
	return reflect.TypeOf((**Variables)(nil)).Elem()
}

func (i *Variables) ToVariablesOutput() VariablesOutput {
	return i.ToVariablesOutputWithContext(context.Background())
}

func (i *Variables) ToVariablesOutputWithContext(ctx context.Context) VariablesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariablesOutput)
}

// VariablesArrayInput is an input type that accepts VariablesArray and VariablesArrayOutput values.
// You can construct a concrete instance of `VariablesArrayInput` via:
//
//	VariablesArray{ VariablesArgs{...} }
type VariablesArrayInput interface {
	pulumi.Input

	ToVariablesArrayOutput() VariablesArrayOutput
	ToVariablesArrayOutputWithContext(context.Context) VariablesArrayOutput
}

type VariablesArray []VariablesInput

func (VariablesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Variables)(nil)).Elem()
}

func (i VariablesArray) ToVariablesArrayOutput() VariablesArrayOutput {
	return i.ToVariablesArrayOutputWithContext(context.Background())
}

func (i VariablesArray) ToVariablesArrayOutputWithContext(ctx context.Context) VariablesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariablesArrayOutput)
}

// VariablesMapInput is an input type that accepts VariablesMap and VariablesMapOutput values.
// You can construct a concrete instance of `VariablesMapInput` via:
//
//	VariablesMap{ "key": VariablesArgs{...} }
type VariablesMapInput interface {
	pulumi.Input

	ToVariablesMapOutput() VariablesMapOutput
	ToVariablesMapOutputWithContext(context.Context) VariablesMapOutput
}

type VariablesMap map[string]VariablesInput

func (VariablesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Variables)(nil)).Elem()
}

func (i VariablesMap) ToVariablesMapOutput() VariablesMapOutput {
	return i.ToVariablesMapOutputWithContext(context.Background())
}

func (i VariablesMap) ToVariablesMapOutputWithContext(ctx context.Context) VariablesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariablesMapOutput)
}

type VariablesOutput struct{ *pulumi.OutputState }

func (VariablesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Variables)(nil)).Elem()
}

func (o VariablesOutput) ToVariablesOutput() VariablesOutput {
	return o
}

func (o VariablesOutput) ToVariablesOutputWithContext(ctx context.Context) VariablesOutput {
	return o
}

// Description of the entity
func (o VariablesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Variables) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource
func (o VariablesOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Variables) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the Variable
func (o VariablesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Variables) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Organization Identifier for the Entity
func (o VariablesOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Variables) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Project Identifier for the Entity
func (o VariablesOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Variables) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// List of Spec Fields.
func (o VariablesOutput) Spec() VariablesSpecOutput {
	return o.ApplyT(func(v *Variables) VariablesSpecOutput { return v.Spec }).(VariablesSpecOutput)
}

// Type of Variable
func (o VariablesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Variables) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type VariablesArrayOutput struct{ *pulumi.OutputState }

func (VariablesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Variables)(nil)).Elem()
}

func (o VariablesArrayOutput) ToVariablesArrayOutput() VariablesArrayOutput {
	return o
}

func (o VariablesArrayOutput) ToVariablesArrayOutputWithContext(ctx context.Context) VariablesArrayOutput {
	return o
}

func (o VariablesArrayOutput) Index(i pulumi.IntInput) VariablesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Variables {
		return vs[0].([]*Variables)[vs[1].(int)]
	}).(VariablesOutput)
}

type VariablesMapOutput struct{ *pulumi.OutputState }

func (VariablesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Variables)(nil)).Elem()
}

func (o VariablesMapOutput) ToVariablesMapOutput() VariablesMapOutput {
	return o
}

func (o VariablesMapOutput) ToVariablesMapOutputWithContext(ctx context.Context) VariablesMapOutput {
	return o
}

func (o VariablesMapOutput) MapIndex(k pulumi.StringInput) VariablesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Variables {
		return vs[0].(map[string]*Variables)[vs[1].(string)]
	}).(VariablesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VariablesInput)(nil)).Elem(), &Variables{})
	pulumi.RegisterInputType(reflect.TypeOf((*VariablesArrayInput)(nil)).Elem(), VariablesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VariablesMapInput)(nil)).Elem(), VariablesMap{})
	pulumi.RegisterOutputType(VariablesOutput{})
	pulumi.RegisterOutputType(VariablesArrayOutput{})
	pulumi.RegisterOutputType(VariablesMapOutput{})
}
