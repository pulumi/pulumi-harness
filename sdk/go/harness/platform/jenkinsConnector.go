// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// # Import account level jenkins connector
//
// ```sh
// $ pulumi import harness:platform/jenkinsConnector:JenkinsConnector example <connector_id>
// ```
//
// # Import org level jenkins connector
//
// ```sh
// $ pulumi import harness:platform/jenkinsConnector:JenkinsConnector example <ord_id>/<connector_id>
// ```
//
// # Import project level jenkins connector
//
// ```sh
// $ pulumi import harness:platform/jenkinsConnector:JenkinsConnector example <org_id>/<project_id>/<connector_id>
// ```
type JenkinsConnector struct {
	pulumi.CustomResourceState

	// This entity contains the details for Jenkins Authentication.
	Auth JenkinsConnectorAuthPtrOutput `pulumi:"auth"`
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Jenkins Url.
	JenkinsUrl pulumi.StringOutput `pulumi:"jenkinsUrl"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewJenkinsConnector registers a new resource with the given unique name, arguments, and options.
func NewJenkinsConnector(ctx *pulumi.Context,
	name string, args *JenkinsConnectorArgs, opts ...pulumi.ResourceOption) (*JenkinsConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.JenkinsUrl == nil {
		return nil, errors.New("invalid value for required argument 'JenkinsUrl'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource JenkinsConnector
	err := ctx.RegisterResource("harness:platform/jenkinsConnector:JenkinsConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJenkinsConnector gets an existing JenkinsConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJenkinsConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JenkinsConnectorState, opts ...pulumi.ResourceOption) (*JenkinsConnector, error) {
	var resource JenkinsConnector
	err := ctx.ReadResource("harness:platform/jenkinsConnector:JenkinsConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering JenkinsConnector resources.
type jenkinsConnectorState struct {
	// This entity contains the details for Jenkins Authentication.
	Auth *JenkinsConnectorAuth `pulumi:"auth"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Jenkins Url.
	JenkinsUrl *string `pulumi:"jenkinsUrl"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

type JenkinsConnectorState struct {
	// This entity contains the details for Jenkins Authentication.
	Auth JenkinsConnectorAuthPtrInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Jenkins Url.
	JenkinsUrl pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (JenkinsConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*jenkinsConnectorState)(nil)).Elem()
}

type jenkinsConnectorArgs struct {
	// This entity contains the details for Jenkins Authentication.
	Auth *JenkinsConnectorAuth `pulumi:"auth"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Jenkins Url.
	JenkinsUrl string `pulumi:"jenkinsUrl"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a JenkinsConnector resource.
type JenkinsConnectorArgs struct {
	// This entity contains the details for Jenkins Authentication.
	Auth JenkinsConnectorAuthPtrInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Jenkins Url.
	JenkinsUrl pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (JenkinsConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jenkinsConnectorArgs)(nil)).Elem()
}

type JenkinsConnectorInput interface {
	pulumi.Input

	ToJenkinsConnectorOutput() JenkinsConnectorOutput
	ToJenkinsConnectorOutputWithContext(ctx context.Context) JenkinsConnectorOutput
}

func (*JenkinsConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**JenkinsConnector)(nil)).Elem()
}

func (i *JenkinsConnector) ToJenkinsConnectorOutput() JenkinsConnectorOutput {
	return i.ToJenkinsConnectorOutputWithContext(context.Background())
}

func (i *JenkinsConnector) ToJenkinsConnectorOutputWithContext(ctx context.Context) JenkinsConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JenkinsConnectorOutput)
}

// JenkinsConnectorArrayInput is an input type that accepts JenkinsConnectorArray and JenkinsConnectorArrayOutput values.
// You can construct a concrete instance of `JenkinsConnectorArrayInput` via:
//
//	JenkinsConnectorArray{ JenkinsConnectorArgs{...} }
type JenkinsConnectorArrayInput interface {
	pulumi.Input

	ToJenkinsConnectorArrayOutput() JenkinsConnectorArrayOutput
	ToJenkinsConnectorArrayOutputWithContext(context.Context) JenkinsConnectorArrayOutput
}

type JenkinsConnectorArray []JenkinsConnectorInput

func (JenkinsConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JenkinsConnector)(nil)).Elem()
}

func (i JenkinsConnectorArray) ToJenkinsConnectorArrayOutput() JenkinsConnectorArrayOutput {
	return i.ToJenkinsConnectorArrayOutputWithContext(context.Background())
}

func (i JenkinsConnectorArray) ToJenkinsConnectorArrayOutputWithContext(ctx context.Context) JenkinsConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JenkinsConnectorArrayOutput)
}

// JenkinsConnectorMapInput is an input type that accepts JenkinsConnectorMap and JenkinsConnectorMapOutput values.
// You can construct a concrete instance of `JenkinsConnectorMapInput` via:
//
//	JenkinsConnectorMap{ "key": JenkinsConnectorArgs{...} }
type JenkinsConnectorMapInput interface {
	pulumi.Input

	ToJenkinsConnectorMapOutput() JenkinsConnectorMapOutput
	ToJenkinsConnectorMapOutputWithContext(context.Context) JenkinsConnectorMapOutput
}

type JenkinsConnectorMap map[string]JenkinsConnectorInput

func (JenkinsConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JenkinsConnector)(nil)).Elem()
}

func (i JenkinsConnectorMap) ToJenkinsConnectorMapOutput() JenkinsConnectorMapOutput {
	return i.ToJenkinsConnectorMapOutputWithContext(context.Background())
}

func (i JenkinsConnectorMap) ToJenkinsConnectorMapOutputWithContext(ctx context.Context) JenkinsConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JenkinsConnectorMapOutput)
}

type JenkinsConnectorOutput struct{ *pulumi.OutputState }

func (JenkinsConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JenkinsConnector)(nil)).Elem()
}

func (o JenkinsConnectorOutput) ToJenkinsConnectorOutput() JenkinsConnectorOutput {
	return o
}

func (o JenkinsConnectorOutput) ToJenkinsConnectorOutputWithContext(ctx context.Context) JenkinsConnectorOutput {
	return o
}

// This entity contains the details for Jenkins Authentication.
func (o JenkinsConnectorOutput) Auth() JenkinsConnectorAuthPtrOutput {
	return o.ApplyT(func(v *JenkinsConnector) JenkinsConnectorAuthPtrOutput { return v.Auth }).(JenkinsConnectorAuthPtrOutput)
}

// Tags to filter delegates for connection.
func (o JenkinsConnectorOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JenkinsConnector) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o JenkinsConnectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JenkinsConnector) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o JenkinsConnectorOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *JenkinsConnector) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Jenkins Url.
func (o JenkinsConnectorOutput) JenkinsUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *JenkinsConnector) pulumi.StringOutput { return v.JenkinsUrl }).(pulumi.StringOutput)
}

// Name of the resource.
func (o JenkinsConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *JenkinsConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o JenkinsConnectorOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JenkinsConnector) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o JenkinsConnectorOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JenkinsConnector) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o JenkinsConnectorOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JenkinsConnector) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type JenkinsConnectorArrayOutput struct{ *pulumi.OutputState }

func (JenkinsConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JenkinsConnector)(nil)).Elem()
}

func (o JenkinsConnectorArrayOutput) ToJenkinsConnectorArrayOutput() JenkinsConnectorArrayOutput {
	return o
}

func (o JenkinsConnectorArrayOutput) ToJenkinsConnectorArrayOutputWithContext(ctx context.Context) JenkinsConnectorArrayOutput {
	return o
}

func (o JenkinsConnectorArrayOutput) Index(i pulumi.IntInput) JenkinsConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *JenkinsConnector {
		return vs[0].([]*JenkinsConnector)[vs[1].(int)]
	}).(JenkinsConnectorOutput)
}

type JenkinsConnectorMapOutput struct{ *pulumi.OutputState }

func (JenkinsConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JenkinsConnector)(nil)).Elem()
}

func (o JenkinsConnectorMapOutput) ToJenkinsConnectorMapOutput() JenkinsConnectorMapOutput {
	return o
}

func (o JenkinsConnectorMapOutput) ToJenkinsConnectorMapOutputWithContext(ctx context.Context) JenkinsConnectorMapOutput {
	return o
}

func (o JenkinsConnectorMapOutput) MapIndex(k pulumi.StringInput) JenkinsConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *JenkinsConnector {
		return vs[0].(map[string]*JenkinsConnector)[vs[1].(string)]
	}).(JenkinsConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JenkinsConnectorInput)(nil)).Elem(), &JenkinsConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*JenkinsConnectorArrayInput)(nil)).Elem(), JenkinsConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JenkinsConnectorMapInput)(nil)).Elem(), JenkinsConnectorMap{})
	pulumi.RegisterOutputType(JenkinsConnectorOutput{})
	pulumi.RegisterOutputType(JenkinsConnectorArrayOutput{})
	pulumi.RegisterOutputType(JenkinsConnectorMapOutput{})
}
