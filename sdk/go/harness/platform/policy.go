// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Harness Policy.
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import using the organization id
//
// ```sh
// $ pulumi import harness:platform/policy:Policy example <organization_id>
// ```
type Policy struct {
	pulumi.CustomResourceState

	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Base branch for the new git branch.
	GitBaseBranch pulumi.StringPtrOutput `pulumi:"gitBaseBranch"`
	// Git branch for the policy.
	GitBranch pulumi.StringPtrOutput `pulumi:"gitBranch"`
	// Git commit message for the policy.
	GitCommitMsg pulumi.StringPtrOutput `pulumi:"gitCommitMsg"`
	// The existing commit sha of the file being updated
	GitCommitSha pulumi.StringOutput `pulumi:"gitCommitSha"`
	// Git connector reference for the policy.
	GitConnectorRef pulumi.StringPtrOutput `pulumi:"gitConnectorRef"`
	// The existing file id of the file being updated, not required for bitbucket files
	GitFileId pulumi.StringOutput `pulumi:"gitFileId"`
	// Flag to import the policy from git.
	GitImport pulumi.BoolPtrOutput `pulumi:"gitImport"`
	// Flag to create a new branch for the policy.
	GitIsNewBranch pulumi.BoolPtrOutput `pulumi:"gitIsNewBranch"`
	// Git path for the policy.
	GitPath pulumi.StringPtrOutput `pulumi:"gitPath"`
	// Git repository for the policy.
	GitRepo pulumi.StringPtrOutput `pulumi:"gitRepo"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Rego code for the policy.
	Rego pulumi.StringOutput `pulumi:"rego"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOption) (*Policy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Rego == nil {
		return nil, errors.New("invalid value for required argument 'Rego'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Policy
	err := ctx.RegisterResource("harness:platform/policy:Policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyState, opts ...pulumi.ResourceOption) (*Policy, error) {
	var resource Policy
	err := ctx.ReadResource("harness:platform/policy:Policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy resources.
type policyState struct {
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Base branch for the new git branch.
	GitBaseBranch *string `pulumi:"gitBaseBranch"`
	// Git branch for the policy.
	GitBranch *string `pulumi:"gitBranch"`
	// Git commit message for the policy.
	GitCommitMsg *string `pulumi:"gitCommitMsg"`
	// The existing commit sha of the file being updated
	GitCommitSha *string `pulumi:"gitCommitSha"`
	// Git connector reference for the policy.
	GitConnectorRef *string `pulumi:"gitConnectorRef"`
	// The existing file id of the file being updated, not required for bitbucket files
	GitFileId *string `pulumi:"gitFileId"`
	// Flag to import the policy from git.
	GitImport *bool `pulumi:"gitImport"`
	// Flag to create a new branch for the policy.
	GitIsNewBranch *bool `pulumi:"gitIsNewBranch"`
	// Git path for the policy.
	GitPath *string `pulumi:"gitPath"`
	// Git repository for the policy.
	GitRepo *string `pulumi:"gitRepo"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Rego code for the policy.
	Rego *string `pulumi:"rego"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

type PolicyState struct {
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Base branch for the new git branch.
	GitBaseBranch pulumi.StringPtrInput
	// Git branch for the policy.
	GitBranch pulumi.StringPtrInput
	// Git commit message for the policy.
	GitCommitMsg pulumi.StringPtrInput
	// The existing commit sha of the file being updated
	GitCommitSha pulumi.StringPtrInput
	// Git connector reference for the policy.
	GitConnectorRef pulumi.StringPtrInput
	// The existing file id of the file being updated, not required for bitbucket files
	GitFileId pulumi.StringPtrInput
	// Flag to import the policy from git.
	GitImport pulumi.BoolPtrInput
	// Flag to create a new branch for the policy.
	GitIsNewBranch pulumi.BoolPtrInput
	// Git path for the policy.
	GitPath pulumi.StringPtrInput
	// Git repository for the policy.
	GitRepo pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Rego code for the policy.
	Rego pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (PolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyState)(nil)).Elem()
}

type policyArgs struct {
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Base branch for the new git branch.
	GitBaseBranch *string `pulumi:"gitBaseBranch"`
	// Git branch for the policy.
	GitBranch *string `pulumi:"gitBranch"`
	// Git commit message for the policy.
	GitCommitMsg *string `pulumi:"gitCommitMsg"`
	// The existing commit sha of the file being updated
	GitCommitSha *string `pulumi:"gitCommitSha"`
	// Git connector reference for the policy.
	GitConnectorRef *string `pulumi:"gitConnectorRef"`
	// The existing file id of the file being updated, not required for bitbucket files
	GitFileId *string `pulumi:"gitFileId"`
	// Flag to import the policy from git.
	GitImport *bool `pulumi:"gitImport"`
	// Flag to create a new branch for the policy.
	GitIsNewBranch *bool `pulumi:"gitIsNewBranch"`
	// Git path for the policy.
	GitPath *string `pulumi:"gitPath"`
	// Git repository for the policy.
	GitRepo *string `pulumi:"gitRepo"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Rego code for the policy.
	Rego string `pulumi:"rego"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Base branch for the new git branch.
	GitBaseBranch pulumi.StringPtrInput
	// Git branch for the policy.
	GitBranch pulumi.StringPtrInput
	// Git commit message for the policy.
	GitCommitMsg pulumi.StringPtrInput
	// The existing commit sha of the file being updated
	GitCommitSha pulumi.StringPtrInput
	// Git connector reference for the policy.
	GitConnectorRef pulumi.StringPtrInput
	// The existing file id of the file being updated, not required for bitbucket files
	GitFileId pulumi.StringPtrInput
	// Flag to import the policy from git.
	GitImport pulumi.BoolPtrInput
	// Flag to create a new branch for the policy.
	GitIsNewBranch pulumi.BoolPtrInput
	// Git path for the policy.
	GitPath pulumi.StringPtrInput
	// Git repository for the policy.
	GitRepo pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Rego code for the policy.
	Rego pulumi.StringInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyArgs)(nil)).Elem()
}

type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(ctx context.Context) PolicyOutput
}

func (*Policy) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *Policy) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i *Policy) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

// PolicyArrayInput is an input type that accepts PolicyArray and PolicyArrayOutput values.
// You can construct a concrete instance of `PolicyArrayInput` via:
//
//	PolicyArray{ PolicyArgs{...} }
type PolicyArrayInput interface {
	pulumi.Input

	ToPolicyArrayOutput() PolicyArrayOutput
	ToPolicyArrayOutputWithContext(context.Context) PolicyArrayOutput
}

type PolicyArray []PolicyInput

func (PolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (i PolicyArray) ToPolicyArrayOutput() PolicyArrayOutput {
	return i.ToPolicyArrayOutputWithContext(context.Background())
}

func (i PolicyArray) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyArrayOutput)
}

// PolicyMapInput is an input type that accepts PolicyMap and PolicyMapOutput values.
// You can construct a concrete instance of `PolicyMapInput` via:
//
//	PolicyMap{ "key": PolicyArgs{...} }
type PolicyMapInput interface {
	pulumi.Input

	ToPolicyMapOutput() PolicyMapOutput
	ToPolicyMapOutputWithContext(context.Context) PolicyMapOutput
}

type PolicyMap map[string]PolicyInput

func (PolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (i PolicyMap) ToPolicyMapOutput() PolicyMapOutput {
	return i.ToPolicyMapOutputWithContext(context.Background())
}

func (i PolicyMap) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMapOutput)
}

type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

// Description of the resource.
func (o PolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Base branch for the new git branch.
func (o PolicyOutput) GitBaseBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.GitBaseBranch }).(pulumi.StringPtrOutput)
}

// Git branch for the policy.
func (o PolicyOutput) GitBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.GitBranch }).(pulumi.StringPtrOutput)
}

// Git commit message for the policy.
func (o PolicyOutput) GitCommitMsg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.GitCommitMsg }).(pulumi.StringPtrOutput)
}

// The existing commit sha of the file being updated
func (o PolicyOutput) GitCommitSha() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.GitCommitSha }).(pulumi.StringOutput)
}

// Git connector reference for the policy.
func (o PolicyOutput) GitConnectorRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.GitConnectorRef }).(pulumi.StringPtrOutput)
}

// The existing file id of the file being updated, not required for bitbucket files
func (o PolicyOutput) GitFileId() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.GitFileId }).(pulumi.StringOutput)
}

// Flag to import the policy from git.
func (o PolicyOutput) GitImport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.BoolPtrOutput { return v.GitImport }).(pulumi.BoolPtrOutput)
}

// Flag to create a new branch for the policy.
func (o PolicyOutput) GitIsNewBranch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.BoolPtrOutput { return v.GitIsNewBranch }).(pulumi.BoolPtrOutput)
}

// Git path for the policy.
func (o PolicyOutput) GitPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.GitPath }).(pulumi.StringPtrOutput)
}

// Git repository for the policy.
func (o PolicyOutput) GitRepo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.GitRepo }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o PolicyOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o PolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o PolicyOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o PolicyOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Rego code for the policy.
func (o PolicyOutput) Rego() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Rego }).(pulumi.StringOutput)
}

// Tags to associate with the resource.
func (o PolicyOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type PolicyArrayOutput struct{ *pulumi.OutputState }

func (PolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (o PolicyArrayOutput) ToPolicyArrayOutput() PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) Index(i pulumi.IntInput) PolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].([]*Policy)[vs[1].(int)]
	}).(PolicyOutput)
}

type PolicyMapOutput struct{ *pulumi.OutputState }

func (PolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (o PolicyMapOutput) ToPolicyMapOutput() PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) MapIndex(k pulumi.StringInput) PolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].(map[string]*Policy)[vs[1].(string)]
	}).(PolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyInput)(nil)).Elem(), &Policy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyArrayInput)(nil)).Elem(), PolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMapInput)(nil)).Elem(), PolicyMap{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyArrayOutput{})
	pulumi.RegisterOutputType(PolicyMapOutput{})
}
