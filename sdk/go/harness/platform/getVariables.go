// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness Variable.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupVariables(ctx, &platform.LookupVariablesArgs{
//				Identifier: "identifier",
//				OrgId:      pulumi.StringRef("org_id"),
//				ProjectId:  pulumi.StringRef("project_id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupVariables(ctx *pulumi.Context, args *LookupVariablesArgs, opts ...pulumi.InvokeOption) (*LookupVariablesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVariablesResult
	err := ctx.Invoke("harness:platform/getVariables:getVariables", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVariables.
type LookupVariablesArgs struct {
	// Unique identifier of the resource
	Identifier string `pulumi:"identifier"`
	// Organization Identifier for the Entity
	OrgId *string `pulumi:"orgId"`
	// Project Identifier for the Entity
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getVariables.
type LookupVariablesResult struct {
	// Description of the entity
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource
	Identifier string `pulumi:"identifier"`
	// Name of the Variable
	Name string `pulumi:"name"`
	// Organization Identifier for the Entity
	OrgId *string `pulumi:"orgId"`
	// Project Identifier for the Entity
	ProjectId *string `pulumi:"projectId"`
	// List of Spce Fields.
	Specs []GetVariablesSpec `pulumi:"specs"`
	// Type of Variable
	Type string `pulumi:"type"`
}

func LookupVariablesOutput(ctx *pulumi.Context, args LookupVariablesOutputArgs, opts ...pulumi.InvokeOption) LookupVariablesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVariablesResultOutput, error) {
			args := v.(LookupVariablesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getVariables:getVariables", args, LookupVariablesResultOutput{}, options).(LookupVariablesResultOutput), nil
		}).(LookupVariablesResultOutput)
}

// A collection of arguments for invoking getVariables.
type LookupVariablesOutputArgs struct {
	// Unique identifier of the resource
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Organization Identifier for the Entity
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Project Identifier for the Entity
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupVariablesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVariablesArgs)(nil)).Elem()
}

// A collection of values returned by getVariables.
type LookupVariablesResultOutput struct{ *pulumi.OutputState }

func (LookupVariablesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVariablesResult)(nil)).Elem()
}

func (o LookupVariablesResultOutput) ToLookupVariablesResultOutput() LookupVariablesResultOutput {
	return o
}

func (o LookupVariablesResultOutput) ToLookupVariablesResultOutputWithContext(ctx context.Context) LookupVariablesResultOutput {
	return o
}

// Description of the entity
func (o LookupVariablesResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVariablesResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVariablesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVariablesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource
func (o LookupVariablesResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVariablesResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the Variable
func (o LookupVariablesResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVariablesResult) string { return v.Name }).(pulumi.StringOutput)
}

// Organization Identifier for the Entity
func (o LookupVariablesResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVariablesResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Project Identifier for the Entity
func (o LookupVariablesResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVariablesResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// List of Spce Fields.
func (o LookupVariablesResultOutput) Specs() GetVariablesSpecArrayOutput {
	return o.ApplyT(func(v LookupVariablesResult) []GetVariablesSpec { return v.Specs }).(GetVariablesSpecArrayOutput)
}

// Type of Variable
func (o LookupVariablesResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVariablesResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVariablesResultOutput{})
}
