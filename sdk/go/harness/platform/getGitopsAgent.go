// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Datasource for fetching a Harness GitOps Agent.
func GetGitopsAgent(ctx *pulumi.Context, args *GetGitopsAgentArgs, opts ...pulumi.InvokeOption) (*GetGitopsAgentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetGitopsAgentResult
	err := ctx.Invoke("harness:platform/getGitopsAgent:getGitopsAgent", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGitopsAgent.
type GetGitopsAgentArgs struct {
	// Account identifier of the GitOps agent.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId *string `pulumi:"accountId"`
	// Identifier of the GitOps agent.
	Identifier string `pulumi:"identifier"`
	// Organization identifier of the GitOps agent.
	OrgId *string `pulumi:"orgId"`
	// Project identifier of the GitOps agent.
	ProjectId *string `pulumi:"projectId"`
	// Specify whether to retrieve the gitops agent's token. (The field agentToken will be populated only if the agent has never connected to Harness before). For retrieval of this information, the user associated to the token being used must have Gitops Agent Edit permissions
	WithCredentials *bool `pulumi:"withCredentials"`
}

// A collection of values returned by getGitopsAgent.
type GetGitopsAgentResult struct {
	// Account identifier of the GitOps agent.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId string `pulumi:"accountId"`
	// Agent token to be used for authentication of the agent with Harness.
	AgentToken string `pulumi:"agentToken"`
	// Description of the GitOps agent.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Identifier of the GitOps agent.
	Identifier string `pulumi:"identifier"`
	// This computed field specifies if the referenced agent ever successfully connected and was authenticated to harness. Note that this is different from whether the agent is currently connected. \n\nSet withCredentials to true to allow computing of this field.\n\n For retrieval of this information, the user associated to the token being used must have Gitops Agent Edit permissions
	IsAuthenticated bool `pulumi:"isAuthenticated"`
	// Metadata of the agent.
	Metadatas []GetGitopsAgentMetadata `pulumi:"metadatas"`
	// Name of the GitOps agent.
	Name string `pulumi:"name"`
	// The Operator to use for the Harness GitOps agent. Enum: "ARGO" "FLAMINGO"
	Operator string `pulumi:"operator"`
	// Organization identifier of the GitOps agent.
	OrgId *string `pulumi:"orgId"`
	// Prefixed identifier of the GitOps agent. Agent identifier prefixed with scope of the agent
	PrefixedIdentifier string `pulumi:"prefixedIdentifier"`
	// Project identifier of the GitOps agent.
	ProjectId *string `pulumi:"projectId"`
	// Tags for the GitOps agents. These can be used to search or filter the GitOps agents.
	Tags map[string]string `pulumi:"tags"`
	// Default: "AGENT*TYPE*UNSET"
	// Enum: "AGENT*TYPE*UNSET" "CONNECTED*ARGO*PROVIDER" "MANAGED*ARGO*PROVIDER"
	Type string `pulumi:"type"`
	// Specify whether to retrieve the gitops agent's token. (The field agentToken will be populated only if the agent has never connected to Harness before). For retrieval of this information, the user associated to the token being used must have Gitops Agent Edit permissions
	WithCredentials *bool `pulumi:"withCredentials"`
}

func GetGitopsAgentOutput(ctx *pulumi.Context, args GetGitopsAgentOutputArgs, opts ...pulumi.InvokeOption) GetGitopsAgentResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetGitopsAgentResultOutput, error) {
			args := v.(GetGitopsAgentArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getGitopsAgent:getGitopsAgent", args, GetGitopsAgentResultOutput{}, options).(GetGitopsAgentResultOutput), nil
		}).(GetGitopsAgentResultOutput)
}

// A collection of arguments for invoking getGitopsAgent.
type GetGitopsAgentOutputArgs struct {
	// Account identifier of the GitOps agent.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// Identifier of the GitOps agent.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Organization identifier of the GitOps agent.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Project identifier of the GitOps agent.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Specify whether to retrieve the gitops agent's token. (The field agentToken will be populated only if the agent has never connected to Harness before). For retrieval of this information, the user associated to the token being used must have Gitops Agent Edit permissions
	WithCredentials pulumi.BoolPtrInput `pulumi:"withCredentials"`
}

func (GetGitopsAgentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGitopsAgentArgs)(nil)).Elem()
}

// A collection of values returned by getGitopsAgent.
type GetGitopsAgentResultOutput struct{ *pulumi.OutputState }

func (GetGitopsAgentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGitopsAgentResult)(nil)).Elem()
}

func (o GetGitopsAgentResultOutput) ToGetGitopsAgentResultOutput() GetGitopsAgentResultOutput {
	return o
}

func (o GetGitopsAgentResultOutput) ToGetGitopsAgentResultOutputWithContext(ctx context.Context) GetGitopsAgentResultOutput {
	return o
}

// Account identifier of the GitOps agent.
//
// Deprecated: This field is deprecated and will be removed in a future release.
func (o GetGitopsAgentResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGitopsAgentResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Agent token to be used for authentication of the agent with Harness.
func (o GetGitopsAgentResultOutput) AgentToken() pulumi.StringOutput {
	return o.ApplyT(func(v GetGitopsAgentResult) string { return v.AgentToken }).(pulumi.StringOutput)
}

// Description of the GitOps agent.
func (o GetGitopsAgentResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetGitopsAgentResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetGitopsAgentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGitopsAgentResult) string { return v.Id }).(pulumi.StringOutput)
}

// Identifier of the GitOps agent.
func (o GetGitopsAgentResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v GetGitopsAgentResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// This computed field specifies if the referenced agent ever successfully connected and was authenticated to harness. Note that this is different from whether the agent is currently connected. \n\nSet withCredentials to true to allow computing of this field.\n\n For retrieval of this information, the user associated to the token being used must have Gitops Agent Edit permissions
func (o GetGitopsAgentResultOutput) IsAuthenticated() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGitopsAgentResult) bool { return v.IsAuthenticated }).(pulumi.BoolOutput)
}

// Metadata of the agent.
func (o GetGitopsAgentResultOutput) Metadatas() GetGitopsAgentMetadataArrayOutput {
	return o.ApplyT(func(v GetGitopsAgentResult) []GetGitopsAgentMetadata { return v.Metadatas }).(GetGitopsAgentMetadataArrayOutput)
}

// Name of the GitOps agent.
func (o GetGitopsAgentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGitopsAgentResult) string { return v.Name }).(pulumi.StringOutput)
}

// The Operator to use for the Harness GitOps agent. Enum: "ARGO" "FLAMINGO"
func (o GetGitopsAgentResultOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v GetGitopsAgentResult) string { return v.Operator }).(pulumi.StringOutput)
}

// Organization identifier of the GitOps agent.
func (o GetGitopsAgentResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGitopsAgentResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Prefixed identifier of the GitOps agent. Agent identifier prefixed with scope of the agent
func (o GetGitopsAgentResultOutput) PrefixedIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v GetGitopsAgentResult) string { return v.PrefixedIdentifier }).(pulumi.StringOutput)
}

// Project identifier of the GitOps agent.
func (o GetGitopsAgentResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGitopsAgentResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags for the GitOps agents. These can be used to search or filter the GitOps agents.
func (o GetGitopsAgentResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetGitopsAgentResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Default: "AGENT*TYPE*UNSET"
// Enum: "AGENT*TYPE*UNSET" "CONNECTED*ARGO*PROVIDER" "MANAGED*ARGO*PROVIDER"
func (o GetGitopsAgentResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetGitopsAgentResult) string { return v.Type }).(pulumi.StringOutput)
}

// Specify whether to retrieve the gitops agent's token. (The field agentToken will be populated only if the agent has never connected to Harness before). For retrieval of this information, the user associated to the token being used must have Gitops Agent Edit permissions
func (o GetGitopsAgentResultOutput) WithCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetGitopsAgentResult) *bool { return v.WithCredentials }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGitopsAgentResultOutput{})
}
