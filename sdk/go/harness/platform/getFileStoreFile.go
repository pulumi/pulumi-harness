// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving files.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupFileStoreFile(ctx, &platform.LookupFileStoreFileArgs{
//				Identifier: "identifier",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupFileStoreFile(ctx *pulumi.Context, args *LookupFileStoreFileArgs, opts ...pulumi.InvokeOption) (*LookupFileStoreFileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFileStoreFileResult
	err := ctx.Invoke("harness:platform/getFileStoreFile:getFileStoreFile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFileStoreFile.
type LookupFileStoreFileArgs struct {
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getFileStoreFile.
type LookupFileStoreFileResult struct {
	// File content stored on Harness File Store
	Content string `pulumi:"content"`
	// Created by
	CreatedBies []GetFileStoreFileCreatedBy `pulumi:"createdBies"`
	// Description of the resource.
	Description string `pulumi:"description"`
	// File content path to be upladed on Harness File Store
	FileContentPath string `pulumi:"fileContentPath"`
	// File usage. Valid options are MANIFEST_FILE, CONFIG, SCRIPT
	FileUsage string `pulumi:"fileUsage"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Last modified at
	LastModifiedAt int `pulumi:"lastModifiedAt"`
	// Last modified by
	LastModifiedBies []GetFileStoreFileLastModifiedBy `pulumi:"lastModifiedBies"`
	// File mime type
	MimeType string `pulumi:"mimeType"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// File parent identifier on Harness File Store
	ParentIdentifier string `pulumi:"parentIdentifier"`
	// Harness File Store file path
	Path string `pulumi:"path"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

func LookupFileStoreFileOutput(ctx *pulumi.Context, args LookupFileStoreFileOutputArgs, opts ...pulumi.InvokeOption) LookupFileStoreFileResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupFileStoreFileResultOutput, error) {
			args := v.(LookupFileStoreFileArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getFileStoreFile:getFileStoreFile", args, LookupFileStoreFileResultOutput{}, options).(LookupFileStoreFileResultOutput), nil
		}).(LookupFileStoreFileResultOutput)
}

// A collection of arguments for invoking getFileStoreFile.
type LookupFileStoreFileOutputArgs struct {
	// Unique identifier of the resource.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupFileStoreFileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFileStoreFileArgs)(nil)).Elem()
}

// A collection of values returned by getFileStoreFile.
type LookupFileStoreFileResultOutput struct{ *pulumi.OutputState }

func (LookupFileStoreFileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFileStoreFileResult)(nil)).Elem()
}

func (o LookupFileStoreFileResultOutput) ToLookupFileStoreFileResultOutput() LookupFileStoreFileResultOutput {
	return o
}

func (o LookupFileStoreFileResultOutput) ToLookupFileStoreFileResultOutputWithContext(ctx context.Context) LookupFileStoreFileResultOutput {
	return o
}

// File content stored on Harness File Store
func (o LookupFileStoreFileResultOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFileStoreFileResult) string { return v.Content }).(pulumi.StringOutput)
}

// Created by
func (o LookupFileStoreFileResultOutput) CreatedBies() GetFileStoreFileCreatedByArrayOutput {
	return o.ApplyT(func(v LookupFileStoreFileResult) []GetFileStoreFileCreatedBy { return v.CreatedBies }).(GetFileStoreFileCreatedByArrayOutput)
}

// Description of the resource.
func (o LookupFileStoreFileResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFileStoreFileResult) string { return v.Description }).(pulumi.StringOutput)
}

// File content path to be upladed on Harness File Store
func (o LookupFileStoreFileResultOutput) FileContentPath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFileStoreFileResult) string { return v.FileContentPath }).(pulumi.StringOutput)
}

// File usage. Valid options are MANIFEST_FILE, CONFIG, SCRIPT
func (o LookupFileStoreFileResultOutput) FileUsage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFileStoreFileResult) string { return v.FileUsage }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupFileStoreFileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFileStoreFileResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupFileStoreFileResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFileStoreFileResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Last modified at
func (o LookupFileStoreFileResultOutput) LastModifiedAt() pulumi.IntOutput {
	return o.ApplyT(func(v LookupFileStoreFileResult) int { return v.LastModifiedAt }).(pulumi.IntOutput)
}

// Last modified by
func (o LookupFileStoreFileResultOutput) LastModifiedBies() GetFileStoreFileLastModifiedByArrayOutput {
	return o.ApplyT(func(v LookupFileStoreFileResult) []GetFileStoreFileLastModifiedBy { return v.LastModifiedBies }).(GetFileStoreFileLastModifiedByArrayOutput)
}

// File mime type
func (o LookupFileStoreFileResultOutput) MimeType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFileStoreFileResult) string { return v.MimeType }).(pulumi.StringOutput)
}

// Name of the resource.
func (o LookupFileStoreFileResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFileStoreFileResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the organization.
func (o LookupFileStoreFileResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFileStoreFileResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// File parent identifier on Harness File Store
func (o LookupFileStoreFileResultOutput) ParentIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFileStoreFileResult) string { return v.ParentIdentifier }).(pulumi.StringOutput)
}

// Harness File Store file path
func (o LookupFileStoreFileResultOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFileStoreFileResult) string { return v.Path }).(pulumi.StringOutput)
}

// Unique identifier of the project.
func (o LookupFileStoreFileResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFileStoreFileResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o LookupFileStoreFileResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupFileStoreFileResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFileStoreFileResultOutput{})
}
