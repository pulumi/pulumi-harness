// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Harness Feature Flag Target Group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewFeatureFlagTargetGroup(ctx, "target", &platform.FeatureFlagTargetGroupArgs{
//				OrgId:       pulumi.String("test"),
//				ProjectId:   pulumi.String("test"),
//				Identifier:  pulumi.String("MY_FEATURE"),
//				Environment: pulumi.String("MY_ENVIRONMENT"),
//				Name:        pulumi.String("MY_FEATURE"),
//				AccountId:   pulumi.String("MY_ACCOUNT_ID"),
//				Includeds: pulumi.StringArray{
//					pulumi.String("target_id_1"),
//				},
//				Excludeds: pulumi.StringArray{
//					pulumi.String("target_id_2"),
//				},
//				Rules: platform.FeatureFlagTargetGroupRuleArray{
//					&platform.FeatureFlagTargetGroupRuleArgs{
//						Attribute: pulumi.String("MY_ATTRIBUTE"),
//						Op:        pulumi.String("equal"),
//						Values: pulumi.StringArray{
//							pulumi.String("MY_VALUE"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FeatureFlagTargetGroup struct {
	pulumi.CustomResourceState

	// Account Identifier
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Environment Identifier
	Environment pulumi.StringOutput `pulumi:"environment"`
	// A list of targets to exclude from the target group
	Excludeds pulumi.StringArrayOutput `pulumi:"excludeds"`
	// The unique identifier of the feature flag target group.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// A list of targets to include in the target group
	Includeds pulumi.StringArrayOutput `pulumi:"includeds"`
	// The name of the feature flag target group.
	Name pulumi.StringOutput `pulumi:"name"`
	// Organization Identifier
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Project Identifier
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The list of rules used to include targets in the target group.
	Rules FeatureFlagTargetGroupRuleArrayOutput `pulumi:"rules"`
}

// NewFeatureFlagTargetGroup registers a new resource with the given unique name, arguments, and options.
func NewFeatureFlagTargetGroup(ctx *pulumi.Context,
	name string, args *FeatureFlagTargetGroupArgs, opts ...pulumi.ResourceOption) (*FeatureFlagTargetGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeatureFlagTargetGroup
	err := ctx.RegisterResource("harness:platform/featureFlagTargetGroup:FeatureFlagTargetGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureFlagTargetGroup gets an existing FeatureFlagTargetGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureFlagTargetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureFlagTargetGroupState, opts ...pulumi.ResourceOption) (*FeatureFlagTargetGroup, error) {
	var resource FeatureFlagTargetGroup
	err := ctx.ReadResource("harness:platform/featureFlagTargetGroup:FeatureFlagTargetGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureFlagTargetGroup resources.
type featureFlagTargetGroupState struct {
	// Account Identifier
	AccountId *string `pulumi:"accountId"`
	// Environment Identifier
	Environment *string `pulumi:"environment"`
	// A list of targets to exclude from the target group
	Excludeds []string `pulumi:"excludeds"`
	// The unique identifier of the feature flag target group.
	Identifier *string `pulumi:"identifier"`
	// A list of targets to include in the target group
	Includeds []string `pulumi:"includeds"`
	// The name of the feature flag target group.
	Name *string `pulumi:"name"`
	// Organization Identifier
	OrgId *string `pulumi:"orgId"`
	// Project Identifier
	ProjectId *string `pulumi:"projectId"`
	// The list of rules used to include targets in the target group.
	Rules []FeatureFlagTargetGroupRule `pulumi:"rules"`
}

type FeatureFlagTargetGroupState struct {
	// Account Identifier
	AccountId pulumi.StringPtrInput
	// Environment Identifier
	Environment pulumi.StringPtrInput
	// A list of targets to exclude from the target group
	Excludeds pulumi.StringArrayInput
	// The unique identifier of the feature flag target group.
	Identifier pulumi.StringPtrInput
	// A list of targets to include in the target group
	Includeds pulumi.StringArrayInput
	// The name of the feature flag target group.
	Name pulumi.StringPtrInput
	// Organization Identifier
	OrgId pulumi.StringPtrInput
	// Project Identifier
	ProjectId pulumi.StringPtrInput
	// The list of rules used to include targets in the target group.
	Rules FeatureFlagTargetGroupRuleArrayInput
}

func (FeatureFlagTargetGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureFlagTargetGroupState)(nil)).Elem()
}

type featureFlagTargetGroupArgs struct {
	// Account Identifier
	AccountId string `pulumi:"accountId"`
	// Environment Identifier
	Environment string `pulumi:"environment"`
	// A list of targets to exclude from the target group
	Excludeds []string `pulumi:"excludeds"`
	// The unique identifier of the feature flag target group.
	Identifier string `pulumi:"identifier"`
	// A list of targets to include in the target group
	Includeds []string `pulumi:"includeds"`
	// The name of the feature flag target group.
	Name *string `pulumi:"name"`
	// Organization Identifier
	OrgId string `pulumi:"orgId"`
	// Project Identifier
	ProjectId string `pulumi:"projectId"`
	// The list of rules used to include targets in the target group.
	Rules []FeatureFlagTargetGroupRule `pulumi:"rules"`
}

// The set of arguments for constructing a FeatureFlagTargetGroup resource.
type FeatureFlagTargetGroupArgs struct {
	// Account Identifier
	AccountId pulumi.StringInput
	// Environment Identifier
	Environment pulumi.StringInput
	// A list of targets to exclude from the target group
	Excludeds pulumi.StringArrayInput
	// The unique identifier of the feature flag target group.
	Identifier pulumi.StringInput
	// A list of targets to include in the target group
	Includeds pulumi.StringArrayInput
	// The name of the feature flag target group.
	Name pulumi.StringPtrInput
	// Organization Identifier
	OrgId pulumi.StringInput
	// Project Identifier
	ProjectId pulumi.StringInput
	// The list of rules used to include targets in the target group.
	Rules FeatureFlagTargetGroupRuleArrayInput
}

func (FeatureFlagTargetGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureFlagTargetGroupArgs)(nil)).Elem()
}

type FeatureFlagTargetGroupInput interface {
	pulumi.Input

	ToFeatureFlagTargetGroupOutput() FeatureFlagTargetGroupOutput
	ToFeatureFlagTargetGroupOutputWithContext(ctx context.Context) FeatureFlagTargetGroupOutput
}

func (*FeatureFlagTargetGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureFlagTargetGroup)(nil)).Elem()
}

func (i *FeatureFlagTargetGroup) ToFeatureFlagTargetGroupOutput() FeatureFlagTargetGroupOutput {
	return i.ToFeatureFlagTargetGroupOutputWithContext(context.Background())
}

func (i *FeatureFlagTargetGroup) ToFeatureFlagTargetGroupOutputWithContext(ctx context.Context) FeatureFlagTargetGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagTargetGroupOutput)
}

// FeatureFlagTargetGroupArrayInput is an input type that accepts FeatureFlagTargetGroupArray and FeatureFlagTargetGroupArrayOutput values.
// You can construct a concrete instance of `FeatureFlagTargetGroupArrayInput` via:
//
//	FeatureFlagTargetGroupArray{ FeatureFlagTargetGroupArgs{...} }
type FeatureFlagTargetGroupArrayInput interface {
	pulumi.Input

	ToFeatureFlagTargetGroupArrayOutput() FeatureFlagTargetGroupArrayOutput
	ToFeatureFlagTargetGroupArrayOutputWithContext(context.Context) FeatureFlagTargetGroupArrayOutput
}

type FeatureFlagTargetGroupArray []FeatureFlagTargetGroupInput

func (FeatureFlagTargetGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureFlagTargetGroup)(nil)).Elem()
}

func (i FeatureFlagTargetGroupArray) ToFeatureFlagTargetGroupArrayOutput() FeatureFlagTargetGroupArrayOutput {
	return i.ToFeatureFlagTargetGroupArrayOutputWithContext(context.Background())
}

func (i FeatureFlagTargetGroupArray) ToFeatureFlagTargetGroupArrayOutputWithContext(ctx context.Context) FeatureFlagTargetGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagTargetGroupArrayOutput)
}

// FeatureFlagTargetGroupMapInput is an input type that accepts FeatureFlagTargetGroupMap and FeatureFlagTargetGroupMapOutput values.
// You can construct a concrete instance of `FeatureFlagTargetGroupMapInput` via:
//
//	FeatureFlagTargetGroupMap{ "key": FeatureFlagTargetGroupArgs{...} }
type FeatureFlagTargetGroupMapInput interface {
	pulumi.Input

	ToFeatureFlagTargetGroupMapOutput() FeatureFlagTargetGroupMapOutput
	ToFeatureFlagTargetGroupMapOutputWithContext(context.Context) FeatureFlagTargetGroupMapOutput
}

type FeatureFlagTargetGroupMap map[string]FeatureFlagTargetGroupInput

func (FeatureFlagTargetGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureFlagTargetGroup)(nil)).Elem()
}

func (i FeatureFlagTargetGroupMap) ToFeatureFlagTargetGroupMapOutput() FeatureFlagTargetGroupMapOutput {
	return i.ToFeatureFlagTargetGroupMapOutputWithContext(context.Background())
}

func (i FeatureFlagTargetGroupMap) ToFeatureFlagTargetGroupMapOutputWithContext(ctx context.Context) FeatureFlagTargetGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagTargetGroupMapOutput)
}

type FeatureFlagTargetGroupOutput struct{ *pulumi.OutputState }

func (FeatureFlagTargetGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureFlagTargetGroup)(nil)).Elem()
}

func (o FeatureFlagTargetGroupOutput) ToFeatureFlagTargetGroupOutput() FeatureFlagTargetGroupOutput {
	return o
}

func (o FeatureFlagTargetGroupOutput) ToFeatureFlagTargetGroupOutputWithContext(ctx context.Context) FeatureFlagTargetGroupOutput {
	return o
}

// Account Identifier
func (o FeatureFlagTargetGroupOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureFlagTargetGroup) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Environment Identifier
func (o FeatureFlagTargetGroupOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureFlagTargetGroup) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// A list of targets to exclude from the target group
func (o FeatureFlagTargetGroupOutput) Excludeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FeatureFlagTargetGroup) pulumi.StringArrayOutput { return v.Excludeds }).(pulumi.StringArrayOutput)
}

// The unique identifier of the feature flag target group.
func (o FeatureFlagTargetGroupOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureFlagTargetGroup) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// A list of targets to include in the target group
func (o FeatureFlagTargetGroupOutput) Includeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FeatureFlagTargetGroup) pulumi.StringArrayOutput { return v.Includeds }).(pulumi.StringArrayOutput)
}

// The name of the feature flag target group.
func (o FeatureFlagTargetGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureFlagTargetGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Organization Identifier
func (o FeatureFlagTargetGroupOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureFlagTargetGroup) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Project Identifier
func (o FeatureFlagTargetGroupOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureFlagTargetGroup) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The list of rules used to include targets in the target group.
func (o FeatureFlagTargetGroupOutput) Rules() FeatureFlagTargetGroupRuleArrayOutput {
	return o.ApplyT(func(v *FeatureFlagTargetGroup) FeatureFlagTargetGroupRuleArrayOutput { return v.Rules }).(FeatureFlagTargetGroupRuleArrayOutput)
}

type FeatureFlagTargetGroupArrayOutput struct{ *pulumi.OutputState }

func (FeatureFlagTargetGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureFlagTargetGroup)(nil)).Elem()
}

func (o FeatureFlagTargetGroupArrayOutput) ToFeatureFlagTargetGroupArrayOutput() FeatureFlagTargetGroupArrayOutput {
	return o
}

func (o FeatureFlagTargetGroupArrayOutput) ToFeatureFlagTargetGroupArrayOutputWithContext(ctx context.Context) FeatureFlagTargetGroupArrayOutput {
	return o
}

func (o FeatureFlagTargetGroupArrayOutput) Index(i pulumi.IntInput) FeatureFlagTargetGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureFlagTargetGroup {
		return vs[0].([]*FeatureFlagTargetGroup)[vs[1].(int)]
	}).(FeatureFlagTargetGroupOutput)
}

type FeatureFlagTargetGroupMapOutput struct{ *pulumi.OutputState }

func (FeatureFlagTargetGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureFlagTargetGroup)(nil)).Elem()
}

func (o FeatureFlagTargetGroupMapOutput) ToFeatureFlagTargetGroupMapOutput() FeatureFlagTargetGroupMapOutput {
	return o
}

func (o FeatureFlagTargetGroupMapOutput) ToFeatureFlagTargetGroupMapOutputWithContext(ctx context.Context) FeatureFlagTargetGroupMapOutput {
	return o
}

func (o FeatureFlagTargetGroupMapOutput) MapIndex(k pulumi.StringInput) FeatureFlagTargetGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureFlagTargetGroup {
		return vs[0].(map[string]*FeatureFlagTargetGroup)[vs[1].(string)]
	}).(FeatureFlagTargetGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagTargetGroupInput)(nil)).Elem(), &FeatureFlagTargetGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagTargetGroupArrayInput)(nil)).Elem(), FeatureFlagTargetGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagTargetGroupMapInput)(nil)).Elem(), FeatureFlagTargetGroupMap{})
	pulumi.RegisterOutputType(FeatureFlagTargetGroupOutput{})
	pulumi.RegisterOutputType(FeatureFlagTargetGroupArrayOutput{})
	pulumi.RegisterOutputType(FeatureFlagTargetGroupMapOutput{})
}
