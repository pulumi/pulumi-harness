// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Datasource for looking up a Prometheus connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupPrometheusConnector(ctx, &platform.LookupPrometheusConnectorArgs{
//				Identifier: "identifier",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupPrometheusConnector(ctx *pulumi.Context, args *LookupPrometheusConnectorArgs, opts ...pulumi.InvokeOption) (*LookupPrometheusConnectorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPrometheusConnectorResult
	err := ctx.Invoke("harness:platform/getPrometheusConnector:getPrometheusConnector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPrometheusConnector.
type LookupPrometheusConnectorArgs struct {
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getPrometheusConnector.
type LookupPrometheusConnectorResult struct {
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description string `pulumi:"description"`
	// Headers.
	Headers []GetPrometheusConnectorHeader `pulumi:"headers"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Reference to the Harness secret containing the password. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
	PasswordRef string `pulumi:"passwordRef"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// URL of the Prometheus server.
	Url string `pulumi:"url"`
	// User name.
	UserName string `pulumi:"userName"`
}

func LookupPrometheusConnectorOutput(ctx *pulumi.Context, args LookupPrometheusConnectorOutputArgs, opts ...pulumi.InvokeOption) LookupPrometheusConnectorResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPrometheusConnectorResultOutput, error) {
			args := v.(LookupPrometheusConnectorArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getPrometheusConnector:getPrometheusConnector", args, LookupPrometheusConnectorResultOutput{}, options).(LookupPrometheusConnectorResultOutput), nil
		}).(LookupPrometheusConnectorResultOutput)
}

// A collection of arguments for invoking getPrometheusConnector.
type LookupPrometheusConnectorOutputArgs struct {
	// Unique identifier of the resource.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupPrometheusConnectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPrometheusConnectorArgs)(nil)).Elem()
}

// A collection of values returned by getPrometheusConnector.
type LookupPrometheusConnectorResultOutput struct{ *pulumi.OutputState }

func (LookupPrometheusConnectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPrometheusConnectorResult)(nil)).Elem()
}

func (o LookupPrometheusConnectorResultOutput) ToLookupPrometheusConnectorResultOutput() LookupPrometheusConnectorResultOutput {
	return o
}

func (o LookupPrometheusConnectorResultOutput) ToLookupPrometheusConnectorResultOutputWithContext(ctx context.Context) LookupPrometheusConnectorResultOutput {
	return o
}

// Tags to filter delegates for connection.
func (o LookupPrometheusConnectorResultOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPrometheusConnectorResult) []string { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o LookupPrometheusConnectorResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPrometheusConnectorResult) string { return v.Description }).(pulumi.StringOutput)
}

// Headers.
func (o LookupPrometheusConnectorResultOutput) Headers() GetPrometheusConnectorHeaderArrayOutput {
	return o.ApplyT(func(v LookupPrometheusConnectorResult) []GetPrometheusConnectorHeader { return v.Headers }).(GetPrometheusConnectorHeaderArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPrometheusConnectorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPrometheusConnectorResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupPrometheusConnectorResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPrometheusConnectorResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o LookupPrometheusConnectorResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPrometheusConnectorResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the organization.
func (o LookupPrometheusConnectorResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPrometheusConnectorResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Reference to the Harness secret containing the password. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
func (o LookupPrometheusConnectorResultOutput) PasswordRef() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPrometheusConnectorResult) string { return v.PasswordRef }).(pulumi.StringOutput)
}

// Unique identifier of the project.
func (o LookupPrometheusConnectorResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPrometheusConnectorResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o LookupPrometheusConnectorResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPrometheusConnectorResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// URL of the Prometheus server.
func (o LookupPrometheusConnectorResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPrometheusConnectorResult) string { return v.Url }).(pulumi.StringOutput)
}

// User name.
func (o LookupPrometheusConnectorResultOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPrometheusConnectorResult) string { return v.UserName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPrometheusConnectorResultOutput{})
}
