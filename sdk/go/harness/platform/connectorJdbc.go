// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a JDBC connector.
//
// ## Import
//
// # Import account level jdbc connector
//
// ```sh
// $ pulumi import harness:platform/connectorJdbc:ConnectorJdbc example <connector_id>
// ```
//
// # Import org level jdbc connector
//
// ```sh
// $ pulumi import harness:platform/connectorJdbc:ConnectorJdbc example <ord_id>/<connector_id>
// ```
//
// # Import project level jdbc connector
//
// ```sh
// $ pulumi import harness:platform/connectorJdbc:ConnectorJdbc example <org_id>/<project_id>/<connector_id>
// ```
type ConnectorJdbc struct {
	pulumi.CustomResourceState

	// The credentials to use for the database server.
	Credentials ConnectorJdbcCredentialsOutput `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The URL of the database server.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewConnectorJdbc registers a new resource with the given unique name, arguments, and options.
func NewConnectorJdbc(ctx *pulumi.Context,
	name string, args *ConnectorJdbcArgs, opts ...pulumi.ResourceOption) (*ConnectorJdbc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectorJdbc
	err := ctx.RegisterResource("harness:platform/connectorJdbc:ConnectorJdbc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectorJdbc gets an existing ConnectorJdbc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectorJdbc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorJdbcState, opts ...pulumi.ResourceOption) (*ConnectorJdbc, error) {
	var resource ConnectorJdbc
	err := ctx.ReadResource("harness:platform/connectorJdbc:ConnectorJdbc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectorJdbc resources.
type connectorJdbcState struct {
	// The credentials to use for the database server.
	Credentials *ConnectorJdbcCredentials `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// The URL of the database server.
	Url *string `pulumi:"url"`
}

type ConnectorJdbcState struct {
	// The credentials to use for the database server.
	Credentials ConnectorJdbcCredentialsPtrInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// The URL of the database server.
	Url pulumi.StringPtrInput
}

func (ConnectorJdbcState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorJdbcState)(nil)).Elem()
}

type connectorJdbcArgs struct {
	// The credentials to use for the database server.
	Credentials ConnectorJdbcCredentials `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// The URL of the database server.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a ConnectorJdbc resource.
type ConnectorJdbcArgs struct {
	// The credentials to use for the database server.
	Credentials ConnectorJdbcCredentialsInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// The URL of the database server.
	Url pulumi.StringInput
}

func (ConnectorJdbcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorJdbcArgs)(nil)).Elem()
}

type ConnectorJdbcInput interface {
	pulumi.Input

	ToConnectorJdbcOutput() ConnectorJdbcOutput
	ToConnectorJdbcOutputWithContext(ctx context.Context) ConnectorJdbcOutput
}

func (*ConnectorJdbc) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorJdbc)(nil)).Elem()
}

func (i *ConnectorJdbc) ToConnectorJdbcOutput() ConnectorJdbcOutput {
	return i.ToConnectorJdbcOutputWithContext(context.Background())
}

func (i *ConnectorJdbc) ToConnectorJdbcOutputWithContext(ctx context.Context) ConnectorJdbcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorJdbcOutput)
}

// ConnectorJdbcArrayInput is an input type that accepts ConnectorJdbcArray and ConnectorJdbcArrayOutput values.
// You can construct a concrete instance of `ConnectorJdbcArrayInput` via:
//
//	ConnectorJdbcArray{ ConnectorJdbcArgs{...} }
type ConnectorJdbcArrayInput interface {
	pulumi.Input

	ToConnectorJdbcArrayOutput() ConnectorJdbcArrayOutput
	ToConnectorJdbcArrayOutputWithContext(context.Context) ConnectorJdbcArrayOutput
}

type ConnectorJdbcArray []ConnectorJdbcInput

func (ConnectorJdbcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorJdbc)(nil)).Elem()
}

func (i ConnectorJdbcArray) ToConnectorJdbcArrayOutput() ConnectorJdbcArrayOutput {
	return i.ToConnectorJdbcArrayOutputWithContext(context.Background())
}

func (i ConnectorJdbcArray) ToConnectorJdbcArrayOutputWithContext(ctx context.Context) ConnectorJdbcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorJdbcArrayOutput)
}

// ConnectorJdbcMapInput is an input type that accepts ConnectorJdbcMap and ConnectorJdbcMapOutput values.
// You can construct a concrete instance of `ConnectorJdbcMapInput` via:
//
//	ConnectorJdbcMap{ "key": ConnectorJdbcArgs{...} }
type ConnectorJdbcMapInput interface {
	pulumi.Input

	ToConnectorJdbcMapOutput() ConnectorJdbcMapOutput
	ToConnectorJdbcMapOutputWithContext(context.Context) ConnectorJdbcMapOutput
}

type ConnectorJdbcMap map[string]ConnectorJdbcInput

func (ConnectorJdbcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorJdbc)(nil)).Elem()
}

func (i ConnectorJdbcMap) ToConnectorJdbcMapOutput() ConnectorJdbcMapOutput {
	return i.ToConnectorJdbcMapOutputWithContext(context.Background())
}

func (i ConnectorJdbcMap) ToConnectorJdbcMapOutputWithContext(ctx context.Context) ConnectorJdbcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorJdbcMapOutput)
}

type ConnectorJdbcOutput struct{ *pulumi.OutputState }

func (ConnectorJdbcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorJdbc)(nil)).Elem()
}

func (o ConnectorJdbcOutput) ToConnectorJdbcOutput() ConnectorJdbcOutput {
	return o
}

func (o ConnectorJdbcOutput) ToConnectorJdbcOutputWithContext(ctx context.Context) ConnectorJdbcOutput {
	return o
}

// The credentials to use for the database server.
func (o ConnectorJdbcOutput) Credentials() ConnectorJdbcCredentialsOutput {
	return o.ApplyT(func(v *ConnectorJdbc) ConnectorJdbcCredentialsOutput { return v.Credentials }).(ConnectorJdbcCredentialsOutput)
}

// Tags to filter delegates for connection.
func (o ConnectorJdbcOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorJdbc) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o ConnectorJdbcOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorJdbc) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o ConnectorJdbcOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorJdbc) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o ConnectorJdbcOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorJdbc) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o ConnectorJdbcOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorJdbc) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o ConnectorJdbcOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorJdbc) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o ConnectorJdbcOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorJdbc) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The URL of the database server.
func (o ConnectorJdbcOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorJdbc) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type ConnectorJdbcArrayOutput struct{ *pulumi.OutputState }

func (ConnectorJdbcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorJdbc)(nil)).Elem()
}

func (o ConnectorJdbcArrayOutput) ToConnectorJdbcArrayOutput() ConnectorJdbcArrayOutput {
	return o
}

func (o ConnectorJdbcArrayOutput) ToConnectorJdbcArrayOutputWithContext(ctx context.Context) ConnectorJdbcArrayOutput {
	return o
}

func (o ConnectorJdbcArrayOutput) Index(i pulumi.IntInput) ConnectorJdbcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectorJdbc {
		return vs[0].([]*ConnectorJdbc)[vs[1].(int)]
	}).(ConnectorJdbcOutput)
}

type ConnectorJdbcMapOutput struct{ *pulumi.OutputState }

func (ConnectorJdbcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorJdbc)(nil)).Elem()
}

func (o ConnectorJdbcMapOutput) ToConnectorJdbcMapOutput() ConnectorJdbcMapOutput {
	return o
}

func (o ConnectorJdbcMapOutput) ToConnectorJdbcMapOutputWithContext(ctx context.Context) ConnectorJdbcMapOutput {
	return o
}

func (o ConnectorJdbcMapOutput) MapIndex(k pulumi.StringInput) ConnectorJdbcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectorJdbc {
		return vs[0].(map[string]*ConnectorJdbc)[vs[1].(string)]
	}).(ConnectorJdbcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorJdbcInput)(nil)).Elem(), &ConnectorJdbc{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorJdbcArrayInput)(nil)).Elem(), ConnectorJdbcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorJdbcMapInput)(nil)).Elem(), ConnectorJdbcMap{})
	pulumi.RegisterOutputType(ConnectorJdbcOutput{})
	pulumi.RegisterOutputType(ConnectorJdbcArrayOutput{})
	pulumi.RegisterOutputType(ConnectorJdbcMapOutput{})
}
