// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing infrastructure Variable Sets
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewInfraVariableSet(ctx, "example", &platform.InfraVariableSetArgs{
//				Identifier:  pulumi.String("example"),
//				Name:        pulumi.String("example"),
//				OrgId:       pulumi.Any(test.Id),
//				ProjectId:   pulumi.Any(testHarnessPlatformProject.Id),
//				Description: pulumi.String("some description"),
//				EnvironmentVariables: platform.InfraVariableSetEnvironmentVariableArray{
//					&platform.InfraVariableSetEnvironmentVariableArgs{
//						Key:       pulumi.String("key1"),
//						Value:     pulumi.String("value1"),
//						ValueType: pulumi.String("string"),
//					},
//					&platform.InfraVariableSetEnvironmentVariableArgs{
//						Key:       pulumi.String("key2"),
//						Value:     pulumi.String("harness_platform_secret_text.test.id"),
//						ValueType: pulumi.String("secret"),
//					},
//				},
//				TerraformVariables: platform.InfraVariableSetTerraformVariableArray{
//					&platform.InfraVariableSetTerraformVariableArgs{
//						Key:       pulumi.String("key1"),
//						Value:     pulumi.String("1111"),
//						ValueType: pulumi.String("string"),
//					},
//					&platform.InfraVariableSetTerraformVariableArgs{
//						Key:       pulumi.String("key2"),
//						Value:     pulumi.String("1111u"),
//						ValueType: pulumi.String("string"),
//					},
//				},
//				TerraformVariableFiles: platform.InfraVariableSetTerraformVariableFileArray{
//					&platform.InfraVariableSetTerraformVariableFileArgs{
//						Repository:          pulumi.String("https://github.com/org/repo"),
//						RepositoryBranch:    pulumi.String("main"),
//						RepositoryPath:      pulumi.String("tf/aws/basic"),
//						RepositoryConnector: pulumi.String("harness_platform_connector_github.test.id"),
//					},
//					&platform.InfraVariableSetTerraformVariableFileArgs{
//						Repository:          pulumi.String("https://github.com/org/repo"),
//						RepositoryBranch:    pulumi.String("br2"),
//						RepositoryPath:      pulumi.String("tf/aws/basic"),
//						RepositoryConnector: pulumi.String("harness_platform_connector_github.test.id"),
//					},
//				},
//				Connectors: platform.InfraVariableSetConnectorArray{
//					&platform.InfraVariableSetConnectorArgs{
//						ConnectorRef: pulumi.String("harness_platform_connector_aws.test.id"),
//						Type:         pulumi.String("aws"),
//					},
//					&platform.InfraVariableSetConnectorArgs{
//						ConnectorRef: pulumi.String("harness_platform_connector_azure.test.id"),
//						Type:         pulumi.String("azure"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import harness:platform/infraVariableSet:InfraVariableSet example <varset_id>
// ```
//
// ```sh
// $ pulumi import harness:platform/infraVariableSet:InfraVariableSet example <org_id>/<varset_id>
// ```
//
// ```sh
// $ pulumi import harness:platform/infraVariableSet:InfraVariableSet example <org_id>/<project_id>/<varset_id>
// ```
type InfraVariableSet struct {
	pulumi.CustomResourceState

	// Provider connector configured on the variable set
	Connectors InfraVariableSetConnectorArrayOutput `pulumi:"connectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Environment variables configured on the variable set
	EnvironmentVariables InfraVariableSetEnvironmentVariableArrayOutput `pulumi:"environmentVariables"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags                   pulumi.StringArrayOutput                         `pulumi:"tags"`
	TerraformVariableFiles InfraVariableSetTerraformVariableFileArrayOutput `pulumi:"terraformVariableFiles"`
	TerraformVariables     InfraVariableSetTerraformVariableArrayOutput     `pulumi:"terraformVariables"`
}

// NewInfraVariableSet registers a new resource with the given unique name, arguments, and options.
func NewInfraVariableSet(ctx *pulumi.Context,
	name string, args *InfraVariableSetArgs, opts ...pulumi.ResourceOption) (*InfraVariableSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InfraVariableSet
	err := ctx.RegisterResource("harness:platform/infraVariableSet:InfraVariableSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInfraVariableSet gets an existing InfraVariableSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInfraVariableSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InfraVariableSetState, opts ...pulumi.ResourceOption) (*InfraVariableSet, error) {
	var resource InfraVariableSet
	err := ctx.ReadResource("harness:platform/infraVariableSet:InfraVariableSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InfraVariableSet resources.
type infraVariableSetState struct {
	// Provider connector configured on the variable set
	Connectors []InfraVariableSetConnector `pulumi:"connectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Environment variables configured on the variable set
	EnvironmentVariables []InfraVariableSetEnvironmentVariable `pulumi:"environmentVariables"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags                   []string                                `pulumi:"tags"`
	TerraformVariableFiles []InfraVariableSetTerraformVariableFile `pulumi:"terraformVariableFiles"`
	TerraformVariables     []InfraVariableSetTerraformVariable     `pulumi:"terraformVariables"`
}

type InfraVariableSetState struct {
	// Provider connector configured on the variable set
	Connectors InfraVariableSetConnectorArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Environment variables configured on the variable set
	EnvironmentVariables InfraVariableSetEnvironmentVariableArrayInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags                   pulumi.StringArrayInput
	TerraformVariableFiles InfraVariableSetTerraformVariableFileArrayInput
	TerraformVariables     InfraVariableSetTerraformVariableArrayInput
}

func (InfraVariableSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*infraVariableSetState)(nil)).Elem()
}

type infraVariableSetArgs struct {
	// Provider connector configured on the variable set
	Connectors []InfraVariableSetConnector `pulumi:"connectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Environment variables configured on the variable set
	EnvironmentVariables []InfraVariableSetEnvironmentVariable `pulumi:"environmentVariables"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags                   []string                                `pulumi:"tags"`
	TerraformVariableFiles []InfraVariableSetTerraformVariableFile `pulumi:"terraformVariableFiles"`
	TerraformVariables     []InfraVariableSetTerraformVariable     `pulumi:"terraformVariables"`
}

// The set of arguments for constructing a InfraVariableSet resource.
type InfraVariableSetArgs struct {
	// Provider connector configured on the variable set
	Connectors InfraVariableSetConnectorArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Environment variables configured on the variable set
	EnvironmentVariables InfraVariableSetEnvironmentVariableArrayInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags                   pulumi.StringArrayInput
	TerraformVariableFiles InfraVariableSetTerraformVariableFileArrayInput
	TerraformVariables     InfraVariableSetTerraformVariableArrayInput
}

func (InfraVariableSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*infraVariableSetArgs)(nil)).Elem()
}

type InfraVariableSetInput interface {
	pulumi.Input

	ToInfraVariableSetOutput() InfraVariableSetOutput
	ToInfraVariableSetOutputWithContext(ctx context.Context) InfraVariableSetOutput
}

func (*InfraVariableSet) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraVariableSet)(nil)).Elem()
}

func (i *InfraVariableSet) ToInfraVariableSetOutput() InfraVariableSetOutput {
	return i.ToInfraVariableSetOutputWithContext(context.Background())
}

func (i *InfraVariableSet) ToInfraVariableSetOutputWithContext(ctx context.Context) InfraVariableSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraVariableSetOutput)
}

// InfraVariableSetArrayInput is an input type that accepts InfraVariableSetArray and InfraVariableSetArrayOutput values.
// You can construct a concrete instance of `InfraVariableSetArrayInput` via:
//
//	InfraVariableSetArray{ InfraVariableSetArgs{...} }
type InfraVariableSetArrayInput interface {
	pulumi.Input

	ToInfraVariableSetArrayOutput() InfraVariableSetArrayOutput
	ToInfraVariableSetArrayOutputWithContext(context.Context) InfraVariableSetArrayOutput
}

type InfraVariableSetArray []InfraVariableSetInput

func (InfraVariableSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InfraVariableSet)(nil)).Elem()
}

func (i InfraVariableSetArray) ToInfraVariableSetArrayOutput() InfraVariableSetArrayOutput {
	return i.ToInfraVariableSetArrayOutputWithContext(context.Background())
}

func (i InfraVariableSetArray) ToInfraVariableSetArrayOutputWithContext(ctx context.Context) InfraVariableSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraVariableSetArrayOutput)
}

// InfraVariableSetMapInput is an input type that accepts InfraVariableSetMap and InfraVariableSetMapOutput values.
// You can construct a concrete instance of `InfraVariableSetMapInput` via:
//
//	InfraVariableSetMap{ "key": InfraVariableSetArgs{...} }
type InfraVariableSetMapInput interface {
	pulumi.Input

	ToInfraVariableSetMapOutput() InfraVariableSetMapOutput
	ToInfraVariableSetMapOutputWithContext(context.Context) InfraVariableSetMapOutput
}

type InfraVariableSetMap map[string]InfraVariableSetInput

func (InfraVariableSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InfraVariableSet)(nil)).Elem()
}

func (i InfraVariableSetMap) ToInfraVariableSetMapOutput() InfraVariableSetMapOutput {
	return i.ToInfraVariableSetMapOutputWithContext(context.Background())
}

func (i InfraVariableSetMap) ToInfraVariableSetMapOutputWithContext(ctx context.Context) InfraVariableSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraVariableSetMapOutput)
}

type InfraVariableSetOutput struct{ *pulumi.OutputState }

func (InfraVariableSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraVariableSet)(nil)).Elem()
}

func (o InfraVariableSetOutput) ToInfraVariableSetOutput() InfraVariableSetOutput {
	return o
}

func (o InfraVariableSetOutput) ToInfraVariableSetOutputWithContext(ctx context.Context) InfraVariableSetOutput {
	return o
}

// Provider connector configured on the variable set
func (o InfraVariableSetOutput) Connectors() InfraVariableSetConnectorArrayOutput {
	return o.ApplyT(func(v *InfraVariableSet) InfraVariableSetConnectorArrayOutput { return v.Connectors }).(InfraVariableSetConnectorArrayOutput)
}

// Description of the resource.
func (o InfraVariableSetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfraVariableSet) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Environment variables configured on the variable set
func (o InfraVariableSetOutput) EnvironmentVariables() InfraVariableSetEnvironmentVariableArrayOutput {
	return o.ApplyT(func(v *InfraVariableSet) InfraVariableSetEnvironmentVariableArrayOutput {
		return v.EnvironmentVariables
	}).(InfraVariableSetEnvironmentVariableArrayOutput)
}

// Unique identifier of the resource.
func (o InfraVariableSetOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraVariableSet) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o InfraVariableSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraVariableSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o InfraVariableSetOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfraVariableSet) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o InfraVariableSetOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfraVariableSet) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o InfraVariableSetOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InfraVariableSet) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o InfraVariableSetOutput) TerraformVariableFiles() InfraVariableSetTerraformVariableFileArrayOutput {
	return o.ApplyT(func(v *InfraVariableSet) InfraVariableSetTerraformVariableFileArrayOutput {
		return v.TerraformVariableFiles
	}).(InfraVariableSetTerraformVariableFileArrayOutput)
}

func (o InfraVariableSetOutput) TerraformVariables() InfraVariableSetTerraformVariableArrayOutput {
	return o.ApplyT(func(v *InfraVariableSet) InfraVariableSetTerraformVariableArrayOutput { return v.TerraformVariables }).(InfraVariableSetTerraformVariableArrayOutput)
}

type InfraVariableSetArrayOutput struct{ *pulumi.OutputState }

func (InfraVariableSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InfraVariableSet)(nil)).Elem()
}

func (o InfraVariableSetArrayOutput) ToInfraVariableSetArrayOutput() InfraVariableSetArrayOutput {
	return o
}

func (o InfraVariableSetArrayOutput) ToInfraVariableSetArrayOutputWithContext(ctx context.Context) InfraVariableSetArrayOutput {
	return o
}

func (o InfraVariableSetArrayOutput) Index(i pulumi.IntInput) InfraVariableSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InfraVariableSet {
		return vs[0].([]*InfraVariableSet)[vs[1].(int)]
	}).(InfraVariableSetOutput)
}

type InfraVariableSetMapOutput struct{ *pulumi.OutputState }

func (InfraVariableSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InfraVariableSet)(nil)).Elem()
}

func (o InfraVariableSetMapOutput) ToInfraVariableSetMapOutput() InfraVariableSetMapOutput {
	return o
}

func (o InfraVariableSetMapOutput) ToInfraVariableSetMapOutputWithContext(ctx context.Context) InfraVariableSetMapOutput {
	return o
}

func (o InfraVariableSetMapOutput) MapIndex(k pulumi.StringInput) InfraVariableSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InfraVariableSet {
		return vs[0].(map[string]*InfraVariableSet)[vs[1].(string)]
	}).(InfraVariableSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InfraVariableSetInput)(nil)).Elem(), &InfraVariableSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfraVariableSetArrayInput)(nil)).Elem(), InfraVariableSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfraVariableSetMapInput)(nil)).Elem(), InfraVariableSetMap{})
	pulumi.RegisterOutputType(InfraVariableSetOutput{})
	pulumi.RegisterOutputType(InfraVariableSetArrayOutput{})
	pulumi.RegisterOutputType(InfraVariableSetMapOutput{})
}
