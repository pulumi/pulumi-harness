// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConnectorAzureArtifacts struct {
	pulumi.CustomResourceState

	// Credentials to use for authentication.
	Credentials ConnectorAzureArtifactsCredentialsOutput `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// URL of the Azure Artifacts server.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewConnectorAzureArtifacts registers a new resource with the given unique name, arguments, and options.
func NewConnectorAzureArtifacts(ctx *pulumi.Context,
	name string, args *ConnectorAzureArtifactsArgs, opts ...pulumi.ResourceOption) (*ConnectorAzureArtifacts, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectorAzureArtifacts
	err := ctx.RegisterResource("harness:platform/connectorAzureArtifacts:ConnectorAzureArtifacts", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectorAzureArtifacts gets an existing ConnectorAzureArtifacts resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectorAzureArtifacts(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorAzureArtifactsState, opts ...pulumi.ResourceOption) (*ConnectorAzureArtifacts, error) {
	var resource ConnectorAzureArtifacts
	err := ctx.ReadResource("harness:platform/connectorAzureArtifacts:ConnectorAzureArtifacts", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectorAzureArtifacts resources.
type connectorAzureArtifactsState struct {
	// Credentials to use for authentication.
	Credentials *ConnectorAzureArtifactsCredentials `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// URL of the Azure Artifacts server.
	Url *string `pulumi:"url"`
}

type ConnectorAzureArtifactsState struct {
	// Credentials to use for authentication.
	Credentials ConnectorAzureArtifactsCredentialsPtrInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// URL of the Azure Artifacts server.
	Url pulumi.StringPtrInput
}

func (ConnectorAzureArtifactsState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorAzureArtifactsState)(nil)).Elem()
}

type connectorAzureArtifactsArgs struct {
	// Credentials to use for authentication.
	Credentials ConnectorAzureArtifactsCredentials `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// URL of the Azure Artifacts server.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a ConnectorAzureArtifacts resource.
type ConnectorAzureArtifactsArgs struct {
	// Credentials to use for authentication.
	Credentials ConnectorAzureArtifactsCredentialsInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// URL of the Azure Artifacts server.
	Url pulumi.StringInput
}

func (ConnectorAzureArtifactsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorAzureArtifactsArgs)(nil)).Elem()
}

type ConnectorAzureArtifactsInput interface {
	pulumi.Input

	ToConnectorAzureArtifactsOutput() ConnectorAzureArtifactsOutput
	ToConnectorAzureArtifactsOutputWithContext(ctx context.Context) ConnectorAzureArtifactsOutput
}

func (*ConnectorAzureArtifacts) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorAzureArtifacts)(nil)).Elem()
}

func (i *ConnectorAzureArtifacts) ToConnectorAzureArtifactsOutput() ConnectorAzureArtifactsOutput {
	return i.ToConnectorAzureArtifactsOutputWithContext(context.Background())
}

func (i *ConnectorAzureArtifacts) ToConnectorAzureArtifactsOutputWithContext(ctx context.Context) ConnectorAzureArtifactsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorAzureArtifactsOutput)
}

// ConnectorAzureArtifactsArrayInput is an input type that accepts ConnectorAzureArtifactsArray and ConnectorAzureArtifactsArrayOutput values.
// You can construct a concrete instance of `ConnectorAzureArtifactsArrayInput` via:
//
//	ConnectorAzureArtifactsArray{ ConnectorAzureArtifactsArgs{...} }
type ConnectorAzureArtifactsArrayInput interface {
	pulumi.Input

	ToConnectorAzureArtifactsArrayOutput() ConnectorAzureArtifactsArrayOutput
	ToConnectorAzureArtifactsArrayOutputWithContext(context.Context) ConnectorAzureArtifactsArrayOutput
}

type ConnectorAzureArtifactsArray []ConnectorAzureArtifactsInput

func (ConnectorAzureArtifactsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorAzureArtifacts)(nil)).Elem()
}

func (i ConnectorAzureArtifactsArray) ToConnectorAzureArtifactsArrayOutput() ConnectorAzureArtifactsArrayOutput {
	return i.ToConnectorAzureArtifactsArrayOutputWithContext(context.Background())
}

func (i ConnectorAzureArtifactsArray) ToConnectorAzureArtifactsArrayOutputWithContext(ctx context.Context) ConnectorAzureArtifactsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorAzureArtifactsArrayOutput)
}

// ConnectorAzureArtifactsMapInput is an input type that accepts ConnectorAzureArtifactsMap and ConnectorAzureArtifactsMapOutput values.
// You can construct a concrete instance of `ConnectorAzureArtifactsMapInput` via:
//
//	ConnectorAzureArtifactsMap{ "key": ConnectorAzureArtifactsArgs{...} }
type ConnectorAzureArtifactsMapInput interface {
	pulumi.Input

	ToConnectorAzureArtifactsMapOutput() ConnectorAzureArtifactsMapOutput
	ToConnectorAzureArtifactsMapOutputWithContext(context.Context) ConnectorAzureArtifactsMapOutput
}

type ConnectorAzureArtifactsMap map[string]ConnectorAzureArtifactsInput

func (ConnectorAzureArtifactsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorAzureArtifacts)(nil)).Elem()
}

func (i ConnectorAzureArtifactsMap) ToConnectorAzureArtifactsMapOutput() ConnectorAzureArtifactsMapOutput {
	return i.ToConnectorAzureArtifactsMapOutputWithContext(context.Background())
}

func (i ConnectorAzureArtifactsMap) ToConnectorAzureArtifactsMapOutputWithContext(ctx context.Context) ConnectorAzureArtifactsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorAzureArtifactsMapOutput)
}

type ConnectorAzureArtifactsOutput struct{ *pulumi.OutputState }

func (ConnectorAzureArtifactsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorAzureArtifacts)(nil)).Elem()
}

func (o ConnectorAzureArtifactsOutput) ToConnectorAzureArtifactsOutput() ConnectorAzureArtifactsOutput {
	return o
}

func (o ConnectorAzureArtifactsOutput) ToConnectorAzureArtifactsOutputWithContext(ctx context.Context) ConnectorAzureArtifactsOutput {
	return o
}

// Credentials to use for authentication.
func (o ConnectorAzureArtifactsOutput) Credentials() ConnectorAzureArtifactsCredentialsOutput {
	return o.ApplyT(func(v *ConnectorAzureArtifacts) ConnectorAzureArtifactsCredentialsOutput { return v.Credentials }).(ConnectorAzureArtifactsCredentialsOutput)
}

// Tags to filter delegates for connection.
func (o ConnectorAzureArtifactsOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorAzureArtifacts) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o ConnectorAzureArtifactsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorAzureArtifacts) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o ConnectorAzureArtifactsOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorAzureArtifacts) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o ConnectorAzureArtifactsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorAzureArtifacts) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o ConnectorAzureArtifactsOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorAzureArtifacts) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o ConnectorAzureArtifactsOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorAzureArtifacts) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o ConnectorAzureArtifactsOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorAzureArtifacts) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// URL of the Azure Artifacts server.
func (o ConnectorAzureArtifactsOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorAzureArtifacts) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type ConnectorAzureArtifactsArrayOutput struct{ *pulumi.OutputState }

func (ConnectorAzureArtifactsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorAzureArtifacts)(nil)).Elem()
}

func (o ConnectorAzureArtifactsArrayOutput) ToConnectorAzureArtifactsArrayOutput() ConnectorAzureArtifactsArrayOutput {
	return o
}

func (o ConnectorAzureArtifactsArrayOutput) ToConnectorAzureArtifactsArrayOutputWithContext(ctx context.Context) ConnectorAzureArtifactsArrayOutput {
	return o
}

func (o ConnectorAzureArtifactsArrayOutput) Index(i pulumi.IntInput) ConnectorAzureArtifactsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectorAzureArtifacts {
		return vs[0].([]*ConnectorAzureArtifacts)[vs[1].(int)]
	}).(ConnectorAzureArtifactsOutput)
}

type ConnectorAzureArtifactsMapOutput struct{ *pulumi.OutputState }

func (ConnectorAzureArtifactsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorAzureArtifacts)(nil)).Elem()
}

func (o ConnectorAzureArtifactsMapOutput) ToConnectorAzureArtifactsMapOutput() ConnectorAzureArtifactsMapOutput {
	return o
}

func (o ConnectorAzureArtifactsMapOutput) ToConnectorAzureArtifactsMapOutputWithContext(ctx context.Context) ConnectorAzureArtifactsMapOutput {
	return o
}

func (o ConnectorAzureArtifactsMapOutput) MapIndex(k pulumi.StringInput) ConnectorAzureArtifactsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectorAzureArtifacts {
		return vs[0].(map[string]*ConnectorAzureArtifacts)[vs[1].(string)]
	}).(ConnectorAzureArtifactsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorAzureArtifactsInput)(nil)).Elem(), &ConnectorAzureArtifacts{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorAzureArtifactsArrayInput)(nil)).Elem(), ConnectorAzureArtifactsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorAzureArtifactsMapInput)(nil)).Elem(), ConnectorAzureArtifactsMap{})
	pulumi.RegisterOutputType(ConnectorAzureArtifactsOutput{})
	pulumi.RegisterOutputType(ConnectorAzureArtifactsArrayOutput{})
	pulumi.RegisterOutputType(ConnectorAzureArtifactsMapOutput{})
}
