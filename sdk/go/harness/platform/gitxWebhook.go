// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Harness pipeline.
//
// ## Import
//
// # Import an Account level Webhook
//
// ```sh
// $ pulumi import harness:platform/gitxWebhook:GitxWebhook example <webhook_identifier>
// ```
//
// # Import an Org level Webhook
//
// ```sh
// $ pulumi import harness:platform/gitxWebhook:GitxWebhook example <webhook_identifier>/<org_id>/
// ```
//
// # Import a Project level Webhook
//
// ```sh
// $ pulumi import harness:platform/gitxWebhook:GitxWebhook example <webhook_identifier>/<org_id>/<project_id>
// ```
type GitxWebhook struct {
	pulumi.CustomResourceState

	// ConnectorRef to be used to create Gitx webhook.
	ConnectorRef pulumi.StringOutput `pulumi:"connectorRef"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Folder Paths
	FolderPaths pulumi.StringArrayOutput `pulumi:"folderPaths"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Flag to enable the webhook
	IsEnabled pulumi.BoolPtrOutput `pulumi:"isEnabled"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Repo Identifier for Gitx webhook.
	RepoName pulumi.StringOutput `pulumi:"repoName"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewGitxWebhook registers a new resource with the given unique name, arguments, and options.
func NewGitxWebhook(ctx *pulumi.Context,
	name string, args *GitxWebhookArgs, opts ...pulumi.ResourceOption) (*GitxWebhook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectorRef == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorRef'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.RepoName == nil {
		return nil, errors.New("invalid value for required argument 'RepoName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GitxWebhook
	err := ctx.RegisterResource("harness:platform/gitxWebhook:GitxWebhook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitxWebhook gets an existing GitxWebhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitxWebhook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitxWebhookState, opts ...pulumi.ResourceOption) (*GitxWebhook, error) {
	var resource GitxWebhook
	err := ctx.ReadResource("harness:platform/gitxWebhook:GitxWebhook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitxWebhook resources.
type gitxWebhookState struct {
	// ConnectorRef to be used to create Gitx webhook.
	ConnectorRef *string `pulumi:"connectorRef"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Folder Paths
	FolderPaths []string `pulumi:"folderPaths"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Flag to enable the webhook
	IsEnabled *bool `pulumi:"isEnabled"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Repo Identifier for Gitx webhook.
	RepoName *string `pulumi:"repoName"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

type GitxWebhookState struct {
	// ConnectorRef to be used to create Gitx webhook.
	ConnectorRef pulumi.StringPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Folder Paths
	FolderPaths pulumi.StringArrayInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Flag to enable the webhook
	IsEnabled pulumi.BoolPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Repo Identifier for Gitx webhook.
	RepoName pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (GitxWebhookState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitxWebhookState)(nil)).Elem()
}

type gitxWebhookArgs struct {
	// ConnectorRef to be used to create Gitx webhook.
	ConnectorRef string `pulumi:"connectorRef"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Folder Paths
	FolderPaths []string `pulumi:"folderPaths"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Flag to enable the webhook
	IsEnabled *bool `pulumi:"isEnabled"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Repo Identifier for Gitx webhook.
	RepoName string `pulumi:"repoName"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GitxWebhook resource.
type GitxWebhookArgs struct {
	// ConnectorRef to be used to create Gitx webhook.
	ConnectorRef pulumi.StringInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Folder Paths
	FolderPaths pulumi.StringArrayInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Flag to enable the webhook
	IsEnabled pulumi.BoolPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Repo Identifier for Gitx webhook.
	RepoName pulumi.StringInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (GitxWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitxWebhookArgs)(nil)).Elem()
}

type GitxWebhookInput interface {
	pulumi.Input

	ToGitxWebhookOutput() GitxWebhookOutput
	ToGitxWebhookOutputWithContext(ctx context.Context) GitxWebhookOutput
}

func (*GitxWebhook) ElementType() reflect.Type {
	return reflect.TypeOf((**GitxWebhook)(nil)).Elem()
}

func (i *GitxWebhook) ToGitxWebhookOutput() GitxWebhookOutput {
	return i.ToGitxWebhookOutputWithContext(context.Background())
}

func (i *GitxWebhook) ToGitxWebhookOutputWithContext(ctx context.Context) GitxWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitxWebhookOutput)
}

// GitxWebhookArrayInput is an input type that accepts GitxWebhookArray and GitxWebhookArrayOutput values.
// You can construct a concrete instance of `GitxWebhookArrayInput` via:
//
//	GitxWebhookArray{ GitxWebhookArgs{...} }
type GitxWebhookArrayInput interface {
	pulumi.Input

	ToGitxWebhookArrayOutput() GitxWebhookArrayOutput
	ToGitxWebhookArrayOutputWithContext(context.Context) GitxWebhookArrayOutput
}

type GitxWebhookArray []GitxWebhookInput

func (GitxWebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitxWebhook)(nil)).Elem()
}

func (i GitxWebhookArray) ToGitxWebhookArrayOutput() GitxWebhookArrayOutput {
	return i.ToGitxWebhookArrayOutputWithContext(context.Background())
}

func (i GitxWebhookArray) ToGitxWebhookArrayOutputWithContext(ctx context.Context) GitxWebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitxWebhookArrayOutput)
}

// GitxWebhookMapInput is an input type that accepts GitxWebhookMap and GitxWebhookMapOutput values.
// You can construct a concrete instance of `GitxWebhookMapInput` via:
//
//	GitxWebhookMap{ "key": GitxWebhookArgs{...} }
type GitxWebhookMapInput interface {
	pulumi.Input

	ToGitxWebhookMapOutput() GitxWebhookMapOutput
	ToGitxWebhookMapOutputWithContext(context.Context) GitxWebhookMapOutput
}

type GitxWebhookMap map[string]GitxWebhookInput

func (GitxWebhookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitxWebhook)(nil)).Elem()
}

func (i GitxWebhookMap) ToGitxWebhookMapOutput() GitxWebhookMapOutput {
	return i.ToGitxWebhookMapOutputWithContext(context.Background())
}

func (i GitxWebhookMap) ToGitxWebhookMapOutputWithContext(ctx context.Context) GitxWebhookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitxWebhookMapOutput)
}

type GitxWebhookOutput struct{ *pulumi.OutputState }

func (GitxWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitxWebhook)(nil)).Elem()
}

func (o GitxWebhookOutput) ToGitxWebhookOutput() GitxWebhookOutput {
	return o
}

func (o GitxWebhookOutput) ToGitxWebhookOutputWithContext(ctx context.Context) GitxWebhookOutput {
	return o
}

// ConnectorRef to be used to create Gitx webhook.
func (o GitxWebhookOutput) ConnectorRef() pulumi.StringOutput {
	return o.ApplyT(func(v *GitxWebhook) pulumi.StringOutput { return v.ConnectorRef }).(pulumi.StringOutput)
}

// Description of the resource.
func (o GitxWebhookOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitxWebhook) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Folder Paths
func (o GitxWebhookOutput) FolderPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitxWebhook) pulumi.StringArrayOutput { return v.FolderPaths }).(pulumi.StringArrayOutput)
}

// Unique identifier of the resource.
func (o GitxWebhookOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *GitxWebhook) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Flag to enable the webhook
func (o GitxWebhookOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitxWebhook) pulumi.BoolPtrOutput { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// Name of the resource.
func (o GitxWebhookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GitxWebhook) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o GitxWebhookOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitxWebhook) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o GitxWebhookOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitxWebhook) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Repo Identifier for Gitx webhook.
func (o GitxWebhookOutput) RepoName() pulumi.StringOutput {
	return o.ApplyT(func(v *GitxWebhook) pulumi.StringOutput { return v.RepoName }).(pulumi.StringOutput)
}

// Tags to associate with the resource.
func (o GitxWebhookOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitxWebhook) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type GitxWebhookArrayOutput struct{ *pulumi.OutputState }

func (GitxWebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitxWebhook)(nil)).Elem()
}

func (o GitxWebhookArrayOutput) ToGitxWebhookArrayOutput() GitxWebhookArrayOutput {
	return o
}

func (o GitxWebhookArrayOutput) ToGitxWebhookArrayOutputWithContext(ctx context.Context) GitxWebhookArrayOutput {
	return o
}

func (o GitxWebhookArrayOutput) Index(i pulumi.IntInput) GitxWebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitxWebhook {
		return vs[0].([]*GitxWebhook)[vs[1].(int)]
	}).(GitxWebhookOutput)
}

type GitxWebhookMapOutput struct{ *pulumi.OutputState }

func (GitxWebhookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitxWebhook)(nil)).Elem()
}

func (o GitxWebhookMapOutput) ToGitxWebhookMapOutput() GitxWebhookMapOutput {
	return o
}

func (o GitxWebhookMapOutput) ToGitxWebhookMapOutputWithContext(ctx context.Context) GitxWebhookMapOutput {
	return o
}

func (o GitxWebhookMapOutput) MapIndex(k pulumi.StringInput) GitxWebhookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitxWebhook {
		return vs[0].(map[string]*GitxWebhook)[vs[1].(string)]
	}).(GitxWebhookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitxWebhookInput)(nil)).Elem(), &GitxWebhook{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitxWebhookArrayInput)(nil)).Elem(), GitxWebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitxWebhookMapInput)(nil)).Elem(), GitxWebhookMap{})
	pulumi.RegisterOutputType(GitxWebhookOutput{})
	pulumi.RegisterOutputType(GitxWebhookArrayOutput{})
	pulumi.RegisterOutputType(GitxWebhookMapOutput{})
}
