// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness trigger.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupTriggers(ctx, &platform.LookupTriggersArgs{
//				Identifier: pulumi.StringRef("identifier"),
//				OrgId:      "org_id",
//				ProjectId:  "project_id",
//				TargetId:   "pipeline_id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTriggers(ctx *pulumi.Context, args *LookupTriggersArgs, opts ...pulumi.InvokeOption) (*LookupTriggersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTriggersResult
	err := ctx.Invoke("harness:platform/getTriggers:getTriggers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTriggers.
type LookupTriggersArgs struct {
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// ignore error default false
	IgnoreError *bool `pulumi:"ignoreError"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId string `pulumi:"projectId"`
	// Identifier of the target pipeline
	TargetId string `pulumi:"targetId"`
}

// A collection of values returned by getTriggers.
type LookupTriggersResult struct {
	// Description of the resource.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// ignore error default false
	IgnoreError *bool `pulumi:"ignoreError"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// Identifier of the target pipeline
	TargetId string `pulumi:"targetId"`
	// trigger yaml
	Yaml string `pulumi:"yaml"`
}

func LookupTriggersOutput(ctx *pulumi.Context, args LookupTriggersOutputArgs, opts ...pulumi.InvokeOption) LookupTriggersResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTriggersResultOutput, error) {
			args := v.(LookupTriggersArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getTriggers:getTriggers", args, LookupTriggersResultOutput{}, options).(LookupTriggersResultOutput), nil
		}).(LookupTriggersResultOutput)
}

// A collection of arguments for invoking getTriggers.
type LookupTriggersOutputArgs struct {
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
	// ignore error default false
	IgnoreError pulumi.BoolPtrInput `pulumi:"ignoreError"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// Identifier of the target pipeline
	TargetId pulumi.StringInput `pulumi:"targetId"`
}

func (LookupTriggersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTriggersArgs)(nil)).Elem()
}

// A collection of values returned by getTriggers.
type LookupTriggersResultOutput struct{ *pulumi.OutputState }

func (LookupTriggersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTriggersResult)(nil)).Elem()
}

func (o LookupTriggersResultOutput) ToLookupTriggersResultOutput() LookupTriggersResultOutput {
	return o
}

func (o LookupTriggersResultOutput) ToLookupTriggersResultOutputWithContext(ctx context.Context) LookupTriggersResultOutput {
	return o
}

// Description of the resource.
func (o LookupTriggersResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggersResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupTriggersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggersResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupTriggersResultOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTriggersResult) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

// ignore error default false
func (o LookupTriggersResultOutput) IgnoreError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupTriggersResult) *bool { return v.IgnoreError }).(pulumi.BoolPtrOutput)
}

// Name of the resource.
func (o LookupTriggersResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTriggersResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the organization.
func (o LookupTriggersResultOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggersResult) string { return v.OrgId }).(pulumi.StringOutput)
}

// Unique identifier of the project.
func (o LookupTriggersResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggersResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Tags to associate with the resource.
func (o LookupTriggersResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTriggersResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Identifier of the target pipeline
func (o LookupTriggersResultOutput) TargetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggersResult) string { return v.TargetId }).(pulumi.StringOutput)
}

// trigger yaml
func (o LookupTriggersResultOutput) Yaml() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggersResult) string { return v.Yaml }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTriggersResultOutput{})
}
