// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Harness Policyset.
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import using the organization id
//
// ```sh
// $ pulumi import harness:platform/policySet:PolicySet example <organization_id>
// ```
type PolicySet struct {
	pulumi.CustomResourceState

	// Action for the policyset.
	Action pulumi.StringOutput `pulumi:"action"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Enabled for the policyset.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// List of policy identifiers / severity for the policyset.
	Policies PolicySetPolicyArrayOutput `pulumi:"policies"`
	// Set of policy identifiers / severity for the policyset. Order is not significant.
	PolicyReferences PolicySetPolicyReferenceArrayOutput `pulumi:"policyReferences"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Type for the policyset.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPolicySet registers a new resource with the given unique name, arguments, and options.
func NewPolicySet(ctx *pulumi.Context,
	name string, args *PolicySetArgs, opts ...pulumi.ResourceOption) (*PolicySet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicySet
	err := ctx.RegisterResource("harness:platform/policySet:PolicySet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicySet gets an existing PolicySet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicySet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicySetState, opts ...pulumi.ResourceOption) (*PolicySet, error) {
	var resource PolicySet
	err := ctx.ReadResource("harness:platform/policySet:PolicySet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicySet resources.
type policySetState struct {
	// Action for the policyset.
	Action *string `pulumi:"action"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Enabled for the policyset.
	Enabled *bool `pulumi:"enabled"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// List of policy identifiers / severity for the policyset.
	Policies []PolicySetPolicy `pulumi:"policies"`
	// Set of policy identifiers / severity for the policyset. Order is not significant.
	PolicyReferences []PolicySetPolicyReference `pulumi:"policyReferences"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// Type for the policyset.
	Type *string `pulumi:"type"`
}

type PolicySetState struct {
	// Action for the policyset.
	Action pulumi.StringPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Enabled for the policyset.
	Enabled pulumi.BoolPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// List of policy identifiers / severity for the policyset.
	Policies PolicySetPolicyArrayInput
	// Set of policy identifiers / severity for the policyset. Order is not significant.
	PolicyReferences PolicySetPolicyReferenceArrayInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// Type for the policyset.
	Type pulumi.StringPtrInput
}

func (PolicySetState) ElementType() reflect.Type {
	return reflect.TypeOf((*policySetState)(nil)).Elem()
}

type policySetArgs struct {
	// Action for the policyset.
	Action string `pulumi:"action"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Enabled for the policyset.
	Enabled *bool `pulumi:"enabled"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// List of policy identifiers / severity for the policyset.
	Policies []PolicySetPolicy `pulumi:"policies"`
	// Set of policy identifiers / severity for the policyset. Order is not significant.
	PolicyReferences []PolicySetPolicyReference `pulumi:"policyReferences"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// Type for the policyset.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a PolicySet resource.
type PolicySetArgs struct {
	// Action for the policyset.
	Action pulumi.StringInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Enabled for the policyset.
	Enabled pulumi.BoolPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// List of policy identifiers / severity for the policyset.
	Policies PolicySetPolicyArrayInput
	// Set of policy identifiers / severity for the policyset. Order is not significant.
	PolicyReferences PolicySetPolicyReferenceArrayInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// Type for the policyset.
	Type pulumi.StringInput
}

func (PolicySetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policySetArgs)(nil)).Elem()
}

type PolicySetInput interface {
	pulumi.Input

	ToPolicySetOutput() PolicySetOutput
	ToPolicySetOutputWithContext(ctx context.Context) PolicySetOutput
}

func (*PolicySet) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySet)(nil)).Elem()
}

func (i *PolicySet) ToPolicySetOutput() PolicySetOutput {
	return i.ToPolicySetOutputWithContext(context.Background())
}

func (i *PolicySet) ToPolicySetOutputWithContext(ctx context.Context) PolicySetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetOutput)
}

// PolicySetArrayInput is an input type that accepts PolicySetArray and PolicySetArrayOutput values.
// You can construct a concrete instance of `PolicySetArrayInput` via:
//
//	PolicySetArray{ PolicySetArgs{...} }
type PolicySetArrayInput interface {
	pulumi.Input

	ToPolicySetArrayOutput() PolicySetArrayOutput
	ToPolicySetArrayOutputWithContext(context.Context) PolicySetArrayOutput
}

type PolicySetArray []PolicySetInput

func (PolicySetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicySet)(nil)).Elem()
}

func (i PolicySetArray) ToPolicySetArrayOutput() PolicySetArrayOutput {
	return i.ToPolicySetArrayOutputWithContext(context.Background())
}

func (i PolicySetArray) ToPolicySetArrayOutputWithContext(ctx context.Context) PolicySetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetArrayOutput)
}

// PolicySetMapInput is an input type that accepts PolicySetMap and PolicySetMapOutput values.
// You can construct a concrete instance of `PolicySetMapInput` via:
//
//	PolicySetMap{ "key": PolicySetArgs{...} }
type PolicySetMapInput interface {
	pulumi.Input

	ToPolicySetMapOutput() PolicySetMapOutput
	ToPolicySetMapOutputWithContext(context.Context) PolicySetMapOutput
}

type PolicySetMap map[string]PolicySetInput

func (PolicySetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicySet)(nil)).Elem()
}

func (i PolicySetMap) ToPolicySetMapOutput() PolicySetMapOutput {
	return i.ToPolicySetMapOutputWithContext(context.Background())
}

func (i PolicySetMap) ToPolicySetMapOutputWithContext(ctx context.Context) PolicySetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetMapOutput)
}

type PolicySetOutput struct{ *pulumi.OutputState }

func (PolicySetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySet)(nil)).Elem()
}

func (o PolicySetOutput) ToPolicySetOutput() PolicySetOutput {
	return o
}

func (o PolicySetOutput) ToPolicySetOutputWithContext(ctx context.Context) PolicySetOutput {
	return o
}

// Action for the policyset.
func (o PolicySetOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicySet) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Description of the resource.
func (o PolicySetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySet) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Enabled for the policyset.
func (o PolicySetOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicySet) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Unique identifier of the resource.
func (o PolicySetOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicySet) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o PolicySetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicySet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o PolicySetOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySet) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// List of policy identifiers / severity for the policyset.
func (o PolicySetOutput) Policies() PolicySetPolicyArrayOutput {
	return o.ApplyT(func(v *PolicySet) PolicySetPolicyArrayOutput { return v.Policies }).(PolicySetPolicyArrayOutput)
}

// Set of policy identifiers / severity for the policyset. Order is not significant.
func (o PolicySetOutput) PolicyReferences() PolicySetPolicyReferenceArrayOutput {
	return o.ApplyT(func(v *PolicySet) PolicySetPolicyReferenceArrayOutput { return v.PolicyReferences }).(PolicySetPolicyReferenceArrayOutput)
}

// Unique identifier of the project.
func (o PolicySetOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySet) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o PolicySetOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicySet) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Type for the policyset.
func (o PolicySetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicySet) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type PolicySetArrayOutput struct{ *pulumi.OutputState }

func (PolicySetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicySet)(nil)).Elem()
}

func (o PolicySetArrayOutput) ToPolicySetArrayOutput() PolicySetArrayOutput {
	return o
}

func (o PolicySetArrayOutput) ToPolicySetArrayOutputWithContext(ctx context.Context) PolicySetArrayOutput {
	return o
}

func (o PolicySetArrayOutput) Index(i pulumi.IntInput) PolicySetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicySet {
		return vs[0].([]*PolicySet)[vs[1].(int)]
	}).(PolicySetOutput)
}

type PolicySetMapOutput struct{ *pulumi.OutputState }

func (PolicySetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicySet)(nil)).Elem()
}

func (o PolicySetMapOutput) ToPolicySetMapOutput() PolicySetMapOutput {
	return o
}

func (o PolicySetMapOutput) ToPolicySetMapOutputWithContext(ctx context.Context) PolicySetMapOutput {
	return o
}

func (o PolicySetMapOutput) MapIndex(k pulumi.StringInput) PolicySetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicySet {
		return vs[0].(map[string]*PolicySet)[vs[1].(string)]
	}).(PolicySetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicySetInput)(nil)).Elem(), &PolicySet{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicySetArrayInput)(nil)).Elem(), PolicySetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicySetMapInput)(nil)).Elem(), PolicySetMap{})
	pulumi.RegisterOutputType(PolicySetOutput{})
	pulumi.RegisterOutputType(PolicySetArrayOutput{})
	pulumi.RegisterOutputType(PolicySetMapOutput{})
}
