// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a GCP KMS connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := platform.NewSecretText(ctx, "test", &platform.SecretTextArgs{
//				Identifier:  pulumi.String("%[1]s"),
//				Name:        pulumi.String("%[2]s"),
//				Description: pulumi.String("test"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//				SecretManagerIdentifier: pulumi.String("harnessSecretManager"),
//				ValueType:               pulumi.String("Reference"),
//				Value:                   pulumi.String("secret"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = platform.NewConnectorGcpKms(ctx, "gcp_kms_manual", &platform.ConnectorGcpKmsArgs{
//				Identifier:  pulumi.String("identifier"),
//				Name:        pulumi.String("name"),
//				Description: pulumi.String("test"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//				Region:       pulumi.String("us-west1"),
//				GcpProjectId: pulumi.String("1234567"),
//				KeyRing:      pulumi.String("key_ring"),
//				KeyName:      pulumi.String("key_name"),
//				Manual: &platform.ConnectorGcpKmsManualArgs{
//					Credentials: test.ID().ApplyT(func(id string) (string, error) {
//						return fmt.Sprintf("account.%v", id), nil
//					}).(pulumi.StringOutput),
//					DelegateSelectors: pulumi.StringArray{
//						pulumi.String("harness-delegate"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = platform.NewConnectorGcpKms(ctx, "gcp_kms_oidc_platform", &platform.ConnectorGcpKmsArgs{
//				Identifier:  pulumi.String("identifier"),
//				Name:        pulumi.String("name"),
//				Description: pulumi.String("test"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//				Region:            pulumi.String("us-west1"),
//				GcpProjectId:      pulumi.String("1234567"),
//				KeyRing:           pulumi.String("key_ring"),
//				KeyName:           pulumi.String("key_name"),
//				ExecuteOnDelegate: pulumi.Bool(false),
//				OidcAuthentications: platform.ConnectorGcpKmsOidcAuthenticationArray{
//					&platform.ConnectorGcpKmsOidcAuthenticationArgs{
//						WorkloadPoolId:      pulumi.String("harness-pool-test"),
//						ProviderId:          pulumi.String("harness"),
//						GcpProjectId:        pulumi.String("1234567"),
//						ServiceAccountEmail: pulumi.String("harness.sample@iam.gserviceaccount.com"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = platform.NewConnectorGcpKms(ctx, "gcp_kms_oidc_delegate", &platform.ConnectorGcpKmsArgs{
//				Identifier:  pulumi.String("identifier"),
//				Name:        pulumi.String("name"),
//				Description: pulumi.String("test"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//				Region:       pulumi.String("us-west1"),
//				GcpProjectId: pulumi.String("1234567"),
//				KeyRing:      pulumi.String("key_ring"),
//				KeyName:      pulumi.String("key_name"),
//				OidcAuthentications: platform.ConnectorGcpKmsOidcAuthenticationArray{
//					&platform.ConnectorGcpKmsOidcAuthenticationArgs{
//						WorkloadPoolId:      pulumi.String("harness-pool-test"),
//						ProviderId:          pulumi.String("harness"),
//						GcpProjectId:        pulumi.String("1234567"),
//						ServiceAccountEmail: pulumi.String("harness.sample@iam.gserviceaccount.com"),
//						DelegateSelectors: pulumi.StringArray{
//							pulumi.String("harness-delegate"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = platform.NewConnectorGcpKms(ctx, "gcp_kms_oidc_delegate_default", &platform.ConnectorGcpKmsArgs{
//				Identifier:  pulumi.String("identifier"),
//				Name:        pulumi.String("name"),
//				Description: pulumi.String("test"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//				Region:       pulumi.String("us-west1"),
//				GcpProjectId: pulumi.String("1234567"),
//				KeyRing:      pulumi.String("key_ring"),
//				KeyName:      pulumi.String("key_name"),
//				Default:      pulumi.Bool(true),
//				OidcAuthentications: platform.ConnectorGcpKmsOidcAuthenticationArray{
//					&platform.ConnectorGcpKmsOidcAuthenticationArgs{
//						WorkloadPoolId:      pulumi.String("harness-pool-test"),
//						ProviderId:          pulumi.String("harness"),
//						GcpProjectId:        pulumi.String("1234567"),
//						ServiceAccountEmail: pulumi.String("harness.sample@iam.gserviceaccount.com"),
//						DelegateSelectors: pulumi.StringArray{
//							pulumi.String("harness-delegate"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import account level gcp connector
//
// ```sh
// $ pulumi import harness:platform/connectorGcpKms:ConnectorGcpKms example <connector_id>
// ```
//
// # Import org level gcp connector
//
// ```sh
// $ pulumi import harness:platform/connectorGcpKms:ConnectorGcpKms example <ord_id>/<connector_id>
// ```
//
// # Import project level gcp connector
//
// ```sh
// $ pulumi import harness:platform/connectorGcpKms:ConnectorGcpKms example <org_id>/<project_id>/<connector_id>
// ```
type ConnectorGcpKms struct {
	pulumi.CustomResourceState

	// Set this flag to set this secret manager as default secret manager.
	Default pulumi.BoolPtrOutput `pulumi:"default"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Enable this flag to execute on Delegate.
	ExecuteOnDelegate pulumi.BoolPtrOutput `pulumi:"executeOnDelegate"`
	// The project ID of the GCP KMS.
	GcpProjectId pulumi.StringOutput `pulumi:"gcpProjectId"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// The key name of the GCP KMS.
	KeyName pulumi.StringOutput `pulumi:"keyName"`
	// The key ring of the GCP KMS.
	KeyRing pulumi.StringOutput `pulumi:"keyRing"`
	// Manual credential configuration.
	Manual ConnectorGcpKmsManualPtrOutput `pulumi:"manual"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Authentication using harness oidc.
	OidcAuthentications ConnectorGcpKmsOidcAuthenticationArrayOutput `pulumi:"oidcAuthentications"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// The region of the GCP KMS.
	Region pulumi.StringOutput `pulumi:"region"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewConnectorGcpKms registers a new resource with the given unique name, arguments, and options.
func NewConnectorGcpKms(ctx *pulumi.Context,
	name string, args *ConnectorGcpKmsArgs, opts ...pulumi.ResourceOption) (*ConnectorGcpKms, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GcpProjectId == nil {
		return nil, errors.New("invalid value for required argument 'GcpProjectId'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.KeyName == nil {
		return nil, errors.New("invalid value for required argument 'KeyName'")
	}
	if args.KeyRing == nil {
		return nil, errors.New("invalid value for required argument 'KeyRing'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectorGcpKms
	err := ctx.RegisterResource("harness:platform/connectorGcpKms:ConnectorGcpKms", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectorGcpKms gets an existing ConnectorGcpKms resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectorGcpKms(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorGcpKmsState, opts ...pulumi.ResourceOption) (*ConnectorGcpKms, error) {
	var resource ConnectorGcpKms
	err := ctx.ReadResource("harness:platform/connectorGcpKms:ConnectorGcpKms", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectorGcpKms resources.
type connectorGcpKmsState struct {
	// Set this flag to set this secret manager as default secret manager.
	Default *bool `pulumi:"default"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Enable this flag to execute on Delegate.
	ExecuteOnDelegate *bool `pulumi:"executeOnDelegate"`
	// The project ID of the GCP KMS.
	GcpProjectId *string `pulumi:"gcpProjectId"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// The key name of the GCP KMS.
	KeyName *string `pulumi:"keyName"`
	// The key ring of the GCP KMS.
	KeyRing *string `pulumi:"keyRing"`
	// Manual credential configuration.
	Manual *ConnectorGcpKmsManual `pulumi:"manual"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Authentication using harness oidc.
	OidcAuthentications []ConnectorGcpKmsOidcAuthentication `pulumi:"oidcAuthentications"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// The region of the GCP KMS.
	Region *string `pulumi:"region"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

type ConnectorGcpKmsState struct {
	// Set this flag to set this secret manager as default secret manager.
	Default pulumi.BoolPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Enable this flag to execute on Delegate.
	ExecuteOnDelegate pulumi.BoolPtrInput
	// The project ID of the GCP KMS.
	GcpProjectId pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// The key name of the GCP KMS.
	KeyName pulumi.StringPtrInput
	// The key ring of the GCP KMS.
	KeyRing pulumi.StringPtrInput
	// Manual credential configuration.
	Manual ConnectorGcpKmsManualPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Authentication using harness oidc.
	OidcAuthentications ConnectorGcpKmsOidcAuthenticationArrayInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// The region of the GCP KMS.
	Region pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (ConnectorGcpKmsState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorGcpKmsState)(nil)).Elem()
}

type connectorGcpKmsArgs struct {
	// Set this flag to set this secret manager as default secret manager.
	Default *bool `pulumi:"default"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Enable this flag to execute on Delegate.
	ExecuteOnDelegate *bool `pulumi:"executeOnDelegate"`
	// The project ID of the GCP KMS.
	GcpProjectId string `pulumi:"gcpProjectId"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// The key name of the GCP KMS.
	KeyName string `pulumi:"keyName"`
	// The key ring of the GCP KMS.
	KeyRing string `pulumi:"keyRing"`
	// Manual credential configuration.
	Manual *ConnectorGcpKmsManual `pulumi:"manual"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Authentication using harness oidc.
	OidcAuthentications []ConnectorGcpKmsOidcAuthentication `pulumi:"oidcAuthentications"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// The region of the GCP KMS.
	Region string `pulumi:"region"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a ConnectorGcpKms resource.
type ConnectorGcpKmsArgs struct {
	// Set this flag to set this secret manager as default secret manager.
	Default pulumi.BoolPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Enable this flag to execute on Delegate.
	ExecuteOnDelegate pulumi.BoolPtrInput
	// The project ID of the GCP KMS.
	GcpProjectId pulumi.StringInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// The key name of the GCP KMS.
	KeyName pulumi.StringInput
	// The key ring of the GCP KMS.
	KeyRing pulumi.StringInput
	// Manual credential configuration.
	Manual ConnectorGcpKmsManualPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Authentication using harness oidc.
	OidcAuthentications ConnectorGcpKmsOidcAuthenticationArrayInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// The region of the GCP KMS.
	Region pulumi.StringInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (ConnectorGcpKmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorGcpKmsArgs)(nil)).Elem()
}

type ConnectorGcpKmsInput interface {
	pulumi.Input

	ToConnectorGcpKmsOutput() ConnectorGcpKmsOutput
	ToConnectorGcpKmsOutputWithContext(ctx context.Context) ConnectorGcpKmsOutput
}

func (*ConnectorGcpKms) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorGcpKms)(nil)).Elem()
}

func (i *ConnectorGcpKms) ToConnectorGcpKmsOutput() ConnectorGcpKmsOutput {
	return i.ToConnectorGcpKmsOutputWithContext(context.Background())
}

func (i *ConnectorGcpKms) ToConnectorGcpKmsOutputWithContext(ctx context.Context) ConnectorGcpKmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorGcpKmsOutput)
}

// ConnectorGcpKmsArrayInput is an input type that accepts ConnectorGcpKmsArray and ConnectorGcpKmsArrayOutput values.
// You can construct a concrete instance of `ConnectorGcpKmsArrayInput` via:
//
//	ConnectorGcpKmsArray{ ConnectorGcpKmsArgs{...} }
type ConnectorGcpKmsArrayInput interface {
	pulumi.Input

	ToConnectorGcpKmsArrayOutput() ConnectorGcpKmsArrayOutput
	ToConnectorGcpKmsArrayOutputWithContext(context.Context) ConnectorGcpKmsArrayOutput
}

type ConnectorGcpKmsArray []ConnectorGcpKmsInput

func (ConnectorGcpKmsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorGcpKms)(nil)).Elem()
}

func (i ConnectorGcpKmsArray) ToConnectorGcpKmsArrayOutput() ConnectorGcpKmsArrayOutput {
	return i.ToConnectorGcpKmsArrayOutputWithContext(context.Background())
}

func (i ConnectorGcpKmsArray) ToConnectorGcpKmsArrayOutputWithContext(ctx context.Context) ConnectorGcpKmsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorGcpKmsArrayOutput)
}

// ConnectorGcpKmsMapInput is an input type that accepts ConnectorGcpKmsMap and ConnectorGcpKmsMapOutput values.
// You can construct a concrete instance of `ConnectorGcpKmsMapInput` via:
//
//	ConnectorGcpKmsMap{ "key": ConnectorGcpKmsArgs{...} }
type ConnectorGcpKmsMapInput interface {
	pulumi.Input

	ToConnectorGcpKmsMapOutput() ConnectorGcpKmsMapOutput
	ToConnectorGcpKmsMapOutputWithContext(context.Context) ConnectorGcpKmsMapOutput
}

type ConnectorGcpKmsMap map[string]ConnectorGcpKmsInput

func (ConnectorGcpKmsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorGcpKms)(nil)).Elem()
}

func (i ConnectorGcpKmsMap) ToConnectorGcpKmsMapOutput() ConnectorGcpKmsMapOutput {
	return i.ToConnectorGcpKmsMapOutputWithContext(context.Background())
}

func (i ConnectorGcpKmsMap) ToConnectorGcpKmsMapOutputWithContext(ctx context.Context) ConnectorGcpKmsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorGcpKmsMapOutput)
}

type ConnectorGcpKmsOutput struct{ *pulumi.OutputState }

func (ConnectorGcpKmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorGcpKms)(nil)).Elem()
}

func (o ConnectorGcpKmsOutput) ToConnectorGcpKmsOutput() ConnectorGcpKmsOutput {
	return o
}

func (o ConnectorGcpKmsOutput) ToConnectorGcpKmsOutputWithContext(ctx context.Context) ConnectorGcpKmsOutput {
	return o
}

// Set this flag to set this secret manager as default secret manager.
func (o ConnectorGcpKmsOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectorGcpKms) pulumi.BoolPtrOutput { return v.Default }).(pulumi.BoolPtrOutput)
}

// Description of the resource.
func (o ConnectorGcpKmsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorGcpKms) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Enable this flag to execute on Delegate.
func (o ConnectorGcpKmsOutput) ExecuteOnDelegate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectorGcpKms) pulumi.BoolPtrOutput { return v.ExecuteOnDelegate }).(pulumi.BoolPtrOutput)
}

// The project ID of the GCP KMS.
func (o ConnectorGcpKmsOutput) GcpProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorGcpKms) pulumi.StringOutput { return v.GcpProjectId }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o ConnectorGcpKmsOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorGcpKms) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// The key name of the GCP KMS.
func (o ConnectorGcpKmsOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorGcpKms) pulumi.StringOutput { return v.KeyName }).(pulumi.StringOutput)
}

// The key ring of the GCP KMS.
func (o ConnectorGcpKmsOutput) KeyRing() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorGcpKms) pulumi.StringOutput { return v.KeyRing }).(pulumi.StringOutput)
}

// Manual credential configuration.
func (o ConnectorGcpKmsOutput) Manual() ConnectorGcpKmsManualPtrOutput {
	return o.ApplyT(func(v *ConnectorGcpKms) ConnectorGcpKmsManualPtrOutput { return v.Manual }).(ConnectorGcpKmsManualPtrOutput)
}

// Name of the resource.
func (o ConnectorGcpKmsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorGcpKms) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Authentication using harness oidc.
func (o ConnectorGcpKmsOutput) OidcAuthentications() ConnectorGcpKmsOidcAuthenticationArrayOutput {
	return o.ApplyT(func(v *ConnectorGcpKms) ConnectorGcpKmsOidcAuthenticationArrayOutput { return v.OidcAuthentications }).(ConnectorGcpKmsOidcAuthenticationArrayOutput)
}

// Unique identifier of the organization.
func (o ConnectorGcpKmsOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorGcpKms) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o ConnectorGcpKmsOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorGcpKms) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The region of the GCP KMS.
func (o ConnectorGcpKmsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorGcpKms) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Tags to associate with the resource.
func (o ConnectorGcpKmsOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorGcpKms) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type ConnectorGcpKmsArrayOutput struct{ *pulumi.OutputState }

func (ConnectorGcpKmsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorGcpKms)(nil)).Elem()
}

func (o ConnectorGcpKmsArrayOutput) ToConnectorGcpKmsArrayOutput() ConnectorGcpKmsArrayOutput {
	return o
}

func (o ConnectorGcpKmsArrayOutput) ToConnectorGcpKmsArrayOutputWithContext(ctx context.Context) ConnectorGcpKmsArrayOutput {
	return o
}

func (o ConnectorGcpKmsArrayOutput) Index(i pulumi.IntInput) ConnectorGcpKmsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectorGcpKms {
		return vs[0].([]*ConnectorGcpKms)[vs[1].(int)]
	}).(ConnectorGcpKmsOutput)
}

type ConnectorGcpKmsMapOutput struct{ *pulumi.OutputState }

func (ConnectorGcpKmsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorGcpKms)(nil)).Elem()
}

func (o ConnectorGcpKmsMapOutput) ToConnectorGcpKmsMapOutput() ConnectorGcpKmsMapOutput {
	return o
}

func (o ConnectorGcpKmsMapOutput) ToConnectorGcpKmsMapOutputWithContext(ctx context.Context) ConnectorGcpKmsMapOutput {
	return o
}

func (o ConnectorGcpKmsMapOutput) MapIndex(k pulumi.StringInput) ConnectorGcpKmsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectorGcpKms {
		return vs[0].(map[string]*ConnectorGcpKms)[vs[1].(string)]
	}).(ConnectorGcpKmsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorGcpKmsInput)(nil)).Elem(), &ConnectorGcpKms{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorGcpKmsArrayInput)(nil)).Elem(), ConnectorGcpKmsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorGcpKmsMapInput)(nil)).Elem(), ConnectorGcpKmsMap{})
	pulumi.RegisterOutputType(ConnectorGcpKmsOutput{})
	pulumi.RegisterOutputType(ConnectorGcpKmsArrayOutput{})
	pulumi.RegisterOutputType(ConnectorGcpKmsMapOutput{})
}
