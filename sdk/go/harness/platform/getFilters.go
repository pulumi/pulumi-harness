// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness Filter. This data source allows you to fetch filters of the following types: {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupFilters(ctx, &platform.LookupFiltersArgs{
//				Identifier: "identifier",
//				OrgId:      pulumi.StringRef("org_id"),
//				ProjectId:  pulumi.StringRef("project_id"),
//				Type:       "Connector",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupFilters(ctx *pulumi.Context, args *LookupFiltersArgs, opts ...pulumi.InvokeOption) (*LookupFiltersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFiltersResult
	err := ctx.Invoke("harness:platform/getFilters:getFilters", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFilters.
type LookupFiltersArgs struct {
	// Unique identifier of the resource
	Identifier string `pulumi:"identifier"`
	// organization Identifier for the Entity
	OrgId *string `pulumi:"orgId"`
	// project Identifier for the Entity
	ProjectId *string `pulumi:"projectId"`
	// Type of filter. Currently supported types are {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}.
	Type string `pulumi:"type"`
}

// A collection of values returned by getFilters.
type LookupFiltersResult struct {
	// Properties of the filter entity defined in Harness.
	FilterProperties []GetFiltersFilterProperty `pulumi:"filterProperties"`
	// This indicates visibility of filter. By default, everyone can view this filter.
	FilterVisibility string `pulumi:"filterVisibility"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource
	Identifier string `pulumi:"identifier"`
	// Name of the Filter
	Name string `pulumi:"name"`
	// organization Identifier for the Entity
	OrgId *string `pulumi:"orgId"`
	// project Identifier for the Entity
	ProjectId *string `pulumi:"projectId"`
	// Type of filter. Currently supported types are {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}.
	Type string `pulumi:"type"`
}

func LookupFiltersOutput(ctx *pulumi.Context, args LookupFiltersOutputArgs, opts ...pulumi.InvokeOption) LookupFiltersResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupFiltersResultOutput, error) {
			args := v.(LookupFiltersArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getFilters:getFilters", args, LookupFiltersResultOutput{}, options).(LookupFiltersResultOutput), nil
		}).(LookupFiltersResultOutput)
}

// A collection of arguments for invoking getFilters.
type LookupFiltersOutputArgs struct {
	// Unique identifier of the resource
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// organization Identifier for the Entity
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// project Identifier for the Entity
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Type of filter. Currently supported types are {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LookupFiltersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFiltersArgs)(nil)).Elem()
}

// A collection of values returned by getFilters.
type LookupFiltersResultOutput struct{ *pulumi.OutputState }

func (LookupFiltersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFiltersResult)(nil)).Elem()
}

func (o LookupFiltersResultOutput) ToLookupFiltersResultOutput() LookupFiltersResultOutput {
	return o
}

func (o LookupFiltersResultOutput) ToLookupFiltersResultOutputWithContext(ctx context.Context) LookupFiltersResultOutput {
	return o
}

// Properties of the filter entity defined in Harness.
func (o LookupFiltersResultOutput) FilterProperties() GetFiltersFilterPropertyArrayOutput {
	return o.ApplyT(func(v LookupFiltersResult) []GetFiltersFilterProperty { return v.FilterProperties }).(GetFiltersFilterPropertyArrayOutput)
}

// This indicates visibility of filter. By default, everyone can view this filter.
func (o LookupFiltersResultOutput) FilterVisibility() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFiltersResult) string { return v.FilterVisibility }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupFiltersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFiltersResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource
func (o LookupFiltersResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFiltersResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the Filter
func (o LookupFiltersResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFiltersResult) string { return v.Name }).(pulumi.StringOutput)
}

// organization Identifier for the Entity
func (o LookupFiltersResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFiltersResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// project Identifier for the Entity
func (o LookupFiltersResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFiltersResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Type of filter. Currently supported types are {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}.
func (o LookupFiltersResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFiltersResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFiltersResultOutput{})
}
