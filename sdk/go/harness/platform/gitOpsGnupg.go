// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing Harness GitOps GPG public key.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewGitOpsGnupg(ctx, "example", &platform.GitOpsGnupgArgs{
//				AccountId: pulumi.String("account_id"),
//				AgentId:   pulumi.String("agent_id"),
//				Requests: platform.GitOpsGnupgRequestArray{
//					&platform.GitOpsGnupgRequestArgs{
//						Upsert: pulumi.Bool(true),
//						Publickeys: platform.GitOpsGnupgRequestPublickeyArray{
//							&platform.GitOpsGnupgRequestPublickeyArgs{
//								KeyData: pulumi.String("-----BEGIN PGP PUBLIC KEY BLOCK-----XXXXXX-----END PGP PUBLIC KEY BLOCK-----"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import an Account level Gitops GnuPG Key
//
// ```sh
// $ pulumi import harness:platform/gitOpsGnupg:GitOpsGnupg example <agent_id>/<key_id>
// ```
//
// # Import an Org level Gitops GnuPG Key
//
// ```sh
// $ pulumi import harness:platform/gitOpsGnupg:GitOpsGnupg example <organization_id>/<agent_id>/<key_id>
// ```
//
// # Import a Project level Gitops GnuPG Key
//
// ```sh
// $ pulumi import harness:platform/gitOpsGnupg:GitOpsGnupg example <organization_id>/<project_id>/<agent_id>/<key_id>
// ```
type GitOpsGnupg struct {
	pulumi.CustomResourceState

	// Account Identifier for the GnuPG Key.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Agent identifier for the GnuPG Key.
	AgentId pulumi.StringOutput `pulumi:"agentId"`
	// Identifier for the GnuPG Key.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Organization Identifier for the GnuPG Key.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Project Identifier for the GnuPG Key.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// GnuPGPublicKey is a representation of a GnuPG public key
	Requests GitOpsGnupgRequestArrayOutput `pulumi:"requests"`
}

// NewGitOpsGnupg registers a new resource with the given unique name, arguments, and options.
func NewGitOpsGnupg(ctx *pulumi.Context,
	name string, args *GitOpsGnupgArgs, opts ...pulumi.ResourceOption) (*GitOpsGnupg, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AgentId == nil {
		return nil, errors.New("invalid value for required argument 'AgentId'")
	}
	if args.Requests == nil {
		return nil, errors.New("invalid value for required argument 'Requests'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GitOpsGnupg
	err := ctx.RegisterResource("harness:platform/gitOpsGnupg:GitOpsGnupg", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitOpsGnupg gets an existing GitOpsGnupg resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitOpsGnupg(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitOpsGnupgState, opts ...pulumi.ResourceOption) (*GitOpsGnupg, error) {
	var resource GitOpsGnupg
	err := ctx.ReadResource("harness:platform/gitOpsGnupg:GitOpsGnupg", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitOpsGnupg resources.
type gitOpsGnupgState struct {
	// Account Identifier for the GnuPG Key.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId *string `pulumi:"accountId"`
	// Agent identifier for the GnuPG Key.
	AgentId *string `pulumi:"agentId"`
	// Identifier for the GnuPG Key.
	Identifier *string `pulumi:"identifier"`
	// Organization Identifier for the GnuPG Key.
	OrgId *string `pulumi:"orgId"`
	// Project Identifier for the GnuPG Key.
	ProjectId *string `pulumi:"projectId"`
	// GnuPGPublicKey is a representation of a GnuPG public key
	Requests []GitOpsGnupgRequest `pulumi:"requests"`
}

type GitOpsGnupgState struct {
	// Account Identifier for the GnuPG Key.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId pulumi.StringPtrInput
	// Agent identifier for the GnuPG Key.
	AgentId pulumi.StringPtrInput
	// Identifier for the GnuPG Key.
	Identifier pulumi.StringPtrInput
	// Organization Identifier for the GnuPG Key.
	OrgId pulumi.StringPtrInput
	// Project Identifier for the GnuPG Key.
	ProjectId pulumi.StringPtrInput
	// GnuPGPublicKey is a representation of a GnuPG public key
	Requests GitOpsGnupgRequestArrayInput
}

func (GitOpsGnupgState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitOpsGnupgState)(nil)).Elem()
}

type gitOpsGnupgArgs struct {
	// Account Identifier for the GnuPG Key.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId *string `pulumi:"accountId"`
	// Agent identifier for the GnuPG Key.
	AgentId string `pulumi:"agentId"`
	// Organization Identifier for the GnuPG Key.
	OrgId *string `pulumi:"orgId"`
	// Project Identifier for the GnuPG Key.
	ProjectId *string `pulumi:"projectId"`
	// GnuPGPublicKey is a representation of a GnuPG public key
	Requests []GitOpsGnupgRequest `pulumi:"requests"`
}

// The set of arguments for constructing a GitOpsGnupg resource.
type GitOpsGnupgArgs struct {
	// Account Identifier for the GnuPG Key.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId pulumi.StringPtrInput
	// Agent identifier for the GnuPG Key.
	AgentId pulumi.StringInput
	// Organization Identifier for the GnuPG Key.
	OrgId pulumi.StringPtrInput
	// Project Identifier for the GnuPG Key.
	ProjectId pulumi.StringPtrInput
	// GnuPGPublicKey is a representation of a GnuPG public key
	Requests GitOpsGnupgRequestArrayInput
}

func (GitOpsGnupgArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitOpsGnupgArgs)(nil)).Elem()
}

type GitOpsGnupgInput interface {
	pulumi.Input

	ToGitOpsGnupgOutput() GitOpsGnupgOutput
	ToGitOpsGnupgOutputWithContext(ctx context.Context) GitOpsGnupgOutput
}

func (*GitOpsGnupg) ElementType() reflect.Type {
	return reflect.TypeOf((**GitOpsGnupg)(nil)).Elem()
}

func (i *GitOpsGnupg) ToGitOpsGnupgOutput() GitOpsGnupgOutput {
	return i.ToGitOpsGnupgOutputWithContext(context.Background())
}

func (i *GitOpsGnupg) ToGitOpsGnupgOutputWithContext(ctx context.Context) GitOpsGnupgOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsGnupgOutput)
}

// GitOpsGnupgArrayInput is an input type that accepts GitOpsGnupgArray and GitOpsGnupgArrayOutput values.
// You can construct a concrete instance of `GitOpsGnupgArrayInput` via:
//
//	GitOpsGnupgArray{ GitOpsGnupgArgs{...} }
type GitOpsGnupgArrayInput interface {
	pulumi.Input

	ToGitOpsGnupgArrayOutput() GitOpsGnupgArrayOutput
	ToGitOpsGnupgArrayOutputWithContext(context.Context) GitOpsGnupgArrayOutput
}

type GitOpsGnupgArray []GitOpsGnupgInput

func (GitOpsGnupgArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitOpsGnupg)(nil)).Elem()
}

func (i GitOpsGnupgArray) ToGitOpsGnupgArrayOutput() GitOpsGnupgArrayOutput {
	return i.ToGitOpsGnupgArrayOutputWithContext(context.Background())
}

func (i GitOpsGnupgArray) ToGitOpsGnupgArrayOutputWithContext(ctx context.Context) GitOpsGnupgArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsGnupgArrayOutput)
}

// GitOpsGnupgMapInput is an input type that accepts GitOpsGnupgMap and GitOpsGnupgMapOutput values.
// You can construct a concrete instance of `GitOpsGnupgMapInput` via:
//
//	GitOpsGnupgMap{ "key": GitOpsGnupgArgs{...} }
type GitOpsGnupgMapInput interface {
	pulumi.Input

	ToGitOpsGnupgMapOutput() GitOpsGnupgMapOutput
	ToGitOpsGnupgMapOutputWithContext(context.Context) GitOpsGnupgMapOutput
}

type GitOpsGnupgMap map[string]GitOpsGnupgInput

func (GitOpsGnupgMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitOpsGnupg)(nil)).Elem()
}

func (i GitOpsGnupgMap) ToGitOpsGnupgMapOutput() GitOpsGnupgMapOutput {
	return i.ToGitOpsGnupgMapOutputWithContext(context.Background())
}

func (i GitOpsGnupgMap) ToGitOpsGnupgMapOutputWithContext(ctx context.Context) GitOpsGnupgMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsGnupgMapOutput)
}

type GitOpsGnupgOutput struct{ *pulumi.OutputState }

func (GitOpsGnupgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitOpsGnupg)(nil)).Elem()
}

func (o GitOpsGnupgOutput) ToGitOpsGnupgOutput() GitOpsGnupgOutput {
	return o
}

func (o GitOpsGnupgOutput) ToGitOpsGnupgOutputWithContext(ctx context.Context) GitOpsGnupgOutput {
	return o
}

// Account Identifier for the GnuPG Key.
//
// Deprecated: This field is deprecated and will be removed in a future release.
func (o GitOpsGnupgOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitOpsGnupg) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Agent identifier for the GnuPG Key.
func (o GitOpsGnupgOutput) AgentId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitOpsGnupg) pulumi.StringOutput { return v.AgentId }).(pulumi.StringOutput)
}

// Identifier for the GnuPG Key.
func (o GitOpsGnupgOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *GitOpsGnupg) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Organization Identifier for the GnuPG Key.
func (o GitOpsGnupgOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsGnupg) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Project Identifier for the GnuPG Key.
func (o GitOpsGnupgOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsGnupg) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// GnuPGPublicKey is a representation of a GnuPG public key
func (o GitOpsGnupgOutput) Requests() GitOpsGnupgRequestArrayOutput {
	return o.ApplyT(func(v *GitOpsGnupg) GitOpsGnupgRequestArrayOutput { return v.Requests }).(GitOpsGnupgRequestArrayOutput)
}

type GitOpsGnupgArrayOutput struct{ *pulumi.OutputState }

func (GitOpsGnupgArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitOpsGnupg)(nil)).Elem()
}

func (o GitOpsGnupgArrayOutput) ToGitOpsGnupgArrayOutput() GitOpsGnupgArrayOutput {
	return o
}

func (o GitOpsGnupgArrayOutput) ToGitOpsGnupgArrayOutputWithContext(ctx context.Context) GitOpsGnupgArrayOutput {
	return o
}

func (o GitOpsGnupgArrayOutput) Index(i pulumi.IntInput) GitOpsGnupgOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitOpsGnupg {
		return vs[0].([]*GitOpsGnupg)[vs[1].(int)]
	}).(GitOpsGnupgOutput)
}

type GitOpsGnupgMapOutput struct{ *pulumi.OutputState }

func (GitOpsGnupgMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitOpsGnupg)(nil)).Elem()
}

func (o GitOpsGnupgMapOutput) ToGitOpsGnupgMapOutput() GitOpsGnupgMapOutput {
	return o
}

func (o GitOpsGnupgMapOutput) ToGitOpsGnupgMapOutputWithContext(ctx context.Context) GitOpsGnupgMapOutput {
	return o
}

func (o GitOpsGnupgMapOutput) MapIndex(k pulumi.StringInput) GitOpsGnupgOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitOpsGnupg {
		return vs[0].(map[string]*GitOpsGnupg)[vs[1].(string)]
	}).(GitOpsGnupgOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitOpsGnupgInput)(nil)).Elem(), &GitOpsGnupg{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitOpsGnupgArrayInput)(nil)).Elem(), GitOpsGnupgArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitOpsGnupgMapInput)(nil)).Elem(), GitOpsGnupgMap{})
	pulumi.RegisterOutputType(GitOpsGnupgOutput{})
	pulumi.RegisterOutputType(GitOpsGnupgArrayOutput{})
	pulumi.RegisterOutputType(GitOpsGnupgMapOutput{})
}
