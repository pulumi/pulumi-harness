// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating an ElasticSearch connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Authentication mechanism as api token
//			_, err := platform.NewElasticsearchConnector(ctx, "token", &platform.ElasticsearchConnectorArgs{
//				Identifier:  pulumi.String("identifier"),
//				Name:        pulumi.String("name"),
//				Description: pulumi.String("test"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//				Url: pulumi.String("https://elasticsearch.com/"),
//				DelegateSelectors: pulumi.StringArray{
//					pulumi.String("harness-delegate"),
//				},
//				ApiToken: &platform.ElasticsearchConnectorApiTokenArgs{
//					ClientId:        pulumi.String("client_id"),
//					ClientSecretRef: pulumi.String("account.secret_id"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Authentication mechanism as username and password
//			_, err = platform.NewElasticsearchConnector(ctx, "test", &platform.ElasticsearchConnectorArgs{
//				Identifier:  pulumi.String("identifier"),
//				Name:        pulumi.String("name"),
//				Description: pulumi.String("test"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//				Url: pulumi.String("https://elasticsearch.com/"),
//				DelegateSelectors: pulumi.StringArray{
//					pulumi.String("harness-delegate"),
//				},
//				UsernamePassword: &platform.ElasticsearchConnectorUsernamePasswordArgs{
//					Username:    pulumi.String("username"),
//					PasswordRef: pulumi.String("account.secret_id"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Authentication mechanism as username and password
//			_, err = platform.NewElasticsearchConnector(ctx, "no_authentication", &platform.ElasticsearchConnectorArgs{
//				Identifier:  pulumi.String("identifier"),
//				Name:        pulumi.String("name"),
//				Description: pulumi.String("test"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//				Url: pulumi.String("https://elasticsearch.com/"),
//				DelegateSelectors: pulumi.StringArray{
//					pulumi.String("harness-delegate"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import account level elasticsearch connector
//
// ```sh
// $ pulumi import harness:platform/elasticsearchConnector:ElasticsearchConnector example <connector_id>
// ```
//
// # Import org level elasticsearch connector
//
// ```sh
// $ pulumi import harness:platform/elasticsearchConnector:ElasticsearchConnector example <ord_id>/<connector_id>
// ```
//
// # Import project level elasticsearch connector
//
// ```sh
// $ pulumi import harness:platform/elasticsearchConnector:ElasticsearchConnector example <org_id>/<project_id>/<connector_id>
// ```
type ElasticsearchConnector struct {
	pulumi.CustomResourceState

	// Authenticate to ElasticSearch using api token.
	ApiToken ElasticsearchConnectorApiTokenPtrOutput `pulumi:"apiToken"`
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// No Authentication to ElasticSearch
	NoAuthentication ElasticsearchConnectorNoAuthenticationPtrOutput `pulumi:"noAuthentication"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// URL of the ElasticSearch controller.
	Url pulumi.StringOutput `pulumi:"url"`
	// Authenticate to ElasticSearch using username and password.
	UsernamePassword ElasticsearchConnectorUsernamePasswordPtrOutput `pulumi:"usernamePassword"`
}

// NewElasticsearchConnector registers a new resource with the given unique name, arguments, and options.
func NewElasticsearchConnector(ctx *pulumi.Context,
	name string, args *ElasticsearchConnectorArgs, opts ...pulumi.ResourceOption) (*ElasticsearchConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ElasticsearchConnector
	err := ctx.RegisterResource("harness:platform/elasticsearchConnector:ElasticsearchConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticsearchConnector gets an existing ElasticsearchConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticsearchConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticsearchConnectorState, opts ...pulumi.ResourceOption) (*ElasticsearchConnector, error) {
	var resource ElasticsearchConnector
	err := ctx.ReadResource("harness:platform/elasticsearchConnector:ElasticsearchConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticsearchConnector resources.
type elasticsearchConnectorState struct {
	// Authenticate to ElasticSearch using api token.
	ApiToken *ElasticsearchConnectorApiToken `pulumi:"apiToken"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// No Authentication to ElasticSearch
	NoAuthentication *ElasticsearchConnectorNoAuthentication `pulumi:"noAuthentication"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// URL of the ElasticSearch controller.
	Url *string `pulumi:"url"`
	// Authenticate to ElasticSearch using username and password.
	UsernamePassword *ElasticsearchConnectorUsernamePassword `pulumi:"usernamePassword"`
}

type ElasticsearchConnectorState struct {
	// Authenticate to ElasticSearch using api token.
	ApiToken ElasticsearchConnectorApiTokenPtrInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// No Authentication to ElasticSearch
	NoAuthentication ElasticsearchConnectorNoAuthenticationPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// URL of the ElasticSearch controller.
	Url pulumi.StringPtrInput
	// Authenticate to ElasticSearch using username and password.
	UsernamePassword ElasticsearchConnectorUsernamePasswordPtrInput
}

func (ElasticsearchConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchConnectorState)(nil)).Elem()
}

type elasticsearchConnectorArgs struct {
	// Authenticate to ElasticSearch using api token.
	ApiToken *ElasticsearchConnectorApiToken `pulumi:"apiToken"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// No Authentication to ElasticSearch
	NoAuthentication *ElasticsearchConnectorNoAuthentication `pulumi:"noAuthentication"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// URL of the ElasticSearch controller.
	Url string `pulumi:"url"`
	// Authenticate to ElasticSearch using username and password.
	UsernamePassword *ElasticsearchConnectorUsernamePassword `pulumi:"usernamePassword"`
}

// The set of arguments for constructing a ElasticsearchConnector resource.
type ElasticsearchConnectorArgs struct {
	// Authenticate to ElasticSearch using api token.
	ApiToken ElasticsearchConnectorApiTokenPtrInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// No Authentication to ElasticSearch
	NoAuthentication ElasticsearchConnectorNoAuthenticationPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// URL of the ElasticSearch controller.
	Url pulumi.StringInput
	// Authenticate to ElasticSearch using username and password.
	UsernamePassword ElasticsearchConnectorUsernamePasswordPtrInput
}

func (ElasticsearchConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchConnectorArgs)(nil)).Elem()
}

type ElasticsearchConnectorInput interface {
	pulumi.Input

	ToElasticsearchConnectorOutput() ElasticsearchConnectorOutput
	ToElasticsearchConnectorOutputWithContext(ctx context.Context) ElasticsearchConnectorOutput
}

func (*ElasticsearchConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchConnector)(nil)).Elem()
}

func (i *ElasticsearchConnector) ToElasticsearchConnectorOutput() ElasticsearchConnectorOutput {
	return i.ToElasticsearchConnectorOutputWithContext(context.Background())
}

func (i *ElasticsearchConnector) ToElasticsearchConnectorOutputWithContext(ctx context.Context) ElasticsearchConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchConnectorOutput)
}

// ElasticsearchConnectorArrayInput is an input type that accepts ElasticsearchConnectorArray and ElasticsearchConnectorArrayOutput values.
// You can construct a concrete instance of `ElasticsearchConnectorArrayInput` via:
//
//	ElasticsearchConnectorArray{ ElasticsearchConnectorArgs{...} }
type ElasticsearchConnectorArrayInput interface {
	pulumi.Input

	ToElasticsearchConnectorArrayOutput() ElasticsearchConnectorArrayOutput
	ToElasticsearchConnectorArrayOutputWithContext(context.Context) ElasticsearchConnectorArrayOutput
}

type ElasticsearchConnectorArray []ElasticsearchConnectorInput

func (ElasticsearchConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchConnector)(nil)).Elem()
}

func (i ElasticsearchConnectorArray) ToElasticsearchConnectorArrayOutput() ElasticsearchConnectorArrayOutput {
	return i.ToElasticsearchConnectorArrayOutputWithContext(context.Background())
}

func (i ElasticsearchConnectorArray) ToElasticsearchConnectorArrayOutputWithContext(ctx context.Context) ElasticsearchConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchConnectorArrayOutput)
}

// ElasticsearchConnectorMapInput is an input type that accepts ElasticsearchConnectorMap and ElasticsearchConnectorMapOutput values.
// You can construct a concrete instance of `ElasticsearchConnectorMapInput` via:
//
//	ElasticsearchConnectorMap{ "key": ElasticsearchConnectorArgs{...} }
type ElasticsearchConnectorMapInput interface {
	pulumi.Input

	ToElasticsearchConnectorMapOutput() ElasticsearchConnectorMapOutput
	ToElasticsearchConnectorMapOutputWithContext(context.Context) ElasticsearchConnectorMapOutput
}

type ElasticsearchConnectorMap map[string]ElasticsearchConnectorInput

func (ElasticsearchConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchConnector)(nil)).Elem()
}

func (i ElasticsearchConnectorMap) ToElasticsearchConnectorMapOutput() ElasticsearchConnectorMapOutput {
	return i.ToElasticsearchConnectorMapOutputWithContext(context.Background())
}

func (i ElasticsearchConnectorMap) ToElasticsearchConnectorMapOutputWithContext(ctx context.Context) ElasticsearchConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchConnectorMapOutput)
}

type ElasticsearchConnectorOutput struct{ *pulumi.OutputState }

func (ElasticsearchConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchConnector)(nil)).Elem()
}

func (o ElasticsearchConnectorOutput) ToElasticsearchConnectorOutput() ElasticsearchConnectorOutput {
	return o
}

func (o ElasticsearchConnectorOutput) ToElasticsearchConnectorOutputWithContext(ctx context.Context) ElasticsearchConnectorOutput {
	return o
}

// Authenticate to ElasticSearch using api token.
func (o ElasticsearchConnectorOutput) ApiToken() ElasticsearchConnectorApiTokenPtrOutput {
	return o.ApplyT(func(v *ElasticsearchConnector) ElasticsearchConnectorApiTokenPtrOutput { return v.ApiToken }).(ElasticsearchConnectorApiTokenPtrOutput)
}

// Tags to filter delegates for connection.
func (o ElasticsearchConnectorOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchConnector) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o ElasticsearchConnectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchConnector) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o ElasticsearchConnectorOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticsearchConnector) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o ElasticsearchConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticsearchConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// No Authentication to ElasticSearch
func (o ElasticsearchConnectorOutput) NoAuthentication() ElasticsearchConnectorNoAuthenticationPtrOutput {
	return o.ApplyT(func(v *ElasticsearchConnector) ElasticsearchConnectorNoAuthenticationPtrOutput {
		return v.NoAuthentication
	}).(ElasticsearchConnectorNoAuthenticationPtrOutput)
}

// Unique identifier of the organization.
func (o ElasticsearchConnectorOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchConnector) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o ElasticsearchConnectorOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchConnector) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o ElasticsearchConnectorOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchConnector) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// URL of the ElasticSearch controller.
func (o ElasticsearchConnectorOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticsearchConnector) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Authenticate to ElasticSearch using username and password.
func (o ElasticsearchConnectorOutput) UsernamePassword() ElasticsearchConnectorUsernamePasswordPtrOutput {
	return o.ApplyT(func(v *ElasticsearchConnector) ElasticsearchConnectorUsernamePasswordPtrOutput {
		return v.UsernamePassword
	}).(ElasticsearchConnectorUsernamePasswordPtrOutput)
}

type ElasticsearchConnectorArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchConnector)(nil)).Elem()
}

func (o ElasticsearchConnectorArrayOutput) ToElasticsearchConnectorArrayOutput() ElasticsearchConnectorArrayOutput {
	return o
}

func (o ElasticsearchConnectorArrayOutput) ToElasticsearchConnectorArrayOutputWithContext(ctx context.Context) ElasticsearchConnectorArrayOutput {
	return o
}

func (o ElasticsearchConnectorArrayOutput) Index(i pulumi.IntInput) ElasticsearchConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticsearchConnector {
		return vs[0].([]*ElasticsearchConnector)[vs[1].(int)]
	}).(ElasticsearchConnectorOutput)
}

type ElasticsearchConnectorMapOutput struct{ *pulumi.OutputState }

func (ElasticsearchConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchConnector)(nil)).Elem()
}

func (o ElasticsearchConnectorMapOutput) ToElasticsearchConnectorMapOutput() ElasticsearchConnectorMapOutput {
	return o
}

func (o ElasticsearchConnectorMapOutput) ToElasticsearchConnectorMapOutputWithContext(ctx context.Context) ElasticsearchConnectorMapOutput {
	return o
}

func (o ElasticsearchConnectorMapOutput) MapIndex(k pulumi.StringInput) ElasticsearchConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticsearchConnector {
		return vs[0].(map[string]*ElasticsearchConnector)[vs[1].(string)]
	}).(ElasticsearchConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchConnectorInput)(nil)).Elem(), &ElasticsearchConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchConnectorArrayInput)(nil)).Elem(), ElasticsearchConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchConnectorMapInput)(nil)).Elem(), ElasticsearchConnectorMap{})
	pulumi.RegisterOutputType(ElasticsearchConnectorOutput{})
	pulumi.RegisterOutputType(ElasticsearchConnectorArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchConnectorMapOutput{})
}
