// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Custom Secrets Manager (CSM) connector.
type ConnectorCustomSecretManager struct {
	pulumi.CustomResourceState

	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name       pulumi.StringOutput  `pulumi:"name"`
	OnDelegate pulumi.BoolPtrOutput `pulumi:"onDelegate"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// SSH secret reference for the custom secrets manager, required if 'on_delegate' is false.
	SshSecretRef pulumi.StringPtrOutput `pulumi:"sshSecretRef"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Host where the custom secrets manager is located, required if 'on_delegate' is false.
	TargetHost     pulumi.StringPtrOutput                               `pulumi:"targetHost"`
	TemplateInputs ConnectorCustomSecretManagerTemplateInputArrayOutput `pulumi:"templateInputs"`
	TemplateRef    pulumi.StringOutput                                  `pulumi:"templateRef"`
	Timeout        pulumi.IntPtrOutput                                  `pulumi:"timeout"`
	Type           pulumi.StringPtrOutput                               `pulumi:"type"`
	VersionLabel   pulumi.StringOutput                                  `pulumi:"versionLabel"`
	// The working directory for operations, required if 'on_delegate' is false.
	WorkingDirectory pulumi.StringPtrOutput `pulumi:"workingDirectory"`
}

// NewConnectorCustomSecretManager registers a new resource with the given unique name, arguments, and options.
func NewConnectorCustomSecretManager(ctx *pulumi.Context,
	name string, args *ConnectorCustomSecretManagerArgs, opts ...pulumi.ResourceOption) (*ConnectorCustomSecretManager, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.TemplateRef == nil {
		return nil, errors.New("invalid value for required argument 'TemplateRef'")
	}
	if args.VersionLabel == nil {
		return nil, errors.New("invalid value for required argument 'VersionLabel'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectorCustomSecretManager
	err := ctx.RegisterResource("harness:platform/connectorCustomSecretManager:ConnectorCustomSecretManager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectorCustomSecretManager gets an existing ConnectorCustomSecretManager resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectorCustomSecretManager(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorCustomSecretManagerState, opts ...pulumi.ResourceOption) (*ConnectorCustomSecretManager, error) {
	var resource ConnectorCustomSecretManager
	err := ctx.ReadResource("harness:platform/connectorCustomSecretManager:ConnectorCustomSecretManager", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectorCustomSecretManager resources.
type connectorCustomSecretManagerState struct {
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name       *string `pulumi:"name"`
	OnDelegate *bool   `pulumi:"onDelegate"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// SSH secret reference for the custom secrets manager, required if 'on_delegate' is false.
	SshSecretRef *string `pulumi:"sshSecretRef"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// Host where the custom secrets manager is located, required if 'on_delegate' is false.
	TargetHost     *string                                     `pulumi:"targetHost"`
	TemplateInputs []ConnectorCustomSecretManagerTemplateInput `pulumi:"templateInputs"`
	TemplateRef    *string                                     `pulumi:"templateRef"`
	Timeout        *int                                        `pulumi:"timeout"`
	Type           *string                                     `pulumi:"type"`
	VersionLabel   *string                                     `pulumi:"versionLabel"`
	// The working directory for operations, required if 'on_delegate' is false.
	WorkingDirectory *string `pulumi:"workingDirectory"`
}

type ConnectorCustomSecretManagerState struct {
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name       pulumi.StringPtrInput
	OnDelegate pulumi.BoolPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// SSH secret reference for the custom secrets manager, required if 'on_delegate' is false.
	SshSecretRef pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// Host where the custom secrets manager is located, required if 'on_delegate' is false.
	TargetHost     pulumi.StringPtrInput
	TemplateInputs ConnectorCustomSecretManagerTemplateInputArrayInput
	TemplateRef    pulumi.StringPtrInput
	Timeout        pulumi.IntPtrInput
	Type           pulumi.StringPtrInput
	VersionLabel   pulumi.StringPtrInput
	// The working directory for operations, required if 'on_delegate' is false.
	WorkingDirectory pulumi.StringPtrInput
}

func (ConnectorCustomSecretManagerState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorCustomSecretManagerState)(nil)).Elem()
}

type connectorCustomSecretManagerArgs struct {
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name       *string `pulumi:"name"`
	OnDelegate *bool   `pulumi:"onDelegate"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// SSH secret reference for the custom secrets manager, required if 'on_delegate' is false.
	SshSecretRef *string `pulumi:"sshSecretRef"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// Host where the custom secrets manager is located, required if 'on_delegate' is false.
	TargetHost     *string                                     `pulumi:"targetHost"`
	TemplateInputs []ConnectorCustomSecretManagerTemplateInput `pulumi:"templateInputs"`
	TemplateRef    string                                      `pulumi:"templateRef"`
	Timeout        *int                                        `pulumi:"timeout"`
	Type           *string                                     `pulumi:"type"`
	VersionLabel   string                                      `pulumi:"versionLabel"`
	// The working directory for operations, required if 'on_delegate' is false.
	WorkingDirectory *string `pulumi:"workingDirectory"`
}

// The set of arguments for constructing a ConnectorCustomSecretManager resource.
type ConnectorCustomSecretManagerArgs struct {
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name       pulumi.StringPtrInput
	OnDelegate pulumi.BoolPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// SSH secret reference for the custom secrets manager, required if 'on_delegate' is false.
	SshSecretRef pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// Host where the custom secrets manager is located, required if 'on_delegate' is false.
	TargetHost     pulumi.StringPtrInput
	TemplateInputs ConnectorCustomSecretManagerTemplateInputArrayInput
	TemplateRef    pulumi.StringInput
	Timeout        pulumi.IntPtrInput
	Type           pulumi.StringPtrInput
	VersionLabel   pulumi.StringInput
	// The working directory for operations, required if 'on_delegate' is false.
	WorkingDirectory pulumi.StringPtrInput
}

func (ConnectorCustomSecretManagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorCustomSecretManagerArgs)(nil)).Elem()
}

type ConnectorCustomSecretManagerInput interface {
	pulumi.Input

	ToConnectorCustomSecretManagerOutput() ConnectorCustomSecretManagerOutput
	ToConnectorCustomSecretManagerOutputWithContext(ctx context.Context) ConnectorCustomSecretManagerOutput
}

func (*ConnectorCustomSecretManager) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorCustomSecretManager)(nil)).Elem()
}

func (i *ConnectorCustomSecretManager) ToConnectorCustomSecretManagerOutput() ConnectorCustomSecretManagerOutput {
	return i.ToConnectorCustomSecretManagerOutputWithContext(context.Background())
}

func (i *ConnectorCustomSecretManager) ToConnectorCustomSecretManagerOutputWithContext(ctx context.Context) ConnectorCustomSecretManagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorCustomSecretManagerOutput)
}

// ConnectorCustomSecretManagerArrayInput is an input type that accepts ConnectorCustomSecretManagerArray and ConnectorCustomSecretManagerArrayOutput values.
// You can construct a concrete instance of `ConnectorCustomSecretManagerArrayInput` via:
//
//	ConnectorCustomSecretManagerArray{ ConnectorCustomSecretManagerArgs{...} }
type ConnectorCustomSecretManagerArrayInput interface {
	pulumi.Input

	ToConnectorCustomSecretManagerArrayOutput() ConnectorCustomSecretManagerArrayOutput
	ToConnectorCustomSecretManagerArrayOutputWithContext(context.Context) ConnectorCustomSecretManagerArrayOutput
}

type ConnectorCustomSecretManagerArray []ConnectorCustomSecretManagerInput

func (ConnectorCustomSecretManagerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorCustomSecretManager)(nil)).Elem()
}

func (i ConnectorCustomSecretManagerArray) ToConnectorCustomSecretManagerArrayOutput() ConnectorCustomSecretManagerArrayOutput {
	return i.ToConnectorCustomSecretManagerArrayOutputWithContext(context.Background())
}

func (i ConnectorCustomSecretManagerArray) ToConnectorCustomSecretManagerArrayOutputWithContext(ctx context.Context) ConnectorCustomSecretManagerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorCustomSecretManagerArrayOutput)
}

// ConnectorCustomSecretManagerMapInput is an input type that accepts ConnectorCustomSecretManagerMap and ConnectorCustomSecretManagerMapOutput values.
// You can construct a concrete instance of `ConnectorCustomSecretManagerMapInput` via:
//
//	ConnectorCustomSecretManagerMap{ "key": ConnectorCustomSecretManagerArgs{...} }
type ConnectorCustomSecretManagerMapInput interface {
	pulumi.Input

	ToConnectorCustomSecretManagerMapOutput() ConnectorCustomSecretManagerMapOutput
	ToConnectorCustomSecretManagerMapOutputWithContext(context.Context) ConnectorCustomSecretManagerMapOutput
}

type ConnectorCustomSecretManagerMap map[string]ConnectorCustomSecretManagerInput

func (ConnectorCustomSecretManagerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorCustomSecretManager)(nil)).Elem()
}

func (i ConnectorCustomSecretManagerMap) ToConnectorCustomSecretManagerMapOutput() ConnectorCustomSecretManagerMapOutput {
	return i.ToConnectorCustomSecretManagerMapOutputWithContext(context.Background())
}

func (i ConnectorCustomSecretManagerMap) ToConnectorCustomSecretManagerMapOutputWithContext(ctx context.Context) ConnectorCustomSecretManagerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorCustomSecretManagerMapOutput)
}

type ConnectorCustomSecretManagerOutput struct{ *pulumi.OutputState }

func (ConnectorCustomSecretManagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorCustomSecretManager)(nil)).Elem()
}

func (o ConnectorCustomSecretManagerOutput) ToConnectorCustomSecretManagerOutput() ConnectorCustomSecretManagerOutput {
	return o
}

func (o ConnectorCustomSecretManagerOutput) ToConnectorCustomSecretManagerOutputWithContext(ctx context.Context) ConnectorCustomSecretManagerOutput {
	return o
}

// Tags to filter delegates for connection.
func (o ConnectorCustomSecretManagerOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorCustomSecretManager) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o ConnectorCustomSecretManagerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorCustomSecretManager) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o ConnectorCustomSecretManagerOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorCustomSecretManager) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o ConnectorCustomSecretManagerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorCustomSecretManager) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ConnectorCustomSecretManagerOutput) OnDelegate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectorCustomSecretManager) pulumi.BoolPtrOutput { return v.OnDelegate }).(pulumi.BoolPtrOutput)
}

// Unique identifier of the organization.
func (o ConnectorCustomSecretManagerOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorCustomSecretManager) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o ConnectorCustomSecretManagerOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorCustomSecretManager) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// SSH secret reference for the custom secrets manager, required if 'on_delegate' is false.
func (o ConnectorCustomSecretManagerOutput) SshSecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorCustomSecretManager) pulumi.StringPtrOutput { return v.SshSecretRef }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o ConnectorCustomSecretManagerOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorCustomSecretManager) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Host where the custom secrets manager is located, required if 'on_delegate' is false.
func (o ConnectorCustomSecretManagerOutput) TargetHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorCustomSecretManager) pulumi.StringPtrOutput { return v.TargetHost }).(pulumi.StringPtrOutput)
}

func (o ConnectorCustomSecretManagerOutput) TemplateInputs() ConnectorCustomSecretManagerTemplateInputArrayOutput {
	return o.ApplyT(func(v *ConnectorCustomSecretManager) ConnectorCustomSecretManagerTemplateInputArrayOutput {
		return v.TemplateInputs
	}).(ConnectorCustomSecretManagerTemplateInputArrayOutput)
}

func (o ConnectorCustomSecretManagerOutput) TemplateRef() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorCustomSecretManager) pulumi.StringOutput { return v.TemplateRef }).(pulumi.StringOutput)
}

func (o ConnectorCustomSecretManagerOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectorCustomSecretManager) pulumi.IntPtrOutput { return v.Timeout }).(pulumi.IntPtrOutput)
}

func (o ConnectorCustomSecretManagerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorCustomSecretManager) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func (o ConnectorCustomSecretManagerOutput) VersionLabel() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorCustomSecretManager) pulumi.StringOutput { return v.VersionLabel }).(pulumi.StringOutput)
}

// The working directory for operations, required if 'on_delegate' is false.
func (o ConnectorCustomSecretManagerOutput) WorkingDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorCustomSecretManager) pulumi.StringPtrOutput { return v.WorkingDirectory }).(pulumi.StringPtrOutput)
}

type ConnectorCustomSecretManagerArrayOutput struct{ *pulumi.OutputState }

func (ConnectorCustomSecretManagerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorCustomSecretManager)(nil)).Elem()
}

func (o ConnectorCustomSecretManagerArrayOutput) ToConnectorCustomSecretManagerArrayOutput() ConnectorCustomSecretManagerArrayOutput {
	return o
}

func (o ConnectorCustomSecretManagerArrayOutput) ToConnectorCustomSecretManagerArrayOutputWithContext(ctx context.Context) ConnectorCustomSecretManagerArrayOutput {
	return o
}

func (o ConnectorCustomSecretManagerArrayOutput) Index(i pulumi.IntInput) ConnectorCustomSecretManagerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectorCustomSecretManager {
		return vs[0].([]*ConnectorCustomSecretManager)[vs[1].(int)]
	}).(ConnectorCustomSecretManagerOutput)
}

type ConnectorCustomSecretManagerMapOutput struct{ *pulumi.OutputState }

func (ConnectorCustomSecretManagerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorCustomSecretManager)(nil)).Elem()
}

func (o ConnectorCustomSecretManagerMapOutput) ToConnectorCustomSecretManagerMapOutput() ConnectorCustomSecretManagerMapOutput {
	return o
}

func (o ConnectorCustomSecretManagerMapOutput) ToConnectorCustomSecretManagerMapOutputWithContext(ctx context.Context) ConnectorCustomSecretManagerMapOutput {
	return o
}

func (o ConnectorCustomSecretManagerMapOutput) MapIndex(k pulumi.StringInput) ConnectorCustomSecretManagerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectorCustomSecretManager {
		return vs[0].(map[string]*ConnectorCustomSecretManager)[vs[1].(string)]
	}).(ConnectorCustomSecretManagerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorCustomSecretManagerInput)(nil)).Elem(), &ConnectorCustomSecretManager{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorCustomSecretManagerArrayInput)(nil)).Elem(), ConnectorCustomSecretManagerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorCustomSecretManagerMapInput)(nil)).Elem(), ConnectorCustomSecretManagerMap{})
	pulumi.RegisterOutputType(ConnectorCustomSecretManagerOutput{})
	pulumi.RegisterOutputType(ConnectorCustomSecretManagerArrayOutput{})
	pulumi.RegisterOutputType(ConnectorCustomSecretManagerMapOutput{})
}
