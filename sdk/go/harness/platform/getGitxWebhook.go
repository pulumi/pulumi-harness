// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Harness pipeline.
func LookupGitxWebhook(ctx *pulumi.Context, args *LookupGitxWebhookArgs, opts ...pulumi.InvokeOption) (*LookupGitxWebhookResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGitxWebhookResult
	err := ctx.Invoke("harness:platform/getGitxWebhook:getGitxWebhook", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGitxWebhook.
type LookupGitxWebhookArgs struct {
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

// A collection of values returned by getGitxWebhook.
type LookupGitxWebhookResult struct {
	// Description of the resource.
	Description *string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

func LookupGitxWebhookOutput(ctx *pulumi.Context, args LookupGitxWebhookOutputArgs, opts ...pulumi.InvokeOption) LookupGitxWebhookResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupGitxWebhookResultOutput, error) {
			args := v.(LookupGitxWebhookArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getGitxWebhook:getGitxWebhook", args, LookupGitxWebhookResultOutput{}, options).(LookupGitxWebhookResultOutput), nil
		}).(LookupGitxWebhookResultOutput)
}

// A collection of arguments for invoking getGitxWebhook.
type LookupGitxWebhookOutputArgs struct {
	// Description of the resource.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (LookupGitxWebhookOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitxWebhookArgs)(nil)).Elem()
}

// A collection of values returned by getGitxWebhook.
type LookupGitxWebhookResultOutput struct{ *pulumi.OutputState }

func (LookupGitxWebhookResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitxWebhookResult)(nil)).Elem()
}

func (o LookupGitxWebhookResultOutput) ToLookupGitxWebhookResultOutput() LookupGitxWebhookResultOutput {
	return o
}

func (o LookupGitxWebhookResultOutput) ToLookupGitxWebhookResultOutputWithContext(ctx context.Context) LookupGitxWebhookResultOutput {
	return o
}

// Description of the resource.
func (o LookupGitxWebhookResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitxWebhookResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupGitxWebhookResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitxWebhookResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupGitxWebhookResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitxWebhookResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o LookupGitxWebhookResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitxWebhookResult) string { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o LookupGitxWebhookResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitxWebhookResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o LookupGitxWebhookResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitxWebhookResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o LookupGitxWebhookResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupGitxWebhookResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGitxWebhookResultOutput{})
}
