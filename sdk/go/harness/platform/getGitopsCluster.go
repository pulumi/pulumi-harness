// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for fetching a Harness GitOps Cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.GetGitopsCluster(ctx, &platform.GetGitopsClusterArgs{
//				Identifier: "identifier",
//				AccountId:  pulumi.StringRef("account_id"),
//				ProjectId:  pulumi.StringRef("project_id"),
//				OrgId:      pulumi.StringRef("org_id"),
//				AgentId:    "agent_id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetGitopsCluster(ctx *pulumi.Context, args *GetGitopsClusterArgs, opts ...pulumi.InvokeOption) (*GetGitopsClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetGitopsClusterResult
	err := ctx.Invoke("harness:platform/getGitopsCluster:getGitopsCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGitopsCluster.
type GetGitopsClusterArgs struct {
	// Account identifier of the GitOps cluster.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId *string `pulumi:"accountId"`
	// Agent identifier of the GitOps cluster.
	AgentId string `pulumi:"agentId"`
	// Identifier of the GitOps cluster.
	Identifier string `pulumi:"identifier"`
	// Organization identifier of the cluster.
	OrgId *string `pulumi:"orgId"`
	// Project identifier of the GitOps cluster.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getGitopsCluster.
type GetGitopsClusterResult struct {
	// Account identifier of the GitOps cluster.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId string `pulumi:"accountId"`
	// Agent identifier of the GitOps cluster.
	AgentId string `pulumi:"agentId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Identifier of the GitOps cluster.
	Identifier string `pulumi:"identifier"`
	// Organization identifier of the cluster.
	OrgId *string `pulumi:"orgId"`
	// Project identifier of the GitOps cluster.
	ProjectId *string `pulumi:"projectId"`
	// Cluster create or update request.
	Requests []GetGitopsClusterRequest `pulumi:"requests"`
}

func GetGitopsClusterOutput(ctx *pulumi.Context, args GetGitopsClusterOutputArgs, opts ...pulumi.InvokeOption) GetGitopsClusterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetGitopsClusterResultOutput, error) {
			args := v.(GetGitopsClusterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getGitopsCluster:getGitopsCluster", args, GetGitopsClusterResultOutput{}, options).(GetGitopsClusterResultOutput), nil
		}).(GetGitopsClusterResultOutput)
}

// A collection of arguments for invoking getGitopsCluster.
type GetGitopsClusterOutputArgs struct {
	// Account identifier of the GitOps cluster.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// Agent identifier of the GitOps cluster.
	AgentId pulumi.StringInput `pulumi:"agentId"`
	// Identifier of the GitOps cluster.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Organization identifier of the cluster.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Project identifier of the GitOps cluster.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (GetGitopsClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGitopsClusterArgs)(nil)).Elem()
}

// A collection of values returned by getGitopsCluster.
type GetGitopsClusterResultOutput struct{ *pulumi.OutputState }

func (GetGitopsClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGitopsClusterResult)(nil)).Elem()
}

func (o GetGitopsClusterResultOutput) ToGetGitopsClusterResultOutput() GetGitopsClusterResultOutput {
	return o
}

func (o GetGitopsClusterResultOutput) ToGetGitopsClusterResultOutputWithContext(ctx context.Context) GetGitopsClusterResultOutput {
	return o
}

// Account identifier of the GitOps cluster.
//
// Deprecated: This field is deprecated and will be removed in a future release.
func (o GetGitopsClusterResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGitopsClusterResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Agent identifier of the GitOps cluster.
func (o GetGitopsClusterResultOutput) AgentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGitopsClusterResult) string { return v.AgentId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetGitopsClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGitopsClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// Identifier of the GitOps cluster.
func (o GetGitopsClusterResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v GetGitopsClusterResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Organization identifier of the cluster.
func (o GetGitopsClusterResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGitopsClusterResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Project identifier of the GitOps cluster.
func (o GetGitopsClusterResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGitopsClusterResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Cluster create or update request.
func (o GetGitopsClusterResultOutput) Requests() GetGitopsClusterRequestArrayOutput {
	return o.ApplyT(func(v GetGitopsClusterResult) []GetGitopsClusterRequest { return v.Requests }).(GetGitopsClusterRequestArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGitopsClusterResultOutput{})
}
