// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewInfraModule(ctx, "example", &platform.InfraModuleArgs{
//				Description:         pulumi.String("example"),
//				Name:                pulumi.String("name"),
//				System:              pulumi.String("provider"),
//				Repository:          pulumi.String("https://github.com/org/repo"),
//				RepositoryBranch:    pulumi.String("main"),
//				RepositoryPath:      pulumi.String("tf/aws/basic"),
//				RepositoryConnector: pulumi.Any(test.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import harness:platform/infraModule:InfraModule example <org_id>/<module_id>
// ```
type InfraModule struct {
	pulumi.CustomResourceState

	// Timestamp when the module was created.
	Created pulumi.IntOutput `pulumi:"created"`
	// Description of the module.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the module.
	Name pulumi.StringOutput `pulumi:"name"`
	// For account connectors, the repository where the module can be found
	Repository pulumi.StringPtrOutput `pulumi:"repository"`
	// Name of the branch to fetch the code from. This cannot be set if repository commit is set.
	RepositoryBranch pulumi.StringPtrOutput `pulumi:"repositoryBranch"`
	// Tag to fetch the code from. This cannot be set if repository branch is set.
	RepositoryCommit pulumi.StringPtrOutput `pulumi:"repositoryCommit"`
	// Reference to the connector to be used to fetch the code.
	RepositoryConnector pulumi.StringPtrOutput `pulumi:"repositoryConnector"`
	// Path to the module within the repository.
	RepositoryPath pulumi.StringPtrOutput `pulumi:"repositoryPath"`
	// URL of the repository where the module is stored.
	RepositoryUrl pulumi.StringOutput `pulumi:"repositoryUrl"`
	// Timestamp when the module was last synced.
	Synced pulumi.IntOutput `pulumi:"synced"`
	// Provider of the module.
	System pulumi.StringOutput `pulumi:"system"`
	// Git tags associated with the module.
	Tags pulumi.StringOutput `pulumi:"tags"`
	// List of versions of the module.
	Versions pulumi.StringArrayOutput `pulumi:"versions"`
}

// NewInfraModule registers a new resource with the given unique name, arguments, and options.
func NewInfraModule(ctx *pulumi.Context,
	name string, args *InfraModuleArgs, opts ...pulumi.ResourceOption) (*InfraModule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.System == nil {
		return nil, errors.New("invalid value for required argument 'System'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InfraModule
	err := ctx.RegisterResource("harness:platform/infraModule:InfraModule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInfraModule gets an existing InfraModule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInfraModule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InfraModuleState, opts ...pulumi.ResourceOption) (*InfraModule, error) {
	var resource InfraModule
	err := ctx.ReadResource("harness:platform/infraModule:InfraModule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InfraModule resources.
type infraModuleState struct {
	// Timestamp when the module was created.
	Created *int `pulumi:"created"`
	// Description of the module.
	Description *string `pulumi:"description"`
	// Name of the module.
	Name *string `pulumi:"name"`
	// For account connectors, the repository where the module can be found
	Repository *string `pulumi:"repository"`
	// Name of the branch to fetch the code from. This cannot be set if repository commit is set.
	RepositoryBranch *string `pulumi:"repositoryBranch"`
	// Tag to fetch the code from. This cannot be set if repository branch is set.
	RepositoryCommit *string `pulumi:"repositoryCommit"`
	// Reference to the connector to be used to fetch the code.
	RepositoryConnector *string `pulumi:"repositoryConnector"`
	// Path to the module within the repository.
	RepositoryPath *string `pulumi:"repositoryPath"`
	// URL of the repository where the module is stored.
	RepositoryUrl *string `pulumi:"repositoryUrl"`
	// Timestamp when the module was last synced.
	Synced *int `pulumi:"synced"`
	// Provider of the module.
	System *string `pulumi:"system"`
	// Git tags associated with the module.
	Tags *string `pulumi:"tags"`
	// List of versions of the module.
	Versions []string `pulumi:"versions"`
}

type InfraModuleState struct {
	// Timestamp when the module was created.
	Created pulumi.IntPtrInput
	// Description of the module.
	Description pulumi.StringPtrInput
	// Name of the module.
	Name pulumi.StringPtrInput
	// For account connectors, the repository where the module can be found
	Repository pulumi.StringPtrInput
	// Name of the branch to fetch the code from. This cannot be set if repository commit is set.
	RepositoryBranch pulumi.StringPtrInput
	// Tag to fetch the code from. This cannot be set if repository branch is set.
	RepositoryCommit pulumi.StringPtrInput
	// Reference to the connector to be used to fetch the code.
	RepositoryConnector pulumi.StringPtrInput
	// Path to the module within the repository.
	RepositoryPath pulumi.StringPtrInput
	// URL of the repository where the module is stored.
	RepositoryUrl pulumi.StringPtrInput
	// Timestamp when the module was last synced.
	Synced pulumi.IntPtrInput
	// Provider of the module.
	System pulumi.StringPtrInput
	// Git tags associated with the module.
	Tags pulumi.StringPtrInput
	// List of versions of the module.
	Versions pulumi.StringArrayInput
}

func (InfraModuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*infraModuleState)(nil)).Elem()
}

type infraModuleArgs struct {
	// Timestamp when the module was created.
	Created *int `pulumi:"created"`
	// Description of the module.
	Description *string `pulumi:"description"`
	// Name of the module.
	Name *string `pulumi:"name"`
	// For account connectors, the repository where the module can be found
	Repository *string `pulumi:"repository"`
	// Name of the branch to fetch the code from. This cannot be set if repository commit is set.
	RepositoryBranch *string `pulumi:"repositoryBranch"`
	// Tag to fetch the code from. This cannot be set if repository branch is set.
	RepositoryCommit *string `pulumi:"repositoryCommit"`
	// Reference to the connector to be used to fetch the code.
	RepositoryConnector *string `pulumi:"repositoryConnector"`
	// Path to the module within the repository.
	RepositoryPath *string `pulumi:"repositoryPath"`
	// URL of the repository where the module is stored.
	RepositoryUrl *string `pulumi:"repositoryUrl"`
	// Timestamp when the module was last synced.
	Synced *int `pulumi:"synced"`
	// Provider of the module.
	System string `pulumi:"system"`
	// Git tags associated with the module.
	Tags *string `pulumi:"tags"`
	// List of versions of the module.
	Versions []string `pulumi:"versions"`
}

// The set of arguments for constructing a InfraModule resource.
type InfraModuleArgs struct {
	// Timestamp when the module was created.
	Created pulumi.IntPtrInput
	// Description of the module.
	Description pulumi.StringPtrInput
	// Name of the module.
	Name pulumi.StringPtrInput
	// For account connectors, the repository where the module can be found
	Repository pulumi.StringPtrInput
	// Name of the branch to fetch the code from. This cannot be set if repository commit is set.
	RepositoryBranch pulumi.StringPtrInput
	// Tag to fetch the code from. This cannot be set if repository branch is set.
	RepositoryCommit pulumi.StringPtrInput
	// Reference to the connector to be used to fetch the code.
	RepositoryConnector pulumi.StringPtrInput
	// Path to the module within the repository.
	RepositoryPath pulumi.StringPtrInput
	// URL of the repository where the module is stored.
	RepositoryUrl pulumi.StringPtrInput
	// Timestamp when the module was last synced.
	Synced pulumi.IntPtrInput
	// Provider of the module.
	System pulumi.StringInput
	// Git tags associated with the module.
	Tags pulumi.StringPtrInput
	// List of versions of the module.
	Versions pulumi.StringArrayInput
}

func (InfraModuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*infraModuleArgs)(nil)).Elem()
}

type InfraModuleInput interface {
	pulumi.Input

	ToInfraModuleOutput() InfraModuleOutput
	ToInfraModuleOutputWithContext(ctx context.Context) InfraModuleOutput
}

func (*InfraModule) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraModule)(nil)).Elem()
}

func (i *InfraModule) ToInfraModuleOutput() InfraModuleOutput {
	return i.ToInfraModuleOutputWithContext(context.Background())
}

func (i *InfraModule) ToInfraModuleOutputWithContext(ctx context.Context) InfraModuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraModuleOutput)
}

// InfraModuleArrayInput is an input type that accepts InfraModuleArray and InfraModuleArrayOutput values.
// You can construct a concrete instance of `InfraModuleArrayInput` via:
//
//	InfraModuleArray{ InfraModuleArgs{...} }
type InfraModuleArrayInput interface {
	pulumi.Input

	ToInfraModuleArrayOutput() InfraModuleArrayOutput
	ToInfraModuleArrayOutputWithContext(context.Context) InfraModuleArrayOutput
}

type InfraModuleArray []InfraModuleInput

func (InfraModuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InfraModule)(nil)).Elem()
}

func (i InfraModuleArray) ToInfraModuleArrayOutput() InfraModuleArrayOutput {
	return i.ToInfraModuleArrayOutputWithContext(context.Background())
}

func (i InfraModuleArray) ToInfraModuleArrayOutputWithContext(ctx context.Context) InfraModuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraModuleArrayOutput)
}

// InfraModuleMapInput is an input type that accepts InfraModuleMap and InfraModuleMapOutput values.
// You can construct a concrete instance of `InfraModuleMapInput` via:
//
//	InfraModuleMap{ "key": InfraModuleArgs{...} }
type InfraModuleMapInput interface {
	pulumi.Input

	ToInfraModuleMapOutput() InfraModuleMapOutput
	ToInfraModuleMapOutputWithContext(context.Context) InfraModuleMapOutput
}

type InfraModuleMap map[string]InfraModuleInput

func (InfraModuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InfraModule)(nil)).Elem()
}

func (i InfraModuleMap) ToInfraModuleMapOutput() InfraModuleMapOutput {
	return i.ToInfraModuleMapOutputWithContext(context.Background())
}

func (i InfraModuleMap) ToInfraModuleMapOutputWithContext(ctx context.Context) InfraModuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraModuleMapOutput)
}

type InfraModuleOutput struct{ *pulumi.OutputState }

func (InfraModuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraModule)(nil)).Elem()
}

func (o InfraModuleOutput) ToInfraModuleOutput() InfraModuleOutput {
	return o
}

func (o InfraModuleOutput) ToInfraModuleOutputWithContext(ctx context.Context) InfraModuleOutput {
	return o
}

// Timestamp when the module was created.
func (o InfraModuleOutput) Created() pulumi.IntOutput {
	return o.ApplyT(func(v *InfraModule) pulumi.IntOutput { return v.Created }).(pulumi.IntOutput)
}

// Description of the module.
func (o InfraModuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfraModule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the module.
func (o InfraModuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// For account connectors, the repository where the module can be found
func (o InfraModuleOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfraModule) pulumi.StringPtrOutput { return v.Repository }).(pulumi.StringPtrOutput)
}

// Name of the branch to fetch the code from. This cannot be set if repository commit is set.
func (o InfraModuleOutput) RepositoryBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfraModule) pulumi.StringPtrOutput { return v.RepositoryBranch }).(pulumi.StringPtrOutput)
}

// Tag to fetch the code from. This cannot be set if repository branch is set.
func (o InfraModuleOutput) RepositoryCommit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfraModule) pulumi.StringPtrOutput { return v.RepositoryCommit }).(pulumi.StringPtrOutput)
}

// Reference to the connector to be used to fetch the code.
func (o InfraModuleOutput) RepositoryConnector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfraModule) pulumi.StringPtrOutput { return v.RepositoryConnector }).(pulumi.StringPtrOutput)
}

// Path to the module within the repository.
func (o InfraModuleOutput) RepositoryPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfraModule) pulumi.StringPtrOutput { return v.RepositoryPath }).(pulumi.StringPtrOutput)
}

// URL of the repository where the module is stored.
func (o InfraModuleOutput) RepositoryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModule) pulumi.StringOutput { return v.RepositoryUrl }).(pulumi.StringOutput)
}

// Timestamp when the module was last synced.
func (o InfraModuleOutput) Synced() pulumi.IntOutput {
	return o.ApplyT(func(v *InfraModule) pulumi.IntOutput { return v.Synced }).(pulumi.IntOutput)
}

// Provider of the module.
func (o InfraModuleOutput) System() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModule) pulumi.StringOutput { return v.System }).(pulumi.StringOutput)
}

// Git tags associated with the module.
func (o InfraModuleOutput) Tags() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModule) pulumi.StringOutput { return v.Tags }).(pulumi.StringOutput)
}

// List of versions of the module.
func (o InfraModuleOutput) Versions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InfraModule) pulumi.StringArrayOutput { return v.Versions }).(pulumi.StringArrayOutput)
}

type InfraModuleArrayOutput struct{ *pulumi.OutputState }

func (InfraModuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InfraModule)(nil)).Elem()
}

func (o InfraModuleArrayOutput) ToInfraModuleArrayOutput() InfraModuleArrayOutput {
	return o
}

func (o InfraModuleArrayOutput) ToInfraModuleArrayOutputWithContext(ctx context.Context) InfraModuleArrayOutput {
	return o
}

func (o InfraModuleArrayOutput) Index(i pulumi.IntInput) InfraModuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InfraModule {
		return vs[0].([]*InfraModule)[vs[1].(int)]
	}).(InfraModuleOutput)
}

type InfraModuleMapOutput struct{ *pulumi.OutputState }

func (InfraModuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InfraModule)(nil)).Elem()
}

func (o InfraModuleMapOutput) ToInfraModuleMapOutput() InfraModuleMapOutput {
	return o
}

func (o InfraModuleMapOutput) ToInfraModuleMapOutputWithContext(ctx context.Context) InfraModuleMapOutput {
	return o
}

func (o InfraModuleMapOutput) MapIndex(k pulumi.StringInput) InfraModuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InfraModule {
		return vs[0].(map[string]*InfraModule)[vs[1].(string)]
	}).(InfraModuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InfraModuleInput)(nil)).Elem(), &InfraModule{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfraModuleArrayInput)(nil)).Elem(), InfraModuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfraModuleMapInput)(nil)).Elem(), InfraModuleMap{})
	pulumi.RegisterOutputType(InfraModuleOutput{})
	pulumi.RegisterOutputType(InfraModuleArrayOutput{})
	pulumi.RegisterOutputType(InfraModuleMapOutput{})
}
