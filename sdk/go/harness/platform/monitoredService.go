// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a monitored service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"connectorRef": "connectorRef",
//				"queryDefinitions": []map[string]interface{}{
//					map[string]interface{}{
//						"name":       "error_4xx",
//						"identifier": "error_4xx_id",
//						"query":      "Bad Request",
//						"index":      "index",
//						"groupName":  "Logs_Group",
//						"queryParams": map[string]interface{}{
//							"index":                "index",
//							"serviceInstanceField": "serviceInstanceIdentifier",
//							"timeStampIdentifier":  "timeStampIdentifier",
//							"timeStampFormat":      "timeStampFormat",
//							"messageIdentifier":    "messageIdentifier",
//						},
//					},
//					map[string]interface{}{
//						"name":       "error_5xx",
//						"identifier": "error_5xx_id",
//						"query":      "Internal Server Error",
//						"index":      "index2",
//						"groupName":  "Logs_Group",
//						"queryParams": map[string]interface{}{
//							"index":                "index",
//							"serviceInstanceField": "serviceInstanceIdentifier",
//							"timeStampIdentifier":  "timeStampIdentifier",
//							"timeStampFormat":      "timeStampFormat",
//							"messageIdentifier":    "messageIdentifier",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"connectorRef":       "account.pd",
//				"pagerDutyServiceId": "P0N21OB",
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			tmpJSON2, err := json.Marshal(map[string]interface{}{
//				"name":               "FH",
//				"webhookUrl":         "https://harness.io/cv/api/account/sampleAcc/org/sampleOrg/project/sampleProj/webhook/custom-change?monitoredServiceIdentifier=checkout_prod&changeSourceIdentifier=FH",
//				"webhookCurlCommand": "curl -X POST -H 'content-type: application/json' -H 'X-Api-Key: sample_api_key' --url 'https://harness.io/cv/api/account/sampleAcc/org/sampleOrg/project/sampleProj/webhook/custom-change?monitoredServiceIdentifier=checkout_prod&changeSourceIdentifier=FH' -d '{ \"eventIdentifier\": \"<string>\" (optional), \"user\": \"user@harness.io\", \"startTime\": timeInMs, \"endTime\": timeInMs, \"eventDetail\": { \"description\": \"<String>\", \"changeEventDetailsLink\": \"urlString\" (optional), \"externalLinkToEntity\": \"urlString\" (optional), \"name\": \"changeEventName\" } }'",
//				"type":               "Alert",
//			})
//			if err != nil {
//				return err
//			}
//			json2 := string(tmpJSON2)
//			tmpJSON3, err := json.Marshal(map[string]interface{}{
//				"type": "FeatureFlag",
//			})
//			if err != nil {
//				return err
//			}
//			json3 := string(tmpJSON3)
//			tmpJSON4, err := json.Marshal(map[string]interface{}{
//				"type": "Deployment",
//			})
//			if err != nil {
//				return err
//			}
//			json4 := string(tmpJSON4)
//			tmpJSON5, err := json.Marshal(map[string]interface{}{
//				"type":               "Alert",
//				"authorizationToken": "abc",
//			})
//			if err != nil {
//				return err
//			}
//			json5 := string(tmpJSON5)
//			// Sample template for Elastic Search Log Health Source
//			_, err = platform.NewMonitoredService(ctx, "example", &platform.MonitoredServiceArgs{
//				OrgId:      pulumi.String("org_id"),
//				ProjectId:  pulumi.String("project_id"),
//				Identifier: pulumi.String("identifier"),
//				Request: &platform.MonitoredServiceRequestArgs{
//					Name:           pulumi.String("name"),
//					Type:           pulumi.String("Application"),
//					Description:    pulumi.String("description"),
//					ServiceRef:     pulumi.String("service_ref"),
//					EnvironmentRef: pulumi.String("environment_ref"),
//					Tags: pulumi.StringArray{
//						pulumi.String("foo:bar"),
//						pulumi.String("bar:foo"),
//					},
//					HealthSources: platform.MonitoredServiceRequestHealthSourceArray{
//						&platform.MonitoredServiceRequestHealthSourceArgs{
//							Name:       pulumi.String("name"),
//							Identifier: pulumi.String("identifier"),
//							Type:       pulumi.String("ElasticSearch"),
//							Version:    pulumi.String("v2"),
//							Spec:       pulumi.String(json0),
//						},
//					},
//					ChangeSources: platform.MonitoredServiceRequestChangeSourceArray{
//						&platform.MonitoredServiceRequestChangeSourceArgs{
//							Name:       pulumi.String("BAC"),
//							Identifier: pulumi.String("BAC"),
//							Type:       pulumi.String("PagerDuty"),
//							Enabled:    pulumi.Bool(true),
//							Spec:       pulumi.String(json1),
//							Category:   pulumi.String("Alert"),
//						},
//						&platform.MonitoredServiceRequestChangeSourceArgs{
//							Name:       pulumi.String("FH"),
//							Identifier: pulumi.String("FH"),
//							Type:       pulumi.String("CustomIncident"),
//							Enabled:    pulumi.Bool(true),
//							Spec:       pulumi.String(json2),
//							Category:   pulumi.String("Alert"),
//						},
//						&platform.MonitoredServiceRequestChangeSourceArgs{
//							Name:       pulumi.String("customff"),
//							Identifier: pulumi.String("customff"),
//							Type:       pulumi.String("CustomFF"),
//							Enabled:    pulumi.Bool(true),
//							Category:   pulumi.String("FeatureFlag"),
//							Spec:       pulumi.String(json3),
//						},
//						&platform.MonitoredServiceRequestChangeSourceArgs{
//							Name:       pulumi.String("customdeploy"),
//							Identifier: pulumi.String("customdeploy"),
//							Type:       pulumi.String("CustomDeploy"),
//							Enabled:    pulumi.Bool(true),
//							Category:   pulumi.String("Deployment"),
//							Spec:       pulumi.String(json4),
//						},
//						&platform.MonitoredServiceRequestChangeSourceArgs{
//							Name:       pulumi.String("customincident"),
//							Identifier: pulumi.String("customincident"),
//							Type:       pulumi.String("CustomIncident"),
//							Enabled:    pulumi.Bool(true),
//							Category:   pulumi.String("Alert"),
//							Spec:       pulumi.String(json5),
//						},
//					},
//					NotificationRuleRefs: platform.MonitoredServiceRequestNotificationRuleRefArray{
//						&platform.MonitoredServiceRequestNotificationRuleRefArgs{
//							NotificationRuleRef: pulumi.String("notification_rule_ref"),
//							Enabled:             pulumi.Bool(true),
//						},
//						&platform.MonitoredServiceRequestNotificationRuleRefArgs{
//							NotificationRuleRef: pulumi.String("notification_rule_ref1"),
//							Enabled:             pulumi.Bool(false),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON6, err := json.Marshal(map[string]interface{}{
//				"connectorRef": "connectorRef",
//				"queryDefinitions": []interface{}{
//					map[string]interface{}{
//						"name":       "metric_cpu",
//						"identifier": "metric_cpu",
//						"query":      "metric=cpu",
//						"groupName":  "g1",
//						"queryParams": map[string]interface{}{
//							"serviceInstanceField": "_sourcehost",
//						},
//						"riskProfile": map[string]interface{}{
//							"riskCategory": "Performance_Other",
//							"thresholdTypes": []string{
//								"ACT_WHEN_HIGHER",
//							},
//						},
//						"liveMonitoringEnabled":         "true",
//						"continuousVerificationEnabled": "true",
//						"sliEnabled":                    "false",
//						"metricThresholds": []map[string]interface{}{
//							map[string]interface{}{
//								"type": "IgnoreThreshold",
//								"spec": map[string]interface{}{
//									"action": "Ignore",
//								},
//								"criteria": map[string]interface{}{
//									"type": "Absolute",
//									"spec": map[string]interface{}{
//										"greaterThan": 100,
//									},
//								},
//								"metricType": "Custom",
//								"metricName": "metric_cpu",
//							},
//							map[string]interface{}{
//								"type": "FailImmediately",
//								"spec": map[string]interface{}{
//									"action": "FailAfterOccurrence",
//									"spec": map[string]interface{}{
//										"count": 2,
//									},
//								},
//								"criteria": map[string]interface{}{
//									"type": "Absolute",
//									"spec": map[string]interface{}{
//										"greaterThan": 100,
//									},
//								},
//								"metricType": "Custom",
//								"metricName": "metric_cpu",
//							},
//						},
//					},
//					map[string]interface{}{
//						"name":       "name2",
//						"identifier": "identifier2",
//						"groupName":  "g2",
//						"query":      "metric=memory",
//						"queryParams": map[string]interface{}{
//							"serviceInstanceField": "_sourcehost",
//						},
//						"riskProfile": map[string]interface{}{
//							"riskCategory": "Performance_Other",
//							"thresholdTypes": []string{
//								"ACT_WHEN_HIGHER",
//							},
//						},
//						"liveMonitoringEnabled":         "false",
//						"continuousVerificationEnabled": "false",
//						"sliEnabled":                    "false",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json6 := string(tmpJSON6)
//			// Sample template for Sumologic Metrics Health Source
//			_, err = platform.NewMonitoredService(ctx, "example1", &platform.MonitoredServiceArgs{
//				OrgId:      pulumi.String("org_id"),
//				ProjectId:  pulumi.String("project_id"),
//				Identifier: pulumi.String("identifier"),
//				Request: &platform.MonitoredServiceRequestArgs{
//					Name:           pulumi.String("name"),
//					Type:           pulumi.String("Application"),
//					Description:    pulumi.String("description"),
//					ServiceRef:     pulumi.String("service_ref"),
//					EnvironmentRef: pulumi.String("environment_ref"),
//					Tags: pulumi.StringArray{
//						pulumi.String("foo:bar"),
//						pulumi.String("bar:foo"),
//					},
//					HealthSources: platform.MonitoredServiceRequestHealthSourceArray{
//						&platform.MonitoredServiceRequestHealthSourceArgs{
//							Name:       pulumi.String("sumologicmetrics"),
//							Identifier: pulumi.String("sumo_metric_identifier"),
//							Type:       pulumi.String("SumologicMetrics"),
//							Version:    pulumi.String("v2"),
//							Spec:       pulumi.String(json6),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON7, err := json.Marshal(map[string]interface{}{
//				"connectorRef": "connectorRef",
//				"queryDefinitions": []map[string]interface{}{
//					map[string]interface{}{
//						"name":       "log1",
//						"identifier": "log1",
//						"query":      "*",
//						"groupName":  "Logs Group",
//						"queryParams": map[string]interface{}{
//							"serviceInstanceField": "_sourcehost",
//						},
//					},
//					map[string]interface{}{
//						"name":       "log2",
//						"identifier": "identifier2",
//						"groupName":  "g2",
//						"query":      "error",
//						"queryParams": map[string]interface{}{
//							"serviceInstanceField": "_sourcehost",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json7 := string(tmpJSON7)
//			// Sample template for Sumologic Log Health Source
//			_, err = platform.NewMonitoredService(ctx, "example2", &platform.MonitoredServiceArgs{
//				OrgId:      pulumi.String("org_id"),
//				ProjectId:  pulumi.String("project_id"),
//				Identifier: pulumi.String("identifier"),
//				Request: &platform.MonitoredServiceRequestArgs{
//					Name:           pulumi.String("name"),
//					Type:           pulumi.String("Application"),
//					Description:    pulumi.String("description"),
//					ServiceRef:     pulumi.String("service_ref"),
//					EnvironmentRef: pulumi.String("environment_ref"),
//					Tags: pulumi.StringArray{
//						pulumi.String("foo:bar"),
//						pulumi.String("bar:foo"),
//					},
//					HealthSources: platform.MonitoredServiceRequestHealthSourceArray{
//						&platform.MonitoredServiceRequestHealthSourceArgs{
//							Name:       pulumi.String("sumologic"),
//							Identifier: pulumi.String("sumo_metric_identifier"),
//							Type:       pulumi.String("SumologicLogs"),
//							Version:    pulumi.String("v2"),
//							Spec:       pulumi.String(json7),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON8, err := json.Marshal(map[string]interface{}{
//				"connectorRef": "connectorRef",
//				"queryDefinitions": []interface{}{
//					map[string]interface{}{
//						"name":       "metric_infra_cpu",
//						"identifier": "metric_infra_cpu",
//						"query":      "***",
//						"groupName":  "g",
//						"riskProfile": map[string]interface{}{
//							"riskCategory": "Errors",
//							"thresholdTypes": []string{
//								"ACT_WHEN_HIGHER",
//								"ACT_WHEN_LOWER",
//							},
//						},
//						"liveMonitoringEnabled":         "true",
//						"continuousVerificationEnabled": "true",
//						"sliEnabled":                    "false",
//					},
//					map[string]interface{}{
//						"name":       "name2",
//						"identifier": "identifier2",
//						"groupName":  "g2",
//						"query":      "*",
//						"riskProfile": map[string]interface{}{
//							"riskCategory": "Performance_Other",
//							"thresholdTypes": []string{
//								"ACT_WHEN_HIGHER",
//							},
//						},
//						"liveMonitoringEnabled":         "true",
//						"continuousVerificationEnabled": "false",
//						"sliEnabled":                    "false",
//						"metricThresholds": []interface{}{
//							map[string]interface{}{
//								"type": "IgnoreThreshold",
//								"spec": map[string]interface{}{
//									"action": "Ignore",
//								},
//								"criteria": map[string]interface{}{
//									"type": "Absolute",
//									"spec": map[string]interface{}{
//										"greaterThan": 100,
//									},
//								},
//								"metrictype": "Custom",
//								"metricName": "identifier2",
//							},
//							map[string]interface{}{
//								"type": "FailImmediately",
//								"spec": map[string]interface{}{
//									"action": "FailAfterOccurrence",
//									"spec": map[string]interface{}{
//										"count": 2,
//									},
//								},
//								"criteria": map[string]interface{}{
//									"type": "Absolute",
//									"spec": map[string]interface{}{
//										"greaterThan": 100,
//									},
//								},
//								"metricType": "Custom",
//								"metricName": "identifier2",
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json8 := string(tmpJSON8)
//			// Sample template for Splunk Signal FX Health Source
//			_, err = platform.NewMonitoredService(ctx, "example3", &platform.MonitoredServiceArgs{
//				OrgId:      pulumi.String("org_id"),
//				ProjectId:  pulumi.String("project_id"),
//				Identifier: pulumi.String("identifier"),
//				Request: &platform.MonitoredServiceRequestArgs{
//					Name:           pulumi.String("name"),
//					Type:           pulumi.String("Application"),
//					Description:    pulumi.String("description"),
//					ServiceRef:     pulumi.String("service_ref"),
//					EnvironmentRef: pulumi.String("environment_ref"),
//					Tags: pulumi.StringArray{
//						pulumi.String("foo:bar"),
//						pulumi.String("bar:foo"),
//					},
//					HealthSources: platform.MonitoredServiceRequestHealthSourceArray{
//						&platform.MonitoredServiceRequestHealthSourceArgs{
//							Name:       pulumi.String("signalfxmetrics"),
//							Identifier: pulumi.String("signalfxmetrics"),
//							Type:       pulumi.String("SplunkSignalFXMetrics"),
//							Version:    pulumi.String("v2"),
//							Spec:       pulumi.String(json8),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON9, err := json.Marshal(map[string]interface{}{
//				"connectorRef": "connectorRef",
//				"queryDefinitions": []map[string]interface{}{
//					map[string]interface{}{
//						"name":       "Demo",
//						"identifier": "Demo",
//						"query":      "{job=~\".+\"}",
//						"groupName":  "Log_Group",
//						"queryParams": map[string]interface{}{
//							"serviceInstanceField": "job",
//						},
//					},
//					map[string]interface{}{
//						"name":       "log2",
//						"identifier": "identifier2",
//						"groupName":  "g2",
//						"query":      "error",
//						"queryParams": map[string]interface{}{
//							"serviceInstanceField": "_sourcehost",
//						},
//						"liveMonitoringEnabled":         "false",
//						"continuousVerificationEnabled": "false",
//						"sliEnabled":                    "false",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json9 := string(tmpJSON9)
//			// Sample template for Grafana Loki Log Health Source
//			_, err = platform.NewMonitoredService(ctx, "example4", &platform.MonitoredServiceArgs{
//				OrgId:      pulumi.String("org_id"),
//				ProjectId:  pulumi.String("project_id"),
//				Identifier: pulumi.String("identifier"),
//				Request: &platform.MonitoredServiceRequestArgs{
//					Name:           pulumi.String("name"),
//					Type:           pulumi.String("Application"),
//					Description:    pulumi.String("description"),
//					ServiceRef:     pulumi.String("service_ref"),
//					EnvironmentRef: pulumi.String("environment_ref"),
//					Tags: pulumi.StringArray{
//						pulumi.String("foo:bar"),
//						pulumi.String("bar:foo"),
//					},
//					HealthSources: platform.MonitoredServiceRequestHealthSourceArray{
//						&platform.MonitoredServiceRequestHealthSourceArgs{
//							Name:       pulumi.String("Test"),
//							Identifier: pulumi.String("Test"),
//							Type:       pulumi.String("GrafanaLokiLogs"),
//							Version:    pulumi.String("v2"),
//							Spec:       pulumi.String(json9),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON10, err := json.Marshal(map[string]interface{}{
//				"connectorRef": "connectorRef",
//				"queryDefinitions": []interface{}{
//					map[string]interface{}{
//						"name":       "metric",
//						"identifier": "metric",
//						"query":      "default",
//						"groupName":  "g1",
//						"queryParams": map[string]interface{}{
//							"serviceInstanceField":        "host",
//							"index":                       "/subscriptions/12d2db62-5aa9-471d-84bb-faa489b3e319/resourceGroups/srm-test/providers/Microsoft.ContainerService/managedClusters/srm-test",
//							"healthSourceMetricName":      "cpuUsagePercentage",
//							"healthSourceMetricNamespace": "insights.container/nodes",
//							"aggregationType":             "average",
//						},
//						"riskProfile": map[string]interface{}{
//							"riskCategory": "Performance_Other",
//							"thresholdTypes": []string{
//								"ACT_WHEN_HIGHER",
//							},
//						},
//						"liveMonitoringEnabled":         "true",
//						"continuousVerificationEnabled": "true",
//						"sliEnabled":                    "false",
//						"metricThresholds": []interface{}{
//							map[string]interface{}{
//								"type": "IgnoreThreshold",
//								"spec": map[string]interface{}{
//									"action": "Ignore",
//								},
//								"criteria": map[string]interface{}{
//									"type": "Absolute",
//									"spec": map[string]interface{}{
//										"greaterThan": 100,
//									},
//								},
//								"metrictype": "Custom",
//								"metricName": "metric",
//							},
//							map[string]interface{}{
//								"type": "FailImmediately",
//								"spec": map[string]interface{}{
//									"action": "FailAfterOccurrence",
//									"spec": map[string]interface{}{
//										"count": 2,
//									},
//								},
//								"criteria": map[string]interface{}{
//									"type": "Absolute",
//									"spec": map[string]interface{}{
//										"greaterThan": 100,
//									},
//								},
//								"metricType": "Custom",
//								"metricName": "metric",
//							},
//						},
//					},
//					map[string]interface{}{
//						"name":       "name2",
//						"identifier": "identifier2",
//						"groupName":  "g2",
//						"queryParams": map[string]interface{}{
//							"serviceInstanceField":        "host",
//							"index":                       "/subscriptions/12d2db62-5aa9-471d-84bb-faa489b3e319/resourceGroups/srm-test/providers/Microsoft.ContainerService/managedClusters/srm-test",
//							"healthSourceMetricName":      "cpuUsagePercentage",
//							"healthSourceMetricNamespace": "insights.container/nodes",
//							"aggregationType":             "average",
//						},
//						"riskProfile": map[string]interface{}{
//							"riskCategory": "Performance_Other",
//							"thresholdTypes": []string{
//								"ACT_WHEN_HIGHER",
//							},
//						},
//						"liveMonitoringEnabled":         "false",
//						"continuousVerificationEnabled": "false",
//						"sliEnabled":                    "false",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json10 := string(tmpJSON10)
//			// Sample template for Azure Metrics Health Source
//			_, err = platform.NewMonitoredService(ctx, "example5", &platform.MonitoredServiceArgs{
//				OrgId:      pulumi.String("org_id"),
//				ProjectId:  pulumi.String("project_id"),
//				Identifier: pulumi.String("identifier"),
//				Request: &platform.MonitoredServiceRequestArgs{
//					Name:           pulumi.String("name"),
//					Type:           pulumi.String("Application"),
//					Description:    pulumi.String("description"),
//					ServiceRef:     pulumi.String("service_ref"),
//					EnvironmentRef: pulumi.String("environment_ref"),
//					Tags: pulumi.StringArray{
//						pulumi.String("foo:bar"),
//						pulumi.String("bar:foo"),
//					},
//					HealthSources: platform.MonitoredServiceRequestHealthSourceArray{
//						&platform.MonitoredServiceRequestHealthSourceArgs{
//							Name:       pulumi.String("azure metrics verify step"),
//							Identifier: pulumi.String("azure_metrics_verify_step"),
//							Type:       pulumi.String("AzureMetrics"),
//							Version:    pulumi.String("v2"),
//							Spec:       pulumi.String(json10),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON11, err := json.Marshal(map[string]interface{}{
//				"connectorRef": "connectorRef",
//				"queryDefinitions": []map[string]interface{}{
//					map[string]interface{}{
//						"name":       "name2",
//						"identifier": "identifier2",
//						"groupName":  "g2",
//						"query":      "*",
//						"queryParams": map[string]interface{}{
//							"serviceInstanceField": "Name",
//							"timeStampIdentifier":  "StartedTime",
//							"messageIdentifier":    "Image",
//							"index":                "/subscriptions/12d2db62-5aa9-471d-84bb-faa489b3e319/resourceGroups/srm-test/providers/Microsoft.ContainerService/managedClusters/srm-test",
//						},
//						"liveMonitoringEnabled":         "false",
//						"continuousVerificationEnabled": "false",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json11 := string(tmpJSON11)
//			// Sample template for Azure Log Health Source
//			_, err = platform.NewMonitoredService(ctx, "example6", &platform.MonitoredServiceArgs{
//				OrgId:      pulumi.String("org_id"),
//				ProjectId:  pulumi.String("project_id"),
//				Identifier: pulumi.String("identifier"),
//				Request: &platform.MonitoredServiceRequestArgs{
//					Name:           pulumi.String("name"),
//					Type:           pulumi.String("Application"),
//					Description:    pulumi.String("description"),
//					ServiceRef:     pulumi.String("service_ref"),
//					EnvironmentRef: pulumi.String("environment_ref"),
//					Tags: pulumi.StringArray{
//						pulumi.String("foo:bar"),
//						pulumi.String("bar:foo"),
//					},
//					HealthSources: platform.MonitoredServiceRequestHealthSourceArray{
//						&platform.MonitoredServiceRequestHealthSourceArgs{
//							Name:       pulumi.String("Demo azure"),
//							Identifier: pulumi.String("Demo_azure"),
//							Type:       pulumi.String("AzureLogs"),
//							Version:    pulumi.String("v2"),
//							Spec:       pulumi.String(json11),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON12, err := json.Marshal(map[string]interface{}{
//				"connectorRef": "connectorRef",
//				"metricDefinitions": []map[string]interface{}{
//					map[string]interface{}{
//						"identifier": "Prometheus_Metric",
//						"metricName": "Prometheus Metric",
//						"riskProfile": map[string]interface{}{
//							"riskCategory": "Performance_Other",
//							"thresholdTypes": []string{
//								"ACT_WHEN_HIGHER",
//							},
//						},
//						"analysis": map[string]interface{}{
//							"liveMonitoring": map[string]interface{}{
//								"enabled": true,
//							},
//							"deploymentVerification": map[string]interface{}{
//								"enabled":                  true,
//								"serviceInstanceFieldName": "pod_name",
//							},
//						},
//						"query":         "count(up{group=\"cv\",group=\"cv\"})",
//						"groupName":     "met",
//						"isManualQuery": true,
//					},
//				},
//				"metricPacks": []map[string]interface{}{
//					map[string]interface{}{
//						"identifier": "Custom",
//						"metricThresholds": []interface{}{
//							map[string]interface{}{
//								"type": "IgnoreThreshold",
//								"spec": map[string]interface{}{
//									"action": "Ignore",
//								},
//								"criteria": map[string]interface{}{
//									"type": "Absolute",
//									"spec": map[string]interface{}{
//										"greaterThan": 100,
//									},
//								},
//								"metrictype": "Custom",
//								"metricName": "Prometheus Metric",
//							},
//							map[string]interface{}{
//								"type": "FailImmediately",
//								"spec": map[string]interface{}{
//									"action": "FailAfterOccurrence",
//									"spec": map[string]interface{}{
//										"count": 2,
//									},
//								},
//								"criteria": map[string]interface{}{
//									"type": "Absolute",
//									"spec": map[string]interface{}{
//										"greaterThan": 100,
//									},
//								},
//								"metricType": "Custom",
//								"metricName": "Prometheus Metric",
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json12 := string(tmpJSON12)
//			// Sample template for Prometheus Metrics Health Source
//			_, err = platform.NewMonitoredService(ctx, "example7", &platform.MonitoredServiceArgs{
//				OrgId:      pulumi.String("org_id"),
//				ProjectId:  pulumi.String("project_id"),
//				Identifier: pulumi.String("identifier"),
//				Request: &platform.MonitoredServiceRequestArgs{
//					Name:           pulumi.String("name"),
//					Type:           pulumi.String("Application"),
//					Description:    pulumi.String("description"),
//					ServiceRef:     pulumi.String("service_ref"),
//					EnvironmentRef: pulumi.String("environment_ref"),
//					Tags: pulumi.StringArray{
//						pulumi.String("foo:bar"),
//						pulumi.String("bar:foo"),
//					},
//					HealthSources: platform.MonitoredServiceRequestHealthSourceArray{
//						&platform.MonitoredServiceRequestHealthSourceArgs{
//							Name:       pulumi.String("prometheus metrics verify step"),
//							Identifier: pulumi.String("prometheus_metrics"),
//							Type:       pulumi.String("Prometheus"),
//							Spec:       pulumi.String(json12),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON13, err := json.Marshal(map[string]interface{}{
//				"connectorRef": "connectorRef",
//				"feature":      "Datadog Cloud Metrics",
//				"metricDefinitions": []interface{}{
//					map[string]interface{}{
//						"metricName":            "metric",
//						"metricPath":            "M1",
//						"identifier":            "metric",
//						"query":                 "avg:kubernetes.cpu.limits{*}.rollup(avg, 60);\navg:kubernetes.cpu.limits{*}.rollup(avg, 30);\n(a+b)/10",
//						"isManualQuery":         true,
//						"isCustomCreatedMetric": true,
//						"riskProfile": map[string]interface{}{
//							"riskCategory": "Performance_Other",
//							"thresholdTypes": []string{
//								"ACT_WHEN_HIGHER",
//							},
//						},
//						"analysis": map[string]interface{}{
//							"liveMonitoring": map[string]interface{}{
//								"enabled": true,
//							},
//							"deploymentVerification": map[string]interface{}{
//								"enabled":                  true,
//								"serviceInstanceFieldName": "pod",
//							},
//						},
//					},
//					map[string]interface{}{
//						"metricName":            "dashboard_metric_cpu",
//						"identifier":            "metric_cpu",
//						"query":                 "avg:kubernetes.cpu.limits{*}.rollup(avg, 60);\navg:kubernetes.cpu.limits{*}.rollup(avg, 30);\n(a+b)/10",
//						"isManualQuery":         false,
//						"dashboardName":         "dashboard",
//						"metricPath":            "M1",
//						"groupingQuery":         "avg:kubernetes.cpu.limits{*} by {host}.rollup(avg, 60)",
//						"metric":                "kubernetes.cpu.limits",
//						"aggregation":           "avg",
//						"isCustomCreatedMetric": true,
//						"riskProfile": map[string]interface{}{
//							"riskCategory": "Performance_Other",
//							"thresholdTypes": []string{
//								"ACT_WHEN_HIGHER",
//							},
//						},
//						"analysis": map[string]interface{}{
//							"liveMonitoring": map[string]interface{}{
//								"enabled": true,
//							},
//							"deploymentVerification": map[string]interface{}{
//								"enabled":                  true,
//								"serviceInstanceFieldName": "pod",
//							},
//						},
//					},
//				},
//				"metricPacks": []map[string]interface{}{
//					map[string]interface{}{
//						"identifier": "Custom",
//						"metricThresholds": []interface{}{
//							map[string]interface{}{
//								"type": "IgnoreThreshold",
//								"spec": map[string]interface{}{
//									"action": "Ignore",
//								},
//								"criteria": map[string]interface{}{
//									"type": "Absolute",
//									"spec": map[string]interface{}{
//										"greaterThan": 100,
//									},
//								},
//								"metrictype": "Custom",
//								"metricName": "metric",
//							},
//							map[string]interface{}{
//								"type": "FailImmediately",
//								"spec": map[string]interface{}{
//									"action": "FailAfterOccurrence",
//									"spec": map[string]interface{}{
//										"count": 2,
//									},
//								},
//								"criteria": map[string]interface{}{
//									"type": "Absolute",
//									"spec": map[string]interface{}{
//										"greaterThan": 100,
//									},
//								},
//								"metricType": "Custom",
//								"metricName": "metric",
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json13 := string(tmpJSON13)
//			// Sample template for Datadog Metrics Health Source
//			_, err = platform.NewMonitoredService(ctx, "example8", &platform.MonitoredServiceArgs{
//				OrgId:      pulumi.String("org_id"),
//				ProjectId:  pulumi.String("project_id"),
//				Identifier: pulumi.String("identifier"),
//				Request: &platform.MonitoredServiceRequestArgs{
//					Name:           pulumi.String("name"),
//					Type:           pulumi.String("Application"),
//					Description:    pulumi.String("description"),
//					ServiceRef:     pulumi.String("service_ref"),
//					EnvironmentRef: pulumi.String("environment_ref"),
//					Tags: pulumi.StringArray{
//						pulumi.String("foo:bar"),
//						pulumi.String("bar:foo"),
//					},
//					HealthSources: platform.MonitoredServiceRequestHealthSourceArray{
//						&platform.MonitoredServiceRequestHealthSourceArgs{
//							Name:       pulumi.String("ddm"),
//							Identifier: pulumi.String("ddm"),
//							Type:       pulumi.String("DatadogMetrics"),
//							Spec:       pulumi.String(json13),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON14, err := json.Marshal(map[string]interface{}{
//				"connectorRef":    "account.Newrelicautomation_do_not_delete",
//				"feature":         "apm",
//				"applicationId":   "107019083",
//				"applicationName": "My Application",
//				"metricData": map[string]interface{}{
//					"Performance": true,
//				},
//				"metricPacks": []map[string]interface{}{
//					map[string]interface{}{
//						"identifier": "Performance",
//					},
//				},
//				"newRelicMetricDefinitions": []map[string]interface{}{
//					map[string]interface{}{
//						"identifier": "New_Relic_Metric",
//						"metricName": "New Relic Metric",
//						"riskProfile": map[string]interface{}{
//							"riskCategory": "Performance_Other",
//							"thresholdTypes": []string{
//								"ACT_WHEN_HIGHER",
//							},
//						},
//						"analysis": map[string]interface{}{
//							"deploymentVerification": map[string]interface{}{
//								"enabled": true,
//							},
//						},
//						"groupName": "group1",
//						"nrql":      "SELECT count(apm.service.instance.count) FROM Metric WHERE appName LIKE 'My Application' TIMESERIES",
//						"responseMapping": map[string]interface{}{
//							"metricValueJsonPath": "$.['timeSeries'].[*].['results'].[*].['count']",
//							"timestampJsonPath":   "$.['timeSeries'].[*].['beginTimeSeconds']",
//						},
//					},
//				},
//				"metricPacks": []map[string]interface{}{
//					map[string]interface{}{
//						"identifier": "Custom",
//						"metricThresholds": []map[string]interface{}{
//							map[string]interface{}{
//								"type": "IgnoreThreshold",
//								"spec": map[string]interface{}{
//									"action": "Ignore",
//								},
//								"criteria": map[string]interface{}{
//									"type": "Absolute",
//									"spec": map[string]interface{}{
//										"greaterThan": 100,
//									},
//								},
//								"metricType": "Custom",
//								"metricName": "New Relic Metric",
//							},
//							map[string]interface{}{
//								"type": "FailImmediately",
//								"spec": map[string]interface{}{
//									"action": "FailAfterOccurrence",
//									"spec": map[string]interface{}{
//										"count": 2,
//									},
//								},
//								"criteria": map[string]interface{}{
//									"type": "Absolute",
//									"spec": map[string]interface{}{
//										"greaterThan": 100,
//									},
//								},
//								"metricType": "Custom",
//								"metricName": "New Relic Metric",
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json14 := string(tmpJSON14)
//			// Sample template for New Relic Metrics Health Source
//			_, err = platform.NewMonitoredService(ctx, "example9", &platform.MonitoredServiceArgs{
//				OrgId:      pulumi.String("org_id"),
//				ProjectId:  pulumi.String("project_id"),
//				Identifier: pulumi.String("identifier"),
//				Request: &platform.MonitoredServiceRequestArgs{
//					Name:           pulumi.String("name"),
//					Type:           pulumi.String("Application"),
//					Description:    pulumi.String("description"),
//					ServiceRef:     pulumi.String("service_ref"),
//					EnvironmentRef: pulumi.String("environment_ref"),
//					Tags: pulumi.StringArray{
//						pulumi.String("foo:bar"),
//						pulumi.String("bar:foo"),
//					},
//					HealthSources: platform.MonitoredServiceRequestHealthSourceArray{
//						&platform.MonitoredServiceRequestHealthSourceArgs{
//							Name:       pulumi.String("name"),
//							Identifier: pulumi.String("identifier"),
//							Type:       pulumi.String("NewRelic"),
//							Spec:       pulumi.String(json14),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import account level monitored_service
//
// ```sh
// $ pulumi import harness:platform/monitoredService:MonitoredService example <monitored_service_id>
// ```
//
// Import organization level monitored_service
//
// ```sh
// $ pulumi import harness:platform/monitoredService:MonitoredService example <org_id>/<monitored_service_id>
// ```
//
// Import project level monitored_service
//
// ```sh
// $ pulumi import harness:platform/monitoredService:MonitoredService example <org_id>/<project_id>/<monitored_service_id>
// ```
type MonitoredService struct {
	pulumi.CustomResourceState

	// Identifier of the monitored service.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Identifier of the organization in which the monitored service is configured.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Identifier of the project in which the monitored service is configured.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Request for creating or updating a monitored service.
	Request MonitoredServiceRequestPtrOutput `pulumi:"request"`
}

// NewMonitoredService registers a new resource with the given unique name, arguments, and options.
func NewMonitoredService(ctx *pulumi.Context,
	name string, args *MonitoredServiceArgs, opts ...pulumi.ResourceOption) (*MonitoredService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MonitoredService
	err := ctx.RegisterResource("harness:platform/monitoredService:MonitoredService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoredService gets an existing MonitoredService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoredService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoredServiceState, opts ...pulumi.ResourceOption) (*MonitoredService, error) {
	var resource MonitoredService
	err := ctx.ReadResource("harness:platform/monitoredService:MonitoredService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoredService resources.
type monitoredServiceState struct {
	// Identifier of the monitored service.
	Identifier *string `pulumi:"identifier"`
	// Identifier of the organization in which the monitored service is configured.
	OrgId *string `pulumi:"orgId"`
	// Identifier of the project in which the monitored service is configured.
	ProjectId *string `pulumi:"projectId"`
	// Request for creating or updating a monitored service.
	Request *MonitoredServiceRequest `pulumi:"request"`
}

type MonitoredServiceState struct {
	// Identifier of the monitored service.
	Identifier pulumi.StringPtrInput
	// Identifier of the organization in which the monitored service is configured.
	OrgId pulumi.StringPtrInput
	// Identifier of the project in which the monitored service is configured.
	ProjectId pulumi.StringPtrInput
	// Request for creating or updating a monitored service.
	Request MonitoredServiceRequestPtrInput
}

func (MonitoredServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredServiceState)(nil)).Elem()
}

type monitoredServiceArgs struct {
	// Identifier of the monitored service.
	Identifier string `pulumi:"identifier"`
	// Identifier of the organization in which the monitored service is configured.
	OrgId string `pulumi:"orgId"`
	// Identifier of the project in which the monitored service is configured.
	ProjectId string `pulumi:"projectId"`
	// Request for creating or updating a monitored service.
	Request *MonitoredServiceRequest `pulumi:"request"`
}

// The set of arguments for constructing a MonitoredService resource.
type MonitoredServiceArgs struct {
	// Identifier of the monitored service.
	Identifier pulumi.StringInput
	// Identifier of the organization in which the monitored service is configured.
	OrgId pulumi.StringInput
	// Identifier of the project in which the monitored service is configured.
	ProjectId pulumi.StringInput
	// Request for creating or updating a monitored service.
	Request MonitoredServiceRequestPtrInput
}

func (MonitoredServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredServiceArgs)(nil)).Elem()
}

type MonitoredServiceInput interface {
	pulumi.Input

	ToMonitoredServiceOutput() MonitoredServiceOutput
	ToMonitoredServiceOutputWithContext(ctx context.Context) MonitoredServiceOutput
}

func (*MonitoredService) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredService)(nil)).Elem()
}

func (i *MonitoredService) ToMonitoredServiceOutput() MonitoredServiceOutput {
	return i.ToMonitoredServiceOutputWithContext(context.Background())
}

func (i *MonitoredService) ToMonitoredServiceOutputWithContext(ctx context.Context) MonitoredServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredServiceOutput)
}

// MonitoredServiceArrayInput is an input type that accepts MonitoredServiceArray and MonitoredServiceArrayOutput values.
// You can construct a concrete instance of `MonitoredServiceArrayInput` via:
//
//	MonitoredServiceArray{ MonitoredServiceArgs{...} }
type MonitoredServiceArrayInput interface {
	pulumi.Input

	ToMonitoredServiceArrayOutput() MonitoredServiceArrayOutput
	ToMonitoredServiceArrayOutputWithContext(context.Context) MonitoredServiceArrayOutput
}

type MonitoredServiceArray []MonitoredServiceInput

func (MonitoredServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoredService)(nil)).Elem()
}

func (i MonitoredServiceArray) ToMonitoredServiceArrayOutput() MonitoredServiceArrayOutput {
	return i.ToMonitoredServiceArrayOutputWithContext(context.Background())
}

func (i MonitoredServiceArray) ToMonitoredServiceArrayOutputWithContext(ctx context.Context) MonitoredServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredServiceArrayOutput)
}

// MonitoredServiceMapInput is an input type that accepts MonitoredServiceMap and MonitoredServiceMapOutput values.
// You can construct a concrete instance of `MonitoredServiceMapInput` via:
//
//	MonitoredServiceMap{ "key": MonitoredServiceArgs{...} }
type MonitoredServiceMapInput interface {
	pulumi.Input

	ToMonitoredServiceMapOutput() MonitoredServiceMapOutput
	ToMonitoredServiceMapOutputWithContext(context.Context) MonitoredServiceMapOutput
}

type MonitoredServiceMap map[string]MonitoredServiceInput

func (MonitoredServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoredService)(nil)).Elem()
}

func (i MonitoredServiceMap) ToMonitoredServiceMapOutput() MonitoredServiceMapOutput {
	return i.ToMonitoredServiceMapOutputWithContext(context.Background())
}

func (i MonitoredServiceMap) ToMonitoredServiceMapOutputWithContext(ctx context.Context) MonitoredServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredServiceMapOutput)
}

type MonitoredServiceOutput struct{ *pulumi.OutputState }

func (MonitoredServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredService)(nil)).Elem()
}

func (o MonitoredServiceOutput) ToMonitoredServiceOutput() MonitoredServiceOutput {
	return o
}

func (o MonitoredServiceOutput) ToMonitoredServiceOutputWithContext(ctx context.Context) MonitoredServiceOutput {
	return o
}

// Identifier of the monitored service.
func (o MonitoredServiceOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoredService) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Identifier of the organization in which the monitored service is configured.
func (o MonitoredServiceOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoredService) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Identifier of the project in which the monitored service is configured.
func (o MonitoredServiceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoredService) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Request for creating or updating a monitored service.
func (o MonitoredServiceOutput) Request() MonitoredServiceRequestPtrOutput {
	return o.ApplyT(func(v *MonitoredService) MonitoredServiceRequestPtrOutput { return v.Request }).(MonitoredServiceRequestPtrOutput)
}

type MonitoredServiceArrayOutput struct{ *pulumi.OutputState }

func (MonitoredServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoredService)(nil)).Elem()
}

func (o MonitoredServiceArrayOutput) ToMonitoredServiceArrayOutput() MonitoredServiceArrayOutput {
	return o
}

func (o MonitoredServiceArrayOutput) ToMonitoredServiceArrayOutputWithContext(ctx context.Context) MonitoredServiceArrayOutput {
	return o
}

func (o MonitoredServiceArrayOutput) Index(i pulumi.IntInput) MonitoredServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MonitoredService {
		return vs[0].([]*MonitoredService)[vs[1].(int)]
	}).(MonitoredServiceOutput)
}

type MonitoredServiceMapOutput struct{ *pulumi.OutputState }

func (MonitoredServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoredService)(nil)).Elem()
}

func (o MonitoredServiceMapOutput) ToMonitoredServiceMapOutput() MonitoredServiceMapOutput {
	return o
}

func (o MonitoredServiceMapOutput) ToMonitoredServiceMapOutputWithContext(ctx context.Context) MonitoredServiceMapOutput {
	return o
}

func (o MonitoredServiceMapOutput) MapIndex(k pulumi.StringInput) MonitoredServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MonitoredService {
		return vs[0].(map[string]*MonitoredService)[vs[1].(string)]
	}).(MonitoredServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredServiceInput)(nil)).Elem(), &MonitoredService{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredServiceArrayInput)(nil)).Elem(), MonitoredServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredServiceMapInput)(nil)).Elem(), MonitoredServiceMap{})
	pulumi.RegisterOutputType(MonitoredServiceOutput{})
	pulumi.RegisterOutputType(MonitoredServiceArrayOutput{})
	pulumi.RegisterOutputType(MonitoredServiceMapOutput{})
}
