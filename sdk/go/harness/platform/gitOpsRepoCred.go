// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing a Harness Gitops Repository Credentials.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewGitOpsRepoCred(ctx, "test", &platform.GitOpsRepoCredArgs{
//				Identifier: pulumi.String("identifier"),
//				AccountId:  pulumi.String("account_id"),
//				AgentId:    pulumi.String("agent_id"),
//				ProjectId:  pulumi.String("project_id"),
//				OrgId:      pulumi.String("org_id"),
//				Creds: platform.GitOpsRepoCredCredArray{
//					&platform.GitOpsRepoCredCredArgs{
//						Type: pulumi.String("git"),
//						Url:  pulumi.String("git@github.com:yourorg"),
//						SshPrivateKey: pulumi.String(`----- BEGIN OPENSSH PRIVATE KEY-----
//
// XXXXX
// XXXXX
// XXXXX
// -----END OPENSSH PRIVATE KEY -----
// `),
//
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import an Account level Gitops Repository Credentials
//
// ```sh
// $ pulumi import harness:platform/gitOpsRepoCred:GitOpsRepoCred example <agent_id>/<repocred_id>
// ```
//
// # Import an Org level Gitops Repository Credentials
//
// ```sh
// $ pulumi import harness:platform/gitOpsRepoCred:GitOpsRepoCred example <organization_id>/<agent_id>/<repocred_id>
// ```
//
// # Import a Project level Gitops Repository Credentials
//
// ```sh
// $ pulumi import harness:platform/gitOpsRepoCred:GitOpsRepoCred example <organization_id>/<project_id>/<agent_id>/<repocred_id>
// ```
type GitOpsRepoCred struct {
	pulumi.CustomResourceState

	// Account identifier of the Repository Credentials.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Agent identifier of the Repository Credentials.
	AgentId pulumi.StringOutput `pulumi:"agentId"`
	// credential details.
	Creds GitOpsRepoCredCredArrayOutput `pulumi:"creds"`
	// Identifier of the Repository Credentials.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Organization identifier of the Repository Credentials.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Project identifier of the Repository Credentials.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Indicates if the GitOps repository credential should be updated if existing and inserted if not.
	Upsert pulumi.BoolPtrOutput `pulumi:"upsert"`
}

// NewGitOpsRepoCred registers a new resource with the given unique name, arguments, and options.
func NewGitOpsRepoCred(ctx *pulumi.Context,
	name string, args *GitOpsRepoCredArgs, opts ...pulumi.ResourceOption) (*GitOpsRepoCred, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AgentId == nil {
		return nil, errors.New("invalid value for required argument 'AgentId'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GitOpsRepoCred
	err := ctx.RegisterResource("harness:platform/gitOpsRepoCred:GitOpsRepoCred", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitOpsRepoCred gets an existing GitOpsRepoCred resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitOpsRepoCred(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitOpsRepoCredState, opts ...pulumi.ResourceOption) (*GitOpsRepoCred, error) {
	var resource GitOpsRepoCred
	err := ctx.ReadResource("harness:platform/gitOpsRepoCred:GitOpsRepoCred", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitOpsRepoCred resources.
type gitOpsRepoCredState struct {
	// Account identifier of the Repository Credentials.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId *string `pulumi:"accountId"`
	// Agent identifier of the Repository Credentials.
	AgentId *string `pulumi:"agentId"`
	// credential details.
	Creds []GitOpsRepoCredCred `pulumi:"creds"`
	// Identifier of the Repository Credentials.
	Identifier *string `pulumi:"identifier"`
	// Organization identifier of the Repository Credentials.
	OrgId *string `pulumi:"orgId"`
	// Project identifier of the Repository Credentials.
	ProjectId *string `pulumi:"projectId"`
	// Indicates if the GitOps repository credential should be updated if existing and inserted if not.
	Upsert *bool `pulumi:"upsert"`
}

type GitOpsRepoCredState struct {
	// Account identifier of the Repository Credentials.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId pulumi.StringPtrInput
	// Agent identifier of the Repository Credentials.
	AgentId pulumi.StringPtrInput
	// credential details.
	Creds GitOpsRepoCredCredArrayInput
	// Identifier of the Repository Credentials.
	Identifier pulumi.StringPtrInput
	// Organization identifier of the Repository Credentials.
	OrgId pulumi.StringPtrInput
	// Project identifier of the Repository Credentials.
	ProjectId pulumi.StringPtrInput
	// Indicates if the GitOps repository credential should be updated if existing and inserted if not.
	Upsert pulumi.BoolPtrInput
}

func (GitOpsRepoCredState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitOpsRepoCredState)(nil)).Elem()
}

type gitOpsRepoCredArgs struct {
	// Account identifier of the Repository Credentials.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId *string `pulumi:"accountId"`
	// Agent identifier of the Repository Credentials.
	AgentId string `pulumi:"agentId"`
	// credential details.
	Creds []GitOpsRepoCredCred `pulumi:"creds"`
	// Identifier of the Repository Credentials.
	Identifier string `pulumi:"identifier"`
	// Organization identifier of the Repository Credentials.
	OrgId *string `pulumi:"orgId"`
	// Project identifier of the Repository Credentials.
	ProjectId *string `pulumi:"projectId"`
	// Indicates if the GitOps repository credential should be updated if existing and inserted if not.
	Upsert *bool `pulumi:"upsert"`
}

// The set of arguments for constructing a GitOpsRepoCred resource.
type GitOpsRepoCredArgs struct {
	// Account identifier of the Repository Credentials.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId pulumi.StringPtrInput
	// Agent identifier of the Repository Credentials.
	AgentId pulumi.StringInput
	// credential details.
	Creds GitOpsRepoCredCredArrayInput
	// Identifier of the Repository Credentials.
	Identifier pulumi.StringInput
	// Organization identifier of the Repository Credentials.
	OrgId pulumi.StringPtrInput
	// Project identifier of the Repository Credentials.
	ProjectId pulumi.StringPtrInput
	// Indicates if the GitOps repository credential should be updated if existing and inserted if not.
	Upsert pulumi.BoolPtrInput
}

func (GitOpsRepoCredArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitOpsRepoCredArgs)(nil)).Elem()
}

type GitOpsRepoCredInput interface {
	pulumi.Input

	ToGitOpsRepoCredOutput() GitOpsRepoCredOutput
	ToGitOpsRepoCredOutputWithContext(ctx context.Context) GitOpsRepoCredOutput
}

func (*GitOpsRepoCred) ElementType() reflect.Type {
	return reflect.TypeOf((**GitOpsRepoCred)(nil)).Elem()
}

func (i *GitOpsRepoCred) ToGitOpsRepoCredOutput() GitOpsRepoCredOutput {
	return i.ToGitOpsRepoCredOutputWithContext(context.Background())
}

func (i *GitOpsRepoCred) ToGitOpsRepoCredOutputWithContext(ctx context.Context) GitOpsRepoCredOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsRepoCredOutput)
}

// GitOpsRepoCredArrayInput is an input type that accepts GitOpsRepoCredArray and GitOpsRepoCredArrayOutput values.
// You can construct a concrete instance of `GitOpsRepoCredArrayInput` via:
//
//	GitOpsRepoCredArray{ GitOpsRepoCredArgs{...} }
type GitOpsRepoCredArrayInput interface {
	pulumi.Input

	ToGitOpsRepoCredArrayOutput() GitOpsRepoCredArrayOutput
	ToGitOpsRepoCredArrayOutputWithContext(context.Context) GitOpsRepoCredArrayOutput
}

type GitOpsRepoCredArray []GitOpsRepoCredInput

func (GitOpsRepoCredArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitOpsRepoCred)(nil)).Elem()
}

func (i GitOpsRepoCredArray) ToGitOpsRepoCredArrayOutput() GitOpsRepoCredArrayOutput {
	return i.ToGitOpsRepoCredArrayOutputWithContext(context.Background())
}

func (i GitOpsRepoCredArray) ToGitOpsRepoCredArrayOutputWithContext(ctx context.Context) GitOpsRepoCredArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsRepoCredArrayOutput)
}

// GitOpsRepoCredMapInput is an input type that accepts GitOpsRepoCredMap and GitOpsRepoCredMapOutput values.
// You can construct a concrete instance of `GitOpsRepoCredMapInput` via:
//
//	GitOpsRepoCredMap{ "key": GitOpsRepoCredArgs{...} }
type GitOpsRepoCredMapInput interface {
	pulumi.Input

	ToGitOpsRepoCredMapOutput() GitOpsRepoCredMapOutput
	ToGitOpsRepoCredMapOutputWithContext(context.Context) GitOpsRepoCredMapOutput
}

type GitOpsRepoCredMap map[string]GitOpsRepoCredInput

func (GitOpsRepoCredMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitOpsRepoCred)(nil)).Elem()
}

func (i GitOpsRepoCredMap) ToGitOpsRepoCredMapOutput() GitOpsRepoCredMapOutput {
	return i.ToGitOpsRepoCredMapOutputWithContext(context.Background())
}

func (i GitOpsRepoCredMap) ToGitOpsRepoCredMapOutputWithContext(ctx context.Context) GitOpsRepoCredMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsRepoCredMapOutput)
}

type GitOpsRepoCredOutput struct{ *pulumi.OutputState }

func (GitOpsRepoCredOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitOpsRepoCred)(nil)).Elem()
}

func (o GitOpsRepoCredOutput) ToGitOpsRepoCredOutput() GitOpsRepoCredOutput {
	return o
}

func (o GitOpsRepoCredOutput) ToGitOpsRepoCredOutputWithContext(ctx context.Context) GitOpsRepoCredOutput {
	return o
}

// Account identifier of the Repository Credentials.
//
// Deprecated: This field is deprecated and will be removed in a future release.
func (o GitOpsRepoCredOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitOpsRepoCred) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Agent identifier of the Repository Credentials.
func (o GitOpsRepoCredOutput) AgentId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitOpsRepoCred) pulumi.StringOutput { return v.AgentId }).(pulumi.StringOutput)
}

// credential details.
func (o GitOpsRepoCredOutput) Creds() GitOpsRepoCredCredArrayOutput {
	return o.ApplyT(func(v *GitOpsRepoCred) GitOpsRepoCredCredArrayOutput { return v.Creds }).(GitOpsRepoCredCredArrayOutput)
}

// Identifier of the Repository Credentials.
func (o GitOpsRepoCredOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *GitOpsRepoCred) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Organization identifier of the Repository Credentials.
func (o GitOpsRepoCredOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsRepoCred) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Project identifier of the Repository Credentials.
func (o GitOpsRepoCredOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsRepoCred) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Indicates if the GitOps repository credential should be updated if existing and inserted if not.
func (o GitOpsRepoCredOutput) Upsert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitOpsRepoCred) pulumi.BoolPtrOutput { return v.Upsert }).(pulumi.BoolPtrOutput)
}

type GitOpsRepoCredArrayOutput struct{ *pulumi.OutputState }

func (GitOpsRepoCredArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitOpsRepoCred)(nil)).Elem()
}

func (o GitOpsRepoCredArrayOutput) ToGitOpsRepoCredArrayOutput() GitOpsRepoCredArrayOutput {
	return o
}

func (o GitOpsRepoCredArrayOutput) ToGitOpsRepoCredArrayOutputWithContext(ctx context.Context) GitOpsRepoCredArrayOutput {
	return o
}

func (o GitOpsRepoCredArrayOutput) Index(i pulumi.IntInput) GitOpsRepoCredOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitOpsRepoCred {
		return vs[0].([]*GitOpsRepoCred)[vs[1].(int)]
	}).(GitOpsRepoCredOutput)
}

type GitOpsRepoCredMapOutput struct{ *pulumi.OutputState }

func (GitOpsRepoCredMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitOpsRepoCred)(nil)).Elem()
}

func (o GitOpsRepoCredMapOutput) ToGitOpsRepoCredMapOutput() GitOpsRepoCredMapOutput {
	return o
}

func (o GitOpsRepoCredMapOutput) ToGitOpsRepoCredMapOutputWithContext(ctx context.Context) GitOpsRepoCredMapOutput {
	return o
}

func (o GitOpsRepoCredMapOutput) MapIndex(k pulumi.StringInput) GitOpsRepoCredOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitOpsRepoCred {
		return vs[0].(map[string]*GitOpsRepoCred)[vs[1].(string)]
	}).(GitOpsRepoCredOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitOpsRepoCredInput)(nil)).Elem(), &GitOpsRepoCred{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitOpsRepoCredArrayInput)(nil)).Elem(), GitOpsRepoCredArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitOpsRepoCredMapInput)(nil)).Elem(), GitOpsRepoCredMap{})
	pulumi.RegisterOutputType(GitOpsRepoCredOutput{})
	pulumi.RegisterOutputType(GitOpsRepoCredArrayOutput{})
	pulumi.RegisterOutputType(GitOpsRepoCredMapOutput{})
}
