// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing a Harness Gitops Application.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewGitOpsApplications(ctx, "example", &platform.GitOpsApplicationsArgs{
//				Applications: platform.GitOpsApplicationsApplicationArray{
//					&platform.GitOpsApplicationsApplicationArgs{
//						Metadatas: platform.GitOpsApplicationsApplicationMetadataArray{
//							&platform.GitOpsApplicationsApplicationMetadataArgs{
//								Annotations: pulumi.StringMap{},
//								Labels: pulumi.StringMap{
//									"harness.io/serviceRef": pulumi.String("service_id"),
//									"harness.io/envRef":     pulumi.String("env_id"),
//								},
//								Name: pulumi.String("appname123"),
//							},
//						},
//						Specs: platform.GitOpsApplicationsApplicationSpecArray{
//							&platform.GitOpsApplicationsApplicationSpecArgs{
//								SyncPolicies: platform.GitOpsApplicationsApplicationSpecSyncPolicyArray{
//									&platform.GitOpsApplicationsApplicationSpecSyncPolicyArgs{
//										SyncOptions: pulumi.StringArray{
//											pulumi.String("PrunePropagationPolicy=undefined"),
//											pulumi.String("CreateNamespace=false"),
//											pulumi.String("Validate=false"),
//											pulumi.String("skipSchemaValidations=false"),
//											pulumi.String("autoCreateNamespace=false"),
//											pulumi.String("pruneLast=false"),
//											pulumi.String("applyOutofSyncOnly=false"),
//											pulumi.String("Replace=false"),
//											pulumi.String("retry=false"),
//										},
//									},
//								},
//								Sources: platform.GitOpsApplicationsApplicationSpecSourceArray{
//									&platform.GitOpsApplicationsApplicationSpecSourceArgs{
//										TargetRevision: pulumi.String("master"),
//										RepoUrl:        pulumi.String("https://github.com/willycoll/argocd-example-apps.git"),
//										Path:           pulumi.String("helm-guestbook"),
//									},
//								},
//								Destinations: platform.GitOpsApplicationsApplicationSpecDestinationArray{
//									&platform.GitOpsApplicationsApplicationSpecDestinationArgs{
//										Namespace: pulumi.String("namespace-123"),
//										Server:    pulumi.String("https://1.3.4.5"),
//									},
//								},
//							},
//						},
//					},
//				},
//				ProjectId:  pulumi.String("project_id"),
//				OrgId:      pulumi.String("org_id"),
//				AccountId:  pulumi.String("account_id"),
//				Identifier: pulumi.String("identifier"),
//				ClusterId:  pulumi.String("cluster_id"),
//				RepoId:     pulumi.String("repo_id"),
//				AgentId:    pulumi.String("agent_id"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import a Project level Gitops Application
//
// ```sh
// $ pulumi import harness:platform/gitOpsApplications:GitOpsApplications example <organization_id>/<project_id>/<agent_id>/<app_name>
// ```
type GitOpsApplications struct {
	pulumi.CustomResourceState

	// Account identifier of the GitOps application.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Agent identifier of the GitOps application.
	AgentId pulumi.StringOutput `pulumi:"agentId"`
	// Definition of the GitOps application resource.
	Applications GitOpsApplicationsApplicationArrayOutput `pulumi:"applications"`
	// Cluster identifier of the GitOps application.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Identifier of the GitOps application.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	Identifier pulumi.StringPtrOutput `pulumi:"identifier"`
	// Kind of the GitOps application.
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Name of the GitOps application.
	Name pulumi.StringOutput `pulumi:"name"`
	// Options to remove existing finalizers to delete the GitOps application.
	OptionsRemoveExistingFinalizers pulumi.BoolPtrOutput `pulumi:"optionsRemoveExistingFinalizers"`
	// Organization identifier of the GitOps application.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// The ArgoCD project name corresponding to this GitOps application. An empty string means that the GitOps application belongs to the default project created by Harness.
	Project pulumi.StringOutput `pulumi:"project"`
	// Project identifier of the GitOps application.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Repository identifier of the GitOps application. When using skipRepoValidation, this field is not required.
	RepoId pulumi.StringPtrOutput `pulumi:"repoId"`
	// List of repository identifiers of the GitOps for Multi-Source application. Not required if skipRepoValidation is set to true.
	RepoIds pulumi.StringArrayOutput `pulumi:"repoIds"`
	// Request cascade to delete the GitOps application.
	RequestCascade pulumi.BoolPtrOutput `pulumi:"requestCascade"`
	// Request propagation policy to delete the GitOps application.
	RequestPropagationPolicy pulumi.StringPtrOutput `pulumi:"requestPropagationPolicy"`
	// Indicates if the GitOps application should skip validate repository definition exists.
	SkipRepoValidation pulumi.BoolPtrOutput `pulumi:"skipRepoValidation"`
	// Indicates if the GitOps application should be updated if existing and inserted if not.
	Upsert pulumi.BoolPtrOutput `pulumi:"upsert"`
	// Indicates if the GitOps application yaml has to be validated.
	Validate pulumi.BoolPtrOutput `pulumi:"validate"`
}

// NewGitOpsApplications registers a new resource with the given unique name, arguments, and options.
func NewGitOpsApplications(ctx *pulumi.Context,
	name string, args *GitOpsApplicationsArgs, opts ...pulumi.ResourceOption) (*GitOpsApplications, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AgentId == nil {
		return nil, errors.New("invalid value for required argument 'AgentId'")
	}
	if args.Applications == nil {
		return nil, errors.New("invalid value for required argument 'Applications'")
	}
	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GitOpsApplications
	err := ctx.RegisterResource("harness:platform/gitOpsApplications:GitOpsApplications", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitOpsApplications gets an existing GitOpsApplications resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitOpsApplications(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitOpsApplicationsState, opts ...pulumi.ResourceOption) (*GitOpsApplications, error) {
	var resource GitOpsApplications
	err := ctx.ReadResource("harness:platform/gitOpsApplications:GitOpsApplications", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitOpsApplications resources.
type gitOpsApplicationsState struct {
	// Account identifier of the GitOps application.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId *string `pulumi:"accountId"`
	// Agent identifier of the GitOps application.
	AgentId *string `pulumi:"agentId"`
	// Definition of the GitOps application resource.
	Applications []GitOpsApplicationsApplication `pulumi:"applications"`
	// Cluster identifier of the GitOps application.
	ClusterId *string `pulumi:"clusterId"`
	// Identifier of the GitOps application.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	Identifier *string `pulumi:"identifier"`
	// Kind of the GitOps application.
	Kind *string `pulumi:"kind"`
	// Name of the GitOps application.
	Name *string `pulumi:"name"`
	// Options to remove existing finalizers to delete the GitOps application.
	OptionsRemoveExistingFinalizers *bool `pulumi:"optionsRemoveExistingFinalizers"`
	// Organization identifier of the GitOps application.
	OrgId *string `pulumi:"orgId"`
	// The ArgoCD project name corresponding to this GitOps application. An empty string means that the GitOps application belongs to the default project created by Harness.
	Project *string `pulumi:"project"`
	// Project identifier of the GitOps application.
	ProjectId *string `pulumi:"projectId"`
	// Repository identifier of the GitOps application. When using skipRepoValidation, this field is not required.
	RepoId *string `pulumi:"repoId"`
	// List of repository identifiers of the GitOps for Multi-Source application. Not required if skipRepoValidation is set to true.
	RepoIds []string `pulumi:"repoIds"`
	// Request cascade to delete the GitOps application.
	RequestCascade *bool `pulumi:"requestCascade"`
	// Request propagation policy to delete the GitOps application.
	RequestPropagationPolicy *string `pulumi:"requestPropagationPolicy"`
	// Indicates if the GitOps application should skip validate repository definition exists.
	SkipRepoValidation *bool `pulumi:"skipRepoValidation"`
	// Indicates if the GitOps application should be updated if existing and inserted if not.
	Upsert *bool `pulumi:"upsert"`
	// Indicates if the GitOps application yaml has to be validated.
	Validate *bool `pulumi:"validate"`
}

type GitOpsApplicationsState struct {
	// Account identifier of the GitOps application.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId pulumi.StringPtrInput
	// Agent identifier of the GitOps application.
	AgentId pulumi.StringPtrInput
	// Definition of the GitOps application resource.
	Applications GitOpsApplicationsApplicationArrayInput
	// Cluster identifier of the GitOps application.
	ClusterId pulumi.StringPtrInput
	// Identifier of the GitOps application.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	Identifier pulumi.StringPtrInput
	// Kind of the GitOps application.
	Kind pulumi.StringPtrInput
	// Name of the GitOps application.
	Name pulumi.StringPtrInput
	// Options to remove existing finalizers to delete the GitOps application.
	OptionsRemoveExistingFinalizers pulumi.BoolPtrInput
	// Organization identifier of the GitOps application.
	OrgId pulumi.StringPtrInput
	// The ArgoCD project name corresponding to this GitOps application. An empty string means that the GitOps application belongs to the default project created by Harness.
	Project pulumi.StringPtrInput
	// Project identifier of the GitOps application.
	ProjectId pulumi.StringPtrInput
	// Repository identifier of the GitOps application. When using skipRepoValidation, this field is not required.
	RepoId pulumi.StringPtrInput
	// List of repository identifiers of the GitOps for Multi-Source application. Not required if skipRepoValidation is set to true.
	RepoIds pulumi.StringArrayInput
	// Request cascade to delete the GitOps application.
	RequestCascade pulumi.BoolPtrInput
	// Request propagation policy to delete the GitOps application.
	RequestPropagationPolicy pulumi.StringPtrInput
	// Indicates if the GitOps application should skip validate repository definition exists.
	SkipRepoValidation pulumi.BoolPtrInput
	// Indicates if the GitOps application should be updated if existing and inserted if not.
	Upsert pulumi.BoolPtrInput
	// Indicates if the GitOps application yaml has to be validated.
	Validate pulumi.BoolPtrInput
}

func (GitOpsApplicationsState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitOpsApplicationsState)(nil)).Elem()
}

type gitOpsApplicationsArgs struct {
	// Account identifier of the GitOps application.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId *string `pulumi:"accountId"`
	// Agent identifier of the GitOps application.
	AgentId string `pulumi:"agentId"`
	// Definition of the GitOps application resource.
	Applications []GitOpsApplicationsApplication `pulumi:"applications"`
	// Cluster identifier of the GitOps application.
	ClusterId string `pulumi:"clusterId"`
	// Identifier of the GitOps application.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	Identifier *string `pulumi:"identifier"`
	// Kind of the GitOps application.
	Kind *string `pulumi:"kind"`
	// Name of the GitOps application.
	Name *string `pulumi:"name"`
	// Options to remove existing finalizers to delete the GitOps application.
	OptionsRemoveExistingFinalizers *bool `pulumi:"optionsRemoveExistingFinalizers"`
	// Organization identifier of the GitOps application.
	OrgId string `pulumi:"orgId"`
	// The ArgoCD project name corresponding to this GitOps application. An empty string means that the GitOps application belongs to the default project created by Harness.
	Project *string `pulumi:"project"`
	// Project identifier of the GitOps application.
	ProjectId string `pulumi:"projectId"`
	// Repository identifier of the GitOps application. When using skipRepoValidation, this field is not required.
	RepoId *string `pulumi:"repoId"`
	// List of repository identifiers of the GitOps for Multi-Source application. Not required if skipRepoValidation is set to true.
	RepoIds []string `pulumi:"repoIds"`
	// Request cascade to delete the GitOps application.
	RequestCascade *bool `pulumi:"requestCascade"`
	// Request propagation policy to delete the GitOps application.
	RequestPropagationPolicy *string `pulumi:"requestPropagationPolicy"`
	// Indicates if the GitOps application should skip validate repository definition exists.
	SkipRepoValidation *bool `pulumi:"skipRepoValidation"`
	// Indicates if the GitOps application should be updated if existing and inserted if not.
	Upsert *bool `pulumi:"upsert"`
	// Indicates if the GitOps application yaml has to be validated.
	Validate *bool `pulumi:"validate"`
}

// The set of arguments for constructing a GitOpsApplications resource.
type GitOpsApplicationsArgs struct {
	// Account identifier of the GitOps application.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId pulumi.StringPtrInput
	// Agent identifier of the GitOps application.
	AgentId pulumi.StringInput
	// Definition of the GitOps application resource.
	Applications GitOpsApplicationsApplicationArrayInput
	// Cluster identifier of the GitOps application.
	ClusterId pulumi.StringInput
	// Identifier of the GitOps application.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	Identifier pulumi.StringPtrInput
	// Kind of the GitOps application.
	Kind pulumi.StringPtrInput
	// Name of the GitOps application.
	Name pulumi.StringPtrInput
	// Options to remove existing finalizers to delete the GitOps application.
	OptionsRemoveExistingFinalizers pulumi.BoolPtrInput
	// Organization identifier of the GitOps application.
	OrgId pulumi.StringInput
	// The ArgoCD project name corresponding to this GitOps application. An empty string means that the GitOps application belongs to the default project created by Harness.
	Project pulumi.StringPtrInput
	// Project identifier of the GitOps application.
	ProjectId pulumi.StringInput
	// Repository identifier of the GitOps application. When using skipRepoValidation, this field is not required.
	RepoId pulumi.StringPtrInput
	// List of repository identifiers of the GitOps for Multi-Source application. Not required if skipRepoValidation is set to true.
	RepoIds pulumi.StringArrayInput
	// Request cascade to delete the GitOps application.
	RequestCascade pulumi.BoolPtrInput
	// Request propagation policy to delete the GitOps application.
	RequestPropagationPolicy pulumi.StringPtrInput
	// Indicates if the GitOps application should skip validate repository definition exists.
	SkipRepoValidation pulumi.BoolPtrInput
	// Indicates if the GitOps application should be updated if existing and inserted if not.
	Upsert pulumi.BoolPtrInput
	// Indicates if the GitOps application yaml has to be validated.
	Validate pulumi.BoolPtrInput
}

func (GitOpsApplicationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitOpsApplicationsArgs)(nil)).Elem()
}

type GitOpsApplicationsInput interface {
	pulumi.Input

	ToGitOpsApplicationsOutput() GitOpsApplicationsOutput
	ToGitOpsApplicationsOutputWithContext(ctx context.Context) GitOpsApplicationsOutput
}

func (*GitOpsApplications) ElementType() reflect.Type {
	return reflect.TypeOf((**GitOpsApplications)(nil)).Elem()
}

func (i *GitOpsApplications) ToGitOpsApplicationsOutput() GitOpsApplicationsOutput {
	return i.ToGitOpsApplicationsOutputWithContext(context.Background())
}

func (i *GitOpsApplications) ToGitOpsApplicationsOutputWithContext(ctx context.Context) GitOpsApplicationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsApplicationsOutput)
}

// GitOpsApplicationsArrayInput is an input type that accepts GitOpsApplicationsArray and GitOpsApplicationsArrayOutput values.
// You can construct a concrete instance of `GitOpsApplicationsArrayInput` via:
//
//	GitOpsApplicationsArray{ GitOpsApplicationsArgs{...} }
type GitOpsApplicationsArrayInput interface {
	pulumi.Input

	ToGitOpsApplicationsArrayOutput() GitOpsApplicationsArrayOutput
	ToGitOpsApplicationsArrayOutputWithContext(context.Context) GitOpsApplicationsArrayOutput
}

type GitOpsApplicationsArray []GitOpsApplicationsInput

func (GitOpsApplicationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitOpsApplications)(nil)).Elem()
}

func (i GitOpsApplicationsArray) ToGitOpsApplicationsArrayOutput() GitOpsApplicationsArrayOutput {
	return i.ToGitOpsApplicationsArrayOutputWithContext(context.Background())
}

func (i GitOpsApplicationsArray) ToGitOpsApplicationsArrayOutputWithContext(ctx context.Context) GitOpsApplicationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsApplicationsArrayOutput)
}

// GitOpsApplicationsMapInput is an input type that accepts GitOpsApplicationsMap and GitOpsApplicationsMapOutput values.
// You can construct a concrete instance of `GitOpsApplicationsMapInput` via:
//
//	GitOpsApplicationsMap{ "key": GitOpsApplicationsArgs{...} }
type GitOpsApplicationsMapInput interface {
	pulumi.Input

	ToGitOpsApplicationsMapOutput() GitOpsApplicationsMapOutput
	ToGitOpsApplicationsMapOutputWithContext(context.Context) GitOpsApplicationsMapOutput
}

type GitOpsApplicationsMap map[string]GitOpsApplicationsInput

func (GitOpsApplicationsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitOpsApplications)(nil)).Elem()
}

func (i GitOpsApplicationsMap) ToGitOpsApplicationsMapOutput() GitOpsApplicationsMapOutput {
	return i.ToGitOpsApplicationsMapOutputWithContext(context.Background())
}

func (i GitOpsApplicationsMap) ToGitOpsApplicationsMapOutputWithContext(ctx context.Context) GitOpsApplicationsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsApplicationsMapOutput)
}

type GitOpsApplicationsOutput struct{ *pulumi.OutputState }

func (GitOpsApplicationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitOpsApplications)(nil)).Elem()
}

func (o GitOpsApplicationsOutput) ToGitOpsApplicationsOutput() GitOpsApplicationsOutput {
	return o
}

func (o GitOpsApplicationsOutput) ToGitOpsApplicationsOutputWithContext(ctx context.Context) GitOpsApplicationsOutput {
	return o
}

// Account identifier of the GitOps application.
//
// Deprecated: This field is deprecated and will be removed in a future release.
func (o GitOpsApplicationsOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitOpsApplications) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Agent identifier of the GitOps application.
func (o GitOpsApplicationsOutput) AgentId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitOpsApplications) pulumi.StringOutput { return v.AgentId }).(pulumi.StringOutput)
}

// Definition of the GitOps application resource.
func (o GitOpsApplicationsOutput) Applications() GitOpsApplicationsApplicationArrayOutput {
	return o.ApplyT(func(v *GitOpsApplications) GitOpsApplicationsApplicationArrayOutput { return v.Applications }).(GitOpsApplicationsApplicationArrayOutput)
}

// Cluster identifier of the GitOps application.
func (o GitOpsApplicationsOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitOpsApplications) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Identifier of the GitOps application.
//
// Deprecated: This field is deprecated and will be removed in a future release.
func (o GitOpsApplicationsOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsApplications) pulumi.StringPtrOutput { return v.Identifier }).(pulumi.StringPtrOutput)
}

// Kind of the GitOps application.
func (o GitOpsApplicationsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsApplications) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the GitOps application.
func (o GitOpsApplicationsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GitOpsApplications) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Options to remove existing finalizers to delete the GitOps application.
func (o GitOpsApplicationsOutput) OptionsRemoveExistingFinalizers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitOpsApplications) pulumi.BoolPtrOutput { return v.OptionsRemoveExistingFinalizers }).(pulumi.BoolPtrOutput)
}

// Organization identifier of the GitOps application.
func (o GitOpsApplicationsOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitOpsApplications) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// The ArgoCD project name corresponding to this GitOps application. An empty string means that the GitOps application belongs to the default project created by Harness.
func (o GitOpsApplicationsOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GitOpsApplications) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Project identifier of the GitOps application.
func (o GitOpsApplicationsOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitOpsApplications) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Repository identifier of the GitOps application. When using skipRepoValidation, this field is not required.
func (o GitOpsApplicationsOutput) RepoId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsApplications) pulumi.StringPtrOutput { return v.RepoId }).(pulumi.StringPtrOutput)
}

// List of repository identifiers of the GitOps for Multi-Source application. Not required if skipRepoValidation is set to true.
func (o GitOpsApplicationsOutput) RepoIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitOpsApplications) pulumi.StringArrayOutput { return v.RepoIds }).(pulumi.StringArrayOutput)
}

// Request cascade to delete the GitOps application.
func (o GitOpsApplicationsOutput) RequestCascade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitOpsApplications) pulumi.BoolPtrOutput { return v.RequestCascade }).(pulumi.BoolPtrOutput)
}

// Request propagation policy to delete the GitOps application.
func (o GitOpsApplicationsOutput) RequestPropagationPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsApplications) pulumi.StringPtrOutput { return v.RequestPropagationPolicy }).(pulumi.StringPtrOutput)
}

// Indicates if the GitOps application should skip validate repository definition exists.
func (o GitOpsApplicationsOutput) SkipRepoValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitOpsApplications) pulumi.BoolPtrOutput { return v.SkipRepoValidation }).(pulumi.BoolPtrOutput)
}

// Indicates if the GitOps application should be updated if existing and inserted if not.
func (o GitOpsApplicationsOutput) Upsert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitOpsApplications) pulumi.BoolPtrOutput { return v.Upsert }).(pulumi.BoolPtrOutput)
}

// Indicates if the GitOps application yaml has to be validated.
func (o GitOpsApplicationsOutput) Validate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitOpsApplications) pulumi.BoolPtrOutput { return v.Validate }).(pulumi.BoolPtrOutput)
}

type GitOpsApplicationsArrayOutput struct{ *pulumi.OutputState }

func (GitOpsApplicationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitOpsApplications)(nil)).Elem()
}

func (o GitOpsApplicationsArrayOutput) ToGitOpsApplicationsArrayOutput() GitOpsApplicationsArrayOutput {
	return o
}

func (o GitOpsApplicationsArrayOutput) ToGitOpsApplicationsArrayOutputWithContext(ctx context.Context) GitOpsApplicationsArrayOutput {
	return o
}

func (o GitOpsApplicationsArrayOutput) Index(i pulumi.IntInput) GitOpsApplicationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitOpsApplications {
		return vs[0].([]*GitOpsApplications)[vs[1].(int)]
	}).(GitOpsApplicationsOutput)
}

type GitOpsApplicationsMapOutput struct{ *pulumi.OutputState }

func (GitOpsApplicationsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitOpsApplications)(nil)).Elem()
}

func (o GitOpsApplicationsMapOutput) ToGitOpsApplicationsMapOutput() GitOpsApplicationsMapOutput {
	return o
}

func (o GitOpsApplicationsMapOutput) ToGitOpsApplicationsMapOutputWithContext(ctx context.Context) GitOpsApplicationsMapOutput {
	return o
}

func (o GitOpsApplicationsMapOutput) MapIndex(k pulumi.StringInput) GitOpsApplicationsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitOpsApplications {
		return vs[0].(map[string]*GitOpsApplications)[vs[1].(string)]
	}).(GitOpsApplicationsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitOpsApplicationsInput)(nil)).Elem(), &GitOpsApplications{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitOpsApplicationsArrayInput)(nil)).Elem(), GitOpsApplicationsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitOpsApplicationsMapInput)(nil)).Elem(), GitOpsApplicationsMap{})
	pulumi.RegisterOutputType(GitOpsApplicationsOutput{})
	pulumi.RegisterOutputType(GitOpsApplicationsArrayOutput{})
	pulumi.RegisterOutputType(GitOpsApplicationsMapOutput{})
}
