// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DataSource for looking up a Vault connector in Harness.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupVaultConnector(ctx, &platform.LookupVaultConnectorArgs{
//				Identifier: "identifier",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupVaultConnector(ctx *pulumi.Context, args *LookupVaultConnectorArgs, opts ...pulumi.InvokeOption) (*LookupVaultConnectorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVaultConnectorResult
	err := ctx.Invoke("harness:platform/getVaultConnector:getVaultConnector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVaultConnector.
type LookupVaultConnectorArgs struct {
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getVaultConnector.
type LookupVaultConnectorResult struct {
	// Access type.
	AccessType string `pulumi:"accessType"`
	// ID of App Role.
	AppRoleId string `pulumi:"appRoleId"`
	// The authentication token for Vault.
	AuthToken string `pulumi:"authToken"`
	// The AWS region where AWS IAM auth will happen.
	AwsRegion string `pulumi:"awsRegion"`
	// The location of the Vault directory where Secret will be stored.
	BasePath string `pulumi:"basePath"`
	// Is default or not.
	Default bool `pulumi:"default"`
	// List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description string `pulumi:"description"`
	// Execute on delegate or not.
	ExecuteOnDelegate bool `pulumi:"executeOnDelegate"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Is default or not.
	IsDefault bool `pulumi:"isDefault"`
	// Read only or not.
	IsReadOnly bool `pulumi:"isReadOnly"`
	// The path where kubernetes auth is enabled in Vault.
	K8sAuthEndpoint string `pulumi:"k8sAuthEndpoint"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// The Vault namespace where Secret will be created.
	Namespace string `pulumi:"namespace"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Read only.
	ReadOnly bool `pulumi:"readOnly"`
	// Boolean value to indicate if appRole token renewal is enabled or not.
	RenewAppRoleToken bool `pulumi:"renewAppRoleToken"`
	// The time interval for token renewal.
	RenewalIntervalMinutes int `pulumi:"renewalIntervalMinutes"`
	// Manually entered Secret Engine.
	SecretEngineManuallyConfigured bool `pulumi:"secretEngineManuallyConfigured"`
	// Name of the Secret Engine.
	SecretEngineName string `pulumi:"secretEngineName"`
	// Version of Secret Engine.
	SecretEngineVersion int `pulumi:"secretEngineVersion"`
	// ID of the Secret.
	SecretId string `pulumi:"secretId"`
	// The SA token path where the token is mounted in the K8s Pod.
	ServiceAccountTokenPath string `pulumi:"serviceAccountTokenPath"`
	// The location at which auth token is to be read from.
	SinkPath string `pulumi:"sinkPath"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// Boolean value to indicate if AWS IAM is used for authentication.
	UseAwsIam bool `pulumi:"useAwsIam"`
	// Boolean value to indicate if JWT is used for authentication.
	UseJwtAuth bool `pulumi:"useJwtAuth"`
	// Boolean value to indicate if K8s Auth is used for authentication.
	UseK8sAuth bool `pulumi:"useK8sAuth"`
	// Boolean value to indicate if Vault Agent is used for authentication.
	UseVaultAgent bool `pulumi:"useVaultAgent"`
	// The Vault role defined to bind to AWS IAM account/role being accessed.
	VaultAwsIamRole string `pulumi:"vaultAwsIamRole"`
	// Custom path at with JWT auth in enabled for Vault
	VaultJwtAuthPath string `pulumi:"vaultJwtAuthPath"`
	// The Vault role defined with JWT auth type for accessing Vault as per policies binded.
	VaultJwtAuthRole string `pulumi:"vaultJwtAuthRole"`
	// The role where K8s auth will happen.
	VaultK8sAuthRole string `pulumi:"vaultK8sAuthRole"`
	// URL of the HashiCorp Vault.
	VaultUrl string `pulumi:"vaultUrl"`
	// The AWS IAM Header Server ID that has been configured for this AWS IAM instance.
	XvaultAwsIamServerId string `pulumi:"xvaultAwsIamServerId"`
}

func LookupVaultConnectorOutput(ctx *pulumi.Context, args LookupVaultConnectorOutputArgs, opts ...pulumi.InvokeOption) LookupVaultConnectorResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVaultConnectorResultOutput, error) {
			args := v.(LookupVaultConnectorArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getVaultConnector:getVaultConnector", args, LookupVaultConnectorResultOutput{}, options).(LookupVaultConnectorResultOutput), nil
		}).(LookupVaultConnectorResultOutput)
}

// A collection of arguments for invoking getVaultConnector.
type LookupVaultConnectorOutputArgs struct {
	// Unique identifier of the resource.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupVaultConnectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVaultConnectorArgs)(nil)).Elem()
}

// A collection of values returned by getVaultConnector.
type LookupVaultConnectorResultOutput struct{ *pulumi.OutputState }

func (LookupVaultConnectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVaultConnectorResult)(nil)).Elem()
}

func (o LookupVaultConnectorResultOutput) ToLookupVaultConnectorResultOutput() LookupVaultConnectorResultOutput {
	return o
}

func (o LookupVaultConnectorResultOutput) ToLookupVaultConnectorResultOutputWithContext(ctx context.Context) LookupVaultConnectorResultOutput {
	return o
}

// Access type.
func (o LookupVaultConnectorResultOutput) AccessType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) string { return v.AccessType }).(pulumi.StringOutput)
}

// ID of App Role.
func (o LookupVaultConnectorResultOutput) AppRoleId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) string { return v.AppRoleId }).(pulumi.StringOutput)
}

// The authentication token for Vault.
func (o LookupVaultConnectorResultOutput) AuthToken() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) string { return v.AuthToken }).(pulumi.StringOutput)
}

// The AWS region where AWS IAM auth will happen.
func (o LookupVaultConnectorResultOutput) AwsRegion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) string { return v.AwsRegion }).(pulumi.StringOutput)
}

// The location of the Vault directory where Secret will be stored.
func (o LookupVaultConnectorResultOutput) BasePath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) string { return v.BasePath }).(pulumi.StringOutput)
}

// Is default or not.
func (o LookupVaultConnectorResultOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) bool { return v.Default }).(pulumi.BoolOutput)
}

// List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.
func (o LookupVaultConnectorResultOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) []string { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o LookupVaultConnectorResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) string { return v.Description }).(pulumi.StringOutput)
}

// Execute on delegate or not.
func (o LookupVaultConnectorResultOutput) ExecuteOnDelegate() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) bool { return v.ExecuteOnDelegate }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVaultConnectorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupVaultConnectorResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Is default or not.
func (o LookupVaultConnectorResultOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// Read only or not.
func (o LookupVaultConnectorResultOutput) IsReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) bool { return v.IsReadOnly }).(pulumi.BoolOutput)
}

// The path where kubernetes auth is enabled in Vault.
func (o LookupVaultConnectorResultOutput) K8sAuthEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) string { return v.K8sAuthEndpoint }).(pulumi.StringOutput)
}

// Name of the resource.
func (o LookupVaultConnectorResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The Vault namespace where Secret will be created.
func (o LookupVaultConnectorResultOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) string { return v.Namespace }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o LookupVaultConnectorResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o LookupVaultConnectorResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Read only.
func (o LookupVaultConnectorResultOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) bool { return v.ReadOnly }).(pulumi.BoolOutput)
}

// Boolean value to indicate if appRole token renewal is enabled or not.
func (o LookupVaultConnectorResultOutput) RenewAppRoleToken() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) bool { return v.RenewAppRoleToken }).(pulumi.BoolOutput)
}

// The time interval for token renewal.
func (o LookupVaultConnectorResultOutput) RenewalIntervalMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) int { return v.RenewalIntervalMinutes }).(pulumi.IntOutput)
}

// Manually entered Secret Engine.
func (o LookupVaultConnectorResultOutput) SecretEngineManuallyConfigured() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) bool { return v.SecretEngineManuallyConfigured }).(pulumi.BoolOutput)
}

// Name of the Secret Engine.
func (o LookupVaultConnectorResultOutput) SecretEngineName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) string { return v.SecretEngineName }).(pulumi.StringOutput)
}

// Version of Secret Engine.
func (o LookupVaultConnectorResultOutput) SecretEngineVersion() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) int { return v.SecretEngineVersion }).(pulumi.IntOutput)
}

// ID of the Secret.
func (o LookupVaultConnectorResultOutput) SecretId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) string { return v.SecretId }).(pulumi.StringOutput)
}

// The SA token path where the token is mounted in the K8s Pod.
func (o LookupVaultConnectorResultOutput) ServiceAccountTokenPath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) string { return v.ServiceAccountTokenPath }).(pulumi.StringOutput)
}

// The location at which auth token is to be read from.
func (o LookupVaultConnectorResultOutput) SinkPath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) string { return v.SinkPath }).(pulumi.StringOutput)
}

// Tags to associate with the resource.
func (o LookupVaultConnectorResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Boolean value to indicate if AWS IAM is used for authentication.
func (o LookupVaultConnectorResultOutput) UseAwsIam() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) bool { return v.UseAwsIam }).(pulumi.BoolOutput)
}

// Boolean value to indicate if JWT is used for authentication.
func (o LookupVaultConnectorResultOutput) UseJwtAuth() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) bool { return v.UseJwtAuth }).(pulumi.BoolOutput)
}

// Boolean value to indicate if K8s Auth is used for authentication.
func (o LookupVaultConnectorResultOutput) UseK8sAuth() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) bool { return v.UseK8sAuth }).(pulumi.BoolOutput)
}

// Boolean value to indicate if Vault Agent is used for authentication.
func (o LookupVaultConnectorResultOutput) UseVaultAgent() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) bool { return v.UseVaultAgent }).(pulumi.BoolOutput)
}

// The Vault role defined to bind to AWS IAM account/role being accessed.
func (o LookupVaultConnectorResultOutput) VaultAwsIamRole() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) string { return v.VaultAwsIamRole }).(pulumi.StringOutput)
}

// Custom path at with JWT auth in enabled for Vault
func (o LookupVaultConnectorResultOutput) VaultJwtAuthPath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) string { return v.VaultJwtAuthPath }).(pulumi.StringOutput)
}

// The Vault role defined with JWT auth type for accessing Vault as per policies binded.
func (o LookupVaultConnectorResultOutput) VaultJwtAuthRole() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) string { return v.VaultJwtAuthRole }).(pulumi.StringOutput)
}

// The role where K8s auth will happen.
func (o LookupVaultConnectorResultOutput) VaultK8sAuthRole() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) string { return v.VaultK8sAuthRole }).(pulumi.StringOutput)
}

// URL of the HashiCorp Vault.
func (o LookupVaultConnectorResultOutput) VaultUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) string { return v.VaultUrl }).(pulumi.StringOutput)
}

// The AWS IAM Header Server ID that has been configured for this AWS IAM instance.
func (o LookupVaultConnectorResultOutput) XvaultAwsIamServerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultConnectorResult) string { return v.XvaultAwsIamServerId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVaultConnectorResultOutput{})
}
