// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import harness:platform/infraModuleTesting:InfraModuleTesting example <module_id>
// ```
type InfraModuleTesting struct {
	pulumi.CustomResourceState

	// Account that owns the module
	Account pulumi.StringOutput `pulumi:"account"`
	// Timestamp when the module was created
	Created pulumi.IntOutput `pulumi:"created"`
	// Description of the module
	Description pulumi.StringOutput `pulumi:"description"`
	// Git Tag Style
	GitTagStyle pulumi.StringOutput `pulumi:"gitTagStyle"`
	// Error while retrieving the module
	ModuleError pulumi.StringOutput `pulumi:"moduleError"`
	// Identifier of the module to enable testing for
	ModuleId pulumi.StringOutput `pulumi:"moduleId"`
	// Name of the module
	Name pulumi.StringOutput `pulumi:"name"`
	// Organization identifier
	Org pulumi.StringOutput `pulumi:"org"`
	// List of pipeline IDs to create webhooks for triggering test executions
	Pipelines pulumi.StringArrayOutput `pulumi:"pipelines"`
	// Project identifier
	Project pulumi.StringOutput `pulumi:"project"`
	// Provider connector for testing purposes
	ProviderConnector pulumi.StringOutput `pulumi:"providerConnector"`
	ProvisionerType   pulumi.StringOutput `pulumi:"provisionerType"`
	// Provisioner version for testing purposes
	ProvisionerVersion pulumi.StringOutput `pulumi:"provisionerVersion"`
	// Pipeline ID to create webhooks for releases
	ReleasePipeline pulumi.StringPtrOutput `pulumi:"releasePipeline"`
	// For account connectors, the repository where the module is stored
	Repository pulumi.StringOutput `pulumi:"repository"`
	// Repository Branch in which the module should be accessed
	RepositoryBranch pulumi.StringOutput `pulumi:"repositoryBranch"`
	// Repository Commit in which the module should be accessed
	RepositoryCommit pulumi.StringOutput `pulumi:"repositoryCommit"`
	// Repository Connector is the reference to the connector for the repository
	RepositoryConnector pulumi.StringOutput `pulumi:"repositoryConnector"`
	// Repository Path is the path in which the module resides
	RepositoryPath pulumi.StringOutput `pulumi:"repositoryPath"`
	// URL where the module is stored
	RepositoryUrl pulumi.StringOutput `pulumi:"repositoryUrl"`
	// Timestamp when the module was last synced
	Synced pulumi.IntOutput `pulumi:"synced"`
	// Provider of the module
	System pulumi.StringOutput `pulumi:"system"`
	// Tags associated with the module
	Tags pulumi.StringOutput `pulumi:"tags"`
	// Whether testing is enabled for the module
	TestingEnabled pulumi.BoolOutput `pulumi:"testingEnabled"`
	// Testing metadata for the module
	TestingMetadata InfraModuleTestingTestingMetadataOutput `pulumi:"testingMetadata"`
	// Timestamp when the module was last modified
	Updated pulumi.IntOutput `pulumi:"updated"`
	// Versions of the module
	Versions pulumi.StringArrayOutput `pulumi:"versions"`
}

// NewInfraModuleTesting registers a new resource with the given unique name, arguments, and options.
func NewInfraModuleTesting(ctx *pulumi.Context,
	name string, args *InfraModuleTestingArgs, opts ...pulumi.ResourceOption) (*InfraModuleTesting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ModuleId == nil {
		return nil, errors.New("invalid value for required argument 'ModuleId'")
	}
	if args.Org == nil {
		return nil, errors.New("invalid value for required argument 'Org'")
	}
	if args.Pipelines == nil {
		return nil, errors.New("invalid value for required argument 'Pipelines'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ProviderConnector == nil {
		return nil, errors.New("invalid value for required argument 'ProviderConnector'")
	}
	if args.ProvisionerType == nil {
		return nil, errors.New("invalid value for required argument 'ProvisionerType'")
	}
	if args.ProvisionerVersion == nil {
		return nil, errors.New("invalid value for required argument 'ProvisionerVersion'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InfraModuleTesting
	err := ctx.RegisterResource("harness:platform/infraModuleTesting:InfraModuleTesting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInfraModuleTesting gets an existing InfraModuleTesting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInfraModuleTesting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InfraModuleTestingState, opts ...pulumi.ResourceOption) (*InfraModuleTesting, error) {
	var resource InfraModuleTesting
	err := ctx.ReadResource("harness:platform/infraModuleTesting:InfraModuleTesting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InfraModuleTesting resources.
type infraModuleTestingState struct {
	// Account that owns the module
	Account *string `pulumi:"account"`
	// Timestamp when the module was created
	Created *int `pulumi:"created"`
	// Description of the module
	Description *string `pulumi:"description"`
	// Git Tag Style
	GitTagStyle *string `pulumi:"gitTagStyle"`
	// Error while retrieving the module
	ModuleError *string `pulumi:"moduleError"`
	// Identifier of the module to enable testing for
	ModuleId *string `pulumi:"moduleId"`
	// Name of the module
	Name *string `pulumi:"name"`
	// Organization identifier
	Org *string `pulumi:"org"`
	// List of pipeline IDs to create webhooks for triggering test executions
	Pipelines []string `pulumi:"pipelines"`
	// Project identifier
	Project *string `pulumi:"project"`
	// Provider connector for testing purposes
	ProviderConnector *string `pulumi:"providerConnector"`
	ProvisionerType   *string `pulumi:"provisionerType"`
	// Provisioner version for testing purposes
	ProvisionerVersion *string `pulumi:"provisionerVersion"`
	// Pipeline ID to create webhooks for releases
	ReleasePipeline *string `pulumi:"releasePipeline"`
	// For account connectors, the repository where the module is stored
	Repository *string `pulumi:"repository"`
	// Repository Branch in which the module should be accessed
	RepositoryBranch *string `pulumi:"repositoryBranch"`
	// Repository Commit in which the module should be accessed
	RepositoryCommit *string `pulumi:"repositoryCommit"`
	// Repository Connector is the reference to the connector for the repository
	RepositoryConnector *string `pulumi:"repositoryConnector"`
	// Repository Path is the path in which the module resides
	RepositoryPath *string `pulumi:"repositoryPath"`
	// URL where the module is stored
	RepositoryUrl *string `pulumi:"repositoryUrl"`
	// Timestamp when the module was last synced
	Synced *int `pulumi:"synced"`
	// Provider of the module
	System *string `pulumi:"system"`
	// Tags associated with the module
	Tags *string `pulumi:"tags"`
	// Whether testing is enabled for the module
	TestingEnabled *bool `pulumi:"testingEnabled"`
	// Testing metadata for the module
	TestingMetadata *InfraModuleTestingTestingMetadata `pulumi:"testingMetadata"`
	// Timestamp when the module was last modified
	Updated *int `pulumi:"updated"`
	// Versions of the module
	Versions []string `pulumi:"versions"`
}

type InfraModuleTestingState struct {
	// Account that owns the module
	Account pulumi.StringPtrInput
	// Timestamp when the module was created
	Created pulumi.IntPtrInput
	// Description of the module
	Description pulumi.StringPtrInput
	// Git Tag Style
	GitTagStyle pulumi.StringPtrInput
	// Error while retrieving the module
	ModuleError pulumi.StringPtrInput
	// Identifier of the module to enable testing for
	ModuleId pulumi.StringPtrInput
	// Name of the module
	Name pulumi.StringPtrInput
	// Organization identifier
	Org pulumi.StringPtrInput
	// List of pipeline IDs to create webhooks for triggering test executions
	Pipelines pulumi.StringArrayInput
	// Project identifier
	Project pulumi.StringPtrInput
	// Provider connector for testing purposes
	ProviderConnector pulumi.StringPtrInput
	ProvisionerType   pulumi.StringPtrInput
	// Provisioner version for testing purposes
	ProvisionerVersion pulumi.StringPtrInput
	// Pipeline ID to create webhooks for releases
	ReleasePipeline pulumi.StringPtrInput
	// For account connectors, the repository where the module is stored
	Repository pulumi.StringPtrInput
	// Repository Branch in which the module should be accessed
	RepositoryBranch pulumi.StringPtrInput
	// Repository Commit in which the module should be accessed
	RepositoryCommit pulumi.StringPtrInput
	// Repository Connector is the reference to the connector for the repository
	RepositoryConnector pulumi.StringPtrInput
	// Repository Path is the path in which the module resides
	RepositoryPath pulumi.StringPtrInput
	// URL where the module is stored
	RepositoryUrl pulumi.StringPtrInput
	// Timestamp when the module was last synced
	Synced pulumi.IntPtrInput
	// Provider of the module
	System pulumi.StringPtrInput
	// Tags associated with the module
	Tags pulumi.StringPtrInput
	// Whether testing is enabled for the module
	TestingEnabled pulumi.BoolPtrInput
	// Testing metadata for the module
	TestingMetadata InfraModuleTestingTestingMetadataPtrInput
	// Timestamp when the module was last modified
	Updated pulumi.IntPtrInput
	// Versions of the module
	Versions pulumi.StringArrayInput
}

func (InfraModuleTestingState) ElementType() reflect.Type {
	return reflect.TypeOf((*infraModuleTestingState)(nil)).Elem()
}

type infraModuleTestingArgs struct {
	// Identifier of the module to enable testing for
	ModuleId string `pulumi:"moduleId"`
	// Organization identifier
	Org string `pulumi:"org"`
	// List of pipeline IDs to create webhooks for triggering test executions
	Pipelines []string `pulumi:"pipelines"`
	// Project identifier
	Project string `pulumi:"project"`
	// Provider connector for testing purposes
	ProviderConnector string `pulumi:"providerConnector"`
	ProvisionerType   string `pulumi:"provisionerType"`
	// Provisioner version for testing purposes
	ProvisionerVersion string `pulumi:"provisionerVersion"`
	// Pipeline ID to create webhooks for releases
	ReleasePipeline *string `pulumi:"releasePipeline"`
	// Whether testing is enabled for the module
	TestingEnabled *bool `pulumi:"testingEnabled"`
	// Testing metadata for the module
	TestingMetadata *InfraModuleTestingTestingMetadata `pulumi:"testingMetadata"`
	// Timestamp when the module was last modified
	Updated *int `pulumi:"updated"`
	// Versions of the module
	Versions []string `pulumi:"versions"`
}

// The set of arguments for constructing a InfraModuleTesting resource.
type InfraModuleTestingArgs struct {
	// Identifier of the module to enable testing for
	ModuleId pulumi.StringInput
	// Organization identifier
	Org pulumi.StringInput
	// List of pipeline IDs to create webhooks for triggering test executions
	Pipelines pulumi.StringArrayInput
	// Project identifier
	Project pulumi.StringInput
	// Provider connector for testing purposes
	ProviderConnector pulumi.StringInput
	ProvisionerType   pulumi.StringInput
	// Provisioner version for testing purposes
	ProvisionerVersion pulumi.StringInput
	// Pipeline ID to create webhooks for releases
	ReleasePipeline pulumi.StringPtrInput
	// Whether testing is enabled for the module
	TestingEnabled pulumi.BoolPtrInput
	// Testing metadata for the module
	TestingMetadata InfraModuleTestingTestingMetadataPtrInput
	// Timestamp when the module was last modified
	Updated pulumi.IntPtrInput
	// Versions of the module
	Versions pulumi.StringArrayInput
}

func (InfraModuleTestingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*infraModuleTestingArgs)(nil)).Elem()
}

type InfraModuleTestingInput interface {
	pulumi.Input

	ToInfraModuleTestingOutput() InfraModuleTestingOutput
	ToInfraModuleTestingOutputWithContext(ctx context.Context) InfraModuleTestingOutput
}

func (*InfraModuleTesting) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraModuleTesting)(nil)).Elem()
}

func (i *InfraModuleTesting) ToInfraModuleTestingOutput() InfraModuleTestingOutput {
	return i.ToInfraModuleTestingOutputWithContext(context.Background())
}

func (i *InfraModuleTesting) ToInfraModuleTestingOutputWithContext(ctx context.Context) InfraModuleTestingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraModuleTestingOutput)
}

// InfraModuleTestingArrayInput is an input type that accepts InfraModuleTestingArray and InfraModuleTestingArrayOutput values.
// You can construct a concrete instance of `InfraModuleTestingArrayInput` via:
//
//	InfraModuleTestingArray{ InfraModuleTestingArgs{...} }
type InfraModuleTestingArrayInput interface {
	pulumi.Input

	ToInfraModuleTestingArrayOutput() InfraModuleTestingArrayOutput
	ToInfraModuleTestingArrayOutputWithContext(context.Context) InfraModuleTestingArrayOutput
}

type InfraModuleTestingArray []InfraModuleTestingInput

func (InfraModuleTestingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InfraModuleTesting)(nil)).Elem()
}

func (i InfraModuleTestingArray) ToInfraModuleTestingArrayOutput() InfraModuleTestingArrayOutput {
	return i.ToInfraModuleTestingArrayOutputWithContext(context.Background())
}

func (i InfraModuleTestingArray) ToInfraModuleTestingArrayOutputWithContext(ctx context.Context) InfraModuleTestingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraModuleTestingArrayOutput)
}

// InfraModuleTestingMapInput is an input type that accepts InfraModuleTestingMap and InfraModuleTestingMapOutput values.
// You can construct a concrete instance of `InfraModuleTestingMapInput` via:
//
//	InfraModuleTestingMap{ "key": InfraModuleTestingArgs{...} }
type InfraModuleTestingMapInput interface {
	pulumi.Input

	ToInfraModuleTestingMapOutput() InfraModuleTestingMapOutput
	ToInfraModuleTestingMapOutputWithContext(context.Context) InfraModuleTestingMapOutput
}

type InfraModuleTestingMap map[string]InfraModuleTestingInput

func (InfraModuleTestingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InfraModuleTesting)(nil)).Elem()
}

func (i InfraModuleTestingMap) ToInfraModuleTestingMapOutput() InfraModuleTestingMapOutput {
	return i.ToInfraModuleTestingMapOutputWithContext(context.Background())
}

func (i InfraModuleTestingMap) ToInfraModuleTestingMapOutputWithContext(ctx context.Context) InfraModuleTestingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraModuleTestingMapOutput)
}

type InfraModuleTestingOutput struct{ *pulumi.OutputState }

func (InfraModuleTestingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraModuleTesting)(nil)).Elem()
}

func (o InfraModuleTestingOutput) ToInfraModuleTestingOutput() InfraModuleTestingOutput {
	return o
}

func (o InfraModuleTestingOutput) ToInfraModuleTestingOutputWithContext(ctx context.Context) InfraModuleTestingOutput {
	return o
}

// Account that owns the module
func (o InfraModuleTestingOutput) Account() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringOutput { return v.Account }).(pulumi.StringOutput)
}

// Timestamp when the module was created
func (o InfraModuleTestingOutput) Created() pulumi.IntOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.IntOutput { return v.Created }).(pulumi.IntOutput)
}

// Description of the module
func (o InfraModuleTestingOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Git Tag Style
func (o InfraModuleTestingOutput) GitTagStyle() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringOutput { return v.GitTagStyle }).(pulumi.StringOutput)
}

// Error while retrieving the module
func (o InfraModuleTestingOutput) ModuleError() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringOutput { return v.ModuleError }).(pulumi.StringOutput)
}

// Identifier of the module to enable testing for
func (o InfraModuleTestingOutput) ModuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringOutput { return v.ModuleId }).(pulumi.StringOutput)
}

// Name of the module
func (o InfraModuleTestingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Organization identifier
func (o InfraModuleTestingOutput) Org() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringOutput { return v.Org }).(pulumi.StringOutput)
}

// List of pipeline IDs to create webhooks for triggering test executions
func (o InfraModuleTestingOutput) Pipelines() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringArrayOutput { return v.Pipelines }).(pulumi.StringArrayOutput)
}

// Project identifier
func (o InfraModuleTestingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Provider connector for testing purposes
func (o InfraModuleTestingOutput) ProviderConnector() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringOutput { return v.ProviderConnector }).(pulumi.StringOutput)
}

func (o InfraModuleTestingOutput) ProvisionerType() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringOutput { return v.ProvisionerType }).(pulumi.StringOutput)
}

// Provisioner version for testing purposes
func (o InfraModuleTestingOutput) ProvisionerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringOutput { return v.ProvisionerVersion }).(pulumi.StringOutput)
}

// Pipeline ID to create webhooks for releases
func (o InfraModuleTestingOutput) ReleasePipeline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringPtrOutput { return v.ReleasePipeline }).(pulumi.StringPtrOutput)
}

// For account connectors, the repository where the module is stored
func (o InfraModuleTestingOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

// Repository Branch in which the module should be accessed
func (o InfraModuleTestingOutput) RepositoryBranch() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringOutput { return v.RepositoryBranch }).(pulumi.StringOutput)
}

// Repository Commit in which the module should be accessed
func (o InfraModuleTestingOutput) RepositoryCommit() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringOutput { return v.RepositoryCommit }).(pulumi.StringOutput)
}

// Repository Connector is the reference to the connector for the repository
func (o InfraModuleTestingOutput) RepositoryConnector() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringOutput { return v.RepositoryConnector }).(pulumi.StringOutput)
}

// Repository Path is the path in which the module resides
func (o InfraModuleTestingOutput) RepositoryPath() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringOutput { return v.RepositoryPath }).(pulumi.StringOutput)
}

// URL where the module is stored
func (o InfraModuleTestingOutput) RepositoryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringOutput { return v.RepositoryUrl }).(pulumi.StringOutput)
}

// Timestamp when the module was last synced
func (o InfraModuleTestingOutput) Synced() pulumi.IntOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.IntOutput { return v.Synced }).(pulumi.IntOutput)
}

// Provider of the module
func (o InfraModuleTestingOutput) System() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringOutput { return v.System }).(pulumi.StringOutput)
}

// Tags associated with the module
func (o InfraModuleTestingOutput) Tags() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringOutput { return v.Tags }).(pulumi.StringOutput)
}

// Whether testing is enabled for the module
func (o InfraModuleTestingOutput) TestingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.BoolOutput { return v.TestingEnabled }).(pulumi.BoolOutput)
}

// Testing metadata for the module
func (o InfraModuleTestingOutput) TestingMetadata() InfraModuleTestingTestingMetadataOutput {
	return o.ApplyT(func(v *InfraModuleTesting) InfraModuleTestingTestingMetadataOutput { return v.TestingMetadata }).(InfraModuleTestingTestingMetadataOutput)
}

// Timestamp when the module was last modified
func (o InfraModuleTestingOutput) Updated() pulumi.IntOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.IntOutput { return v.Updated }).(pulumi.IntOutput)
}

// Versions of the module
func (o InfraModuleTestingOutput) Versions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InfraModuleTesting) pulumi.StringArrayOutput { return v.Versions }).(pulumi.StringArrayOutput)
}

type InfraModuleTestingArrayOutput struct{ *pulumi.OutputState }

func (InfraModuleTestingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InfraModuleTesting)(nil)).Elem()
}

func (o InfraModuleTestingArrayOutput) ToInfraModuleTestingArrayOutput() InfraModuleTestingArrayOutput {
	return o
}

func (o InfraModuleTestingArrayOutput) ToInfraModuleTestingArrayOutputWithContext(ctx context.Context) InfraModuleTestingArrayOutput {
	return o
}

func (o InfraModuleTestingArrayOutput) Index(i pulumi.IntInput) InfraModuleTestingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InfraModuleTesting {
		return vs[0].([]*InfraModuleTesting)[vs[1].(int)]
	}).(InfraModuleTestingOutput)
}

type InfraModuleTestingMapOutput struct{ *pulumi.OutputState }

func (InfraModuleTestingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InfraModuleTesting)(nil)).Elem()
}

func (o InfraModuleTestingMapOutput) ToInfraModuleTestingMapOutput() InfraModuleTestingMapOutput {
	return o
}

func (o InfraModuleTestingMapOutput) ToInfraModuleTestingMapOutputWithContext(ctx context.Context) InfraModuleTestingMapOutput {
	return o
}

func (o InfraModuleTestingMapOutput) MapIndex(k pulumi.StringInput) InfraModuleTestingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InfraModuleTesting {
		return vs[0].(map[string]*InfraModuleTesting)[vs[1].(string)]
	}).(InfraModuleTestingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InfraModuleTestingInput)(nil)).Elem(), &InfraModuleTesting{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfraModuleTestingArrayInput)(nil)).Elem(), InfraModuleTestingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfraModuleTestingMapInput)(nil)).Elem(), InfraModuleTestingMap{})
	pulumi.RegisterOutputType(InfraModuleTestingOutput{})
	pulumi.RegisterOutputType(InfraModuleTestingArrayOutput{})
	pulumi.RegisterOutputType(InfraModuleTestingMapOutput{})
}
