// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Datasource for looking up an Spot connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupSpotConnector(ctx, &platform.LookupSpotConnectorArgs{
//				Identifier: "identifier",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSpotConnector(ctx *pulumi.Context, args *LookupSpotConnectorArgs, opts ...pulumi.InvokeOption) (*LookupSpotConnectorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSpotConnectorResult
	err := ctx.Invoke("harness:platform/getSpotConnector:getSpotConnector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSpotConnector.
type LookupSpotConnectorArgs struct {
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getSpotConnector.
type LookupSpotConnectorResult struct {
	// Description of the resource.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Authenticate to Spot using account id and permanent token.
	PermanentTokens []GetSpotConnectorPermanentToken `pulumi:"permanentTokens"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

func LookupSpotConnectorOutput(ctx *pulumi.Context, args LookupSpotConnectorOutputArgs, opts ...pulumi.InvokeOption) LookupSpotConnectorResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSpotConnectorResultOutput, error) {
			args := v.(LookupSpotConnectorArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getSpotConnector:getSpotConnector", args, LookupSpotConnectorResultOutput{}, options).(LookupSpotConnectorResultOutput), nil
		}).(LookupSpotConnectorResultOutput)
}

// A collection of arguments for invoking getSpotConnector.
type LookupSpotConnectorOutputArgs struct {
	// Unique identifier of the resource.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupSpotConnectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSpotConnectorArgs)(nil)).Elem()
}

// A collection of values returned by getSpotConnector.
type LookupSpotConnectorResultOutput struct{ *pulumi.OutputState }

func (LookupSpotConnectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSpotConnectorResult)(nil)).Elem()
}

func (o LookupSpotConnectorResultOutput) ToLookupSpotConnectorResultOutput() LookupSpotConnectorResultOutput {
	return o
}

func (o LookupSpotConnectorResultOutput) ToLookupSpotConnectorResultOutputWithContext(ctx context.Context) LookupSpotConnectorResultOutput {
	return o
}

// Description of the resource.
func (o LookupSpotConnectorResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpotConnectorResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSpotConnectorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpotConnectorResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupSpotConnectorResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpotConnectorResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o LookupSpotConnectorResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSpotConnectorResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the organization.
func (o LookupSpotConnectorResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSpotConnectorResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Authenticate to Spot using account id and permanent token.
func (o LookupSpotConnectorResultOutput) PermanentTokens() GetSpotConnectorPermanentTokenArrayOutput {
	return o.ApplyT(func(v LookupSpotConnectorResult) []GetSpotConnectorPermanentToken { return v.PermanentTokens }).(GetSpotConnectorPermanentTokenArrayOutput)
}

// Unique identifier of the project.
func (o LookupSpotConnectorResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSpotConnectorResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o LookupSpotConnectorResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSpotConnectorResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSpotConnectorResultOutput{})
}
