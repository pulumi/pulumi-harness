// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// # Import gitOps project with account level agent
//
// ```sh
// $ pulumi import harness:platform/gitopsAppProject:GitopsAppProject example <agent_id>/<app_proj_name>
// ```
//
// # Import gitOps project with org level agent
//
// ```sh
// $ pulumi import harness:platform/gitopsAppProject:GitopsAppProject example <organization_id>/<agent_id>/<app_proj_name>
// ```
//
// # Import gitOps project with project level agent
//
// ```sh
// $ pulumi import harness:platform/gitopsAppProject:GitopsAppProject example <organization_id>/<project_id>/<agent_id>/<app_proj_name>
// ```
type GitopsAppProject struct {
	pulumi.CustomResourceState

	// Account identifier of the GitOps Agent where argo project will exist.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Agent identifier of the agent where argo project will exist (include scope prefix)
	AgentId pulumi.StringOutput `pulumi:"agentId"`
	// Org identifier of the GitOps Agent where argo project is to be created.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Project identifier of the Gitops Agent where argo project is to be created.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// GitOps project configuration.
	Projects GitopsAppProjectProjectArrayOutput `pulumi:"projects"`
	// Identifier for the GitOps Argo project.
	QueryName pulumi.StringOutput `pulumi:"queryName"`
	// Indicates if the argo project should be updated if existing and inserted if not.
	Upsert pulumi.BoolPtrOutput `pulumi:"upsert"`
}

// NewGitopsAppProject registers a new resource with the given unique name, arguments, and options.
func NewGitopsAppProject(ctx *pulumi.Context,
	name string, args *GitopsAppProjectArgs, opts ...pulumi.ResourceOption) (*GitopsAppProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AgentId == nil {
		return nil, errors.New("invalid value for required argument 'AgentId'")
	}
	if args.Projects == nil {
		return nil, errors.New("invalid value for required argument 'Projects'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GitopsAppProject
	err := ctx.RegisterResource("harness:platform/gitopsAppProject:GitopsAppProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitopsAppProject gets an existing GitopsAppProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitopsAppProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitopsAppProjectState, opts ...pulumi.ResourceOption) (*GitopsAppProject, error) {
	var resource GitopsAppProject
	err := ctx.ReadResource("harness:platform/gitopsAppProject:GitopsAppProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitopsAppProject resources.
type gitopsAppProjectState struct {
	// Account identifier of the GitOps Agent where argo project will exist.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId *string `pulumi:"accountId"`
	// Agent identifier of the agent where argo project will exist (include scope prefix)
	AgentId *string `pulumi:"agentId"`
	// Org identifier of the GitOps Agent where argo project is to be created.
	OrgId *string `pulumi:"orgId"`
	// Project identifier of the Gitops Agent where argo project is to be created.
	ProjectId *string `pulumi:"projectId"`
	// GitOps project configuration.
	Projects []GitopsAppProjectProject `pulumi:"projects"`
	// Identifier for the GitOps Argo project.
	QueryName *string `pulumi:"queryName"`
	// Indicates if the argo project should be updated if existing and inserted if not.
	Upsert *bool `pulumi:"upsert"`
}

type GitopsAppProjectState struct {
	// Account identifier of the GitOps Agent where argo project will exist.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId pulumi.StringPtrInput
	// Agent identifier of the agent where argo project will exist (include scope prefix)
	AgentId pulumi.StringPtrInput
	// Org identifier of the GitOps Agent where argo project is to be created.
	OrgId pulumi.StringPtrInput
	// Project identifier of the Gitops Agent where argo project is to be created.
	ProjectId pulumi.StringPtrInput
	// GitOps project configuration.
	Projects GitopsAppProjectProjectArrayInput
	// Identifier for the GitOps Argo project.
	QueryName pulumi.StringPtrInput
	// Indicates if the argo project should be updated if existing and inserted if not.
	Upsert pulumi.BoolPtrInput
}

func (GitopsAppProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitopsAppProjectState)(nil)).Elem()
}

type gitopsAppProjectArgs struct {
	// Account identifier of the GitOps Agent where argo project will exist.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId *string `pulumi:"accountId"`
	// Agent identifier of the agent where argo project will exist (include scope prefix)
	AgentId string `pulumi:"agentId"`
	// Org identifier of the GitOps Agent where argo project is to be created.
	OrgId *string `pulumi:"orgId"`
	// Project identifier of the Gitops Agent where argo project is to be created.
	ProjectId *string `pulumi:"projectId"`
	// GitOps project configuration.
	Projects []GitopsAppProjectProject `pulumi:"projects"`
	// Identifier for the GitOps Argo project.
	QueryName *string `pulumi:"queryName"`
	// Indicates if the argo project should be updated if existing and inserted if not.
	Upsert *bool `pulumi:"upsert"`
}

// The set of arguments for constructing a GitopsAppProject resource.
type GitopsAppProjectArgs struct {
	// Account identifier of the GitOps Agent where argo project will exist.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId pulumi.StringPtrInput
	// Agent identifier of the agent where argo project will exist (include scope prefix)
	AgentId pulumi.StringInput
	// Org identifier of the GitOps Agent where argo project is to be created.
	OrgId pulumi.StringPtrInput
	// Project identifier of the Gitops Agent where argo project is to be created.
	ProjectId pulumi.StringPtrInput
	// GitOps project configuration.
	Projects GitopsAppProjectProjectArrayInput
	// Identifier for the GitOps Argo project.
	QueryName pulumi.StringPtrInput
	// Indicates if the argo project should be updated if existing and inserted if not.
	Upsert pulumi.BoolPtrInput
}

func (GitopsAppProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitopsAppProjectArgs)(nil)).Elem()
}

type GitopsAppProjectInput interface {
	pulumi.Input

	ToGitopsAppProjectOutput() GitopsAppProjectOutput
	ToGitopsAppProjectOutputWithContext(ctx context.Context) GitopsAppProjectOutput
}

func (*GitopsAppProject) ElementType() reflect.Type {
	return reflect.TypeOf((**GitopsAppProject)(nil)).Elem()
}

func (i *GitopsAppProject) ToGitopsAppProjectOutput() GitopsAppProjectOutput {
	return i.ToGitopsAppProjectOutputWithContext(context.Background())
}

func (i *GitopsAppProject) ToGitopsAppProjectOutputWithContext(ctx context.Context) GitopsAppProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitopsAppProjectOutput)
}

// GitopsAppProjectArrayInput is an input type that accepts GitopsAppProjectArray and GitopsAppProjectArrayOutput values.
// You can construct a concrete instance of `GitopsAppProjectArrayInput` via:
//
//	GitopsAppProjectArray{ GitopsAppProjectArgs{...} }
type GitopsAppProjectArrayInput interface {
	pulumi.Input

	ToGitopsAppProjectArrayOutput() GitopsAppProjectArrayOutput
	ToGitopsAppProjectArrayOutputWithContext(context.Context) GitopsAppProjectArrayOutput
}

type GitopsAppProjectArray []GitopsAppProjectInput

func (GitopsAppProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitopsAppProject)(nil)).Elem()
}

func (i GitopsAppProjectArray) ToGitopsAppProjectArrayOutput() GitopsAppProjectArrayOutput {
	return i.ToGitopsAppProjectArrayOutputWithContext(context.Background())
}

func (i GitopsAppProjectArray) ToGitopsAppProjectArrayOutputWithContext(ctx context.Context) GitopsAppProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitopsAppProjectArrayOutput)
}

// GitopsAppProjectMapInput is an input type that accepts GitopsAppProjectMap and GitopsAppProjectMapOutput values.
// You can construct a concrete instance of `GitopsAppProjectMapInput` via:
//
//	GitopsAppProjectMap{ "key": GitopsAppProjectArgs{...} }
type GitopsAppProjectMapInput interface {
	pulumi.Input

	ToGitopsAppProjectMapOutput() GitopsAppProjectMapOutput
	ToGitopsAppProjectMapOutputWithContext(context.Context) GitopsAppProjectMapOutput
}

type GitopsAppProjectMap map[string]GitopsAppProjectInput

func (GitopsAppProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitopsAppProject)(nil)).Elem()
}

func (i GitopsAppProjectMap) ToGitopsAppProjectMapOutput() GitopsAppProjectMapOutput {
	return i.ToGitopsAppProjectMapOutputWithContext(context.Background())
}

func (i GitopsAppProjectMap) ToGitopsAppProjectMapOutputWithContext(ctx context.Context) GitopsAppProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitopsAppProjectMapOutput)
}

type GitopsAppProjectOutput struct{ *pulumi.OutputState }

func (GitopsAppProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitopsAppProject)(nil)).Elem()
}

func (o GitopsAppProjectOutput) ToGitopsAppProjectOutput() GitopsAppProjectOutput {
	return o
}

func (o GitopsAppProjectOutput) ToGitopsAppProjectOutputWithContext(ctx context.Context) GitopsAppProjectOutput {
	return o
}

// Account identifier of the GitOps Agent where argo project will exist.
//
// Deprecated: This field is deprecated and will be removed in a future release.
func (o GitopsAppProjectOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsAppProject) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Agent identifier of the agent where argo project will exist (include scope prefix)
func (o GitopsAppProjectOutput) AgentId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsAppProject) pulumi.StringOutput { return v.AgentId }).(pulumi.StringOutput)
}

// Org identifier of the GitOps Agent where argo project is to be created.
func (o GitopsAppProjectOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitopsAppProject) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Project identifier of the Gitops Agent where argo project is to be created.
func (o GitopsAppProjectOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitopsAppProject) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// GitOps project configuration.
func (o GitopsAppProjectOutput) Projects() GitopsAppProjectProjectArrayOutput {
	return o.ApplyT(func(v *GitopsAppProject) GitopsAppProjectProjectArrayOutput { return v.Projects }).(GitopsAppProjectProjectArrayOutput)
}

// Identifier for the GitOps Argo project.
func (o GitopsAppProjectOutput) QueryName() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsAppProject) pulumi.StringOutput { return v.QueryName }).(pulumi.StringOutput)
}

// Indicates if the argo project should be updated if existing and inserted if not.
func (o GitopsAppProjectOutput) Upsert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitopsAppProject) pulumi.BoolPtrOutput { return v.Upsert }).(pulumi.BoolPtrOutput)
}

type GitopsAppProjectArrayOutput struct{ *pulumi.OutputState }

func (GitopsAppProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitopsAppProject)(nil)).Elem()
}

func (o GitopsAppProjectArrayOutput) ToGitopsAppProjectArrayOutput() GitopsAppProjectArrayOutput {
	return o
}

func (o GitopsAppProjectArrayOutput) ToGitopsAppProjectArrayOutputWithContext(ctx context.Context) GitopsAppProjectArrayOutput {
	return o
}

func (o GitopsAppProjectArrayOutput) Index(i pulumi.IntInput) GitopsAppProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitopsAppProject {
		return vs[0].([]*GitopsAppProject)[vs[1].(int)]
	}).(GitopsAppProjectOutput)
}

type GitopsAppProjectMapOutput struct{ *pulumi.OutputState }

func (GitopsAppProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitopsAppProject)(nil)).Elem()
}

func (o GitopsAppProjectMapOutput) ToGitopsAppProjectMapOutput() GitopsAppProjectMapOutput {
	return o
}

func (o GitopsAppProjectMapOutput) ToGitopsAppProjectMapOutputWithContext(ctx context.Context) GitopsAppProjectMapOutput {
	return o
}

func (o GitopsAppProjectMapOutput) MapIndex(k pulumi.StringInput) GitopsAppProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitopsAppProject {
		return vs[0].(map[string]*GitopsAppProject)[vs[1].(string)]
	}).(GitopsAppProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitopsAppProjectInput)(nil)).Elem(), &GitopsAppProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitopsAppProjectArrayInput)(nil)).Elem(), GitopsAppProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitopsAppProjectMapInput)(nil)).Elem(), GitopsAppProjectMap{})
	pulumi.RegisterOutputType(GitopsAppProjectOutput{})
	pulumi.RegisterOutputType(GitopsAppProjectArrayOutput{})
	pulumi.RegisterOutputType(GitopsAppProjectMapOutput{})
}
