// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a GitOps Repository Certificate. It fetches all the certificates that are added to the provided agent.
//
// ## Example Usage
func GetGitopsRepoCert(ctx *pulumi.Context, args *GetGitopsRepoCertArgs, opts ...pulumi.InvokeOption) (*GetGitopsRepoCertResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetGitopsRepoCertResult
	err := ctx.Invoke("harness:platform/getGitopsRepoCert:getGitopsRepoCert", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGitopsRepoCert.
type GetGitopsRepoCertArgs struct {
	// Account identifier of the GitOps repository certificate.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId *string `pulumi:"accountId"`
	// Agent identifier of the GitOps repository certificate.
	AgentId string `pulumi:"agentId"`
	// Organization identifier of the GitOps repository certificate.
	OrgId *string `pulumi:"orgId"`
	// Project identifier of the GitOps repository certificate.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getGitopsRepoCert.
type GetGitopsRepoCertResult struct {
	// Account identifier of the GitOps repository certificate.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId string `pulumi:"accountId"`
	// Agent identifier of the GitOps repository certificate.
	AgentId string `pulumi:"agentId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Organization identifier of the GitOps repository certificate.
	OrgId *string `pulumi:"orgId"`
	// Project identifier of the GitOps repository certificate.
	ProjectId *string `pulumi:"projectId"`
}

func GetGitopsRepoCertOutput(ctx *pulumi.Context, args GetGitopsRepoCertOutputArgs, opts ...pulumi.InvokeOption) GetGitopsRepoCertResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetGitopsRepoCertResultOutput, error) {
			args := v.(GetGitopsRepoCertArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getGitopsRepoCert:getGitopsRepoCert", args, GetGitopsRepoCertResultOutput{}, options).(GetGitopsRepoCertResultOutput), nil
		}).(GetGitopsRepoCertResultOutput)
}

// A collection of arguments for invoking getGitopsRepoCert.
type GetGitopsRepoCertOutputArgs struct {
	// Account identifier of the GitOps repository certificate.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// Agent identifier of the GitOps repository certificate.
	AgentId pulumi.StringInput `pulumi:"agentId"`
	// Organization identifier of the GitOps repository certificate.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Project identifier of the GitOps repository certificate.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (GetGitopsRepoCertOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGitopsRepoCertArgs)(nil)).Elem()
}

// A collection of values returned by getGitopsRepoCert.
type GetGitopsRepoCertResultOutput struct{ *pulumi.OutputState }

func (GetGitopsRepoCertResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGitopsRepoCertResult)(nil)).Elem()
}

func (o GetGitopsRepoCertResultOutput) ToGetGitopsRepoCertResultOutput() GetGitopsRepoCertResultOutput {
	return o
}

func (o GetGitopsRepoCertResultOutput) ToGetGitopsRepoCertResultOutputWithContext(ctx context.Context) GetGitopsRepoCertResultOutput {
	return o
}

// Account identifier of the GitOps repository certificate.
//
// Deprecated: This field is deprecated and will be removed in a future release.
func (o GetGitopsRepoCertResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGitopsRepoCertResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Agent identifier of the GitOps repository certificate.
func (o GetGitopsRepoCertResultOutput) AgentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGitopsRepoCertResult) string { return v.AgentId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetGitopsRepoCertResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGitopsRepoCertResult) string { return v.Id }).(pulumi.StringOutput)
}

// Organization identifier of the GitOps repository certificate.
func (o GetGitopsRepoCertResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGitopsRepoCertResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Project identifier of the GitOps repository certificate.
func (o GetGitopsRepoCertResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGitopsRepoCertResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGitopsRepoCertResultOutput{})
}
