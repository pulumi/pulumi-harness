// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Harness Resource Group
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewResourceGroup(ctx, "test", &platform.ResourceGroupArgs{
//				Identifier:  pulumi.String("identifier"),
//				Name:        pulumi.String("name"),
//				Description: pulumi.String("test"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//				AccountId: pulumi.String("account_id"),
//				AllowedScopeLevels: pulumi.StringArray{
//					pulumi.String("account"),
//				},
//				IncludedScopes: platform.ResourceGroupIncludedScopeArray{
//					&platform.ResourceGroupIncludedScopeArgs{
//						Filter:    pulumi.String("EXCLUDING_CHILD_SCOPES"),
//						AccountId: pulumi.String("account_id"),
//					},
//				},
//				ResourceFilters: platform.ResourceGroupResourceFilterArray{
//					&platform.ResourceGroupResourceFilterArgs{
//						IncludeAllResources: pulumi.Bool(false),
//						Resources: platform.ResourceGroupResourceFilterResourceArray{
//							&platform.ResourceGroupResourceFilterResourceArgs{
//								ResourceType: pulumi.String("CONNECTOR"),
//								AttributeFilters: platform.ResourceGroupResourceFilterResourceAttributeFilterArray{
//									&platform.ResourceGroupResourceFilterResourceAttributeFilterArgs{
//										AttributeName: pulumi.String("category"),
//										AttributeValues: pulumi.StringArray{
//											pulumi.String("CLOUD_COST"),
//										},
//									},
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import account level resource group
//
// ```sh
// $ pulumi import harness:platform/resourceGroup:ResourceGroup example <resource_group_id>
// ```
//
// # Import org level resource group
//
// ```sh
// $ pulumi import harness:platform/resourceGroup:ResourceGroup example <ord_id>/<resource_group_id>
// ```
//
// # Import project level resource group
//
// ```sh
// $ pulumi import harness:platform/resourceGroup:ResourceGroup example <org_id>/<project_id>/<resource_group_id>
// ```
type ResourceGroup struct {
	pulumi.CustomResourceState

	// Account Identifier of the account
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The scope levels at which this resource group can be used
	AllowedScopeLevels pulumi.StringArrayOutput `pulumi:"allowedScopeLevels"`
	// Color of the environment.
	Color pulumi.StringOutput `pulumi:"color"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Included scopes; default selected based on resource group scope if not specified.
	IncludedScopes ResourceGroupIncludedScopeArrayOutput `pulumi:"includedScopes"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Contains resource filter for a resource group
	ResourceFilters ResourceGroupResourceFilterArrayOutput `pulumi:"resourceFilters"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewResourceGroup registers a new resource with the given unique name, arguments, and options.
func NewResourceGroup(ctx *pulumi.Context,
	name string, args *ResourceGroupArgs, opts ...pulumi.ResourceOption) (*ResourceGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceGroup
	err := ctx.RegisterResource("harness:platform/resourceGroup:ResourceGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceGroup gets an existing ResourceGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceGroupState, opts ...pulumi.ResourceOption) (*ResourceGroup, error) {
	var resource ResourceGroup
	err := ctx.ReadResource("harness:platform/resourceGroup:ResourceGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceGroup resources.
type resourceGroupState struct {
	// Account Identifier of the account
	AccountId *string `pulumi:"accountId"`
	// The scope levels at which this resource group can be used
	AllowedScopeLevels []string `pulumi:"allowedScopeLevels"`
	// Color of the environment.
	Color *string `pulumi:"color"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Included scopes; default selected based on resource group scope if not specified.
	IncludedScopes []ResourceGroupIncludedScope `pulumi:"includedScopes"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Contains resource filter for a resource group
	ResourceFilters []ResourceGroupResourceFilter `pulumi:"resourceFilters"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

type ResourceGroupState struct {
	// Account Identifier of the account
	AccountId pulumi.StringPtrInput
	// The scope levels at which this resource group can be used
	AllowedScopeLevels pulumi.StringArrayInput
	// Color of the environment.
	Color pulumi.StringPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Included scopes; default selected based on resource group scope if not specified.
	IncludedScopes ResourceGroupIncludedScopeArrayInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Contains resource filter for a resource group
	ResourceFilters ResourceGroupResourceFilterArrayInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (ResourceGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceGroupState)(nil)).Elem()
}

type resourceGroupArgs struct {
	// Account Identifier of the account
	AccountId string `pulumi:"accountId"`
	// The scope levels at which this resource group can be used
	AllowedScopeLevels []string `pulumi:"allowedScopeLevels"`
	// Color of the environment.
	Color *string `pulumi:"color"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Included scopes; default selected based on resource group scope if not specified.
	IncludedScopes []ResourceGroupIncludedScope `pulumi:"includedScopes"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Contains resource filter for a resource group
	ResourceFilters []ResourceGroupResourceFilter `pulumi:"resourceFilters"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a ResourceGroup resource.
type ResourceGroupArgs struct {
	// Account Identifier of the account
	AccountId pulumi.StringInput
	// The scope levels at which this resource group can be used
	AllowedScopeLevels pulumi.StringArrayInput
	// Color of the environment.
	Color pulumi.StringPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Included scopes; default selected based on resource group scope if not specified.
	IncludedScopes ResourceGroupIncludedScopeArrayInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Contains resource filter for a resource group
	ResourceFilters ResourceGroupResourceFilterArrayInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (ResourceGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceGroupArgs)(nil)).Elem()
}

type ResourceGroupInput interface {
	pulumi.Input

	ToResourceGroupOutput() ResourceGroupOutput
	ToResourceGroupOutputWithContext(ctx context.Context) ResourceGroupOutput
}

func (*ResourceGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGroup)(nil)).Elem()
}

func (i *ResourceGroup) ToResourceGroupOutput() ResourceGroupOutput {
	return i.ToResourceGroupOutputWithContext(context.Background())
}

func (i *ResourceGroup) ToResourceGroupOutputWithContext(ctx context.Context) ResourceGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGroupOutput)
}

// ResourceGroupArrayInput is an input type that accepts ResourceGroupArray and ResourceGroupArrayOutput values.
// You can construct a concrete instance of `ResourceGroupArrayInput` via:
//
//	ResourceGroupArray{ ResourceGroupArgs{...} }
type ResourceGroupArrayInput interface {
	pulumi.Input

	ToResourceGroupArrayOutput() ResourceGroupArrayOutput
	ToResourceGroupArrayOutputWithContext(context.Context) ResourceGroupArrayOutput
}

type ResourceGroupArray []ResourceGroupInput

func (ResourceGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceGroup)(nil)).Elem()
}

func (i ResourceGroupArray) ToResourceGroupArrayOutput() ResourceGroupArrayOutput {
	return i.ToResourceGroupArrayOutputWithContext(context.Background())
}

func (i ResourceGroupArray) ToResourceGroupArrayOutputWithContext(ctx context.Context) ResourceGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGroupArrayOutput)
}

// ResourceGroupMapInput is an input type that accepts ResourceGroupMap and ResourceGroupMapOutput values.
// You can construct a concrete instance of `ResourceGroupMapInput` via:
//
//	ResourceGroupMap{ "key": ResourceGroupArgs{...} }
type ResourceGroupMapInput interface {
	pulumi.Input

	ToResourceGroupMapOutput() ResourceGroupMapOutput
	ToResourceGroupMapOutputWithContext(context.Context) ResourceGroupMapOutput
}

type ResourceGroupMap map[string]ResourceGroupInput

func (ResourceGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceGroup)(nil)).Elem()
}

func (i ResourceGroupMap) ToResourceGroupMapOutput() ResourceGroupMapOutput {
	return i.ToResourceGroupMapOutputWithContext(context.Background())
}

func (i ResourceGroupMap) ToResourceGroupMapOutputWithContext(ctx context.Context) ResourceGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGroupMapOutput)
}

type ResourceGroupOutput struct{ *pulumi.OutputState }

func (ResourceGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGroup)(nil)).Elem()
}

func (o ResourceGroupOutput) ToResourceGroupOutput() ResourceGroupOutput {
	return o
}

func (o ResourceGroupOutput) ToResourceGroupOutputWithContext(ctx context.Context) ResourceGroupOutput {
	return o
}

// Account Identifier of the account
func (o ResourceGroupOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGroup) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The scope levels at which this resource group can be used
func (o ResourceGroupOutput) AllowedScopeLevels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceGroup) pulumi.StringArrayOutput { return v.AllowedScopeLevels }).(pulumi.StringArrayOutput)
}

// Color of the environment.
func (o ResourceGroupOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGroup) pulumi.StringOutput { return v.Color }).(pulumi.StringOutput)
}

// Description of the resource.
func (o ResourceGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o ResourceGroupOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGroup) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Included scopes; default selected based on resource group scope if not specified.
func (o ResourceGroupOutput) IncludedScopes() ResourceGroupIncludedScopeArrayOutput {
	return o.ApplyT(func(v *ResourceGroup) ResourceGroupIncludedScopeArrayOutput { return v.IncludedScopes }).(ResourceGroupIncludedScopeArrayOutput)
}

// Name of the resource.
func (o ResourceGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o ResourceGroupOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGroup) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o ResourceGroupOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGroup) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Contains resource filter for a resource group
func (o ResourceGroupOutput) ResourceFilters() ResourceGroupResourceFilterArrayOutput {
	return o.ApplyT(func(v *ResourceGroup) ResourceGroupResourceFilterArrayOutput { return v.ResourceFilters }).(ResourceGroupResourceFilterArrayOutput)
}

// Tags to associate with the resource.
func (o ResourceGroupOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceGroup) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type ResourceGroupArrayOutput struct{ *pulumi.OutputState }

func (ResourceGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceGroup)(nil)).Elem()
}

func (o ResourceGroupArrayOutput) ToResourceGroupArrayOutput() ResourceGroupArrayOutput {
	return o
}

func (o ResourceGroupArrayOutput) ToResourceGroupArrayOutputWithContext(ctx context.Context) ResourceGroupArrayOutput {
	return o
}

func (o ResourceGroupArrayOutput) Index(i pulumi.IntInput) ResourceGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceGroup {
		return vs[0].([]*ResourceGroup)[vs[1].(int)]
	}).(ResourceGroupOutput)
}

type ResourceGroupMapOutput struct{ *pulumi.OutputState }

func (ResourceGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceGroup)(nil)).Elem()
}

func (o ResourceGroupMapOutput) ToResourceGroupMapOutput() ResourceGroupMapOutput {
	return o
}

func (o ResourceGroupMapOutput) ToResourceGroupMapOutputWithContext(ctx context.Context) ResourceGroupMapOutput {
	return o
}

func (o ResourceGroupMapOutput) MapIndex(k pulumi.StringInput) ResourceGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceGroup {
		return vs[0].(map[string]*ResourceGroup)[vs[1].(string)]
	}).(ResourceGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGroupInput)(nil)).Elem(), &ResourceGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGroupArrayInput)(nil)).Elem(), ResourceGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGroupMapInput)(nil)).Elem(), ResourceGroupMap{})
	pulumi.RegisterOutputType(ResourceGroupOutput{})
	pulumi.RegisterOutputType(ResourceGroupArrayOutput{})
	pulumi.RegisterOutputType(ResourceGroupMapOutput{})
}
