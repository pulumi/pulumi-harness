// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Custom Health source connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Authentication mechanism as username and password
//			_, err := platform.NewConnectorCustomhealthsource(ctx, "test", &platform.ConnectorCustomhealthsourceArgs{
//				Identifier:  pulumi.String("identifier"),
//				Name:        pulumi.String("name"),
//				Description: pulumi.String("test"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//				Url: pulumi.String("https://prometheus.com/"),
//				DelegateSelectors: pulumi.StringArray{
//					pulumi.String("harness-delegate"),
//				},
//				Method:         pulumi.String("GET"),
//				ValidationPath: pulumi.String("loki/api/v1/labels"),
//				Headers: platform.ConnectorCustomhealthsourceHeaderArray{
//					&platform.ConnectorCustomhealthsourceHeaderArgs{
//						EncryptedValueRef: pulumi.String("account.doNotDeleteHSM"),
//						ValueEncrypted:    pulumi.Bool(true),
//						Key:               pulumi.String("key"),
//						Value:             pulumi.String("value"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import account level elasticsearch connector
//
// ```sh
// $ pulumi import harness:platform/connectorCustomhealthsource:ConnectorCustomhealthsource example <connector_id>
// ```
//
// # Import org level elasticsearch connector
//
// ```sh
// $ pulumi import harness:platform/connectorCustomhealthsource:ConnectorCustomhealthsource example <ord_id>/<connector_id>
// ```
//
// # Import project level elasticsearch connector
//
// ```sh
// $ pulumi import harness:platform/connectorCustomhealthsource:ConnectorCustomhealthsource example <org_id>/<project_id>/<connector_id>
// ```
type ConnectorCustomhealthsource struct {
	pulumi.CustomResourceState

	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Headers.
	Headers ConnectorCustomhealthsourceHeaderArrayOutput `pulumi:"headers"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// HTTP Verb Method for the API Call
	Method pulumi.StringOutput `pulumi:"method"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Parameters
	Params ConnectorCustomhealthsourceParamArrayOutput `pulumi:"params"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// URL of the Custom Healthsource controller.
	Url pulumi.StringOutput `pulumi:"url"`
	// Body to be sent with the API Call
	ValidationBody pulumi.StringPtrOutput `pulumi:"validationBody"`
	// Path to be added to the base URL for the API Call
	ValidationPath pulumi.StringPtrOutput `pulumi:"validationPath"`
}

// NewConnectorCustomhealthsource registers a new resource with the given unique name, arguments, and options.
func NewConnectorCustomhealthsource(ctx *pulumi.Context,
	name string, args *ConnectorCustomhealthsourceArgs, opts ...pulumi.ResourceOption) (*ConnectorCustomhealthsource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Method == nil {
		return nil, errors.New("invalid value for required argument 'Method'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectorCustomhealthsource
	err := ctx.RegisterResource("harness:platform/connectorCustomhealthsource:ConnectorCustomhealthsource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectorCustomhealthsource gets an existing ConnectorCustomhealthsource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectorCustomhealthsource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorCustomhealthsourceState, opts ...pulumi.ResourceOption) (*ConnectorCustomhealthsource, error) {
	var resource ConnectorCustomhealthsource
	err := ctx.ReadResource("harness:platform/connectorCustomhealthsource:ConnectorCustomhealthsource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectorCustomhealthsource resources.
type connectorCustomhealthsourceState struct {
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Headers.
	Headers []ConnectorCustomhealthsourceHeader `pulumi:"headers"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// HTTP Verb Method for the API Call
	Method *string `pulumi:"method"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Parameters
	Params []ConnectorCustomhealthsourceParam `pulumi:"params"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// URL of the Custom Healthsource controller.
	Url *string `pulumi:"url"`
	// Body to be sent with the API Call
	ValidationBody *string `pulumi:"validationBody"`
	// Path to be added to the base URL for the API Call
	ValidationPath *string `pulumi:"validationPath"`
}

type ConnectorCustomhealthsourceState struct {
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Headers.
	Headers ConnectorCustomhealthsourceHeaderArrayInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// HTTP Verb Method for the API Call
	Method pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Parameters
	Params ConnectorCustomhealthsourceParamArrayInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// URL of the Custom Healthsource controller.
	Url pulumi.StringPtrInput
	// Body to be sent with the API Call
	ValidationBody pulumi.StringPtrInput
	// Path to be added to the base URL for the API Call
	ValidationPath pulumi.StringPtrInput
}

func (ConnectorCustomhealthsourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorCustomhealthsourceState)(nil)).Elem()
}

type connectorCustomhealthsourceArgs struct {
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Headers.
	Headers []ConnectorCustomhealthsourceHeader `pulumi:"headers"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// HTTP Verb Method for the API Call
	Method string `pulumi:"method"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Parameters
	Params []ConnectorCustomhealthsourceParam `pulumi:"params"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// URL of the Custom Healthsource controller.
	Url string `pulumi:"url"`
	// Body to be sent with the API Call
	ValidationBody *string `pulumi:"validationBody"`
	// Path to be added to the base URL for the API Call
	ValidationPath *string `pulumi:"validationPath"`
}

// The set of arguments for constructing a ConnectorCustomhealthsource resource.
type ConnectorCustomhealthsourceArgs struct {
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Headers.
	Headers ConnectorCustomhealthsourceHeaderArrayInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// HTTP Verb Method for the API Call
	Method pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Parameters
	Params ConnectorCustomhealthsourceParamArrayInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// URL of the Custom Healthsource controller.
	Url pulumi.StringInput
	// Body to be sent with the API Call
	ValidationBody pulumi.StringPtrInput
	// Path to be added to the base URL for the API Call
	ValidationPath pulumi.StringPtrInput
}

func (ConnectorCustomhealthsourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorCustomhealthsourceArgs)(nil)).Elem()
}

type ConnectorCustomhealthsourceInput interface {
	pulumi.Input

	ToConnectorCustomhealthsourceOutput() ConnectorCustomhealthsourceOutput
	ToConnectorCustomhealthsourceOutputWithContext(ctx context.Context) ConnectorCustomhealthsourceOutput
}

func (*ConnectorCustomhealthsource) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorCustomhealthsource)(nil)).Elem()
}

func (i *ConnectorCustomhealthsource) ToConnectorCustomhealthsourceOutput() ConnectorCustomhealthsourceOutput {
	return i.ToConnectorCustomhealthsourceOutputWithContext(context.Background())
}

func (i *ConnectorCustomhealthsource) ToConnectorCustomhealthsourceOutputWithContext(ctx context.Context) ConnectorCustomhealthsourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorCustomhealthsourceOutput)
}

// ConnectorCustomhealthsourceArrayInput is an input type that accepts ConnectorCustomhealthsourceArray and ConnectorCustomhealthsourceArrayOutput values.
// You can construct a concrete instance of `ConnectorCustomhealthsourceArrayInput` via:
//
//	ConnectorCustomhealthsourceArray{ ConnectorCustomhealthsourceArgs{...} }
type ConnectorCustomhealthsourceArrayInput interface {
	pulumi.Input

	ToConnectorCustomhealthsourceArrayOutput() ConnectorCustomhealthsourceArrayOutput
	ToConnectorCustomhealthsourceArrayOutputWithContext(context.Context) ConnectorCustomhealthsourceArrayOutput
}

type ConnectorCustomhealthsourceArray []ConnectorCustomhealthsourceInput

func (ConnectorCustomhealthsourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorCustomhealthsource)(nil)).Elem()
}

func (i ConnectorCustomhealthsourceArray) ToConnectorCustomhealthsourceArrayOutput() ConnectorCustomhealthsourceArrayOutput {
	return i.ToConnectorCustomhealthsourceArrayOutputWithContext(context.Background())
}

func (i ConnectorCustomhealthsourceArray) ToConnectorCustomhealthsourceArrayOutputWithContext(ctx context.Context) ConnectorCustomhealthsourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorCustomhealthsourceArrayOutput)
}

// ConnectorCustomhealthsourceMapInput is an input type that accepts ConnectorCustomhealthsourceMap and ConnectorCustomhealthsourceMapOutput values.
// You can construct a concrete instance of `ConnectorCustomhealthsourceMapInput` via:
//
//	ConnectorCustomhealthsourceMap{ "key": ConnectorCustomhealthsourceArgs{...} }
type ConnectorCustomhealthsourceMapInput interface {
	pulumi.Input

	ToConnectorCustomhealthsourceMapOutput() ConnectorCustomhealthsourceMapOutput
	ToConnectorCustomhealthsourceMapOutputWithContext(context.Context) ConnectorCustomhealthsourceMapOutput
}

type ConnectorCustomhealthsourceMap map[string]ConnectorCustomhealthsourceInput

func (ConnectorCustomhealthsourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorCustomhealthsource)(nil)).Elem()
}

func (i ConnectorCustomhealthsourceMap) ToConnectorCustomhealthsourceMapOutput() ConnectorCustomhealthsourceMapOutput {
	return i.ToConnectorCustomhealthsourceMapOutputWithContext(context.Background())
}

func (i ConnectorCustomhealthsourceMap) ToConnectorCustomhealthsourceMapOutputWithContext(ctx context.Context) ConnectorCustomhealthsourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorCustomhealthsourceMapOutput)
}

type ConnectorCustomhealthsourceOutput struct{ *pulumi.OutputState }

func (ConnectorCustomhealthsourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorCustomhealthsource)(nil)).Elem()
}

func (o ConnectorCustomhealthsourceOutput) ToConnectorCustomhealthsourceOutput() ConnectorCustomhealthsourceOutput {
	return o
}

func (o ConnectorCustomhealthsourceOutput) ToConnectorCustomhealthsourceOutputWithContext(ctx context.Context) ConnectorCustomhealthsourceOutput {
	return o
}

// Tags to filter delegates for connection.
func (o ConnectorCustomhealthsourceOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorCustomhealthsource) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o ConnectorCustomhealthsourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorCustomhealthsource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Headers.
func (o ConnectorCustomhealthsourceOutput) Headers() ConnectorCustomhealthsourceHeaderArrayOutput {
	return o.ApplyT(func(v *ConnectorCustomhealthsource) ConnectorCustomhealthsourceHeaderArrayOutput { return v.Headers }).(ConnectorCustomhealthsourceHeaderArrayOutput)
}

// Unique identifier of the resource.
func (o ConnectorCustomhealthsourceOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorCustomhealthsource) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// HTTP Verb Method for the API Call
func (o ConnectorCustomhealthsourceOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorCustomhealthsource) pulumi.StringOutput { return v.Method }).(pulumi.StringOutput)
}

// Name of the resource.
func (o ConnectorCustomhealthsourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorCustomhealthsource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o ConnectorCustomhealthsourceOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorCustomhealthsource) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Parameters
func (o ConnectorCustomhealthsourceOutput) Params() ConnectorCustomhealthsourceParamArrayOutput {
	return o.ApplyT(func(v *ConnectorCustomhealthsource) ConnectorCustomhealthsourceParamArrayOutput { return v.Params }).(ConnectorCustomhealthsourceParamArrayOutput)
}

// Unique identifier of the project.
func (o ConnectorCustomhealthsourceOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorCustomhealthsource) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o ConnectorCustomhealthsourceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorCustomhealthsource) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// URL of the Custom Healthsource controller.
func (o ConnectorCustomhealthsourceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorCustomhealthsource) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Body to be sent with the API Call
func (o ConnectorCustomhealthsourceOutput) ValidationBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorCustomhealthsource) pulumi.StringPtrOutput { return v.ValidationBody }).(pulumi.StringPtrOutput)
}

// Path to be added to the base URL for the API Call
func (o ConnectorCustomhealthsourceOutput) ValidationPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorCustomhealthsource) pulumi.StringPtrOutput { return v.ValidationPath }).(pulumi.StringPtrOutput)
}

type ConnectorCustomhealthsourceArrayOutput struct{ *pulumi.OutputState }

func (ConnectorCustomhealthsourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorCustomhealthsource)(nil)).Elem()
}

func (o ConnectorCustomhealthsourceArrayOutput) ToConnectorCustomhealthsourceArrayOutput() ConnectorCustomhealthsourceArrayOutput {
	return o
}

func (o ConnectorCustomhealthsourceArrayOutput) ToConnectorCustomhealthsourceArrayOutputWithContext(ctx context.Context) ConnectorCustomhealthsourceArrayOutput {
	return o
}

func (o ConnectorCustomhealthsourceArrayOutput) Index(i pulumi.IntInput) ConnectorCustomhealthsourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectorCustomhealthsource {
		return vs[0].([]*ConnectorCustomhealthsource)[vs[1].(int)]
	}).(ConnectorCustomhealthsourceOutput)
}

type ConnectorCustomhealthsourceMapOutput struct{ *pulumi.OutputState }

func (ConnectorCustomhealthsourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorCustomhealthsource)(nil)).Elem()
}

func (o ConnectorCustomhealthsourceMapOutput) ToConnectorCustomhealthsourceMapOutput() ConnectorCustomhealthsourceMapOutput {
	return o
}

func (o ConnectorCustomhealthsourceMapOutput) ToConnectorCustomhealthsourceMapOutputWithContext(ctx context.Context) ConnectorCustomhealthsourceMapOutput {
	return o
}

func (o ConnectorCustomhealthsourceMapOutput) MapIndex(k pulumi.StringInput) ConnectorCustomhealthsourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectorCustomhealthsource {
		return vs[0].(map[string]*ConnectorCustomhealthsource)[vs[1].(string)]
	}).(ConnectorCustomhealthsourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorCustomhealthsourceInput)(nil)).Elem(), &ConnectorCustomhealthsource{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorCustomhealthsourceArrayInput)(nil)).Elem(), ConnectorCustomhealthsourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorCustomhealthsourceMapInput)(nil)).Elem(), ConnectorCustomhealthsourceMap{})
	pulumi.RegisterOutputType(ConnectorCustomhealthsourceOutput{})
	pulumi.RegisterOutputType(ConnectorCustomhealthsourceArrayOutput{})
	pulumi.RegisterOutputType(ConnectorCustomhealthsourceMapOutput{})
}
