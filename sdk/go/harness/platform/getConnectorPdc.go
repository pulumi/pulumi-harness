// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Datasource for looking up a Pdc connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupConnectorPdc(ctx, &platform.LookupConnectorPdcArgs{
//				Identifier: "identifier",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupConnectorPdc(ctx *pulumi.Context, args *LookupConnectorPdcArgs, opts ...pulumi.InvokeOption) (*LookupConnectorPdcResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConnectorPdcResult
	err := ctx.Invoke("harness:platform/getConnectorPdc:getConnectorPdc", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnectorPdc.
type LookupConnectorPdcArgs struct {
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getConnectorPdc.
type LookupConnectorPdcResult struct {
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description string `pulumi:"description"`
	// Host of the Physical data centers.
	Hosts []GetConnectorPdcHost `pulumi:"hosts"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

func LookupConnectorPdcOutput(ctx *pulumi.Context, args LookupConnectorPdcOutputArgs, opts ...pulumi.InvokeOption) LookupConnectorPdcResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupConnectorPdcResultOutput, error) {
			args := v.(LookupConnectorPdcArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getConnectorPdc:getConnectorPdc", args, LookupConnectorPdcResultOutput{}, options).(LookupConnectorPdcResultOutput), nil
		}).(LookupConnectorPdcResultOutput)
}

// A collection of arguments for invoking getConnectorPdc.
type LookupConnectorPdcOutputArgs struct {
	// Unique identifier of the resource.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupConnectorPdcOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectorPdcArgs)(nil)).Elem()
}

// A collection of values returned by getConnectorPdc.
type LookupConnectorPdcResultOutput struct{ *pulumi.OutputState }

func (LookupConnectorPdcResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectorPdcResult)(nil)).Elem()
}

func (o LookupConnectorPdcResultOutput) ToLookupConnectorPdcResultOutput() LookupConnectorPdcResultOutput {
	return o
}

func (o LookupConnectorPdcResultOutput) ToLookupConnectorPdcResultOutputWithContext(ctx context.Context) LookupConnectorPdcResultOutput {
	return o
}

// Tags to filter delegates for connection.
func (o LookupConnectorPdcResultOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupConnectorPdcResult) []string { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o LookupConnectorPdcResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorPdcResult) string { return v.Description }).(pulumi.StringOutput)
}

// Host of the Physical data centers.
func (o LookupConnectorPdcResultOutput) Hosts() GetConnectorPdcHostArrayOutput {
	return o.ApplyT(func(v LookupConnectorPdcResult) []GetConnectorPdcHost { return v.Hosts }).(GetConnectorPdcHostArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupConnectorPdcResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorPdcResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupConnectorPdcResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorPdcResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o LookupConnectorPdcResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConnectorPdcResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the organization.
func (o LookupConnectorPdcResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConnectorPdcResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o LookupConnectorPdcResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConnectorPdcResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o LookupConnectorPdcResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupConnectorPdcResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConnectorPdcResultOutput{})
}
