// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating an AWS Cloud Cost connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewAwsCCConnector(ctx, "test", &platform.AwsCCConnectorArgs{
//				Identifier:  pulumi.String("identifier"),
//				Name:        pulumi.String("name"),
//				Description: pulumi.String("test"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//				AccountId:  pulumi.String("account_id"),
//				ReportName: pulumi.String("report_name"),
//				S3Bucket:   pulumi.String("s3bucket"),
//				FeaturesEnableds: pulumi.StringArray{
//					pulumi.String("OPTIMIZATION"),
//					pulumi.String("VISIBILITY"),
//					pulumi.String("BILLING"),
//				},
//				CrossAccountAccess: &platform.AwsCCConnectorCrossAccountAccessArgs{
//					RoleArn:    pulumi.String("role_arn"),
//					ExternalId: pulumi.String("external_id"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import account level aws cloud cost connector
//
// ```sh
// $ pulumi import harness:platform/awsCCConnector:AwsCCConnector example <connector_id>
// ```
//
// # Import org level aws cloud cost connector
//
// ```sh
// $ pulumi import harness:platform/awsCCConnector:AwsCCConnector example <ord_id>/<connector_id>
// ```
//
// # Import project level aws cloud cost connector
//
// ```sh
// $ pulumi import harness:platform/awsCCConnector:AwsCCConnector example <org_id>/<project_id>/<connector_id>
// ```
type AwsCCConnector struct {
	pulumi.CustomResourceState

	// The AWS account id.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Harness uses the secure cross-account role to access your AWS account. The role includes a restricted policy to access the cost and usage reports and resources for the sole purpose of cost analysis and cost optimization.
	CrossAccountAccess AwsCCConnectorCrossAccountAccessOutput `pulumi:"crossAccountAccess"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The features enabled for the connector. Valid values are BILLING, OPTIMIZATION, VISIBILITY, GOVERNANCE.
	FeaturesEnableds pulumi.StringArrayOutput `pulumi:"featuresEnableds"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// The cost and usage report name. Provided in the delivery options when the template is opened in the AWS console.
	ReportName pulumi.StringPtrOutput `pulumi:"reportName"`
	// The name of s3 bucket.
	S3Bucket pulumi.StringPtrOutput `pulumi:"s3Bucket"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewAwsCCConnector registers a new resource with the given unique name, arguments, and options.
func NewAwsCCConnector(ctx *pulumi.Context,
	name string, args *AwsCCConnectorArgs, opts ...pulumi.ResourceOption) (*AwsCCConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.CrossAccountAccess == nil {
		return nil, errors.New("invalid value for required argument 'CrossAccountAccess'")
	}
	if args.FeaturesEnableds == nil {
		return nil, errors.New("invalid value for required argument 'FeaturesEnableds'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsCCConnector
	err := ctx.RegisterResource("harness:platform/awsCCConnector:AwsCCConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsCCConnector gets an existing AwsCCConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsCCConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsCCConnectorState, opts ...pulumi.ResourceOption) (*AwsCCConnector, error) {
	var resource AwsCCConnector
	err := ctx.ReadResource("harness:platform/awsCCConnector:AwsCCConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsCCConnector resources.
type awsCCConnectorState struct {
	// The AWS account id.
	AccountId *string `pulumi:"accountId"`
	// Harness uses the secure cross-account role to access your AWS account. The role includes a restricted policy to access the cost and usage reports and resources for the sole purpose of cost analysis and cost optimization.
	CrossAccountAccess *AwsCCConnectorCrossAccountAccess `pulumi:"crossAccountAccess"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// The features enabled for the connector. Valid values are BILLING, OPTIMIZATION, VISIBILITY, GOVERNANCE.
	FeaturesEnableds []string `pulumi:"featuresEnableds"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// The cost and usage report name. Provided in the delivery options when the template is opened in the AWS console.
	ReportName *string `pulumi:"reportName"`
	// The name of s3 bucket.
	S3Bucket *string `pulumi:"s3Bucket"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

type AwsCCConnectorState struct {
	// The AWS account id.
	AccountId pulumi.StringPtrInput
	// Harness uses the secure cross-account role to access your AWS account. The role includes a restricted policy to access the cost and usage reports and resources for the sole purpose of cost analysis and cost optimization.
	CrossAccountAccess AwsCCConnectorCrossAccountAccessPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// The features enabled for the connector. Valid values are BILLING, OPTIMIZATION, VISIBILITY, GOVERNANCE.
	FeaturesEnableds pulumi.StringArrayInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// The cost and usage report name. Provided in the delivery options when the template is opened in the AWS console.
	ReportName pulumi.StringPtrInput
	// The name of s3 bucket.
	S3Bucket pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (AwsCCConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsCCConnectorState)(nil)).Elem()
}

type awsCCConnectorArgs struct {
	// The AWS account id.
	AccountId string `pulumi:"accountId"`
	// Harness uses the secure cross-account role to access your AWS account. The role includes a restricted policy to access the cost and usage reports and resources for the sole purpose of cost analysis and cost optimization.
	CrossAccountAccess AwsCCConnectorCrossAccountAccess `pulumi:"crossAccountAccess"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// The features enabled for the connector. Valid values are BILLING, OPTIMIZATION, VISIBILITY, GOVERNANCE.
	FeaturesEnableds []string `pulumi:"featuresEnableds"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// The cost and usage report name. Provided in the delivery options when the template is opened in the AWS console.
	ReportName *string `pulumi:"reportName"`
	// The name of s3 bucket.
	S3Bucket *string `pulumi:"s3Bucket"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a AwsCCConnector resource.
type AwsCCConnectorArgs struct {
	// The AWS account id.
	AccountId pulumi.StringInput
	// Harness uses the secure cross-account role to access your AWS account. The role includes a restricted policy to access the cost and usage reports and resources for the sole purpose of cost analysis and cost optimization.
	CrossAccountAccess AwsCCConnectorCrossAccountAccessInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// The features enabled for the connector. Valid values are BILLING, OPTIMIZATION, VISIBILITY, GOVERNANCE.
	FeaturesEnableds pulumi.StringArrayInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// The cost and usage report name. Provided in the delivery options when the template is opened in the AWS console.
	ReportName pulumi.StringPtrInput
	// The name of s3 bucket.
	S3Bucket pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (AwsCCConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsCCConnectorArgs)(nil)).Elem()
}

type AwsCCConnectorInput interface {
	pulumi.Input

	ToAwsCCConnectorOutput() AwsCCConnectorOutput
	ToAwsCCConnectorOutputWithContext(ctx context.Context) AwsCCConnectorOutput
}

func (*AwsCCConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsCCConnector)(nil)).Elem()
}

func (i *AwsCCConnector) ToAwsCCConnectorOutput() AwsCCConnectorOutput {
	return i.ToAwsCCConnectorOutputWithContext(context.Background())
}

func (i *AwsCCConnector) ToAwsCCConnectorOutputWithContext(ctx context.Context) AwsCCConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsCCConnectorOutput)
}

// AwsCCConnectorArrayInput is an input type that accepts AwsCCConnectorArray and AwsCCConnectorArrayOutput values.
// You can construct a concrete instance of `AwsCCConnectorArrayInput` via:
//
//	AwsCCConnectorArray{ AwsCCConnectorArgs{...} }
type AwsCCConnectorArrayInput interface {
	pulumi.Input

	ToAwsCCConnectorArrayOutput() AwsCCConnectorArrayOutput
	ToAwsCCConnectorArrayOutputWithContext(context.Context) AwsCCConnectorArrayOutput
}

type AwsCCConnectorArray []AwsCCConnectorInput

func (AwsCCConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsCCConnector)(nil)).Elem()
}

func (i AwsCCConnectorArray) ToAwsCCConnectorArrayOutput() AwsCCConnectorArrayOutput {
	return i.ToAwsCCConnectorArrayOutputWithContext(context.Background())
}

func (i AwsCCConnectorArray) ToAwsCCConnectorArrayOutputWithContext(ctx context.Context) AwsCCConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsCCConnectorArrayOutput)
}

// AwsCCConnectorMapInput is an input type that accepts AwsCCConnectorMap and AwsCCConnectorMapOutput values.
// You can construct a concrete instance of `AwsCCConnectorMapInput` via:
//
//	AwsCCConnectorMap{ "key": AwsCCConnectorArgs{...} }
type AwsCCConnectorMapInput interface {
	pulumi.Input

	ToAwsCCConnectorMapOutput() AwsCCConnectorMapOutput
	ToAwsCCConnectorMapOutputWithContext(context.Context) AwsCCConnectorMapOutput
}

type AwsCCConnectorMap map[string]AwsCCConnectorInput

func (AwsCCConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsCCConnector)(nil)).Elem()
}

func (i AwsCCConnectorMap) ToAwsCCConnectorMapOutput() AwsCCConnectorMapOutput {
	return i.ToAwsCCConnectorMapOutputWithContext(context.Background())
}

func (i AwsCCConnectorMap) ToAwsCCConnectorMapOutputWithContext(ctx context.Context) AwsCCConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsCCConnectorMapOutput)
}

type AwsCCConnectorOutput struct{ *pulumi.OutputState }

func (AwsCCConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsCCConnector)(nil)).Elem()
}

func (o AwsCCConnectorOutput) ToAwsCCConnectorOutput() AwsCCConnectorOutput {
	return o
}

func (o AwsCCConnectorOutput) ToAwsCCConnectorOutputWithContext(ctx context.Context) AwsCCConnectorOutput {
	return o
}

// The AWS account id.
func (o AwsCCConnectorOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCCConnector) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Harness uses the secure cross-account role to access your AWS account. The role includes a restricted policy to access the cost and usage reports and resources for the sole purpose of cost analysis and cost optimization.
func (o AwsCCConnectorOutput) CrossAccountAccess() AwsCCConnectorCrossAccountAccessOutput {
	return o.ApplyT(func(v *AwsCCConnector) AwsCCConnectorCrossAccountAccessOutput { return v.CrossAccountAccess }).(AwsCCConnectorCrossAccountAccessOutput)
}

// Description of the resource.
func (o AwsCCConnectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsCCConnector) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The features enabled for the connector. Valid values are BILLING, OPTIMIZATION, VISIBILITY, GOVERNANCE.
func (o AwsCCConnectorOutput) FeaturesEnableds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AwsCCConnector) pulumi.StringArrayOutput { return v.FeaturesEnableds }).(pulumi.StringArrayOutput)
}

// Unique identifier of the resource.
func (o AwsCCConnectorOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCCConnector) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o AwsCCConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCCConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o AwsCCConnectorOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsCCConnector) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o AwsCCConnectorOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsCCConnector) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The cost and usage report name. Provided in the delivery options when the template is opened in the AWS console.
func (o AwsCCConnectorOutput) ReportName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsCCConnector) pulumi.StringPtrOutput { return v.ReportName }).(pulumi.StringPtrOutput)
}

// The name of s3 bucket.
func (o AwsCCConnectorOutput) S3Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsCCConnector) pulumi.StringPtrOutput { return v.S3Bucket }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o AwsCCConnectorOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AwsCCConnector) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type AwsCCConnectorArrayOutput struct{ *pulumi.OutputState }

func (AwsCCConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsCCConnector)(nil)).Elem()
}

func (o AwsCCConnectorArrayOutput) ToAwsCCConnectorArrayOutput() AwsCCConnectorArrayOutput {
	return o
}

func (o AwsCCConnectorArrayOutput) ToAwsCCConnectorArrayOutputWithContext(ctx context.Context) AwsCCConnectorArrayOutput {
	return o
}

func (o AwsCCConnectorArrayOutput) Index(i pulumi.IntInput) AwsCCConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsCCConnector {
		return vs[0].([]*AwsCCConnector)[vs[1].(int)]
	}).(AwsCCConnectorOutput)
}

type AwsCCConnectorMapOutput struct{ *pulumi.OutputState }

func (AwsCCConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsCCConnector)(nil)).Elem()
}

func (o AwsCCConnectorMapOutput) ToAwsCCConnectorMapOutput() AwsCCConnectorMapOutput {
	return o
}

func (o AwsCCConnectorMapOutput) ToAwsCCConnectorMapOutputWithContext(ctx context.Context) AwsCCConnectorMapOutput {
	return o
}

func (o AwsCCConnectorMapOutput) MapIndex(k pulumi.StringInput) AwsCCConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsCCConnector {
		return vs[0].(map[string]*AwsCCConnector)[vs[1].(string)]
	}).(AwsCCConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsCCConnectorInput)(nil)).Elem(), &AwsCCConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsCCConnectorArrayInput)(nil)).Elem(), AwsCCConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsCCConnectorMapInput)(nil)).Elem(), AwsCCConnectorMap{})
	pulumi.RegisterOutputType(AwsCCConnectorOutput{})
	pulumi.RegisterOutputType(AwsCCConnectorArrayOutput{})
	pulumi.RegisterOutputType(AwsCCConnectorMapOutput{})
}
