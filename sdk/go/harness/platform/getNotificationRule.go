// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Notification Rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupNotificationRule(ctx, &platform.LookupNotificationRuleArgs{
//				Identifier: "identifier",
//				OrgId:      "org_id",
//				ProjectId:  "project_id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNotificationRule(ctx *pulumi.Context, args *LookupNotificationRuleArgs, opts ...pulumi.InvokeOption) (*LookupNotificationRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNotificationRuleResult
	err := ctx.Invoke("harness:platform/getNotificationRule:getNotificationRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNotificationRule.
type LookupNotificationRuleArgs struct {
	// Identifier of the Notification Rule.
	Identifier string `pulumi:"identifier"`
	// Identifier of the organization in which the Notification Rule is configured.
	OrgId string `pulumi:"orgId"`
	// Identifier of the project in which the Notification Rule is configured.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getNotificationRule.
type LookupNotificationRuleResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Identifier of the Notification Rule.
	Identifier string `pulumi:"identifier"`
	// Identifier of the organization in which the Notification Rule is configured.
	OrgId string `pulumi:"orgId"`
	// Identifier of the project in which the Notification Rule is configured.
	ProjectId string `pulumi:"projectId"`
}

func LookupNotificationRuleOutput(ctx *pulumi.Context, args LookupNotificationRuleOutputArgs, opts ...pulumi.InvokeOption) LookupNotificationRuleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNotificationRuleResultOutput, error) {
			args := v.(LookupNotificationRuleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getNotificationRule:getNotificationRule", args, LookupNotificationRuleResultOutput{}, options).(LookupNotificationRuleResultOutput), nil
		}).(LookupNotificationRuleResultOutput)
}

// A collection of arguments for invoking getNotificationRule.
type LookupNotificationRuleOutputArgs struct {
	// Identifier of the Notification Rule.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Identifier of the organization in which the Notification Rule is configured.
	OrgId pulumi.StringInput `pulumi:"orgId"`
	// Identifier of the project in which the Notification Rule is configured.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupNotificationRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNotificationRuleArgs)(nil)).Elem()
}

// A collection of values returned by getNotificationRule.
type LookupNotificationRuleResultOutput struct{ *pulumi.OutputState }

func (LookupNotificationRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNotificationRuleResult)(nil)).Elem()
}

func (o LookupNotificationRuleResultOutput) ToLookupNotificationRuleResultOutput() LookupNotificationRuleResultOutput {
	return o
}

func (o LookupNotificationRuleResultOutput) ToLookupNotificationRuleResultOutputWithContext(ctx context.Context) LookupNotificationRuleResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNotificationRuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNotificationRuleResult) string { return v.Id }).(pulumi.StringOutput)
}

// Identifier of the Notification Rule.
func (o LookupNotificationRuleResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNotificationRuleResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Identifier of the organization in which the Notification Rule is configured.
func (o LookupNotificationRuleResultOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNotificationRuleResult) string { return v.OrgId }).(pulumi.StringOutput)
}

// Identifier of the project in which the Notification Rule is configured.
func (o LookupNotificationRuleResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNotificationRuleResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNotificationRuleResultOutput{})
}
