// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Datasource for looking up a Bitbucket connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupBitbucketConnector(ctx, &platform.LookupBitbucketConnectorArgs{
//				Identifier: "identifier",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupBitbucketConnector(ctx *pulumi.Context, args *LookupBitbucketConnectorArgs, opts ...pulumi.InvokeOption) (*LookupBitbucketConnectorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBitbucketConnectorResult
	err := ctx.Invoke("harness:platform/getBitbucketConnector:getBitbucketConnector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBitbucketConnector.
type LookupBitbucketConnectorArgs struct {
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getBitbucketConnector.
type LookupBitbucketConnectorResult struct {
	// Configuration for using the BitBucket api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentications []GetBitbucketConnectorApiAuthentication `pulumi:"apiAuthentications"`
	// Whether the connection we're making is to a BitBucket repository or a BitBucket account. Valid values are Account, Repo.
	ConnectionType string `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials []GetBitbucketConnectorCredential `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// URL of the BitBucket repository or account.
	Url string `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo string `pulumi:"validationRepo"`
}

func LookupBitbucketConnectorOutput(ctx *pulumi.Context, args LookupBitbucketConnectorOutputArgs, opts ...pulumi.InvokeOption) LookupBitbucketConnectorResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupBitbucketConnectorResultOutput, error) {
			args := v.(LookupBitbucketConnectorArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getBitbucketConnector:getBitbucketConnector", args, LookupBitbucketConnectorResultOutput{}, options).(LookupBitbucketConnectorResultOutput), nil
		}).(LookupBitbucketConnectorResultOutput)
}

// A collection of arguments for invoking getBitbucketConnector.
type LookupBitbucketConnectorOutputArgs struct {
	// Unique identifier of the resource.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupBitbucketConnectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBitbucketConnectorArgs)(nil)).Elem()
}

// A collection of values returned by getBitbucketConnector.
type LookupBitbucketConnectorResultOutput struct{ *pulumi.OutputState }

func (LookupBitbucketConnectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBitbucketConnectorResult)(nil)).Elem()
}

func (o LookupBitbucketConnectorResultOutput) ToLookupBitbucketConnectorResultOutput() LookupBitbucketConnectorResultOutput {
	return o
}

func (o LookupBitbucketConnectorResultOutput) ToLookupBitbucketConnectorResultOutputWithContext(ctx context.Context) LookupBitbucketConnectorResultOutput {
	return o
}

// Configuration for using the BitBucket api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
func (o LookupBitbucketConnectorResultOutput) ApiAuthentications() GetBitbucketConnectorApiAuthenticationArrayOutput {
	return o.ApplyT(func(v LookupBitbucketConnectorResult) []GetBitbucketConnectorApiAuthentication {
		return v.ApiAuthentications
	}).(GetBitbucketConnectorApiAuthenticationArrayOutput)
}

// Whether the connection we're making is to a BitBucket repository or a BitBucket account. Valid values are Account, Repo.
func (o LookupBitbucketConnectorResultOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBitbucketConnectorResult) string { return v.ConnectionType }).(pulumi.StringOutput)
}

// Credentials to use for the connection.
func (o LookupBitbucketConnectorResultOutput) Credentials() GetBitbucketConnectorCredentialArrayOutput {
	return o.ApplyT(func(v LookupBitbucketConnectorResult) []GetBitbucketConnectorCredential { return v.Credentials }).(GetBitbucketConnectorCredentialArrayOutput)
}

// Tags to filter delegates for connection.
func (o LookupBitbucketConnectorResultOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupBitbucketConnectorResult) []string { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o LookupBitbucketConnectorResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBitbucketConnectorResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupBitbucketConnectorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBitbucketConnectorResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupBitbucketConnectorResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBitbucketConnectorResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o LookupBitbucketConnectorResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBitbucketConnectorResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the organization.
func (o LookupBitbucketConnectorResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBitbucketConnectorResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o LookupBitbucketConnectorResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBitbucketConnectorResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o LookupBitbucketConnectorResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupBitbucketConnectorResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// URL of the BitBucket repository or account.
func (o LookupBitbucketConnectorResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBitbucketConnectorResult) string { return v.Url }).(pulumi.StringOutput)
}

// Repository to test the connection with. This is only used when `connectionType` is `Account`.
func (o LookupBitbucketConnectorResultOutput) ValidationRepo() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBitbucketConnectorResult) string { return v.ValidationRepo }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBitbucketConnectorResultOutput{})
}
