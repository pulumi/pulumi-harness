// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Harness Repo Webhook.
type RepoWebhook struct {
	pulumi.CustomResourceState

	// Timestamp when the webhook was created.
	Created pulumi.IntOutput `pulumi:"created"`
	// ID of the user who created the webhook.
	CreatedBy pulumi.IntOutput `pulumi:"createdBy"`
	// Description of the webhook.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Webhook enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Created webhook has secret encoding.
	HasSecret pulumi.BoolOutput `pulumi:"hasSecret"`
	// Identifier of the webhook.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Allow insecure connections for provided webhook URL.
	Insecure pulumi.BoolOutput `pulumi:"insecure"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Identifier of the repository.
	RepoIdentifier pulumi.StringOutput `pulumi:"repoIdentifier"`
	// Webhook secret which will be used to sign the webhook payload.
	Secret pulumi.StringPtrOutput `pulumi:"secret"`
	// List of triggers of the webhook (keep empty for all triggers).
	Triggers pulumi.StringArrayOutput `pulumi:"triggers"`
	// URL that's called by the webhook.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewRepoWebhook registers a new resource with the given unique name, arguments, and options.
func NewRepoWebhook(ctx *pulumi.Context,
	name string, args *RepoWebhookArgs, opts ...pulumi.ResourceOption) (*RepoWebhook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Insecure == nil {
		return nil, errors.New("invalid value for required argument 'Insecure'")
	}
	if args.RepoIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'RepoIdentifier'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.Secret != nil {
		args.Secret = pulumi.ToSecret(args.Secret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RepoWebhook
	err := ctx.RegisterResource("harness:platform/repoWebhook:RepoWebhook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepoWebhook gets an existing RepoWebhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepoWebhook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepoWebhookState, opts ...pulumi.ResourceOption) (*RepoWebhook, error) {
	var resource RepoWebhook
	err := ctx.ReadResource("harness:platform/repoWebhook:RepoWebhook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepoWebhook resources.
type repoWebhookState struct {
	// Timestamp when the webhook was created.
	Created *int `pulumi:"created"`
	// ID of the user who created the webhook.
	CreatedBy *int `pulumi:"createdBy"`
	// Description of the webhook.
	Description *string `pulumi:"description"`
	// Webhook enabled.
	Enabled *bool `pulumi:"enabled"`
	// Created webhook has secret encoding.
	HasSecret *bool `pulumi:"hasSecret"`
	// Identifier of the webhook.
	Identifier *string `pulumi:"identifier"`
	// Allow insecure connections for provided webhook URL.
	Insecure *bool `pulumi:"insecure"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Identifier of the repository.
	RepoIdentifier *string `pulumi:"repoIdentifier"`
	// Webhook secret which will be used to sign the webhook payload.
	Secret *string `pulumi:"secret"`
	// List of triggers of the webhook (keep empty for all triggers).
	Triggers []string `pulumi:"triggers"`
	// URL that's called by the webhook.
	Url *string `pulumi:"url"`
}

type RepoWebhookState struct {
	// Timestamp when the webhook was created.
	Created pulumi.IntPtrInput
	// ID of the user who created the webhook.
	CreatedBy pulumi.IntPtrInput
	// Description of the webhook.
	Description pulumi.StringPtrInput
	// Webhook enabled.
	Enabled pulumi.BoolPtrInput
	// Created webhook has secret encoding.
	HasSecret pulumi.BoolPtrInput
	// Identifier of the webhook.
	Identifier pulumi.StringPtrInput
	// Allow insecure connections for provided webhook URL.
	Insecure pulumi.BoolPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Identifier of the repository.
	RepoIdentifier pulumi.StringPtrInput
	// Webhook secret which will be used to sign the webhook payload.
	Secret pulumi.StringPtrInput
	// List of triggers of the webhook (keep empty for all triggers).
	Triggers pulumi.StringArrayInput
	// URL that's called by the webhook.
	Url pulumi.StringPtrInput
}

func (RepoWebhookState) ElementType() reflect.Type {
	return reflect.TypeOf((*repoWebhookState)(nil)).Elem()
}

type repoWebhookArgs struct {
	// Description of the webhook.
	Description *string `pulumi:"description"`
	// Webhook enabled.
	Enabled bool `pulumi:"enabled"`
	// Identifier of the webhook.
	Identifier string `pulumi:"identifier"`
	// Allow insecure connections for provided webhook URL.
	Insecure bool `pulumi:"insecure"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Identifier of the repository.
	RepoIdentifier string `pulumi:"repoIdentifier"`
	// Webhook secret which will be used to sign the webhook payload.
	Secret *string `pulumi:"secret"`
	// List of triggers of the webhook (keep empty for all triggers).
	Triggers []string `pulumi:"triggers"`
	// URL that's called by the webhook.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a RepoWebhook resource.
type RepoWebhookArgs struct {
	// Description of the webhook.
	Description pulumi.StringPtrInput
	// Webhook enabled.
	Enabled pulumi.BoolInput
	// Identifier of the webhook.
	Identifier pulumi.StringInput
	// Allow insecure connections for provided webhook URL.
	Insecure pulumi.BoolInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Identifier of the repository.
	RepoIdentifier pulumi.StringInput
	// Webhook secret which will be used to sign the webhook payload.
	Secret pulumi.StringPtrInput
	// List of triggers of the webhook (keep empty for all triggers).
	Triggers pulumi.StringArrayInput
	// URL that's called by the webhook.
	Url pulumi.StringInput
}

func (RepoWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repoWebhookArgs)(nil)).Elem()
}

type RepoWebhookInput interface {
	pulumi.Input

	ToRepoWebhookOutput() RepoWebhookOutput
	ToRepoWebhookOutputWithContext(ctx context.Context) RepoWebhookOutput
}

func (*RepoWebhook) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoWebhook)(nil)).Elem()
}

func (i *RepoWebhook) ToRepoWebhookOutput() RepoWebhookOutput {
	return i.ToRepoWebhookOutputWithContext(context.Background())
}

func (i *RepoWebhook) ToRepoWebhookOutputWithContext(ctx context.Context) RepoWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoWebhookOutput)
}

// RepoWebhookArrayInput is an input type that accepts RepoWebhookArray and RepoWebhookArrayOutput values.
// You can construct a concrete instance of `RepoWebhookArrayInput` via:
//
//	RepoWebhookArray{ RepoWebhookArgs{...} }
type RepoWebhookArrayInput interface {
	pulumi.Input

	ToRepoWebhookArrayOutput() RepoWebhookArrayOutput
	ToRepoWebhookArrayOutputWithContext(context.Context) RepoWebhookArrayOutput
}

type RepoWebhookArray []RepoWebhookInput

func (RepoWebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepoWebhook)(nil)).Elem()
}

func (i RepoWebhookArray) ToRepoWebhookArrayOutput() RepoWebhookArrayOutput {
	return i.ToRepoWebhookArrayOutputWithContext(context.Background())
}

func (i RepoWebhookArray) ToRepoWebhookArrayOutputWithContext(ctx context.Context) RepoWebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoWebhookArrayOutput)
}

// RepoWebhookMapInput is an input type that accepts RepoWebhookMap and RepoWebhookMapOutput values.
// You can construct a concrete instance of `RepoWebhookMapInput` via:
//
//	RepoWebhookMap{ "key": RepoWebhookArgs{...} }
type RepoWebhookMapInput interface {
	pulumi.Input

	ToRepoWebhookMapOutput() RepoWebhookMapOutput
	ToRepoWebhookMapOutputWithContext(context.Context) RepoWebhookMapOutput
}

type RepoWebhookMap map[string]RepoWebhookInput

func (RepoWebhookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepoWebhook)(nil)).Elem()
}

func (i RepoWebhookMap) ToRepoWebhookMapOutput() RepoWebhookMapOutput {
	return i.ToRepoWebhookMapOutputWithContext(context.Background())
}

func (i RepoWebhookMap) ToRepoWebhookMapOutputWithContext(ctx context.Context) RepoWebhookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoWebhookMapOutput)
}

type RepoWebhookOutput struct{ *pulumi.OutputState }

func (RepoWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoWebhook)(nil)).Elem()
}

func (o RepoWebhookOutput) ToRepoWebhookOutput() RepoWebhookOutput {
	return o
}

func (o RepoWebhookOutput) ToRepoWebhookOutputWithContext(ctx context.Context) RepoWebhookOutput {
	return o
}

// Timestamp when the webhook was created.
func (o RepoWebhookOutput) Created() pulumi.IntOutput {
	return o.ApplyT(func(v *RepoWebhook) pulumi.IntOutput { return v.Created }).(pulumi.IntOutput)
}

// ID of the user who created the webhook.
func (o RepoWebhookOutput) CreatedBy() pulumi.IntOutput {
	return o.ApplyT(func(v *RepoWebhook) pulumi.IntOutput { return v.CreatedBy }).(pulumi.IntOutput)
}

// Description of the webhook.
func (o RepoWebhookOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoWebhook) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Webhook enabled.
func (o RepoWebhookOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *RepoWebhook) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Created webhook has secret encoding.
func (o RepoWebhookOutput) HasSecret() pulumi.BoolOutput {
	return o.ApplyT(func(v *RepoWebhook) pulumi.BoolOutput { return v.HasSecret }).(pulumi.BoolOutput)
}

// Identifier of the webhook.
func (o RepoWebhookOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *RepoWebhook) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Allow insecure connections for provided webhook URL.
func (o RepoWebhookOutput) Insecure() pulumi.BoolOutput {
	return o.ApplyT(func(v *RepoWebhook) pulumi.BoolOutput { return v.Insecure }).(pulumi.BoolOutput)
}

// Unique identifier of the organization.
func (o RepoWebhookOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoWebhook) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o RepoWebhookOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoWebhook) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Identifier of the repository.
func (o RepoWebhookOutput) RepoIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *RepoWebhook) pulumi.StringOutput { return v.RepoIdentifier }).(pulumi.StringOutput)
}

// Webhook secret which will be used to sign the webhook payload.
func (o RepoWebhookOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoWebhook) pulumi.StringPtrOutput { return v.Secret }).(pulumi.StringPtrOutput)
}

// List of triggers of the webhook (keep empty for all triggers).
func (o RepoWebhookOutput) Triggers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RepoWebhook) pulumi.StringArrayOutput { return v.Triggers }).(pulumi.StringArrayOutput)
}

// URL that's called by the webhook.
func (o RepoWebhookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *RepoWebhook) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type RepoWebhookArrayOutput struct{ *pulumi.OutputState }

func (RepoWebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepoWebhook)(nil)).Elem()
}

func (o RepoWebhookArrayOutput) ToRepoWebhookArrayOutput() RepoWebhookArrayOutput {
	return o
}

func (o RepoWebhookArrayOutput) ToRepoWebhookArrayOutputWithContext(ctx context.Context) RepoWebhookArrayOutput {
	return o
}

func (o RepoWebhookArrayOutput) Index(i pulumi.IntInput) RepoWebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepoWebhook {
		return vs[0].([]*RepoWebhook)[vs[1].(int)]
	}).(RepoWebhookOutput)
}

type RepoWebhookMapOutput struct{ *pulumi.OutputState }

func (RepoWebhookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepoWebhook)(nil)).Elem()
}

func (o RepoWebhookMapOutput) ToRepoWebhookMapOutput() RepoWebhookMapOutput {
	return o
}

func (o RepoWebhookMapOutput) ToRepoWebhookMapOutputWithContext(ctx context.Context) RepoWebhookMapOutput {
	return o
}

func (o RepoWebhookMapOutput) MapIndex(k pulumi.StringInput) RepoWebhookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepoWebhook {
		return vs[0].(map[string]*RepoWebhook)[vs[1].(string)]
	}).(RepoWebhookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepoWebhookInput)(nil)).Elem(), &RepoWebhook{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepoWebhookArrayInput)(nil)).Elem(), RepoWebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepoWebhookMapInput)(nil)).Elem(), RepoWebhookMap{})
	pulumi.RegisterOutputType(RepoWebhookOutput{})
	pulumi.RegisterOutputType(RepoWebhookArrayOutput{})
	pulumi.RegisterOutputType(RepoWebhookMapOutput{})
}
