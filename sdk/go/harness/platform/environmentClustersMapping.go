// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for mapping environment with Harness Clusters.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// mapping a cluster to a project level env
//			_, err := platform.NewEnvironmentClustersMapping(ctx, "example", &platform.EnvironmentClustersMappingArgs{
//				Identifier: pulumi.String("mycustomidentifier"),
//				OrgId:      pulumi.String("orgIdentifer"),
//				ProjectId:  pulumi.String("projectIdentifier"),
//				EnvId:      pulumi.String("exampleEnvId"),
//				Clusters: platform.EnvironmentClustersMappingClusterArray{
//					&platform.EnvironmentClustersMappingClusterArgs{
//						Identifier:      pulumi.String("incluster"),
//						Name:            pulumi.String("in-cluster"),
//						AgentIdentifier: pulumi.String("account.gitopsagentdev"),
//						Scope:           pulumi.String("ACCOUNT"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// mapping two clusters to account level env
//			_, err = platform.NewEnvironmentClustersMapping(ctx, "example2", &platform.EnvironmentClustersMappingArgs{
//				Identifier: pulumi.String("mycustomidentifier"),
//				EnvId:      pulumi.String("env1"),
//				Clusters: platform.EnvironmentClustersMappingClusterArray{
//					&platform.EnvironmentClustersMappingClusterArgs{
//						Identifier:      pulumi.String("clusterA"),
//						Name:            pulumi.String("cluster-A"),
//						AgentIdentifier: pulumi.String("account.gitopsagentprod"),
//						Scope:           pulumi.String("ACCOUNT"),
//					},
//					&platform.EnvironmentClustersMappingClusterArgs{
//						Identifier:      pulumi.String("clusterB"),
//						Name:            pulumi.String("cluster-B"),
//						AgentIdentifier: pulumi.String("account.gitopsagentprod"),
//						Scope:           pulumi.String("ACCOUNT"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type EnvironmentClustersMapping struct {
	pulumi.CustomResourceState

	// list of cluster identifiers and names
	Clusters EnvironmentClustersMappingClusterArrayOutput `pulumi:"clusters"`
	// environment identifier.
	EnvId pulumi.StringOutput `pulumi:"envId"`
	// identifier for the cluster mapping(can be given any value).
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// org_id of the environment.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// project_id of the environment.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// scope at which the environment exists in harness.
	Scope pulumi.StringOutput `pulumi:"scope"`
}

// NewEnvironmentClustersMapping registers a new resource with the given unique name, arguments, and options.
func NewEnvironmentClustersMapping(ctx *pulumi.Context,
	name string, args *EnvironmentClustersMappingArgs, opts ...pulumi.ResourceOption) (*EnvironmentClustersMapping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvId == nil {
		return nil, errors.New("invalid value for required argument 'EnvId'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EnvironmentClustersMapping
	err := ctx.RegisterResource("harness:platform/environmentClustersMapping:EnvironmentClustersMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironmentClustersMapping gets an existing EnvironmentClustersMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironmentClustersMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentClustersMappingState, opts ...pulumi.ResourceOption) (*EnvironmentClustersMapping, error) {
	var resource EnvironmentClustersMapping
	err := ctx.ReadResource("harness:platform/environmentClustersMapping:EnvironmentClustersMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvironmentClustersMapping resources.
type environmentClustersMappingState struct {
	// list of cluster identifiers and names
	Clusters []EnvironmentClustersMappingCluster `pulumi:"clusters"`
	// environment identifier.
	EnvId *string `pulumi:"envId"`
	// identifier for the cluster mapping(can be given any value).
	Identifier *string `pulumi:"identifier"`
	// org_id of the environment.
	OrgId *string `pulumi:"orgId"`
	// project_id of the environment.
	ProjectId *string `pulumi:"projectId"`
	// scope at which the environment exists in harness.
	Scope *string `pulumi:"scope"`
}

type EnvironmentClustersMappingState struct {
	// list of cluster identifiers and names
	Clusters EnvironmentClustersMappingClusterArrayInput
	// environment identifier.
	EnvId pulumi.StringPtrInput
	// identifier for the cluster mapping(can be given any value).
	Identifier pulumi.StringPtrInput
	// org_id of the environment.
	OrgId pulumi.StringPtrInput
	// project_id of the environment.
	ProjectId pulumi.StringPtrInput
	// scope at which the environment exists in harness.
	Scope pulumi.StringPtrInput
}

func (EnvironmentClustersMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentClustersMappingState)(nil)).Elem()
}

type environmentClustersMappingArgs struct {
	// list of cluster identifiers and names
	Clusters []EnvironmentClustersMappingCluster `pulumi:"clusters"`
	// environment identifier.
	EnvId string `pulumi:"envId"`
	// identifier for the cluster mapping(can be given any value).
	Identifier string `pulumi:"identifier"`
	// org_id of the environment.
	OrgId *string `pulumi:"orgId"`
	// project_id of the environment.
	ProjectId *string `pulumi:"projectId"`
}

// The set of arguments for constructing a EnvironmentClustersMapping resource.
type EnvironmentClustersMappingArgs struct {
	// list of cluster identifiers and names
	Clusters EnvironmentClustersMappingClusterArrayInput
	// environment identifier.
	EnvId pulumi.StringInput
	// identifier for the cluster mapping(can be given any value).
	Identifier pulumi.StringInput
	// org_id of the environment.
	OrgId pulumi.StringPtrInput
	// project_id of the environment.
	ProjectId pulumi.StringPtrInput
}

func (EnvironmentClustersMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentClustersMappingArgs)(nil)).Elem()
}

type EnvironmentClustersMappingInput interface {
	pulumi.Input

	ToEnvironmentClustersMappingOutput() EnvironmentClustersMappingOutput
	ToEnvironmentClustersMappingOutputWithContext(ctx context.Context) EnvironmentClustersMappingOutput
}

func (*EnvironmentClustersMapping) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentClustersMapping)(nil)).Elem()
}

func (i *EnvironmentClustersMapping) ToEnvironmentClustersMappingOutput() EnvironmentClustersMappingOutput {
	return i.ToEnvironmentClustersMappingOutputWithContext(context.Background())
}

func (i *EnvironmentClustersMapping) ToEnvironmentClustersMappingOutputWithContext(ctx context.Context) EnvironmentClustersMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentClustersMappingOutput)
}

// EnvironmentClustersMappingArrayInput is an input type that accepts EnvironmentClustersMappingArray and EnvironmentClustersMappingArrayOutput values.
// You can construct a concrete instance of `EnvironmentClustersMappingArrayInput` via:
//
//	EnvironmentClustersMappingArray{ EnvironmentClustersMappingArgs{...} }
type EnvironmentClustersMappingArrayInput interface {
	pulumi.Input

	ToEnvironmentClustersMappingArrayOutput() EnvironmentClustersMappingArrayOutput
	ToEnvironmentClustersMappingArrayOutputWithContext(context.Context) EnvironmentClustersMappingArrayOutput
}

type EnvironmentClustersMappingArray []EnvironmentClustersMappingInput

func (EnvironmentClustersMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvironmentClustersMapping)(nil)).Elem()
}

func (i EnvironmentClustersMappingArray) ToEnvironmentClustersMappingArrayOutput() EnvironmentClustersMappingArrayOutput {
	return i.ToEnvironmentClustersMappingArrayOutputWithContext(context.Background())
}

func (i EnvironmentClustersMappingArray) ToEnvironmentClustersMappingArrayOutputWithContext(ctx context.Context) EnvironmentClustersMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentClustersMappingArrayOutput)
}

// EnvironmentClustersMappingMapInput is an input type that accepts EnvironmentClustersMappingMap and EnvironmentClustersMappingMapOutput values.
// You can construct a concrete instance of `EnvironmentClustersMappingMapInput` via:
//
//	EnvironmentClustersMappingMap{ "key": EnvironmentClustersMappingArgs{...} }
type EnvironmentClustersMappingMapInput interface {
	pulumi.Input

	ToEnvironmentClustersMappingMapOutput() EnvironmentClustersMappingMapOutput
	ToEnvironmentClustersMappingMapOutputWithContext(context.Context) EnvironmentClustersMappingMapOutput
}

type EnvironmentClustersMappingMap map[string]EnvironmentClustersMappingInput

func (EnvironmentClustersMappingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvironmentClustersMapping)(nil)).Elem()
}

func (i EnvironmentClustersMappingMap) ToEnvironmentClustersMappingMapOutput() EnvironmentClustersMappingMapOutput {
	return i.ToEnvironmentClustersMappingMapOutputWithContext(context.Background())
}

func (i EnvironmentClustersMappingMap) ToEnvironmentClustersMappingMapOutputWithContext(ctx context.Context) EnvironmentClustersMappingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentClustersMappingMapOutput)
}

type EnvironmentClustersMappingOutput struct{ *pulumi.OutputState }

func (EnvironmentClustersMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentClustersMapping)(nil)).Elem()
}

func (o EnvironmentClustersMappingOutput) ToEnvironmentClustersMappingOutput() EnvironmentClustersMappingOutput {
	return o
}

func (o EnvironmentClustersMappingOutput) ToEnvironmentClustersMappingOutputWithContext(ctx context.Context) EnvironmentClustersMappingOutput {
	return o
}

// list of cluster identifiers and names
func (o EnvironmentClustersMappingOutput) Clusters() EnvironmentClustersMappingClusterArrayOutput {
	return o.ApplyT(func(v *EnvironmentClustersMapping) EnvironmentClustersMappingClusterArrayOutput { return v.Clusters }).(EnvironmentClustersMappingClusterArrayOutput)
}

// environment identifier.
func (o EnvironmentClustersMappingOutput) EnvId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentClustersMapping) pulumi.StringOutput { return v.EnvId }).(pulumi.StringOutput)
}

// identifier for the cluster mapping(can be given any value).
func (o EnvironmentClustersMappingOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentClustersMapping) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// org_id of the environment.
func (o EnvironmentClustersMappingOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentClustersMapping) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// project_id of the environment.
func (o EnvironmentClustersMappingOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentClustersMapping) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// scope at which the environment exists in harness.
func (o EnvironmentClustersMappingOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentClustersMapping) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

type EnvironmentClustersMappingArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentClustersMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvironmentClustersMapping)(nil)).Elem()
}

func (o EnvironmentClustersMappingArrayOutput) ToEnvironmentClustersMappingArrayOutput() EnvironmentClustersMappingArrayOutput {
	return o
}

func (o EnvironmentClustersMappingArrayOutput) ToEnvironmentClustersMappingArrayOutputWithContext(ctx context.Context) EnvironmentClustersMappingArrayOutput {
	return o
}

func (o EnvironmentClustersMappingArrayOutput) Index(i pulumi.IntInput) EnvironmentClustersMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnvironmentClustersMapping {
		return vs[0].([]*EnvironmentClustersMapping)[vs[1].(int)]
	}).(EnvironmentClustersMappingOutput)
}

type EnvironmentClustersMappingMapOutput struct{ *pulumi.OutputState }

func (EnvironmentClustersMappingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvironmentClustersMapping)(nil)).Elem()
}

func (o EnvironmentClustersMappingMapOutput) ToEnvironmentClustersMappingMapOutput() EnvironmentClustersMappingMapOutput {
	return o
}

func (o EnvironmentClustersMappingMapOutput) ToEnvironmentClustersMappingMapOutputWithContext(ctx context.Context) EnvironmentClustersMappingMapOutput {
	return o
}

func (o EnvironmentClustersMappingMapOutput) MapIndex(k pulumi.StringInput) EnvironmentClustersMappingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnvironmentClustersMapping {
		return vs[0].(map[string]*EnvironmentClustersMapping)[vs[1].(string)]
	}).(EnvironmentClustersMappingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentClustersMappingInput)(nil)).Elem(), &EnvironmentClustersMapping{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentClustersMappingArrayInput)(nil)).Elem(), EnvironmentClustersMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentClustersMappingMapInput)(nil)).Elem(), EnvironmentClustersMappingMap{})
	pulumi.RegisterOutputType(EnvironmentClustersMappingOutput{})
	pulumi.RegisterOutputType(EnvironmentClustersMappingArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentClustersMappingMapOutput{})
}
