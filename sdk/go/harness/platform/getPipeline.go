// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness pipeline.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupPipeline(ctx, &platform.LookupPipelineArgs{
//				Identifier: pulumi.StringRef("identifier"),
//				OrgId:      "org_id",
//				ProjectId:  "project_id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupPipeline(ctx *pulumi.Context, args *LookupPipelineArgs, opts ...pulumi.InvokeOption) (*LookupPipelineResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPipelineResult
	err := ctx.Invoke("harness:platform/getPipeline:getPipeline", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPipeline.
type LookupPipelineArgs struct {
	// Contains parameters related to creating an Entity for Git Experience.
	GitDetails *GetPipelineGitDetails `pulumi:"gitDetails"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getPipeline.
type LookupPipelineResult struct {
	// Description of the resource.
	Description string `pulumi:"description"`
	// Contains parameters related to creating an Entity for Git Experience.
	GitDetails *GetPipelineGitDetails `pulumi:"gitDetails"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// If true, returns Pipeline YAML with Templates applied on it.
	TemplateApplied bool `pulumi:"templateApplied"`
	// Pipeline YAML after resolving Templates (returned as a String).
	TemplateAppliedPipelineYaml string `pulumi:"templateAppliedPipelineYaml"`
	// YAML of the pipeline.
	Yaml string `pulumi:"yaml"`
}

func LookupPipelineOutput(ctx *pulumi.Context, args LookupPipelineOutputArgs, opts ...pulumi.InvokeOption) LookupPipelineResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPipelineResultOutput, error) {
			args := v.(LookupPipelineArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getPipeline:getPipeline", args, LookupPipelineResultOutput{}, options).(LookupPipelineResultOutput), nil
		}).(LookupPipelineResultOutput)
}

// A collection of arguments for invoking getPipeline.
type LookupPipelineOutputArgs struct {
	// Contains parameters related to creating an Entity for Git Experience.
	GitDetails GetPipelineGitDetailsPtrInput `pulumi:"gitDetails"`
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupPipelineOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPipelineArgs)(nil)).Elem()
}

// A collection of values returned by getPipeline.
type LookupPipelineResultOutput struct{ *pulumi.OutputState }

func (LookupPipelineResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPipelineResult)(nil)).Elem()
}

func (o LookupPipelineResultOutput) ToLookupPipelineResultOutput() LookupPipelineResultOutput {
	return o
}

func (o LookupPipelineResultOutput) ToLookupPipelineResultOutputWithContext(ctx context.Context) LookupPipelineResultOutput {
	return o
}

// Description of the resource.
func (o LookupPipelineResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineResult) string { return v.Description }).(pulumi.StringOutput)
}

// Contains parameters related to creating an Entity for Git Experience.
func (o LookupPipelineResultOutput) GitDetails() GetPipelineGitDetailsPtrOutput {
	return o.ApplyT(func(v LookupPipelineResult) *GetPipelineGitDetails { return v.GitDetails }).(GetPipelineGitDetailsPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPipelineResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupPipelineResultOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPipelineResult) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

// Name of the resource.
func (o LookupPipelineResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPipelineResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the organization.
func (o LookupPipelineResultOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineResult) string { return v.OrgId }).(pulumi.StringOutput)
}

// Unique identifier of the project.
func (o LookupPipelineResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Tags to associate with the resource.
func (o LookupPipelineResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPipelineResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// If true, returns Pipeline YAML with Templates applied on it.
func (o LookupPipelineResultOutput) TemplateApplied() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPipelineResult) bool { return v.TemplateApplied }).(pulumi.BoolOutput)
}

// Pipeline YAML after resolving Templates (returned as a String).
func (o LookupPipelineResultOutput) TemplateAppliedPipelineYaml() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineResult) string { return v.TemplateAppliedPipelineYaml }).(pulumi.StringOutput)
}

// YAML of the pipeline.
func (o LookupPipelineResultOutput) Yaml() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineResult) string { return v.Yaml }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPipelineResultOutput{})
}
