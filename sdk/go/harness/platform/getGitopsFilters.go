// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness GitOps Filter.
func LookupGitopsFilters(ctx *pulumi.Context, args *LookupGitopsFiltersArgs, opts ...pulumi.InvokeOption) (*LookupGitopsFiltersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGitopsFiltersResult
	err := ctx.Invoke("harness:platform/getGitopsFilters:getGitopsFilters", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGitopsFilters.
type LookupGitopsFiltersArgs struct {
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Organization Identifier for the Entity.
	OrgId string `pulumi:"orgId"`
	// Project Identifier for the Entity.
	ProjectId string `pulumi:"projectId"`
	// Type of filter.
	Type string `pulumi:"type"`
}

// A collection of values returned by getGitopsFilters.
type LookupGitopsFiltersResult struct {
	// Properties of the filters entity defined in Harness as a JSON string. All values should be arrays of strings. Example: jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})
	FilterProperties string `pulumi:"filterProperties"`
	// This indicates visibility of filters, by default it is Everyone.
	FilterVisibility string `pulumi:"filterVisibility"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the Filter.
	Name string `pulumi:"name"`
	// Organization Identifier for the Entity.
	OrgId string `pulumi:"orgId"`
	// Project Identifier for the Entity.
	ProjectId string `pulumi:"projectId"`
	// Type of filter.
	Type string `pulumi:"type"`
}

func LookupGitopsFiltersOutput(ctx *pulumi.Context, args LookupGitopsFiltersOutputArgs, opts ...pulumi.InvokeOption) LookupGitopsFiltersResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupGitopsFiltersResultOutput, error) {
			args := v.(LookupGitopsFiltersArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getGitopsFilters:getGitopsFilters", args, LookupGitopsFiltersResultOutput{}, options).(LookupGitopsFiltersResultOutput), nil
		}).(LookupGitopsFiltersResultOutput)
}

// A collection of arguments for invoking getGitopsFilters.
type LookupGitopsFiltersOutputArgs struct {
	// Unique identifier of the resource.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Organization Identifier for the Entity.
	OrgId pulumi.StringInput `pulumi:"orgId"`
	// Project Identifier for the Entity.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// Type of filter.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LookupGitopsFiltersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitopsFiltersArgs)(nil)).Elem()
}

// A collection of values returned by getGitopsFilters.
type LookupGitopsFiltersResultOutput struct{ *pulumi.OutputState }

func (LookupGitopsFiltersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitopsFiltersResult)(nil)).Elem()
}

func (o LookupGitopsFiltersResultOutput) ToLookupGitopsFiltersResultOutput() LookupGitopsFiltersResultOutput {
	return o
}

func (o LookupGitopsFiltersResultOutput) ToLookupGitopsFiltersResultOutputWithContext(ctx context.Context) LookupGitopsFiltersResultOutput {
	return o
}

// Properties of the filters entity defined in Harness as a JSON string. All values should be arrays of strings. Example: jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})
func (o LookupGitopsFiltersResultOutput) FilterProperties() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitopsFiltersResult) string { return v.FilterProperties }).(pulumi.StringOutput)
}

// This indicates visibility of filters, by default it is Everyone.
func (o LookupGitopsFiltersResultOutput) FilterVisibility() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitopsFiltersResult) string { return v.FilterVisibility }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupGitopsFiltersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitopsFiltersResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupGitopsFiltersResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitopsFiltersResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the Filter.
func (o LookupGitopsFiltersResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitopsFiltersResult) string { return v.Name }).(pulumi.StringOutput)
}

// Organization Identifier for the Entity.
func (o LookupGitopsFiltersResultOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitopsFiltersResult) string { return v.OrgId }).(pulumi.StringOutput)
}

// Project Identifier for the Entity.
func (o LookupGitopsFiltersResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitopsFiltersResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Type of filter.
func (o LookupGitopsFiltersResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitopsFiltersResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGitopsFiltersResultOutput{})
}
