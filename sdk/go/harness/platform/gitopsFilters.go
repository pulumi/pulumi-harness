// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating Harness GitOps Filters.
type GitopsFilters struct {
	pulumi.CustomResourceState

	// Properties of the filters entity defined in Harness as a JSON string. All values should be arrays of strings. Example: jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})
	FilterProperties pulumi.StringOutput `pulumi:"filterProperties"`
	// This indicates visibility of filters, by default it is Everyone.
	FilterVisibility pulumi.StringPtrOutput `pulumi:"filterVisibility"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the GitOps filters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Organization Identifier for the Entity.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Project Identifier for the Entity.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Type of GitOps filters.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewGitopsFilters registers a new resource with the given unique name, arguments, and options.
func NewGitopsFilters(ctx *pulumi.Context,
	name string, args *GitopsFiltersArgs, opts ...pulumi.ResourceOption) (*GitopsFilters, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FilterProperties == nil {
		return nil, errors.New("invalid value for required argument 'FilterProperties'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GitopsFilters
	err := ctx.RegisterResource("harness:platform/gitopsFilters:GitopsFilters", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitopsFilters gets an existing GitopsFilters resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitopsFilters(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitopsFiltersState, opts ...pulumi.ResourceOption) (*GitopsFilters, error) {
	var resource GitopsFilters
	err := ctx.ReadResource("harness:platform/gitopsFilters:GitopsFilters", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitopsFilters resources.
type gitopsFiltersState struct {
	// Properties of the filters entity defined in Harness as a JSON string. All values should be arrays of strings. Example: jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})
	FilterProperties *string `pulumi:"filterProperties"`
	// This indicates visibility of filters, by default it is Everyone.
	FilterVisibility *string `pulumi:"filterVisibility"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the GitOps filters.
	Name *string `pulumi:"name"`
	// Organization Identifier for the Entity.
	OrgId *string `pulumi:"orgId"`
	// Project Identifier for the Entity.
	ProjectId *string `pulumi:"projectId"`
	// Type of GitOps filters.
	Type *string `pulumi:"type"`
}

type GitopsFiltersState struct {
	// Properties of the filters entity defined in Harness as a JSON string. All values should be arrays of strings. Example: jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})
	FilterProperties pulumi.StringPtrInput
	// This indicates visibility of filters, by default it is Everyone.
	FilterVisibility pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the GitOps filters.
	Name pulumi.StringPtrInput
	// Organization Identifier for the Entity.
	OrgId pulumi.StringPtrInput
	// Project Identifier for the Entity.
	ProjectId pulumi.StringPtrInput
	// Type of GitOps filters.
	Type pulumi.StringPtrInput
}

func (GitopsFiltersState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitopsFiltersState)(nil)).Elem()
}

type gitopsFiltersArgs struct {
	// Properties of the filters entity defined in Harness as a JSON string. All values should be arrays of strings. Example: jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})
	FilterProperties string `pulumi:"filterProperties"`
	// This indicates visibility of filters, by default it is Everyone.
	FilterVisibility *string `pulumi:"filterVisibility"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the GitOps filters.
	Name *string `pulumi:"name"`
	// Organization Identifier for the Entity.
	OrgId string `pulumi:"orgId"`
	// Project Identifier for the Entity.
	ProjectId string `pulumi:"projectId"`
	// Type of GitOps filters.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a GitopsFilters resource.
type GitopsFiltersArgs struct {
	// Properties of the filters entity defined in Harness as a JSON string. All values should be arrays of strings. Example: jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})
	FilterProperties pulumi.StringInput
	// This indicates visibility of filters, by default it is Everyone.
	FilterVisibility pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the GitOps filters.
	Name pulumi.StringPtrInput
	// Organization Identifier for the Entity.
	OrgId pulumi.StringInput
	// Project Identifier for the Entity.
	ProjectId pulumi.StringInput
	// Type of GitOps filters.
	Type pulumi.StringInput
}

func (GitopsFiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitopsFiltersArgs)(nil)).Elem()
}

type GitopsFiltersInput interface {
	pulumi.Input

	ToGitopsFiltersOutput() GitopsFiltersOutput
	ToGitopsFiltersOutputWithContext(ctx context.Context) GitopsFiltersOutput
}

func (*GitopsFilters) ElementType() reflect.Type {
	return reflect.TypeOf((**GitopsFilters)(nil)).Elem()
}

func (i *GitopsFilters) ToGitopsFiltersOutput() GitopsFiltersOutput {
	return i.ToGitopsFiltersOutputWithContext(context.Background())
}

func (i *GitopsFilters) ToGitopsFiltersOutputWithContext(ctx context.Context) GitopsFiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitopsFiltersOutput)
}

// GitopsFiltersArrayInput is an input type that accepts GitopsFiltersArray and GitopsFiltersArrayOutput values.
// You can construct a concrete instance of `GitopsFiltersArrayInput` via:
//
//	GitopsFiltersArray{ GitopsFiltersArgs{...} }
type GitopsFiltersArrayInput interface {
	pulumi.Input

	ToGitopsFiltersArrayOutput() GitopsFiltersArrayOutput
	ToGitopsFiltersArrayOutputWithContext(context.Context) GitopsFiltersArrayOutput
}

type GitopsFiltersArray []GitopsFiltersInput

func (GitopsFiltersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitopsFilters)(nil)).Elem()
}

func (i GitopsFiltersArray) ToGitopsFiltersArrayOutput() GitopsFiltersArrayOutput {
	return i.ToGitopsFiltersArrayOutputWithContext(context.Background())
}

func (i GitopsFiltersArray) ToGitopsFiltersArrayOutputWithContext(ctx context.Context) GitopsFiltersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitopsFiltersArrayOutput)
}

// GitopsFiltersMapInput is an input type that accepts GitopsFiltersMap and GitopsFiltersMapOutput values.
// You can construct a concrete instance of `GitopsFiltersMapInput` via:
//
//	GitopsFiltersMap{ "key": GitopsFiltersArgs{...} }
type GitopsFiltersMapInput interface {
	pulumi.Input

	ToGitopsFiltersMapOutput() GitopsFiltersMapOutput
	ToGitopsFiltersMapOutputWithContext(context.Context) GitopsFiltersMapOutput
}

type GitopsFiltersMap map[string]GitopsFiltersInput

func (GitopsFiltersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitopsFilters)(nil)).Elem()
}

func (i GitopsFiltersMap) ToGitopsFiltersMapOutput() GitopsFiltersMapOutput {
	return i.ToGitopsFiltersMapOutputWithContext(context.Background())
}

func (i GitopsFiltersMap) ToGitopsFiltersMapOutputWithContext(ctx context.Context) GitopsFiltersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitopsFiltersMapOutput)
}

type GitopsFiltersOutput struct{ *pulumi.OutputState }

func (GitopsFiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitopsFilters)(nil)).Elem()
}

func (o GitopsFiltersOutput) ToGitopsFiltersOutput() GitopsFiltersOutput {
	return o
}

func (o GitopsFiltersOutput) ToGitopsFiltersOutputWithContext(ctx context.Context) GitopsFiltersOutput {
	return o
}

// Properties of the filters entity defined in Harness as a JSON string. All values should be arrays of strings. Example: jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})
func (o GitopsFiltersOutput) FilterProperties() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsFilters) pulumi.StringOutput { return v.FilterProperties }).(pulumi.StringOutput)
}

// This indicates visibility of filters, by default it is Everyone.
func (o GitopsFiltersOutput) FilterVisibility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitopsFilters) pulumi.StringPtrOutput { return v.FilterVisibility }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o GitopsFiltersOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsFilters) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the GitOps filters.
func (o GitopsFiltersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsFilters) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Organization Identifier for the Entity.
func (o GitopsFiltersOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsFilters) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Project Identifier for the Entity.
func (o GitopsFiltersOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsFilters) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Type of GitOps filters.
func (o GitopsFiltersOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsFilters) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type GitopsFiltersArrayOutput struct{ *pulumi.OutputState }

func (GitopsFiltersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitopsFilters)(nil)).Elem()
}

func (o GitopsFiltersArrayOutput) ToGitopsFiltersArrayOutput() GitopsFiltersArrayOutput {
	return o
}

func (o GitopsFiltersArrayOutput) ToGitopsFiltersArrayOutputWithContext(ctx context.Context) GitopsFiltersArrayOutput {
	return o
}

func (o GitopsFiltersArrayOutput) Index(i pulumi.IntInput) GitopsFiltersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitopsFilters {
		return vs[0].([]*GitopsFilters)[vs[1].(int)]
	}).(GitopsFiltersOutput)
}

type GitopsFiltersMapOutput struct{ *pulumi.OutputState }

func (GitopsFiltersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitopsFilters)(nil)).Elem()
}

func (o GitopsFiltersMapOutput) ToGitopsFiltersMapOutput() GitopsFiltersMapOutput {
	return o
}

func (o GitopsFiltersMapOutput) ToGitopsFiltersMapOutputWithContext(ctx context.Context) GitopsFiltersMapOutput {
	return o
}

func (o GitopsFiltersMapOutput) MapIndex(k pulumi.StringInput) GitopsFiltersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitopsFilters {
		return vs[0].(map[string]*GitopsFilters)[vs[1].(string)]
	}).(GitopsFiltersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitopsFiltersInput)(nil)).Elem(), &GitopsFilters{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitopsFiltersArrayInput)(nil)).Elem(), GitopsFiltersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitopsFiltersMapInput)(nil)).Elem(), GitopsFiltersMap{})
	pulumi.RegisterOutputType(GitopsFiltersOutput{})
	pulumi.RegisterOutputType(GitopsFiltersArrayOutput{})
	pulumi.RegisterOutputType(GitopsFiltersMapOutput{})
}
