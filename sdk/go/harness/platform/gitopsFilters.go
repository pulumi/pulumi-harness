// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating and managing Harness GitOps Filters.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"agentIdentifiers": []string{
//					"your_agent_identifier",
//				},
//				"clusters": []string{
//					"https://your-cluster-url",
//				},
//				"healthStatus": []string{
//					"Unknown",
//					"Progressing",
//					"Suspended",
//					"Healthy",
//					"Degraded",
//					"Missing",
//				},
//				"namespaces": []string{
//					"your-namespace",
//				},
//				"repositories": []string{
//					"your-repo",
//				},
//				"syncStatus": []string{
//					"OutOfSync",
//					"Synced",
//					"Unknown",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = platform.NewGitopsFilters(ctx, "example", &platform.GitopsFiltersArgs{
//				Name:             pulumi.String("example_filter"),
//				OrgId:            pulumi.String("your_org_id"),
//				ProjectId:        pulumi.String("your_project_id"),
//				Identifier:       pulumi.String("example_filter"),
//				Type:             pulumi.String("APPLICATION"),
//				FilterProperties: pulumi.String(json0),
//				FilterVisibility: pulumi.String("OnlyCreator"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Filter Properties Reference
//
// The `filterProperties` field supports the following filter types:
//
// > **Note:** The following filter properties are only valid for filter type "APPLICATION". Different filter types may support different properties.
//
// * `agentIdentifiers` - Array of GitOps agent identifiers to filter by.
// * `clusters` - Array of cluster URLs to filter by.
// * `healthStatus` - Array of health status values to filter by. Valid values include: "Unknown", "Progressing", "Suspended", "Healthy", "Degraded", "Missing".
// * `namespaces` - Array of Kubernetes namespaces to filter by.
// * `repositories` - Array of Git repository URLs to filter by.
// * `syncStatus` - Array of sync status values to filter by. Valid values include: "OutOfSync", "Synced", "Unknown".
//
// ## Schema Attributes Reference
//
// * `id` - Identifier of the GitOps filter.
//
// ## Import
//
// GitOps filters can be imported using a composite ID formed of organization ID, project ID, filter ID, and filter type.
//
// bash
//
// Format: <org_id>/<project_id>/<filter_id>/<filter_type>
//
// ```sh
// $ pulumi import harness:platform/gitopsFilters:GitopsFilters example org_id/project_id/filter_id/APPLICATION
// ```
type GitopsFilters struct {
	pulumi.CustomResourceState

	// Properties of the filter entity defined in Harness as a JSON string. All values should be arrays of strings. Example: `jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})`.
	FilterProperties pulumi.StringOutput `pulumi:"filterProperties"`
	// Visibility of the filter. Valid values are "EveryOne" and "OnlyCreator". Default is "EveryOne".
	FilterVisibility pulumi.StringPtrOutput `pulumi:"filterVisibility"`
	// Unique identifier of the GitOps filter.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the GitOps filter.
	Name pulumi.StringOutput `pulumi:"name"`
	// Organization identifier for the GitOps filter.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Project identifier for the GitOps filter.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Type of GitOps filter. Currently, only "APPLICATION" is supported.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewGitopsFilters registers a new resource with the given unique name, arguments, and options.
func NewGitopsFilters(ctx *pulumi.Context,
	name string, args *GitopsFiltersArgs, opts ...pulumi.ResourceOption) (*GitopsFilters, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FilterProperties == nil {
		return nil, errors.New("invalid value for required argument 'FilterProperties'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GitopsFilters
	err := ctx.RegisterResource("harness:platform/gitopsFilters:GitopsFilters", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitopsFilters gets an existing GitopsFilters resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitopsFilters(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitopsFiltersState, opts ...pulumi.ResourceOption) (*GitopsFilters, error) {
	var resource GitopsFilters
	err := ctx.ReadResource("harness:platform/gitopsFilters:GitopsFilters", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitopsFilters resources.
type gitopsFiltersState struct {
	// Properties of the filter entity defined in Harness as a JSON string. All values should be arrays of strings. Example: `jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})`.
	FilterProperties *string `pulumi:"filterProperties"`
	// Visibility of the filter. Valid values are "EveryOne" and "OnlyCreator". Default is "EveryOne".
	FilterVisibility *string `pulumi:"filterVisibility"`
	// Unique identifier of the GitOps filter.
	Identifier *string `pulumi:"identifier"`
	// Name of the GitOps filter.
	Name *string `pulumi:"name"`
	// Organization identifier for the GitOps filter.
	OrgId *string `pulumi:"orgId"`
	// Project identifier for the GitOps filter.
	ProjectId *string `pulumi:"projectId"`
	// Type of GitOps filter. Currently, only "APPLICATION" is supported.
	Type *string `pulumi:"type"`
}

type GitopsFiltersState struct {
	// Properties of the filter entity defined in Harness as a JSON string. All values should be arrays of strings. Example: `jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})`.
	FilterProperties pulumi.StringPtrInput
	// Visibility of the filter. Valid values are "EveryOne" and "OnlyCreator". Default is "EveryOne".
	FilterVisibility pulumi.StringPtrInput
	// Unique identifier of the GitOps filter.
	Identifier pulumi.StringPtrInput
	// Name of the GitOps filter.
	Name pulumi.StringPtrInput
	// Organization identifier for the GitOps filter.
	OrgId pulumi.StringPtrInput
	// Project identifier for the GitOps filter.
	ProjectId pulumi.StringPtrInput
	// Type of GitOps filter. Currently, only "APPLICATION" is supported.
	Type pulumi.StringPtrInput
}

func (GitopsFiltersState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitopsFiltersState)(nil)).Elem()
}

type gitopsFiltersArgs struct {
	// Properties of the filter entity defined in Harness as a JSON string. All values should be arrays of strings. Example: `jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})`.
	FilterProperties string `pulumi:"filterProperties"`
	// Visibility of the filter. Valid values are "EveryOne" and "OnlyCreator". Default is "EveryOne".
	FilterVisibility *string `pulumi:"filterVisibility"`
	// Unique identifier of the GitOps filter.
	Identifier string `pulumi:"identifier"`
	// Name of the GitOps filter.
	Name *string `pulumi:"name"`
	// Organization identifier for the GitOps filter.
	OrgId string `pulumi:"orgId"`
	// Project identifier for the GitOps filter.
	ProjectId string `pulumi:"projectId"`
	// Type of GitOps filter. Currently, only "APPLICATION" is supported.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a GitopsFilters resource.
type GitopsFiltersArgs struct {
	// Properties of the filter entity defined in Harness as a JSON string. All values should be arrays of strings. Example: `jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})`.
	FilterProperties pulumi.StringInput
	// Visibility of the filter. Valid values are "EveryOne" and "OnlyCreator". Default is "EveryOne".
	FilterVisibility pulumi.StringPtrInput
	// Unique identifier of the GitOps filter.
	Identifier pulumi.StringInput
	// Name of the GitOps filter.
	Name pulumi.StringPtrInput
	// Organization identifier for the GitOps filter.
	OrgId pulumi.StringInput
	// Project identifier for the GitOps filter.
	ProjectId pulumi.StringInput
	// Type of GitOps filter. Currently, only "APPLICATION" is supported.
	Type pulumi.StringInput
}

func (GitopsFiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitopsFiltersArgs)(nil)).Elem()
}

type GitopsFiltersInput interface {
	pulumi.Input

	ToGitopsFiltersOutput() GitopsFiltersOutput
	ToGitopsFiltersOutputWithContext(ctx context.Context) GitopsFiltersOutput
}

func (*GitopsFilters) ElementType() reflect.Type {
	return reflect.TypeOf((**GitopsFilters)(nil)).Elem()
}

func (i *GitopsFilters) ToGitopsFiltersOutput() GitopsFiltersOutput {
	return i.ToGitopsFiltersOutputWithContext(context.Background())
}

func (i *GitopsFilters) ToGitopsFiltersOutputWithContext(ctx context.Context) GitopsFiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitopsFiltersOutput)
}

// GitopsFiltersArrayInput is an input type that accepts GitopsFiltersArray and GitopsFiltersArrayOutput values.
// You can construct a concrete instance of `GitopsFiltersArrayInput` via:
//
//	GitopsFiltersArray{ GitopsFiltersArgs{...} }
type GitopsFiltersArrayInput interface {
	pulumi.Input

	ToGitopsFiltersArrayOutput() GitopsFiltersArrayOutput
	ToGitopsFiltersArrayOutputWithContext(context.Context) GitopsFiltersArrayOutput
}

type GitopsFiltersArray []GitopsFiltersInput

func (GitopsFiltersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitopsFilters)(nil)).Elem()
}

func (i GitopsFiltersArray) ToGitopsFiltersArrayOutput() GitopsFiltersArrayOutput {
	return i.ToGitopsFiltersArrayOutputWithContext(context.Background())
}

func (i GitopsFiltersArray) ToGitopsFiltersArrayOutputWithContext(ctx context.Context) GitopsFiltersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitopsFiltersArrayOutput)
}

// GitopsFiltersMapInput is an input type that accepts GitopsFiltersMap and GitopsFiltersMapOutput values.
// You can construct a concrete instance of `GitopsFiltersMapInput` via:
//
//	GitopsFiltersMap{ "key": GitopsFiltersArgs{...} }
type GitopsFiltersMapInput interface {
	pulumi.Input

	ToGitopsFiltersMapOutput() GitopsFiltersMapOutput
	ToGitopsFiltersMapOutputWithContext(context.Context) GitopsFiltersMapOutput
}

type GitopsFiltersMap map[string]GitopsFiltersInput

func (GitopsFiltersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitopsFilters)(nil)).Elem()
}

func (i GitopsFiltersMap) ToGitopsFiltersMapOutput() GitopsFiltersMapOutput {
	return i.ToGitopsFiltersMapOutputWithContext(context.Background())
}

func (i GitopsFiltersMap) ToGitopsFiltersMapOutputWithContext(ctx context.Context) GitopsFiltersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitopsFiltersMapOutput)
}

type GitopsFiltersOutput struct{ *pulumi.OutputState }

func (GitopsFiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitopsFilters)(nil)).Elem()
}

func (o GitopsFiltersOutput) ToGitopsFiltersOutput() GitopsFiltersOutput {
	return o
}

func (o GitopsFiltersOutput) ToGitopsFiltersOutputWithContext(ctx context.Context) GitopsFiltersOutput {
	return o
}

// Properties of the filter entity defined in Harness as a JSON string. All values should be arrays of strings. Example: `jsonencode({"healthStatus": ["Healthy", "Degraded"], "syncStatus": ["Synced"]})`.
func (o GitopsFiltersOutput) FilterProperties() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsFilters) pulumi.StringOutput { return v.FilterProperties }).(pulumi.StringOutput)
}

// Visibility of the filter. Valid values are "EveryOne" and "OnlyCreator". Default is "EveryOne".
func (o GitopsFiltersOutput) FilterVisibility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitopsFilters) pulumi.StringPtrOutput { return v.FilterVisibility }).(pulumi.StringPtrOutput)
}

// Unique identifier of the GitOps filter.
func (o GitopsFiltersOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsFilters) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the GitOps filter.
func (o GitopsFiltersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsFilters) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Organization identifier for the GitOps filter.
func (o GitopsFiltersOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsFilters) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Project identifier for the GitOps filter.
func (o GitopsFiltersOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsFilters) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Type of GitOps filter. Currently, only "APPLICATION" is supported.
func (o GitopsFiltersOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsFilters) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type GitopsFiltersArrayOutput struct{ *pulumi.OutputState }

func (GitopsFiltersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitopsFilters)(nil)).Elem()
}

func (o GitopsFiltersArrayOutput) ToGitopsFiltersArrayOutput() GitopsFiltersArrayOutput {
	return o
}

func (o GitopsFiltersArrayOutput) ToGitopsFiltersArrayOutputWithContext(ctx context.Context) GitopsFiltersArrayOutput {
	return o
}

func (o GitopsFiltersArrayOutput) Index(i pulumi.IntInput) GitopsFiltersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitopsFilters {
		return vs[0].([]*GitopsFilters)[vs[1].(int)]
	}).(GitopsFiltersOutput)
}

type GitopsFiltersMapOutput struct{ *pulumi.OutputState }

func (GitopsFiltersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitopsFilters)(nil)).Elem()
}

func (o GitopsFiltersMapOutput) ToGitopsFiltersMapOutput() GitopsFiltersMapOutput {
	return o
}

func (o GitopsFiltersMapOutput) ToGitopsFiltersMapOutputWithContext(ctx context.Context) GitopsFiltersMapOutput {
	return o
}

func (o GitopsFiltersMapOutput) MapIndex(k pulumi.StringInput) GitopsFiltersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitopsFilters {
		return vs[0].(map[string]*GitopsFilters)[vs[1].(string)]
	}).(GitopsFiltersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitopsFiltersInput)(nil)).Elem(), &GitopsFilters{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitopsFiltersArrayInput)(nil)).Elem(), GitopsFiltersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitopsFiltersMapInput)(nil)).Elem(), GitopsFiltersMap{})
	pulumi.RegisterOutputType(GitopsFiltersOutput{})
	pulumi.RegisterOutputType(GitopsFiltersArrayOutput{})
	pulumi.RegisterOutputType(GitopsFiltersMapOutput{})
}
