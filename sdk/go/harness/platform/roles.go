// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating roles.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewRoles(ctx, "example", &platform.RolesArgs{
//				Identifier:  pulumi.String("identifier"),
//				Name:        pulumi.String("name"),
//				Description: pulumi.String("test"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//				Permissions: pulumi.StringArray{
//					pulumi.String("core_resourcegroup_view"),
//				},
//				AllowedScopeLevels: pulumi.StringArray{
//					pulumi.String("account"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import account level roles
//
// ```sh
// $ pulumi import harness:platform/roles:Roles example <roles_id>
// ```
//
// # Import org level roles
//
// ```sh
// $ pulumi import harness:platform/roles:Roles example <ord_id>/<roles_id>
// ```
//
// # Import project level roles
//
// ```sh
// $ pulumi import harness:platform/roles:Roles example <org_id>/<project_id>/<roles_id>
// ```
type Roles struct {
	pulumi.CustomResourceState

	// The scope levels at which this role can be used
	AllowedScopeLevels pulumi.StringArrayOutput `pulumi:"allowedScopeLevels"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// List of the permission identifiers
	Permissions pulumi.StringArrayOutput `pulumi:"permissions"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewRoles registers a new resource with the given unique name, arguments, and options.
func NewRoles(ctx *pulumi.Context,
	name string, args *RolesArgs, opts ...pulumi.ResourceOption) (*Roles, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Roles
	err := ctx.RegisterResource("harness:platform/roles:Roles", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoles gets an existing Roles resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoles(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RolesState, opts ...pulumi.ResourceOption) (*Roles, error) {
	var resource Roles
	err := ctx.ReadResource("harness:platform/roles:Roles", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Roles resources.
type rolesState struct {
	// The scope levels at which this role can be used
	AllowedScopeLevels []string `pulumi:"allowedScopeLevels"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// List of the permission identifiers
	Permissions []string `pulumi:"permissions"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

type RolesState struct {
	// The scope levels at which this role can be used
	AllowedScopeLevels pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// List of the permission identifiers
	Permissions pulumi.StringArrayInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (RolesState) ElementType() reflect.Type {
	return reflect.TypeOf((*rolesState)(nil)).Elem()
}

type rolesArgs struct {
	// The scope levels at which this role can be used
	AllowedScopeLevels []string `pulumi:"allowedScopeLevels"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// List of the permission identifiers
	Permissions []string `pulumi:"permissions"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a Roles resource.
type RolesArgs struct {
	// The scope levels at which this role can be used
	AllowedScopeLevels pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// List of the permission identifiers
	Permissions pulumi.StringArrayInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (RolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rolesArgs)(nil)).Elem()
}

type RolesInput interface {
	pulumi.Input

	ToRolesOutput() RolesOutput
	ToRolesOutputWithContext(ctx context.Context) RolesOutput
}

func (*Roles) ElementType() reflect.Type {
	return reflect.TypeOf((**Roles)(nil)).Elem()
}

func (i *Roles) ToRolesOutput() RolesOutput {
	return i.ToRolesOutputWithContext(context.Background())
}

func (i *Roles) ToRolesOutputWithContext(ctx context.Context) RolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolesOutput)
}

// RolesArrayInput is an input type that accepts RolesArray and RolesArrayOutput values.
// You can construct a concrete instance of `RolesArrayInput` via:
//
//	RolesArray{ RolesArgs{...} }
type RolesArrayInput interface {
	pulumi.Input

	ToRolesArrayOutput() RolesArrayOutput
	ToRolesArrayOutputWithContext(context.Context) RolesArrayOutput
}

type RolesArray []RolesInput

func (RolesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Roles)(nil)).Elem()
}

func (i RolesArray) ToRolesArrayOutput() RolesArrayOutput {
	return i.ToRolesArrayOutputWithContext(context.Background())
}

func (i RolesArray) ToRolesArrayOutputWithContext(ctx context.Context) RolesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolesArrayOutput)
}

// RolesMapInput is an input type that accepts RolesMap and RolesMapOutput values.
// You can construct a concrete instance of `RolesMapInput` via:
//
//	RolesMap{ "key": RolesArgs{...} }
type RolesMapInput interface {
	pulumi.Input

	ToRolesMapOutput() RolesMapOutput
	ToRolesMapOutputWithContext(context.Context) RolesMapOutput
}

type RolesMap map[string]RolesInput

func (RolesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Roles)(nil)).Elem()
}

func (i RolesMap) ToRolesMapOutput() RolesMapOutput {
	return i.ToRolesMapOutputWithContext(context.Background())
}

func (i RolesMap) ToRolesMapOutputWithContext(ctx context.Context) RolesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolesMapOutput)
}

type RolesOutput struct{ *pulumi.OutputState }

func (RolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Roles)(nil)).Elem()
}

func (o RolesOutput) ToRolesOutput() RolesOutput {
	return o
}

func (o RolesOutput) ToRolesOutputWithContext(ctx context.Context) RolesOutput {
	return o
}

// The scope levels at which this role can be used
func (o RolesOutput) AllowedScopeLevels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Roles) pulumi.StringArrayOutput { return v.AllowedScopeLevels }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o RolesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Roles) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o RolesOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Roles) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o RolesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Roles) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o RolesOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Roles) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// List of the permission identifiers
func (o RolesOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Roles) pulumi.StringArrayOutput { return v.Permissions }).(pulumi.StringArrayOutput)
}

// Unique identifier of the project.
func (o RolesOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Roles) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o RolesOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Roles) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type RolesArrayOutput struct{ *pulumi.OutputState }

func (RolesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Roles)(nil)).Elem()
}

func (o RolesArrayOutput) ToRolesArrayOutput() RolesArrayOutput {
	return o
}

func (o RolesArrayOutput) ToRolesArrayOutputWithContext(ctx context.Context) RolesArrayOutput {
	return o
}

func (o RolesArrayOutput) Index(i pulumi.IntInput) RolesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Roles {
		return vs[0].([]*Roles)[vs[1].(int)]
	}).(RolesOutput)
}

type RolesMapOutput struct{ *pulumi.OutputState }

func (RolesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Roles)(nil)).Elem()
}

func (o RolesMapOutput) ToRolesMapOutput() RolesMapOutput {
	return o
}

func (o RolesMapOutput) ToRolesMapOutputWithContext(ctx context.Context) RolesMapOutput {
	return o
}

func (o RolesMapOutput) MapIndex(k pulumi.StringInput) RolesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Roles {
		return vs[0].(map[string]*Roles)[vs[1].(string)]
	}).(RolesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RolesInput)(nil)).Elem(), &Roles{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolesArrayInput)(nil)).Elem(), RolesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolesMapInput)(nil)).Elem(), RolesMap{})
	pulumi.RegisterOutputType(RolesOutput{})
	pulumi.RegisterOutputType(RolesArrayOutput{})
	pulumi.RegisterOutputType(RolesMapOutput{})
}
