// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for Manual Deployment Freeze Window.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewManualFreeze(ctx, "example", &platform.ManualFreezeArgs{
//				Identifier: pulumi.String("identifier"),
//				OrgId:      pulumi.String("orgIdentifier"),
//				ProjectId:  pulumi.String("projectIdentifier"),
//				AccountId:  pulumi.String("accountIdentifier"),
//				Yaml: pulumi.String(`freeze:
//	  name: freezeName
//	  identifier: identifier
//	  entityConfigs:
//	    - name: r1
//	      entities:
//	        - filterType: All
//	          type: Org
//	        - filterType: All
//	          type: Project
//	        - filterType: All
//	          type: Service
//	        - filterType: All
//	          type: EnvType
//	  status: Disabled
//	  description: hi
//	  windows:
//	  - timeZone: Asia/Calcutta
//	    startTime: 2023-05-03 04:16 PM
//	    duration: 30m
//	    recurrence:
//	      type: Daily
//	  notificationRules: []
//	  tags: {}
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import an account level freeze
//
// ```sh
// $ pulumi import harness:platform/manualFreeze:ManualFreeze example <freeze_id>
// ```
//
// # Import an organization level freeze
//
// ```sh
// $ pulumi import harness:platform/manualFreeze:ManualFreeze example <org_id>/<freeze_id>
// ```
//
// # Import project level freeze
//
// ```sh
// $ pulumi import harness:platform/manualFreeze:ManualFreeze example <org_id>/<project_id>/<freeze_id>
// ```
type ManualFreeze struct {
	pulumi.CustomResourceState

	// Account Identifier of the freeze
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Current or upcoming windows
	CurrentOrUpcomingWindows ManualFreezeCurrentOrUpcomingWindowArrayOutput `pulumi:"currentOrUpcomingWindows"`
	// Description of the freeze
	Description pulumi.StringOutput `pulumi:"description"`
	// Freeze windows in the freeze response
	FreezeWindows ManualFreezeFreezeWindowArrayOutput `pulumi:"freezeWindows"`
	// Identifier of the freeze
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the freeze
	Name pulumi.StringOutput `pulumi:"name"`
	// Organization identifier of the freeze
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Project identifier of the freeze
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Scope of the freeze
	Scope pulumi.StringOutput `pulumi:"scope"`
	// Status of the freeze
	Status pulumi.StringOutput `pulumi:"status"`
	// Tags associated with the freeze
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Type of freeze
	Type pulumi.StringOutput `pulumi:"type"`
	// Yaml of the freeze
	Yaml pulumi.StringOutput `pulumi:"yaml"`
}

// NewManualFreeze registers a new resource with the given unique name, arguments, and options.
func NewManualFreeze(ctx *pulumi.Context,
	name string, args *ManualFreezeArgs, opts ...pulumi.ResourceOption) (*ManualFreeze, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Yaml == nil {
		return nil, errors.New("invalid value for required argument 'Yaml'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManualFreeze
	err := ctx.RegisterResource("harness:platform/manualFreeze:ManualFreeze", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManualFreeze gets an existing ManualFreeze resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManualFreeze(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManualFreezeState, opts ...pulumi.ResourceOption) (*ManualFreeze, error) {
	var resource ManualFreeze
	err := ctx.ReadResource("harness:platform/manualFreeze:ManualFreeze", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManualFreeze resources.
type manualFreezeState struct {
	// Account Identifier of the freeze
	AccountId *string `pulumi:"accountId"`
	// Current or upcoming windows
	CurrentOrUpcomingWindows []ManualFreezeCurrentOrUpcomingWindow `pulumi:"currentOrUpcomingWindows"`
	// Description of the freeze
	Description *string `pulumi:"description"`
	// Freeze windows in the freeze response
	FreezeWindows []ManualFreezeFreezeWindow `pulumi:"freezeWindows"`
	// Identifier of the freeze
	Identifier *string `pulumi:"identifier"`
	// Name of the freeze
	Name *string `pulumi:"name"`
	// Organization identifier of the freeze
	OrgId *string `pulumi:"orgId"`
	// Project identifier of the freeze
	ProjectId *string `pulumi:"projectId"`
	// Scope of the freeze
	Scope *string `pulumi:"scope"`
	// Status of the freeze
	Status *string `pulumi:"status"`
	// Tags associated with the freeze
	Tags []string `pulumi:"tags"`
	// Type of freeze
	Type *string `pulumi:"type"`
	// Yaml of the freeze
	Yaml *string `pulumi:"yaml"`
}

type ManualFreezeState struct {
	// Account Identifier of the freeze
	AccountId pulumi.StringPtrInput
	// Current or upcoming windows
	CurrentOrUpcomingWindows ManualFreezeCurrentOrUpcomingWindowArrayInput
	// Description of the freeze
	Description pulumi.StringPtrInput
	// Freeze windows in the freeze response
	FreezeWindows ManualFreezeFreezeWindowArrayInput
	// Identifier of the freeze
	Identifier pulumi.StringPtrInput
	// Name of the freeze
	Name pulumi.StringPtrInput
	// Organization identifier of the freeze
	OrgId pulumi.StringPtrInput
	// Project identifier of the freeze
	ProjectId pulumi.StringPtrInput
	// Scope of the freeze
	Scope pulumi.StringPtrInput
	// Status of the freeze
	Status pulumi.StringPtrInput
	// Tags associated with the freeze
	Tags pulumi.StringArrayInput
	// Type of freeze
	Type pulumi.StringPtrInput
	// Yaml of the freeze
	Yaml pulumi.StringPtrInput
}

func (ManualFreezeState) ElementType() reflect.Type {
	return reflect.TypeOf((*manualFreezeState)(nil)).Elem()
}

type manualFreezeArgs struct {
	// Account Identifier of the freeze
	AccountId string `pulumi:"accountId"`
	// Identifier of the freeze
	Identifier string `pulumi:"identifier"`
	// Organization identifier of the freeze
	OrgId *string `pulumi:"orgId"`
	// Project identifier of the freeze
	ProjectId *string `pulumi:"projectId"`
	// Yaml of the freeze
	Yaml string `pulumi:"yaml"`
}

// The set of arguments for constructing a ManualFreeze resource.
type ManualFreezeArgs struct {
	// Account Identifier of the freeze
	AccountId pulumi.StringInput
	// Identifier of the freeze
	Identifier pulumi.StringInput
	// Organization identifier of the freeze
	OrgId pulumi.StringPtrInput
	// Project identifier of the freeze
	ProjectId pulumi.StringPtrInput
	// Yaml of the freeze
	Yaml pulumi.StringInput
}

func (ManualFreezeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*manualFreezeArgs)(nil)).Elem()
}

type ManualFreezeInput interface {
	pulumi.Input

	ToManualFreezeOutput() ManualFreezeOutput
	ToManualFreezeOutputWithContext(ctx context.Context) ManualFreezeOutput
}

func (*ManualFreeze) ElementType() reflect.Type {
	return reflect.TypeOf((**ManualFreeze)(nil)).Elem()
}

func (i *ManualFreeze) ToManualFreezeOutput() ManualFreezeOutput {
	return i.ToManualFreezeOutputWithContext(context.Background())
}

func (i *ManualFreeze) ToManualFreezeOutputWithContext(ctx context.Context) ManualFreezeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualFreezeOutput)
}

// ManualFreezeArrayInput is an input type that accepts ManualFreezeArray and ManualFreezeArrayOutput values.
// You can construct a concrete instance of `ManualFreezeArrayInput` via:
//
//	ManualFreezeArray{ ManualFreezeArgs{...} }
type ManualFreezeArrayInput interface {
	pulumi.Input

	ToManualFreezeArrayOutput() ManualFreezeArrayOutput
	ToManualFreezeArrayOutputWithContext(context.Context) ManualFreezeArrayOutput
}

type ManualFreezeArray []ManualFreezeInput

func (ManualFreezeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManualFreeze)(nil)).Elem()
}

func (i ManualFreezeArray) ToManualFreezeArrayOutput() ManualFreezeArrayOutput {
	return i.ToManualFreezeArrayOutputWithContext(context.Background())
}

func (i ManualFreezeArray) ToManualFreezeArrayOutputWithContext(ctx context.Context) ManualFreezeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualFreezeArrayOutput)
}

// ManualFreezeMapInput is an input type that accepts ManualFreezeMap and ManualFreezeMapOutput values.
// You can construct a concrete instance of `ManualFreezeMapInput` via:
//
//	ManualFreezeMap{ "key": ManualFreezeArgs{...} }
type ManualFreezeMapInput interface {
	pulumi.Input

	ToManualFreezeMapOutput() ManualFreezeMapOutput
	ToManualFreezeMapOutputWithContext(context.Context) ManualFreezeMapOutput
}

type ManualFreezeMap map[string]ManualFreezeInput

func (ManualFreezeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManualFreeze)(nil)).Elem()
}

func (i ManualFreezeMap) ToManualFreezeMapOutput() ManualFreezeMapOutput {
	return i.ToManualFreezeMapOutputWithContext(context.Background())
}

func (i ManualFreezeMap) ToManualFreezeMapOutputWithContext(ctx context.Context) ManualFreezeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualFreezeMapOutput)
}

type ManualFreezeOutput struct{ *pulumi.OutputState }

func (ManualFreezeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManualFreeze)(nil)).Elem()
}

func (o ManualFreezeOutput) ToManualFreezeOutput() ManualFreezeOutput {
	return o
}

func (o ManualFreezeOutput) ToManualFreezeOutputWithContext(ctx context.Context) ManualFreezeOutput {
	return o
}

// Account Identifier of the freeze
func (o ManualFreezeOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManualFreeze) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Current or upcoming windows
func (o ManualFreezeOutput) CurrentOrUpcomingWindows() ManualFreezeCurrentOrUpcomingWindowArrayOutput {
	return o.ApplyT(func(v *ManualFreeze) ManualFreezeCurrentOrUpcomingWindowArrayOutput {
		return v.CurrentOrUpcomingWindows
	}).(ManualFreezeCurrentOrUpcomingWindowArrayOutput)
}

// Description of the freeze
func (o ManualFreezeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ManualFreeze) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Freeze windows in the freeze response
func (o ManualFreezeOutput) FreezeWindows() ManualFreezeFreezeWindowArrayOutput {
	return o.ApplyT(func(v *ManualFreeze) ManualFreezeFreezeWindowArrayOutput { return v.FreezeWindows }).(ManualFreezeFreezeWindowArrayOutput)
}

// Identifier of the freeze
func (o ManualFreezeOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ManualFreeze) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the freeze
func (o ManualFreezeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManualFreeze) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Organization identifier of the freeze
func (o ManualFreezeOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManualFreeze) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Project identifier of the freeze
func (o ManualFreezeOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManualFreeze) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Scope of the freeze
func (o ManualFreezeOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *ManualFreeze) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

// Status of the freeze
func (o ManualFreezeOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ManualFreeze) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Tags associated with the freeze
func (o ManualFreezeOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManualFreeze) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Type of freeze
func (o ManualFreezeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ManualFreeze) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Yaml of the freeze
func (o ManualFreezeOutput) Yaml() pulumi.StringOutput {
	return o.ApplyT(func(v *ManualFreeze) pulumi.StringOutput { return v.Yaml }).(pulumi.StringOutput)
}

type ManualFreezeArrayOutput struct{ *pulumi.OutputState }

func (ManualFreezeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManualFreeze)(nil)).Elem()
}

func (o ManualFreezeArrayOutput) ToManualFreezeArrayOutput() ManualFreezeArrayOutput {
	return o
}

func (o ManualFreezeArrayOutput) ToManualFreezeArrayOutputWithContext(ctx context.Context) ManualFreezeArrayOutput {
	return o
}

func (o ManualFreezeArrayOutput) Index(i pulumi.IntInput) ManualFreezeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManualFreeze {
		return vs[0].([]*ManualFreeze)[vs[1].(int)]
	}).(ManualFreezeOutput)
}

type ManualFreezeMapOutput struct{ *pulumi.OutputState }

func (ManualFreezeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManualFreeze)(nil)).Elem()
}

func (o ManualFreezeMapOutput) ToManualFreezeMapOutput() ManualFreezeMapOutput {
	return o
}

func (o ManualFreezeMapOutput) ToManualFreezeMapOutputWithContext(ctx context.Context) ManualFreezeMapOutput {
	return o
}

func (o ManualFreezeMapOutput) MapIndex(k pulumi.StringInput) ManualFreezeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManualFreeze {
		return vs[0].(map[string]*ManualFreeze)[vs[1].(string)]
	}).(ManualFreezeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManualFreezeInput)(nil)).Elem(), &ManualFreeze{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManualFreezeArrayInput)(nil)).Elem(), ManualFreezeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManualFreezeMapInput)(nil)).Elem(), ManualFreezeMap{})
	pulumi.RegisterOutputType(ManualFreezeOutput{})
	pulumi.RegisterOutputType(ManualFreezeArrayOutput{})
	pulumi.RegisterOutputType(ManualFreezeMapOutput{})
}
