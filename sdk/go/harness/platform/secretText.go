// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating secret of type secret text
//
// ## Import
//
// # Import account level secret text
//
// ```sh
// $ pulumi import harness:platform/secretText:SecretText example <secret_text_id>
// ```
//
// # Import org level secret text
//
// ```sh
// $ pulumi import harness:platform/secretText:SecretText example <ord_id>/<secret_text_id>
// ```
//
// # Import project level secret text
//
// ```sh
// $ pulumi import harness:platform/secretText:SecretText example <org_id>/<project_id>/<secret_text_id>
// ```
type SecretText struct {
	pulumi.CustomResourceState

	// Additional Metadata for the Secret
	AdditionalMetadatas SecretTextAdditionalMetadataArrayOutput `pulumi:"additionalMetadatas"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Identifier of the Secret Manager used to manage the secret.
	SecretManagerIdentifier pulumi.StringOutput `pulumi:"secretManagerIdentifier"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Value of the Secret
	Value pulumi.StringPtrOutput `pulumi:"value"`
	// This has details to specify if the secret value is Inline or Reference.
	ValueType pulumi.StringOutput `pulumi:"valueType"`
}

// NewSecretText registers a new resource with the given unique name, arguments, and options.
func NewSecretText(ctx *pulumi.Context,
	name string, args *SecretTextArgs, opts ...pulumi.ResourceOption) (*SecretText, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.SecretManagerIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'SecretManagerIdentifier'")
	}
	if args.ValueType == nil {
		return nil, errors.New("invalid value for required argument 'ValueType'")
	}
	if args.Value != nil {
		args.Value = pulumi.ToSecret(args.Value).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"value",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretText
	err := ctx.RegisterResource("harness:platform/secretText:SecretText", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretText gets an existing SecretText resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretText(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretTextState, opts ...pulumi.ResourceOption) (*SecretText, error) {
	var resource SecretText
	err := ctx.ReadResource("harness:platform/secretText:SecretText", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretText resources.
type secretTextState struct {
	// Additional Metadata for the Secret
	AdditionalMetadatas []SecretTextAdditionalMetadata `pulumi:"additionalMetadatas"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Identifier of the Secret Manager used to manage the secret.
	SecretManagerIdentifier *string `pulumi:"secretManagerIdentifier"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// Value of the Secret
	Value *string `pulumi:"value"`
	// This has details to specify if the secret value is Inline or Reference.
	ValueType *string `pulumi:"valueType"`
}

type SecretTextState struct {
	// Additional Metadata for the Secret
	AdditionalMetadatas SecretTextAdditionalMetadataArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Identifier of the Secret Manager used to manage the secret.
	SecretManagerIdentifier pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// Value of the Secret
	Value pulumi.StringPtrInput
	// This has details to specify if the secret value is Inline or Reference.
	ValueType pulumi.StringPtrInput
}

func (SecretTextState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretTextState)(nil)).Elem()
}

type secretTextArgs struct {
	// Additional Metadata for the Secret
	AdditionalMetadatas []SecretTextAdditionalMetadata `pulumi:"additionalMetadatas"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Identifier of the Secret Manager used to manage the secret.
	SecretManagerIdentifier string `pulumi:"secretManagerIdentifier"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// Value of the Secret
	Value *string `pulumi:"value"`
	// This has details to specify if the secret value is Inline or Reference.
	ValueType string `pulumi:"valueType"`
}

// The set of arguments for constructing a SecretText resource.
type SecretTextArgs struct {
	// Additional Metadata for the Secret
	AdditionalMetadatas SecretTextAdditionalMetadataArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Identifier of the Secret Manager used to manage the secret.
	SecretManagerIdentifier pulumi.StringInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// Value of the Secret
	Value pulumi.StringPtrInput
	// This has details to specify if the secret value is Inline or Reference.
	ValueType pulumi.StringInput
}

func (SecretTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretTextArgs)(nil)).Elem()
}

type SecretTextInput interface {
	pulumi.Input

	ToSecretTextOutput() SecretTextOutput
	ToSecretTextOutputWithContext(ctx context.Context) SecretTextOutput
}

func (*SecretText) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretText)(nil)).Elem()
}

func (i *SecretText) ToSecretTextOutput() SecretTextOutput {
	return i.ToSecretTextOutputWithContext(context.Background())
}

func (i *SecretText) ToSecretTextOutputWithContext(ctx context.Context) SecretTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretTextOutput)
}

// SecretTextArrayInput is an input type that accepts SecretTextArray and SecretTextArrayOutput values.
// You can construct a concrete instance of `SecretTextArrayInput` via:
//
//	SecretTextArray{ SecretTextArgs{...} }
type SecretTextArrayInput interface {
	pulumi.Input

	ToSecretTextArrayOutput() SecretTextArrayOutput
	ToSecretTextArrayOutputWithContext(context.Context) SecretTextArrayOutput
}

type SecretTextArray []SecretTextInput

func (SecretTextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretText)(nil)).Elem()
}

func (i SecretTextArray) ToSecretTextArrayOutput() SecretTextArrayOutput {
	return i.ToSecretTextArrayOutputWithContext(context.Background())
}

func (i SecretTextArray) ToSecretTextArrayOutputWithContext(ctx context.Context) SecretTextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretTextArrayOutput)
}

// SecretTextMapInput is an input type that accepts SecretTextMap and SecretTextMapOutput values.
// You can construct a concrete instance of `SecretTextMapInput` via:
//
//	SecretTextMap{ "key": SecretTextArgs{...} }
type SecretTextMapInput interface {
	pulumi.Input

	ToSecretTextMapOutput() SecretTextMapOutput
	ToSecretTextMapOutputWithContext(context.Context) SecretTextMapOutput
}

type SecretTextMap map[string]SecretTextInput

func (SecretTextMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretText)(nil)).Elem()
}

func (i SecretTextMap) ToSecretTextMapOutput() SecretTextMapOutput {
	return i.ToSecretTextMapOutputWithContext(context.Background())
}

func (i SecretTextMap) ToSecretTextMapOutputWithContext(ctx context.Context) SecretTextMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretTextMapOutput)
}

type SecretTextOutput struct{ *pulumi.OutputState }

func (SecretTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretText)(nil)).Elem()
}

func (o SecretTextOutput) ToSecretTextOutput() SecretTextOutput {
	return o
}

func (o SecretTextOutput) ToSecretTextOutputWithContext(ctx context.Context) SecretTextOutput {
	return o
}

// Additional Metadata for the Secret
func (o SecretTextOutput) AdditionalMetadatas() SecretTextAdditionalMetadataArrayOutput {
	return o.ApplyT(func(v *SecretText) SecretTextAdditionalMetadataArrayOutput { return v.AdditionalMetadatas }).(SecretTextAdditionalMetadataArrayOutput)
}

// Description of the resource.
func (o SecretTextOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretText) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o SecretTextOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretText) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o SecretTextOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretText) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o SecretTextOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretText) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o SecretTextOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretText) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Identifier of the Secret Manager used to manage the secret.
func (o SecretTextOutput) SecretManagerIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretText) pulumi.StringOutput { return v.SecretManagerIdentifier }).(pulumi.StringOutput)
}

// Tags to associate with the resource.
func (o SecretTextOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretText) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Value of the Secret
func (o SecretTextOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretText) pulumi.StringPtrOutput { return v.Value }).(pulumi.StringPtrOutput)
}

// This has details to specify if the secret value is Inline or Reference.
func (o SecretTextOutput) ValueType() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretText) pulumi.StringOutput { return v.ValueType }).(pulumi.StringOutput)
}

type SecretTextArrayOutput struct{ *pulumi.OutputState }

func (SecretTextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretText)(nil)).Elem()
}

func (o SecretTextArrayOutput) ToSecretTextArrayOutput() SecretTextArrayOutput {
	return o
}

func (o SecretTextArrayOutput) ToSecretTextArrayOutputWithContext(ctx context.Context) SecretTextArrayOutput {
	return o
}

func (o SecretTextArrayOutput) Index(i pulumi.IntInput) SecretTextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretText {
		return vs[0].([]*SecretText)[vs[1].(int)]
	}).(SecretTextOutput)
}

type SecretTextMapOutput struct{ *pulumi.OutputState }

func (SecretTextMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretText)(nil)).Elem()
}

func (o SecretTextMapOutput) ToSecretTextMapOutput() SecretTextMapOutput {
	return o
}

func (o SecretTextMapOutput) ToSecretTextMapOutputWithContext(ctx context.Context) SecretTextMapOutput {
	return o
}

func (o SecretTextMapOutput) MapIndex(k pulumi.StringInput) SecretTextOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretText {
		return vs[0].(map[string]*SecretText)[vs[1].(string)]
	}).(SecretTextOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretTextInput)(nil)).Elem(), &SecretText{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretTextArrayInput)(nil)).Elem(), SecretTextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretTextMapInput)(nil)).Elem(), SecretTextMap{})
	pulumi.RegisterOutputType(SecretTextOutput{})
	pulumi.RegisterOutputType(SecretTextArrayOutput{})
	pulumi.RegisterOutputType(SecretTextMapOutput{})
}
