// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Pdc connector.
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import account level pdc connector
//
// ```sh
// $ pulumi import harness:platform/connectorPdc:ConnectorPdc example <connector_id>
// ```
//
// # Import org level pdc connector
//
// ```sh
// $ pulumi import harness:platform/connectorPdc:ConnectorPdc example <ord_id>/<connector_id>
// ```
//
// # Import project level pdc connector
//
// ```sh
// $ pulumi import harness:platform/connectorPdc:ConnectorPdc example <org_id>/<project_id>/<connector_id>
// ```
type ConnectorPdc struct {
	pulumi.CustomResourceState

	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Host of the Physical data centers.
	Hosts ConnectorPdcHostArrayOutput `pulumi:"hosts"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewConnectorPdc registers a new resource with the given unique name, arguments, and options.
func NewConnectorPdc(ctx *pulumi.Context,
	name string, args *ConnectorPdcArgs, opts ...pulumi.ResourceOption) (*ConnectorPdc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Hosts == nil {
		return nil, errors.New("invalid value for required argument 'Hosts'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectorPdc
	err := ctx.RegisterResource("harness:platform/connectorPdc:ConnectorPdc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectorPdc gets an existing ConnectorPdc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectorPdc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorPdcState, opts ...pulumi.ResourceOption) (*ConnectorPdc, error) {
	var resource ConnectorPdc
	err := ctx.ReadResource("harness:platform/connectorPdc:ConnectorPdc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectorPdc resources.
type connectorPdcState struct {
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Host of the Physical data centers.
	Hosts []ConnectorPdcHost `pulumi:"hosts"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

type ConnectorPdcState struct {
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Host of the Physical data centers.
	Hosts ConnectorPdcHostArrayInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (ConnectorPdcState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorPdcState)(nil)).Elem()
}

type connectorPdcArgs struct {
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Host of the Physical data centers.
	Hosts []ConnectorPdcHost `pulumi:"hosts"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a ConnectorPdc resource.
type ConnectorPdcArgs struct {
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Host of the Physical data centers.
	Hosts ConnectorPdcHostArrayInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (ConnectorPdcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorPdcArgs)(nil)).Elem()
}

type ConnectorPdcInput interface {
	pulumi.Input

	ToConnectorPdcOutput() ConnectorPdcOutput
	ToConnectorPdcOutputWithContext(ctx context.Context) ConnectorPdcOutput
}

func (*ConnectorPdc) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorPdc)(nil)).Elem()
}

func (i *ConnectorPdc) ToConnectorPdcOutput() ConnectorPdcOutput {
	return i.ToConnectorPdcOutputWithContext(context.Background())
}

func (i *ConnectorPdc) ToConnectorPdcOutputWithContext(ctx context.Context) ConnectorPdcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorPdcOutput)
}

// ConnectorPdcArrayInput is an input type that accepts ConnectorPdcArray and ConnectorPdcArrayOutput values.
// You can construct a concrete instance of `ConnectorPdcArrayInput` via:
//
//	ConnectorPdcArray{ ConnectorPdcArgs{...} }
type ConnectorPdcArrayInput interface {
	pulumi.Input

	ToConnectorPdcArrayOutput() ConnectorPdcArrayOutput
	ToConnectorPdcArrayOutputWithContext(context.Context) ConnectorPdcArrayOutput
}

type ConnectorPdcArray []ConnectorPdcInput

func (ConnectorPdcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorPdc)(nil)).Elem()
}

func (i ConnectorPdcArray) ToConnectorPdcArrayOutput() ConnectorPdcArrayOutput {
	return i.ToConnectorPdcArrayOutputWithContext(context.Background())
}

func (i ConnectorPdcArray) ToConnectorPdcArrayOutputWithContext(ctx context.Context) ConnectorPdcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorPdcArrayOutput)
}

// ConnectorPdcMapInput is an input type that accepts ConnectorPdcMap and ConnectorPdcMapOutput values.
// You can construct a concrete instance of `ConnectorPdcMapInput` via:
//
//	ConnectorPdcMap{ "key": ConnectorPdcArgs{...} }
type ConnectorPdcMapInput interface {
	pulumi.Input

	ToConnectorPdcMapOutput() ConnectorPdcMapOutput
	ToConnectorPdcMapOutputWithContext(context.Context) ConnectorPdcMapOutput
}

type ConnectorPdcMap map[string]ConnectorPdcInput

func (ConnectorPdcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorPdc)(nil)).Elem()
}

func (i ConnectorPdcMap) ToConnectorPdcMapOutput() ConnectorPdcMapOutput {
	return i.ToConnectorPdcMapOutputWithContext(context.Background())
}

func (i ConnectorPdcMap) ToConnectorPdcMapOutputWithContext(ctx context.Context) ConnectorPdcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorPdcMapOutput)
}

type ConnectorPdcOutput struct{ *pulumi.OutputState }

func (ConnectorPdcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorPdc)(nil)).Elem()
}

func (o ConnectorPdcOutput) ToConnectorPdcOutput() ConnectorPdcOutput {
	return o
}

func (o ConnectorPdcOutput) ToConnectorPdcOutputWithContext(ctx context.Context) ConnectorPdcOutput {
	return o
}

// Tags to filter delegates for connection.
func (o ConnectorPdcOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorPdc) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o ConnectorPdcOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorPdc) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Host of the Physical data centers.
func (o ConnectorPdcOutput) Hosts() ConnectorPdcHostArrayOutput {
	return o.ApplyT(func(v *ConnectorPdc) ConnectorPdcHostArrayOutput { return v.Hosts }).(ConnectorPdcHostArrayOutput)
}

// Unique identifier of the resource.
func (o ConnectorPdcOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorPdc) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o ConnectorPdcOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorPdc) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o ConnectorPdcOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorPdc) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o ConnectorPdcOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorPdc) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o ConnectorPdcOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorPdc) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type ConnectorPdcArrayOutput struct{ *pulumi.OutputState }

func (ConnectorPdcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorPdc)(nil)).Elem()
}

func (o ConnectorPdcArrayOutput) ToConnectorPdcArrayOutput() ConnectorPdcArrayOutput {
	return o
}

func (o ConnectorPdcArrayOutput) ToConnectorPdcArrayOutputWithContext(ctx context.Context) ConnectorPdcArrayOutput {
	return o
}

func (o ConnectorPdcArrayOutput) Index(i pulumi.IntInput) ConnectorPdcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectorPdc {
		return vs[0].([]*ConnectorPdc)[vs[1].(int)]
	}).(ConnectorPdcOutput)
}

type ConnectorPdcMapOutput struct{ *pulumi.OutputState }

func (ConnectorPdcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorPdc)(nil)).Elem()
}

func (o ConnectorPdcMapOutput) ToConnectorPdcMapOutput() ConnectorPdcMapOutput {
	return o
}

func (o ConnectorPdcMapOutput) ToConnectorPdcMapOutputWithContext(ctx context.Context) ConnectorPdcMapOutput {
	return o
}

func (o ConnectorPdcMapOutput) MapIndex(k pulumi.StringInput) ConnectorPdcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectorPdc {
		return vs[0].(map[string]*ConnectorPdc)[vs[1].(string)]
	}).(ConnectorPdcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorPdcInput)(nil)).Elem(), &ConnectorPdc{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorPdcArrayInput)(nil)).Elem(), ConnectorPdcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorPdcMapInput)(nil)).Elem(), ConnectorPdcMap{})
	pulumi.RegisterOutputType(ConnectorPdcOutput{})
	pulumi.RegisterOutputType(ConnectorPdcArrayOutput{})
	pulumi.RegisterOutputType(ConnectorPdcMapOutput{})
}
