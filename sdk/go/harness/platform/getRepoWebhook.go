// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness Repo Webhook.
func LookupRepoWebhook(ctx *pulumi.Context, args *LookupRepoWebhookArgs, opts ...pulumi.InvokeOption) (*LookupRepoWebhookResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRepoWebhookResult
	err := ctx.Invoke("harness:platform/getRepoWebhook:getRepoWebhook", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepoWebhook.
type LookupRepoWebhookArgs struct {
	// Description of the webhook.
	Description *string `pulumi:"description"`
	// Webhook enabled.
	Enabled bool `pulumi:"enabled"`
	// Identifier of the webhook.
	Identifier string `pulumi:"identifier"`
	// Allow insecure connections for provided webhook URL.
	Insecure bool `pulumi:"insecure"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Identifier of the repository.
	RepoIdentifier string `pulumi:"repoIdentifier"`
	// Webhook secret which will be used to sign the webhook payload.
	Secret *string `pulumi:"secret"`
	// List of triggers of the webhook (keep empty for all triggers).
	Triggers []string `pulumi:"triggers"`
	// URL that's called by the webhook.
	Url string `pulumi:"url"`
}

// A collection of values returned by getRepoWebhook.
type LookupRepoWebhookResult struct {
	// Timestamp when the webhook was created.
	Created int `pulumi:"created"`
	// ID of the user who created the webhook.
	CreatedBy int `pulumi:"createdBy"`
	// Description of the webhook.
	Description *string `pulumi:"description"`
	// Webhook enabled.
	Enabled bool `pulumi:"enabled"`
	// Created webhook has secret encoding.
	HasSecret bool `pulumi:"hasSecret"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Identifier of the webhook.
	Identifier string `pulumi:"identifier"`
	// Allow insecure connections for provided webhook URL.
	Insecure bool `pulumi:"insecure"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Identifier of the repository.
	RepoIdentifier string `pulumi:"repoIdentifier"`
	// Webhook secret which will be used to sign the webhook payload.
	Secret *string `pulumi:"secret"`
	// List of triggers of the webhook (keep empty for all triggers).
	Triggers []string `pulumi:"triggers"`
	// URL that's called by the webhook.
	Url string `pulumi:"url"`
}

func LookupRepoWebhookOutput(ctx *pulumi.Context, args LookupRepoWebhookOutputArgs, opts ...pulumi.InvokeOption) LookupRepoWebhookResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRepoWebhookResultOutput, error) {
			args := v.(LookupRepoWebhookArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getRepoWebhook:getRepoWebhook", args, LookupRepoWebhookResultOutput{}, options).(LookupRepoWebhookResultOutput), nil
		}).(LookupRepoWebhookResultOutput)
}

// A collection of arguments for invoking getRepoWebhook.
type LookupRepoWebhookOutputArgs struct {
	// Description of the webhook.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Webhook enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Identifier of the webhook.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Allow insecure connections for provided webhook URL.
	Insecure pulumi.BoolInput `pulumi:"insecure"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Identifier of the repository.
	RepoIdentifier pulumi.StringInput `pulumi:"repoIdentifier"`
	// Webhook secret which will be used to sign the webhook payload.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// List of triggers of the webhook (keep empty for all triggers).
	Triggers pulumi.StringArrayInput `pulumi:"triggers"`
	// URL that's called by the webhook.
	Url pulumi.StringInput `pulumi:"url"`
}

func (LookupRepoWebhookOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepoWebhookArgs)(nil)).Elem()
}

// A collection of values returned by getRepoWebhook.
type LookupRepoWebhookResultOutput struct{ *pulumi.OutputState }

func (LookupRepoWebhookResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepoWebhookResult)(nil)).Elem()
}

func (o LookupRepoWebhookResultOutput) ToLookupRepoWebhookResultOutput() LookupRepoWebhookResultOutput {
	return o
}

func (o LookupRepoWebhookResultOutput) ToLookupRepoWebhookResultOutputWithContext(ctx context.Context) LookupRepoWebhookResultOutput {
	return o
}

// Timestamp when the webhook was created.
func (o LookupRepoWebhookResultOutput) Created() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRepoWebhookResult) int { return v.Created }).(pulumi.IntOutput)
}

// ID of the user who created the webhook.
func (o LookupRepoWebhookResultOutput) CreatedBy() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRepoWebhookResult) int { return v.CreatedBy }).(pulumi.IntOutput)
}

// Description of the webhook.
func (o LookupRepoWebhookResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRepoWebhookResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Webhook enabled.
func (o LookupRepoWebhookResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRepoWebhookResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Created webhook has secret encoding.
func (o LookupRepoWebhookResultOutput) HasSecret() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRepoWebhookResult) bool { return v.HasSecret }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRepoWebhookResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepoWebhookResult) string { return v.Id }).(pulumi.StringOutput)
}

// Identifier of the webhook.
func (o LookupRepoWebhookResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepoWebhookResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Allow insecure connections for provided webhook URL.
func (o LookupRepoWebhookResultOutput) Insecure() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRepoWebhookResult) bool { return v.Insecure }).(pulumi.BoolOutput)
}

// Unique identifier of the organization.
func (o LookupRepoWebhookResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRepoWebhookResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o LookupRepoWebhookResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRepoWebhookResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Identifier of the repository.
func (o LookupRepoWebhookResultOutput) RepoIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepoWebhookResult) string { return v.RepoIdentifier }).(pulumi.StringOutput)
}

// Webhook secret which will be used to sign the webhook payload.
func (o LookupRepoWebhookResultOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRepoWebhookResult) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// List of triggers of the webhook (keep empty for all triggers).
func (o LookupRepoWebhookResultOutput) Triggers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRepoWebhookResult) []string { return v.Triggers }).(pulumi.StringArrayOutput)
}

// URL that's called by the webhook.
func (o LookupRepoWebhookResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepoWebhookResult) string { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRepoWebhookResultOutput{})
}
