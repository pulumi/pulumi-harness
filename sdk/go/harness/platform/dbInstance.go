// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Harness DBDevOps Instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewDbInstance(ctx, "test", &platform.DbInstanceArgs{
//				Identifier: pulumi.String("identifier"),
//				OrgId:      pulumi.String("org_id"),
//				ProjectId:  pulumi.String("project_id"),
//				Name:       pulumi.String("name"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//					pulumi.String("bar:foo"),
//				},
//				Schema:    pulumi.String("schema1"),
//				Branch:    pulumi.String("main"),
//				Connector: pulumi.String("jdbcConnector"),
//				Context:   pulumi.String("ctx"),
//				LiquibaseSubstituteProperties: pulumi.StringMap{
//					"key1": pulumi.String("value1"),
//					"key2": pulumi.String("value2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import project level db instance
//
// ```sh
// $ pulumi import harness:platform/dbInstance:DbInstance example <org_id>/<project_id>/<db_schema_id>/<db_instance_id>
// ```
type DbInstance struct {
	pulumi.CustomResourceState

	// The branch of changeSet repository
	Branch pulumi.StringPtrOutput `pulumi:"branch"`
	// The connector to database
	Connector pulumi.StringOutput `pulumi:"connector"`
	// The liquibase context
	Context pulumi.StringPtrOutput `pulumi:"context"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// The properties to substitute in liquibase changelog
	LiquibaseSubstituteProperties pulumi.StringMapOutput `pulumi:"liquibaseSubstituteProperties"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The identifier of the parent database schema
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewDbInstance registers a new resource with the given unique name, arguments, and options.
func NewDbInstance(ctx *pulumi.Context,
	name string, args *DbInstanceArgs, opts ...pulumi.ResourceOption) (*DbInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connector == nil {
		return nil, errors.New("invalid value for required argument 'Connector'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbInstance
	err := ctx.RegisterResource("harness:platform/dbInstance:DbInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbInstance gets an existing DbInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbInstanceState, opts ...pulumi.ResourceOption) (*DbInstance, error) {
	var resource DbInstance
	err := ctx.ReadResource("harness:platform/dbInstance:DbInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbInstance resources.
type dbInstanceState struct {
	// The branch of changeSet repository
	Branch *string `pulumi:"branch"`
	// The connector to database
	Connector *string `pulumi:"connector"`
	// The liquibase context
	Context *string `pulumi:"context"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// The properties to substitute in liquibase changelog
	LiquibaseSubstituteProperties map[string]string `pulumi:"liquibaseSubstituteProperties"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// The identifier of the parent database schema
	Schema *string `pulumi:"schema"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

type DbInstanceState struct {
	// The branch of changeSet repository
	Branch pulumi.StringPtrInput
	// The connector to database
	Connector pulumi.StringPtrInput
	// The liquibase context
	Context pulumi.StringPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// The properties to substitute in liquibase changelog
	LiquibaseSubstituteProperties pulumi.StringMapInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// The identifier of the parent database schema
	Schema pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (DbInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbInstanceState)(nil)).Elem()
}

type dbInstanceArgs struct {
	// The branch of changeSet repository
	Branch *string `pulumi:"branch"`
	// The connector to database
	Connector string `pulumi:"connector"`
	// The liquibase context
	Context *string `pulumi:"context"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// The properties to substitute in liquibase changelog
	LiquibaseSubstituteProperties map[string]string `pulumi:"liquibaseSubstituteProperties"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId string `pulumi:"projectId"`
	// The identifier of the parent database schema
	Schema string `pulumi:"schema"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a DbInstance resource.
type DbInstanceArgs struct {
	// The branch of changeSet repository
	Branch pulumi.StringPtrInput
	// The connector to database
	Connector pulumi.StringInput
	// The liquibase context
	Context pulumi.StringPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// The properties to substitute in liquibase changelog
	LiquibaseSubstituteProperties pulumi.StringMapInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringInput
	// Unique identifier of the project.
	ProjectId pulumi.StringInput
	// The identifier of the parent database schema
	Schema pulumi.StringInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (DbInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbInstanceArgs)(nil)).Elem()
}

type DbInstanceInput interface {
	pulumi.Input

	ToDbInstanceOutput() DbInstanceOutput
	ToDbInstanceOutputWithContext(ctx context.Context) DbInstanceOutput
}

func (*DbInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**DbInstance)(nil)).Elem()
}

func (i *DbInstance) ToDbInstanceOutput() DbInstanceOutput {
	return i.ToDbInstanceOutputWithContext(context.Background())
}

func (i *DbInstance) ToDbInstanceOutputWithContext(ctx context.Context) DbInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbInstanceOutput)
}

// DbInstanceArrayInput is an input type that accepts DbInstanceArray and DbInstanceArrayOutput values.
// You can construct a concrete instance of `DbInstanceArrayInput` via:
//
//	DbInstanceArray{ DbInstanceArgs{...} }
type DbInstanceArrayInput interface {
	pulumi.Input

	ToDbInstanceArrayOutput() DbInstanceArrayOutput
	ToDbInstanceArrayOutputWithContext(context.Context) DbInstanceArrayOutput
}

type DbInstanceArray []DbInstanceInput

func (DbInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbInstance)(nil)).Elem()
}

func (i DbInstanceArray) ToDbInstanceArrayOutput() DbInstanceArrayOutput {
	return i.ToDbInstanceArrayOutputWithContext(context.Background())
}

func (i DbInstanceArray) ToDbInstanceArrayOutputWithContext(ctx context.Context) DbInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbInstanceArrayOutput)
}

// DbInstanceMapInput is an input type that accepts DbInstanceMap and DbInstanceMapOutput values.
// You can construct a concrete instance of `DbInstanceMapInput` via:
//
//	DbInstanceMap{ "key": DbInstanceArgs{...} }
type DbInstanceMapInput interface {
	pulumi.Input

	ToDbInstanceMapOutput() DbInstanceMapOutput
	ToDbInstanceMapOutputWithContext(context.Context) DbInstanceMapOutput
}

type DbInstanceMap map[string]DbInstanceInput

func (DbInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbInstance)(nil)).Elem()
}

func (i DbInstanceMap) ToDbInstanceMapOutput() DbInstanceMapOutput {
	return i.ToDbInstanceMapOutputWithContext(context.Background())
}

func (i DbInstanceMap) ToDbInstanceMapOutputWithContext(ctx context.Context) DbInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbInstanceMapOutput)
}

type DbInstanceOutput struct{ *pulumi.OutputState }

func (DbInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbInstance)(nil)).Elem()
}

func (o DbInstanceOutput) ToDbInstanceOutput() DbInstanceOutput {
	return o
}

func (o DbInstanceOutput) ToDbInstanceOutputWithContext(ctx context.Context) DbInstanceOutput {
	return o
}

// The branch of changeSet repository
func (o DbInstanceOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringPtrOutput { return v.Branch }).(pulumi.StringPtrOutput)
}

// The connector to database
func (o DbInstanceOutput) Connector() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.Connector }).(pulumi.StringOutput)
}

// The liquibase context
func (o DbInstanceOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringPtrOutput { return v.Context }).(pulumi.StringPtrOutput)
}

// Description of the resource.
func (o DbInstanceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o DbInstanceOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// The properties to substitute in liquibase changelog
func (o DbInstanceOutput) LiquibaseSubstituteProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringMapOutput { return v.LiquibaseSubstituteProperties }).(pulumi.StringMapOutput)
}

// Name of the resource.
func (o DbInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o DbInstanceOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Unique identifier of the project.
func (o DbInstanceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The identifier of the parent database schema
func (o DbInstanceOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Tags to associate with the resource.
func (o DbInstanceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type DbInstanceArrayOutput struct{ *pulumi.OutputState }

func (DbInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbInstance)(nil)).Elem()
}

func (o DbInstanceArrayOutput) ToDbInstanceArrayOutput() DbInstanceArrayOutput {
	return o
}

func (o DbInstanceArrayOutput) ToDbInstanceArrayOutputWithContext(ctx context.Context) DbInstanceArrayOutput {
	return o
}

func (o DbInstanceArrayOutput) Index(i pulumi.IntInput) DbInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbInstance {
		return vs[0].([]*DbInstance)[vs[1].(int)]
	}).(DbInstanceOutput)
}

type DbInstanceMapOutput struct{ *pulumi.OutputState }

func (DbInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbInstance)(nil)).Elem()
}

func (o DbInstanceMapOutput) ToDbInstanceMapOutput() DbInstanceMapOutput {
	return o
}

func (o DbInstanceMapOutput) ToDbInstanceMapOutputWithContext(ctx context.Context) DbInstanceMapOutput {
	return o
}

func (o DbInstanceMapOutput) MapIndex(k pulumi.StringInput) DbInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbInstance {
		return vs[0].(map[string]*DbInstance)[vs[1].(string)]
	}).(DbInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbInstanceInput)(nil)).Elem(), &DbInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbInstanceArrayInput)(nil)).Elem(), DbInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbInstanceMapInput)(nil)).Elem(), DbInstanceMap{})
	pulumi.RegisterOutputType(DbInstanceOutput{})
	pulumi.RegisterOutputType(DbInstanceArrayOutput{})
	pulumi.RegisterOutputType(DbInstanceMapOutput{})
}
