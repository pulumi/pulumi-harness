// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing Harness GitOps Application Project Mappings.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewGitopsAppProjectMapping(ctx, "example", &platform.GitopsAppProjectMappingArgs{
//				AccountId:       pulumi.String("account_id"),
//				OrgId:           pulumi.String("organization_id"),
//				ProjectId:       pulumi.String("project_id"),
//				AgentId:         pulumi.String("agent_id"),
//				ArgoProjectName: pulumi.String("argoProjectName"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import a GitOps agent app project mapping
//
// ```sh
// $ pulumi import harness:platform/gitopsAppProjectMapping:GitopsAppProjectMapping example <organization_id>/<project_id>/<agent_id>/<appproject_name>
// ```
type GitopsAppProjectMapping struct {
	pulumi.CustomResourceState

	// Account identifier of the GitOps agent's Application Project.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Agent identifier for which the ArgoCD and Harness project mapping is to be created.
	AgentId pulumi.StringOutput `pulumi:"agentId"`
	// ArgoCD Project name which is to be mapped to the Harness project.
	ArgoProjectName pulumi.StringOutput `pulumi:"argoProjectName"`
	// Identifier of the GitOps Application Project.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Organization identifier of the GitOps agent's Application Project.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Project identifier of the GitOps agent's Application Project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
}

// NewGitopsAppProjectMapping registers a new resource with the given unique name, arguments, and options.
func NewGitopsAppProjectMapping(ctx *pulumi.Context,
	name string, args *GitopsAppProjectMappingArgs, opts ...pulumi.ResourceOption) (*GitopsAppProjectMapping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AgentId == nil {
		return nil, errors.New("invalid value for required argument 'AgentId'")
	}
	if args.ArgoProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ArgoProjectName'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GitopsAppProjectMapping
	err := ctx.RegisterResource("harness:platform/gitopsAppProjectMapping:GitopsAppProjectMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitopsAppProjectMapping gets an existing GitopsAppProjectMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitopsAppProjectMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitopsAppProjectMappingState, opts ...pulumi.ResourceOption) (*GitopsAppProjectMapping, error) {
	var resource GitopsAppProjectMapping
	err := ctx.ReadResource("harness:platform/gitopsAppProjectMapping:GitopsAppProjectMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitopsAppProjectMapping resources.
type gitopsAppProjectMappingState struct {
	// Account identifier of the GitOps agent's Application Project.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId *string `pulumi:"accountId"`
	// Agent identifier for which the ArgoCD and Harness project mapping is to be created.
	AgentId *string `pulumi:"agentId"`
	// ArgoCD Project name which is to be mapped to the Harness project.
	ArgoProjectName *string `pulumi:"argoProjectName"`
	// Identifier of the GitOps Application Project.
	Identifier *string `pulumi:"identifier"`
	// Organization identifier of the GitOps agent's Application Project.
	OrgId *string `pulumi:"orgId"`
	// Project identifier of the GitOps agent's Application Project.
	ProjectId *string `pulumi:"projectId"`
}

type GitopsAppProjectMappingState struct {
	// Account identifier of the GitOps agent's Application Project.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId pulumi.StringPtrInput
	// Agent identifier for which the ArgoCD and Harness project mapping is to be created.
	AgentId pulumi.StringPtrInput
	// ArgoCD Project name which is to be mapped to the Harness project.
	ArgoProjectName pulumi.StringPtrInput
	// Identifier of the GitOps Application Project.
	Identifier pulumi.StringPtrInput
	// Organization identifier of the GitOps agent's Application Project.
	OrgId pulumi.StringPtrInput
	// Project identifier of the GitOps agent's Application Project.
	ProjectId pulumi.StringPtrInput
}

func (GitopsAppProjectMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitopsAppProjectMappingState)(nil)).Elem()
}

type gitopsAppProjectMappingArgs struct {
	// Account identifier of the GitOps agent's Application Project.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId *string `pulumi:"accountId"`
	// Agent identifier for which the ArgoCD and Harness project mapping is to be created.
	AgentId string `pulumi:"agentId"`
	// ArgoCD Project name which is to be mapped to the Harness project.
	ArgoProjectName string `pulumi:"argoProjectName"`
	// Organization identifier of the GitOps agent's Application Project.
	OrgId string `pulumi:"orgId"`
	// Project identifier of the GitOps agent's Application Project.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a GitopsAppProjectMapping resource.
type GitopsAppProjectMappingArgs struct {
	// Account identifier of the GitOps agent's Application Project.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	AccountId pulumi.StringPtrInput
	// Agent identifier for which the ArgoCD and Harness project mapping is to be created.
	AgentId pulumi.StringInput
	// ArgoCD Project name which is to be mapped to the Harness project.
	ArgoProjectName pulumi.StringInput
	// Organization identifier of the GitOps agent's Application Project.
	OrgId pulumi.StringInput
	// Project identifier of the GitOps agent's Application Project.
	ProjectId pulumi.StringInput
}

func (GitopsAppProjectMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitopsAppProjectMappingArgs)(nil)).Elem()
}

type GitopsAppProjectMappingInput interface {
	pulumi.Input

	ToGitopsAppProjectMappingOutput() GitopsAppProjectMappingOutput
	ToGitopsAppProjectMappingOutputWithContext(ctx context.Context) GitopsAppProjectMappingOutput
}

func (*GitopsAppProjectMapping) ElementType() reflect.Type {
	return reflect.TypeOf((**GitopsAppProjectMapping)(nil)).Elem()
}

func (i *GitopsAppProjectMapping) ToGitopsAppProjectMappingOutput() GitopsAppProjectMappingOutput {
	return i.ToGitopsAppProjectMappingOutputWithContext(context.Background())
}

func (i *GitopsAppProjectMapping) ToGitopsAppProjectMappingOutputWithContext(ctx context.Context) GitopsAppProjectMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitopsAppProjectMappingOutput)
}

// GitopsAppProjectMappingArrayInput is an input type that accepts GitopsAppProjectMappingArray and GitopsAppProjectMappingArrayOutput values.
// You can construct a concrete instance of `GitopsAppProjectMappingArrayInput` via:
//
//	GitopsAppProjectMappingArray{ GitopsAppProjectMappingArgs{...} }
type GitopsAppProjectMappingArrayInput interface {
	pulumi.Input

	ToGitopsAppProjectMappingArrayOutput() GitopsAppProjectMappingArrayOutput
	ToGitopsAppProjectMappingArrayOutputWithContext(context.Context) GitopsAppProjectMappingArrayOutput
}

type GitopsAppProjectMappingArray []GitopsAppProjectMappingInput

func (GitopsAppProjectMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitopsAppProjectMapping)(nil)).Elem()
}

func (i GitopsAppProjectMappingArray) ToGitopsAppProjectMappingArrayOutput() GitopsAppProjectMappingArrayOutput {
	return i.ToGitopsAppProjectMappingArrayOutputWithContext(context.Background())
}

func (i GitopsAppProjectMappingArray) ToGitopsAppProjectMappingArrayOutputWithContext(ctx context.Context) GitopsAppProjectMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitopsAppProjectMappingArrayOutput)
}

// GitopsAppProjectMappingMapInput is an input type that accepts GitopsAppProjectMappingMap and GitopsAppProjectMappingMapOutput values.
// You can construct a concrete instance of `GitopsAppProjectMappingMapInput` via:
//
//	GitopsAppProjectMappingMap{ "key": GitopsAppProjectMappingArgs{...} }
type GitopsAppProjectMappingMapInput interface {
	pulumi.Input

	ToGitopsAppProjectMappingMapOutput() GitopsAppProjectMappingMapOutput
	ToGitopsAppProjectMappingMapOutputWithContext(context.Context) GitopsAppProjectMappingMapOutput
}

type GitopsAppProjectMappingMap map[string]GitopsAppProjectMappingInput

func (GitopsAppProjectMappingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitopsAppProjectMapping)(nil)).Elem()
}

func (i GitopsAppProjectMappingMap) ToGitopsAppProjectMappingMapOutput() GitopsAppProjectMappingMapOutput {
	return i.ToGitopsAppProjectMappingMapOutputWithContext(context.Background())
}

func (i GitopsAppProjectMappingMap) ToGitopsAppProjectMappingMapOutputWithContext(ctx context.Context) GitopsAppProjectMappingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitopsAppProjectMappingMapOutput)
}

type GitopsAppProjectMappingOutput struct{ *pulumi.OutputState }

func (GitopsAppProjectMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitopsAppProjectMapping)(nil)).Elem()
}

func (o GitopsAppProjectMappingOutput) ToGitopsAppProjectMappingOutput() GitopsAppProjectMappingOutput {
	return o
}

func (o GitopsAppProjectMappingOutput) ToGitopsAppProjectMappingOutputWithContext(ctx context.Context) GitopsAppProjectMappingOutput {
	return o
}

// Account identifier of the GitOps agent's Application Project.
//
// Deprecated: This field is deprecated and will be removed in a future release.
func (o GitopsAppProjectMappingOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsAppProjectMapping) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Agent identifier for which the ArgoCD and Harness project mapping is to be created.
func (o GitopsAppProjectMappingOutput) AgentId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsAppProjectMapping) pulumi.StringOutput { return v.AgentId }).(pulumi.StringOutput)
}

// ArgoCD Project name which is to be mapped to the Harness project.
func (o GitopsAppProjectMappingOutput) ArgoProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsAppProjectMapping) pulumi.StringOutput { return v.ArgoProjectName }).(pulumi.StringOutput)
}

// Identifier of the GitOps Application Project.
func (o GitopsAppProjectMappingOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsAppProjectMapping) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Organization identifier of the GitOps agent's Application Project.
func (o GitopsAppProjectMappingOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsAppProjectMapping) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Project identifier of the GitOps agent's Application Project.
func (o GitopsAppProjectMappingOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsAppProjectMapping) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

type GitopsAppProjectMappingArrayOutput struct{ *pulumi.OutputState }

func (GitopsAppProjectMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitopsAppProjectMapping)(nil)).Elem()
}

func (o GitopsAppProjectMappingArrayOutput) ToGitopsAppProjectMappingArrayOutput() GitopsAppProjectMappingArrayOutput {
	return o
}

func (o GitopsAppProjectMappingArrayOutput) ToGitopsAppProjectMappingArrayOutputWithContext(ctx context.Context) GitopsAppProjectMappingArrayOutput {
	return o
}

func (o GitopsAppProjectMappingArrayOutput) Index(i pulumi.IntInput) GitopsAppProjectMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitopsAppProjectMapping {
		return vs[0].([]*GitopsAppProjectMapping)[vs[1].(int)]
	}).(GitopsAppProjectMappingOutput)
}

type GitopsAppProjectMappingMapOutput struct{ *pulumi.OutputState }

func (GitopsAppProjectMappingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitopsAppProjectMapping)(nil)).Elem()
}

func (o GitopsAppProjectMappingMapOutput) ToGitopsAppProjectMappingMapOutput() GitopsAppProjectMappingMapOutput {
	return o
}

func (o GitopsAppProjectMappingMapOutput) ToGitopsAppProjectMappingMapOutputWithContext(ctx context.Context) GitopsAppProjectMappingMapOutput {
	return o
}

func (o GitopsAppProjectMappingMapOutput) MapIndex(k pulumi.StringInput) GitopsAppProjectMappingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitopsAppProjectMapping {
		return vs[0].(map[string]*GitopsAppProjectMapping)[vs[1].(string)]
	}).(GitopsAppProjectMappingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitopsAppProjectMappingInput)(nil)).Elem(), &GitopsAppProjectMapping{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitopsAppProjectMappingArrayInput)(nil)).Elem(), GitopsAppProjectMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitopsAppProjectMappingMapInput)(nil)).Elem(), GitopsAppProjectMappingMap{})
	pulumi.RegisterOutputType(GitopsAppProjectMappingOutput{})
	pulumi.RegisterOutputType(GitopsAppProjectMappingArrayOutput{})
	pulumi.RegisterOutputType(GitopsAppProjectMappingMapOutput{})
}
