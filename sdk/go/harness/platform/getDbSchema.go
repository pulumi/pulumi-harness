// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness DBDevOps Schema.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupDbSchema(ctx, &platform.LookupDbSchemaArgs{
//				Identifier: "identifier",
//				OrgId:      "org_id",
//				ProjectId:  "project_id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDbSchema(ctx *pulumi.Context, args *LookupDbSchemaArgs, opts ...pulumi.InvokeOption) (*LookupDbSchemaResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDbSchemaResult
	err := ctx.Invoke("harness:platform/getDbSchema:getDbSchema", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDbSchema.
type LookupDbSchemaArgs struct {
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId string `pulumi:"projectId"`
	// Type of the database schema. Valid values are: Repository, Script
	Type *string `pulumi:"type"`
}

// A collection of values returned by getDbSchema.
type LookupDbSchemaResult struct {
	// Configuration to clone changeSets using script
	ChangelogScript GetDbSchemaChangelogScript `pulumi:"changelogScript"`
	// Description of the resource.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId string `pulumi:"projectId"`
	// Provides a connector and path at which to find the database schema representation
	SchemaSources []GetDbSchemaSchemaSource `pulumi:"schemaSources"`
	// The service associated with schema
	Service string `pulumi:"service"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// Type of the database schema. Valid values are: Repository, Script
	Type *string `pulumi:"type"`
}

func LookupDbSchemaOutput(ctx *pulumi.Context, args LookupDbSchemaOutputArgs, opts ...pulumi.InvokeOption) LookupDbSchemaResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDbSchemaResultOutput, error) {
			args := v.(LookupDbSchemaArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getDbSchema:getDbSchema", args, LookupDbSchemaResultOutput{}, options).(LookupDbSchemaResultOutput), nil
		}).(LookupDbSchemaResultOutput)
}

// A collection of arguments for invoking getDbSchema.
type LookupDbSchemaOutputArgs struct {
	// Unique identifier of the resource.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// Type of the database schema. Valid values are: Repository, Script
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (LookupDbSchemaOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDbSchemaArgs)(nil)).Elem()
}

// A collection of values returned by getDbSchema.
type LookupDbSchemaResultOutput struct{ *pulumi.OutputState }

func (LookupDbSchemaResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDbSchemaResult)(nil)).Elem()
}

func (o LookupDbSchemaResultOutput) ToLookupDbSchemaResultOutput() LookupDbSchemaResultOutput {
	return o
}

func (o LookupDbSchemaResultOutput) ToLookupDbSchemaResultOutputWithContext(ctx context.Context) LookupDbSchemaResultOutput {
	return o
}

// Configuration to clone changeSets using script
func (o LookupDbSchemaResultOutput) ChangelogScript() GetDbSchemaChangelogScriptOutput {
	return o.ApplyT(func(v LookupDbSchemaResult) GetDbSchemaChangelogScript { return v.ChangelogScript }).(GetDbSchemaChangelogScriptOutput)
}

// Description of the resource.
func (o LookupDbSchemaResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbSchemaResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDbSchemaResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbSchemaResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupDbSchemaResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbSchemaResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o LookupDbSchemaResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDbSchemaResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the organization.
func (o LookupDbSchemaResultOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbSchemaResult) string { return v.OrgId }).(pulumi.StringOutput)
}

// Unique identifier of the project.
func (o LookupDbSchemaResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbSchemaResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Provides a connector and path at which to find the database schema representation
func (o LookupDbSchemaResultOutput) SchemaSources() GetDbSchemaSchemaSourceArrayOutput {
	return o.ApplyT(func(v LookupDbSchemaResult) []GetDbSchemaSchemaSource { return v.SchemaSources }).(GetDbSchemaSchemaSourceArrayOutput)
}

// The service associated with schema
func (o LookupDbSchemaResultOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbSchemaResult) string { return v.Service }).(pulumi.StringOutput)
}

// Tags to associate with the resource.
func (o LookupDbSchemaResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDbSchemaResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Type of the database schema. Valid values are: Repository, Script
func (o LookupDbSchemaResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDbSchemaResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDbSchemaResultOutput{})
}
