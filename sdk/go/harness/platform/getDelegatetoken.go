// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness delegate Token.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Look up a delegate token at account level by name
//			_, err := platform.LookupDelegatetoken(ctx, &platform.LookupDelegatetokenArgs{
//				Name:      "account-delegate-token",
//				AccountId: "account_id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Look up a delegate token at organization level
//			_, err = platform.LookupDelegatetoken(ctx, &platform.LookupDelegatetokenArgs{
//				Name:      "org-delegate-token",
//				AccountId: "account_id",
//				OrgId:     pulumi.StringRef("org_id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Look up a delegate token at project level
//			_, err = platform.LookupDelegatetoken(ctx, &platform.LookupDelegatetokenArgs{
//				Name:      "project-delegate-token",
//				AccountId: "account_id",
//				OrgId:     pulumi.StringRef("org_id"),
//				ProjectId: pulumi.StringRef("project_id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDelegatetoken(ctx *pulumi.Context, args *LookupDelegatetokenArgs, opts ...pulumi.InvokeOption) (*LookupDelegatetokenResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDelegatetokenResult
	err := ctx.Invoke("harness:platform/getDelegatetoken:getDelegatetoken", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDelegatetoken.
type LookupDelegatetokenArgs struct {
	// Account Identifier for the Entity
	AccountId string `pulumi:"accountId"`
	// Name of the delegate token
	Name string `pulumi:"name"`
	// Org Identifier for the Entity
	OrgId *string `pulumi:"orgId"`
	// Project Identifier for the Entity
	ProjectId *string `pulumi:"projectId"`
	// Status of Delegate Token (ACTIVE or REVOKED). If left empty both active and revoked tokens will be assumed
	TokenStatus *string `pulumi:"tokenStatus"`
}

// A collection of values returned by getDelegatetoken.
type LookupDelegatetokenResult struct {
	// Account Identifier for the Entity
	AccountId string `pulumi:"accountId"`
	// Time when the delegate token is created. This is an epoch timestamp.
	CreatedAt int `pulumi:"createdAt"`
	// created by details
	CreatedBy map[string]string `pulumi:"createdBy"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the delegate token
	Name string `pulumi:"name"`
	// Org Identifier for the Entity
	OrgId *string `pulumi:"orgId"`
	// Project Identifier for the Entity
	ProjectId *string `pulumi:"projectId"`
	// Epoch time in milliseconds after which the token will be marked as revoked. There can be a delay of up to one hour from the epoch value provided and actual revoking of the token.
	RevokeAfter int `pulumi:"revokeAfter"`
	// Status of Delegate Token (ACTIVE or REVOKED). If left empty both active and revoked tokens will be assumed
	TokenStatus *string `pulumi:"tokenStatus"`
	// Value of the delegate token. Encoded in base64.
	Value string `pulumi:"value"`
}

func LookupDelegatetokenOutput(ctx *pulumi.Context, args LookupDelegatetokenOutputArgs, opts ...pulumi.InvokeOption) LookupDelegatetokenResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDelegatetokenResultOutput, error) {
			args := v.(LookupDelegatetokenArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getDelegatetoken:getDelegatetoken", args, LookupDelegatetokenResultOutput{}, options).(LookupDelegatetokenResultOutput), nil
		}).(LookupDelegatetokenResultOutput)
}

// A collection of arguments for invoking getDelegatetoken.
type LookupDelegatetokenOutputArgs struct {
	// Account Identifier for the Entity
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Name of the delegate token
	Name pulumi.StringInput `pulumi:"name"`
	// Org Identifier for the Entity
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Project Identifier for the Entity
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Status of Delegate Token (ACTIVE or REVOKED). If left empty both active and revoked tokens will be assumed
	TokenStatus pulumi.StringPtrInput `pulumi:"tokenStatus"`
}

func (LookupDelegatetokenOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDelegatetokenArgs)(nil)).Elem()
}

// A collection of values returned by getDelegatetoken.
type LookupDelegatetokenResultOutput struct{ *pulumi.OutputState }

func (LookupDelegatetokenResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDelegatetokenResult)(nil)).Elem()
}

func (o LookupDelegatetokenResultOutput) ToLookupDelegatetokenResultOutput() LookupDelegatetokenResultOutput {
	return o
}

func (o LookupDelegatetokenResultOutput) ToLookupDelegatetokenResultOutputWithContext(ctx context.Context) LookupDelegatetokenResultOutput {
	return o
}

// Account Identifier for the Entity
func (o LookupDelegatetokenResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDelegatetokenResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Time when the delegate token is created. This is an epoch timestamp.
func (o LookupDelegatetokenResultOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDelegatetokenResult) int { return v.CreatedAt }).(pulumi.IntOutput)
}

// created by details
func (o LookupDelegatetokenResultOutput) CreatedBy() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDelegatetokenResult) map[string]string { return v.CreatedBy }).(pulumi.StringMapOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDelegatetokenResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDelegatetokenResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the delegate token
func (o LookupDelegatetokenResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDelegatetokenResult) string { return v.Name }).(pulumi.StringOutput)
}

// Org Identifier for the Entity
func (o LookupDelegatetokenResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDelegatetokenResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Project Identifier for the Entity
func (o LookupDelegatetokenResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDelegatetokenResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Epoch time in milliseconds after which the token will be marked as revoked. There can be a delay of up to one hour from the epoch value provided and actual revoking of the token.
func (o LookupDelegatetokenResultOutput) RevokeAfter() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDelegatetokenResult) int { return v.RevokeAfter }).(pulumi.IntOutput)
}

// Status of Delegate Token (ACTIVE or REVOKED). If left empty both active and revoked tokens will be assumed
func (o LookupDelegatetokenResultOutput) TokenStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDelegatetokenResult) *string { return v.TokenStatus }).(pulumi.StringPtrOutput)
}

// Value of the delegate token. Encoded in base64.
func (o LookupDelegatetokenResultOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDelegatetokenResult) string { return v.Value }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDelegatetokenResultOutput{})
}
