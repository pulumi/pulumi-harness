// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Git connector.
//
// ## Import
//
// # Import account level git connector
//
// ```sh
// $ pulumi import harness:platform/gitConnector:GitConnector example <connector_id>
// ```
//
// # Import org level git connector
//
// ```sh
// $ pulumi import harness:platform/gitConnector:GitConnector example <ord_id>/<connector_id>
// ```
//
// # Import project level git connector
//
// ```sh
// $ pulumi import harness:platform/gitConnector:GitConnector example <org_id>/<project_id>/<connector_id>
// ```
type GitConnector struct {
	pulumi.CustomResourceState

	// Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.
	ConnectionType pulumi.StringOutput `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials GitConnectorCredentialsOutput `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Execute on delegate or not.
	ExecuteOnDelegate pulumi.BoolPtrOutput `pulumi:"executeOnDelegate"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// URL of the git repository or account.
	Url pulumi.StringOutput `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo pulumi.StringPtrOutput `pulumi:"validationRepo"`
}

// NewGitConnector registers a new resource with the given unique name, arguments, and options.
func NewGitConnector(ctx *pulumi.Context,
	name string, args *GitConnectorArgs, opts ...pulumi.ResourceOption) (*GitConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionType == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionType'")
	}
	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GitConnector
	err := ctx.RegisterResource("harness:platform/gitConnector:GitConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitConnector gets an existing GitConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitConnectorState, opts ...pulumi.ResourceOption) (*GitConnector, error) {
	var resource GitConnector
	err := ctx.ReadResource("harness:platform/gitConnector:GitConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitConnector resources.
type gitConnectorState struct {
	// Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.
	ConnectionType *string `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials *GitConnectorCredentials `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Execute on delegate or not.
	ExecuteOnDelegate *bool `pulumi:"executeOnDelegate"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// URL of the git repository or account.
	Url *string `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo *string `pulumi:"validationRepo"`
}

type GitConnectorState struct {
	// Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.
	ConnectionType pulumi.StringPtrInput
	// Credentials to use for the connection.
	Credentials GitConnectorCredentialsPtrInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Execute on delegate or not.
	ExecuteOnDelegate pulumi.BoolPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// URL of the git repository or account.
	Url pulumi.StringPtrInput
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo pulumi.StringPtrInput
}

func (GitConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitConnectorState)(nil)).Elem()
}

type gitConnectorArgs struct {
	// Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.
	ConnectionType string `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials GitConnectorCredentials `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Execute on delegate or not.
	ExecuteOnDelegate *bool `pulumi:"executeOnDelegate"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// URL of the git repository or account.
	Url string `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo *string `pulumi:"validationRepo"`
}

// The set of arguments for constructing a GitConnector resource.
type GitConnectorArgs struct {
	// Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.
	ConnectionType pulumi.StringInput
	// Credentials to use for the connection.
	Credentials GitConnectorCredentialsInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Execute on delegate or not.
	ExecuteOnDelegate pulumi.BoolPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// URL of the git repository or account.
	Url pulumi.StringInput
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo pulumi.StringPtrInput
}

func (GitConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitConnectorArgs)(nil)).Elem()
}

type GitConnectorInput interface {
	pulumi.Input

	ToGitConnectorOutput() GitConnectorOutput
	ToGitConnectorOutputWithContext(ctx context.Context) GitConnectorOutput
}

func (*GitConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**GitConnector)(nil)).Elem()
}

func (i *GitConnector) ToGitConnectorOutput() GitConnectorOutput {
	return i.ToGitConnectorOutputWithContext(context.Background())
}

func (i *GitConnector) ToGitConnectorOutputWithContext(ctx context.Context) GitConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitConnectorOutput)
}

// GitConnectorArrayInput is an input type that accepts GitConnectorArray and GitConnectorArrayOutput values.
// You can construct a concrete instance of `GitConnectorArrayInput` via:
//
//	GitConnectorArray{ GitConnectorArgs{...} }
type GitConnectorArrayInput interface {
	pulumi.Input

	ToGitConnectorArrayOutput() GitConnectorArrayOutput
	ToGitConnectorArrayOutputWithContext(context.Context) GitConnectorArrayOutput
}

type GitConnectorArray []GitConnectorInput

func (GitConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitConnector)(nil)).Elem()
}

func (i GitConnectorArray) ToGitConnectorArrayOutput() GitConnectorArrayOutput {
	return i.ToGitConnectorArrayOutputWithContext(context.Background())
}

func (i GitConnectorArray) ToGitConnectorArrayOutputWithContext(ctx context.Context) GitConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitConnectorArrayOutput)
}

// GitConnectorMapInput is an input type that accepts GitConnectorMap and GitConnectorMapOutput values.
// You can construct a concrete instance of `GitConnectorMapInput` via:
//
//	GitConnectorMap{ "key": GitConnectorArgs{...} }
type GitConnectorMapInput interface {
	pulumi.Input

	ToGitConnectorMapOutput() GitConnectorMapOutput
	ToGitConnectorMapOutputWithContext(context.Context) GitConnectorMapOutput
}

type GitConnectorMap map[string]GitConnectorInput

func (GitConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitConnector)(nil)).Elem()
}

func (i GitConnectorMap) ToGitConnectorMapOutput() GitConnectorMapOutput {
	return i.ToGitConnectorMapOutputWithContext(context.Background())
}

func (i GitConnectorMap) ToGitConnectorMapOutputWithContext(ctx context.Context) GitConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitConnectorMapOutput)
}

type GitConnectorOutput struct{ *pulumi.OutputState }

func (GitConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitConnector)(nil)).Elem()
}

func (o GitConnectorOutput) ToGitConnectorOutput() GitConnectorOutput {
	return o
}

func (o GitConnectorOutput) ToGitConnectorOutputWithContext(ctx context.Context) GitConnectorOutput {
	return o
}

// Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.
func (o GitConnectorOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.StringOutput { return v.ConnectionType }).(pulumi.StringOutput)
}

// Credentials to use for the connection.
func (o GitConnectorOutput) Credentials() GitConnectorCredentialsOutput {
	return o.ApplyT(func(v *GitConnector) GitConnectorCredentialsOutput { return v.Credentials }).(GitConnectorCredentialsOutput)
}

// Tags to filter delegates for connection.
func (o GitConnectorOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o GitConnectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Execute on delegate or not.
func (o GitConnectorOutput) ExecuteOnDelegate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.BoolPtrOutput { return v.ExecuteOnDelegate }).(pulumi.BoolPtrOutput)
}

// Unique identifier of the resource.
func (o GitConnectorOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o GitConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o GitConnectorOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o GitConnectorOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o GitConnectorOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// URL of the git repository or account.
func (o GitConnectorOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Repository to test the connection with. This is only used when `connectionType` is `Account`.
func (o GitConnectorOutput) ValidationRepo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitConnector) pulumi.StringPtrOutput { return v.ValidationRepo }).(pulumi.StringPtrOutput)
}

type GitConnectorArrayOutput struct{ *pulumi.OutputState }

func (GitConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitConnector)(nil)).Elem()
}

func (o GitConnectorArrayOutput) ToGitConnectorArrayOutput() GitConnectorArrayOutput {
	return o
}

func (o GitConnectorArrayOutput) ToGitConnectorArrayOutputWithContext(ctx context.Context) GitConnectorArrayOutput {
	return o
}

func (o GitConnectorArrayOutput) Index(i pulumi.IntInput) GitConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitConnector {
		return vs[0].([]*GitConnector)[vs[1].(int)]
	}).(GitConnectorOutput)
}

type GitConnectorMapOutput struct{ *pulumi.OutputState }

func (GitConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitConnector)(nil)).Elem()
}

func (o GitConnectorMapOutput) ToGitConnectorMapOutput() GitConnectorMapOutput {
	return o
}

func (o GitConnectorMapOutput) ToGitConnectorMapOutputWithContext(ctx context.Context) GitConnectorMapOutput {
	return o
}

func (o GitConnectorMapOutput) MapIndex(k pulumi.StringInput) GitConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitConnector {
		return vs[0].(map[string]*GitConnector)[vs[1].(string)]
	}).(GitConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitConnectorInput)(nil)).Elem(), &GitConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitConnectorArrayInput)(nil)).Elem(), GitConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitConnectorMapInput)(nil)).Elem(), GitConnectorMap{})
	pulumi.RegisterOutputType(GitConnectorOutput{})
	pulumi.RegisterOutputType(GitConnectorArrayOutput{})
	pulumi.RegisterOutputType(GitConnectorMapOutput{})
}
