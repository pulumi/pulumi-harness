// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving modules testing metadata from the module registry.
func LookupInfraModuleTesting(ctx *pulumi.Context, args *LookupInfraModuleTestingArgs, opts ...pulumi.InvokeOption) (*LookupInfraModuleTestingResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInfraModuleTestingResult
	err := ctx.Invoke("harness:platform/getInfraModuleTesting:getInfraModuleTesting", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInfraModuleTesting.
type LookupInfraModuleTestingArgs struct {
	// Identifier of the module to enable testing for
	ModuleId string `pulumi:"moduleId"`
	// Organization identifier
	Org string `pulumi:"org"`
	// List of pipeline IDs to create webhooks for triggering test executions
	Pipelines []string `pulumi:"pipelines"`
	// Project identifier
	Project string `pulumi:"project"`
	// Provider connector for testing purposes
	ProviderConnector string `pulumi:"providerConnector"`
	ProvisionerType   string `pulumi:"provisionerType"`
	// Provisioner version for testing purposes
	ProvisionerVersion string `pulumi:"provisionerVersion"`
	// Pipeline ID to create webhooks for releases
	ReleasePipeline *string `pulumi:"releasePipeline"`
	// Whether testing is enabled for the module
	TestingEnabled *bool `pulumi:"testingEnabled"`
	// Testing metadata for the module
	TestingMetadata *GetInfraModuleTestingTestingMetadata `pulumi:"testingMetadata"`
	// Timestamp when the module was last modified
	Updated *int `pulumi:"updated"`
	// Versions of the module
	Versions []string `pulumi:"versions"`
}

// A collection of values returned by getInfraModuleTesting.
type LookupInfraModuleTestingResult struct {
	// Account that owns the module
	Account string `pulumi:"account"`
	// Timestamp when the module was created
	Created int `pulumi:"created"`
	// Description of the module
	Description string `pulumi:"description"`
	// Git Tag Style
	GitTagStyle string `pulumi:"gitTagStyle"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Error while retrieving the module
	ModuleError string `pulumi:"moduleError"`
	// Identifier of the module to enable testing for
	ModuleId string `pulumi:"moduleId"`
	// Name of the module
	Name string `pulumi:"name"`
	// Organization identifier
	Org string `pulumi:"org"`
	// List of pipeline IDs to create webhooks for triggering test executions
	Pipelines []string `pulumi:"pipelines"`
	// Project identifier
	Project string `pulumi:"project"`
	// Provider connector for testing purposes
	ProviderConnector string `pulumi:"providerConnector"`
	ProvisionerType   string `pulumi:"provisionerType"`
	// Provisioner version for testing purposes
	ProvisionerVersion string `pulumi:"provisionerVersion"`
	// Pipeline ID to create webhooks for releases
	ReleasePipeline *string `pulumi:"releasePipeline"`
	// For account connectors, the repository where the module is stored
	Repository string `pulumi:"repository"`
	// Repository Branch in which the module should be accessed
	RepositoryBranch string `pulumi:"repositoryBranch"`
	// Repository Commit in which the module should be accessed
	RepositoryCommit string `pulumi:"repositoryCommit"`
	// Repository Connector is the reference to the connector for the repository
	RepositoryConnector string `pulumi:"repositoryConnector"`
	// Repository Path is the path in which the module resides
	RepositoryPath string `pulumi:"repositoryPath"`
	// URL where the module is stored
	RepositoryUrl string `pulumi:"repositoryUrl"`
	// Timestamp when the module was last synced
	Synced int `pulumi:"synced"`
	// Provider of the module
	System string `pulumi:"system"`
	// Tags associated with the module
	Tags string `pulumi:"tags"`
	// Whether testing is enabled for the module
	TestingEnabled bool `pulumi:"testingEnabled"`
	// Testing metadata for the module
	TestingMetadata GetInfraModuleTestingTestingMetadata `pulumi:"testingMetadata"`
	// Timestamp when the module was last modified
	Updated int `pulumi:"updated"`
	// Versions of the module
	Versions []string `pulumi:"versions"`
}

func LookupInfraModuleTestingOutput(ctx *pulumi.Context, args LookupInfraModuleTestingOutputArgs, opts ...pulumi.InvokeOption) LookupInfraModuleTestingResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupInfraModuleTestingResultOutput, error) {
			args := v.(LookupInfraModuleTestingArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getInfraModuleTesting:getInfraModuleTesting", args, LookupInfraModuleTestingResultOutput{}, options).(LookupInfraModuleTestingResultOutput), nil
		}).(LookupInfraModuleTestingResultOutput)
}

// A collection of arguments for invoking getInfraModuleTesting.
type LookupInfraModuleTestingOutputArgs struct {
	// Identifier of the module to enable testing for
	ModuleId pulumi.StringInput `pulumi:"moduleId"`
	// Organization identifier
	Org pulumi.StringInput `pulumi:"org"`
	// List of pipeline IDs to create webhooks for triggering test executions
	Pipelines pulumi.StringArrayInput `pulumi:"pipelines"`
	// Project identifier
	Project pulumi.StringInput `pulumi:"project"`
	// Provider connector for testing purposes
	ProviderConnector pulumi.StringInput `pulumi:"providerConnector"`
	ProvisionerType   pulumi.StringInput `pulumi:"provisionerType"`
	// Provisioner version for testing purposes
	ProvisionerVersion pulumi.StringInput `pulumi:"provisionerVersion"`
	// Pipeline ID to create webhooks for releases
	ReleasePipeline pulumi.StringPtrInput `pulumi:"releasePipeline"`
	// Whether testing is enabled for the module
	TestingEnabled pulumi.BoolPtrInput `pulumi:"testingEnabled"`
	// Testing metadata for the module
	TestingMetadata GetInfraModuleTestingTestingMetadataPtrInput `pulumi:"testingMetadata"`
	// Timestamp when the module was last modified
	Updated pulumi.IntPtrInput `pulumi:"updated"`
	// Versions of the module
	Versions pulumi.StringArrayInput `pulumi:"versions"`
}

func (LookupInfraModuleTestingOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInfraModuleTestingArgs)(nil)).Elem()
}

// A collection of values returned by getInfraModuleTesting.
type LookupInfraModuleTestingResultOutput struct{ *pulumi.OutputState }

func (LookupInfraModuleTestingResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInfraModuleTestingResult)(nil)).Elem()
}

func (o LookupInfraModuleTestingResultOutput) ToLookupInfraModuleTestingResultOutput() LookupInfraModuleTestingResultOutput {
	return o
}

func (o LookupInfraModuleTestingResultOutput) ToLookupInfraModuleTestingResultOutputWithContext(ctx context.Context) LookupInfraModuleTestingResultOutput {
	return o
}

// Account that owns the module
func (o LookupInfraModuleTestingResultOutput) Account() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) string { return v.Account }).(pulumi.StringOutput)
}

// Timestamp when the module was created
func (o LookupInfraModuleTestingResultOutput) Created() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) int { return v.Created }).(pulumi.IntOutput)
}

// Description of the module
func (o LookupInfraModuleTestingResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) string { return v.Description }).(pulumi.StringOutput)
}

// Git Tag Style
func (o LookupInfraModuleTestingResultOutput) GitTagStyle() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) string { return v.GitTagStyle }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupInfraModuleTestingResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) string { return v.Id }).(pulumi.StringOutput)
}

// Error while retrieving the module
func (o LookupInfraModuleTestingResultOutput) ModuleError() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) string { return v.ModuleError }).(pulumi.StringOutput)
}

// Identifier of the module to enable testing for
func (o LookupInfraModuleTestingResultOutput) ModuleId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) string { return v.ModuleId }).(pulumi.StringOutput)
}

// Name of the module
func (o LookupInfraModuleTestingResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) string { return v.Name }).(pulumi.StringOutput)
}

// Organization identifier
func (o LookupInfraModuleTestingResultOutput) Org() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) string { return v.Org }).(pulumi.StringOutput)
}

// List of pipeline IDs to create webhooks for triggering test executions
func (o LookupInfraModuleTestingResultOutput) Pipelines() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) []string { return v.Pipelines }).(pulumi.StringArrayOutput)
}

// Project identifier
func (o LookupInfraModuleTestingResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) string { return v.Project }).(pulumi.StringOutput)
}

// Provider connector for testing purposes
func (o LookupInfraModuleTestingResultOutput) ProviderConnector() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) string { return v.ProviderConnector }).(pulumi.StringOutput)
}

func (o LookupInfraModuleTestingResultOutput) ProvisionerType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) string { return v.ProvisionerType }).(pulumi.StringOutput)
}

// Provisioner version for testing purposes
func (o LookupInfraModuleTestingResultOutput) ProvisionerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) string { return v.ProvisionerVersion }).(pulumi.StringOutput)
}

// Pipeline ID to create webhooks for releases
func (o LookupInfraModuleTestingResultOutput) ReleasePipeline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) *string { return v.ReleasePipeline }).(pulumi.StringPtrOutput)
}

// For account connectors, the repository where the module is stored
func (o LookupInfraModuleTestingResultOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) string { return v.Repository }).(pulumi.StringOutput)
}

// Repository Branch in which the module should be accessed
func (o LookupInfraModuleTestingResultOutput) RepositoryBranch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) string { return v.RepositoryBranch }).(pulumi.StringOutput)
}

// Repository Commit in which the module should be accessed
func (o LookupInfraModuleTestingResultOutput) RepositoryCommit() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) string { return v.RepositoryCommit }).(pulumi.StringOutput)
}

// Repository Connector is the reference to the connector for the repository
func (o LookupInfraModuleTestingResultOutput) RepositoryConnector() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) string { return v.RepositoryConnector }).(pulumi.StringOutput)
}

// Repository Path is the path in which the module resides
func (o LookupInfraModuleTestingResultOutput) RepositoryPath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) string { return v.RepositoryPath }).(pulumi.StringOutput)
}

// URL where the module is stored
func (o LookupInfraModuleTestingResultOutput) RepositoryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) string { return v.RepositoryUrl }).(pulumi.StringOutput)
}

// Timestamp when the module was last synced
func (o LookupInfraModuleTestingResultOutput) Synced() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) int { return v.Synced }).(pulumi.IntOutput)
}

// Provider of the module
func (o LookupInfraModuleTestingResultOutput) System() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) string { return v.System }).(pulumi.StringOutput)
}

// Tags associated with the module
func (o LookupInfraModuleTestingResultOutput) Tags() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) string { return v.Tags }).(pulumi.StringOutput)
}

// Whether testing is enabled for the module
func (o LookupInfraModuleTestingResultOutput) TestingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) bool { return v.TestingEnabled }).(pulumi.BoolOutput)
}

// Testing metadata for the module
func (o LookupInfraModuleTestingResultOutput) TestingMetadata() GetInfraModuleTestingTestingMetadataOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) GetInfraModuleTestingTestingMetadata { return v.TestingMetadata }).(GetInfraModuleTestingTestingMetadataOutput)
}

// Timestamp when the module was last modified
func (o LookupInfraModuleTestingResultOutput) Updated() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) int { return v.Updated }).(pulumi.IntOutput)
}

// Versions of the module
func (o LookupInfraModuleTestingResultOutput) Versions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupInfraModuleTestingResult) []string { return v.Versions }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInfraModuleTestingResultOutput{})
}
