// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Harness Notification Rule
type CentralNotificationRule struct {
	pulumi.CustomResourceState

	// Account identifier associated with this notification channel.
	Account pulumi.StringOutput `pulumi:"account"`
	// Timestamp when the notification rule was created.
	Created                       pulumi.IntOutput                                              `pulumi:"created"`
	CustomNotificationTemplateRef CentralNotificationRuleCustomNotificationTemplateRefPtrOutput `pulumi:"customNotificationTemplateRef"`
	Identifier                    pulumi.StringOutput                                           `pulumi:"identifier"`
	// Timestamp when the notification rule was last modified.
	LastModified            pulumi.IntOutput                                        `pulumi:"lastModified"`
	Name                    pulumi.StringOutput                                     `pulumi:"name"`
	NotificationChannelRefs pulumi.StringArrayOutput                                `pulumi:"notificationChannelRefs"`
	NotificationConditions  CentralNotificationRuleNotificationConditionArrayOutput `pulumi:"notificationConditions"`
	Org                     pulumi.StringPtrOutput                                  `pulumi:"org"`
	Project                 pulumi.StringOutput                                     `pulumi:"project"`
	Status                  pulumi.StringPtrOutput                                  `pulumi:"status"`
}

// NewCentralNotificationRule registers a new resource with the given unique name, arguments, and options.
func NewCentralNotificationRule(ctx *pulumi.Context,
	name string, args *CentralNotificationRuleArgs, opts ...pulumi.ResourceOption) (*CentralNotificationRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.NotificationChannelRefs == nil {
		return nil, errors.New("invalid value for required argument 'NotificationChannelRefs'")
	}
	if args.NotificationConditions == nil {
		return nil, errors.New("invalid value for required argument 'NotificationConditions'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CentralNotificationRule
	err := ctx.RegisterResource("harness:platform/centralNotificationRule:CentralNotificationRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCentralNotificationRule gets an existing CentralNotificationRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCentralNotificationRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CentralNotificationRuleState, opts ...pulumi.ResourceOption) (*CentralNotificationRule, error) {
	var resource CentralNotificationRule
	err := ctx.ReadResource("harness:platform/centralNotificationRule:CentralNotificationRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CentralNotificationRule resources.
type centralNotificationRuleState struct {
	// Account identifier associated with this notification channel.
	Account *string `pulumi:"account"`
	// Timestamp when the notification rule was created.
	Created                       *int                                                  `pulumi:"created"`
	CustomNotificationTemplateRef *CentralNotificationRuleCustomNotificationTemplateRef `pulumi:"customNotificationTemplateRef"`
	Identifier                    *string                                               `pulumi:"identifier"`
	// Timestamp when the notification rule was last modified.
	LastModified            *int                                           `pulumi:"lastModified"`
	Name                    *string                                        `pulumi:"name"`
	NotificationChannelRefs []string                                       `pulumi:"notificationChannelRefs"`
	NotificationConditions  []CentralNotificationRuleNotificationCondition `pulumi:"notificationConditions"`
	Org                     *string                                        `pulumi:"org"`
	Project                 *string                                        `pulumi:"project"`
	Status                  *string                                        `pulumi:"status"`
}

type CentralNotificationRuleState struct {
	// Account identifier associated with this notification channel.
	Account pulumi.StringPtrInput
	// Timestamp when the notification rule was created.
	Created                       pulumi.IntPtrInput
	CustomNotificationTemplateRef CentralNotificationRuleCustomNotificationTemplateRefPtrInput
	Identifier                    pulumi.StringPtrInput
	// Timestamp when the notification rule was last modified.
	LastModified            pulumi.IntPtrInput
	Name                    pulumi.StringPtrInput
	NotificationChannelRefs pulumi.StringArrayInput
	NotificationConditions  CentralNotificationRuleNotificationConditionArrayInput
	Org                     pulumi.StringPtrInput
	Project                 pulumi.StringPtrInput
	Status                  pulumi.StringPtrInput
}

func (CentralNotificationRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*centralNotificationRuleState)(nil)).Elem()
}

type centralNotificationRuleArgs struct {
	CustomNotificationTemplateRef *CentralNotificationRuleCustomNotificationTemplateRef `pulumi:"customNotificationTemplateRef"`
	Identifier                    string                                                `pulumi:"identifier"`
	Name                          *string                                               `pulumi:"name"`
	NotificationChannelRefs       []string                                              `pulumi:"notificationChannelRefs"`
	NotificationConditions        []CentralNotificationRuleNotificationCondition        `pulumi:"notificationConditions"`
	Org                           *string                                               `pulumi:"org"`
	Project                       string                                                `pulumi:"project"`
	Status                        *string                                               `pulumi:"status"`
}

// The set of arguments for constructing a CentralNotificationRule resource.
type CentralNotificationRuleArgs struct {
	CustomNotificationTemplateRef CentralNotificationRuleCustomNotificationTemplateRefPtrInput
	Identifier                    pulumi.StringInput
	Name                          pulumi.StringPtrInput
	NotificationChannelRefs       pulumi.StringArrayInput
	NotificationConditions        CentralNotificationRuleNotificationConditionArrayInput
	Org                           pulumi.StringPtrInput
	Project                       pulumi.StringInput
	Status                        pulumi.StringPtrInput
}

func (CentralNotificationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*centralNotificationRuleArgs)(nil)).Elem()
}

type CentralNotificationRuleInput interface {
	pulumi.Input

	ToCentralNotificationRuleOutput() CentralNotificationRuleOutput
	ToCentralNotificationRuleOutputWithContext(ctx context.Context) CentralNotificationRuleOutput
}

func (*CentralNotificationRule) ElementType() reflect.Type {
	return reflect.TypeOf((**CentralNotificationRule)(nil)).Elem()
}

func (i *CentralNotificationRule) ToCentralNotificationRuleOutput() CentralNotificationRuleOutput {
	return i.ToCentralNotificationRuleOutputWithContext(context.Background())
}

func (i *CentralNotificationRule) ToCentralNotificationRuleOutputWithContext(ctx context.Context) CentralNotificationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CentralNotificationRuleOutput)
}

// CentralNotificationRuleArrayInput is an input type that accepts CentralNotificationRuleArray and CentralNotificationRuleArrayOutput values.
// You can construct a concrete instance of `CentralNotificationRuleArrayInput` via:
//
//	CentralNotificationRuleArray{ CentralNotificationRuleArgs{...} }
type CentralNotificationRuleArrayInput interface {
	pulumi.Input

	ToCentralNotificationRuleArrayOutput() CentralNotificationRuleArrayOutput
	ToCentralNotificationRuleArrayOutputWithContext(context.Context) CentralNotificationRuleArrayOutput
}

type CentralNotificationRuleArray []CentralNotificationRuleInput

func (CentralNotificationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CentralNotificationRule)(nil)).Elem()
}

func (i CentralNotificationRuleArray) ToCentralNotificationRuleArrayOutput() CentralNotificationRuleArrayOutput {
	return i.ToCentralNotificationRuleArrayOutputWithContext(context.Background())
}

func (i CentralNotificationRuleArray) ToCentralNotificationRuleArrayOutputWithContext(ctx context.Context) CentralNotificationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CentralNotificationRuleArrayOutput)
}

// CentralNotificationRuleMapInput is an input type that accepts CentralNotificationRuleMap and CentralNotificationRuleMapOutput values.
// You can construct a concrete instance of `CentralNotificationRuleMapInput` via:
//
//	CentralNotificationRuleMap{ "key": CentralNotificationRuleArgs{...} }
type CentralNotificationRuleMapInput interface {
	pulumi.Input

	ToCentralNotificationRuleMapOutput() CentralNotificationRuleMapOutput
	ToCentralNotificationRuleMapOutputWithContext(context.Context) CentralNotificationRuleMapOutput
}

type CentralNotificationRuleMap map[string]CentralNotificationRuleInput

func (CentralNotificationRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CentralNotificationRule)(nil)).Elem()
}

func (i CentralNotificationRuleMap) ToCentralNotificationRuleMapOutput() CentralNotificationRuleMapOutput {
	return i.ToCentralNotificationRuleMapOutputWithContext(context.Background())
}

func (i CentralNotificationRuleMap) ToCentralNotificationRuleMapOutputWithContext(ctx context.Context) CentralNotificationRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CentralNotificationRuleMapOutput)
}

type CentralNotificationRuleOutput struct{ *pulumi.OutputState }

func (CentralNotificationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CentralNotificationRule)(nil)).Elem()
}

func (o CentralNotificationRuleOutput) ToCentralNotificationRuleOutput() CentralNotificationRuleOutput {
	return o
}

func (o CentralNotificationRuleOutput) ToCentralNotificationRuleOutputWithContext(ctx context.Context) CentralNotificationRuleOutput {
	return o
}

// Account identifier associated with this notification channel.
func (o CentralNotificationRuleOutput) Account() pulumi.StringOutput {
	return o.ApplyT(func(v *CentralNotificationRule) pulumi.StringOutput { return v.Account }).(pulumi.StringOutput)
}

// Timestamp when the notification rule was created.
func (o CentralNotificationRuleOutput) Created() pulumi.IntOutput {
	return o.ApplyT(func(v *CentralNotificationRule) pulumi.IntOutput { return v.Created }).(pulumi.IntOutput)
}

func (o CentralNotificationRuleOutput) CustomNotificationTemplateRef() CentralNotificationRuleCustomNotificationTemplateRefPtrOutput {
	return o.ApplyT(func(v *CentralNotificationRule) CentralNotificationRuleCustomNotificationTemplateRefPtrOutput {
		return v.CustomNotificationTemplateRef
	}).(CentralNotificationRuleCustomNotificationTemplateRefPtrOutput)
}

func (o CentralNotificationRuleOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *CentralNotificationRule) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Timestamp when the notification rule was last modified.
func (o CentralNotificationRuleOutput) LastModified() pulumi.IntOutput {
	return o.ApplyT(func(v *CentralNotificationRule) pulumi.IntOutput { return v.LastModified }).(pulumi.IntOutput)
}

func (o CentralNotificationRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CentralNotificationRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CentralNotificationRuleOutput) NotificationChannelRefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CentralNotificationRule) pulumi.StringArrayOutput { return v.NotificationChannelRefs }).(pulumi.StringArrayOutput)
}

func (o CentralNotificationRuleOutput) NotificationConditions() CentralNotificationRuleNotificationConditionArrayOutput {
	return o.ApplyT(func(v *CentralNotificationRule) CentralNotificationRuleNotificationConditionArrayOutput {
		return v.NotificationConditions
	}).(CentralNotificationRuleNotificationConditionArrayOutput)
}

func (o CentralNotificationRuleOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CentralNotificationRule) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

func (o CentralNotificationRuleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CentralNotificationRule) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o CentralNotificationRuleOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CentralNotificationRule) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

type CentralNotificationRuleArrayOutput struct{ *pulumi.OutputState }

func (CentralNotificationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CentralNotificationRule)(nil)).Elem()
}

func (o CentralNotificationRuleArrayOutput) ToCentralNotificationRuleArrayOutput() CentralNotificationRuleArrayOutput {
	return o
}

func (o CentralNotificationRuleArrayOutput) ToCentralNotificationRuleArrayOutputWithContext(ctx context.Context) CentralNotificationRuleArrayOutput {
	return o
}

func (o CentralNotificationRuleArrayOutput) Index(i pulumi.IntInput) CentralNotificationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CentralNotificationRule {
		return vs[0].([]*CentralNotificationRule)[vs[1].(int)]
	}).(CentralNotificationRuleOutput)
}

type CentralNotificationRuleMapOutput struct{ *pulumi.OutputState }

func (CentralNotificationRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CentralNotificationRule)(nil)).Elem()
}

func (o CentralNotificationRuleMapOutput) ToCentralNotificationRuleMapOutput() CentralNotificationRuleMapOutput {
	return o
}

func (o CentralNotificationRuleMapOutput) ToCentralNotificationRuleMapOutputWithContext(ctx context.Context) CentralNotificationRuleMapOutput {
	return o
}

func (o CentralNotificationRuleMapOutput) MapIndex(k pulumi.StringInput) CentralNotificationRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CentralNotificationRule {
		return vs[0].(map[string]*CentralNotificationRule)[vs[1].(string)]
	}).(CentralNotificationRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CentralNotificationRuleInput)(nil)).Elem(), &CentralNotificationRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*CentralNotificationRuleArrayInput)(nil)).Elem(), CentralNotificationRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CentralNotificationRuleMapInput)(nil)).Elem(), CentralNotificationRuleMap{})
	pulumi.RegisterOutputType(CentralNotificationRuleOutput{})
	pulumi.RegisterOutputType(CentralNotificationRuleArrayOutput{})
	pulumi.RegisterOutputType(CentralNotificationRuleMapOutput{})
}
