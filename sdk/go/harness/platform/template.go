// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Template. Description field is deprecated
//
// ## Import
//
// # Import account level template
//
// ```sh
// $ pulumi import harness:platform/template:Template example <template_id>
// ```
//
// # Import org level template
//
// ```sh
// $ pulumi import harness:platform/template:Template example <ord_id>/<template_id>
// ```
//
// # Import project level template
//
// ```sh
// $ pulumi import harness:platform/template:Template example <org_id>/<project_id>/<template_id>
// ```
type Template struct {
	pulumi.CustomResourceState

	// Specify comment with respect to changes.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Description of the entity. Description field is deprecated
	//
	// Deprecated: description field is deprecated
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// When set to true, enables force deletion of the template. It will delete the Harness entity even if your pipelines or other entities reference it.
	ForceDelete pulumi.BoolOutput `pulumi:"forceDelete"`
	// Contains parameters related to creating an Entity for Git Experience.
	GitDetails TemplateGitDetailsOutput `pulumi:"gitDetails"`
	// Contains Git Information for importing entities from Git
	GitImportDetails TemplateGitImportDetailsPtrOutput `pulumi:"gitImportDetails"`
	// Unique identifier of the resource
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Flag to set if importing from Git
	ImportFromGit pulumi.BoolPtrOutput `pulumi:"importFromGit"`
	// True if given version for template to be set as stable.
	IsStable pulumi.BoolOutput `pulumi:"isStable"`
	// Name of the Variable
	Name pulumi.StringOutput `pulumi:"name"`
	// Organization Identifier for the Entity
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Project Identifier for the Entity
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Contains parameters for importing template.
	TemplateImportRequest TemplateTemplateImportRequestPtrOutput `pulumi:"templateImportRequest"`
	// Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
	TemplateYaml pulumi.StringOutput `pulumi:"templateYaml"`
	// Version Label for Template. This should match the `versionLabel` specified in the template YAML.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewTemplate registers a new resource with the given unique name, arguments, and options.
func NewTemplate(ctx *pulumi.Context,
	name string, args *TemplateArgs, opts ...pulumi.ResourceOption) (*Template, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Template
	err := ctx.RegisterResource("harness:platform/template:Template", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTemplate gets an existing Template resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TemplateState, opts ...pulumi.ResourceOption) (*Template, error) {
	var resource Template
	err := ctx.ReadResource("harness:platform/template:Template", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Template resources.
type templateState struct {
	// Specify comment with respect to changes.
	Comments *string `pulumi:"comments"`
	// Description of the entity. Description field is deprecated
	//
	// Deprecated: description field is deprecated
	Description *string `pulumi:"description"`
	// When set to true, enables force deletion of the template. It will delete the Harness entity even if your pipelines or other entities reference it.
	ForceDelete *bool `pulumi:"forceDelete"`
	// Contains parameters related to creating an Entity for Git Experience.
	GitDetails *TemplateGitDetails `pulumi:"gitDetails"`
	// Contains Git Information for importing entities from Git
	GitImportDetails *TemplateGitImportDetails `pulumi:"gitImportDetails"`
	// Unique identifier of the resource
	Identifier *string `pulumi:"identifier"`
	// Flag to set if importing from Git
	ImportFromGit *bool `pulumi:"importFromGit"`
	// True if given version for template to be set as stable.
	IsStable *bool `pulumi:"isStable"`
	// Name of the Variable
	Name *string `pulumi:"name"`
	// Organization Identifier for the Entity
	OrgId *string `pulumi:"orgId"`
	// Project Identifier for the Entity
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// Contains parameters for importing template.
	TemplateImportRequest *TemplateTemplateImportRequest `pulumi:"templateImportRequest"`
	// Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
	TemplateYaml *string `pulumi:"templateYaml"`
	// Version Label for Template. This should match the `versionLabel` specified in the template YAML.
	Version *string `pulumi:"version"`
}

type TemplateState struct {
	// Specify comment with respect to changes.
	Comments pulumi.StringPtrInput
	// Description of the entity. Description field is deprecated
	//
	// Deprecated: description field is deprecated
	Description pulumi.StringPtrInput
	// When set to true, enables force deletion of the template. It will delete the Harness entity even if your pipelines or other entities reference it.
	ForceDelete pulumi.BoolPtrInput
	// Contains parameters related to creating an Entity for Git Experience.
	GitDetails TemplateGitDetailsPtrInput
	// Contains Git Information for importing entities from Git
	GitImportDetails TemplateGitImportDetailsPtrInput
	// Unique identifier of the resource
	Identifier pulumi.StringPtrInput
	// Flag to set if importing from Git
	ImportFromGit pulumi.BoolPtrInput
	// True if given version for template to be set as stable.
	IsStable pulumi.BoolPtrInput
	// Name of the Variable
	Name pulumi.StringPtrInput
	// Organization Identifier for the Entity
	OrgId pulumi.StringPtrInput
	// Project Identifier for the Entity
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// Contains parameters for importing template.
	TemplateImportRequest TemplateTemplateImportRequestPtrInput
	// Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
	TemplateYaml pulumi.StringPtrInput
	// Version Label for Template. This should match the `versionLabel` specified in the template YAML.
	Version pulumi.StringPtrInput
}

func (TemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*templateState)(nil)).Elem()
}

type templateArgs struct {
	// Specify comment with respect to changes.
	Comments *string `pulumi:"comments"`
	// Description of the entity. Description field is deprecated
	//
	// Deprecated: description field is deprecated
	Description *string `pulumi:"description"`
	// When set to true, enables force deletion of the template. It will delete the Harness entity even if your pipelines or other entities reference it.
	ForceDelete *bool `pulumi:"forceDelete"`
	// Contains parameters related to creating an Entity for Git Experience.
	GitDetails *TemplateGitDetails `pulumi:"gitDetails"`
	// Contains Git Information for importing entities from Git
	GitImportDetails *TemplateGitImportDetails `pulumi:"gitImportDetails"`
	// Unique identifier of the resource
	Identifier string `pulumi:"identifier"`
	// Flag to set if importing from Git
	ImportFromGit *bool `pulumi:"importFromGit"`
	// True if given version for template to be set as stable.
	IsStable *bool `pulumi:"isStable"`
	// Name of the Variable
	Name *string `pulumi:"name"`
	// Organization Identifier for the Entity
	OrgId *string `pulumi:"orgId"`
	// Project Identifier for the Entity
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// Contains parameters for importing template.
	TemplateImportRequest *TemplateTemplateImportRequest `pulumi:"templateImportRequest"`
	// Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
	TemplateYaml *string `pulumi:"templateYaml"`
	// Version Label for Template. This should match the `versionLabel` specified in the template YAML.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a Template resource.
type TemplateArgs struct {
	// Specify comment with respect to changes.
	Comments pulumi.StringPtrInput
	// Description of the entity. Description field is deprecated
	//
	// Deprecated: description field is deprecated
	Description pulumi.StringPtrInput
	// When set to true, enables force deletion of the template. It will delete the Harness entity even if your pipelines or other entities reference it.
	ForceDelete pulumi.BoolPtrInput
	// Contains parameters related to creating an Entity for Git Experience.
	GitDetails TemplateGitDetailsPtrInput
	// Contains Git Information for importing entities from Git
	GitImportDetails TemplateGitImportDetailsPtrInput
	// Unique identifier of the resource
	Identifier pulumi.StringInput
	// Flag to set if importing from Git
	ImportFromGit pulumi.BoolPtrInput
	// True if given version for template to be set as stable.
	IsStable pulumi.BoolPtrInput
	// Name of the Variable
	Name pulumi.StringPtrInput
	// Organization Identifier for the Entity
	OrgId pulumi.StringPtrInput
	// Project Identifier for the Entity
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// Contains parameters for importing template.
	TemplateImportRequest TemplateTemplateImportRequestPtrInput
	// Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
	TemplateYaml pulumi.StringPtrInput
	// Version Label for Template. This should match the `versionLabel` specified in the template YAML.
	Version pulumi.StringInput
}

func (TemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*templateArgs)(nil)).Elem()
}

type TemplateInput interface {
	pulumi.Input

	ToTemplateOutput() TemplateOutput
	ToTemplateOutputWithContext(ctx context.Context) TemplateOutput
}

func (*Template) ElementType() reflect.Type {
	return reflect.TypeOf((**Template)(nil)).Elem()
}

func (i *Template) ToTemplateOutput() TemplateOutput {
	return i.ToTemplateOutputWithContext(context.Background())
}

func (i *Template) ToTemplateOutputWithContext(ctx context.Context) TemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateOutput)
}

// TemplateArrayInput is an input type that accepts TemplateArray and TemplateArrayOutput values.
// You can construct a concrete instance of `TemplateArrayInput` via:
//
//	TemplateArray{ TemplateArgs{...} }
type TemplateArrayInput interface {
	pulumi.Input

	ToTemplateArrayOutput() TemplateArrayOutput
	ToTemplateArrayOutputWithContext(context.Context) TemplateArrayOutput
}

type TemplateArray []TemplateInput

func (TemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Template)(nil)).Elem()
}

func (i TemplateArray) ToTemplateArrayOutput() TemplateArrayOutput {
	return i.ToTemplateArrayOutputWithContext(context.Background())
}

func (i TemplateArray) ToTemplateArrayOutputWithContext(ctx context.Context) TemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateArrayOutput)
}

// TemplateMapInput is an input type that accepts TemplateMap and TemplateMapOutput values.
// You can construct a concrete instance of `TemplateMapInput` via:
//
//	TemplateMap{ "key": TemplateArgs{...} }
type TemplateMapInput interface {
	pulumi.Input

	ToTemplateMapOutput() TemplateMapOutput
	ToTemplateMapOutputWithContext(context.Context) TemplateMapOutput
}

type TemplateMap map[string]TemplateInput

func (TemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Template)(nil)).Elem()
}

func (i TemplateMap) ToTemplateMapOutput() TemplateMapOutput {
	return i.ToTemplateMapOutputWithContext(context.Background())
}

func (i TemplateMap) ToTemplateMapOutputWithContext(ctx context.Context) TemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMapOutput)
}

type TemplateOutput struct{ *pulumi.OutputState }

func (TemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Template)(nil)).Elem()
}

func (o TemplateOutput) ToTemplateOutput() TemplateOutput {
	return o
}

func (o TemplateOutput) ToTemplateOutputWithContext(ctx context.Context) TemplateOutput {
	return o
}

// Specify comment with respect to changes.
func (o TemplateOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Template) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Description of the entity. Description field is deprecated
//
// Deprecated: description field is deprecated
func (o TemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Template) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// When set to true, enables force deletion of the template. It will delete the Harness entity even if your pipelines or other entities reference it.
func (o TemplateOutput) ForceDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v *Template) pulumi.BoolOutput { return v.ForceDelete }).(pulumi.BoolOutput)
}

// Contains parameters related to creating an Entity for Git Experience.
func (o TemplateOutput) GitDetails() TemplateGitDetailsOutput {
	return o.ApplyT(func(v *Template) TemplateGitDetailsOutput { return v.GitDetails }).(TemplateGitDetailsOutput)
}

// Contains Git Information for importing entities from Git
func (o TemplateOutput) GitImportDetails() TemplateGitImportDetailsPtrOutput {
	return o.ApplyT(func(v *Template) TemplateGitImportDetailsPtrOutput { return v.GitImportDetails }).(TemplateGitImportDetailsPtrOutput)
}

// Unique identifier of the resource
func (o TemplateOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Flag to set if importing from Git
func (o TemplateOutput) ImportFromGit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Template) pulumi.BoolPtrOutput { return v.ImportFromGit }).(pulumi.BoolPtrOutput)
}

// True if given version for template to be set as stable.
func (o TemplateOutput) IsStable() pulumi.BoolOutput {
	return o.ApplyT(func(v *Template) pulumi.BoolOutput { return v.IsStable }).(pulumi.BoolOutput)
}

// Name of the Variable
func (o TemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Organization Identifier for the Entity
func (o TemplateOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Template) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Project Identifier for the Entity
func (o TemplateOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Template) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o TemplateOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Template) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Contains parameters for importing template.
func (o TemplateOutput) TemplateImportRequest() TemplateTemplateImportRequestPtrOutput {
	return o.ApplyT(func(v *Template) TemplateTemplateImportRequestPtrOutput { return v.TemplateImportRequest }).(TemplateTemplateImportRequestPtrOutput)
}

// Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
func (o TemplateOutput) TemplateYaml() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.TemplateYaml }).(pulumi.StringOutput)
}

// Version Label for Template. This should match the `versionLabel` specified in the template YAML.
func (o TemplateOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type TemplateArrayOutput struct{ *pulumi.OutputState }

func (TemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Template)(nil)).Elem()
}

func (o TemplateArrayOutput) ToTemplateArrayOutput() TemplateArrayOutput {
	return o
}

func (o TemplateArrayOutput) ToTemplateArrayOutputWithContext(ctx context.Context) TemplateArrayOutput {
	return o
}

func (o TemplateArrayOutput) Index(i pulumi.IntInput) TemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Template {
		return vs[0].([]*Template)[vs[1].(int)]
	}).(TemplateOutput)
}

type TemplateMapOutput struct{ *pulumi.OutputState }

func (TemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Template)(nil)).Elem()
}

func (o TemplateMapOutput) ToTemplateMapOutput() TemplateMapOutput {
	return o
}

func (o TemplateMapOutput) ToTemplateMapOutputWithContext(ctx context.Context) TemplateMapOutput {
	return o
}

func (o TemplateMapOutput) MapIndex(k pulumi.StringInput) TemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Template {
		return vs[0].(map[string]*Template)[vs[1].(string)]
	}).(TemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateInput)(nil)).Elem(), &Template{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateArrayInput)(nil)).Elem(), TemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateMapInput)(nil)).Elem(), TemplateMap{})
	pulumi.RegisterOutputType(TemplateOutput{})
	pulumi.RegisterOutputType(TemplateArrayOutput{})
	pulumi.RegisterOutputType(TemplateMapOutput{})
}
