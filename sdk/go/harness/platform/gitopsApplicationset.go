// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing a Harness Gitops Applicationset. Please note this resource is in an alpha/experimental state and is subject to change.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Example 1: Cluster Generator
//			_, err := platform.NewGitopsApplicationset(ctx, "cluster_generator", &platform.GitopsApplicationsetArgs{
//				OrgId:     pulumi.String("default"),
//				ProjectId: pulumi.String("projectId"),
//				AgentId:   pulumi.String("account.agentuseast1"),
//				Upsert:    pulumi.Bool(true),
//				Applicationset: &platform.GitopsApplicationsetApplicationsetArgs{
//					Metadata: &platform.GitopsApplicationsetApplicationsetMetadataArgs{
//						Name:      pulumi.String("cluster-appset"),
//						Namespace: pulumi.String("argocd"),
//					},
//					Spec: &platform.GitopsApplicationsetApplicationsetSpecArgs{
//						GoTemplate: pulumi.Bool(true),
//						GoTemplateOptions: pulumi.StringArray{
//							pulumi.String("missingkey=error"),
//						},
//						Generators: platform.GitopsApplicationsetApplicationsetSpecGeneratorArray{
//							&platform.GitopsApplicationsetApplicationsetSpecGeneratorArgs{
//								Clusters: platform.GitopsApplicationsetApplicationsetSpecGeneratorClusterArray{
//									&platform.GitopsApplicationsetApplicationsetSpecGeneratorClusterArgs{
//										Enabled: pulumi.Bool(true),
//									},
//								},
//							},
//						},
//						Template: &platform.GitopsApplicationsetApplicationsetSpecTemplateArgs{
//							Metadata: &platform.GitopsApplicationsetApplicationsetSpecTemplateMetadataArgs{
//								Name: pulumi.String("{{.name}}-guestbook"),
//								Labels: pulumi.StringMap{
//									"env": pulumi.String("dev"),
//								},
//							},
//							Spec: &platform.GitopsApplicationsetApplicationsetSpecTemplateSpecArgs{
//								Project: pulumi.String("default"),
//								Sources: platform.GitopsApplicationsetApplicationsetSpecTemplateSpecSourceArray{
//									&platform.GitopsApplicationsetApplicationsetSpecTemplateSpecSourceArgs{
//										RepoUrl:        pulumi.String("https://github.com/argoproj/argocd-example-apps.git"),
//										Path:           pulumi.String("helm-guestbook"),
//										TargetRevision: pulumi.String("HEAD"),
//									},
//								},
//								Destination: &platform.GitopsApplicationsetApplicationsetSpecTemplateSpecDestinationArgs{
//									Server:    pulumi.String("{{.url}}"),
//									Namespace: pulumi.String("app-ns-{{.name}}"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Example 2: List Generator
//			_, err = platform.NewGitopsApplicationset(ctx, "list_generator", &platform.GitopsApplicationsetArgs{
//				OrgId:     pulumi.String("default"),
//				ProjectId: pulumi.String("projectId"),
//				AgentId:   pulumi.String("account.agentuseast1"),
//				Upsert:    pulumi.Bool(true),
//				Applicationset: &platform.GitopsApplicationsetApplicationsetArgs{
//					Metadata: &platform.GitopsApplicationsetApplicationsetMetadataArgs{
//						Name: pulumi.String("list-appset"),
//					},
//					Spec: &platform.GitopsApplicationsetApplicationsetSpecArgs{
//						GoTemplate: pulumi.Bool(true),
//						GoTemplateOptions: pulumi.StringArray{
//							pulumi.String("missingkey=error"),
//						},
//						Generators: platform.GitopsApplicationsetApplicationsetSpecGeneratorArray{
//							&platform.GitopsApplicationsetApplicationsetSpecGeneratorArgs{
//								Lists: platform.GitopsApplicationsetApplicationsetSpecGeneratorListArray{
//									&platform.GitopsApplicationsetApplicationsetSpecGeneratorListArgs{
//										Elements: pulumi.StringMapArray{
//											pulumi.StringMap{
//												"cluster": pulumi.String("engineering-dev"),
//												"url":     pulumi.String("https://kubernetes.default.svc"),
//											},
//											pulumi.StringMap{
//												"cluster": pulumi.String("engineering-prod"),
//												"url":     pulumi.String("https://kubernetes.prod.svc"),
//											},
//										},
//									},
//								},
//							},
//						},
//						Template: &platform.GitopsApplicationsetApplicationsetSpecTemplateArgs{
//							Metadata: &platform.GitopsApplicationsetApplicationsetSpecTemplateMetadataArgs{
//								Name: pulumi.String("{{.cluster}}-guestbook"),
//							},
//							Spec: &platform.GitopsApplicationsetApplicationsetSpecTemplateSpecArgs{
//								Project: pulumi.String("default"),
//								Sources: platform.GitopsApplicationsetApplicationsetSpecTemplateSpecSourceArray{
//									&platform.GitopsApplicationsetApplicationsetSpecTemplateSpecSourceArgs{
//										RepoUrl:        pulumi.String("https://github.com/argoproj/argocd-example-apps.git"),
//										Path:           pulumi.String("helm-guestbook"),
//										TargetRevision: pulumi.String("HEAD"),
//									},
//								},
//								Destination: &platform.GitopsApplicationsetApplicationsetSpecTemplateSpecDestinationArgs{
//									Server:    pulumi.String("{{.url}}"),
//									Namespace: pulumi.String("default"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Example 3: Git Generator with Files
//			_, err = platform.NewGitopsApplicationset(ctx, "git_files", &platform.GitopsApplicationsetArgs{
//				OrgId:     pulumi.String("default"),
//				ProjectId: pulumi.String("projectId"),
//				AgentId:   pulumi.String("account.agentuseast1"),
//				Upsert:    pulumi.Bool(true),
//				Applicationset: &platform.GitopsApplicationsetApplicationsetArgs{
//					Metadata: &platform.GitopsApplicationsetApplicationsetMetadataArgs{
//						Name: pulumi.String("git-files-appset"),
//					},
//					Spec: &platform.GitopsApplicationsetApplicationsetSpecArgs{
//						Generators: platform.GitopsApplicationsetApplicationsetSpecGeneratorArray{
//							&platform.GitopsApplicationsetApplicationsetSpecGeneratorArgs{
//								Gits: platform.GitopsApplicationsetApplicationsetSpecGeneratorGitArray{
//									&platform.GitopsApplicationsetApplicationsetSpecGeneratorGitArgs{
//										RepoUrl:  pulumi.String("https://github.com/example/config-repo"),
//										Revision: pulumi.String("main"),
//										Files: platform.GitopsApplicationsetApplicationsetSpecGeneratorGitFileArray{
//											&platform.GitopsApplicationsetApplicationsetSpecGeneratorGitFileArgs{
//												Path: pulumi.String("apps/*/config.json"),
//											},
//										},
//									},
//								},
//							},
//						},
//						Template: &platform.GitopsApplicationsetApplicationsetSpecTemplateArgs{
//							Metadata: &platform.GitopsApplicationsetApplicationsetSpecTemplateMetadataArgs{
//								Name: pulumi.String("{{.path.basename}}-app"),
//							},
//							Spec: &platform.GitopsApplicationsetApplicationsetSpecTemplateSpecArgs{
//								Project: pulumi.String("default"),
//								Sources: platform.GitopsApplicationsetApplicationsetSpecTemplateSpecSourceArray{
//									&platform.GitopsApplicationsetApplicationsetSpecTemplateSpecSourceArgs{
//										RepoUrl:        pulumi.String("https://github.com/example/app-repo"),
//										Path:           pulumi.String("{{.path.path}}"),
//										TargetRevision: pulumi.String("main"),
//									},
//								},
//								Destination: &platform.GitopsApplicationsetApplicationsetSpecTemplateSpecDestinationArgs{
//									Server:    pulumi.String("https://kubernetes.default.svc"),
//									Namespace: pulumi.String("{{.path.basename}}"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Example 4: Git Generator with Directories
//			_, err = platform.NewGitopsApplicationset(ctx, "git_directories", &platform.GitopsApplicationsetArgs{
//				OrgId:     pulumi.String("default"),
//				ProjectId: pulumi.String("projectId"),
//				AgentId:   pulumi.String("account.agentuseast1"),
//				Upsert:    pulumi.Bool(true),
//				Applicationset: &platform.GitopsApplicationsetApplicationsetArgs{
//					Metadata: &platform.GitopsApplicationsetApplicationsetMetadataArgs{
//						Name: pulumi.String("git-directories-appset"),
//					},
//					Spec: &platform.GitopsApplicationsetApplicationsetSpecArgs{
//						Generators: platform.GitopsApplicationsetApplicationsetSpecGeneratorArray{
//							&platform.GitopsApplicationsetApplicationsetSpecGeneratorArgs{
//								Gits: platform.GitopsApplicationsetApplicationsetSpecGeneratorGitArray{
//									&platform.GitopsApplicationsetApplicationsetSpecGeneratorGitArgs{
//										RepoUrl:  pulumi.String("https://github.com/argoproj/argo-cd.git"),
//										Revision: pulumi.String("HEAD"),
//										Directories: platform.GitopsApplicationsetApplicationsetSpecGeneratorGitDirectoryArray{
//											&platform.GitopsApplicationsetApplicationsetSpecGeneratorGitDirectoryArgs{
//												Path:    pulumi.String("applicationset/examples/git-generator-directory/cluster-addons/*"),
//												Exclude: pulumi.Bool(false),
//											},
//										},
//									},
//								},
//							},
//						},
//						Template: &platform.GitopsApplicationsetApplicationsetSpecTemplateArgs{
//							Metadata: &platform.GitopsApplicationsetApplicationsetSpecTemplateMetadataArgs{
//								Name: pulumi.String("{{.path.basename}}-addon"),
//							},
//							Spec: &platform.GitopsApplicationsetApplicationsetSpecTemplateSpecArgs{
//								Project: pulumi.String("default"),
//								Sources: platform.GitopsApplicationsetApplicationsetSpecTemplateSpecSourceArray{
//									&platform.GitopsApplicationsetApplicationsetSpecTemplateSpecSourceArgs{
//										RepoUrl:        pulumi.String("https://github.com/argoproj/argo-cd.git"),
//										Path:           pulumi.String("{{.path.path}}"),
//										TargetRevision: pulumi.String("HEAD"),
//									},
//								},
//								Destination: &platform.GitopsApplicationsetApplicationsetSpecTemplateSpecDestinationArgs{
//									Server:    pulumi.String("https://kubernetes.default.svc"),
//									Namespace: pulumi.String("{{.path.basename}}"),
//								},
//								SyncPolicy: &platform.GitopsApplicationsetApplicationsetSpecTemplateSpecSyncPolicyArgs{
//									Automated: &platform.GitopsApplicationsetApplicationsetSpecTemplateSpecSyncPolicyAutomatedArgs{
//										Prune:    pulumi.Bool(true),
//										SelfHeal: pulumi.Bool(true),
//									},
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import gitOps applicationset with account level agent, agent id has account prefix #
//
// ```sh
// $ pulumi import harness:platform/gitopsApplicationset:GitopsApplicationset example <organization_id>/<project_id>/<agent_id>/<identifier>
// ```
//
// Import gitOps applicationset with org level agent, agent id has org prefix #
//
// ```sh
// $ pulumi import harness:platform/gitopsApplicationset:GitopsApplicationset example <organization_id>/<project_id>/<agent_id>/<identifier>
// ```
//
// Import gitOps applicationset with project level agent #
//
// ```sh
// $ pulumi import harness:platform/gitopsApplicationset:GitopsApplicationset example <organization_id>/<project_id>/<agent_id>/<identifier>
// ```
type GitopsApplicationset struct {
	pulumi.CustomResourceState

	// Agent identifier of the GitOps applicationset.
	AgentId pulumi.StringOutput `pulumi:"agentId"`
	// Definition of the GitOps applicationset resource.
	Applicationset GitopsApplicationsetApplicationsetOutput `pulumi:"applicationset"`
	// Identifier of the GitOps applicationset. This is a unique identifier for the applicationset generated automatically.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Organization identifier of the GitOps applicationset.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Project identifier of the GitOps applicationset.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Indicates if the GitOps application should be updated if existing and inserted if not.
	Upsert pulumi.BoolPtrOutput `pulumi:"upsert"`
}

// NewGitopsApplicationset registers a new resource with the given unique name, arguments, and options.
func NewGitopsApplicationset(ctx *pulumi.Context,
	name string, args *GitopsApplicationsetArgs, opts ...pulumi.ResourceOption) (*GitopsApplicationset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AgentId == nil {
		return nil, errors.New("invalid value for required argument 'AgentId'")
	}
	if args.Applicationset == nil {
		return nil, errors.New("invalid value for required argument 'Applicationset'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GitopsApplicationset
	err := ctx.RegisterResource("harness:platform/gitopsApplicationset:GitopsApplicationset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitopsApplicationset gets an existing GitopsApplicationset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitopsApplicationset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitopsApplicationsetState, opts ...pulumi.ResourceOption) (*GitopsApplicationset, error) {
	var resource GitopsApplicationset
	err := ctx.ReadResource("harness:platform/gitopsApplicationset:GitopsApplicationset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitopsApplicationset resources.
type gitopsApplicationsetState struct {
	// Agent identifier of the GitOps applicationset.
	AgentId *string `pulumi:"agentId"`
	// Definition of the GitOps applicationset resource.
	Applicationset *GitopsApplicationsetApplicationset `pulumi:"applicationset"`
	// Identifier of the GitOps applicationset. This is a unique identifier for the applicationset generated automatically.
	Identifier *string `pulumi:"identifier"`
	// Organization identifier of the GitOps applicationset.
	OrgId *string `pulumi:"orgId"`
	// Project identifier of the GitOps applicationset.
	ProjectId *string `pulumi:"projectId"`
	// Indicates if the GitOps application should be updated if existing and inserted if not.
	Upsert *bool `pulumi:"upsert"`
}

type GitopsApplicationsetState struct {
	// Agent identifier of the GitOps applicationset.
	AgentId pulumi.StringPtrInput
	// Definition of the GitOps applicationset resource.
	Applicationset GitopsApplicationsetApplicationsetPtrInput
	// Identifier of the GitOps applicationset. This is a unique identifier for the applicationset generated automatically.
	Identifier pulumi.StringPtrInput
	// Organization identifier of the GitOps applicationset.
	OrgId pulumi.StringPtrInput
	// Project identifier of the GitOps applicationset.
	ProjectId pulumi.StringPtrInput
	// Indicates if the GitOps application should be updated if existing and inserted if not.
	Upsert pulumi.BoolPtrInput
}

func (GitopsApplicationsetState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitopsApplicationsetState)(nil)).Elem()
}

type gitopsApplicationsetArgs struct {
	// Agent identifier of the GitOps applicationset.
	AgentId string `pulumi:"agentId"`
	// Definition of the GitOps applicationset resource.
	Applicationset GitopsApplicationsetApplicationset `pulumi:"applicationset"`
	// Organization identifier of the GitOps applicationset.
	OrgId string `pulumi:"orgId"`
	// Project identifier of the GitOps applicationset.
	ProjectId string `pulumi:"projectId"`
	// Indicates if the GitOps application should be updated if existing and inserted if not.
	Upsert *bool `pulumi:"upsert"`
}

// The set of arguments for constructing a GitopsApplicationset resource.
type GitopsApplicationsetArgs struct {
	// Agent identifier of the GitOps applicationset.
	AgentId pulumi.StringInput
	// Definition of the GitOps applicationset resource.
	Applicationset GitopsApplicationsetApplicationsetInput
	// Organization identifier of the GitOps applicationset.
	OrgId pulumi.StringInput
	// Project identifier of the GitOps applicationset.
	ProjectId pulumi.StringInput
	// Indicates if the GitOps application should be updated if existing and inserted if not.
	Upsert pulumi.BoolPtrInput
}

func (GitopsApplicationsetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitopsApplicationsetArgs)(nil)).Elem()
}

type GitopsApplicationsetInput interface {
	pulumi.Input

	ToGitopsApplicationsetOutput() GitopsApplicationsetOutput
	ToGitopsApplicationsetOutputWithContext(ctx context.Context) GitopsApplicationsetOutput
}

func (*GitopsApplicationset) ElementType() reflect.Type {
	return reflect.TypeOf((**GitopsApplicationset)(nil)).Elem()
}

func (i *GitopsApplicationset) ToGitopsApplicationsetOutput() GitopsApplicationsetOutput {
	return i.ToGitopsApplicationsetOutputWithContext(context.Background())
}

func (i *GitopsApplicationset) ToGitopsApplicationsetOutputWithContext(ctx context.Context) GitopsApplicationsetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitopsApplicationsetOutput)
}

// GitopsApplicationsetArrayInput is an input type that accepts GitopsApplicationsetArray and GitopsApplicationsetArrayOutput values.
// You can construct a concrete instance of `GitopsApplicationsetArrayInput` via:
//
//	GitopsApplicationsetArray{ GitopsApplicationsetArgs{...} }
type GitopsApplicationsetArrayInput interface {
	pulumi.Input

	ToGitopsApplicationsetArrayOutput() GitopsApplicationsetArrayOutput
	ToGitopsApplicationsetArrayOutputWithContext(context.Context) GitopsApplicationsetArrayOutput
}

type GitopsApplicationsetArray []GitopsApplicationsetInput

func (GitopsApplicationsetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitopsApplicationset)(nil)).Elem()
}

func (i GitopsApplicationsetArray) ToGitopsApplicationsetArrayOutput() GitopsApplicationsetArrayOutput {
	return i.ToGitopsApplicationsetArrayOutputWithContext(context.Background())
}

func (i GitopsApplicationsetArray) ToGitopsApplicationsetArrayOutputWithContext(ctx context.Context) GitopsApplicationsetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitopsApplicationsetArrayOutput)
}

// GitopsApplicationsetMapInput is an input type that accepts GitopsApplicationsetMap and GitopsApplicationsetMapOutput values.
// You can construct a concrete instance of `GitopsApplicationsetMapInput` via:
//
//	GitopsApplicationsetMap{ "key": GitopsApplicationsetArgs{...} }
type GitopsApplicationsetMapInput interface {
	pulumi.Input

	ToGitopsApplicationsetMapOutput() GitopsApplicationsetMapOutput
	ToGitopsApplicationsetMapOutputWithContext(context.Context) GitopsApplicationsetMapOutput
}

type GitopsApplicationsetMap map[string]GitopsApplicationsetInput

func (GitopsApplicationsetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitopsApplicationset)(nil)).Elem()
}

func (i GitopsApplicationsetMap) ToGitopsApplicationsetMapOutput() GitopsApplicationsetMapOutput {
	return i.ToGitopsApplicationsetMapOutputWithContext(context.Background())
}

func (i GitopsApplicationsetMap) ToGitopsApplicationsetMapOutputWithContext(ctx context.Context) GitopsApplicationsetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitopsApplicationsetMapOutput)
}

type GitopsApplicationsetOutput struct{ *pulumi.OutputState }

func (GitopsApplicationsetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitopsApplicationset)(nil)).Elem()
}

func (o GitopsApplicationsetOutput) ToGitopsApplicationsetOutput() GitopsApplicationsetOutput {
	return o
}

func (o GitopsApplicationsetOutput) ToGitopsApplicationsetOutputWithContext(ctx context.Context) GitopsApplicationsetOutput {
	return o
}

// Agent identifier of the GitOps applicationset.
func (o GitopsApplicationsetOutput) AgentId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsApplicationset) pulumi.StringOutput { return v.AgentId }).(pulumi.StringOutput)
}

// Definition of the GitOps applicationset resource.
func (o GitopsApplicationsetOutput) Applicationset() GitopsApplicationsetApplicationsetOutput {
	return o.ApplyT(func(v *GitopsApplicationset) GitopsApplicationsetApplicationsetOutput { return v.Applicationset }).(GitopsApplicationsetApplicationsetOutput)
}

// Identifier of the GitOps applicationset. This is a unique identifier for the applicationset generated automatically.
func (o GitopsApplicationsetOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsApplicationset) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Organization identifier of the GitOps applicationset.
func (o GitopsApplicationsetOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsApplicationset) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Project identifier of the GitOps applicationset.
func (o GitopsApplicationsetOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsApplicationset) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Indicates if the GitOps application should be updated if existing and inserted if not.
func (o GitopsApplicationsetOutput) Upsert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitopsApplicationset) pulumi.BoolPtrOutput { return v.Upsert }).(pulumi.BoolPtrOutput)
}

type GitopsApplicationsetArrayOutput struct{ *pulumi.OutputState }

func (GitopsApplicationsetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitopsApplicationset)(nil)).Elem()
}

func (o GitopsApplicationsetArrayOutput) ToGitopsApplicationsetArrayOutput() GitopsApplicationsetArrayOutput {
	return o
}

func (o GitopsApplicationsetArrayOutput) ToGitopsApplicationsetArrayOutputWithContext(ctx context.Context) GitopsApplicationsetArrayOutput {
	return o
}

func (o GitopsApplicationsetArrayOutput) Index(i pulumi.IntInput) GitopsApplicationsetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitopsApplicationset {
		return vs[0].([]*GitopsApplicationset)[vs[1].(int)]
	}).(GitopsApplicationsetOutput)
}

type GitopsApplicationsetMapOutput struct{ *pulumi.OutputState }

func (GitopsApplicationsetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitopsApplicationset)(nil)).Elem()
}

func (o GitopsApplicationsetMapOutput) ToGitopsApplicationsetMapOutput() GitopsApplicationsetMapOutput {
	return o
}

func (o GitopsApplicationsetMapOutput) ToGitopsApplicationsetMapOutputWithContext(ctx context.Context) GitopsApplicationsetMapOutput {
	return o
}

func (o GitopsApplicationsetMapOutput) MapIndex(k pulumi.StringInput) GitopsApplicationsetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitopsApplicationset {
		return vs[0].(map[string]*GitopsApplicationset)[vs[1].(string)]
	}).(GitopsApplicationsetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitopsApplicationsetInput)(nil)).Elem(), &GitopsApplicationset{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitopsApplicationsetArrayInput)(nil)).Elem(), GitopsApplicationsetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitopsApplicationsetMapInput)(nil)).Elem(), GitopsApplicationsetMap{})
	pulumi.RegisterOutputType(GitopsApplicationsetOutput{})
	pulumi.RegisterOutputType(GitopsApplicationsetArrayOutput{})
	pulumi.RegisterOutputType(GitopsApplicationsetMapOutput{})
}
