// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness policyset.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupPolicySet(ctx, &platform.LookupPolicySetArgs{
//				Identifier: "harness_platform_policyset.test.identifier",
//				Name:       pulumi.StringRef("harness_platform_policyset.test.name"),
//				Action:     "onrun",
//				Type:       "pipeline",
//				Enabled:    pulumi.BoolRef(true),
//				Policies: []platform.GetPolicySetPolicy{
//					{
//						Identifier: "always_run",
//						Severity:   "warning",
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupPolicySet(ctx *pulumi.Context, args *LookupPolicySetArgs, opts ...pulumi.InvokeOption) (*LookupPolicySetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPolicySetResult
	err := ctx.Invoke("harness:platform/getPolicySet:getPolicySet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPolicySet.
type LookupPolicySetArgs struct {
	// Action code for the policyset.
	Action string `pulumi:"action"`
	// Enabled for the policyset.
	Enabled *bool `pulumi:"enabled"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// List of policy identifiers / severity for the policyset.
	//
	// Deprecated: Use 'policy_references' instead. This field will be removed in a future version.
	Policies         []GetPolicySetPolicy          `pulumi:"policies"`
	PolicyReferences []GetPolicySetPolicyReference `pulumi:"policyReferences"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Type of the policyset.
	Type string `pulumi:"type"`
}

// A collection of values returned by getPolicySet.
type LookupPolicySetResult struct {
	// Action code for the policyset.
	Action string `pulumi:"action"`
	// Description of the resource.
	Description string `pulumi:"description"`
	// Enabled for the policyset.
	Enabled *bool `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// List of policy identifiers / severity for the policyset.
	//
	// Deprecated: Use 'policy_references' instead. This field will be removed in a future version.
	Policies         []GetPolicySetPolicy          `pulumi:"policies"`
	PolicyReferences []GetPolicySetPolicyReference `pulumi:"policyReferences"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// Type of the policyset.
	Type string `pulumi:"type"`
}

func LookupPolicySetOutput(ctx *pulumi.Context, args LookupPolicySetOutputArgs, opts ...pulumi.InvokeOption) LookupPolicySetResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPolicySetResultOutput, error) {
			args := v.(LookupPolicySetArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getPolicySet:getPolicySet", args, LookupPolicySetResultOutput{}, options).(LookupPolicySetResultOutput), nil
		}).(LookupPolicySetResultOutput)
}

// A collection of arguments for invoking getPolicySet.
type LookupPolicySetOutputArgs struct {
	// Action code for the policyset.
	Action pulumi.StringInput `pulumi:"action"`
	// Enabled for the policyset.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Unique identifier of the resource.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// List of policy identifiers / severity for the policyset.
	//
	// Deprecated: Use 'policy_references' instead. This field will be removed in a future version.
	Policies         GetPolicySetPolicyArrayInput          `pulumi:"policies"`
	PolicyReferences GetPolicySetPolicyReferenceArrayInput `pulumi:"policyReferences"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Type of the policyset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LookupPolicySetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicySetArgs)(nil)).Elem()
}

// A collection of values returned by getPolicySet.
type LookupPolicySetResultOutput struct{ *pulumi.OutputState }

func (LookupPolicySetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicySetResult)(nil)).Elem()
}

func (o LookupPolicySetResultOutput) ToLookupPolicySetResultOutput() LookupPolicySetResultOutput {
	return o
}

func (o LookupPolicySetResultOutput) ToLookupPolicySetResultOutputWithContext(ctx context.Context) LookupPolicySetResultOutput {
	return o
}

// Action code for the policyset.
func (o LookupPolicySetResultOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicySetResult) string { return v.Action }).(pulumi.StringOutput)
}

// Description of the resource.
func (o LookupPolicySetResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicySetResult) string { return v.Description }).(pulumi.StringOutput)
}

// Enabled for the policyset.
func (o LookupPolicySetResultOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupPolicySetResult) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPolicySetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicySetResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupPolicySetResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicySetResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o LookupPolicySetResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicySetResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the organization.
func (o LookupPolicySetResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicySetResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// List of policy identifiers / severity for the policyset.
//
// Deprecated: Use 'policy_references' instead. This field will be removed in a future version.
func (o LookupPolicySetResultOutput) Policies() GetPolicySetPolicyArrayOutput {
	return o.ApplyT(func(v LookupPolicySetResult) []GetPolicySetPolicy { return v.Policies }).(GetPolicySetPolicyArrayOutput)
}

func (o LookupPolicySetResultOutput) PolicyReferences() GetPolicySetPolicyReferenceArrayOutput {
	return o.ApplyT(func(v LookupPolicySetResult) []GetPolicySetPolicyReference { return v.PolicyReferences }).(GetPolicySetPolicyReferenceArrayOutput)
}

// Unique identifier of the project.
func (o LookupPolicySetResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicySetResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o LookupPolicySetResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPolicySetResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Type of the policyset.
func (o LookupPolicySetResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicySetResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPolicySetResultOutput{})
}
