// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Harness DBDevOps Schema.
//
// ## Import
//
// # Import project level db schema
//
// ```sh
// $ pulumi import harness:platform/dbSchema:DbSchema example <org_id>/<project_id>/<db_schema_id>
// ```
type DbSchema struct {
	pulumi.CustomResourceState

	// Changelog script details
	ChangelogScript DbSchemaChangelogScriptPtrOutput `pulumi:"changelogScript"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Provides a connector and path at which to find the database schema representation
	SchemaSource DbSchemaSchemaSourcePtrOutput `pulumi:"schemaSource"`
	// The service associated with schema.
	Service pulumi.StringPtrOutput `pulumi:"service"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Type of the database schema (repository/script).
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewDbSchema registers a new resource with the given unique name, arguments, and options.
func NewDbSchema(ctx *pulumi.Context,
	name string, args *DbSchemaArgs, opts ...pulumi.ResourceOption) (*DbSchema, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbSchema
	err := ctx.RegisterResource("harness:platform/dbSchema:DbSchema", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbSchema gets an existing DbSchema resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbSchema(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbSchemaState, opts ...pulumi.ResourceOption) (*DbSchema, error) {
	var resource DbSchema
	err := ctx.ReadResource("harness:platform/dbSchema:DbSchema", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbSchema resources.
type dbSchemaState struct {
	// Changelog script details
	ChangelogScript *DbSchemaChangelogScript `pulumi:"changelogScript"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Provides a connector and path at which to find the database schema representation
	SchemaSource *DbSchemaSchemaSource `pulumi:"schemaSource"`
	// The service associated with schema.
	Service *string `pulumi:"service"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// Type of the database schema (repository/script).
	Type *string `pulumi:"type"`
}

type DbSchemaState struct {
	// Changelog script details
	ChangelogScript DbSchemaChangelogScriptPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Provides a connector and path at which to find the database schema representation
	SchemaSource DbSchemaSchemaSourcePtrInput
	// The service associated with schema.
	Service pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// Type of the database schema (repository/script).
	Type pulumi.StringPtrInput
}

func (DbSchemaState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbSchemaState)(nil)).Elem()
}

type dbSchemaArgs struct {
	// Changelog script details
	ChangelogScript *DbSchemaChangelogScript `pulumi:"changelogScript"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId string `pulumi:"projectId"`
	// Provides a connector and path at which to find the database schema representation
	SchemaSource *DbSchemaSchemaSource `pulumi:"schemaSource"`
	// The service associated with schema.
	Service *string `pulumi:"service"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// Type of the database schema (repository/script).
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a DbSchema resource.
type DbSchemaArgs struct {
	// Changelog script details
	ChangelogScript DbSchemaChangelogScriptPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringInput
	// Unique identifier of the project.
	ProjectId pulumi.StringInput
	// Provides a connector and path at which to find the database schema representation
	SchemaSource DbSchemaSchemaSourcePtrInput
	// The service associated with schema.
	Service pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// Type of the database schema (repository/script).
	Type pulumi.StringPtrInput
}

func (DbSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbSchemaArgs)(nil)).Elem()
}

type DbSchemaInput interface {
	pulumi.Input

	ToDbSchemaOutput() DbSchemaOutput
	ToDbSchemaOutputWithContext(ctx context.Context) DbSchemaOutput
}

func (*DbSchema) ElementType() reflect.Type {
	return reflect.TypeOf((**DbSchema)(nil)).Elem()
}

func (i *DbSchema) ToDbSchemaOutput() DbSchemaOutput {
	return i.ToDbSchemaOutputWithContext(context.Background())
}

func (i *DbSchema) ToDbSchemaOutputWithContext(ctx context.Context) DbSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbSchemaOutput)
}

// DbSchemaArrayInput is an input type that accepts DbSchemaArray and DbSchemaArrayOutput values.
// You can construct a concrete instance of `DbSchemaArrayInput` via:
//
//	DbSchemaArray{ DbSchemaArgs{...} }
type DbSchemaArrayInput interface {
	pulumi.Input

	ToDbSchemaArrayOutput() DbSchemaArrayOutput
	ToDbSchemaArrayOutputWithContext(context.Context) DbSchemaArrayOutput
}

type DbSchemaArray []DbSchemaInput

func (DbSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbSchema)(nil)).Elem()
}

func (i DbSchemaArray) ToDbSchemaArrayOutput() DbSchemaArrayOutput {
	return i.ToDbSchemaArrayOutputWithContext(context.Background())
}

func (i DbSchemaArray) ToDbSchemaArrayOutputWithContext(ctx context.Context) DbSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbSchemaArrayOutput)
}

// DbSchemaMapInput is an input type that accepts DbSchemaMap and DbSchemaMapOutput values.
// You can construct a concrete instance of `DbSchemaMapInput` via:
//
//	DbSchemaMap{ "key": DbSchemaArgs{...} }
type DbSchemaMapInput interface {
	pulumi.Input

	ToDbSchemaMapOutput() DbSchemaMapOutput
	ToDbSchemaMapOutputWithContext(context.Context) DbSchemaMapOutput
}

type DbSchemaMap map[string]DbSchemaInput

func (DbSchemaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbSchema)(nil)).Elem()
}

func (i DbSchemaMap) ToDbSchemaMapOutput() DbSchemaMapOutput {
	return i.ToDbSchemaMapOutputWithContext(context.Background())
}

func (i DbSchemaMap) ToDbSchemaMapOutputWithContext(ctx context.Context) DbSchemaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbSchemaMapOutput)
}

type DbSchemaOutput struct{ *pulumi.OutputState }

func (DbSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbSchema)(nil)).Elem()
}

func (o DbSchemaOutput) ToDbSchemaOutput() DbSchemaOutput {
	return o
}

func (o DbSchemaOutput) ToDbSchemaOutputWithContext(ctx context.Context) DbSchemaOutput {
	return o
}

// Changelog script details
func (o DbSchemaOutput) ChangelogScript() DbSchemaChangelogScriptPtrOutput {
	return o.ApplyT(func(v *DbSchema) DbSchemaChangelogScriptPtrOutput { return v.ChangelogScript }).(DbSchemaChangelogScriptPtrOutput)
}

// Description of the resource.
func (o DbSchemaOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbSchema) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o DbSchemaOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *DbSchema) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o DbSchemaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DbSchema) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o DbSchemaOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbSchema) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Unique identifier of the project.
func (o DbSchemaOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbSchema) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Provides a connector and path at which to find the database schema representation
func (o DbSchemaOutput) SchemaSource() DbSchemaSchemaSourcePtrOutput {
	return o.ApplyT(func(v *DbSchema) DbSchemaSchemaSourcePtrOutput { return v.SchemaSource }).(DbSchemaSchemaSourcePtrOutput)
}

// The service associated with schema.
func (o DbSchemaOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbSchema) pulumi.StringPtrOutput { return v.Service }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o DbSchemaOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DbSchema) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Type of the database schema (repository/script).
func (o DbSchemaOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbSchema) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type DbSchemaArrayOutput struct{ *pulumi.OutputState }

func (DbSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbSchema)(nil)).Elem()
}

func (o DbSchemaArrayOutput) ToDbSchemaArrayOutput() DbSchemaArrayOutput {
	return o
}

func (o DbSchemaArrayOutput) ToDbSchemaArrayOutputWithContext(ctx context.Context) DbSchemaArrayOutput {
	return o
}

func (o DbSchemaArrayOutput) Index(i pulumi.IntInput) DbSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbSchema {
		return vs[0].([]*DbSchema)[vs[1].(int)]
	}).(DbSchemaOutput)
}

type DbSchemaMapOutput struct{ *pulumi.OutputState }

func (DbSchemaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbSchema)(nil)).Elem()
}

func (o DbSchemaMapOutput) ToDbSchemaMapOutput() DbSchemaMapOutput {
	return o
}

func (o DbSchemaMapOutput) ToDbSchemaMapOutputWithContext(ctx context.Context) DbSchemaMapOutput {
	return o
}

func (o DbSchemaMapOutput) MapIndex(k pulumi.StringInput) DbSchemaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbSchema {
		return vs[0].(map[string]*DbSchema)[vs[1].(string)]
	}).(DbSchemaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbSchemaInput)(nil)).Elem(), &DbSchema{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbSchemaArrayInput)(nil)).Elem(), DbSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbSchemaMapInput)(nil)).Elem(), DbSchemaMap{})
	pulumi.RegisterOutputType(DbSchemaOutput{})
	pulumi.RegisterOutputType(DbSchemaArrayOutput{})
	pulumi.RegisterOutputType(DbSchemaMapOutput{})
}
