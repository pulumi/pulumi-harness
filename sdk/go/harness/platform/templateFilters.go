// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Harness Template Filters.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewTemplateFilters(ctx, "test", &platform.TemplateFiltersArgs{
//				Identifier: pulumi.String("identifier"),
//				Name:       pulumi.String("name"),
//				OrgId:      pulumi.String("org_id"),
//				ProjectId:  pulumi.String("project_id"),
//				Type:       pulumi.String("Template"),
//				FilterProperties: &platform.TemplateFiltersFilterPropertiesArgs{
//					Tags: pulumi.StringArray{
//						pulumi.String("foo:bar"),
//					},
//					FilterType: pulumi.String("Template"),
//				},
//				FilterVisibility: pulumi.String("EveryOne"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import account level template filter
//
// ```sh
// $ pulumi import harness:platform/templateFilters:TemplateFilters example <filter_id>/<type>
// ```
//
// # Import org level template filter
//
// ```sh
// $ pulumi import harness:platform/templateFilters:TemplateFilters example <org_id>/<filter_id>/<type>
// ```
//
// # Import project level template filter
//
// ```sh
// $ pulumi import harness:platform/templateFilters:TemplateFilters example <org_id>/<project_id>/<filter_id>/<type>
// ```
type TemplateFilters struct {
	pulumi.CustomResourceState

	// Properties of the filters entity defined in Harness.
	FilterProperties TemplateFiltersFilterPropertiesOutput `pulumi:"filterProperties"`
	// Only accept values "EveryOne" and "OnlyCreator". This indicates visibility of filters. By default, everyone can view this filter.
	FilterVisibility pulumi.StringPtrOutput `pulumi:"filterVisibility"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the template filters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Organization Identifier for the Entity.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Project Identifier for the Entity.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Type of template filters. Currently supported types are { Template}
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewTemplateFilters registers a new resource with the given unique name, arguments, and options.
func NewTemplateFilters(ctx *pulumi.Context,
	name string, args *TemplateFiltersArgs, opts ...pulumi.ResourceOption) (*TemplateFilters, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FilterProperties == nil {
		return nil, errors.New("invalid value for required argument 'FilterProperties'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TemplateFilters
	err := ctx.RegisterResource("harness:platform/templateFilters:TemplateFilters", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTemplateFilters gets an existing TemplateFilters resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTemplateFilters(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TemplateFiltersState, opts ...pulumi.ResourceOption) (*TemplateFilters, error) {
	var resource TemplateFilters
	err := ctx.ReadResource("harness:platform/templateFilters:TemplateFilters", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TemplateFilters resources.
type templateFiltersState struct {
	// Properties of the filters entity defined in Harness.
	FilterProperties *TemplateFiltersFilterProperties `pulumi:"filterProperties"`
	// Only accept values "EveryOne" and "OnlyCreator". This indicates visibility of filters. By default, everyone can view this filter.
	FilterVisibility *string `pulumi:"filterVisibility"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the template filters.
	Name *string `pulumi:"name"`
	// Organization Identifier for the Entity.
	OrgId *string `pulumi:"orgId"`
	// Project Identifier for the Entity.
	ProjectId *string `pulumi:"projectId"`
	// Type of template filters. Currently supported types are { Template}
	Type *string `pulumi:"type"`
}

type TemplateFiltersState struct {
	// Properties of the filters entity defined in Harness.
	FilterProperties TemplateFiltersFilterPropertiesPtrInput
	// Only accept values "EveryOne" and "OnlyCreator". This indicates visibility of filters. By default, everyone can view this filter.
	FilterVisibility pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the template filters.
	Name pulumi.StringPtrInput
	// Organization Identifier for the Entity.
	OrgId pulumi.StringPtrInput
	// Project Identifier for the Entity.
	ProjectId pulumi.StringPtrInput
	// Type of template filters. Currently supported types are { Template}
	Type pulumi.StringPtrInput
}

func (TemplateFiltersState) ElementType() reflect.Type {
	return reflect.TypeOf((*templateFiltersState)(nil)).Elem()
}

type templateFiltersArgs struct {
	// Properties of the filters entity defined in Harness.
	FilterProperties TemplateFiltersFilterProperties `pulumi:"filterProperties"`
	// Only accept values "EveryOne" and "OnlyCreator". This indicates visibility of filters. By default, everyone can view this filter.
	FilterVisibility *string `pulumi:"filterVisibility"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the template filters.
	Name *string `pulumi:"name"`
	// Organization Identifier for the Entity.
	OrgId *string `pulumi:"orgId"`
	// Project Identifier for the Entity.
	ProjectId *string `pulumi:"projectId"`
	// Type of template filters. Currently supported types are { Template}
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a TemplateFilters resource.
type TemplateFiltersArgs struct {
	// Properties of the filters entity defined in Harness.
	FilterProperties TemplateFiltersFilterPropertiesInput
	// Only accept values "EveryOne" and "OnlyCreator". This indicates visibility of filters. By default, everyone can view this filter.
	FilterVisibility pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the template filters.
	Name pulumi.StringPtrInput
	// Organization Identifier for the Entity.
	OrgId pulumi.StringPtrInput
	// Project Identifier for the Entity.
	ProjectId pulumi.StringPtrInput
	// Type of template filters. Currently supported types are { Template}
	Type pulumi.StringInput
}

func (TemplateFiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*templateFiltersArgs)(nil)).Elem()
}

type TemplateFiltersInput interface {
	pulumi.Input

	ToTemplateFiltersOutput() TemplateFiltersOutput
	ToTemplateFiltersOutputWithContext(ctx context.Context) TemplateFiltersOutput
}

func (*TemplateFilters) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilters)(nil)).Elem()
}

func (i *TemplateFilters) ToTemplateFiltersOutput() TemplateFiltersOutput {
	return i.ToTemplateFiltersOutputWithContext(context.Background())
}

func (i *TemplateFilters) ToTemplateFiltersOutputWithContext(ctx context.Context) TemplateFiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFiltersOutput)
}

// TemplateFiltersArrayInput is an input type that accepts TemplateFiltersArray and TemplateFiltersArrayOutput values.
// You can construct a concrete instance of `TemplateFiltersArrayInput` via:
//
//	TemplateFiltersArray{ TemplateFiltersArgs{...} }
type TemplateFiltersArrayInput interface {
	pulumi.Input

	ToTemplateFiltersArrayOutput() TemplateFiltersArrayOutput
	ToTemplateFiltersArrayOutputWithContext(context.Context) TemplateFiltersArrayOutput
}

type TemplateFiltersArray []TemplateFiltersInput

func (TemplateFiltersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TemplateFilters)(nil)).Elem()
}

func (i TemplateFiltersArray) ToTemplateFiltersArrayOutput() TemplateFiltersArrayOutput {
	return i.ToTemplateFiltersArrayOutputWithContext(context.Background())
}

func (i TemplateFiltersArray) ToTemplateFiltersArrayOutputWithContext(ctx context.Context) TemplateFiltersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFiltersArrayOutput)
}

// TemplateFiltersMapInput is an input type that accepts TemplateFiltersMap and TemplateFiltersMapOutput values.
// You can construct a concrete instance of `TemplateFiltersMapInput` via:
//
//	TemplateFiltersMap{ "key": TemplateFiltersArgs{...} }
type TemplateFiltersMapInput interface {
	pulumi.Input

	ToTemplateFiltersMapOutput() TemplateFiltersMapOutput
	ToTemplateFiltersMapOutputWithContext(context.Context) TemplateFiltersMapOutput
}

type TemplateFiltersMap map[string]TemplateFiltersInput

func (TemplateFiltersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TemplateFilters)(nil)).Elem()
}

func (i TemplateFiltersMap) ToTemplateFiltersMapOutput() TemplateFiltersMapOutput {
	return i.ToTemplateFiltersMapOutputWithContext(context.Background())
}

func (i TemplateFiltersMap) ToTemplateFiltersMapOutputWithContext(ctx context.Context) TemplateFiltersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFiltersMapOutput)
}

type TemplateFiltersOutput struct{ *pulumi.OutputState }

func (TemplateFiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilters)(nil)).Elem()
}

func (o TemplateFiltersOutput) ToTemplateFiltersOutput() TemplateFiltersOutput {
	return o
}

func (o TemplateFiltersOutput) ToTemplateFiltersOutputWithContext(ctx context.Context) TemplateFiltersOutput {
	return o
}

// Properties of the filters entity defined in Harness.
func (o TemplateFiltersOutput) FilterProperties() TemplateFiltersFilterPropertiesOutput {
	return o.ApplyT(func(v *TemplateFilters) TemplateFiltersFilterPropertiesOutput { return v.FilterProperties }).(TemplateFiltersFilterPropertiesOutput)
}

// Only accept values "EveryOne" and "OnlyCreator". This indicates visibility of filters. By default, everyone can view this filter.
func (o TemplateFiltersOutput) FilterVisibility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilters) pulumi.StringPtrOutput { return v.FilterVisibility }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o TemplateFiltersOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *TemplateFilters) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the template filters.
func (o TemplateFiltersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TemplateFilters) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Organization Identifier for the Entity.
func (o TemplateFiltersOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilters) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Project Identifier for the Entity.
func (o TemplateFiltersOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilters) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Type of template filters. Currently supported types are { Template}
func (o TemplateFiltersOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *TemplateFilters) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type TemplateFiltersArrayOutput struct{ *pulumi.OutputState }

func (TemplateFiltersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TemplateFilters)(nil)).Elem()
}

func (o TemplateFiltersArrayOutput) ToTemplateFiltersArrayOutput() TemplateFiltersArrayOutput {
	return o
}

func (o TemplateFiltersArrayOutput) ToTemplateFiltersArrayOutputWithContext(ctx context.Context) TemplateFiltersArrayOutput {
	return o
}

func (o TemplateFiltersArrayOutput) Index(i pulumi.IntInput) TemplateFiltersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TemplateFilters {
		return vs[0].([]*TemplateFilters)[vs[1].(int)]
	}).(TemplateFiltersOutput)
}

type TemplateFiltersMapOutput struct{ *pulumi.OutputState }

func (TemplateFiltersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TemplateFilters)(nil)).Elem()
}

func (o TemplateFiltersMapOutput) ToTemplateFiltersMapOutput() TemplateFiltersMapOutput {
	return o
}

func (o TemplateFiltersMapOutput) ToTemplateFiltersMapOutputWithContext(ctx context.Context) TemplateFiltersMapOutput {
	return o
}

func (o TemplateFiltersMapOutput) MapIndex(k pulumi.StringInput) TemplateFiltersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TemplateFilters {
		return vs[0].(map[string]*TemplateFilters)[vs[1].(string)]
	}).(TemplateFiltersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFiltersInput)(nil)).Elem(), &TemplateFilters{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFiltersArrayInput)(nil)).Elem(), TemplateFiltersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFiltersMapInput)(nil)).Elem(), TemplateFiltersMap{})
	pulumi.RegisterOutputType(TemplateFiltersOutput{})
	pulumi.RegisterOutputType(TemplateFiltersArrayOutput{})
	pulumi.RegisterOutputType(TemplateFiltersMapOutput{})
}
