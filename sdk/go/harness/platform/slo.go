// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating an SLO.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"type": "Monthly",
//				"spec": map[string]interface{}{
//					"dayOfMonth": 5,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"monitoredServiceRef":       "monitoredServiceRef",
//				"serviceLevelIndicatorType": "Availability",
//				"serviceLevelIndicators": []map[string]interface{}{
//					map[string]interface{}{
//						"name":       "name",
//						"identifier": "identifier",
//						"type":       "Window",
//						"spec": map[string]interface{}{
//							"type": "Threshold",
//							"spec": map[string]interface{}{
//								"metric1":        "metric1",
//								"thresholdValue": 10,
//								"thresholdType":  ">",
//							},
//							"sliMissingDataType": "Good",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			_, err = platform.NewSlo(ctx, "example", &platform.SloArgs{
//				OrgId:      pulumi.String("org_id"),
//				ProjectId:  pulumi.String("project_id"),
//				Identifier: pulumi.String("identifier"),
//				Request: &platform.SloRequestArgs{
//					Name:        pulumi.String("name"),
//					Description: pulumi.String("description"),
//					Tags: pulumi.StringArray{
//						pulumi.String("foo:bar"),
//						pulumi.String("bar:foo"),
//					},
//					UserJourneyRefs: pulumi.StringArray{
//						pulumi.String("one"),
//						pulumi.String("two"),
//					},
//					SloTarget: &platform.SloRequestSloTargetArgs{
//						Type:                pulumi.String("Calender"),
//						SloTargetPercentage: pulumi.Float64(10),
//						Spec:                pulumi.String(json0),
//					},
//					Type: pulumi.String("Simple"),
//					Spec: pulumi.String(json1),
//					NotificationRuleRefs: platform.SloRequestNotificationRuleRefArray{
//						&platform.SloRequestNotificationRuleRefArgs{
//							NotificationRuleRef: pulumi.String("notification_rule_ref"),
//							Enabled:             pulumi.Bool(true),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import account level SLO
//
// ```sh
// $ pulumi import harness:platform/slo:Slo example <slo_id>
// ```
//
// # Import organization level SLO
//
// ```sh
// $ pulumi import harness:platform/slo:Slo example <org_id>/<slo_id>
// ```
//
// # Import project level SLO
//
// ```sh
// $ pulumi import harness:platform/slo:Slo example <org_id>/<project_id>/<slo_id>
// ```
type Slo struct {
	pulumi.CustomResourceState

	// Identifier of the SLO.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Identifier of the organization in which the SLO is configured.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Identifier of the project in which the SLO is configured.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Request for creating or updating SLO.
	Request SloRequestPtrOutput `pulumi:"request"`
}

// NewSlo registers a new resource with the given unique name, arguments, and options.
func NewSlo(ctx *pulumi.Context,
	name string, args *SloArgs, opts ...pulumi.ResourceOption) (*Slo, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Slo
	err := ctx.RegisterResource("harness:platform/slo:Slo", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSlo gets an existing Slo resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSlo(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SloState, opts ...pulumi.ResourceOption) (*Slo, error) {
	var resource Slo
	err := ctx.ReadResource("harness:platform/slo:Slo", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Slo resources.
type sloState struct {
	// Identifier of the SLO.
	Identifier *string `pulumi:"identifier"`
	// Identifier of the organization in which the SLO is configured.
	OrgId *string `pulumi:"orgId"`
	// Identifier of the project in which the SLO is configured.
	ProjectId *string `pulumi:"projectId"`
	// Request for creating or updating SLO.
	Request *SloRequest `pulumi:"request"`
}

type SloState struct {
	// Identifier of the SLO.
	Identifier pulumi.StringPtrInput
	// Identifier of the organization in which the SLO is configured.
	OrgId pulumi.StringPtrInput
	// Identifier of the project in which the SLO is configured.
	ProjectId pulumi.StringPtrInput
	// Request for creating or updating SLO.
	Request SloRequestPtrInput
}

func (SloState) ElementType() reflect.Type {
	return reflect.TypeOf((*sloState)(nil)).Elem()
}

type sloArgs struct {
	// Identifier of the SLO.
	Identifier string `pulumi:"identifier"`
	// Identifier of the organization in which the SLO is configured.
	OrgId string `pulumi:"orgId"`
	// Identifier of the project in which the SLO is configured.
	ProjectId string `pulumi:"projectId"`
	// Request for creating or updating SLO.
	Request *SloRequest `pulumi:"request"`
}

// The set of arguments for constructing a Slo resource.
type SloArgs struct {
	// Identifier of the SLO.
	Identifier pulumi.StringInput
	// Identifier of the organization in which the SLO is configured.
	OrgId pulumi.StringInput
	// Identifier of the project in which the SLO is configured.
	ProjectId pulumi.StringInput
	// Request for creating or updating SLO.
	Request SloRequestPtrInput
}

func (SloArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sloArgs)(nil)).Elem()
}

type SloInput interface {
	pulumi.Input

	ToSloOutput() SloOutput
	ToSloOutputWithContext(ctx context.Context) SloOutput
}

func (*Slo) ElementType() reflect.Type {
	return reflect.TypeOf((**Slo)(nil)).Elem()
}

func (i *Slo) ToSloOutput() SloOutput {
	return i.ToSloOutputWithContext(context.Background())
}

func (i *Slo) ToSloOutputWithContext(ctx context.Context) SloOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloOutput)
}

// SloArrayInput is an input type that accepts SloArray and SloArrayOutput values.
// You can construct a concrete instance of `SloArrayInput` via:
//
//	SloArray{ SloArgs{...} }
type SloArrayInput interface {
	pulumi.Input

	ToSloArrayOutput() SloArrayOutput
	ToSloArrayOutputWithContext(context.Context) SloArrayOutput
}

type SloArray []SloInput

func (SloArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Slo)(nil)).Elem()
}

func (i SloArray) ToSloArrayOutput() SloArrayOutput {
	return i.ToSloArrayOutputWithContext(context.Background())
}

func (i SloArray) ToSloArrayOutputWithContext(ctx context.Context) SloArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloArrayOutput)
}

// SloMapInput is an input type that accepts SloMap and SloMapOutput values.
// You can construct a concrete instance of `SloMapInput` via:
//
//	SloMap{ "key": SloArgs{...} }
type SloMapInput interface {
	pulumi.Input

	ToSloMapOutput() SloMapOutput
	ToSloMapOutputWithContext(context.Context) SloMapOutput
}

type SloMap map[string]SloInput

func (SloMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Slo)(nil)).Elem()
}

func (i SloMap) ToSloMapOutput() SloMapOutput {
	return i.ToSloMapOutputWithContext(context.Background())
}

func (i SloMap) ToSloMapOutputWithContext(ctx context.Context) SloMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloMapOutput)
}

type SloOutput struct{ *pulumi.OutputState }

func (SloOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Slo)(nil)).Elem()
}

func (o SloOutput) ToSloOutput() SloOutput {
	return o
}

func (o SloOutput) ToSloOutputWithContext(ctx context.Context) SloOutput {
	return o
}

// Identifier of the SLO.
func (o SloOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Slo) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Identifier of the organization in which the SLO is configured.
func (o SloOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *Slo) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Identifier of the project in which the SLO is configured.
func (o SloOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Slo) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Request for creating or updating SLO.
func (o SloOutput) Request() SloRequestPtrOutput {
	return o.ApplyT(func(v *Slo) SloRequestPtrOutput { return v.Request }).(SloRequestPtrOutput)
}

type SloArrayOutput struct{ *pulumi.OutputState }

func (SloArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Slo)(nil)).Elem()
}

func (o SloArrayOutput) ToSloArrayOutput() SloArrayOutput {
	return o
}

func (o SloArrayOutput) ToSloArrayOutputWithContext(ctx context.Context) SloArrayOutput {
	return o
}

func (o SloArrayOutput) Index(i pulumi.IntInput) SloOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Slo {
		return vs[0].([]*Slo)[vs[1].(int)]
	}).(SloOutput)
}

type SloMapOutput struct{ *pulumi.OutputState }

func (SloMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Slo)(nil)).Elem()
}

func (o SloMapOutput) ToSloMapOutput() SloMapOutput {
	return o
}

func (o SloMapOutput) ToSloMapOutputWithContext(ctx context.Context) SloMapOutput {
	return o
}

func (o SloMapOutput) MapIndex(k pulumi.StringInput) SloOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Slo {
		return vs[0].(map[string]*Slo)[vs[1].(string)]
	}).(SloOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SloInput)(nil)).Elem(), &Slo{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloArrayInput)(nil)).Elem(), SloArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloMapInput)(nil)).Elem(), SloMap{})
	pulumi.RegisterOutputType(SloOutput{})
	pulumi.RegisterOutputType(SloArrayOutput{})
	pulumi.RegisterOutputType(SloMapOutput{})
}
