// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Datasource for looking up a Gcp connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupGcpConnector(ctx, &platform.LookupGcpConnectorArgs{
//				Identifier: "identifier",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupGcpConnector(ctx *pulumi.Context, args *LookupGcpConnectorArgs, opts ...pulumi.InvokeOption) (*LookupGcpConnectorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGcpConnectorResult
	err := ctx.Invoke("harness:platform/getGcpConnector:getGcpConnector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGcpConnector.
type LookupGcpConnectorArgs struct {
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getGcpConnector.
type LookupGcpConnectorResult struct {
	// Description of the resource.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Inherit configuration from delegate.
	InheritFromDelegates []GetGcpConnectorInheritFromDelegate `pulumi:"inheritFromDelegates"`
	// Manual credential configuration.
	Manuals []GetGcpConnectorManual `pulumi:"manuals"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Authentication using harness oidc.
	OidcAuthentications []GetGcpConnectorOidcAuthentication `pulumi:"oidcAuthentications"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

func LookupGcpConnectorOutput(ctx *pulumi.Context, args LookupGcpConnectorOutputArgs, opts ...pulumi.InvokeOption) LookupGcpConnectorResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupGcpConnectorResultOutput, error) {
			args := v.(LookupGcpConnectorArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getGcpConnector:getGcpConnector", args, LookupGcpConnectorResultOutput{}, options).(LookupGcpConnectorResultOutput), nil
		}).(LookupGcpConnectorResultOutput)
}

// A collection of arguments for invoking getGcpConnector.
type LookupGcpConnectorOutputArgs struct {
	// Unique identifier of the resource.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupGcpConnectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGcpConnectorArgs)(nil)).Elem()
}

// A collection of values returned by getGcpConnector.
type LookupGcpConnectorResultOutput struct{ *pulumi.OutputState }

func (LookupGcpConnectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGcpConnectorResult)(nil)).Elem()
}

func (o LookupGcpConnectorResultOutput) ToLookupGcpConnectorResultOutput() LookupGcpConnectorResultOutput {
	return o
}

func (o LookupGcpConnectorResultOutput) ToLookupGcpConnectorResultOutputWithContext(ctx context.Context) LookupGcpConnectorResultOutput {
	return o
}

// Description of the resource.
func (o LookupGcpConnectorResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpConnectorResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupGcpConnectorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpConnectorResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupGcpConnectorResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpConnectorResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Inherit configuration from delegate.
func (o LookupGcpConnectorResultOutput) InheritFromDelegates() GetGcpConnectorInheritFromDelegateArrayOutput {
	return o.ApplyT(func(v LookupGcpConnectorResult) []GetGcpConnectorInheritFromDelegate { return v.InheritFromDelegates }).(GetGcpConnectorInheritFromDelegateArrayOutput)
}

// Manual credential configuration.
func (o LookupGcpConnectorResultOutput) Manuals() GetGcpConnectorManualArrayOutput {
	return o.ApplyT(func(v LookupGcpConnectorResult) []GetGcpConnectorManual { return v.Manuals }).(GetGcpConnectorManualArrayOutput)
}

// Name of the resource.
func (o LookupGcpConnectorResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGcpConnectorResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Authentication using harness oidc.
func (o LookupGcpConnectorResultOutput) OidcAuthentications() GetGcpConnectorOidcAuthenticationArrayOutput {
	return o.ApplyT(func(v LookupGcpConnectorResult) []GetGcpConnectorOidcAuthentication { return v.OidcAuthentications }).(GetGcpConnectorOidcAuthenticationArrayOutput)
}

// Unique identifier of the organization.
func (o LookupGcpConnectorResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGcpConnectorResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o LookupGcpConnectorResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGcpConnectorResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o LookupGcpConnectorResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupGcpConnectorResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGcpConnectorResultOutput{})
}
