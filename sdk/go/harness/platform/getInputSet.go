// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness input set.
func LookupInputSet(ctx *pulumi.Context, args *LookupInputSetArgs, opts ...pulumi.InvokeOption) (*LookupInputSetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInputSetResult
	err := ctx.Invoke("harness:platform/getInputSet:getInputSet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInputSet.
type LookupInputSetArgs struct {
	// Contains parameters related to creating an Entity for Git Experience.
	GitDetails *GetInputSetGitDetails `pulumi:"gitDetails"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId string `pulumi:"orgId"`
	// Identifier of the pipeline
	PipelineId string `pulumi:"pipelineId"`
	// Unique identifier of the project.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getInputSet.
type LookupInputSetResult struct {
	// Description of the resource.
	Description string `pulumi:"description"`
	// Contains parameters related to creating an Entity for Git Experience.
	GitDetails *GetInputSetGitDetails `pulumi:"gitDetails"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId string `pulumi:"orgId"`
	// Identifier of the pipeline
	PipelineId string `pulumi:"pipelineId"`
	// Unique identifier of the project.
	ProjectId string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// Input Set YAML
	Yaml string `pulumi:"yaml"`
}

func LookupInputSetOutput(ctx *pulumi.Context, args LookupInputSetOutputArgs, opts ...pulumi.InvokeOption) LookupInputSetResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupInputSetResultOutput, error) {
			args := v.(LookupInputSetArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getInputSet:getInputSet", args, LookupInputSetResultOutput{}, options).(LookupInputSetResultOutput), nil
		}).(LookupInputSetResultOutput)
}

// A collection of arguments for invoking getInputSet.
type LookupInputSetOutputArgs struct {
	// Contains parameters related to creating an Entity for Git Experience.
	GitDetails GetInputSetGitDetailsPtrInput `pulumi:"gitDetails"`
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringInput `pulumi:"orgId"`
	// Identifier of the pipeline
	PipelineId pulumi.StringInput `pulumi:"pipelineId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupInputSetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInputSetArgs)(nil)).Elem()
}

// A collection of values returned by getInputSet.
type LookupInputSetResultOutput struct{ *pulumi.OutputState }

func (LookupInputSetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInputSetResult)(nil)).Elem()
}

func (o LookupInputSetResultOutput) ToLookupInputSetResultOutput() LookupInputSetResultOutput {
	return o
}

func (o LookupInputSetResultOutput) ToLookupInputSetResultOutputWithContext(ctx context.Context) LookupInputSetResultOutput {
	return o
}

// Description of the resource.
func (o LookupInputSetResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInputSetResult) string { return v.Description }).(pulumi.StringOutput)
}

// Contains parameters related to creating an Entity for Git Experience.
func (o LookupInputSetResultOutput) GitDetails() GetInputSetGitDetailsPtrOutput {
	return o.ApplyT(func(v LookupInputSetResult) *GetInputSetGitDetails { return v.GitDetails }).(GetInputSetGitDetailsPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupInputSetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInputSetResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupInputSetResultOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInputSetResult) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

// Name of the resource.
func (o LookupInputSetResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInputSetResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the organization.
func (o LookupInputSetResultOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInputSetResult) string { return v.OrgId }).(pulumi.StringOutput)
}

// Identifier of the pipeline
func (o LookupInputSetResultOutput) PipelineId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInputSetResult) string { return v.PipelineId }).(pulumi.StringOutput)
}

// Unique identifier of the project.
func (o LookupInputSetResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInputSetResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Tags to associate with the resource.
func (o LookupInputSetResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupInputSetResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Input Set YAML
func (o LookupInputSetResultOutput) Yaml() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInputSetResult) string { return v.Yaml }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInputSetResultOutput{})
}
