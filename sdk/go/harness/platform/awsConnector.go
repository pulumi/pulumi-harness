// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating an AWS connector.
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import account level aws connector
//
// ```sh
// $ pulumi import harness:platform/awsConnector:AwsConnector example <connector_id>
// ```
//
// # Import organization level aws connector
//
// ```sh
// $ pulumi import harness:platform/awsConnector:AwsConnector example <organization_id>/<connector_id>
// ```
//
// # Import project level aws connector
//
// ```sh
// $ pulumi import harness:platform/awsConnector:AwsConnector example <organization_id>/<project_id>/<connector_id>
// ```
type AwsConnector struct {
	pulumi.CustomResourceState

	// Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.
	CrossAccountAccess AwsConnectorCrossAccountAccessPtrOutput `pulumi:"crossAccountAccess"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Equal Jitter BackOff Strategy.
	EqualJitterBackoffStrategy AwsConnectorEqualJitterBackoffStrategyPtrOutput `pulumi:"equalJitterBackoffStrategy"`
	// Enable this flag to execute on Delegate
	ExecuteOnDelegate pulumi.BoolPtrOutput `pulumi:"executeOnDelegate"`
	// Fixed Delay BackOff Strategy.
	FixedDelayBackoffStrategy AwsConnectorFixedDelayBackoffStrategyPtrOutput `pulumi:"fixedDelayBackoffStrategy"`
	// Enable this flag for force deletion of connector
	ForceDelete pulumi.BoolOutput `pulumi:"forceDelete"`
	// Full Jitter BackOff Strategy.
	FullJitterBackoffStrategy AwsConnectorFullJitterBackoffStrategyPtrOutput `pulumi:"fullJitterBackoffStrategy"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Inherit credentials from the delegate.
	InheritFromDelegate AwsConnectorInheritFromDelegatePtrOutput `pulumi:"inheritFromDelegate"`
	// Use IAM role for service accounts.
	Irsa AwsConnectorIrsaPtrOutput `pulumi:"irsa"`
	// Use IAM role for service accounts.
	Manual AwsConnectorManualPtrOutput `pulumi:"manual"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Authentication using harness oidc.
	OidcAuthentication AwsConnectorOidcAuthenticationPtrOutput `pulumi:"oidcAuthentication"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewAwsConnector registers a new resource with the given unique name, arguments, and options.
func NewAwsConnector(ctx *pulumi.Context,
	name string, args *AwsConnectorArgs, opts ...pulumi.ResourceOption) (*AwsConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsConnector
	err := ctx.RegisterResource("harness:platform/awsConnector:AwsConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsConnector gets an existing AwsConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsConnectorState, opts ...pulumi.ResourceOption) (*AwsConnector, error) {
	var resource AwsConnector
	err := ctx.ReadResource("harness:platform/awsConnector:AwsConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsConnector resources.
type awsConnectorState struct {
	// Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.
	CrossAccountAccess *AwsConnectorCrossAccountAccess `pulumi:"crossAccountAccess"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Equal Jitter BackOff Strategy.
	EqualJitterBackoffStrategy *AwsConnectorEqualJitterBackoffStrategy `pulumi:"equalJitterBackoffStrategy"`
	// Enable this flag to execute on Delegate
	ExecuteOnDelegate *bool `pulumi:"executeOnDelegate"`
	// Fixed Delay BackOff Strategy.
	FixedDelayBackoffStrategy *AwsConnectorFixedDelayBackoffStrategy `pulumi:"fixedDelayBackoffStrategy"`
	// Enable this flag for force deletion of connector
	ForceDelete *bool `pulumi:"forceDelete"`
	// Full Jitter BackOff Strategy.
	FullJitterBackoffStrategy *AwsConnectorFullJitterBackoffStrategy `pulumi:"fullJitterBackoffStrategy"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Inherit credentials from the delegate.
	InheritFromDelegate *AwsConnectorInheritFromDelegate `pulumi:"inheritFromDelegate"`
	// Use IAM role for service accounts.
	Irsa *AwsConnectorIrsa `pulumi:"irsa"`
	// Use IAM role for service accounts.
	Manual *AwsConnectorManual `pulumi:"manual"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Authentication using harness oidc.
	OidcAuthentication *AwsConnectorOidcAuthentication `pulumi:"oidcAuthentication"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

type AwsConnectorState struct {
	// Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.
	CrossAccountAccess AwsConnectorCrossAccountAccessPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Equal Jitter BackOff Strategy.
	EqualJitterBackoffStrategy AwsConnectorEqualJitterBackoffStrategyPtrInput
	// Enable this flag to execute on Delegate
	ExecuteOnDelegate pulumi.BoolPtrInput
	// Fixed Delay BackOff Strategy.
	FixedDelayBackoffStrategy AwsConnectorFixedDelayBackoffStrategyPtrInput
	// Enable this flag for force deletion of connector
	ForceDelete pulumi.BoolPtrInput
	// Full Jitter BackOff Strategy.
	FullJitterBackoffStrategy AwsConnectorFullJitterBackoffStrategyPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Inherit credentials from the delegate.
	InheritFromDelegate AwsConnectorInheritFromDelegatePtrInput
	// Use IAM role for service accounts.
	Irsa AwsConnectorIrsaPtrInput
	// Use IAM role for service accounts.
	Manual AwsConnectorManualPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Authentication using harness oidc.
	OidcAuthentication AwsConnectorOidcAuthenticationPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (AwsConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsConnectorState)(nil)).Elem()
}

type awsConnectorArgs struct {
	// Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.
	CrossAccountAccess *AwsConnectorCrossAccountAccess `pulumi:"crossAccountAccess"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Equal Jitter BackOff Strategy.
	EqualJitterBackoffStrategy *AwsConnectorEqualJitterBackoffStrategy `pulumi:"equalJitterBackoffStrategy"`
	// Enable this flag to execute on Delegate
	ExecuteOnDelegate *bool `pulumi:"executeOnDelegate"`
	// Fixed Delay BackOff Strategy.
	FixedDelayBackoffStrategy *AwsConnectorFixedDelayBackoffStrategy `pulumi:"fixedDelayBackoffStrategy"`
	// Enable this flag for force deletion of connector
	ForceDelete *bool `pulumi:"forceDelete"`
	// Full Jitter BackOff Strategy.
	FullJitterBackoffStrategy *AwsConnectorFullJitterBackoffStrategy `pulumi:"fullJitterBackoffStrategy"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Inherit credentials from the delegate.
	InheritFromDelegate *AwsConnectorInheritFromDelegate `pulumi:"inheritFromDelegate"`
	// Use IAM role for service accounts.
	Irsa *AwsConnectorIrsa `pulumi:"irsa"`
	// Use IAM role for service accounts.
	Manual *AwsConnectorManual `pulumi:"manual"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Authentication using harness oidc.
	OidcAuthentication *AwsConnectorOidcAuthentication `pulumi:"oidcAuthentication"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a AwsConnector resource.
type AwsConnectorArgs struct {
	// Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.
	CrossAccountAccess AwsConnectorCrossAccountAccessPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Equal Jitter BackOff Strategy.
	EqualJitterBackoffStrategy AwsConnectorEqualJitterBackoffStrategyPtrInput
	// Enable this flag to execute on Delegate
	ExecuteOnDelegate pulumi.BoolPtrInput
	// Fixed Delay BackOff Strategy.
	FixedDelayBackoffStrategy AwsConnectorFixedDelayBackoffStrategyPtrInput
	// Enable this flag for force deletion of connector
	ForceDelete pulumi.BoolPtrInput
	// Full Jitter BackOff Strategy.
	FullJitterBackoffStrategy AwsConnectorFullJitterBackoffStrategyPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Inherit credentials from the delegate.
	InheritFromDelegate AwsConnectorInheritFromDelegatePtrInput
	// Use IAM role for service accounts.
	Irsa AwsConnectorIrsaPtrInput
	// Use IAM role for service accounts.
	Manual AwsConnectorManualPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Authentication using harness oidc.
	OidcAuthentication AwsConnectorOidcAuthenticationPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (AwsConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsConnectorArgs)(nil)).Elem()
}

type AwsConnectorInput interface {
	pulumi.Input

	ToAwsConnectorOutput() AwsConnectorOutput
	ToAwsConnectorOutputWithContext(ctx context.Context) AwsConnectorOutput
}

func (*AwsConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsConnector)(nil)).Elem()
}

func (i *AwsConnector) ToAwsConnectorOutput() AwsConnectorOutput {
	return i.ToAwsConnectorOutputWithContext(context.Background())
}

func (i *AwsConnector) ToAwsConnectorOutputWithContext(ctx context.Context) AwsConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsConnectorOutput)
}

// AwsConnectorArrayInput is an input type that accepts AwsConnectorArray and AwsConnectorArrayOutput values.
// You can construct a concrete instance of `AwsConnectorArrayInput` via:
//
//	AwsConnectorArray{ AwsConnectorArgs{...} }
type AwsConnectorArrayInput interface {
	pulumi.Input

	ToAwsConnectorArrayOutput() AwsConnectorArrayOutput
	ToAwsConnectorArrayOutputWithContext(context.Context) AwsConnectorArrayOutput
}

type AwsConnectorArray []AwsConnectorInput

func (AwsConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsConnector)(nil)).Elem()
}

func (i AwsConnectorArray) ToAwsConnectorArrayOutput() AwsConnectorArrayOutput {
	return i.ToAwsConnectorArrayOutputWithContext(context.Background())
}

func (i AwsConnectorArray) ToAwsConnectorArrayOutputWithContext(ctx context.Context) AwsConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsConnectorArrayOutput)
}

// AwsConnectorMapInput is an input type that accepts AwsConnectorMap and AwsConnectorMapOutput values.
// You can construct a concrete instance of `AwsConnectorMapInput` via:
//
//	AwsConnectorMap{ "key": AwsConnectorArgs{...} }
type AwsConnectorMapInput interface {
	pulumi.Input

	ToAwsConnectorMapOutput() AwsConnectorMapOutput
	ToAwsConnectorMapOutputWithContext(context.Context) AwsConnectorMapOutput
}

type AwsConnectorMap map[string]AwsConnectorInput

func (AwsConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsConnector)(nil)).Elem()
}

func (i AwsConnectorMap) ToAwsConnectorMapOutput() AwsConnectorMapOutput {
	return i.ToAwsConnectorMapOutputWithContext(context.Background())
}

func (i AwsConnectorMap) ToAwsConnectorMapOutputWithContext(ctx context.Context) AwsConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsConnectorMapOutput)
}

type AwsConnectorOutput struct{ *pulumi.OutputState }

func (AwsConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsConnector)(nil)).Elem()
}

func (o AwsConnectorOutput) ToAwsConnectorOutput() AwsConnectorOutput {
	return o
}

func (o AwsConnectorOutput) ToAwsConnectorOutputWithContext(ctx context.Context) AwsConnectorOutput {
	return o
}

// Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.
func (o AwsConnectorOutput) CrossAccountAccess() AwsConnectorCrossAccountAccessPtrOutput {
	return o.ApplyT(func(v *AwsConnector) AwsConnectorCrossAccountAccessPtrOutput { return v.CrossAccountAccess }).(AwsConnectorCrossAccountAccessPtrOutput)
}

// Description of the resource.
func (o AwsConnectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsConnector) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Equal Jitter BackOff Strategy.
func (o AwsConnectorOutput) EqualJitterBackoffStrategy() AwsConnectorEqualJitterBackoffStrategyPtrOutput {
	return o.ApplyT(func(v *AwsConnector) AwsConnectorEqualJitterBackoffStrategyPtrOutput {
		return v.EqualJitterBackoffStrategy
	}).(AwsConnectorEqualJitterBackoffStrategyPtrOutput)
}

// Enable this flag to execute on Delegate
func (o AwsConnectorOutput) ExecuteOnDelegate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AwsConnector) pulumi.BoolPtrOutput { return v.ExecuteOnDelegate }).(pulumi.BoolPtrOutput)
}

// Fixed Delay BackOff Strategy.
func (o AwsConnectorOutput) FixedDelayBackoffStrategy() AwsConnectorFixedDelayBackoffStrategyPtrOutput {
	return o.ApplyT(func(v *AwsConnector) AwsConnectorFixedDelayBackoffStrategyPtrOutput {
		return v.FixedDelayBackoffStrategy
	}).(AwsConnectorFixedDelayBackoffStrategyPtrOutput)
}

// Enable this flag for force deletion of connector
func (o AwsConnectorOutput) ForceDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v *AwsConnector) pulumi.BoolOutput { return v.ForceDelete }).(pulumi.BoolOutput)
}

// Full Jitter BackOff Strategy.
func (o AwsConnectorOutput) FullJitterBackoffStrategy() AwsConnectorFullJitterBackoffStrategyPtrOutput {
	return o.ApplyT(func(v *AwsConnector) AwsConnectorFullJitterBackoffStrategyPtrOutput {
		return v.FullJitterBackoffStrategy
	}).(AwsConnectorFullJitterBackoffStrategyPtrOutput)
}

// Unique identifier of the resource.
func (o AwsConnectorOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsConnector) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Inherit credentials from the delegate.
func (o AwsConnectorOutput) InheritFromDelegate() AwsConnectorInheritFromDelegatePtrOutput {
	return o.ApplyT(func(v *AwsConnector) AwsConnectorInheritFromDelegatePtrOutput { return v.InheritFromDelegate }).(AwsConnectorInheritFromDelegatePtrOutput)
}

// Use IAM role for service accounts.
func (o AwsConnectorOutput) Irsa() AwsConnectorIrsaPtrOutput {
	return o.ApplyT(func(v *AwsConnector) AwsConnectorIrsaPtrOutput { return v.Irsa }).(AwsConnectorIrsaPtrOutput)
}

// Use IAM role for service accounts.
func (o AwsConnectorOutput) Manual() AwsConnectorManualPtrOutput {
	return o.ApplyT(func(v *AwsConnector) AwsConnectorManualPtrOutput { return v.Manual }).(AwsConnectorManualPtrOutput)
}

// Name of the resource.
func (o AwsConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Authentication using harness oidc.
func (o AwsConnectorOutput) OidcAuthentication() AwsConnectorOidcAuthenticationPtrOutput {
	return o.ApplyT(func(v *AwsConnector) AwsConnectorOidcAuthenticationPtrOutput { return v.OidcAuthentication }).(AwsConnectorOidcAuthenticationPtrOutput)
}

// Unique identifier of the organization.
func (o AwsConnectorOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsConnector) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o AwsConnectorOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsConnector) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o AwsConnectorOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AwsConnector) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type AwsConnectorArrayOutput struct{ *pulumi.OutputState }

func (AwsConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsConnector)(nil)).Elem()
}

func (o AwsConnectorArrayOutput) ToAwsConnectorArrayOutput() AwsConnectorArrayOutput {
	return o
}

func (o AwsConnectorArrayOutput) ToAwsConnectorArrayOutputWithContext(ctx context.Context) AwsConnectorArrayOutput {
	return o
}

func (o AwsConnectorArrayOutput) Index(i pulumi.IntInput) AwsConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsConnector {
		return vs[0].([]*AwsConnector)[vs[1].(int)]
	}).(AwsConnectorOutput)
}

type AwsConnectorMapOutput struct{ *pulumi.OutputState }

func (AwsConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsConnector)(nil)).Elem()
}

func (o AwsConnectorMapOutput) ToAwsConnectorMapOutput() AwsConnectorMapOutput {
	return o
}

func (o AwsConnectorMapOutput) ToAwsConnectorMapOutputWithContext(ctx context.Context) AwsConnectorMapOutput {
	return o
}

func (o AwsConnectorMapOutput) MapIndex(k pulumi.StringInput) AwsConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsConnector {
		return vs[0].(map[string]*AwsConnector)[vs[1].(string)]
	}).(AwsConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsConnectorInput)(nil)).Elem(), &AwsConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsConnectorArrayInput)(nil)).Elem(), AwsConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsConnectorMapInput)(nil)).Elem(), AwsConnectorMap{})
	pulumi.RegisterOutputType(AwsConnectorOutput{})
	pulumi.RegisterOutputType(AwsConnectorArrayOutput{})
	pulumi.RegisterOutputType(AwsConnectorMapOutput{})
}
