// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Dynatrace connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewDynatraceConnector(ctx, "test", &platform.DynatraceConnectorArgs{
//				Identifier:  pulumi.String("identifier"),
//				Name:        pulumi.String("name"),
//				Description: pulumi.String("test"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//				Url: pulumi.String("https://dynatrace.com/"),
//				DelegateSelectors: pulumi.StringArray{
//					pulumi.String("harness-delegate"),
//				},
//				ApiTokenRef: pulumi.String("account.secret_id"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import account level dynatrace connector
//
// ```sh
// $ pulumi import harness:platform/dynatraceConnector:DynatraceConnector example <connector_id>
// ```
//
// # Import org level dynatrace connector
//
// ```sh
// $ pulumi import harness:platform/dynatraceConnector:DynatraceConnector example <ord_id>/<connector_id>
// ```
//
// # Import project level dynatrace connector
//
// ```sh
// $ pulumi import harness:platform/dynatraceConnector:DynatraceConnector example <org_id>/<project_id>/<connector_id>
// ```
type DynatraceConnector struct {
	pulumi.CustomResourceState

	// The reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
	ApiTokenRef pulumi.StringOutput `pulumi:"apiTokenRef"`
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// URL of the Dynatrace server.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewDynatraceConnector registers a new resource with the given unique name, arguments, and options.
func NewDynatraceConnector(ctx *pulumi.Context,
	name string, args *DynatraceConnectorArgs, opts ...pulumi.ResourceOption) (*DynatraceConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiTokenRef == nil {
		return nil, errors.New("invalid value for required argument 'ApiTokenRef'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DynatraceConnector
	err := ctx.RegisterResource("harness:platform/dynatraceConnector:DynatraceConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDynatraceConnector gets an existing DynatraceConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDynatraceConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DynatraceConnectorState, opts ...pulumi.ResourceOption) (*DynatraceConnector, error) {
	var resource DynatraceConnector
	err := ctx.ReadResource("harness:platform/dynatraceConnector:DynatraceConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DynatraceConnector resources.
type dynatraceConnectorState struct {
	// The reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
	ApiTokenRef *string `pulumi:"apiTokenRef"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// URL of the Dynatrace server.
	Url *string `pulumi:"url"`
}

type DynatraceConnectorState struct {
	// The reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
	ApiTokenRef pulumi.StringPtrInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// URL of the Dynatrace server.
	Url pulumi.StringPtrInput
}

func (DynatraceConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*dynatraceConnectorState)(nil)).Elem()
}

type dynatraceConnectorArgs struct {
	// The reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
	ApiTokenRef string `pulumi:"apiTokenRef"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// URL of the Dynatrace server.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a DynatraceConnector resource.
type DynatraceConnectorArgs struct {
	// The reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
	ApiTokenRef pulumi.StringInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// URL of the Dynatrace server.
	Url pulumi.StringInput
}

func (DynatraceConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dynatraceConnectorArgs)(nil)).Elem()
}

type DynatraceConnectorInput interface {
	pulumi.Input

	ToDynatraceConnectorOutput() DynatraceConnectorOutput
	ToDynatraceConnectorOutputWithContext(ctx context.Context) DynatraceConnectorOutput
}

func (*DynatraceConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**DynatraceConnector)(nil)).Elem()
}

func (i *DynatraceConnector) ToDynatraceConnectorOutput() DynatraceConnectorOutput {
	return i.ToDynatraceConnectorOutputWithContext(context.Background())
}

func (i *DynatraceConnector) ToDynatraceConnectorOutputWithContext(ctx context.Context) DynatraceConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynatraceConnectorOutput)
}

// DynatraceConnectorArrayInput is an input type that accepts DynatraceConnectorArray and DynatraceConnectorArrayOutput values.
// You can construct a concrete instance of `DynatraceConnectorArrayInput` via:
//
//	DynatraceConnectorArray{ DynatraceConnectorArgs{...} }
type DynatraceConnectorArrayInput interface {
	pulumi.Input

	ToDynatraceConnectorArrayOutput() DynatraceConnectorArrayOutput
	ToDynatraceConnectorArrayOutputWithContext(context.Context) DynatraceConnectorArrayOutput
}

type DynatraceConnectorArray []DynatraceConnectorInput

func (DynatraceConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DynatraceConnector)(nil)).Elem()
}

func (i DynatraceConnectorArray) ToDynatraceConnectorArrayOutput() DynatraceConnectorArrayOutput {
	return i.ToDynatraceConnectorArrayOutputWithContext(context.Background())
}

func (i DynatraceConnectorArray) ToDynatraceConnectorArrayOutputWithContext(ctx context.Context) DynatraceConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynatraceConnectorArrayOutput)
}

// DynatraceConnectorMapInput is an input type that accepts DynatraceConnectorMap and DynatraceConnectorMapOutput values.
// You can construct a concrete instance of `DynatraceConnectorMapInput` via:
//
//	DynatraceConnectorMap{ "key": DynatraceConnectorArgs{...} }
type DynatraceConnectorMapInput interface {
	pulumi.Input

	ToDynatraceConnectorMapOutput() DynatraceConnectorMapOutput
	ToDynatraceConnectorMapOutputWithContext(context.Context) DynatraceConnectorMapOutput
}

type DynatraceConnectorMap map[string]DynatraceConnectorInput

func (DynatraceConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DynatraceConnector)(nil)).Elem()
}

func (i DynatraceConnectorMap) ToDynatraceConnectorMapOutput() DynatraceConnectorMapOutput {
	return i.ToDynatraceConnectorMapOutputWithContext(context.Background())
}

func (i DynatraceConnectorMap) ToDynatraceConnectorMapOutputWithContext(ctx context.Context) DynatraceConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynatraceConnectorMapOutput)
}

type DynatraceConnectorOutput struct{ *pulumi.OutputState }

func (DynatraceConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DynatraceConnector)(nil)).Elem()
}

func (o DynatraceConnectorOutput) ToDynatraceConnectorOutput() DynatraceConnectorOutput {
	return o
}

func (o DynatraceConnectorOutput) ToDynatraceConnectorOutputWithContext(ctx context.Context) DynatraceConnectorOutput {
	return o
}

// The reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
func (o DynatraceConnectorOutput) ApiTokenRef() pulumi.StringOutput {
	return o.ApplyT(func(v *DynatraceConnector) pulumi.StringOutput { return v.ApiTokenRef }).(pulumi.StringOutput)
}

// Tags to filter delegates for connection.
func (o DynatraceConnectorOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DynatraceConnector) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o DynatraceConnectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynatraceConnector) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o DynatraceConnectorOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *DynatraceConnector) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o DynatraceConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DynatraceConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o DynatraceConnectorOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynatraceConnector) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o DynatraceConnectorOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynatraceConnector) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o DynatraceConnectorOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DynatraceConnector) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// URL of the Dynatrace server.
func (o DynatraceConnectorOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *DynatraceConnector) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type DynatraceConnectorArrayOutput struct{ *pulumi.OutputState }

func (DynatraceConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DynatraceConnector)(nil)).Elem()
}

func (o DynatraceConnectorArrayOutput) ToDynatraceConnectorArrayOutput() DynatraceConnectorArrayOutput {
	return o
}

func (o DynatraceConnectorArrayOutput) ToDynatraceConnectorArrayOutputWithContext(ctx context.Context) DynatraceConnectorArrayOutput {
	return o
}

func (o DynatraceConnectorArrayOutput) Index(i pulumi.IntInput) DynatraceConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DynatraceConnector {
		return vs[0].([]*DynatraceConnector)[vs[1].(int)]
	}).(DynatraceConnectorOutput)
}

type DynatraceConnectorMapOutput struct{ *pulumi.OutputState }

func (DynatraceConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DynatraceConnector)(nil)).Elem()
}

func (o DynatraceConnectorMapOutput) ToDynatraceConnectorMapOutput() DynatraceConnectorMapOutput {
	return o
}

func (o DynatraceConnectorMapOutput) ToDynatraceConnectorMapOutputWithContext(ctx context.Context) DynatraceConnectorMapOutput {
	return o
}

func (o DynatraceConnectorMapOutput) MapIndex(k pulumi.StringInput) DynatraceConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DynatraceConnector {
		return vs[0].(map[string]*DynatraceConnector)[vs[1].(string)]
	}).(DynatraceConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DynatraceConnectorInput)(nil)).Elem(), &DynatraceConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynatraceConnectorArrayInput)(nil)).Elem(), DynatraceConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynatraceConnectorMapInput)(nil)).Elem(), DynatraceConnectorMap{})
	pulumi.RegisterOutputType(DynatraceConnectorOutput{})
	pulumi.RegisterOutputType(DynatraceConnectorArrayOutput{})
	pulumi.RegisterOutputType(DynatraceConnectorMapOutput{})
}
