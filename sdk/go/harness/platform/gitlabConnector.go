// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Gitlab connector.
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import account level gitlab connector
//
// ```sh
// $ pulumi import harness:platform/gitlabConnector:GitlabConnector example <connector_id>
// ```
//
// # Import org level gitlab connector
//
// ```sh
// $ pulumi import harness:platform/gitlabConnector:GitlabConnector example <ord_id>/<connector_id>
// ```
//
// # Import project level gitlab connector
//
// ```sh
// $ pulumi import harness:platform/gitlabConnector:GitlabConnector example <org_id>/<project_id>/<connector_id>
// ```
type GitlabConnector struct {
	pulumi.CustomResourceState

	// Configuration for using the gitlab api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentication GitlabConnectorApiAuthenticationPtrOutput `pulumi:"apiAuthentication"`
	// Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.
	ConnectionType pulumi.StringOutput `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials GitlabConnectorCredentialsOutput `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Execute on delegate or not.
	ExecuteOnDelegate pulumi.BoolPtrOutput `pulumi:"executeOnDelegate"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// URL of the gitlab repository or account.
	Url pulumi.StringOutput `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo pulumi.StringPtrOutput `pulumi:"validationRepo"`
}

// NewGitlabConnector registers a new resource with the given unique name, arguments, and options.
func NewGitlabConnector(ctx *pulumi.Context,
	name string, args *GitlabConnectorArgs, opts ...pulumi.ResourceOption) (*GitlabConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionType == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionType'")
	}
	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GitlabConnector
	err := ctx.RegisterResource("harness:platform/gitlabConnector:GitlabConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitlabConnector gets an existing GitlabConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitlabConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitlabConnectorState, opts ...pulumi.ResourceOption) (*GitlabConnector, error) {
	var resource GitlabConnector
	err := ctx.ReadResource("harness:platform/gitlabConnector:GitlabConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitlabConnector resources.
type gitlabConnectorState struct {
	// Configuration for using the gitlab api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentication *GitlabConnectorApiAuthentication `pulumi:"apiAuthentication"`
	// Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.
	ConnectionType *string `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials *GitlabConnectorCredentials `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Execute on delegate or not.
	ExecuteOnDelegate *bool `pulumi:"executeOnDelegate"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// URL of the gitlab repository or account.
	Url *string `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo *string `pulumi:"validationRepo"`
}

type GitlabConnectorState struct {
	// Configuration for using the gitlab api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentication GitlabConnectorApiAuthenticationPtrInput
	// Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.
	ConnectionType pulumi.StringPtrInput
	// Credentials to use for the connection.
	Credentials GitlabConnectorCredentialsPtrInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Execute on delegate or not.
	ExecuteOnDelegate pulumi.BoolPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// URL of the gitlab repository or account.
	Url pulumi.StringPtrInput
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo pulumi.StringPtrInput
}

func (GitlabConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitlabConnectorState)(nil)).Elem()
}

type gitlabConnectorArgs struct {
	// Configuration for using the gitlab api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentication *GitlabConnectorApiAuthentication `pulumi:"apiAuthentication"`
	// Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.
	ConnectionType string `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials GitlabConnectorCredentials `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Execute on delegate or not.
	ExecuteOnDelegate *bool `pulumi:"executeOnDelegate"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// URL of the gitlab repository or account.
	Url string `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo *string `pulumi:"validationRepo"`
}

// The set of arguments for constructing a GitlabConnector resource.
type GitlabConnectorArgs struct {
	// Configuration for using the gitlab api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentication GitlabConnectorApiAuthenticationPtrInput
	// Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.
	ConnectionType pulumi.StringInput
	// Credentials to use for the connection.
	Credentials GitlabConnectorCredentialsInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Execute on delegate or not.
	ExecuteOnDelegate pulumi.BoolPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// URL of the gitlab repository or account.
	Url pulumi.StringInput
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo pulumi.StringPtrInput
}

func (GitlabConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitlabConnectorArgs)(nil)).Elem()
}

type GitlabConnectorInput interface {
	pulumi.Input

	ToGitlabConnectorOutput() GitlabConnectorOutput
	ToGitlabConnectorOutputWithContext(ctx context.Context) GitlabConnectorOutput
}

func (*GitlabConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**GitlabConnector)(nil)).Elem()
}

func (i *GitlabConnector) ToGitlabConnectorOutput() GitlabConnectorOutput {
	return i.ToGitlabConnectorOutputWithContext(context.Background())
}

func (i *GitlabConnector) ToGitlabConnectorOutputWithContext(ctx context.Context) GitlabConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitlabConnectorOutput)
}

// GitlabConnectorArrayInput is an input type that accepts GitlabConnectorArray and GitlabConnectorArrayOutput values.
// You can construct a concrete instance of `GitlabConnectorArrayInput` via:
//
//	GitlabConnectorArray{ GitlabConnectorArgs{...} }
type GitlabConnectorArrayInput interface {
	pulumi.Input

	ToGitlabConnectorArrayOutput() GitlabConnectorArrayOutput
	ToGitlabConnectorArrayOutputWithContext(context.Context) GitlabConnectorArrayOutput
}

type GitlabConnectorArray []GitlabConnectorInput

func (GitlabConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitlabConnector)(nil)).Elem()
}

func (i GitlabConnectorArray) ToGitlabConnectorArrayOutput() GitlabConnectorArrayOutput {
	return i.ToGitlabConnectorArrayOutputWithContext(context.Background())
}

func (i GitlabConnectorArray) ToGitlabConnectorArrayOutputWithContext(ctx context.Context) GitlabConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitlabConnectorArrayOutput)
}

// GitlabConnectorMapInput is an input type that accepts GitlabConnectorMap and GitlabConnectorMapOutput values.
// You can construct a concrete instance of `GitlabConnectorMapInput` via:
//
//	GitlabConnectorMap{ "key": GitlabConnectorArgs{...} }
type GitlabConnectorMapInput interface {
	pulumi.Input

	ToGitlabConnectorMapOutput() GitlabConnectorMapOutput
	ToGitlabConnectorMapOutputWithContext(context.Context) GitlabConnectorMapOutput
}

type GitlabConnectorMap map[string]GitlabConnectorInput

func (GitlabConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitlabConnector)(nil)).Elem()
}

func (i GitlabConnectorMap) ToGitlabConnectorMapOutput() GitlabConnectorMapOutput {
	return i.ToGitlabConnectorMapOutputWithContext(context.Background())
}

func (i GitlabConnectorMap) ToGitlabConnectorMapOutputWithContext(ctx context.Context) GitlabConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitlabConnectorMapOutput)
}

type GitlabConnectorOutput struct{ *pulumi.OutputState }

func (GitlabConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitlabConnector)(nil)).Elem()
}

func (o GitlabConnectorOutput) ToGitlabConnectorOutput() GitlabConnectorOutput {
	return o
}

func (o GitlabConnectorOutput) ToGitlabConnectorOutputWithContext(ctx context.Context) GitlabConnectorOutput {
	return o
}

// Configuration for using the gitlab api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
func (o GitlabConnectorOutput) ApiAuthentication() GitlabConnectorApiAuthenticationPtrOutput {
	return o.ApplyT(func(v *GitlabConnector) GitlabConnectorApiAuthenticationPtrOutput { return v.ApiAuthentication }).(GitlabConnectorApiAuthenticationPtrOutput)
}

// Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.
func (o GitlabConnectorOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v *GitlabConnector) pulumi.StringOutput { return v.ConnectionType }).(pulumi.StringOutput)
}

// Credentials to use for the connection.
func (o GitlabConnectorOutput) Credentials() GitlabConnectorCredentialsOutput {
	return o.ApplyT(func(v *GitlabConnector) GitlabConnectorCredentialsOutput { return v.Credentials }).(GitlabConnectorCredentialsOutput)
}

// Tags to filter delegates for connection.
func (o GitlabConnectorOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitlabConnector) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o GitlabConnectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitlabConnector) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Execute on delegate or not.
func (o GitlabConnectorOutput) ExecuteOnDelegate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitlabConnector) pulumi.BoolPtrOutput { return v.ExecuteOnDelegate }).(pulumi.BoolPtrOutput)
}

// Unique identifier of the resource.
func (o GitlabConnectorOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *GitlabConnector) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o GitlabConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GitlabConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o GitlabConnectorOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitlabConnector) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o GitlabConnectorOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitlabConnector) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o GitlabConnectorOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitlabConnector) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// URL of the gitlab repository or account.
func (o GitlabConnectorOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *GitlabConnector) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Repository to test the connection with. This is only used when `connectionType` is `Account`.
func (o GitlabConnectorOutput) ValidationRepo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitlabConnector) pulumi.StringPtrOutput { return v.ValidationRepo }).(pulumi.StringPtrOutput)
}

type GitlabConnectorArrayOutput struct{ *pulumi.OutputState }

func (GitlabConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitlabConnector)(nil)).Elem()
}

func (o GitlabConnectorArrayOutput) ToGitlabConnectorArrayOutput() GitlabConnectorArrayOutput {
	return o
}

func (o GitlabConnectorArrayOutput) ToGitlabConnectorArrayOutputWithContext(ctx context.Context) GitlabConnectorArrayOutput {
	return o
}

func (o GitlabConnectorArrayOutput) Index(i pulumi.IntInput) GitlabConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitlabConnector {
		return vs[0].([]*GitlabConnector)[vs[1].(int)]
	}).(GitlabConnectorOutput)
}

type GitlabConnectorMapOutput struct{ *pulumi.OutputState }

func (GitlabConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitlabConnector)(nil)).Elem()
}

func (o GitlabConnectorMapOutput) ToGitlabConnectorMapOutput() GitlabConnectorMapOutput {
	return o
}

func (o GitlabConnectorMapOutput) ToGitlabConnectorMapOutputWithContext(ctx context.Context) GitlabConnectorMapOutput {
	return o
}

func (o GitlabConnectorMapOutput) MapIndex(k pulumi.StringInput) GitlabConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitlabConnector {
		return vs[0].(map[string]*GitlabConnector)[vs[1].(string)]
	}).(GitlabConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitlabConnectorInput)(nil)).Elem(), &GitlabConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitlabConnectorArrayInput)(nil)).Elem(), GitlabConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitlabConnectorMapInput)(nil)).Elem(), GitlabConnectorMap{})
	pulumi.RegisterOutputType(GitlabConnectorOutput{})
	pulumi.RegisterOutputType(GitlabConnectorArrayOutput{})
	pulumi.RegisterOutputType(GitlabConnectorMapOutput{})
}
