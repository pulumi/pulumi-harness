// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Datasource for looking up an Tas Connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupTasConnector(ctx, &platform.LookupTasConnectorArgs{
//				Identifier: "identifier",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTasConnector(ctx *pulumi.Context, args *LookupTasConnectorArgs, opts ...pulumi.InvokeOption) (*LookupTasConnectorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTasConnectorResult
	err := ctx.Invoke("harness:platform/getTasConnector:getTasConnector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTasConnector.
type LookupTasConnectorArgs struct {
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getTasConnector.
type LookupTasConnectorResult struct {
	// Contains Tas connector credentials.
	Credentials []GetTasConnectorCredential `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description string `pulumi:"description"`
	// Execute on delegate or not.
	ExecuteOnDelegate bool `pulumi:"executeOnDelegate"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

func LookupTasConnectorOutput(ctx *pulumi.Context, args LookupTasConnectorOutputArgs, opts ...pulumi.InvokeOption) LookupTasConnectorResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTasConnectorResultOutput, error) {
			args := v.(LookupTasConnectorArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getTasConnector:getTasConnector", args, LookupTasConnectorResultOutput{}, options).(LookupTasConnectorResultOutput), nil
		}).(LookupTasConnectorResultOutput)
}

// A collection of arguments for invoking getTasConnector.
type LookupTasConnectorOutputArgs struct {
	// Unique identifier of the resource.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupTasConnectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTasConnectorArgs)(nil)).Elem()
}

// A collection of values returned by getTasConnector.
type LookupTasConnectorResultOutput struct{ *pulumi.OutputState }

func (LookupTasConnectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTasConnectorResult)(nil)).Elem()
}

func (o LookupTasConnectorResultOutput) ToLookupTasConnectorResultOutput() LookupTasConnectorResultOutput {
	return o
}

func (o LookupTasConnectorResultOutput) ToLookupTasConnectorResultOutputWithContext(ctx context.Context) LookupTasConnectorResultOutput {
	return o
}

// Contains Tas connector credentials.
func (o LookupTasConnectorResultOutput) Credentials() GetTasConnectorCredentialArrayOutput {
	return o.ApplyT(func(v LookupTasConnectorResult) []GetTasConnectorCredential { return v.Credentials }).(GetTasConnectorCredentialArrayOutput)
}

// Tags to filter delegates for connection.
func (o LookupTasConnectorResultOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTasConnectorResult) []string { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o LookupTasConnectorResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTasConnectorResult) string { return v.Description }).(pulumi.StringOutput)
}

// Execute on delegate or not.
func (o LookupTasConnectorResultOutput) ExecuteOnDelegate() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTasConnectorResult) bool { return v.ExecuteOnDelegate }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupTasConnectorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTasConnectorResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupTasConnectorResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTasConnectorResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o LookupTasConnectorResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTasConnectorResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the organization.
func (o LookupTasConnectorResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTasConnectorResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o LookupTasConnectorResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTasConnectorResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o LookupTasConnectorResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTasConnectorResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTasConnectorResultOutput{})
}
