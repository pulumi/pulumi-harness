// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing Feature Flag Targets.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewFeatureFlagTarget(ctx, "target", &platform.FeatureFlagTargetArgs{
//				OrgId:       pulumi.String("test"),
//				ProjectId:   pulumi.String("test"),
//				Identifier:  pulumi.String("MY_FEATURE"),
//				Environment: pulumi.String("MY_ENVIRONMENT"),
//				Name:        pulumi.String("MY_FEATURE"),
//				AccountId:   pulumi.String("MY_ACCOUNT_ID"),
//				Attributes: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FeatureFlagTarget struct {
	pulumi.CustomResourceState

	// Account Identifier
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Attributes
	Attributes pulumi.StringMapOutput `pulumi:"attributes"`
	// Environment Identifier
	Environment pulumi.StringOutput `pulumi:"environment"`
	// Identifier of the Feature Flag Target
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Target Name
	Name pulumi.StringOutput `pulumi:"name"`
	// Organization Identifier
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Project Identifier
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
}

// NewFeatureFlagTarget registers a new resource with the given unique name, arguments, and options.
func NewFeatureFlagTarget(ctx *pulumi.Context,
	name string, args *FeatureFlagTargetArgs, opts ...pulumi.ResourceOption) (*FeatureFlagTarget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeatureFlagTarget
	err := ctx.RegisterResource("harness:platform/featureFlagTarget:FeatureFlagTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureFlagTarget gets an existing FeatureFlagTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureFlagTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureFlagTargetState, opts ...pulumi.ResourceOption) (*FeatureFlagTarget, error) {
	var resource FeatureFlagTarget
	err := ctx.ReadResource("harness:platform/featureFlagTarget:FeatureFlagTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureFlagTarget resources.
type featureFlagTargetState struct {
	// Account Identifier
	AccountId *string `pulumi:"accountId"`
	// Attributes
	Attributes map[string]string `pulumi:"attributes"`
	// Environment Identifier
	Environment *string `pulumi:"environment"`
	// Identifier of the Feature Flag Target
	Identifier *string `pulumi:"identifier"`
	// Target Name
	Name *string `pulumi:"name"`
	// Organization Identifier
	OrgId *string `pulumi:"orgId"`
	// Project Identifier
	ProjectId *string `pulumi:"projectId"`
}

type FeatureFlagTargetState struct {
	// Account Identifier
	AccountId pulumi.StringPtrInput
	// Attributes
	Attributes pulumi.StringMapInput
	// Environment Identifier
	Environment pulumi.StringPtrInput
	// Identifier of the Feature Flag Target
	Identifier pulumi.StringPtrInput
	// Target Name
	Name pulumi.StringPtrInput
	// Organization Identifier
	OrgId pulumi.StringPtrInput
	// Project Identifier
	ProjectId pulumi.StringPtrInput
}

func (FeatureFlagTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureFlagTargetState)(nil)).Elem()
}

type featureFlagTargetArgs struct {
	// Account Identifier
	AccountId string `pulumi:"accountId"`
	// Attributes
	Attributes map[string]string `pulumi:"attributes"`
	// Environment Identifier
	Environment string `pulumi:"environment"`
	// Identifier of the Feature Flag Target
	Identifier string `pulumi:"identifier"`
	// Target Name
	Name *string `pulumi:"name"`
	// Organization Identifier
	OrgId string `pulumi:"orgId"`
	// Project Identifier
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a FeatureFlagTarget resource.
type FeatureFlagTargetArgs struct {
	// Account Identifier
	AccountId pulumi.StringInput
	// Attributes
	Attributes pulumi.StringMapInput
	// Environment Identifier
	Environment pulumi.StringInput
	// Identifier of the Feature Flag Target
	Identifier pulumi.StringInput
	// Target Name
	Name pulumi.StringPtrInput
	// Organization Identifier
	OrgId pulumi.StringInput
	// Project Identifier
	ProjectId pulumi.StringInput
}

func (FeatureFlagTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureFlagTargetArgs)(nil)).Elem()
}

type FeatureFlagTargetInput interface {
	pulumi.Input

	ToFeatureFlagTargetOutput() FeatureFlagTargetOutput
	ToFeatureFlagTargetOutputWithContext(ctx context.Context) FeatureFlagTargetOutput
}

func (*FeatureFlagTarget) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureFlagTarget)(nil)).Elem()
}

func (i *FeatureFlagTarget) ToFeatureFlagTargetOutput() FeatureFlagTargetOutput {
	return i.ToFeatureFlagTargetOutputWithContext(context.Background())
}

func (i *FeatureFlagTarget) ToFeatureFlagTargetOutputWithContext(ctx context.Context) FeatureFlagTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagTargetOutput)
}

// FeatureFlagTargetArrayInput is an input type that accepts FeatureFlagTargetArray and FeatureFlagTargetArrayOutput values.
// You can construct a concrete instance of `FeatureFlagTargetArrayInput` via:
//
//	FeatureFlagTargetArray{ FeatureFlagTargetArgs{...} }
type FeatureFlagTargetArrayInput interface {
	pulumi.Input

	ToFeatureFlagTargetArrayOutput() FeatureFlagTargetArrayOutput
	ToFeatureFlagTargetArrayOutputWithContext(context.Context) FeatureFlagTargetArrayOutput
}

type FeatureFlagTargetArray []FeatureFlagTargetInput

func (FeatureFlagTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureFlagTarget)(nil)).Elem()
}

func (i FeatureFlagTargetArray) ToFeatureFlagTargetArrayOutput() FeatureFlagTargetArrayOutput {
	return i.ToFeatureFlagTargetArrayOutputWithContext(context.Background())
}

func (i FeatureFlagTargetArray) ToFeatureFlagTargetArrayOutputWithContext(ctx context.Context) FeatureFlagTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagTargetArrayOutput)
}

// FeatureFlagTargetMapInput is an input type that accepts FeatureFlagTargetMap and FeatureFlagTargetMapOutput values.
// You can construct a concrete instance of `FeatureFlagTargetMapInput` via:
//
//	FeatureFlagTargetMap{ "key": FeatureFlagTargetArgs{...} }
type FeatureFlagTargetMapInput interface {
	pulumi.Input

	ToFeatureFlagTargetMapOutput() FeatureFlagTargetMapOutput
	ToFeatureFlagTargetMapOutputWithContext(context.Context) FeatureFlagTargetMapOutput
}

type FeatureFlagTargetMap map[string]FeatureFlagTargetInput

func (FeatureFlagTargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureFlagTarget)(nil)).Elem()
}

func (i FeatureFlagTargetMap) ToFeatureFlagTargetMapOutput() FeatureFlagTargetMapOutput {
	return i.ToFeatureFlagTargetMapOutputWithContext(context.Background())
}

func (i FeatureFlagTargetMap) ToFeatureFlagTargetMapOutputWithContext(ctx context.Context) FeatureFlagTargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagTargetMapOutput)
}

type FeatureFlagTargetOutput struct{ *pulumi.OutputState }

func (FeatureFlagTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureFlagTarget)(nil)).Elem()
}

func (o FeatureFlagTargetOutput) ToFeatureFlagTargetOutput() FeatureFlagTargetOutput {
	return o
}

func (o FeatureFlagTargetOutput) ToFeatureFlagTargetOutputWithContext(ctx context.Context) FeatureFlagTargetOutput {
	return o
}

// Account Identifier
func (o FeatureFlagTargetOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureFlagTarget) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Attributes
func (o FeatureFlagTargetOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FeatureFlagTarget) pulumi.StringMapOutput { return v.Attributes }).(pulumi.StringMapOutput)
}

// Environment Identifier
func (o FeatureFlagTargetOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureFlagTarget) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// Identifier of the Feature Flag Target
func (o FeatureFlagTargetOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureFlagTarget) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Target Name
func (o FeatureFlagTargetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureFlagTarget) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Organization Identifier
func (o FeatureFlagTargetOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureFlagTarget) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Project Identifier
func (o FeatureFlagTargetOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureFlagTarget) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

type FeatureFlagTargetArrayOutput struct{ *pulumi.OutputState }

func (FeatureFlagTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureFlagTarget)(nil)).Elem()
}

func (o FeatureFlagTargetArrayOutput) ToFeatureFlagTargetArrayOutput() FeatureFlagTargetArrayOutput {
	return o
}

func (o FeatureFlagTargetArrayOutput) ToFeatureFlagTargetArrayOutputWithContext(ctx context.Context) FeatureFlagTargetArrayOutput {
	return o
}

func (o FeatureFlagTargetArrayOutput) Index(i pulumi.IntInput) FeatureFlagTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureFlagTarget {
		return vs[0].([]*FeatureFlagTarget)[vs[1].(int)]
	}).(FeatureFlagTargetOutput)
}

type FeatureFlagTargetMapOutput struct{ *pulumi.OutputState }

func (FeatureFlagTargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureFlagTarget)(nil)).Elem()
}

func (o FeatureFlagTargetMapOutput) ToFeatureFlagTargetMapOutput() FeatureFlagTargetMapOutput {
	return o
}

func (o FeatureFlagTargetMapOutput) ToFeatureFlagTargetMapOutputWithContext(ctx context.Context) FeatureFlagTargetMapOutput {
	return o
}

func (o FeatureFlagTargetMapOutput) MapIndex(k pulumi.StringInput) FeatureFlagTargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureFlagTarget {
		return vs[0].(map[string]*FeatureFlagTarget)[vs[1].(string)]
	}).(FeatureFlagTargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagTargetInput)(nil)).Elem(), &FeatureFlagTarget{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagTargetArrayInput)(nil)).Elem(), FeatureFlagTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagTargetMapInput)(nil)).Elem(), FeatureFlagTargetMap{})
	pulumi.RegisterOutputType(FeatureFlagTargetOutput{})
	pulumi.RegisterOutputType(FeatureFlagTargetArrayOutput{})
	pulumi.RegisterOutputType(FeatureFlagTargetMapOutput{})
}
