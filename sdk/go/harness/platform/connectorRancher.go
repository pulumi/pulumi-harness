// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Rancher connector.
//
// ## Example Usage
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import account level rancher connector
//
// ```sh
// $ pulumi import harness:platform/connectorRancher:ConnectorRancher example <connector_id>
// ```
//
// # Import org level rancher connector
//
// ```sh
// $ pulumi import harness:platform/connectorRancher:ConnectorRancher example <ord_id>/<connector_id>
// ```
//
// # Import project level rancher connector
//
// ```sh
// $ pulumi import harness:platform/connectorRancher:ConnectorRancher example <org_id>/<project_id>/<connector_id>
// ```
type ConnectorRancher struct {
	pulumi.CustomResourceState

	// Bearer token information for the rancher cluster.
	BearerToken ConnectorRancherBearerTokenPtrOutput `pulumi:"bearerToken"`
	// Selectors to use for the delegate.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Enable this flag for force deletion of connector
	ForceDelete pulumi.BoolOutput `pulumi:"forceDelete"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// The URL of the Rancher cluster.
	RancherUrl pulumi.StringOutput `pulumi:"rancherUrl"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewConnectorRancher registers a new resource with the given unique name, arguments, and options.
func NewConnectorRancher(ctx *pulumi.Context,
	name string, args *ConnectorRancherArgs, opts ...pulumi.ResourceOption) (*ConnectorRancher, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.RancherUrl == nil {
		return nil, errors.New("invalid value for required argument 'RancherUrl'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectorRancher
	err := ctx.RegisterResource("harness:platform/connectorRancher:ConnectorRancher", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectorRancher gets an existing ConnectorRancher resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectorRancher(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorRancherState, opts ...pulumi.ResourceOption) (*ConnectorRancher, error) {
	var resource ConnectorRancher
	err := ctx.ReadResource("harness:platform/connectorRancher:ConnectorRancher", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectorRancher resources.
type connectorRancherState struct {
	// Bearer token information for the rancher cluster.
	BearerToken *ConnectorRancherBearerToken `pulumi:"bearerToken"`
	// Selectors to use for the delegate.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Enable this flag for force deletion of connector
	ForceDelete *bool `pulumi:"forceDelete"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// The URL of the Rancher cluster.
	RancherUrl *string `pulumi:"rancherUrl"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

type ConnectorRancherState struct {
	// Bearer token information for the rancher cluster.
	BearerToken ConnectorRancherBearerTokenPtrInput
	// Selectors to use for the delegate.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Enable this flag for force deletion of connector
	ForceDelete pulumi.BoolPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// The URL of the Rancher cluster.
	RancherUrl pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (ConnectorRancherState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorRancherState)(nil)).Elem()
}

type connectorRancherArgs struct {
	// Bearer token information for the rancher cluster.
	BearerToken *ConnectorRancherBearerToken `pulumi:"bearerToken"`
	// Selectors to use for the delegate.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Enable this flag for force deletion of connector
	ForceDelete *bool `pulumi:"forceDelete"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// The URL of the Rancher cluster.
	RancherUrl string `pulumi:"rancherUrl"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a ConnectorRancher resource.
type ConnectorRancherArgs struct {
	// Bearer token information for the rancher cluster.
	BearerToken ConnectorRancherBearerTokenPtrInput
	// Selectors to use for the delegate.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Enable this flag for force deletion of connector
	ForceDelete pulumi.BoolPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// The URL of the Rancher cluster.
	RancherUrl pulumi.StringInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (ConnectorRancherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorRancherArgs)(nil)).Elem()
}

type ConnectorRancherInput interface {
	pulumi.Input

	ToConnectorRancherOutput() ConnectorRancherOutput
	ToConnectorRancherOutputWithContext(ctx context.Context) ConnectorRancherOutput
}

func (*ConnectorRancher) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorRancher)(nil)).Elem()
}

func (i *ConnectorRancher) ToConnectorRancherOutput() ConnectorRancherOutput {
	return i.ToConnectorRancherOutputWithContext(context.Background())
}

func (i *ConnectorRancher) ToConnectorRancherOutputWithContext(ctx context.Context) ConnectorRancherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorRancherOutput)
}

// ConnectorRancherArrayInput is an input type that accepts ConnectorRancherArray and ConnectorRancherArrayOutput values.
// You can construct a concrete instance of `ConnectorRancherArrayInput` via:
//
//	ConnectorRancherArray{ ConnectorRancherArgs{...} }
type ConnectorRancherArrayInput interface {
	pulumi.Input

	ToConnectorRancherArrayOutput() ConnectorRancherArrayOutput
	ToConnectorRancherArrayOutputWithContext(context.Context) ConnectorRancherArrayOutput
}

type ConnectorRancherArray []ConnectorRancherInput

func (ConnectorRancherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorRancher)(nil)).Elem()
}

func (i ConnectorRancherArray) ToConnectorRancherArrayOutput() ConnectorRancherArrayOutput {
	return i.ToConnectorRancherArrayOutputWithContext(context.Background())
}

func (i ConnectorRancherArray) ToConnectorRancherArrayOutputWithContext(ctx context.Context) ConnectorRancherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorRancherArrayOutput)
}

// ConnectorRancherMapInput is an input type that accepts ConnectorRancherMap and ConnectorRancherMapOutput values.
// You can construct a concrete instance of `ConnectorRancherMapInput` via:
//
//	ConnectorRancherMap{ "key": ConnectorRancherArgs{...} }
type ConnectorRancherMapInput interface {
	pulumi.Input

	ToConnectorRancherMapOutput() ConnectorRancherMapOutput
	ToConnectorRancherMapOutputWithContext(context.Context) ConnectorRancherMapOutput
}

type ConnectorRancherMap map[string]ConnectorRancherInput

func (ConnectorRancherMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorRancher)(nil)).Elem()
}

func (i ConnectorRancherMap) ToConnectorRancherMapOutput() ConnectorRancherMapOutput {
	return i.ToConnectorRancherMapOutputWithContext(context.Background())
}

func (i ConnectorRancherMap) ToConnectorRancherMapOutputWithContext(ctx context.Context) ConnectorRancherMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorRancherMapOutput)
}

type ConnectorRancherOutput struct{ *pulumi.OutputState }

func (ConnectorRancherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorRancher)(nil)).Elem()
}

func (o ConnectorRancherOutput) ToConnectorRancherOutput() ConnectorRancherOutput {
	return o
}

func (o ConnectorRancherOutput) ToConnectorRancherOutputWithContext(ctx context.Context) ConnectorRancherOutput {
	return o
}

// Bearer token information for the rancher cluster.
func (o ConnectorRancherOutput) BearerToken() ConnectorRancherBearerTokenPtrOutput {
	return o.ApplyT(func(v *ConnectorRancher) ConnectorRancherBearerTokenPtrOutput { return v.BearerToken }).(ConnectorRancherBearerTokenPtrOutput)
}

// Selectors to use for the delegate.
func (o ConnectorRancherOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorRancher) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o ConnectorRancherOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorRancher) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Enable this flag for force deletion of connector
func (o ConnectorRancherOutput) ForceDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v *ConnectorRancher) pulumi.BoolOutput { return v.ForceDelete }).(pulumi.BoolOutput)
}

// Unique identifier of the resource.
func (o ConnectorRancherOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorRancher) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o ConnectorRancherOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorRancher) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o ConnectorRancherOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorRancher) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o ConnectorRancherOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorRancher) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The URL of the Rancher cluster.
func (o ConnectorRancherOutput) RancherUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorRancher) pulumi.StringOutput { return v.RancherUrl }).(pulumi.StringOutput)
}

// Tags to associate with the resource.
func (o ConnectorRancherOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorRancher) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type ConnectorRancherArrayOutput struct{ *pulumi.OutputState }

func (ConnectorRancherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorRancher)(nil)).Elem()
}

func (o ConnectorRancherArrayOutput) ToConnectorRancherArrayOutput() ConnectorRancherArrayOutput {
	return o
}

func (o ConnectorRancherArrayOutput) ToConnectorRancherArrayOutputWithContext(ctx context.Context) ConnectorRancherArrayOutput {
	return o
}

func (o ConnectorRancherArrayOutput) Index(i pulumi.IntInput) ConnectorRancherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectorRancher {
		return vs[0].([]*ConnectorRancher)[vs[1].(int)]
	}).(ConnectorRancherOutput)
}

type ConnectorRancherMapOutput struct{ *pulumi.OutputState }

func (ConnectorRancherMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorRancher)(nil)).Elem()
}

func (o ConnectorRancherMapOutput) ToConnectorRancherMapOutput() ConnectorRancherMapOutput {
	return o
}

func (o ConnectorRancherMapOutput) ToConnectorRancherMapOutputWithContext(ctx context.Context) ConnectorRancherMapOutput {
	return o
}

func (o ConnectorRancherMapOutput) MapIndex(k pulumi.StringInput) ConnectorRancherOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectorRancher {
		return vs[0].(map[string]*ConnectorRancher)[vs[1].(string)]
	}).(ConnectorRancherOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorRancherInput)(nil)).Elem(), &ConnectorRancher{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorRancherArrayInput)(nil)).Elem(), ConnectorRancherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorRancherMapInput)(nil)).Elem(), ConnectorRancherMap{})
	pulumi.RegisterOutputType(ConnectorRancherOutput{})
	pulumi.RegisterOutputType(ConnectorRancherArrayOutput{})
	pulumi.RegisterOutputType(ConnectorRancherMapOutput{})
}
