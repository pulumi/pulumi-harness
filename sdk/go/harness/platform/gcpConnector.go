// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Gcp connector.
//
// ## Import
//
// # Import account level gcp connector
//
// ```sh
// $ pulumi import harness:platform/gcpConnector:GcpConnector example <connector_id>
// ```
//
// # Import org level gcp connector
//
// ```sh
// $ pulumi import harness:platform/gcpConnector:GcpConnector example <ord_id>/<connector_id>
// ```
//
// # Import project level gcp connector
//
// ```sh
// $ pulumi import harness:platform/gcpConnector:GcpConnector example <org_id>/<project_id>/<connector_id>
// ```
type GcpConnector struct {
	pulumi.CustomResourceState

	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Enable this flag to execute on Delegate
	ExecuteOnDelegate pulumi.BoolOutput `pulumi:"executeOnDelegate"`
	// Enable this flag for force deletion of connector
	ForceDelete pulumi.BoolOutput `pulumi:"forceDelete"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Inherit configuration from delegate.
	InheritFromDelegates GcpConnectorInheritFromDelegateArrayOutput `pulumi:"inheritFromDelegates"`
	// Manual credential configuration.
	Manual GcpConnectorManualPtrOutput `pulumi:"manual"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Authentication using harness oidc.
	OidcAuthentications GcpConnectorOidcAuthenticationArrayOutput `pulumi:"oidcAuthentications"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewGcpConnector registers a new resource with the given unique name, arguments, and options.
func NewGcpConnector(ctx *pulumi.Context,
	name string, args *GcpConnectorArgs, opts ...pulumi.ResourceOption) (*GcpConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GcpConnector
	err := ctx.RegisterResource("harness:platform/gcpConnector:GcpConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGcpConnector gets an existing GcpConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGcpConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GcpConnectorState, opts ...pulumi.ResourceOption) (*GcpConnector, error) {
	var resource GcpConnector
	err := ctx.ReadResource("harness:platform/gcpConnector:GcpConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GcpConnector resources.
type gcpConnectorState struct {
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Enable this flag to execute on Delegate
	ExecuteOnDelegate *bool `pulumi:"executeOnDelegate"`
	// Enable this flag for force deletion of connector
	ForceDelete *bool `pulumi:"forceDelete"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Inherit configuration from delegate.
	InheritFromDelegates []GcpConnectorInheritFromDelegate `pulumi:"inheritFromDelegates"`
	// Manual credential configuration.
	Manual *GcpConnectorManual `pulumi:"manual"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Authentication using harness oidc.
	OidcAuthentications []GcpConnectorOidcAuthentication `pulumi:"oidcAuthentications"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

type GcpConnectorState struct {
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Enable this flag to execute on Delegate
	ExecuteOnDelegate pulumi.BoolPtrInput
	// Enable this flag for force deletion of connector
	ForceDelete pulumi.BoolPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Inherit configuration from delegate.
	InheritFromDelegates GcpConnectorInheritFromDelegateArrayInput
	// Manual credential configuration.
	Manual GcpConnectorManualPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Authentication using harness oidc.
	OidcAuthentications GcpConnectorOidcAuthenticationArrayInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (GcpConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpConnectorState)(nil)).Elem()
}

type gcpConnectorArgs struct {
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Enable this flag to execute on Delegate
	ExecuteOnDelegate *bool `pulumi:"executeOnDelegate"`
	// Enable this flag for force deletion of connector
	ForceDelete *bool `pulumi:"forceDelete"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Inherit configuration from delegate.
	InheritFromDelegates []GcpConnectorInheritFromDelegate `pulumi:"inheritFromDelegates"`
	// Manual credential configuration.
	Manual *GcpConnectorManual `pulumi:"manual"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Authentication using harness oidc.
	OidcAuthentications []GcpConnectorOidcAuthentication `pulumi:"oidcAuthentications"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GcpConnector resource.
type GcpConnectorArgs struct {
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Enable this flag to execute on Delegate
	ExecuteOnDelegate pulumi.BoolPtrInput
	// Enable this flag for force deletion of connector
	ForceDelete pulumi.BoolPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Inherit configuration from delegate.
	InheritFromDelegates GcpConnectorInheritFromDelegateArrayInput
	// Manual credential configuration.
	Manual GcpConnectorManualPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Authentication using harness oidc.
	OidcAuthentications GcpConnectorOidcAuthenticationArrayInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (GcpConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpConnectorArgs)(nil)).Elem()
}

type GcpConnectorInput interface {
	pulumi.Input

	ToGcpConnectorOutput() GcpConnectorOutput
	ToGcpConnectorOutputWithContext(ctx context.Context) GcpConnectorOutput
}

func (*GcpConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpConnector)(nil)).Elem()
}

func (i *GcpConnector) ToGcpConnectorOutput() GcpConnectorOutput {
	return i.ToGcpConnectorOutputWithContext(context.Background())
}

func (i *GcpConnector) ToGcpConnectorOutputWithContext(ctx context.Context) GcpConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpConnectorOutput)
}

// GcpConnectorArrayInput is an input type that accepts GcpConnectorArray and GcpConnectorArrayOutput values.
// You can construct a concrete instance of `GcpConnectorArrayInput` via:
//
//	GcpConnectorArray{ GcpConnectorArgs{...} }
type GcpConnectorArrayInput interface {
	pulumi.Input

	ToGcpConnectorArrayOutput() GcpConnectorArrayOutput
	ToGcpConnectorArrayOutputWithContext(context.Context) GcpConnectorArrayOutput
}

type GcpConnectorArray []GcpConnectorInput

func (GcpConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpConnector)(nil)).Elem()
}

func (i GcpConnectorArray) ToGcpConnectorArrayOutput() GcpConnectorArrayOutput {
	return i.ToGcpConnectorArrayOutputWithContext(context.Background())
}

func (i GcpConnectorArray) ToGcpConnectorArrayOutputWithContext(ctx context.Context) GcpConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpConnectorArrayOutput)
}

// GcpConnectorMapInput is an input type that accepts GcpConnectorMap and GcpConnectorMapOutput values.
// You can construct a concrete instance of `GcpConnectorMapInput` via:
//
//	GcpConnectorMap{ "key": GcpConnectorArgs{...} }
type GcpConnectorMapInput interface {
	pulumi.Input

	ToGcpConnectorMapOutput() GcpConnectorMapOutput
	ToGcpConnectorMapOutputWithContext(context.Context) GcpConnectorMapOutput
}

type GcpConnectorMap map[string]GcpConnectorInput

func (GcpConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpConnector)(nil)).Elem()
}

func (i GcpConnectorMap) ToGcpConnectorMapOutput() GcpConnectorMapOutput {
	return i.ToGcpConnectorMapOutputWithContext(context.Background())
}

func (i GcpConnectorMap) ToGcpConnectorMapOutputWithContext(ctx context.Context) GcpConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpConnectorMapOutput)
}

type GcpConnectorOutput struct{ *pulumi.OutputState }

func (GcpConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpConnector)(nil)).Elem()
}

func (o GcpConnectorOutput) ToGcpConnectorOutput() GcpConnectorOutput {
	return o
}

func (o GcpConnectorOutput) ToGcpConnectorOutputWithContext(ctx context.Context) GcpConnectorOutput {
	return o
}

// Description of the resource.
func (o GcpConnectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcpConnector) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Enable this flag to execute on Delegate
func (o GcpConnectorOutput) ExecuteOnDelegate() pulumi.BoolOutput {
	return o.ApplyT(func(v *GcpConnector) pulumi.BoolOutput { return v.ExecuteOnDelegate }).(pulumi.BoolOutput)
}

// Enable this flag for force deletion of connector
func (o GcpConnectorOutput) ForceDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v *GcpConnector) pulumi.BoolOutput { return v.ForceDelete }).(pulumi.BoolOutput)
}

// Unique identifier of the resource.
func (o GcpConnectorOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpConnector) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Inherit configuration from delegate.
func (o GcpConnectorOutput) InheritFromDelegates() GcpConnectorInheritFromDelegateArrayOutput {
	return o.ApplyT(func(v *GcpConnector) GcpConnectorInheritFromDelegateArrayOutput { return v.InheritFromDelegates }).(GcpConnectorInheritFromDelegateArrayOutput)
}

// Manual credential configuration.
func (o GcpConnectorOutput) Manual() GcpConnectorManualPtrOutput {
	return o.ApplyT(func(v *GcpConnector) GcpConnectorManualPtrOutput { return v.Manual }).(GcpConnectorManualPtrOutput)
}

// Name of the resource.
func (o GcpConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Authentication using harness oidc.
func (o GcpConnectorOutput) OidcAuthentications() GcpConnectorOidcAuthenticationArrayOutput {
	return o.ApplyT(func(v *GcpConnector) GcpConnectorOidcAuthenticationArrayOutput { return v.OidcAuthentications }).(GcpConnectorOidcAuthenticationArrayOutput)
}

// Unique identifier of the organization.
func (o GcpConnectorOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcpConnector) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o GcpConnectorOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcpConnector) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o GcpConnectorOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GcpConnector) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type GcpConnectorArrayOutput struct{ *pulumi.OutputState }

func (GcpConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpConnector)(nil)).Elem()
}

func (o GcpConnectorArrayOutput) ToGcpConnectorArrayOutput() GcpConnectorArrayOutput {
	return o
}

func (o GcpConnectorArrayOutput) ToGcpConnectorArrayOutputWithContext(ctx context.Context) GcpConnectorArrayOutput {
	return o
}

func (o GcpConnectorArrayOutput) Index(i pulumi.IntInput) GcpConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GcpConnector {
		return vs[0].([]*GcpConnector)[vs[1].(int)]
	}).(GcpConnectorOutput)
}

type GcpConnectorMapOutput struct{ *pulumi.OutputState }

func (GcpConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpConnector)(nil)).Elem()
}

func (o GcpConnectorMapOutput) ToGcpConnectorMapOutput() GcpConnectorMapOutput {
	return o
}

func (o GcpConnectorMapOutput) ToGcpConnectorMapOutputWithContext(ctx context.Context) GcpConnectorMapOutput {
	return o
}

func (o GcpConnectorMapOutput) MapIndex(k pulumi.StringInput) GcpConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GcpConnector {
		return vs[0].(map[string]*GcpConnector)[vs[1].(string)]
	}).(GcpConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GcpConnectorInput)(nil)).Elem(), &GcpConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpConnectorArrayInput)(nil)).Elem(), GcpConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpConnectorMapInput)(nil)).Elem(), GcpConnectorMap{})
	pulumi.RegisterOutputType(GcpConnectorOutput{})
	pulumi.RegisterOutputType(GcpConnectorArrayOutput{})
	pulumi.RegisterOutputType(GcpConnectorMapOutput{})
}
