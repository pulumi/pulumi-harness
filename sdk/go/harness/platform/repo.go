// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Harness Repo.
//
// ## Import
//
// # Import
//
// ```sh
// $ pulumi import harness:platform/repo:Repo example <identifier>
// ```
//
// # Import using the organization id
//
// ```sh
// $ pulumi import harness:platform/repo:Repo example <org_id>/<identifier>
// ```
//
// # Import using the organization id and the project id
//
// ```sh
// $ pulumi import harness:platform/repo:Repo example <org_id>/<project_id>/<identifier>
// ```
type Repo struct {
	pulumi.CustomResourceState

	// Timestamp when the repository was created.
	Created pulumi.IntOutput `pulumi:"created"`
	// ID of the user who created the repository.
	CreatedBy pulumi.IntOutput `pulumi:"createdBy"`
	// Default branch of the repository (Applicate only for create).
	DefaultBranch pulumi.StringPtrOutput `pulumi:"defaultBranch"`
	// Description of the repository.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Repository should be created with specified predefined gitignore file.
	GitIgnore pulumi.StringPtrOutput `pulumi:"gitIgnore"`
	// Git URL of the repository.
	GitUrl pulumi.StringOutput `pulumi:"gitUrl"`
	// Identifier of the repository.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Repository should be created with specified predefined license file.
	License pulumi.StringPtrOutput `pulumi:"license"`
	// Name of the repository.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Path of the repository.
	Path pulumi.StringOutput `pulumi:"path"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Repository should be created with readme file.
	Readme pulumi.BoolPtrOutput `pulumi:"readme"`
	// Configuration for importing an existing repository from SCM provider.
	Sources RepoSourceArrayOutput `pulumi:"sources"`
	// Timestamp when the repository was last updated.
	Updated pulumi.IntOutput `pulumi:"updated"`
}

// NewRepo registers a new resource with the given unique name, arguments, and options.
func NewRepo(ctx *pulumi.Context,
	name string, args *RepoArgs, opts ...pulumi.ResourceOption) (*Repo, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Repo
	err := ctx.RegisterResource("harness:platform/repo:Repo", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepo gets an existing Repo resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepo(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepoState, opts ...pulumi.ResourceOption) (*Repo, error) {
	var resource Repo
	err := ctx.ReadResource("harness:platform/repo:Repo", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Repo resources.
type repoState struct {
	// Timestamp when the repository was created.
	Created *int `pulumi:"created"`
	// ID of the user who created the repository.
	CreatedBy *int `pulumi:"createdBy"`
	// Default branch of the repository (Applicate only for create).
	DefaultBranch *string `pulumi:"defaultBranch"`
	// Description of the repository.
	Description *string `pulumi:"description"`
	// Repository should be created with specified predefined gitignore file.
	GitIgnore *string `pulumi:"gitIgnore"`
	// Git URL of the repository.
	GitUrl *string `pulumi:"gitUrl"`
	// Identifier of the repository.
	Identifier *string `pulumi:"identifier"`
	// Repository should be created with specified predefined license file.
	License *string `pulumi:"license"`
	// Name of the repository.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Path of the repository.
	Path *string `pulumi:"path"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Repository should be created with readme file.
	Readme *bool `pulumi:"readme"`
	// Configuration for importing an existing repository from SCM provider.
	Sources []RepoSource `pulumi:"sources"`
	// Timestamp when the repository was last updated.
	Updated *int `pulumi:"updated"`
}

type RepoState struct {
	// Timestamp when the repository was created.
	Created pulumi.IntPtrInput
	// ID of the user who created the repository.
	CreatedBy pulumi.IntPtrInput
	// Default branch of the repository (Applicate only for create).
	DefaultBranch pulumi.StringPtrInput
	// Description of the repository.
	Description pulumi.StringPtrInput
	// Repository should be created with specified predefined gitignore file.
	GitIgnore pulumi.StringPtrInput
	// Git URL of the repository.
	GitUrl pulumi.StringPtrInput
	// Identifier of the repository.
	Identifier pulumi.StringPtrInput
	// Repository should be created with specified predefined license file.
	License pulumi.StringPtrInput
	// Name of the repository.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Path of the repository.
	Path pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Repository should be created with readme file.
	Readme pulumi.BoolPtrInput
	// Configuration for importing an existing repository from SCM provider.
	Sources RepoSourceArrayInput
	// Timestamp when the repository was last updated.
	Updated pulumi.IntPtrInput
}

func (RepoState) ElementType() reflect.Type {
	return reflect.TypeOf((*repoState)(nil)).Elem()
}

type repoArgs struct {
	// Default branch of the repository (Applicate only for create).
	DefaultBranch *string `pulumi:"defaultBranch"`
	// Description of the repository.
	Description *string `pulumi:"description"`
	// Repository should be created with specified predefined gitignore file.
	GitIgnore *string `pulumi:"gitIgnore"`
	// Identifier of the repository.
	Identifier string `pulumi:"identifier"`
	// Repository should be created with specified predefined license file.
	License *string `pulumi:"license"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Repository should be created with readme file.
	Readme *bool `pulumi:"readme"`
	// Configuration for importing an existing repository from SCM provider.
	Sources []RepoSource `pulumi:"sources"`
}

// The set of arguments for constructing a Repo resource.
type RepoArgs struct {
	// Default branch of the repository (Applicate only for create).
	DefaultBranch pulumi.StringPtrInput
	// Description of the repository.
	Description pulumi.StringPtrInput
	// Repository should be created with specified predefined gitignore file.
	GitIgnore pulumi.StringPtrInput
	// Identifier of the repository.
	Identifier pulumi.StringInput
	// Repository should be created with specified predefined license file.
	License pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Repository should be created with readme file.
	Readme pulumi.BoolPtrInput
	// Configuration for importing an existing repository from SCM provider.
	Sources RepoSourceArrayInput
}

func (RepoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repoArgs)(nil)).Elem()
}

type RepoInput interface {
	pulumi.Input

	ToRepoOutput() RepoOutput
	ToRepoOutputWithContext(ctx context.Context) RepoOutput
}

func (*Repo) ElementType() reflect.Type {
	return reflect.TypeOf((**Repo)(nil)).Elem()
}

func (i *Repo) ToRepoOutput() RepoOutput {
	return i.ToRepoOutputWithContext(context.Background())
}

func (i *Repo) ToRepoOutputWithContext(ctx context.Context) RepoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoOutput)
}

// RepoArrayInput is an input type that accepts RepoArray and RepoArrayOutput values.
// You can construct a concrete instance of `RepoArrayInput` via:
//
//	RepoArray{ RepoArgs{...} }
type RepoArrayInput interface {
	pulumi.Input

	ToRepoArrayOutput() RepoArrayOutput
	ToRepoArrayOutputWithContext(context.Context) RepoArrayOutput
}

type RepoArray []RepoInput

func (RepoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Repo)(nil)).Elem()
}

func (i RepoArray) ToRepoArrayOutput() RepoArrayOutput {
	return i.ToRepoArrayOutputWithContext(context.Background())
}

func (i RepoArray) ToRepoArrayOutputWithContext(ctx context.Context) RepoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoArrayOutput)
}

// RepoMapInput is an input type that accepts RepoMap and RepoMapOutput values.
// You can construct a concrete instance of `RepoMapInput` via:
//
//	RepoMap{ "key": RepoArgs{...} }
type RepoMapInput interface {
	pulumi.Input

	ToRepoMapOutput() RepoMapOutput
	ToRepoMapOutputWithContext(context.Context) RepoMapOutput
}

type RepoMap map[string]RepoInput

func (RepoMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Repo)(nil)).Elem()
}

func (i RepoMap) ToRepoMapOutput() RepoMapOutput {
	return i.ToRepoMapOutputWithContext(context.Background())
}

func (i RepoMap) ToRepoMapOutputWithContext(ctx context.Context) RepoMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoMapOutput)
}

type RepoOutput struct{ *pulumi.OutputState }

func (RepoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Repo)(nil)).Elem()
}

func (o RepoOutput) ToRepoOutput() RepoOutput {
	return o
}

func (o RepoOutput) ToRepoOutputWithContext(ctx context.Context) RepoOutput {
	return o
}

// Timestamp when the repository was created.
func (o RepoOutput) Created() pulumi.IntOutput {
	return o.ApplyT(func(v *Repo) pulumi.IntOutput { return v.Created }).(pulumi.IntOutput)
}

// ID of the user who created the repository.
func (o RepoOutput) CreatedBy() pulumi.IntOutput {
	return o.ApplyT(func(v *Repo) pulumi.IntOutput { return v.CreatedBy }).(pulumi.IntOutput)
}

// Default branch of the repository (Applicate only for create).
func (o RepoOutput) DefaultBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringPtrOutput { return v.DefaultBranch }).(pulumi.StringPtrOutput)
}

// Description of the repository.
func (o RepoOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Repository should be created with specified predefined gitignore file.
func (o RepoOutput) GitIgnore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringPtrOutput { return v.GitIgnore }).(pulumi.StringPtrOutput)
}

// Git URL of the repository.
func (o RepoOutput) GitUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringOutput { return v.GitUrl }).(pulumi.StringOutput)
}

// Identifier of the repository.
func (o RepoOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Repository should be created with specified predefined license file.
func (o RepoOutput) License() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringPtrOutput { return v.License }).(pulumi.StringPtrOutput)
}

// Name of the repository.
func (o RepoOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o RepoOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Path of the repository.
func (o RepoOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// Unique identifier of the project.
func (o RepoOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Repository should be created with readme file.
func (o RepoOutput) Readme() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repo) pulumi.BoolPtrOutput { return v.Readme }).(pulumi.BoolPtrOutput)
}

// Configuration for importing an existing repository from SCM provider.
func (o RepoOutput) Sources() RepoSourceArrayOutput {
	return o.ApplyT(func(v *Repo) RepoSourceArrayOutput { return v.Sources }).(RepoSourceArrayOutput)
}

// Timestamp when the repository was last updated.
func (o RepoOutput) Updated() pulumi.IntOutput {
	return o.ApplyT(func(v *Repo) pulumi.IntOutput { return v.Updated }).(pulumi.IntOutput)
}

type RepoArrayOutput struct{ *pulumi.OutputState }

func (RepoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Repo)(nil)).Elem()
}

func (o RepoArrayOutput) ToRepoArrayOutput() RepoArrayOutput {
	return o
}

func (o RepoArrayOutput) ToRepoArrayOutputWithContext(ctx context.Context) RepoArrayOutput {
	return o
}

func (o RepoArrayOutput) Index(i pulumi.IntInput) RepoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Repo {
		return vs[0].([]*Repo)[vs[1].(int)]
	}).(RepoOutput)
}

type RepoMapOutput struct{ *pulumi.OutputState }

func (RepoMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Repo)(nil)).Elem()
}

func (o RepoMapOutput) ToRepoMapOutput() RepoMapOutput {
	return o
}

func (o RepoMapOutput) ToRepoMapOutputWithContext(ctx context.Context) RepoMapOutput {
	return o
}

func (o RepoMapOutput) MapIndex(k pulumi.StringInput) RepoOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Repo {
		return vs[0].(map[string]*Repo)[vs[1].(string)]
	}).(RepoOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepoInput)(nil)).Elem(), &Repo{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepoArrayInput)(nil)).Elem(), RepoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepoMapInput)(nil)).Elem(), RepoMap{})
	pulumi.RegisterOutputType(RepoOutput{})
	pulumi.RegisterOutputType(RepoArrayOutput{})
	pulumi.RegisterOutputType(RepoMapOutput{})
}
