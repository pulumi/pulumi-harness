// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a OCI Helm connector.
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import account level helm connector
//
// ```sh
// $ pulumi import harness:platform/ociHelmConnector:OciHelmConnector example <connector_id>
// ```
//
// # Import org level helm connector
//
// ```sh
// $ pulumi import harness:platform/ociHelmConnector:OciHelmConnector example <ord_id>/<connector_id>
// ```
//
// # Import project level helm connector
//
// ```sh
// $ pulumi import harness:platform/ociHelmConnector:OciHelmConnector example <org_id>/<project_id>/<connector_id>
// ```
type OciHelmConnector struct {
	pulumi.CustomResourceState

	// Credentials to use for authentication.
	Credentials OciHelmConnectorCredentialsPtrOutput `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Enable this flag for force deletion of connector
	ForceDelete pulumi.BoolOutput `pulumi:"forceDelete"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// URL of the helm server.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewOciHelmConnector registers a new resource with the given unique name, arguments, and options.
func NewOciHelmConnector(ctx *pulumi.Context,
	name string, args *OciHelmConnectorArgs, opts ...pulumi.ResourceOption) (*OciHelmConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OciHelmConnector
	err := ctx.RegisterResource("harness:platform/ociHelmConnector:OciHelmConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOciHelmConnector gets an existing OciHelmConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOciHelmConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OciHelmConnectorState, opts ...pulumi.ResourceOption) (*OciHelmConnector, error) {
	var resource OciHelmConnector
	err := ctx.ReadResource("harness:platform/ociHelmConnector:OciHelmConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OciHelmConnector resources.
type ociHelmConnectorState struct {
	// Credentials to use for authentication.
	Credentials *OciHelmConnectorCredentials `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Enable this flag for force deletion of connector
	ForceDelete *bool `pulumi:"forceDelete"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// URL of the helm server.
	Url *string `pulumi:"url"`
}

type OciHelmConnectorState struct {
	// Credentials to use for authentication.
	Credentials OciHelmConnectorCredentialsPtrInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Enable this flag for force deletion of connector
	ForceDelete pulumi.BoolPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// URL of the helm server.
	Url pulumi.StringPtrInput
}

func (OciHelmConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*ociHelmConnectorState)(nil)).Elem()
}

type ociHelmConnectorArgs struct {
	// Credentials to use for authentication.
	Credentials *OciHelmConnectorCredentials `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Enable this flag for force deletion of connector
	ForceDelete *bool `pulumi:"forceDelete"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// URL of the helm server.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a OciHelmConnector resource.
type OciHelmConnectorArgs struct {
	// Credentials to use for authentication.
	Credentials OciHelmConnectorCredentialsPtrInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Enable this flag for force deletion of connector
	ForceDelete pulumi.BoolPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// URL of the helm server.
	Url pulumi.StringInput
}

func (OciHelmConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ociHelmConnectorArgs)(nil)).Elem()
}

type OciHelmConnectorInput interface {
	pulumi.Input

	ToOciHelmConnectorOutput() OciHelmConnectorOutput
	ToOciHelmConnectorOutputWithContext(ctx context.Context) OciHelmConnectorOutput
}

func (*OciHelmConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**OciHelmConnector)(nil)).Elem()
}

func (i *OciHelmConnector) ToOciHelmConnectorOutput() OciHelmConnectorOutput {
	return i.ToOciHelmConnectorOutputWithContext(context.Background())
}

func (i *OciHelmConnector) ToOciHelmConnectorOutputWithContext(ctx context.Context) OciHelmConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OciHelmConnectorOutput)
}

// OciHelmConnectorArrayInput is an input type that accepts OciHelmConnectorArray and OciHelmConnectorArrayOutput values.
// You can construct a concrete instance of `OciHelmConnectorArrayInput` via:
//
//	OciHelmConnectorArray{ OciHelmConnectorArgs{...} }
type OciHelmConnectorArrayInput interface {
	pulumi.Input

	ToOciHelmConnectorArrayOutput() OciHelmConnectorArrayOutput
	ToOciHelmConnectorArrayOutputWithContext(context.Context) OciHelmConnectorArrayOutput
}

type OciHelmConnectorArray []OciHelmConnectorInput

func (OciHelmConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OciHelmConnector)(nil)).Elem()
}

func (i OciHelmConnectorArray) ToOciHelmConnectorArrayOutput() OciHelmConnectorArrayOutput {
	return i.ToOciHelmConnectorArrayOutputWithContext(context.Background())
}

func (i OciHelmConnectorArray) ToOciHelmConnectorArrayOutputWithContext(ctx context.Context) OciHelmConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OciHelmConnectorArrayOutput)
}

// OciHelmConnectorMapInput is an input type that accepts OciHelmConnectorMap and OciHelmConnectorMapOutput values.
// You can construct a concrete instance of `OciHelmConnectorMapInput` via:
//
//	OciHelmConnectorMap{ "key": OciHelmConnectorArgs{...} }
type OciHelmConnectorMapInput interface {
	pulumi.Input

	ToOciHelmConnectorMapOutput() OciHelmConnectorMapOutput
	ToOciHelmConnectorMapOutputWithContext(context.Context) OciHelmConnectorMapOutput
}

type OciHelmConnectorMap map[string]OciHelmConnectorInput

func (OciHelmConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OciHelmConnector)(nil)).Elem()
}

func (i OciHelmConnectorMap) ToOciHelmConnectorMapOutput() OciHelmConnectorMapOutput {
	return i.ToOciHelmConnectorMapOutputWithContext(context.Background())
}

func (i OciHelmConnectorMap) ToOciHelmConnectorMapOutputWithContext(ctx context.Context) OciHelmConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OciHelmConnectorMapOutput)
}

type OciHelmConnectorOutput struct{ *pulumi.OutputState }

func (OciHelmConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OciHelmConnector)(nil)).Elem()
}

func (o OciHelmConnectorOutput) ToOciHelmConnectorOutput() OciHelmConnectorOutput {
	return o
}

func (o OciHelmConnectorOutput) ToOciHelmConnectorOutputWithContext(ctx context.Context) OciHelmConnectorOutput {
	return o
}

// Credentials to use for authentication.
func (o OciHelmConnectorOutput) Credentials() OciHelmConnectorCredentialsPtrOutput {
	return o.ApplyT(func(v *OciHelmConnector) OciHelmConnectorCredentialsPtrOutput { return v.Credentials }).(OciHelmConnectorCredentialsPtrOutput)
}

// Tags to filter delegates for connection.
func (o OciHelmConnectorOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OciHelmConnector) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o OciHelmConnectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OciHelmConnector) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Enable this flag for force deletion of connector
func (o OciHelmConnectorOutput) ForceDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v *OciHelmConnector) pulumi.BoolOutput { return v.ForceDelete }).(pulumi.BoolOutput)
}

// Unique identifier of the resource.
func (o OciHelmConnectorOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *OciHelmConnector) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o OciHelmConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OciHelmConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o OciHelmConnectorOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OciHelmConnector) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o OciHelmConnectorOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OciHelmConnector) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o OciHelmConnectorOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OciHelmConnector) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// URL of the helm server.
func (o OciHelmConnectorOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *OciHelmConnector) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type OciHelmConnectorArrayOutput struct{ *pulumi.OutputState }

func (OciHelmConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OciHelmConnector)(nil)).Elem()
}

func (o OciHelmConnectorArrayOutput) ToOciHelmConnectorArrayOutput() OciHelmConnectorArrayOutput {
	return o
}

func (o OciHelmConnectorArrayOutput) ToOciHelmConnectorArrayOutputWithContext(ctx context.Context) OciHelmConnectorArrayOutput {
	return o
}

func (o OciHelmConnectorArrayOutput) Index(i pulumi.IntInput) OciHelmConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OciHelmConnector {
		return vs[0].([]*OciHelmConnector)[vs[1].(int)]
	}).(OciHelmConnectorOutput)
}

type OciHelmConnectorMapOutput struct{ *pulumi.OutputState }

func (OciHelmConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OciHelmConnector)(nil)).Elem()
}

func (o OciHelmConnectorMapOutput) ToOciHelmConnectorMapOutput() OciHelmConnectorMapOutput {
	return o
}

func (o OciHelmConnectorMapOutput) ToOciHelmConnectorMapOutputWithContext(ctx context.Context) OciHelmConnectorMapOutput {
	return o
}

func (o OciHelmConnectorMapOutput) MapIndex(k pulumi.StringInput) OciHelmConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OciHelmConnector {
		return vs[0].(map[string]*OciHelmConnector)[vs[1].(string)]
	}).(OciHelmConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OciHelmConnectorInput)(nil)).Elem(), &OciHelmConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*OciHelmConnectorArrayInput)(nil)).Elem(), OciHelmConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OciHelmConnectorMapInput)(nil)).Elem(), OciHelmConnectorMap{})
	pulumi.RegisterOutputType(OciHelmConnectorOutput{})
	pulumi.RegisterOutputType(OciHelmConnectorArrayOutput{})
	pulumi.RegisterOutputType(OciHelmConnectorMapOutput{})
}
