// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating role assignments in Harness.
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// # Import account level role assignments
//
// ```sh
// $ pulumi import harness:platform/roleAssignments:RoleAssignments example <role_assignments_id>
// ```
//
// # Import org level role assignments
//
// ```sh
// $ pulumi import harness:platform/roleAssignments:RoleAssignments example <ord_id>/<role_assignments_id>
// ```
//
// # Import project level role assignments
//
// ```sh
// $ pulumi import harness:platform/roleAssignments:RoleAssignments example <org_id>/<project_id>/<role_assignments_id>
// ```
type RoleAssignments struct {
	pulumi.CustomResourceState

	// Disabled or not.
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// Identifier for role assignment.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Managed or not.
	Managed pulumi.BoolPtrOutput `pulumi:"managed"`
	// Org identifier.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Principal.
	Principals RoleAssignmentsPrincipalArrayOutput `pulumi:"principals"`
	// Project Identifier
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Resource group identifier.
	ResourceGroupIdentifier pulumi.StringOutput `pulumi:"resourceGroupIdentifier"`
	// Role identifier.
	RoleIdentifier pulumi.StringOutput `pulumi:"roleIdentifier"`
}

// NewRoleAssignments registers a new resource with the given unique name, arguments, and options.
func NewRoleAssignments(ctx *pulumi.Context,
	name string, args *RoleAssignmentsArgs, opts ...pulumi.ResourceOption) (*RoleAssignments, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Principals == nil {
		return nil, errors.New("invalid value for required argument 'Principals'")
	}
	if args.ResourceGroupIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupIdentifier'")
	}
	if args.RoleIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'RoleIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoleAssignments
	err := ctx.RegisterResource("harness:platform/roleAssignments:RoleAssignments", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoleAssignments gets an existing RoleAssignments resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoleAssignments(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleAssignmentsState, opts ...pulumi.ResourceOption) (*RoleAssignments, error) {
	var resource RoleAssignments
	err := ctx.ReadResource("harness:platform/roleAssignments:RoleAssignments", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoleAssignments resources.
type roleAssignmentsState struct {
	// Disabled or not.
	Disabled *bool `pulumi:"disabled"`
	// Identifier for role assignment.
	Identifier *string `pulumi:"identifier"`
	// Managed or not.
	Managed *bool `pulumi:"managed"`
	// Org identifier.
	OrgId *string `pulumi:"orgId"`
	// Principal.
	Principals []RoleAssignmentsPrincipal `pulumi:"principals"`
	// Project Identifier
	ProjectId *string `pulumi:"projectId"`
	// Resource group identifier.
	ResourceGroupIdentifier *string `pulumi:"resourceGroupIdentifier"`
	// Role identifier.
	RoleIdentifier *string `pulumi:"roleIdentifier"`
}

type RoleAssignmentsState struct {
	// Disabled or not.
	Disabled pulumi.BoolPtrInput
	// Identifier for role assignment.
	Identifier pulumi.StringPtrInput
	// Managed or not.
	Managed pulumi.BoolPtrInput
	// Org identifier.
	OrgId pulumi.StringPtrInput
	// Principal.
	Principals RoleAssignmentsPrincipalArrayInput
	// Project Identifier
	ProjectId pulumi.StringPtrInput
	// Resource group identifier.
	ResourceGroupIdentifier pulumi.StringPtrInput
	// Role identifier.
	RoleIdentifier pulumi.StringPtrInput
}

func (RoleAssignmentsState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleAssignmentsState)(nil)).Elem()
}

type roleAssignmentsArgs struct {
	// Disabled or not.
	Disabled *bool `pulumi:"disabled"`
	// Identifier for role assignment.
	Identifier *string `pulumi:"identifier"`
	// Managed or not.
	Managed *bool `pulumi:"managed"`
	// Org identifier.
	OrgId *string `pulumi:"orgId"`
	// Principal.
	Principals []RoleAssignmentsPrincipal `pulumi:"principals"`
	// Project Identifier
	ProjectId *string `pulumi:"projectId"`
	// Resource group identifier.
	ResourceGroupIdentifier string `pulumi:"resourceGroupIdentifier"`
	// Role identifier.
	RoleIdentifier string `pulumi:"roleIdentifier"`
}

// The set of arguments for constructing a RoleAssignments resource.
type RoleAssignmentsArgs struct {
	// Disabled or not.
	Disabled pulumi.BoolPtrInput
	// Identifier for role assignment.
	Identifier pulumi.StringPtrInput
	// Managed or not.
	Managed pulumi.BoolPtrInput
	// Org identifier.
	OrgId pulumi.StringPtrInput
	// Principal.
	Principals RoleAssignmentsPrincipalArrayInput
	// Project Identifier
	ProjectId pulumi.StringPtrInput
	// Resource group identifier.
	ResourceGroupIdentifier pulumi.StringInput
	// Role identifier.
	RoleIdentifier pulumi.StringInput
}

func (RoleAssignmentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleAssignmentsArgs)(nil)).Elem()
}

type RoleAssignmentsInput interface {
	pulumi.Input

	ToRoleAssignmentsOutput() RoleAssignmentsOutput
	ToRoleAssignmentsOutputWithContext(ctx context.Context) RoleAssignmentsOutput
}

func (*RoleAssignments) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleAssignments)(nil)).Elem()
}

func (i *RoleAssignments) ToRoleAssignmentsOutput() RoleAssignmentsOutput {
	return i.ToRoleAssignmentsOutputWithContext(context.Background())
}

func (i *RoleAssignments) ToRoleAssignmentsOutputWithContext(ctx context.Context) RoleAssignmentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentsOutput)
}

// RoleAssignmentsArrayInput is an input type that accepts RoleAssignmentsArray and RoleAssignmentsArrayOutput values.
// You can construct a concrete instance of `RoleAssignmentsArrayInput` via:
//
//	RoleAssignmentsArray{ RoleAssignmentsArgs{...} }
type RoleAssignmentsArrayInput interface {
	pulumi.Input

	ToRoleAssignmentsArrayOutput() RoleAssignmentsArrayOutput
	ToRoleAssignmentsArrayOutputWithContext(context.Context) RoleAssignmentsArrayOutput
}

type RoleAssignmentsArray []RoleAssignmentsInput

func (RoleAssignmentsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleAssignments)(nil)).Elem()
}

func (i RoleAssignmentsArray) ToRoleAssignmentsArrayOutput() RoleAssignmentsArrayOutput {
	return i.ToRoleAssignmentsArrayOutputWithContext(context.Background())
}

func (i RoleAssignmentsArray) ToRoleAssignmentsArrayOutputWithContext(ctx context.Context) RoleAssignmentsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentsArrayOutput)
}

// RoleAssignmentsMapInput is an input type that accepts RoleAssignmentsMap and RoleAssignmentsMapOutput values.
// You can construct a concrete instance of `RoleAssignmentsMapInput` via:
//
//	RoleAssignmentsMap{ "key": RoleAssignmentsArgs{...} }
type RoleAssignmentsMapInput interface {
	pulumi.Input

	ToRoleAssignmentsMapOutput() RoleAssignmentsMapOutput
	ToRoleAssignmentsMapOutputWithContext(context.Context) RoleAssignmentsMapOutput
}

type RoleAssignmentsMap map[string]RoleAssignmentsInput

func (RoleAssignmentsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleAssignments)(nil)).Elem()
}

func (i RoleAssignmentsMap) ToRoleAssignmentsMapOutput() RoleAssignmentsMapOutput {
	return i.ToRoleAssignmentsMapOutputWithContext(context.Background())
}

func (i RoleAssignmentsMap) ToRoleAssignmentsMapOutputWithContext(ctx context.Context) RoleAssignmentsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentsMapOutput)
}

type RoleAssignmentsOutput struct{ *pulumi.OutputState }

func (RoleAssignmentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleAssignments)(nil)).Elem()
}

func (o RoleAssignmentsOutput) ToRoleAssignmentsOutput() RoleAssignmentsOutput {
	return o
}

func (o RoleAssignmentsOutput) ToRoleAssignmentsOutputWithContext(ctx context.Context) RoleAssignmentsOutput {
	return o
}

// Disabled or not.
func (o RoleAssignmentsOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RoleAssignments) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Identifier for role assignment.
func (o RoleAssignmentsOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleAssignments) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Managed or not.
func (o RoleAssignmentsOutput) Managed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RoleAssignments) pulumi.BoolPtrOutput { return v.Managed }).(pulumi.BoolPtrOutput)
}

// Org identifier.
func (o RoleAssignmentsOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignments) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Principal.
func (o RoleAssignmentsOutput) Principals() RoleAssignmentsPrincipalArrayOutput {
	return o.ApplyT(func(v *RoleAssignments) RoleAssignmentsPrincipalArrayOutput { return v.Principals }).(RoleAssignmentsPrincipalArrayOutput)
}

// Project Identifier
func (o RoleAssignmentsOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignments) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Resource group identifier.
func (o RoleAssignmentsOutput) ResourceGroupIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleAssignments) pulumi.StringOutput { return v.ResourceGroupIdentifier }).(pulumi.StringOutput)
}

// Role identifier.
func (o RoleAssignmentsOutput) RoleIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleAssignments) pulumi.StringOutput { return v.RoleIdentifier }).(pulumi.StringOutput)
}

type RoleAssignmentsArrayOutput struct{ *pulumi.OutputState }

func (RoleAssignmentsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleAssignments)(nil)).Elem()
}

func (o RoleAssignmentsArrayOutput) ToRoleAssignmentsArrayOutput() RoleAssignmentsArrayOutput {
	return o
}

func (o RoleAssignmentsArrayOutput) ToRoleAssignmentsArrayOutputWithContext(ctx context.Context) RoleAssignmentsArrayOutput {
	return o
}

func (o RoleAssignmentsArrayOutput) Index(i pulumi.IntInput) RoleAssignmentsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoleAssignments {
		return vs[0].([]*RoleAssignments)[vs[1].(int)]
	}).(RoleAssignmentsOutput)
}

type RoleAssignmentsMapOutput struct{ *pulumi.OutputState }

func (RoleAssignmentsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleAssignments)(nil)).Elem()
}

func (o RoleAssignmentsMapOutput) ToRoleAssignmentsMapOutput() RoleAssignmentsMapOutput {
	return o
}

func (o RoleAssignmentsMapOutput) ToRoleAssignmentsMapOutputWithContext(ctx context.Context) RoleAssignmentsMapOutput {
	return o
}

func (o RoleAssignmentsMapOutput) MapIndex(k pulumi.StringInput) RoleAssignmentsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoleAssignments {
		return vs[0].(map[string]*RoleAssignments)[vs[1].(string)]
	}).(RoleAssignmentsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleAssignmentsInput)(nil)).Elem(), &RoleAssignments{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleAssignmentsArrayInput)(nil)).Elem(), RoleAssignmentsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleAssignmentsMapInput)(nil)).Elem(), RoleAssignmentsMap{})
	pulumi.RegisterOutputType(RoleAssignmentsOutput{})
	pulumi.RegisterOutputType(RoleAssignmentsArrayOutput{})
	pulumi.RegisterOutputType(RoleAssignmentsMapOutput{})
}
