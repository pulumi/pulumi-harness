// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for a Harness Custom Dashboard.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewDashboards(ctx, "example", &platform.DashboardsArgs{
//				DashboardId:        pulumi.String("48507"),
//				Description:        pulumi.String("Example dashboard description"),
//				ResourceIdentifier: pulumi.String("shared"),
//				Title:              pulumi.String("Example Dashboard"),
//				DataSources:        pulumi.StringArray{},
//				Models:             pulumi.StringArray{},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Dashboards struct {
	pulumi.CustomResourceState

	// Created at timestamp of the Dashboard.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Unique identifier of the Template Dashboard to create from.
	DashboardId pulumi.StringOutput `pulumi:"dashboardId"`
	// Data Sources within the Dashboard.
	DataSources pulumi.StringArrayOutput `pulumi:"dataSources"`
	// Description of the Dashboard.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Favorite count of the dashboard.
	FavoriteCount pulumi.IntOutput `pulumi:"favoriteCount"`
	// The Folder ID that the Dashboard belongs to.
	FolderId pulumi.StringPtrOutput `pulumi:"folderId"`
	// Last accessed at timestamp of the Dashboard.
	LastAccessedAt pulumi.StringOutput `pulumi:"lastAccessedAt"`
	// Data Models within the Dashboard.
	Models pulumi.StringArrayOutput `pulumi:"models"`
	// Name of the Dashboard.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Folder ID that the Dashboard belongs to.
	ResourceIdentifier pulumi.StringOutput `pulumi:"resourceIdentifier"`
	// Title of the Dashboard.
	Title pulumi.StringPtrOutput `pulumi:"title"`
	// Type of the dashboard.
	Type pulumi.StringOutput `pulumi:"type"`
	// View count of the dashboard.
	ViewCount pulumi.IntOutput `pulumi:"viewCount"`
}

// NewDashboards registers a new resource with the given unique name, arguments, and options.
func NewDashboards(ctx *pulumi.Context,
	name string, args *DashboardsArgs, opts ...pulumi.ResourceOption) (*Dashboards, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DashboardId == nil {
		return nil, errors.New("invalid value for required argument 'DashboardId'")
	}
	if args.ResourceIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ResourceIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dashboards
	err := ctx.RegisterResource("harness:platform/dashboards:Dashboards", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboards gets an existing Dashboards resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboards(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardsState, opts ...pulumi.ResourceOption) (*Dashboards, error) {
	var resource Dashboards
	err := ctx.ReadResource("harness:platform/dashboards:Dashboards", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dashboards resources.
type dashboardsState struct {
	// Created at timestamp of the Dashboard.
	CreatedAt *string `pulumi:"createdAt"`
	// Unique identifier of the Template Dashboard to create from.
	DashboardId *string `pulumi:"dashboardId"`
	// Data Sources within the Dashboard.
	DataSources []string `pulumi:"dataSources"`
	// Description of the Dashboard.
	Description *string `pulumi:"description"`
	// Favorite count of the dashboard.
	FavoriteCount *int `pulumi:"favoriteCount"`
	// The Folder ID that the Dashboard belongs to.
	FolderId *string `pulumi:"folderId"`
	// Last accessed at timestamp of the Dashboard.
	LastAccessedAt *string `pulumi:"lastAccessedAt"`
	// Data Models within the Dashboard.
	Models []string `pulumi:"models"`
	// Name of the Dashboard.
	Name *string `pulumi:"name"`
	// The Folder ID that the Dashboard belongs to.
	ResourceIdentifier *string `pulumi:"resourceIdentifier"`
	// Title of the Dashboard.
	Title *string `pulumi:"title"`
	// Type of the dashboard.
	Type *string `pulumi:"type"`
	// View count of the dashboard.
	ViewCount *int `pulumi:"viewCount"`
}

type DashboardsState struct {
	// Created at timestamp of the Dashboard.
	CreatedAt pulumi.StringPtrInput
	// Unique identifier of the Template Dashboard to create from.
	DashboardId pulumi.StringPtrInput
	// Data Sources within the Dashboard.
	DataSources pulumi.StringArrayInput
	// Description of the Dashboard.
	Description pulumi.StringPtrInput
	// Favorite count of the dashboard.
	FavoriteCount pulumi.IntPtrInput
	// The Folder ID that the Dashboard belongs to.
	FolderId pulumi.StringPtrInput
	// Last accessed at timestamp of the Dashboard.
	LastAccessedAt pulumi.StringPtrInput
	// Data Models within the Dashboard.
	Models pulumi.StringArrayInput
	// Name of the Dashboard.
	Name pulumi.StringPtrInput
	// The Folder ID that the Dashboard belongs to.
	ResourceIdentifier pulumi.StringPtrInput
	// Title of the Dashboard.
	Title pulumi.StringPtrInput
	// Type of the dashboard.
	Type pulumi.StringPtrInput
	// View count of the dashboard.
	ViewCount pulumi.IntPtrInput
}

func (DashboardsState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardsState)(nil)).Elem()
}

type dashboardsArgs struct {
	// Created at timestamp of the Dashboard.
	CreatedAt *string `pulumi:"createdAt"`
	// Unique identifier of the Template Dashboard to create from.
	DashboardId string `pulumi:"dashboardId"`
	// Data Sources within the Dashboard.
	DataSources []string `pulumi:"dataSources"`
	// Description of the Dashboard.
	Description *string `pulumi:"description"`
	// The Folder ID that the Dashboard belongs to.
	FolderId *string `pulumi:"folderId"`
	// Data Models within the Dashboard.
	Models []string `pulumi:"models"`
	// Name of the Dashboard.
	Name *string `pulumi:"name"`
	// The Folder ID that the Dashboard belongs to.
	ResourceIdentifier string `pulumi:"resourceIdentifier"`
	// Title of the Dashboard.
	Title *string `pulumi:"title"`
	// Type of the dashboard.
	Type *string `pulumi:"type"`
	// View count of the dashboard.
	ViewCount *int `pulumi:"viewCount"`
}

// The set of arguments for constructing a Dashboards resource.
type DashboardsArgs struct {
	// Created at timestamp of the Dashboard.
	CreatedAt pulumi.StringPtrInput
	// Unique identifier of the Template Dashboard to create from.
	DashboardId pulumi.StringInput
	// Data Sources within the Dashboard.
	DataSources pulumi.StringArrayInput
	// Description of the Dashboard.
	Description pulumi.StringPtrInput
	// The Folder ID that the Dashboard belongs to.
	FolderId pulumi.StringPtrInput
	// Data Models within the Dashboard.
	Models pulumi.StringArrayInput
	// Name of the Dashboard.
	Name pulumi.StringPtrInput
	// The Folder ID that the Dashboard belongs to.
	ResourceIdentifier pulumi.StringInput
	// Title of the Dashboard.
	Title pulumi.StringPtrInput
	// Type of the dashboard.
	Type pulumi.StringPtrInput
	// View count of the dashboard.
	ViewCount pulumi.IntPtrInput
}

func (DashboardsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardsArgs)(nil)).Elem()
}

type DashboardsInput interface {
	pulumi.Input

	ToDashboardsOutput() DashboardsOutput
	ToDashboardsOutputWithContext(ctx context.Context) DashboardsOutput
}

func (*Dashboards) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboards)(nil)).Elem()
}

func (i *Dashboards) ToDashboardsOutput() DashboardsOutput {
	return i.ToDashboardsOutputWithContext(context.Background())
}

func (i *Dashboards) ToDashboardsOutputWithContext(ctx context.Context) DashboardsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardsOutput)
}

// DashboardsArrayInput is an input type that accepts DashboardsArray and DashboardsArrayOutput values.
// You can construct a concrete instance of `DashboardsArrayInput` via:
//
//	DashboardsArray{ DashboardsArgs{...} }
type DashboardsArrayInput interface {
	pulumi.Input

	ToDashboardsArrayOutput() DashboardsArrayOutput
	ToDashboardsArrayOutputWithContext(context.Context) DashboardsArrayOutput
}

type DashboardsArray []DashboardsInput

func (DashboardsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dashboards)(nil)).Elem()
}

func (i DashboardsArray) ToDashboardsArrayOutput() DashboardsArrayOutput {
	return i.ToDashboardsArrayOutputWithContext(context.Background())
}

func (i DashboardsArray) ToDashboardsArrayOutputWithContext(ctx context.Context) DashboardsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardsArrayOutput)
}

// DashboardsMapInput is an input type that accepts DashboardsMap and DashboardsMapOutput values.
// You can construct a concrete instance of `DashboardsMapInput` via:
//
//	DashboardsMap{ "key": DashboardsArgs{...} }
type DashboardsMapInput interface {
	pulumi.Input

	ToDashboardsMapOutput() DashboardsMapOutput
	ToDashboardsMapOutputWithContext(context.Context) DashboardsMapOutput
}

type DashboardsMap map[string]DashboardsInput

func (DashboardsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dashboards)(nil)).Elem()
}

func (i DashboardsMap) ToDashboardsMapOutput() DashboardsMapOutput {
	return i.ToDashboardsMapOutputWithContext(context.Background())
}

func (i DashboardsMap) ToDashboardsMapOutputWithContext(ctx context.Context) DashboardsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardsMapOutput)
}

type DashboardsOutput struct{ *pulumi.OutputState }

func (DashboardsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboards)(nil)).Elem()
}

func (o DashboardsOutput) ToDashboardsOutput() DashboardsOutput {
	return o
}

func (o DashboardsOutput) ToDashboardsOutputWithContext(ctx context.Context) DashboardsOutput {
	return o
}

// Created at timestamp of the Dashboard.
func (o DashboardsOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboards) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Unique identifier of the Template Dashboard to create from.
func (o DashboardsOutput) DashboardId() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboards) pulumi.StringOutput { return v.DashboardId }).(pulumi.StringOutput)
}

// Data Sources within the Dashboard.
func (o DashboardsOutput) DataSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Dashboards) pulumi.StringArrayOutput { return v.DataSources }).(pulumi.StringArrayOutput)
}

// Description of the Dashboard.
func (o DashboardsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dashboards) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Favorite count of the dashboard.
func (o DashboardsOutput) FavoriteCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Dashboards) pulumi.IntOutput { return v.FavoriteCount }).(pulumi.IntOutput)
}

// The Folder ID that the Dashboard belongs to.
func (o DashboardsOutput) FolderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dashboards) pulumi.StringPtrOutput { return v.FolderId }).(pulumi.StringPtrOutput)
}

// Last accessed at timestamp of the Dashboard.
func (o DashboardsOutput) LastAccessedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboards) pulumi.StringOutput { return v.LastAccessedAt }).(pulumi.StringOutput)
}

// Data Models within the Dashboard.
func (o DashboardsOutput) Models() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Dashboards) pulumi.StringArrayOutput { return v.Models }).(pulumi.StringArrayOutput)
}

// Name of the Dashboard.
func (o DashboardsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboards) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Folder ID that the Dashboard belongs to.
func (o DashboardsOutput) ResourceIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboards) pulumi.StringOutput { return v.ResourceIdentifier }).(pulumi.StringOutput)
}

// Title of the Dashboard.
func (o DashboardsOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dashboards) pulumi.StringPtrOutput { return v.Title }).(pulumi.StringPtrOutput)
}

// Type of the dashboard.
func (o DashboardsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboards) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// View count of the dashboard.
func (o DashboardsOutput) ViewCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Dashboards) pulumi.IntOutput { return v.ViewCount }).(pulumi.IntOutput)
}

type DashboardsArrayOutput struct{ *pulumi.OutputState }

func (DashboardsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dashboards)(nil)).Elem()
}

func (o DashboardsArrayOutput) ToDashboardsArrayOutput() DashboardsArrayOutput {
	return o
}

func (o DashboardsArrayOutput) ToDashboardsArrayOutputWithContext(ctx context.Context) DashboardsArrayOutput {
	return o
}

func (o DashboardsArrayOutput) Index(i pulumi.IntInput) DashboardsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dashboards {
		return vs[0].([]*Dashboards)[vs[1].(int)]
	}).(DashboardsOutput)
}

type DashboardsMapOutput struct{ *pulumi.OutputState }

func (DashboardsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dashboards)(nil)).Elem()
}

func (o DashboardsMapOutput) ToDashboardsMapOutput() DashboardsMapOutput {
	return o
}

func (o DashboardsMapOutput) ToDashboardsMapOutputWithContext(ctx context.Context) DashboardsMapOutput {
	return o
}

func (o DashboardsMapOutput) MapIndex(k pulumi.StringInput) DashboardsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dashboards {
		return vs[0].(map[string]*Dashboards)[vs[1].(string)]
	}).(DashboardsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardsInput)(nil)).Elem(), &Dashboards{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardsArrayInput)(nil)).Elem(), DashboardsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardsMapInput)(nil)).Elem(), DashboardsMap{})
	pulumi.RegisterOutputType(DashboardsOutput{})
	pulumi.RegisterOutputType(DashboardsArrayOutput{})
	pulumi.RegisterOutputType(DashboardsMapOutput{})
}
