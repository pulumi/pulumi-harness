// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing Workspaces
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewWorkspace(ctx, "example", &platform.WorkspaceArgs{
//				Name:                  pulumi.String("example"),
//				Identifier:            pulumi.String("example"),
//				OrgId:                 pulumi.Any(testHarnessPlatformOrganization.Id),
//				ProjectId:             pulumi.Any(testHarnessPlatformProject.Id),
//				ProvisionerType:       pulumi.String("terraform"),
//				ProvisionerVersion:    pulumi.String("1.5.6"),
//				Repository:            pulumi.String("https://github.com/org/repo"),
//				RepositoryBranch:      pulumi.String("main"),
//				RepositoryPath:        pulumi.String("tf/aws/basic"),
//				CostEstimationEnabled: pulumi.Bool(true),
//				ProviderConnector:     pulumi.Any(test.Id),
//				RepositoryConnector:   pulumi.Any(test.Id),
//				TerraformVariables: platform.WorkspaceTerraformVariableArray{
//					&platform.WorkspaceTerraformVariableArgs{
//						Key:       pulumi.String("key1"),
//						Value:     pulumi.String("val1"),
//						ValueType: pulumi.String("string"),
//					},
//					&platform.WorkspaceTerraformVariableArgs{
//						Key:       pulumi.String("key2"),
//						Value:     pulumi.String("val2"),
//						ValueType: pulumi.String("string"),
//					},
//				},
//				EnvironmentVariables: platform.WorkspaceEnvironmentVariableArray{
//					&platform.WorkspaceEnvironmentVariableArgs{
//						Key:       pulumi.String("key1"),
//						Value:     pulumi.String("val1"),
//						ValueType: pulumi.String("string"),
//					},
//					&platform.WorkspaceEnvironmentVariableArgs{
//						Key:       pulumi.String("key2"),
//						Value:     pulumi.String("val2"),
//						ValueType: pulumi.String("string"),
//					},
//				},
//				TerraformVariableFiles: platform.WorkspaceTerraformVariableFileArray{
//					&platform.WorkspaceTerraformVariableFileArgs{
//						Repository:          pulumi.String("https://github.com/org/repo"),
//						RepositoryBranch:    pulumi.String("main"),
//						RepositoryPath:      pulumi.String("tf/gcp/basic"),
//						RepositoryConnector: pulumi.Any(test.Id),
//					},
//					&platform.WorkspaceTerraformVariableFileArgs{
//						Repository:          pulumi.String("https://github.com/org/repo"),
//						RepositoryCommit:    pulumi.String("v1.0.0"),
//						RepositoryPath:      pulumi.String("tf/aws/basic"),
//						RepositoryConnector: pulumi.Any(test.Id),
//					},
//					&platform.WorkspaceTerraformVariableFileArgs{
//						Repository:          pulumi.String("https://github.com/org/repo"),
//						RepositorySha:       pulumi.String("349d90bb9c90f4a3482981c259080de31609e6f6"),
//						RepositoryPath:      pulumi.String("tf/aws/basic"),
//						RepositoryConnector: pulumi.Any(test.Id),
//					},
//				},
//				VariableSets: pulumi.StringArray{
//					testHarnessPlatformInfraVariableSet.Id,
//				},
//				DefaultPipelines: pulumi.StringMap{
//					"destroy": pulumi.String("destroy_pipeline_id"),
//					"drift":   pulumi.String("drift_pipeline_id"),
//					"plan":    pulumi.String("plan_pipeline_id"),
//					"apply":   pulumi.String("apply_pipeline_id"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import harness:platform/workspace:Workspace example <org_id>/<project_id>/<workspace_id>
// ```
type Workspace struct {
	pulumi.CustomResourceState

	// Provider connector configured on the workspace
	Connectors WorkspaceConnectorArrayOutput `pulumi:"connectors"`
	// Cost estimation enabled determines if cost estimation operations are performed.
	CostEstimationEnabled pulumi.BoolOutput `pulumi:"costEstimationEnabled"`
	// Default pipelines associated with this workspace
	DefaultPipelines pulumi.StringMapOutput `pulumi:"defaultPipelines"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Environment variables configured on the workspace
	EnvironmentVariables WorkspaceEnvironmentVariableArrayOutput `pulumi:"environmentVariables"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Provider connector is the reference to the connector for the infrastructure provider
	ProviderConnector  pulumi.StringPtrOutput `pulumi:"providerConnector"`
	ProvisionerType    pulumi.StringOutput    `pulumi:"provisionerType"`
	ProvisionerVersion pulumi.StringOutput    `pulumi:"provisionerVersion"`
	// Repository is the name of the repository to fetch the code from.
	Repository pulumi.StringOutput `pulumi:"repository"`
	// Repository branch is the name of the branch to fetch the code from. This cannot be set if repository commit or sha is set.
	RepositoryBranch pulumi.StringPtrOutput `pulumi:"repositoryBranch"`
	// Repository commit is tag to fetch the code from. This cannot be set if repository branch or sha is set.
	RepositoryCommit pulumi.StringPtrOutput `pulumi:"repositoryCommit"`
	// Repository connector is the reference to the connector used to fetch the code.
	RepositoryConnector pulumi.StringOutput `pulumi:"repositoryConnector"`
	// Repository path is the path in which the code resides.
	RepositoryPath pulumi.StringOutput `pulumi:"repositoryPath"`
	// Repository commit is commit SHA to fetch the code from. This cannot be set if repository branch or commit is set.
	RepositorySha pulumi.StringPtrOutput `pulumi:"repositorySha"`
	// Tags to associate with the resource.
	Tags                   pulumi.StringArrayOutput                  `pulumi:"tags"`
	TerraformVariableFiles WorkspaceTerraformVariableFileArrayOutput `pulumi:"terraformVariableFiles"`
	TerraformVariables     WorkspaceTerraformVariableArrayOutput     `pulumi:"terraformVariables"`
	// Variable sets to use.
	VariableSets pulumi.StringArrayOutput `pulumi:"variableSets"`
}

// NewWorkspace registers a new resource with the given unique name, arguments, and options.
func NewWorkspace(ctx *pulumi.Context,
	name string, args *WorkspaceArgs, opts ...pulumi.ResourceOption) (*Workspace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CostEstimationEnabled == nil {
		return nil, errors.New("invalid value for required argument 'CostEstimationEnabled'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ProvisionerType == nil {
		return nil, errors.New("invalid value for required argument 'ProvisionerType'")
	}
	if args.ProvisionerVersion == nil {
		return nil, errors.New("invalid value for required argument 'ProvisionerVersion'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.RepositoryConnector == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryConnector'")
	}
	if args.RepositoryPath == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryPath'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Workspace
	err := ctx.RegisterResource("harness:platform/workspace:Workspace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspace gets an existing Workspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceState, opts ...pulumi.ResourceOption) (*Workspace, error) {
	var resource Workspace
	err := ctx.ReadResource("harness:platform/workspace:Workspace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workspace resources.
type workspaceState struct {
	// Provider connector configured on the workspace
	Connectors []WorkspaceConnector `pulumi:"connectors"`
	// Cost estimation enabled determines if cost estimation operations are performed.
	CostEstimationEnabled *bool `pulumi:"costEstimationEnabled"`
	// Default pipelines associated with this workspace
	DefaultPipelines map[string]string `pulumi:"defaultPipelines"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Environment variables configured on the workspace
	EnvironmentVariables []WorkspaceEnvironmentVariable `pulumi:"environmentVariables"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Provider connector is the reference to the connector for the infrastructure provider
	ProviderConnector  *string `pulumi:"providerConnector"`
	ProvisionerType    *string `pulumi:"provisionerType"`
	ProvisionerVersion *string `pulumi:"provisionerVersion"`
	// Repository is the name of the repository to fetch the code from.
	Repository *string `pulumi:"repository"`
	// Repository branch is the name of the branch to fetch the code from. This cannot be set if repository commit or sha is set.
	RepositoryBranch *string `pulumi:"repositoryBranch"`
	// Repository commit is tag to fetch the code from. This cannot be set if repository branch or sha is set.
	RepositoryCommit *string `pulumi:"repositoryCommit"`
	// Repository connector is the reference to the connector used to fetch the code.
	RepositoryConnector *string `pulumi:"repositoryConnector"`
	// Repository path is the path in which the code resides.
	RepositoryPath *string `pulumi:"repositoryPath"`
	// Repository commit is commit SHA to fetch the code from. This cannot be set if repository branch or commit is set.
	RepositorySha *string `pulumi:"repositorySha"`
	// Tags to associate with the resource.
	Tags                   []string                         `pulumi:"tags"`
	TerraformVariableFiles []WorkspaceTerraformVariableFile `pulumi:"terraformVariableFiles"`
	TerraformVariables     []WorkspaceTerraformVariable     `pulumi:"terraformVariables"`
	// Variable sets to use.
	VariableSets []string `pulumi:"variableSets"`
}

type WorkspaceState struct {
	// Provider connector configured on the workspace
	Connectors WorkspaceConnectorArrayInput
	// Cost estimation enabled determines if cost estimation operations are performed.
	CostEstimationEnabled pulumi.BoolPtrInput
	// Default pipelines associated with this workspace
	DefaultPipelines pulumi.StringMapInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Environment variables configured on the workspace
	EnvironmentVariables WorkspaceEnvironmentVariableArrayInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Provider connector is the reference to the connector for the infrastructure provider
	ProviderConnector  pulumi.StringPtrInput
	ProvisionerType    pulumi.StringPtrInput
	ProvisionerVersion pulumi.StringPtrInput
	// Repository is the name of the repository to fetch the code from.
	Repository pulumi.StringPtrInput
	// Repository branch is the name of the branch to fetch the code from. This cannot be set if repository commit or sha is set.
	RepositoryBranch pulumi.StringPtrInput
	// Repository commit is tag to fetch the code from. This cannot be set if repository branch or sha is set.
	RepositoryCommit pulumi.StringPtrInput
	// Repository connector is the reference to the connector used to fetch the code.
	RepositoryConnector pulumi.StringPtrInput
	// Repository path is the path in which the code resides.
	RepositoryPath pulumi.StringPtrInput
	// Repository commit is commit SHA to fetch the code from. This cannot be set if repository branch or commit is set.
	RepositorySha pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags                   pulumi.StringArrayInput
	TerraformVariableFiles WorkspaceTerraformVariableFileArrayInput
	TerraformVariables     WorkspaceTerraformVariableArrayInput
	// Variable sets to use.
	VariableSets pulumi.StringArrayInput
}

func (WorkspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceState)(nil)).Elem()
}

type workspaceArgs struct {
	// Provider connector configured on the workspace
	Connectors []WorkspaceConnector `pulumi:"connectors"`
	// Cost estimation enabled determines if cost estimation operations are performed.
	CostEstimationEnabled bool `pulumi:"costEstimationEnabled"`
	// Default pipelines associated with this workspace
	DefaultPipelines map[string]string `pulumi:"defaultPipelines"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Environment variables configured on the workspace
	EnvironmentVariables []WorkspaceEnvironmentVariable `pulumi:"environmentVariables"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId string `pulumi:"projectId"`
	// Provider connector is the reference to the connector for the infrastructure provider
	ProviderConnector  *string `pulumi:"providerConnector"`
	ProvisionerType    string  `pulumi:"provisionerType"`
	ProvisionerVersion string  `pulumi:"provisionerVersion"`
	// Repository is the name of the repository to fetch the code from.
	Repository string `pulumi:"repository"`
	// Repository branch is the name of the branch to fetch the code from. This cannot be set if repository commit or sha is set.
	RepositoryBranch *string `pulumi:"repositoryBranch"`
	// Repository commit is tag to fetch the code from. This cannot be set if repository branch or sha is set.
	RepositoryCommit *string `pulumi:"repositoryCommit"`
	// Repository connector is the reference to the connector used to fetch the code.
	RepositoryConnector string `pulumi:"repositoryConnector"`
	// Repository path is the path in which the code resides.
	RepositoryPath string `pulumi:"repositoryPath"`
	// Repository commit is commit SHA to fetch the code from. This cannot be set if repository branch or commit is set.
	RepositorySha *string `pulumi:"repositorySha"`
	// Tags to associate with the resource.
	Tags                   []string                         `pulumi:"tags"`
	TerraformVariableFiles []WorkspaceTerraformVariableFile `pulumi:"terraformVariableFiles"`
	TerraformVariables     []WorkspaceTerraformVariable     `pulumi:"terraformVariables"`
	// Variable sets to use.
	VariableSets []string `pulumi:"variableSets"`
}

// The set of arguments for constructing a Workspace resource.
type WorkspaceArgs struct {
	// Provider connector configured on the workspace
	Connectors WorkspaceConnectorArrayInput
	// Cost estimation enabled determines if cost estimation operations are performed.
	CostEstimationEnabled pulumi.BoolInput
	// Default pipelines associated with this workspace
	DefaultPipelines pulumi.StringMapInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Environment variables configured on the workspace
	EnvironmentVariables WorkspaceEnvironmentVariableArrayInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringInput
	// Unique identifier of the project.
	ProjectId pulumi.StringInput
	// Provider connector is the reference to the connector for the infrastructure provider
	ProviderConnector  pulumi.StringPtrInput
	ProvisionerType    pulumi.StringInput
	ProvisionerVersion pulumi.StringInput
	// Repository is the name of the repository to fetch the code from.
	Repository pulumi.StringInput
	// Repository branch is the name of the branch to fetch the code from. This cannot be set if repository commit or sha is set.
	RepositoryBranch pulumi.StringPtrInput
	// Repository commit is tag to fetch the code from. This cannot be set if repository branch or sha is set.
	RepositoryCommit pulumi.StringPtrInput
	// Repository connector is the reference to the connector used to fetch the code.
	RepositoryConnector pulumi.StringInput
	// Repository path is the path in which the code resides.
	RepositoryPath pulumi.StringInput
	// Repository commit is commit SHA to fetch the code from. This cannot be set if repository branch or commit is set.
	RepositorySha pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags                   pulumi.StringArrayInput
	TerraformVariableFiles WorkspaceTerraformVariableFileArrayInput
	TerraformVariables     WorkspaceTerraformVariableArrayInput
	// Variable sets to use.
	VariableSets pulumi.StringArrayInput
}

func (WorkspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceArgs)(nil)).Elem()
}

type WorkspaceInput interface {
	pulumi.Input

	ToWorkspaceOutput() WorkspaceOutput
	ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput
}

func (*Workspace) ElementType() reflect.Type {
	return reflect.TypeOf((**Workspace)(nil)).Elem()
}

func (i *Workspace) ToWorkspaceOutput() WorkspaceOutput {
	return i.ToWorkspaceOutputWithContext(context.Background())
}

func (i *Workspace) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceOutput)
}

// WorkspaceArrayInput is an input type that accepts WorkspaceArray and WorkspaceArrayOutput values.
// You can construct a concrete instance of `WorkspaceArrayInput` via:
//
//	WorkspaceArray{ WorkspaceArgs{...} }
type WorkspaceArrayInput interface {
	pulumi.Input

	ToWorkspaceArrayOutput() WorkspaceArrayOutput
	ToWorkspaceArrayOutputWithContext(context.Context) WorkspaceArrayOutput
}

type WorkspaceArray []WorkspaceInput

func (WorkspaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workspace)(nil)).Elem()
}

func (i WorkspaceArray) ToWorkspaceArrayOutput() WorkspaceArrayOutput {
	return i.ToWorkspaceArrayOutputWithContext(context.Background())
}

func (i WorkspaceArray) ToWorkspaceArrayOutputWithContext(ctx context.Context) WorkspaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceArrayOutput)
}

// WorkspaceMapInput is an input type that accepts WorkspaceMap and WorkspaceMapOutput values.
// You can construct a concrete instance of `WorkspaceMapInput` via:
//
//	WorkspaceMap{ "key": WorkspaceArgs{...} }
type WorkspaceMapInput interface {
	pulumi.Input

	ToWorkspaceMapOutput() WorkspaceMapOutput
	ToWorkspaceMapOutputWithContext(context.Context) WorkspaceMapOutput
}

type WorkspaceMap map[string]WorkspaceInput

func (WorkspaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workspace)(nil)).Elem()
}

func (i WorkspaceMap) ToWorkspaceMapOutput() WorkspaceMapOutput {
	return i.ToWorkspaceMapOutputWithContext(context.Background())
}

func (i WorkspaceMap) ToWorkspaceMapOutputWithContext(ctx context.Context) WorkspaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceMapOutput)
}

type WorkspaceOutput struct{ *pulumi.OutputState }

func (WorkspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workspace)(nil)).Elem()
}

func (o WorkspaceOutput) ToWorkspaceOutput() WorkspaceOutput {
	return o
}

func (o WorkspaceOutput) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return o
}

// Provider connector configured on the workspace
func (o WorkspaceOutput) Connectors() WorkspaceConnectorArrayOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceConnectorArrayOutput { return v.Connectors }).(WorkspaceConnectorArrayOutput)
}

// Cost estimation enabled determines if cost estimation operations are performed.
func (o WorkspaceOutput) CostEstimationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Workspace) pulumi.BoolOutput { return v.CostEstimationEnabled }).(pulumi.BoolOutput)
}

// Default pipelines associated with this workspace
func (o WorkspaceOutput) DefaultPipelines() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringMapOutput { return v.DefaultPipelines }).(pulumi.StringMapOutput)
}

// Description of the resource.
func (o WorkspaceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Environment variables configured on the workspace
func (o WorkspaceOutput) EnvironmentVariables() WorkspaceEnvironmentVariableArrayOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceEnvironmentVariableArrayOutput { return v.EnvironmentVariables }).(WorkspaceEnvironmentVariableArrayOutput)
}

// Unique identifier of the resource.
func (o WorkspaceOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o WorkspaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o WorkspaceOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Unique identifier of the project.
func (o WorkspaceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Provider connector is the reference to the connector for the infrastructure provider
func (o WorkspaceOutput) ProviderConnector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.ProviderConnector }).(pulumi.StringPtrOutput)
}

func (o WorkspaceOutput) ProvisionerType() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.ProvisionerType }).(pulumi.StringOutput)
}

func (o WorkspaceOutput) ProvisionerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.ProvisionerVersion }).(pulumi.StringOutput)
}

// Repository is the name of the repository to fetch the code from.
func (o WorkspaceOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

// Repository branch is the name of the branch to fetch the code from. This cannot be set if repository commit or sha is set.
func (o WorkspaceOutput) RepositoryBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.RepositoryBranch }).(pulumi.StringPtrOutput)
}

// Repository commit is tag to fetch the code from. This cannot be set if repository branch or sha is set.
func (o WorkspaceOutput) RepositoryCommit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.RepositoryCommit }).(pulumi.StringPtrOutput)
}

// Repository connector is the reference to the connector used to fetch the code.
func (o WorkspaceOutput) RepositoryConnector() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.RepositoryConnector }).(pulumi.StringOutput)
}

// Repository path is the path in which the code resides.
func (o WorkspaceOutput) RepositoryPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.RepositoryPath }).(pulumi.StringOutput)
}

// Repository commit is commit SHA to fetch the code from. This cannot be set if repository branch or commit is set.
func (o WorkspaceOutput) RepositorySha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.RepositorySha }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o WorkspaceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o WorkspaceOutput) TerraformVariableFiles() WorkspaceTerraformVariableFileArrayOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceTerraformVariableFileArrayOutput { return v.TerraformVariableFiles }).(WorkspaceTerraformVariableFileArrayOutput)
}

func (o WorkspaceOutput) TerraformVariables() WorkspaceTerraformVariableArrayOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceTerraformVariableArrayOutput { return v.TerraformVariables }).(WorkspaceTerraformVariableArrayOutput)
}

// Variable sets to use.
func (o WorkspaceOutput) VariableSets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringArrayOutput { return v.VariableSets }).(pulumi.StringArrayOutput)
}

type WorkspaceArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workspace)(nil)).Elem()
}

func (o WorkspaceArrayOutput) ToWorkspaceArrayOutput() WorkspaceArrayOutput {
	return o
}

func (o WorkspaceArrayOutput) ToWorkspaceArrayOutputWithContext(ctx context.Context) WorkspaceArrayOutput {
	return o
}

func (o WorkspaceArrayOutput) Index(i pulumi.IntInput) WorkspaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Workspace {
		return vs[0].([]*Workspace)[vs[1].(int)]
	}).(WorkspaceOutput)
}

type WorkspaceMapOutput struct{ *pulumi.OutputState }

func (WorkspaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workspace)(nil)).Elem()
}

func (o WorkspaceMapOutput) ToWorkspaceMapOutput() WorkspaceMapOutput {
	return o
}

func (o WorkspaceMapOutput) ToWorkspaceMapOutputWithContext(ctx context.Context) WorkspaceMapOutput {
	return o
}

func (o WorkspaceMapOutput) MapIndex(k pulumi.StringInput) WorkspaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Workspace {
		return vs[0].(map[string]*Workspace)[vs[1].(string)]
	}).(WorkspaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceInput)(nil)).Elem(), &Workspace{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceArrayInput)(nil)).Elem(), WorkspaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceMapInput)(nil)).Elem(), WorkspaceMap{})
	pulumi.RegisterOutputType(WorkspaceOutput{})
	pulumi.RegisterOutputType(WorkspaceArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceMapOutput{})
}
