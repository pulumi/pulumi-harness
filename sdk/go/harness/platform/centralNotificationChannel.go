// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing Harness Notification Channels.
type CentralNotificationChannel struct {
	pulumi.CustomResourceState

	// Account identifier associated with this notification channel.
	Account pulumi.StringOutput                     `pulumi:"account"`
	Channel CentralNotificationChannelChannelOutput `pulumi:"channel"`
	// Timestamp when the notification channel was created.
	Created    pulumi.IntOutput    `pulumi:"created"`
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Timestamp when the notification channel was last modified.
	LastModified            pulumi.IntOutput       `pulumi:"lastModified"`
	Name                    pulumi.StringOutput    `pulumi:"name"`
	NotificationChannelType pulumi.StringOutput    `pulumi:"notificationChannelType"`
	Org                     pulumi.StringPtrOutput `pulumi:"org"`
	Project                 pulumi.StringPtrOutput `pulumi:"project"`
	Status                  pulumi.StringPtrOutput `pulumi:"status"`
}

// NewCentralNotificationChannel registers a new resource with the given unique name, arguments, and options.
func NewCentralNotificationChannel(ctx *pulumi.Context,
	name string, args *CentralNotificationChannelArgs, opts ...pulumi.ResourceOption) (*CentralNotificationChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Channel == nil {
		return nil, errors.New("invalid value for required argument 'Channel'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.NotificationChannelType == nil {
		return nil, errors.New("invalid value for required argument 'NotificationChannelType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CentralNotificationChannel
	err := ctx.RegisterResource("harness:platform/centralNotificationChannel:CentralNotificationChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCentralNotificationChannel gets an existing CentralNotificationChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCentralNotificationChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CentralNotificationChannelState, opts ...pulumi.ResourceOption) (*CentralNotificationChannel, error) {
	var resource CentralNotificationChannel
	err := ctx.ReadResource("harness:platform/centralNotificationChannel:CentralNotificationChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CentralNotificationChannel resources.
type centralNotificationChannelState struct {
	// Account identifier associated with this notification channel.
	Account *string                            `pulumi:"account"`
	Channel *CentralNotificationChannelChannel `pulumi:"channel"`
	// Timestamp when the notification channel was created.
	Created    *int    `pulumi:"created"`
	Identifier *string `pulumi:"identifier"`
	// Timestamp when the notification channel was last modified.
	LastModified            *int    `pulumi:"lastModified"`
	Name                    *string `pulumi:"name"`
	NotificationChannelType *string `pulumi:"notificationChannelType"`
	Org                     *string `pulumi:"org"`
	Project                 *string `pulumi:"project"`
	Status                  *string `pulumi:"status"`
}

type CentralNotificationChannelState struct {
	// Account identifier associated with this notification channel.
	Account pulumi.StringPtrInput
	Channel CentralNotificationChannelChannelPtrInput
	// Timestamp when the notification channel was created.
	Created    pulumi.IntPtrInput
	Identifier pulumi.StringPtrInput
	// Timestamp when the notification channel was last modified.
	LastModified            pulumi.IntPtrInput
	Name                    pulumi.StringPtrInput
	NotificationChannelType pulumi.StringPtrInput
	Org                     pulumi.StringPtrInput
	Project                 pulumi.StringPtrInput
	Status                  pulumi.StringPtrInput
}

func (CentralNotificationChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*centralNotificationChannelState)(nil)).Elem()
}

type centralNotificationChannelArgs struct {
	Channel                 CentralNotificationChannelChannel `pulumi:"channel"`
	Identifier              string                            `pulumi:"identifier"`
	Name                    *string                           `pulumi:"name"`
	NotificationChannelType string                            `pulumi:"notificationChannelType"`
	Org                     *string                           `pulumi:"org"`
	Project                 *string                           `pulumi:"project"`
	Status                  *string                           `pulumi:"status"`
}

// The set of arguments for constructing a CentralNotificationChannel resource.
type CentralNotificationChannelArgs struct {
	Channel                 CentralNotificationChannelChannelInput
	Identifier              pulumi.StringInput
	Name                    pulumi.StringPtrInput
	NotificationChannelType pulumi.StringInput
	Org                     pulumi.StringPtrInput
	Project                 pulumi.StringPtrInput
	Status                  pulumi.StringPtrInput
}

func (CentralNotificationChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*centralNotificationChannelArgs)(nil)).Elem()
}

type CentralNotificationChannelInput interface {
	pulumi.Input

	ToCentralNotificationChannelOutput() CentralNotificationChannelOutput
	ToCentralNotificationChannelOutputWithContext(ctx context.Context) CentralNotificationChannelOutput
}

func (*CentralNotificationChannel) ElementType() reflect.Type {
	return reflect.TypeOf((**CentralNotificationChannel)(nil)).Elem()
}

func (i *CentralNotificationChannel) ToCentralNotificationChannelOutput() CentralNotificationChannelOutput {
	return i.ToCentralNotificationChannelOutputWithContext(context.Background())
}

func (i *CentralNotificationChannel) ToCentralNotificationChannelOutputWithContext(ctx context.Context) CentralNotificationChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CentralNotificationChannelOutput)
}

// CentralNotificationChannelArrayInput is an input type that accepts CentralNotificationChannelArray and CentralNotificationChannelArrayOutput values.
// You can construct a concrete instance of `CentralNotificationChannelArrayInput` via:
//
//	CentralNotificationChannelArray{ CentralNotificationChannelArgs{...} }
type CentralNotificationChannelArrayInput interface {
	pulumi.Input

	ToCentralNotificationChannelArrayOutput() CentralNotificationChannelArrayOutput
	ToCentralNotificationChannelArrayOutputWithContext(context.Context) CentralNotificationChannelArrayOutput
}

type CentralNotificationChannelArray []CentralNotificationChannelInput

func (CentralNotificationChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CentralNotificationChannel)(nil)).Elem()
}

func (i CentralNotificationChannelArray) ToCentralNotificationChannelArrayOutput() CentralNotificationChannelArrayOutput {
	return i.ToCentralNotificationChannelArrayOutputWithContext(context.Background())
}

func (i CentralNotificationChannelArray) ToCentralNotificationChannelArrayOutputWithContext(ctx context.Context) CentralNotificationChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CentralNotificationChannelArrayOutput)
}

// CentralNotificationChannelMapInput is an input type that accepts CentralNotificationChannelMap and CentralNotificationChannelMapOutput values.
// You can construct a concrete instance of `CentralNotificationChannelMapInput` via:
//
//	CentralNotificationChannelMap{ "key": CentralNotificationChannelArgs{...} }
type CentralNotificationChannelMapInput interface {
	pulumi.Input

	ToCentralNotificationChannelMapOutput() CentralNotificationChannelMapOutput
	ToCentralNotificationChannelMapOutputWithContext(context.Context) CentralNotificationChannelMapOutput
}

type CentralNotificationChannelMap map[string]CentralNotificationChannelInput

func (CentralNotificationChannelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CentralNotificationChannel)(nil)).Elem()
}

func (i CentralNotificationChannelMap) ToCentralNotificationChannelMapOutput() CentralNotificationChannelMapOutput {
	return i.ToCentralNotificationChannelMapOutputWithContext(context.Background())
}

func (i CentralNotificationChannelMap) ToCentralNotificationChannelMapOutputWithContext(ctx context.Context) CentralNotificationChannelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CentralNotificationChannelMapOutput)
}

type CentralNotificationChannelOutput struct{ *pulumi.OutputState }

func (CentralNotificationChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CentralNotificationChannel)(nil)).Elem()
}

func (o CentralNotificationChannelOutput) ToCentralNotificationChannelOutput() CentralNotificationChannelOutput {
	return o
}

func (o CentralNotificationChannelOutput) ToCentralNotificationChannelOutputWithContext(ctx context.Context) CentralNotificationChannelOutput {
	return o
}

// Account identifier associated with this notification channel.
func (o CentralNotificationChannelOutput) Account() pulumi.StringOutput {
	return o.ApplyT(func(v *CentralNotificationChannel) pulumi.StringOutput { return v.Account }).(pulumi.StringOutput)
}

func (o CentralNotificationChannelOutput) Channel() CentralNotificationChannelChannelOutput {
	return o.ApplyT(func(v *CentralNotificationChannel) CentralNotificationChannelChannelOutput { return v.Channel }).(CentralNotificationChannelChannelOutput)
}

// Timestamp when the notification channel was created.
func (o CentralNotificationChannelOutput) Created() pulumi.IntOutput {
	return o.ApplyT(func(v *CentralNotificationChannel) pulumi.IntOutput { return v.Created }).(pulumi.IntOutput)
}

func (o CentralNotificationChannelOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *CentralNotificationChannel) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Timestamp when the notification channel was last modified.
func (o CentralNotificationChannelOutput) LastModified() pulumi.IntOutput {
	return o.ApplyT(func(v *CentralNotificationChannel) pulumi.IntOutput { return v.LastModified }).(pulumi.IntOutput)
}

func (o CentralNotificationChannelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CentralNotificationChannel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CentralNotificationChannelOutput) NotificationChannelType() pulumi.StringOutput {
	return o.ApplyT(func(v *CentralNotificationChannel) pulumi.StringOutput { return v.NotificationChannelType }).(pulumi.StringOutput)
}

func (o CentralNotificationChannelOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CentralNotificationChannel) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

func (o CentralNotificationChannelOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CentralNotificationChannel) pulumi.StringPtrOutput { return v.Project }).(pulumi.StringPtrOutput)
}

func (o CentralNotificationChannelOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CentralNotificationChannel) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

type CentralNotificationChannelArrayOutput struct{ *pulumi.OutputState }

func (CentralNotificationChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CentralNotificationChannel)(nil)).Elem()
}

func (o CentralNotificationChannelArrayOutput) ToCentralNotificationChannelArrayOutput() CentralNotificationChannelArrayOutput {
	return o
}

func (o CentralNotificationChannelArrayOutput) ToCentralNotificationChannelArrayOutputWithContext(ctx context.Context) CentralNotificationChannelArrayOutput {
	return o
}

func (o CentralNotificationChannelArrayOutput) Index(i pulumi.IntInput) CentralNotificationChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CentralNotificationChannel {
		return vs[0].([]*CentralNotificationChannel)[vs[1].(int)]
	}).(CentralNotificationChannelOutput)
}

type CentralNotificationChannelMapOutput struct{ *pulumi.OutputState }

func (CentralNotificationChannelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CentralNotificationChannel)(nil)).Elem()
}

func (o CentralNotificationChannelMapOutput) ToCentralNotificationChannelMapOutput() CentralNotificationChannelMapOutput {
	return o
}

func (o CentralNotificationChannelMapOutput) ToCentralNotificationChannelMapOutputWithContext(ctx context.Context) CentralNotificationChannelMapOutput {
	return o
}

func (o CentralNotificationChannelMapOutput) MapIndex(k pulumi.StringInput) CentralNotificationChannelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CentralNotificationChannel {
		return vs[0].(map[string]*CentralNotificationChannel)[vs[1].(string)]
	}).(CentralNotificationChannelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CentralNotificationChannelInput)(nil)).Elem(), &CentralNotificationChannel{})
	pulumi.RegisterInputType(reflect.TypeOf((*CentralNotificationChannelArrayInput)(nil)).Elem(), CentralNotificationChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CentralNotificationChannelMapInput)(nil)).Elem(), CentralNotificationChannelMap{})
	pulumi.RegisterOutputType(CentralNotificationChannelOutput{})
	pulumi.RegisterOutputType(CentralNotificationChannelArrayOutput{})
	pulumi.RegisterOutputType(CentralNotificationChannelMapOutput{})
}
