// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupResourceGroup(ctx, &platform.LookupResourceGroupArgs{
//				Identifier: "identifier",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupResourceGroup(ctx *pulumi.Context, args *LookupResourceGroupArgs, opts ...pulumi.InvokeOption) (*LookupResourceGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupResourceGroupResult
	err := ctx.Invoke("harness:platform/getResourceGroup:getResourceGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getResourceGroup.
type LookupResourceGroupArgs struct {
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getResourceGroup.
type LookupResourceGroupResult struct {
	// Account Identifier of the account
	AccountId string `pulumi:"accountId"`
	// The scope levels at which this resource group can be used
	AllowedScopeLevels []string `pulumi:"allowedScopeLevels"`
	// Color of the environment.
	Color string `pulumi:"color"`
	// Description of the resource.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Included scopes
	IncludedScopes []GetResourceGroupIncludedScope `pulumi:"includedScopes"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Contains resource filter for a resource group
	ResourceFilters []GetResourceGroupResourceFilter `pulumi:"resourceFilters"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

func LookupResourceGroupOutput(ctx *pulumi.Context, args LookupResourceGroupOutputArgs, opts ...pulumi.InvokeOption) LookupResourceGroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupResourceGroupResultOutput, error) {
			args := v.(LookupResourceGroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getResourceGroup:getResourceGroup", args, LookupResourceGroupResultOutput{}, options).(LookupResourceGroupResultOutput), nil
		}).(LookupResourceGroupResultOutput)
}

// A collection of arguments for invoking getResourceGroup.
type LookupResourceGroupOutputArgs struct {
	// Unique identifier of the resource.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupResourceGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResourceGroupArgs)(nil)).Elem()
}

// A collection of values returned by getResourceGroup.
type LookupResourceGroupResultOutput struct{ *pulumi.OutputState }

func (LookupResourceGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResourceGroupResult)(nil)).Elem()
}

func (o LookupResourceGroupResultOutput) ToLookupResourceGroupResultOutput() LookupResourceGroupResultOutput {
	return o
}

func (o LookupResourceGroupResultOutput) ToLookupResourceGroupResultOutputWithContext(ctx context.Context) LookupResourceGroupResultOutput {
	return o
}

// Account Identifier of the account
func (o LookupResourceGroupResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResourceGroupResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// The scope levels at which this resource group can be used
func (o LookupResourceGroupResultOutput) AllowedScopeLevels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupResourceGroupResult) []string { return v.AllowedScopeLevels }).(pulumi.StringArrayOutput)
}

// Color of the environment.
func (o LookupResourceGroupResultOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResourceGroupResult) string { return v.Color }).(pulumi.StringOutput)
}

// Description of the resource.
func (o LookupResourceGroupResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResourceGroupResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupResourceGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResourceGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupResourceGroupResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResourceGroupResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Included scopes
func (o LookupResourceGroupResultOutput) IncludedScopes() GetResourceGroupIncludedScopeArrayOutput {
	return o.ApplyT(func(v LookupResourceGroupResult) []GetResourceGroupIncludedScope { return v.IncludedScopes }).(GetResourceGroupIncludedScopeArrayOutput)
}

// Name of the resource.
func (o LookupResourceGroupResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResourceGroupResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the organization.
func (o LookupResourceGroupResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResourceGroupResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o LookupResourceGroupResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResourceGroupResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Contains resource filter for a resource group
func (o LookupResourceGroupResultOutput) ResourceFilters() GetResourceGroupResourceFilterArrayOutput {
	return o.ApplyT(func(v LookupResourceGroupResult) []GetResourceGroupResourceFilter { return v.ResourceFilters }).(GetResourceGroupResourceFilterArrayOutput)
}

// Tags to associate with the resource.
func (o LookupResourceGroupResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupResourceGroupResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupResourceGroupResultOutput{})
}
