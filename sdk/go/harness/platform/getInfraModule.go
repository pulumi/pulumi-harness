// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving modules from the module registry.
func LookupInfraModule(ctx *pulumi.Context, args *LookupInfraModuleArgs, opts ...pulumi.InvokeOption) (*LookupInfraModuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInfraModuleResult
	err := ctx.Invoke("harness:platform/getInfraModule:getInfraModule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInfraModule.
type LookupInfraModuleArgs struct {
	// Timestamp when the module was created
	Created *int `pulumi:"created"`
	// Description of the module
	Description *string `pulumi:"description"`
	// Identifier of the module
	Id string `pulumi:"id"`
	// Name of the module
	Name string `pulumi:"name"`
	// For account connectors, the repository where the module is stored
	Repository *string `pulumi:"repository"`
	// Repository Branch in which the module should be accessed
	RepositoryBranch *string `pulumi:"repositoryBranch"`
	// Repository Commit in which the module should be accessed
	RepositoryCommit *string `pulumi:"repositoryCommit"`
	// Repository Connector is the reference to the connector for the repository
	RepositoryConnector *string `pulumi:"repositoryConnector"`
	// Repository Path is the path in which the module resides
	RepositoryPath *string `pulumi:"repositoryPath"`
	// URL where the module is stored
	RepositoryUrl *string `pulumi:"repositoryUrl"`
	// Timestamp when the module was last synced
	Synced *int `pulumi:"synced"`
	// Provider of the module
	System string `pulumi:"system"`
	// Tags associated with the module
	Tags *string `pulumi:"tags"`
}

// A collection of values returned by getInfraModule.
type LookupInfraModuleResult struct {
	// Timestamp when the module was created
	Created int `pulumi:"created"`
	// Description of the module
	Description string `pulumi:"description"`
	// Identifier of the module
	Id string `pulumi:"id"`
	// Name of the module
	Name string `pulumi:"name"`
	// For account connectors, the repository where the module is stored
	Repository string `pulumi:"repository"`
	// Repository Branch in which the module should be accessed
	RepositoryBranch string `pulumi:"repositoryBranch"`
	// Repository Commit in which the module should be accessed
	RepositoryCommit string `pulumi:"repositoryCommit"`
	// Repository Connector is the reference to the connector for the repository
	RepositoryConnector string `pulumi:"repositoryConnector"`
	// Repository Path is the path in which the module resides
	RepositoryPath string `pulumi:"repositoryPath"`
	// URL where the module is stored
	RepositoryUrl string `pulumi:"repositoryUrl"`
	// Timestamp when the module was last synced
	Synced int `pulumi:"synced"`
	// Provider of the module
	System string `pulumi:"system"`
	// Tags associated with the module
	Tags string `pulumi:"tags"`
}

func LookupInfraModuleOutput(ctx *pulumi.Context, args LookupInfraModuleOutputArgs, opts ...pulumi.InvokeOption) LookupInfraModuleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupInfraModuleResultOutput, error) {
			args := v.(LookupInfraModuleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getInfraModule:getInfraModule", args, LookupInfraModuleResultOutput{}, options).(LookupInfraModuleResultOutput), nil
		}).(LookupInfraModuleResultOutput)
}

// A collection of arguments for invoking getInfraModule.
type LookupInfraModuleOutputArgs struct {
	// Timestamp when the module was created
	Created pulumi.IntPtrInput `pulumi:"created"`
	// Description of the module
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Identifier of the module
	Id pulumi.StringInput `pulumi:"id"`
	// Name of the module
	Name pulumi.StringInput `pulumi:"name"`
	// For account connectors, the repository where the module is stored
	Repository pulumi.StringPtrInput `pulumi:"repository"`
	// Repository Branch in which the module should be accessed
	RepositoryBranch pulumi.StringPtrInput `pulumi:"repositoryBranch"`
	// Repository Commit in which the module should be accessed
	RepositoryCommit pulumi.StringPtrInput `pulumi:"repositoryCommit"`
	// Repository Connector is the reference to the connector for the repository
	RepositoryConnector pulumi.StringPtrInput `pulumi:"repositoryConnector"`
	// Repository Path is the path in which the module resides
	RepositoryPath pulumi.StringPtrInput `pulumi:"repositoryPath"`
	// URL where the module is stored
	RepositoryUrl pulumi.StringPtrInput `pulumi:"repositoryUrl"`
	// Timestamp when the module was last synced
	Synced pulumi.IntPtrInput `pulumi:"synced"`
	// Provider of the module
	System pulumi.StringInput `pulumi:"system"`
	// Tags associated with the module
	Tags pulumi.StringPtrInput `pulumi:"tags"`
}

func (LookupInfraModuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInfraModuleArgs)(nil)).Elem()
}

// A collection of values returned by getInfraModule.
type LookupInfraModuleResultOutput struct{ *pulumi.OutputState }

func (LookupInfraModuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInfraModuleResult)(nil)).Elem()
}

func (o LookupInfraModuleResultOutput) ToLookupInfraModuleResultOutput() LookupInfraModuleResultOutput {
	return o
}

func (o LookupInfraModuleResultOutput) ToLookupInfraModuleResultOutputWithContext(ctx context.Context) LookupInfraModuleResultOutput {
	return o
}

// Timestamp when the module was created
func (o LookupInfraModuleResultOutput) Created() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInfraModuleResult) int { return v.Created }).(pulumi.IntOutput)
}

// Description of the module
func (o LookupInfraModuleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleResult) string { return v.Description }).(pulumi.StringOutput)
}

// Identifier of the module
func (o LookupInfraModuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the module
func (o LookupInfraModuleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleResult) string { return v.Name }).(pulumi.StringOutput)
}

// For account connectors, the repository where the module is stored
func (o LookupInfraModuleResultOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleResult) string { return v.Repository }).(pulumi.StringOutput)
}

// Repository Branch in which the module should be accessed
func (o LookupInfraModuleResultOutput) RepositoryBranch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleResult) string { return v.RepositoryBranch }).(pulumi.StringOutput)
}

// Repository Commit in which the module should be accessed
func (o LookupInfraModuleResultOutput) RepositoryCommit() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleResult) string { return v.RepositoryCommit }).(pulumi.StringOutput)
}

// Repository Connector is the reference to the connector for the repository
func (o LookupInfraModuleResultOutput) RepositoryConnector() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleResult) string { return v.RepositoryConnector }).(pulumi.StringOutput)
}

// Repository Path is the path in which the module resides
func (o LookupInfraModuleResultOutput) RepositoryPath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleResult) string { return v.RepositoryPath }).(pulumi.StringOutput)
}

// URL where the module is stored
func (o LookupInfraModuleResultOutput) RepositoryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleResult) string { return v.RepositoryUrl }).(pulumi.StringOutput)
}

// Timestamp when the module was last synced
func (o LookupInfraModuleResultOutput) Synced() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInfraModuleResult) int { return v.Synced }).(pulumi.IntOutput)
}

// Provider of the module
func (o LookupInfraModuleResultOutput) System() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleResult) string { return v.System }).(pulumi.StringOutput)
}

// Tags associated with the module
func (o LookupInfraModuleResultOutput) Tags() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInfraModuleResult) string { return v.Tags }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInfraModuleResultOutput{})
}
