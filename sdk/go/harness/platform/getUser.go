// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving the user based on the API key.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupUser(ctx, &platform.LookupUserArgs{
//				OrgId:     pulumi.StringRef("org_id"),
//				ProjectId: pulumi.StringRef("project_id"),
//				Email:     "john.doe@harness.io",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("harness:platform/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	// The email of the user.
	Email string `pulumi:"email"`
	// Organization identifier of the user.
	OrgId *string `pulumi:"orgId"`
	// Project identifier of the user.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	// Whether or not the user account is disabled.
	Disabled bool `pulumi:"disabled"`
	// The email of the user.
	Email string `pulumi:"email"`
	// Whether or not the user account is externally managed.
	ExternallyManaged bool `pulumi:"externallyManaged"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the user.
	Identifier string `pulumi:"identifier"`
	// Whether or not the user account is locked.
	Locked bool `pulumi:"locked"`
	// Name of the user.
	Name string `pulumi:"name"`
	// Organization identifier of the user.
	OrgId *string `pulumi:"orgId"`
	// Project identifier of the user.
	ProjectId *string `pulumi:"projectId"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupUserResultOutput, error) {
			args := v.(LookupUserArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getUser:getUser", args, LookupUserResultOutput{}, options).(LookupUserResultOutput), nil
		}).(LookupUserResultOutput)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	// The email of the user.
	Email pulumi.StringInput `pulumi:"email"`
	// Organization identifier of the user.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Project identifier of the user.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserArgs)(nil)).Elem()
}

// A collection of values returned by getUser.
type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToLookupUserResultOutput() LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToLookupUserResultOutputWithContext(ctx context.Context) LookupUserResultOutput {
	return o
}

// Whether or not the user account is disabled.
func (o LookupUserResultOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// The email of the user.
func (o LookupUserResultOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Email }).(pulumi.StringOutput)
}

// Whether or not the user account is externally managed.
func (o LookupUserResultOutput) ExternallyManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.ExternallyManaged }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the user.
func (o LookupUserResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Whether or not the user account is locked.
func (o LookupUserResultOutput) Locked() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.Locked }).(pulumi.BoolOutput)
}

// Name of the user.
func (o LookupUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Name }).(pulumi.StringOutput)
}

// Organization identifier of the user.
func (o LookupUserResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Project identifier of the user.
func (o LookupUserResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserResultOutput{})
}
