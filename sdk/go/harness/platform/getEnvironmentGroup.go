// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness environment group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupEnvironmentGroup(ctx, &platform.LookupEnvironmentGroupArgs{
//				Identifier: "identifier",
//				OrgId:      pulumi.StringRef("org_id"),
//				ProjectId:  pulumi.StringRef("project_id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupEnvironmentGroup(ctx *pulumi.Context, args *LookupEnvironmentGroupArgs, opts ...pulumi.InvokeOption) (*LookupEnvironmentGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEnvironmentGroupResult
	err := ctx.Invoke("harness:platform/getEnvironmentGroup:getEnvironmentGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEnvironmentGroup.
type LookupEnvironmentGroupArgs struct {
	// Color of the environment group.
	Color *string `pulumi:"color"`
	// identifier of the environment group.
	Identifier string `pulumi:"identifier"`
	// org_id of the environment group.
	OrgId *string `pulumi:"orgId"`
	// project_id of the environment group.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getEnvironmentGroup.
type LookupEnvironmentGroupResult struct {
	// Color of the environment group.
	Color string `pulumi:"color"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// identifier of the environment group.
	Identifier string `pulumi:"identifier"`
	// org_id of the environment group.
	OrgId *string `pulumi:"orgId"`
	// project_id of the environment group.
	ProjectId *string `pulumi:"projectId"`
	// Input Set YAML
	Yaml string `pulumi:"yaml"`
}

func LookupEnvironmentGroupOutput(ctx *pulumi.Context, args LookupEnvironmentGroupOutputArgs, opts ...pulumi.InvokeOption) LookupEnvironmentGroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupEnvironmentGroupResultOutput, error) {
			args := v.(LookupEnvironmentGroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getEnvironmentGroup:getEnvironmentGroup", args, LookupEnvironmentGroupResultOutput{}, options).(LookupEnvironmentGroupResultOutput), nil
		}).(LookupEnvironmentGroupResultOutput)
}

// A collection of arguments for invoking getEnvironmentGroup.
type LookupEnvironmentGroupOutputArgs struct {
	// Color of the environment group.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// identifier of the environment group.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// org_id of the environment group.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// project_id of the environment group.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupEnvironmentGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnvironmentGroupArgs)(nil)).Elem()
}

// A collection of values returned by getEnvironmentGroup.
type LookupEnvironmentGroupResultOutput struct{ *pulumi.OutputState }

func (LookupEnvironmentGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnvironmentGroupResult)(nil)).Elem()
}

func (o LookupEnvironmentGroupResultOutput) ToLookupEnvironmentGroupResultOutput() LookupEnvironmentGroupResultOutput {
	return o
}

func (o LookupEnvironmentGroupResultOutput) ToLookupEnvironmentGroupResultOutputWithContext(ctx context.Context) LookupEnvironmentGroupResultOutput {
	return o
}

// Color of the environment group.
func (o LookupEnvironmentGroupResultOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnvironmentGroupResult) string { return v.Color }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupEnvironmentGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnvironmentGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// identifier of the environment group.
func (o LookupEnvironmentGroupResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnvironmentGroupResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// org_id of the environment group.
func (o LookupEnvironmentGroupResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnvironmentGroupResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// project_id of the environment group.
func (o LookupEnvironmentGroupResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnvironmentGroupResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Input Set YAML
func (o LookupEnvironmentGroupResultOutput) Yaml() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnvironmentGroupResult) string { return v.Yaml }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEnvironmentGroupResultOutput{})
}
