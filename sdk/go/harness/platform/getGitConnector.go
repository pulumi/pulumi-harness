// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Datasource for looking up a Git connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupGitConnector(ctx, &platform.LookupGitConnectorArgs{
//				Identifier: "identifier",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupGitConnector(ctx *pulumi.Context, args *LookupGitConnectorArgs, opts ...pulumi.InvokeOption) (*LookupGitConnectorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGitConnectorResult
	err := ctx.Invoke("harness:platform/getGitConnector:getGitConnector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGitConnector.
type LookupGitConnectorArgs struct {
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getGitConnector.
type LookupGitConnectorResult struct {
	// Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.
	ConnectionType string `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials []GetGitConnectorCredential `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// URL of the git repository or account.
	Url string `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo string `pulumi:"validationRepo"`
}

func LookupGitConnectorOutput(ctx *pulumi.Context, args LookupGitConnectorOutputArgs, opts ...pulumi.InvokeOption) LookupGitConnectorResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupGitConnectorResultOutput, error) {
			args := v.(LookupGitConnectorArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:platform/getGitConnector:getGitConnector", args, LookupGitConnectorResultOutput{}, options).(LookupGitConnectorResultOutput), nil
		}).(LookupGitConnectorResultOutput)
}

// A collection of arguments for invoking getGitConnector.
type LookupGitConnectorOutputArgs struct {
	// Unique identifier of the resource.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupGitConnectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitConnectorArgs)(nil)).Elem()
}

// A collection of values returned by getGitConnector.
type LookupGitConnectorResultOutput struct{ *pulumi.OutputState }

func (LookupGitConnectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitConnectorResult)(nil)).Elem()
}

func (o LookupGitConnectorResultOutput) ToLookupGitConnectorResultOutput() LookupGitConnectorResultOutput {
	return o
}

func (o LookupGitConnectorResultOutput) ToLookupGitConnectorResultOutputWithContext(ctx context.Context) LookupGitConnectorResultOutput {
	return o
}

// Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.
func (o LookupGitConnectorResultOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) string { return v.ConnectionType }).(pulumi.StringOutput)
}

// Credentials to use for the connection.
func (o LookupGitConnectorResultOutput) Credentials() GetGitConnectorCredentialArrayOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) []GetGitConnectorCredential { return v.Credentials }).(GetGitConnectorCredentialArrayOutput)
}

// Tags to filter delegates for connection.
func (o LookupGitConnectorResultOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) []string { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o LookupGitConnectorResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupGitConnectorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupGitConnectorResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o LookupGitConnectorResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the organization.
func (o LookupGitConnectorResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o LookupGitConnectorResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o LookupGitConnectorResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// URL of the git repository or account.
func (o LookupGitConnectorResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) string { return v.Url }).(pulumi.StringOutput)
}

// Repository to test the connection with. This is only used when `connectionType` is `Account`.
func (o LookupGitConnectorResultOutput) ValidationRepo() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitConnectorResult) string { return v.ValidationRepo }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGitConnectorResultOutput{})
}
