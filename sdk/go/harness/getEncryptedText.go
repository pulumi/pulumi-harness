// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harness

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness application
func LookupEncryptedText(ctx *pulumi.Context, args *LookupEncryptedTextArgs, opts ...pulumi.InvokeOption) (*LookupEncryptedTextResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEncryptedTextResult
	err := ctx.Invoke("harness:index/getEncryptedText:getEncryptedText", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEncryptedText.
type LookupEncryptedTextArgs struct {
	// Unique identifier of the encrypted secret
	Id *string `pulumi:"id"`
	// The name of the encrypted secret
	Name *string `pulumi:"name"`
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes []GetEncryptedTextUsageScope `pulumi:"usageScopes"`
}

// A collection of values returned by getEncryptedText.
type LookupEncryptedTextResult struct {
	// Unique identifier of the encrypted secret
	Id *string `pulumi:"id"`
	// The name of the encrypted secret
	Name *string `pulumi:"name"`
	// The id of the associated secret manager
	SecretManagerId string `pulumi:"secretManagerId"`
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes []GetEncryptedTextUsageScope `pulumi:"usageScopes"`
}

func LookupEncryptedTextOutput(ctx *pulumi.Context, args LookupEncryptedTextOutputArgs, opts ...pulumi.InvokeOption) LookupEncryptedTextResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupEncryptedTextResultOutput, error) {
			args := v.(LookupEncryptedTextArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:index/getEncryptedText:getEncryptedText", args, LookupEncryptedTextResultOutput{}, options).(LookupEncryptedTextResultOutput), nil
		}).(LookupEncryptedTextResultOutput)
}

// A collection of arguments for invoking getEncryptedText.
type LookupEncryptedTextOutputArgs struct {
	// Unique identifier of the encrypted secret
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the encrypted secret
	Name pulumi.StringPtrInput `pulumi:"name"`
	// This block is used for scoping the resource to a specific set of applications or environments.
	UsageScopes GetEncryptedTextUsageScopeArrayInput `pulumi:"usageScopes"`
}

func (LookupEncryptedTextOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEncryptedTextArgs)(nil)).Elem()
}

// A collection of values returned by getEncryptedText.
type LookupEncryptedTextResultOutput struct{ *pulumi.OutputState }

func (LookupEncryptedTextResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEncryptedTextResult)(nil)).Elem()
}

func (o LookupEncryptedTextResultOutput) ToLookupEncryptedTextResultOutput() LookupEncryptedTextResultOutput {
	return o
}

func (o LookupEncryptedTextResultOutput) ToLookupEncryptedTextResultOutputWithContext(ctx context.Context) LookupEncryptedTextResultOutput {
	return o
}

// Unique identifier of the encrypted secret
func (o LookupEncryptedTextResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEncryptedTextResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the encrypted secret
func (o LookupEncryptedTextResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEncryptedTextResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The id of the associated secret manager
func (o LookupEncryptedTextResultOutput) SecretManagerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEncryptedTextResult) string { return v.SecretManagerId }).(pulumi.StringOutput)
}

// This block is used for scoping the resource to a specific set of applications or environments.
func (o LookupEncryptedTextResultOutput) UsageScopes() GetEncryptedTextUsageScopeArrayOutput {
	return o.ApplyT(func(v LookupEncryptedTextResult) []GetEncryptedTextUsageScope { return v.UsageScopes }).(GetEncryptedTextUsageScopeArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEncryptedTextResultOutput{})
}
