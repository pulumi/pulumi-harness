// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harness

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type EncryptedTextUsageScope struct {
	// Id of the application to scope to. If empty then this scope applies to all applications.
	ApplicationId *string `pulumi:"applicationId"`
	// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	EnvironmentFilterType *string `pulumi:"environmentFilterType"`
	// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
	EnvironmentId *string `pulumi:"environmentId"`
}

// EncryptedTextUsageScopeInput is an input type that accepts EncryptedTextUsageScopeArgs and EncryptedTextUsageScopeOutput values.
// You can construct a concrete instance of `EncryptedTextUsageScopeInput` via:
//
//	EncryptedTextUsageScopeArgs{...}
type EncryptedTextUsageScopeInput interface {
	pulumi.Input

	ToEncryptedTextUsageScopeOutput() EncryptedTextUsageScopeOutput
	ToEncryptedTextUsageScopeOutputWithContext(context.Context) EncryptedTextUsageScopeOutput
}

type EncryptedTextUsageScopeArgs struct {
	// Id of the application to scope to. If empty then this scope applies to all applications.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
	// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	EnvironmentFilterType pulumi.StringPtrInput `pulumi:"environmentFilterType"`
	// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
}

func (EncryptedTextUsageScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptedTextUsageScope)(nil)).Elem()
}

func (i EncryptedTextUsageScopeArgs) ToEncryptedTextUsageScopeOutput() EncryptedTextUsageScopeOutput {
	return i.ToEncryptedTextUsageScopeOutputWithContext(context.Background())
}

func (i EncryptedTextUsageScopeArgs) ToEncryptedTextUsageScopeOutputWithContext(ctx context.Context) EncryptedTextUsageScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptedTextUsageScopeOutput)
}

// EncryptedTextUsageScopeArrayInput is an input type that accepts EncryptedTextUsageScopeArray and EncryptedTextUsageScopeArrayOutput values.
// You can construct a concrete instance of `EncryptedTextUsageScopeArrayInput` via:
//
//	EncryptedTextUsageScopeArray{ EncryptedTextUsageScopeArgs{...} }
type EncryptedTextUsageScopeArrayInput interface {
	pulumi.Input

	ToEncryptedTextUsageScopeArrayOutput() EncryptedTextUsageScopeArrayOutput
	ToEncryptedTextUsageScopeArrayOutputWithContext(context.Context) EncryptedTextUsageScopeArrayOutput
}

type EncryptedTextUsageScopeArray []EncryptedTextUsageScopeInput

func (EncryptedTextUsageScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EncryptedTextUsageScope)(nil)).Elem()
}

func (i EncryptedTextUsageScopeArray) ToEncryptedTextUsageScopeArrayOutput() EncryptedTextUsageScopeArrayOutput {
	return i.ToEncryptedTextUsageScopeArrayOutputWithContext(context.Background())
}

func (i EncryptedTextUsageScopeArray) ToEncryptedTextUsageScopeArrayOutputWithContext(ctx context.Context) EncryptedTextUsageScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptedTextUsageScopeArrayOutput)
}

type EncryptedTextUsageScopeOutput struct{ *pulumi.OutputState }

func (EncryptedTextUsageScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptedTextUsageScope)(nil)).Elem()
}

func (o EncryptedTextUsageScopeOutput) ToEncryptedTextUsageScopeOutput() EncryptedTextUsageScopeOutput {
	return o
}

func (o EncryptedTextUsageScopeOutput) ToEncryptedTextUsageScopeOutputWithContext(ctx context.Context) EncryptedTextUsageScopeOutput {
	return o
}

// Id of the application to scope to. If empty then this scope applies to all applications.
func (o EncryptedTextUsageScopeOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptedTextUsageScope) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
func (o EncryptedTextUsageScopeOutput) EnvironmentFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptedTextUsageScope) *string { return v.EnvironmentFilterType }).(pulumi.StringPtrOutput)
}

// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
func (o EncryptedTextUsageScopeOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptedTextUsageScope) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

type EncryptedTextUsageScopeArrayOutput struct{ *pulumi.OutputState }

func (EncryptedTextUsageScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EncryptedTextUsageScope)(nil)).Elem()
}

func (o EncryptedTextUsageScopeArrayOutput) ToEncryptedTextUsageScopeArrayOutput() EncryptedTextUsageScopeArrayOutput {
	return o
}

func (o EncryptedTextUsageScopeArrayOutput) ToEncryptedTextUsageScopeArrayOutputWithContext(ctx context.Context) EncryptedTextUsageScopeArrayOutput {
	return o
}

func (o EncryptedTextUsageScopeArrayOutput) Index(i pulumi.IntInput) EncryptedTextUsageScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EncryptedTextUsageScope {
		return vs[0].([]EncryptedTextUsageScope)[vs[1].(int)]
	}).(EncryptedTextUsageScopeOutput)
}

type EnvironmentVariableOverride struct {
	// The name of the variable
	Name string `pulumi:"name"`
	// The name of the service
	ServiceName *string `pulumi:"serviceName"`
	// The type of the service variable. Valid values are `TEXT` and `ENCRYPTED_TEXT`
	Type string `pulumi:"type"`
	// The value of the service variable
	Value string `pulumi:"value"`
}

// EnvironmentVariableOverrideInput is an input type that accepts EnvironmentVariableOverrideArgs and EnvironmentVariableOverrideOutput values.
// You can construct a concrete instance of `EnvironmentVariableOverrideInput` via:
//
//	EnvironmentVariableOverrideArgs{...}
type EnvironmentVariableOverrideInput interface {
	pulumi.Input

	ToEnvironmentVariableOverrideOutput() EnvironmentVariableOverrideOutput
	ToEnvironmentVariableOverrideOutputWithContext(context.Context) EnvironmentVariableOverrideOutput
}

type EnvironmentVariableOverrideArgs struct {
	// The name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the service
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
	// The type of the service variable. Valid values are `TEXT` and `ENCRYPTED_TEXT`
	Type pulumi.StringInput `pulumi:"type"`
	// The value of the service variable
	Value pulumi.StringInput `pulumi:"value"`
}

func (EnvironmentVariableOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableOverride)(nil)).Elem()
}

func (i EnvironmentVariableOverrideArgs) ToEnvironmentVariableOverrideOutput() EnvironmentVariableOverrideOutput {
	return i.ToEnvironmentVariableOverrideOutputWithContext(context.Background())
}

func (i EnvironmentVariableOverrideArgs) ToEnvironmentVariableOverrideOutputWithContext(ctx context.Context) EnvironmentVariableOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableOverrideOutput)
}

// EnvironmentVariableOverrideArrayInput is an input type that accepts EnvironmentVariableOverrideArray and EnvironmentVariableOverrideArrayOutput values.
// You can construct a concrete instance of `EnvironmentVariableOverrideArrayInput` via:
//
//	EnvironmentVariableOverrideArray{ EnvironmentVariableOverrideArgs{...} }
type EnvironmentVariableOverrideArrayInput interface {
	pulumi.Input

	ToEnvironmentVariableOverrideArrayOutput() EnvironmentVariableOverrideArrayOutput
	ToEnvironmentVariableOverrideArrayOutputWithContext(context.Context) EnvironmentVariableOverrideArrayOutput
}

type EnvironmentVariableOverrideArray []EnvironmentVariableOverrideInput

func (EnvironmentVariableOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariableOverride)(nil)).Elem()
}

func (i EnvironmentVariableOverrideArray) ToEnvironmentVariableOverrideArrayOutput() EnvironmentVariableOverrideArrayOutput {
	return i.ToEnvironmentVariableOverrideArrayOutputWithContext(context.Background())
}

func (i EnvironmentVariableOverrideArray) ToEnvironmentVariableOverrideArrayOutputWithContext(ctx context.Context) EnvironmentVariableOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableOverrideArrayOutput)
}

type EnvironmentVariableOverrideOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableOverride)(nil)).Elem()
}

func (o EnvironmentVariableOverrideOutput) ToEnvironmentVariableOverrideOutput() EnvironmentVariableOverrideOutput {
	return o
}

func (o EnvironmentVariableOverrideOutput) ToEnvironmentVariableOverrideOutputWithContext(ctx context.Context) EnvironmentVariableOverrideOutput {
	return o
}

// The name of the variable
func (o EnvironmentVariableOverrideOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableOverride) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the service
func (o EnvironmentVariableOverrideOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariableOverride) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// The type of the service variable. Valid values are `TEXT` and `ENCRYPTED_TEXT`
func (o EnvironmentVariableOverrideOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableOverride) string { return v.Type }).(pulumi.StringOutput)
}

// The value of the service variable
func (o EnvironmentVariableOverrideOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableOverride) string { return v.Value }).(pulumi.StringOutput)
}

type EnvironmentVariableOverrideArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariableOverride)(nil)).Elem()
}

func (o EnvironmentVariableOverrideArrayOutput) ToEnvironmentVariableOverrideArrayOutput() EnvironmentVariableOverrideArrayOutput {
	return o
}

func (o EnvironmentVariableOverrideArrayOutput) ToEnvironmentVariableOverrideArrayOutputWithContext(ctx context.Context) EnvironmentVariableOverrideArrayOutput {
	return o
}

func (o EnvironmentVariableOverrideArrayOutput) Index(i pulumi.IntInput) EnvironmentVariableOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentVariableOverride {
		return vs[0].([]EnvironmentVariableOverride)[vs[1].(int)]
	}).(EnvironmentVariableOverrideOutput)
}

type GitConnectorCommitDetails struct {
	// The email id of the author
	AuthorEmailId *string `pulumi:"authorEmailId"`
	// The name of the author
	AuthorName *string `pulumi:"authorName"`
	// Commit message
	Message *string `pulumi:"message"`
}

// GitConnectorCommitDetailsInput is an input type that accepts GitConnectorCommitDetailsArgs and GitConnectorCommitDetailsOutput values.
// You can construct a concrete instance of `GitConnectorCommitDetailsInput` via:
//
//	GitConnectorCommitDetailsArgs{...}
type GitConnectorCommitDetailsInput interface {
	pulumi.Input

	ToGitConnectorCommitDetailsOutput() GitConnectorCommitDetailsOutput
	ToGitConnectorCommitDetailsOutputWithContext(context.Context) GitConnectorCommitDetailsOutput
}

type GitConnectorCommitDetailsArgs struct {
	// The email id of the author
	AuthorEmailId pulumi.StringPtrInput `pulumi:"authorEmailId"`
	// The name of the author
	AuthorName pulumi.StringPtrInput `pulumi:"authorName"`
	// Commit message
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (GitConnectorCommitDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitConnectorCommitDetails)(nil)).Elem()
}

func (i GitConnectorCommitDetailsArgs) ToGitConnectorCommitDetailsOutput() GitConnectorCommitDetailsOutput {
	return i.ToGitConnectorCommitDetailsOutputWithContext(context.Background())
}

func (i GitConnectorCommitDetailsArgs) ToGitConnectorCommitDetailsOutputWithContext(ctx context.Context) GitConnectorCommitDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitConnectorCommitDetailsOutput)
}

func (i GitConnectorCommitDetailsArgs) ToGitConnectorCommitDetailsPtrOutput() GitConnectorCommitDetailsPtrOutput {
	return i.ToGitConnectorCommitDetailsPtrOutputWithContext(context.Background())
}

func (i GitConnectorCommitDetailsArgs) ToGitConnectorCommitDetailsPtrOutputWithContext(ctx context.Context) GitConnectorCommitDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitConnectorCommitDetailsOutput).ToGitConnectorCommitDetailsPtrOutputWithContext(ctx)
}

// GitConnectorCommitDetailsPtrInput is an input type that accepts GitConnectorCommitDetailsArgs, GitConnectorCommitDetailsPtr and GitConnectorCommitDetailsPtrOutput values.
// You can construct a concrete instance of `GitConnectorCommitDetailsPtrInput` via:
//
//	        GitConnectorCommitDetailsArgs{...}
//
//	or:
//
//	        nil
type GitConnectorCommitDetailsPtrInput interface {
	pulumi.Input

	ToGitConnectorCommitDetailsPtrOutput() GitConnectorCommitDetailsPtrOutput
	ToGitConnectorCommitDetailsPtrOutputWithContext(context.Context) GitConnectorCommitDetailsPtrOutput
}

type gitConnectorCommitDetailsPtrType GitConnectorCommitDetailsArgs

func GitConnectorCommitDetailsPtr(v *GitConnectorCommitDetailsArgs) GitConnectorCommitDetailsPtrInput {
	return (*gitConnectorCommitDetailsPtrType)(v)
}

func (*gitConnectorCommitDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitConnectorCommitDetails)(nil)).Elem()
}

func (i *gitConnectorCommitDetailsPtrType) ToGitConnectorCommitDetailsPtrOutput() GitConnectorCommitDetailsPtrOutput {
	return i.ToGitConnectorCommitDetailsPtrOutputWithContext(context.Background())
}

func (i *gitConnectorCommitDetailsPtrType) ToGitConnectorCommitDetailsPtrOutputWithContext(ctx context.Context) GitConnectorCommitDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitConnectorCommitDetailsPtrOutput)
}

type GitConnectorCommitDetailsOutput struct{ *pulumi.OutputState }

func (GitConnectorCommitDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitConnectorCommitDetails)(nil)).Elem()
}

func (o GitConnectorCommitDetailsOutput) ToGitConnectorCommitDetailsOutput() GitConnectorCommitDetailsOutput {
	return o
}

func (o GitConnectorCommitDetailsOutput) ToGitConnectorCommitDetailsOutputWithContext(ctx context.Context) GitConnectorCommitDetailsOutput {
	return o
}

func (o GitConnectorCommitDetailsOutput) ToGitConnectorCommitDetailsPtrOutput() GitConnectorCommitDetailsPtrOutput {
	return o.ToGitConnectorCommitDetailsPtrOutputWithContext(context.Background())
}

func (o GitConnectorCommitDetailsOutput) ToGitConnectorCommitDetailsPtrOutputWithContext(ctx context.Context) GitConnectorCommitDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitConnectorCommitDetails) *GitConnectorCommitDetails {
		return &v
	}).(GitConnectorCommitDetailsPtrOutput)
}

// The email id of the author
func (o GitConnectorCommitDetailsOutput) AuthorEmailId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitConnectorCommitDetails) *string { return v.AuthorEmailId }).(pulumi.StringPtrOutput)
}

// The name of the author
func (o GitConnectorCommitDetailsOutput) AuthorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitConnectorCommitDetails) *string { return v.AuthorName }).(pulumi.StringPtrOutput)
}

// Commit message
func (o GitConnectorCommitDetailsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitConnectorCommitDetails) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type GitConnectorCommitDetailsPtrOutput struct{ *pulumi.OutputState }

func (GitConnectorCommitDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitConnectorCommitDetails)(nil)).Elem()
}

func (o GitConnectorCommitDetailsPtrOutput) ToGitConnectorCommitDetailsPtrOutput() GitConnectorCommitDetailsPtrOutput {
	return o
}

func (o GitConnectorCommitDetailsPtrOutput) ToGitConnectorCommitDetailsPtrOutputWithContext(ctx context.Context) GitConnectorCommitDetailsPtrOutput {
	return o
}

func (o GitConnectorCommitDetailsPtrOutput) Elem() GitConnectorCommitDetailsOutput {
	return o.ApplyT(func(v *GitConnectorCommitDetails) GitConnectorCommitDetails {
		if v != nil {
			return *v
		}
		var ret GitConnectorCommitDetails
		return ret
	}).(GitConnectorCommitDetailsOutput)
}

// The email id of the author
func (o GitConnectorCommitDetailsPtrOutput) AuthorEmailId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitConnectorCommitDetails) *string {
		if v == nil {
			return nil
		}
		return v.AuthorEmailId
	}).(pulumi.StringPtrOutput)
}

// The name of the author
func (o GitConnectorCommitDetailsPtrOutput) AuthorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitConnectorCommitDetails) *string {
		if v == nil {
			return nil
		}
		return v.AuthorName
	}).(pulumi.StringPtrOutput)
}

// Commit message
func (o GitConnectorCommitDetailsPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitConnectorCommitDetails) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

type GitConnectorUsageScope struct {
	// Id of the application to scope to. If empty then this scope applies to all applications.
	ApplicationId *string `pulumi:"applicationId"`
	// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	EnvironmentFilterType *string `pulumi:"environmentFilterType"`
	// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
	EnvironmentId *string `pulumi:"environmentId"`
}

// GitConnectorUsageScopeInput is an input type that accepts GitConnectorUsageScopeArgs and GitConnectorUsageScopeOutput values.
// You can construct a concrete instance of `GitConnectorUsageScopeInput` via:
//
//	GitConnectorUsageScopeArgs{...}
type GitConnectorUsageScopeInput interface {
	pulumi.Input

	ToGitConnectorUsageScopeOutput() GitConnectorUsageScopeOutput
	ToGitConnectorUsageScopeOutputWithContext(context.Context) GitConnectorUsageScopeOutput
}

type GitConnectorUsageScopeArgs struct {
	// Id of the application to scope to. If empty then this scope applies to all applications.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
	// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	EnvironmentFilterType pulumi.StringPtrInput `pulumi:"environmentFilterType"`
	// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
}

func (GitConnectorUsageScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitConnectorUsageScope)(nil)).Elem()
}

func (i GitConnectorUsageScopeArgs) ToGitConnectorUsageScopeOutput() GitConnectorUsageScopeOutput {
	return i.ToGitConnectorUsageScopeOutputWithContext(context.Background())
}

func (i GitConnectorUsageScopeArgs) ToGitConnectorUsageScopeOutputWithContext(ctx context.Context) GitConnectorUsageScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitConnectorUsageScopeOutput)
}

// GitConnectorUsageScopeArrayInput is an input type that accepts GitConnectorUsageScopeArray and GitConnectorUsageScopeArrayOutput values.
// You can construct a concrete instance of `GitConnectorUsageScopeArrayInput` via:
//
//	GitConnectorUsageScopeArray{ GitConnectorUsageScopeArgs{...} }
type GitConnectorUsageScopeArrayInput interface {
	pulumi.Input

	ToGitConnectorUsageScopeArrayOutput() GitConnectorUsageScopeArrayOutput
	ToGitConnectorUsageScopeArrayOutputWithContext(context.Context) GitConnectorUsageScopeArrayOutput
}

type GitConnectorUsageScopeArray []GitConnectorUsageScopeInput

func (GitConnectorUsageScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitConnectorUsageScope)(nil)).Elem()
}

func (i GitConnectorUsageScopeArray) ToGitConnectorUsageScopeArrayOutput() GitConnectorUsageScopeArrayOutput {
	return i.ToGitConnectorUsageScopeArrayOutputWithContext(context.Background())
}

func (i GitConnectorUsageScopeArray) ToGitConnectorUsageScopeArrayOutputWithContext(ctx context.Context) GitConnectorUsageScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitConnectorUsageScopeArrayOutput)
}

type GitConnectorUsageScopeOutput struct{ *pulumi.OutputState }

func (GitConnectorUsageScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitConnectorUsageScope)(nil)).Elem()
}

func (o GitConnectorUsageScopeOutput) ToGitConnectorUsageScopeOutput() GitConnectorUsageScopeOutput {
	return o
}

func (o GitConnectorUsageScopeOutput) ToGitConnectorUsageScopeOutputWithContext(ctx context.Context) GitConnectorUsageScopeOutput {
	return o
}

// Id of the application to scope to. If empty then this scope applies to all applications.
func (o GitConnectorUsageScopeOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitConnectorUsageScope) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
func (o GitConnectorUsageScopeOutput) EnvironmentFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitConnectorUsageScope) *string { return v.EnvironmentFilterType }).(pulumi.StringPtrOutput)
}

// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
func (o GitConnectorUsageScopeOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitConnectorUsageScope) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

type GitConnectorUsageScopeArrayOutput struct{ *pulumi.OutputState }

func (GitConnectorUsageScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitConnectorUsageScope)(nil)).Elem()
}

func (o GitConnectorUsageScopeArrayOutput) ToGitConnectorUsageScopeArrayOutput() GitConnectorUsageScopeArrayOutput {
	return o
}

func (o GitConnectorUsageScopeArrayOutput) ToGitConnectorUsageScopeArrayOutputWithContext(ctx context.Context) GitConnectorUsageScopeArrayOutput {
	return o
}

func (o GitConnectorUsageScopeArrayOutput) Index(i pulumi.IntInput) GitConnectorUsageScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitConnectorUsageScope {
		return vs[0].([]GitConnectorUsageScope)[vs[1].(int)]
	}).(GitConnectorUsageScopeOutput)
}

type InfrastructureDefinitionAwsAmi struct {
	// The ami deployment type to use. Valid options are AWS_ASG, SPOTINST
	AmiDeploymentType string `pulumi:"amiDeploymentType"`
	// Flag to indicate whether the autoscaling group identifies the workload.
	AsgIdentifiesWorkload *bool `pulumi:"asgIdentifiesWorkload"`
	// The name of the autoscaling group.
	AutoscalingGroupName *string `pulumi:"autoscalingGroupName"`
	// The classic load balancers to use.
	ClassicLoadbalancers []string `pulumi:"classicLoadbalancers"`
	// The name of the cloud provider to connect with.
	CloudProviderName string `pulumi:"cloudProviderName"`
	// The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}
	HostnameConvention *string `pulumi:"hostnameConvention"`
	// The region to deploy to.
	Region string `pulumi:"region"`
	// The name of the SpotInst cloud provider to connect with.
	SpotinstCloudProviderName *string `pulumi:"spotinstCloudProviderName"`
	// The SpotInst configuration to use.
	SpotinstConfigJson *string `pulumi:"spotinstConfigJson"`
	// The staging classic load balancers to use.
	StageClassicLoadbalancers []string `pulumi:"stageClassicLoadbalancers"`
	// The staging classic load balancers to use.
	StageTargetGroupArns []string `pulumi:"stageTargetGroupArns"`
	// The ARN's of the target groups.
	TargetGroupArns []string `pulumi:"targetGroupArns"`
	// Flag to enable traffic shifting.
	UseTrafficShift *bool `pulumi:"useTrafficShift"`
}

// InfrastructureDefinitionAwsAmiInput is an input type that accepts InfrastructureDefinitionAwsAmiArgs and InfrastructureDefinitionAwsAmiOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionAwsAmiInput` via:
//
//	InfrastructureDefinitionAwsAmiArgs{...}
type InfrastructureDefinitionAwsAmiInput interface {
	pulumi.Input

	ToInfrastructureDefinitionAwsAmiOutput() InfrastructureDefinitionAwsAmiOutput
	ToInfrastructureDefinitionAwsAmiOutputWithContext(context.Context) InfrastructureDefinitionAwsAmiOutput
}

type InfrastructureDefinitionAwsAmiArgs struct {
	// The ami deployment type to use. Valid options are AWS_ASG, SPOTINST
	AmiDeploymentType pulumi.StringInput `pulumi:"amiDeploymentType"`
	// Flag to indicate whether the autoscaling group identifies the workload.
	AsgIdentifiesWorkload pulumi.BoolPtrInput `pulumi:"asgIdentifiesWorkload"`
	// The name of the autoscaling group.
	AutoscalingGroupName pulumi.StringPtrInput `pulumi:"autoscalingGroupName"`
	// The classic load balancers to use.
	ClassicLoadbalancers pulumi.StringArrayInput `pulumi:"classicLoadbalancers"`
	// The name of the cloud provider to connect with.
	CloudProviderName pulumi.StringInput `pulumi:"cloudProviderName"`
	// The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}
	HostnameConvention pulumi.StringPtrInput `pulumi:"hostnameConvention"`
	// The region to deploy to.
	Region pulumi.StringInput `pulumi:"region"`
	// The name of the SpotInst cloud provider to connect with.
	SpotinstCloudProviderName pulumi.StringPtrInput `pulumi:"spotinstCloudProviderName"`
	// The SpotInst configuration to use.
	SpotinstConfigJson pulumi.StringPtrInput `pulumi:"spotinstConfigJson"`
	// The staging classic load balancers to use.
	StageClassicLoadbalancers pulumi.StringArrayInput `pulumi:"stageClassicLoadbalancers"`
	// The staging classic load balancers to use.
	StageTargetGroupArns pulumi.StringArrayInput `pulumi:"stageTargetGroupArns"`
	// The ARN's of the target groups.
	TargetGroupArns pulumi.StringArrayInput `pulumi:"targetGroupArns"`
	// Flag to enable traffic shifting.
	UseTrafficShift pulumi.BoolPtrInput `pulumi:"useTrafficShift"`
}

func (InfrastructureDefinitionAwsAmiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionAwsAmi)(nil)).Elem()
}

func (i InfrastructureDefinitionAwsAmiArgs) ToInfrastructureDefinitionAwsAmiOutput() InfrastructureDefinitionAwsAmiOutput {
	return i.ToInfrastructureDefinitionAwsAmiOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionAwsAmiArgs) ToInfrastructureDefinitionAwsAmiOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsAmiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAwsAmiOutput)
}

func (i InfrastructureDefinitionAwsAmiArgs) ToInfrastructureDefinitionAwsAmiPtrOutput() InfrastructureDefinitionAwsAmiPtrOutput {
	return i.ToInfrastructureDefinitionAwsAmiPtrOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionAwsAmiArgs) ToInfrastructureDefinitionAwsAmiPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsAmiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAwsAmiOutput).ToInfrastructureDefinitionAwsAmiPtrOutputWithContext(ctx)
}

// InfrastructureDefinitionAwsAmiPtrInput is an input type that accepts InfrastructureDefinitionAwsAmiArgs, InfrastructureDefinitionAwsAmiPtr and InfrastructureDefinitionAwsAmiPtrOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionAwsAmiPtrInput` via:
//
//	        InfrastructureDefinitionAwsAmiArgs{...}
//
//	or:
//
//	        nil
type InfrastructureDefinitionAwsAmiPtrInput interface {
	pulumi.Input

	ToInfrastructureDefinitionAwsAmiPtrOutput() InfrastructureDefinitionAwsAmiPtrOutput
	ToInfrastructureDefinitionAwsAmiPtrOutputWithContext(context.Context) InfrastructureDefinitionAwsAmiPtrOutput
}

type infrastructureDefinitionAwsAmiPtrType InfrastructureDefinitionAwsAmiArgs

func InfrastructureDefinitionAwsAmiPtr(v *InfrastructureDefinitionAwsAmiArgs) InfrastructureDefinitionAwsAmiPtrInput {
	return (*infrastructureDefinitionAwsAmiPtrType)(v)
}

func (*infrastructureDefinitionAwsAmiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionAwsAmi)(nil)).Elem()
}

func (i *infrastructureDefinitionAwsAmiPtrType) ToInfrastructureDefinitionAwsAmiPtrOutput() InfrastructureDefinitionAwsAmiPtrOutput {
	return i.ToInfrastructureDefinitionAwsAmiPtrOutputWithContext(context.Background())
}

func (i *infrastructureDefinitionAwsAmiPtrType) ToInfrastructureDefinitionAwsAmiPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsAmiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAwsAmiPtrOutput)
}

type InfrastructureDefinitionAwsAmiOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionAwsAmiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionAwsAmi)(nil)).Elem()
}

func (o InfrastructureDefinitionAwsAmiOutput) ToInfrastructureDefinitionAwsAmiOutput() InfrastructureDefinitionAwsAmiOutput {
	return o
}

func (o InfrastructureDefinitionAwsAmiOutput) ToInfrastructureDefinitionAwsAmiOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsAmiOutput {
	return o
}

func (o InfrastructureDefinitionAwsAmiOutput) ToInfrastructureDefinitionAwsAmiPtrOutput() InfrastructureDefinitionAwsAmiPtrOutput {
	return o.ToInfrastructureDefinitionAwsAmiPtrOutputWithContext(context.Background())
}

func (o InfrastructureDefinitionAwsAmiOutput) ToInfrastructureDefinitionAwsAmiPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsAmiPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InfrastructureDefinitionAwsAmi) *InfrastructureDefinitionAwsAmi {
		return &v
	}).(InfrastructureDefinitionAwsAmiPtrOutput)
}

// The ami deployment type to use. Valid options are AWS_ASG, SPOTINST
func (o InfrastructureDefinitionAwsAmiOutput) AmiDeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsAmi) string { return v.AmiDeploymentType }).(pulumi.StringOutput)
}

// Flag to indicate whether the autoscaling group identifies the workload.
func (o InfrastructureDefinitionAwsAmiOutput) AsgIdentifiesWorkload() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsAmi) *bool { return v.AsgIdentifiesWorkload }).(pulumi.BoolPtrOutput)
}

// The name of the autoscaling group.
func (o InfrastructureDefinitionAwsAmiOutput) AutoscalingGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsAmi) *string { return v.AutoscalingGroupName }).(pulumi.StringPtrOutput)
}

// The classic load balancers to use.
func (o InfrastructureDefinitionAwsAmiOutput) ClassicLoadbalancers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsAmi) []string { return v.ClassicLoadbalancers }).(pulumi.StringArrayOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionAwsAmiOutput) CloudProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsAmi) string { return v.CloudProviderName }).(pulumi.StringOutput)
}

// The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}
func (o InfrastructureDefinitionAwsAmiOutput) HostnameConvention() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsAmi) *string { return v.HostnameConvention }).(pulumi.StringPtrOutput)
}

// The region to deploy to.
func (o InfrastructureDefinitionAwsAmiOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsAmi) string { return v.Region }).(pulumi.StringOutput)
}

// The name of the SpotInst cloud provider to connect with.
func (o InfrastructureDefinitionAwsAmiOutput) SpotinstCloudProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsAmi) *string { return v.SpotinstCloudProviderName }).(pulumi.StringPtrOutput)
}

// The SpotInst configuration to use.
func (o InfrastructureDefinitionAwsAmiOutput) SpotinstConfigJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsAmi) *string { return v.SpotinstConfigJson }).(pulumi.StringPtrOutput)
}

// The staging classic load balancers to use.
func (o InfrastructureDefinitionAwsAmiOutput) StageClassicLoadbalancers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsAmi) []string { return v.StageClassicLoadbalancers }).(pulumi.StringArrayOutput)
}

// The staging classic load balancers to use.
func (o InfrastructureDefinitionAwsAmiOutput) StageTargetGroupArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsAmi) []string { return v.StageTargetGroupArns }).(pulumi.StringArrayOutput)
}

// The ARN's of the target groups.
func (o InfrastructureDefinitionAwsAmiOutput) TargetGroupArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsAmi) []string { return v.TargetGroupArns }).(pulumi.StringArrayOutput)
}

// Flag to enable traffic shifting.
func (o InfrastructureDefinitionAwsAmiOutput) UseTrafficShift() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsAmi) *bool { return v.UseTrafficShift }).(pulumi.BoolPtrOutput)
}

type InfrastructureDefinitionAwsAmiPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionAwsAmiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionAwsAmi)(nil)).Elem()
}

func (o InfrastructureDefinitionAwsAmiPtrOutput) ToInfrastructureDefinitionAwsAmiPtrOutput() InfrastructureDefinitionAwsAmiPtrOutput {
	return o
}

func (o InfrastructureDefinitionAwsAmiPtrOutput) ToInfrastructureDefinitionAwsAmiPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsAmiPtrOutput {
	return o
}

func (o InfrastructureDefinitionAwsAmiPtrOutput) Elem() InfrastructureDefinitionAwsAmiOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsAmi) InfrastructureDefinitionAwsAmi {
		if v != nil {
			return *v
		}
		var ret InfrastructureDefinitionAwsAmi
		return ret
	}).(InfrastructureDefinitionAwsAmiOutput)
}

// The ami deployment type to use. Valid options are AWS_ASG, SPOTINST
func (o InfrastructureDefinitionAwsAmiPtrOutput) AmiDeploymentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsAmi) *string {
		if v == nil {
			return nil
		}
		return &v.AmiDeploymentType
	}).(pulumi.StringPtrOutput)
}

// Flag to indicate whether the autoscaling group identifies the workload.
func (o InfrastructureDefinitionAwsAmiPtrOutput) AsgIdentifiesWorkload() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsAmi) *bool {
		if v == nil {
			return nil
		}
		return v.AsgIdentifiesWorkload
	}).(pulumi.BoolPtrOutput)
}

// The name of the autoscaling group.
func (o InfrastructureDefinitionAwsAmiPtrOutput) AutoscalingGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsAmi) *string {
		if v == nil {
			return nil
		}
		return v.AutoscalingGroupName
	}).(pulumi.StringPtrOutput)
}

// The classic load balancers to use.
func (o InfrastructureDefinitionAwsAmiPtrOutput) ClassicLoadbalancers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsAmi) []string {
		if v == nil {
			return nil
		}
		return v.ClassicLoadbalancers
	}).(pulumi.StringArrayOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionAwsAmiPtrOutput) CloudProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsAmi) *string {
		if v == nil {
			return nil
		}
		return &v.CloudProviderName
	}).(pulumi.StringPtrOutput)
}

// The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}
func (o InfrastructureDefinitionAwsAmiPtrOutput) HostnameConvention() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsAmi) *string {
		if v == nil {
			return nil
		}
		return v.HostnameConvention
	}).(pulumi.StringPtrOutput)
}

// The region to deploy to.
func (o InfrastructureDefinitionAwsAmiPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsAmi) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// The name of the SpotInst cloud provider to connect with.
func (o InfrastructureDefinitionAwsAmiPtrOutput) SpotinstCloudProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsAmi) *string {
		if v == nil {
			return nil
		}
		return v.SpotinstCloudProviderName
	}).(pulumi.StringPtrOutput)
}

// The SpotInst configuration to use.
func (o InfrastructureDefinitionAwsAmiPtrOutput) SpotinstConfigJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsAmi) *string {
		if v == nil {
			return nil
		}
		return v.SpotinstConfigJson
	}).(pulumi.StringPtrOutput)
}

// The staging classic load balancers to use.
func (o InfrastructureDefinitionAwsAmiPtrOutput) StageClassicLoadbalancers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsAmi) []string {
		if v == nil {
			return nil
		}
		return v.StageClassicLoadbalancers
	}).(pulumi.StringArrayOutput)
}

// The staging classic load balancers to use.
func (o InfrastructureDefinitionAwsAmiPtrOutput) StageTargetGroupArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsAmi) []string {
		if v == nil {
			return nil
		}
		return v.StageTargetGroupArns
	}).(pulumi.StringArrayOutput)
}

// The ARN's of the target groups.
func (o InfrastructureDefinitionAwsAmiPtrOutput) TargetGroupArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsAmi) []string {
		if v == nil {
			return nil
		}
		return v.TargetGroupArns
	}).(pulumi.StringArrayOutput)
}

// Flag to enable traffic shifting.
func (o InfrastructureDefinitionAwsAmiPtrOutput) UseTrafficShift() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsAmi) *bool {
		if v == nil {
			return nil
		}
		return v.UseTrafficShift
	}).(pulumi.BoolPtrOutput)
}

type InfrastructureDefinitionAwsEcs struct {
	// Flag to assign a public IP address.
	AssignPublicIp *bool `pulumi:"assignPublicIp"`
	// The name of the cloud provider to connect with.
	CloudProviderName string `pulumi:"cloudProviderName"`
	// The name of the ECS cluster to use.
	ClusterName string `pulumi:"clusterName"`
	// The ARN of the role to use for execution.
	ExecutionRole *string `pulumi:"executionRole"`
	// The type of launch configuration to use. Valid options are FARGATE
	LaunchType string `pulumi:"launchType"`
	// The region to deploy to.
	Region string `pulumi:"region"`
	// The security group ids to apply to the ecs service.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The subnet ids to apply to the ecs service.
	SubnetIds []string `pulumi:"subnetIds"`
	// The VPC ids to use when selecting the instances.
	VpcId *string `pulumi:"vpcId"`
}

// InfrastructureDefinitionAwsEcsInput is an input type that accepts InfrastructureDefinitionAwsEcsArgs and InfrastructureDefinitionAwsEcsOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionAwsEcsInput` via:
//
//	InfrastructureDefinitionAwsEcsArgs{...}
type InfrastructureDefinitionAwsEcsInput interface {
	pulumi.Input

	ToInfrastructureDefinitionAwsEcsOutput() InfrastructureDefinitionAwsEcsOutput
	ToInfrastructureDefinitionAwsEcsOutputWithContext(context.Context) InfrastructureDefinitionAwsEcsOutput
}

type InfrastructureDefinitionAwsEcsArgs struct {
	// Flag to assign a public IP address.
	AssignPublicIp pulumi.BoolPtrInput `pulumi:"assignPublicIp"`
	// The name of the cloud provider to connect with.
	CloudProviderName pulumi.StringInput `pulumi:"cloudProviderName"`
	// The name of the ECS cluster to use.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// The ARN of the role to use for execution.
	ExecutionRole pulumi.StringPtrInput `pulumi:"executionRole"`
	// The type of launch configuration to use. Valid options are FARGATE
	LaunchType pulumi.StringInput `pulumi:"launchType"`
	// The region to deploy to.
	Region pulumi.StringInput `pulumi:"region"`
	// The security group ids to apply to the ecs service.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The subnet ids to apply to the ecs service.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// The VPC ids to use when selecting the instances.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (InfrastructureDefinitionAwsEcsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionAwsEcs)(nil)).Elem()
}

func (i InfrastructureDefinitionAwsEcsArgs) ToInfrastructureDefinitionAwsEcsOutput() InfrastructureDefinitionAwsEcsOutput {
	return i.ToInfrastructureDefinitionAwsEcsOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionAwsEcsArgs) ToInfrastructureDefinitionAwsEcsOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsEcsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAwsEcsOutput)
}

func (i InfrastructureDefinitionAwsEcsArgs) ToInfrastructureDefinitionAwsEcsPtrOutput() InfrastructureDefinitionAwsEcsPtrOutput {
	return i.ToInfrastructureDefinitionAwsEcsPtrOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionAwsEcsArgs) ToInfrastructureDefinitionAwsEcsPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsEcsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAwsEcsOutput).ToInfrastructureDefinitionAwsEcsPtrOutputWithContext(ctx)
}

// InfrastructureDefinitionAwsEcsPtrInput is an input type that accepts InfrastructureDefinitionAwsEcsArgs, InfrastructureDefinitionAwsEcsPtr and InfrastructureDefinitionAwsEcsPtrOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionAwsEcsPtrInput` via:
//
//	        InfrastructureDefinitionAwsEcsArgs{...}
//
//	or:
//
//	        nil
type InfrastructureDefinitionAwsEcsPtrInput interface {
	pulumi.Input

	ToInfrastructureDefinitionAwsEcsPtrOutput() InfrastructureDefinitionAwsEcsPtrOutput
	ToInfrastructureDefinitionAwsEcsPtrOutputWithContext(context.Context) InfrastructureDefinitionAwsEcsPtrOutput
}

type infrastructureDefinitionAwsEcsPtrType InfrastructureDefinitionAwsEcsArgs

func InfrastructureDefinitionAwsEcsPtr(v *InfrastructureDefinitionAwsEcsArgs) InfrastructureDefinitionAwsEcsPtrInput {
	return (*infrastructureDefinitionAwsEcsPtrType)(v)
}

func (*infrastructureDefinitionAwsEcsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionAwsEcs)(nil)).Elem()
}

func (i *infrastructureDefinitionAwsEcsPtrType) ToInfrastructureDefinitionAwsEcsPtrOutput() InfrastructureDefinitionAwsEcsPtrOutput {
	return i.ToInfrastructureDefinitionAwsEcsPtrOutputWithContext(context.Background())
}

func (i *infrastructureDefinitionAwsEcsPtrType) ToInfrastructureDefinitionAwsEcsPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsEcsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAwsEcsPtrOutput)
}

type InfrastructureDefinitionAwsEcsOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionAwsEcsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionAwsEcs)(nil)).Elem()
}

func (o InfrastructureDefinitionAwsEcsOutput) ToInfrastructureDefinitionAwsEcsOutput() InfrastructureDefinitionAwsEcsOutput {
	return o
}

func (o InfrastructureDefinitionAwsEcsOutput) ToInfrastructureDefinitionAwsEcsOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsEcsOutput {
	return o
}

func (o InfrastructureDefinitionAwsEcsOutput) ToInfrastructureDefinitionAwsEcsPtrOutput() InfrastructureDefinitionAwsEcsPtrOutput {
	return o.ToInfrastructureDefinitionAwsEcsPtrOutputWithContext(context.Background())
}

func (o InfrastructureDefinitionAwsEcsOutput) ToInfrastructureDefinitionAwsEcsPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsEcsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InfrastructureDefinitionAwsEcs) *InfrastructureDefinitionAwsEcs {
		return &v
	}).(InfrastructureDefinitionAwsEcsPtrOutput)
}

// Flag to assign a public IP address.
func (o InfrastructureDefinitionAwsEcsOutput) AssignPublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsEcs) *bool { return v.AssignPublicIp }).(pulumi.BoolPtrOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionAwsEcsOutput) CloudProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsEcs) string { return v.CloudProviderName }).(pulumi.StringOutput)
}

// The name of the ECS cluster to use.
func (o InfrastructureDefinitionAwsEcsOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsEcs) string { return v.ClusterName }).(pulumi.StringOutput)
}

// The ARN of the role to use for execution.
func (o InfrastructureDefinitionAwsEcsOutput) ExecutionRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsEcs) *string { return v.ExecutionRole }).(pulumi.StringPtrOutput)
}

// The type of launch configuration to use. Valid options are FARGATE
func (o InfrastructureDefinitionAwsEcsOutput) LaunchType() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsEcs) string { return v.LaunchType }).(pulumi.StringOutput)
}

// The region to deploy to.
func (o InfrastructureDefinitionAwsEcsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsEcs) string { return v.Region }).(pulumi.StringOutput)
}

// The security group ids to apply to the ecs service.
func (o InfrastructureDefinitionAwsEcsOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsEcs) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The subnet ids to apply to the ecs service.
func (o InfrastructureDefinitionAwsEcsOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsEcs) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The VPC ids to use when selecting the instances.
func (o InfrastructureDefinitionAwsEcsOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsEcs) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

type InfrastructureDefinitionAwsEcsPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionAwsEcsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionAwsEcs)(nil)).Elem()
}

func (o InfrastructureDefinitionAwsEcsPtrOutput) ToInfrastructureDefinitionAwsEcsPtrOutput() InfrastructureDefinitionAwsEcsPtrOutput {
	return o
}

func (o InfrastructureDefinitionAwsEcsPtrOutput) ToInfrastructureDefinitionAwsEcsPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsEcsPtrOutput {
	return o
}

func (o InfrastructureDefinitionAwsEcsPtrOutput) Elem() InfrastructureDefinitionAwsEcsOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsEcs) InfrastructureDefinitionAwsEcs {
		if v != nil {
			return *v
		}
		var ret InfrastructureDefinitionAwsEcs
		return ret
	}).(InfrastructureDefinitionAwsEcsOutput)
}

// Flag to assign a public IP address.
func (o InfrastructureDefinitionAwsEcsPtrOutput) AssignPublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsEcs) *bool {
		if v == nil {
			return nil
		}
		return v.AssignPublicIp
	}).(pulumi.BoolPtrOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionAwsEcsPtrOutput) CloudProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsEcs) *string {
		if v == nil {
			return nil
		}
		return &v.CloudProviderName
	}).(pulumi.StringPtrOutput)
}

// The name of the ECS cluster to use.
func (o InfrastructureDefinitionAwsEcsPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsEcs) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// The ARN of the role to use for execution.
func (o InfrastructureDefinitionAwsEcsPtrOutput) ExecutionRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsEcs) *string {
		if v == nil {
			return nil
		}
		return v.ExecutionRole
	}).(pulumi.StringPtrOutput)
}

// The type of launch configuration to use. Valid options are FARGATE
func (o InfrastructureDefinitionAwsEcsPtrOutput) LaunchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsEcs) *string {
		if v == nil {
			return nil
		}
		return &v.LaunchType
	}).(pulumi.StringPtrOutput)
}

// The region to deploy to.
func (o InfrastructureDefinitionAwsEcsPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsEcs) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// The security group ids to apply to the ecs service.
func (o InfrastructureDefinitionAwsEcsPtrOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsEcs) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroupIds
	}).(pulumi.StringArrayOutput)
}

// The subnet ids to apply to the ecs service.
func (o InfrastructureDefinitionAwsEcsPtrOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsEcs) []string {
		if v == nil {
			return nil
		}
		return v.SubnetIds
	}).(pulumi.StringArrayOutput)
}

// The VPC ids to use when selecting the instances.
func (o InfrastructureDefinitionAwsEcsPtrOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsEcs) *string {
		if v == nil {
			return nil
		}
		return v.VpcId
	}).(pulumi.StringPtrOutput)
}

type InfrastructureDefinitionAwsLambda struct {
	// The name of the cloud provider to connect with.
	CloudProviderName string `pulumi:"cloudProviderName"`
	// The IAM role to use.
	IamRole *string `pulumi:"iamRole"`
	// The region to deploy to.
	Region string `pulumi:"region"`
	// The security group ids to apply to the ecs service.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The subnet ids to apply to the ecs service.
	SubnetIds []string `pulumi:"subnetIds"`
	// The VPC ids to use when selecting the instances.
	VpcId *string `pulumi:"vpcId"`
}

// InfrastructureDefinitionAwsLambdaInput is an input type that accepts InfrastructureDefinitionAwsLambdaArgs and InfrastructureDefinitionAwsLambdaOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionAwsLambdaInput` via:
//
//	InfrastructureDefinitionAwsLambdaArgs{...}
type InfrastructureDefinitionAwsLambdaInput interface {
	pulumi.Input

	ToInfrastructureDefinitionAwsLambdaOutput() InfrastructureDefinitionAwsLambdaOutput
	ToInfrastructureDefinitionAwsLambdaOutputWithContext(context.Context) InfrastructureDefinitionAwsLambdaOutput
}

type InfrastructureDefinitionAwsLambdaArgs struct {
	// The name of the cloud provider to connect with.
	CloudProviderName pulumi.StringInput `pulumi:"cloudProviderName"`
	// The IAM role to use.
	IamRole pulumi.StringPtrInput `pulumi:"iamRole"`
	// The region to deploy to.
	Region pulumi.StringInput `pulumi:"region"`
	// The security group ids to apply to the ecs service.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The subnet ids to apply to the ecs service.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// The VPC ids to use when selecting the instances.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (InfrastructureDefinitionAwsLambdaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionAwsLambda)(nil)).Elem()
}

func (i InfrastructureDefinitionAwsLambdaArgs) ToInfrastructureDefinitionAwsLambdaOutput() InfrastructureDefinitionAwsLambdaOutput {
	return i.ToInfrastructureDefinitionAwsLambdaOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionAwsLambdaArgs) ToInfrastructureDefinitionAwsLambdaOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsLambdaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAwsLambdaOutput)
}

func (i InfrastructureDefinitionAwsLambdaArgs) ToInfrastructureDefinitionAwsLambdaPtrOutput() InfrastructureDefinitionAwsLambdaPtrOutput {
	return i.ToInfrastructureDefinitionAwsLambdaPtrOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionAwsLambdaArgs) ToInfrastructureDefinitionAwsLambdaPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsLambdaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAwsLambdaOutput).ToInfrastructureDefinitionAwsLambdaPtrOutputWithContext(ctx)
}

// InfrastructureDefinitionAwsLambdaPtrInput is an input type that accepts InfrastructureDefinitionAwsLambdaArgs, InfrastructureDefinitionAwsLambdaPtr and InfrastructureDefinitionAwsLambdaPtrOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionAwsLambdaPtrInput` via:
//
//	        InfrastructureDefinitionAwsLambdaArgs{...}
//
//	or:
//
//	        nil
type InfrastructureDefinitionAwsLambdaPtrInput interface {
	pulumi.Input

	ToInfrastructureDefinitionAwsLambdaPtrOutput() InfrastructureDefinitionAwsLambdaPtrOutput
	ToInfrastructureDefinitionAwsLambdaPtrOutputWithContext(context.Context) InfrastructureDefinitionAwsLambdaPtrOutput
}

type infrastructureDefinitionAwsLambdaPtrType InfrastructureDefinitionAwsLambdaArgs

func InfrastructureDefinitionAwsLambdaPtr(v *InfrastructureDefinitionAwsLambdaArgs) InfrastructureDefinitionAwsLambdaPtrInput {
	return (*infrastructureDefinitionAwsLambdaPtrType)(v)
}

func (*infrastructureDefinitionAwsLambdaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionAwsLambda)(nil)).Elem()
}

func (i *infrastructureDefinitionAwsLambdaPtrType) ToInfrastructureDefinitionAwsLambdaPtrOutput() InfrastructureDefinitionAwsLambdaPtrOutput {
	return i.ToInfrastructureDefinitionAwsLambdaPtrOutputWithContext(context.Background())
}

func (i *infrastructureDefinitionAwsLambdaPtrType) ToInfrastructureDefinitionAwsLambdaPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsLambdaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAwsLambdaPtrOutput)
}

type InfrastructureDefinitionAwsLambdaOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionAwsLambdaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionAwsLambda)(nil)).Elem()
}

func (o InfrastructureDefinitionAwsLambdaOutput) ToInfrastructureDefinitionAwsLambdaOutput() InfrastructureDefinitionAwsLambdaOutput {
	return o
}

func (o InfrastructureDefinitionAwsLambdaOutput) ToInfrastructureDefinitionAwsLambdaOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsLambdaOutput {
	return o
}

func (o InfrastructureDefinitionAwsLambdaOutput) ToInfrastructureDefinitionAwsLambdaPtrOutput() InfrastructureDefinitionAwsLambdaPtrOutput {
	return o.ToInfrastructureDefinitionAwsLambdaPtrOutputWithContext(context.Background())
}

func (o InfrastructureDefinitionAwsLambdaOutput) ToInfrastructureDefinitionAwsLambdaPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsLambdaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InfrastructureDefinitionAwsLambda) *InfrastructureDefinitionAwsLambda {
		return &v
	}).(InfrastructureDefinitionAwsLambdaPtrOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionAwsLambdaOutput) CloudProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsLambda) string { return v.CloudProviderName }).(pulumi.StringOutput)
}

// The IAM role to use.
func (o InfrastructureDefinitionAwsLambdaOutput) IamRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsLambda) *string { return v.IamRole }).(pulumi.StringPtrOutput)
}

// The region to deploy to.
func (o InfrastructureDefinitionAwsLambdaOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsLambda) string { return v.Region }).(pulumi.StringOutput)
}

// The security group ids to apply to the ecs service.
func (o InfrastructureDefinitionAwsLambdaOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsLambda) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The subnet ids to apply to the ecs service.
func (o InfrastructureDefinitionAwsLambdaOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsLambda) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The VPC ids to use when selecting the instances.
func (o InfrastructureDefinitionAwsLambdaOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsLambda) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

type InfrastructureDefinitionAwsLambdaPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionAwsLambdaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionAwsLambda)(nil)).Elem()
}

func (o InfrastructureDefinitionAwsLambdaPtrOutput) ToInfrastructureDefinitionAwsLambdaPtrOutput() InfrastructureDefinitionAwsLambdaPtrOutput {
	return o
}

func (o InfrastructureDefinitionAwsLambdaPtrOutput) ToInfrastructureDefinitionAwsLambdaPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsLambdaPtrOutput {
	return o
}

func (o InfrastructureDefinitionAwsLambdaPtrOutput) Elem() InfrastructureDefinitionAwsLambdaOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsLambda) InfrastructureDefinitionAwsLambda {
		if v != nil {
			return *v
		}
		var ret InfrastructureDefinitionAwsLambda
		return ret
	}).(InfrastructureDefinitionAwsLambdaOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionAwsLambdaPtrOutput) CloudProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsLambda) *string {
		if v == nil {
			return nil
		}
		return &v.CloudProviderName
	}).(pulumi.StringPtrOutput)
}

// The IAM role to use.
func (o InfrastructureDefinitionAwsLambdaPtrOutput) IamRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsLambda) *string {
		if v == nil {
			return nil
		}
		return v.IamRole
	}).(pulumi.StringPtrOutput)
}

// The region to deploy to.
func (o InfrastructureDefinitionAwsLambdaPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsLambda) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// The security group ids to apply to the ecs service.
func (o InfrastructureDefinitionAwsLambdaPtrOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsLambda) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroupIds
	}).(pulumi.StringArrayOutput)
}

// The subnet ids to apply to the ecs service.
func (o InfrastructureDefinitionAwsLambdaPtrOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsLambda) []string {
		if v == nil {
			return nil
		}
		return v.SubnetIds
	}).(pulumi.StringArrayOutput)
}

// The VPC ids to use when selecting the instances.
func (o InfrastructureDefinitionAwsLambdaPtrOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsLambda) *string {
		if v == nil {
			return nil
		}
		return v.VpcId
	}).(pulumi.StringPtrOutput)
}

type InfrastructureDefinitionAwsSsh struct {
	// The name of the autoscaling group.
	AutoscalingGroupName *string `pulumi:"autoscalingGroupName"`
	// The name of the cloud provider to connect with.
	CloudProviderName string `pulumi:"cloudProviderName"`
	// The desired capacity of the auto scaling group.
	DesiredCapacity *int `pulumi:"desiredCapacity"`
	// The name of the host connection attributes to use.
	HostConnectionAttrsName *string `pulumi:"hostConnectionAttrsName"`
	// The type of host connection to use. Valid options are PRIVATE*DNS, PUBLIC*DNS, PRIVATE*IP, PUBLIC*IP
	HostConnectionType string `pulumi:"hostConnectionType"`
	// The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}
	HostnameConvention *string `pulumi:"hostnameConvention"`
	// The name of the load balancer to use.
	LoadbalancerName *string `pulumi:"loadbalancerName"`
	// The region to deploy to.
	Region string `pulumi:"region"`
	// The tags to use when selecting the instances.
	Tags []InfrastructureDefinitionAwsSshTag `pulumi:"tags"`
	// The VPC ids to use when selecting the instances.
	VpcIds []string `pulumi:"vpcIds"`
}

// InfrastructureDefinitionAwsSshInput is an input type that accepts InfrastructureDefinitionAwsSshArgs and InfrastructureDefinitionAwsSshOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionAwsSshInput` via:
//
//	InfrastructureDefinitionAwsSshArgs{...}
type InfrastructureDefinitionAwsSshInput interface {
	pulumi.Input

	ToInfrastructureDefinitionAwsSshOutput() InfrastructureDefinitionAwsSshOutput
	ToInfrastructureDefinitionAwsSshOutputWithContext(context.Context) InfrastructureDefinitionAwsSshOutput
}

type InfrastructureDefinitionAwsSshArgs struct {
	// The name of the autoscaling group.
	AutoscalingGroupName pulumi.StringPtrInput `pulumi:"autoscalingGroupName"`
	// The name of the cloud provider to connect with.
	CloudProviderName pulumi.StringInput `pulumi:"cloudProviderName"`
	// The desired capacity of the auto scaling group.
	DesiredCapacity pulumi.IntPtrInput `pulumi:"desiredCapacity"`
	// The name of the host connection attributes to use.
	HostConnectionAttrsName pulumi.StringPtrInput `pulumi:"hostConnectionAttrsName"`
	// The type of host connection to use. Valid options are PRIVATE*DNS, PUBLIC*DNS, PRIVATE*IP, PUBLIC*IP
	HostConnectionType pulumi.StringInput `pulumi:"hostConnectionType"`
	// The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}
	HostnameConvention pulumi.StringPtrInput `pulumi:"hostnameConvention"`
	// The name of the load balancer to use.
	LoadbalancerName pulumi.StringPtrInput `pulumi:"loadbalancerName"`
	// The region to deploy to.
	Region pulumi.StringInput `pulumi:"region"`
	// The tags to use when selecting the instances.
	Tags InfrastructureDefinitionAwsSshTagArrayInput `pulumi:"tags"`
	// The VPC ids to use when selecting the instances.
	VpcIds pulumi.StringArrayInput `pulumi:"vpcIds"`
}

func (InfrastructureDefinitionAwsSshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionAwsSsh)(nil)).Elem()
}

func (i InfrastructureDefinitionAwsSshArgs) ToInfrastructureDefinitionAwsSshOutput() InfrastructureDefinitionAwsSshOutput {
	return i.ToInfrastructureDefinitionAwsSshOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionAwsSshArgs) ToInfrastructureDefinitionAwsSshOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsSshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAwsSshOutput)
}

func (i InfrastructureDefinitionAwsSshArgs) ToInfrastructureDefinitionAwsSshPtrOutput() InfrastructureDefinitionAwsSshPtrOutput {
	return i.ToInfrastructureDefinitionAwsSshPtrOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionAwsSshArgs) ToInfrastructureDefinitionAwsSshPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAwsSshOutput).ToInfrastructureDefinitionAwsSshPtrOutputWithContext(ctx)
}

// InfrastructureDefinitionAwsSshPtrInput is an input type that accepts InfrastructureDefinitionAwsSshArgs, InfrastructureDefinitionAwsSshPtr and InfrastructureDefinitionAwsSshPtrOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionAwsSshPtrInput` via:
//
//	        InfrastructureDefinitionAwsSshArgs{...}
//
//	or:
//
//	        nil
type InfrastructureDefinitionAwsSshPtrInput interface {
	pulumi.Input

	ToInfrastructureDefinitionAwsSshPtrOutput() InfrastructureDefinitionAwsSshPtrOutput
	ToInfrastructureDefinitionAwsSshPtrOutputWithContext(context.Context) InfrastructureDefinitionAwsSshPtrOutput
}

type infrastructureDefinitionAwsSshPtrType InfrastructureDefinitionAwsSshArgs

func InfrastructureDefinitionAwsSshPtr(v *InfrastructureDefinitionAwsSshArgs) InfrastructureDefinitionAwsSshPtrInput {
	return (*infrastructureDefinitionAwsSshPtrType)(v)
}

func (*infrastructureDefinitionAwsSshPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionAwsSsh)(nil)).Elem()
}

func (i *infrastructureDefinitionAwsSshPtrType) ToInfrastructureDefinitionAwsSshPtrOutput() InfrastructureDefinitionAwsSshPtrOutput {
	return i.ToInfrastructureDefinitionAwsSshPtrOutputWithContext(context.Background())
}

func (i *infrastructureDefinitionAwsSshPtrType) ToInfrastructureDefinitionAwsSshPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAwsSshPtrOutput)
}

type InfrastructureDefinitionAwsSshOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionAwsSshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionAwsSsh)(nil)).Elem()
}

func (o InfrastructureDefinitionAwsSshOutput) ToInfrastructureDefinitionAwsSshOutput() InfrastructureDefinitionAwsSshOutput {
	return o
}

func (o InfrastructureDefinitionAwsSshOutput) ToInfrastructureDefinitionAwsSshOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsSshOutput {
	return o
}

func (o InfrastructureDefinitionAwsSshOutput) ToInfrastructureDefinitionAwsSshPtrOutput() InfrastructureDefinitionAwsSshPtrOutput {
	return o.ToInfrastructureDefinitionAwsSshPtrOutputWithContext(context.Background())
}

func (o InfrastructureDefinitionAwsSshOutput) ToInfrastructureDefinitionAwsSshPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsSshPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InfrastructureDefinitionAwsSsh) *InfrastructureDefinitionAwsSsh {
		return &v
	}).(InfrastructureDefinitionAwsSshPtrOutput)
}

// The name of the autoscaling group.
func (o InfrastructureDefinitionAwsSshOutput) AutoscalingGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsSsh) *string { return v.AutoscalingGroupName }).(pulumi.StringPtrOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionAwsSshOutput) CloudProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsSsh) string { return v.CloudProviderName }).(pulumi.StringOutput)
}

// The desired capacity of the auto scaling group.
func (o InfrastructureDefinitionAwsSshOutput) DesiredCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsSsh) *int { return v.DesiredCapacity }).(pulumi.IntPtrOutput)
}

// The name of the host connection attributes to use.
func (o InfrastructureDefinitionAwsSshOutput) HostConnectionAttrsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsSsh) *string { return v.HostConnectionAttrsName }).(pulumi.StringPtrOutput)
}

// The type of host connection to use. Valid options are PRIVATE*DNS, PUBLIC*DNS, PRIVATE*IP, PUBLIC*IP
func (o InfrastructureDefinitionAwsSshOutput) HostConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsSsh) string { return v.HostConnectionType }).(pulumi.StringOutput)
}

// The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}
func (o InfrastructureDefinitionAwsSshOutput) HostnameConvention() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsSsh) *string { return v.HostnameConvention }).(pulumi.StringPtrOutput)
}

// The name of the load balancer to use.
func (o InfrastructureDefinitionAwsSshOutput) LoadbalancerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsSsh) *string { return v.LoadbalancerName }).(pulumi.StringPtrOutput)
}

// The region to deploy to.
func (o InfrastructureDefinitionAwsSshOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsSsh) string { return v.Region }).(pulumi.StringOutput)
}

// The tags to use when selecting the instances.
func (o InfrastructureDefinitionAwsSshOutput) Tags() InfrastructureDefinitionAwsSshTagArrayOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsSsh) []InfrastructureDefinitionAwsSshTag { return v.Tags }).(InfrastructureDefinitionAwsSshTagArrayOutput)
}

// The VPC ids to use when selecting the instances.
func (o InfrastructureDefinitionAwsSshOutput) VpcIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsSsh) []string { return v.VpcIds }).(pulumi.StringArrayOutput)
}

type InfrastructureDefinitionAwsSshPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionAwsSshPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionAwsSsh)(nil)).Elem()
}

func (o InfrastructureDefinitionAwsSshPtrOutput) ToInfrastructureDefinitionAwsSshPtrOutput() InfrastructureDefinitionAwsSshPtrOutput {
	return o
}

func (o InfrastructureDefinitionAwsSshPtrOutput) ToInfrastructureDefinitionAwsSshPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsSshPtrOutput {
	return o
}

func (o InfrastructureDefinitionAwsSshPtrOutput) Elem() InfrastructureDefinitionAwsSshOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsSsh) InfrastructureDefinitionAwsSsh {
		if v != nil {
			return *v
		}
		var ret InfrastructureDefinitionAwsSsh
		return ret
	}).(InfrastructureDefinitionAwsSshOutput)
}

// The name of the autoscaling group.
func (o InfrastructureDefinitionAwsSshPtrOutput) AutoscalingGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsSsh) *string {
		if v == nil {
			return nil
		}
		return v.AutoscalingGroupName
	}).(pulumi.StringPtrOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionAwsSshPtrOutput) CloudProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsSsh) *string {
		if v == nil {
			return nil
		}
		return &v.CloudProviderName
	}).(pulumi.StringPtrOutput)
}

// The desired capacity of the auto scaling group.
func (o InfrastructureDefinitionAwsSshPtrOutput) DesiredCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsSsh) *int {
		if v == nil {
			return nil
		}
		return v.DesiredCapacity
	}).(pulumi.IntPtrOutput)
}

// The name of the host connection attributes to use.
func (o InfrastructureDefinitionAwsSshPtrOutput) HostConnectionAttrsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsSsh) *string {
		if v == nil {
			return nil
		}
		return v.HostConnectionAttrsName
	}).(pulumi.StringPtrOutput)
}

// The type of host connection to use. Valid options are PRIVATE*DNS, PUBLIC*DNS, PRIVATE*IP, PUBLIC*IP
func (o InfrastructureDefinitionAwsSshPtrOutput) HostConnectionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsSsh) *string {
		if v == nil {
			return nil
		}
		return &v.HostConnectionType
	}).(pulumi.StringPtrOutput)
}

// The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}
func (o InfrastructureDefinitionAwsSshPtrOutput) HostnameConvention() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsSsh) *string {
		if v == nil {
			return nil
		}
		return v.HostnameConvention
	}).(pulumi.StringPtrOutput)
}

// The name of the load balancer to use.
func (o InfrastructureDefinitionAwsSshPtrOutput) LoadbalancerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsSsh) *string {
		if v == nil {
			return nil
		}
		return v.LoadbalancerName
	}).(pulumi.StringPtrOutput)
}

// The region to deploy to.
func (o InfrastructureDefinitionAwsSshPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsSsh) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// The tags to use when selecting the instances.
func (o InfrastructureDefinitionAwsSshPtrOutput) Tags() InfrastructureDefinitionAwsSshTagArrayOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsSsh) []InfrastructureDefinitionAwsSshTag {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(InfrastructureDefinitionAwsSshTagArrayOutput)
}

// The VPC ids to use when selecting the instances.
func (o InfrastructureDefinitionAwsSshPtrOutput) VpcIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsSsh) []string {
		if v == nil {
			return nil
		}
		return v.VpcIds
	}).(pulumi.StringArrayOutput)
}

type InfrastructureDefinitionAwsSshTag struct {
	// The key of the tag.
	Key string `pulumi:"key"`
	// The value of the tag.
	Value string `pulumi:"value"`
}

// InfrastructureDefinitionAwsSshTagInput is an input type that accepts InfrastructureDefinitionAwsSshTagArgs and InfrastructureDefinitionAwsSshTagOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionAwsSshTagInput` via:
//
//	InfrastructureDefinitionAwsSshTagArgs{...}
type InfrastructureDefinitionAwsSshTagInput interface {
	pulumi.Input

	ToInfrastructureDefinitionAwsSshTagOutput() InfrastructureDefinitionAwsSshTagOutput
	ToInfrastructureDefinitionAwsSshTagOutputWithContext(context.Context) InfrastructureDefinitionAwsSshTagOutput
}

type InfrastructureDefinitionAwsSshTagArgs struct {
	// The key of the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value of the tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InfrastructureDefinitionAwsSshTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionAwsSshTag)(nil)).Elem()
}

func (i InfrastructureDefinitionAwsSshTagArgs) ToInfrastructureDefinitionAwsSshTagOutput() InfrastructureDefinitionAwsSshTagOutput {
	return i.ToInfrastructureDefinitionAwsSshTagOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionAwsSshTagArgs) ToInfrastructureDefinitionAwsSshTagOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsSshTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAwsSshTagOutput)
}

// InfrastructureDefinitionAwsSshTagArrayInput is an input type that accepts InfrastructureDefinitionAwsSshTagArray and InfrastructureDefinitionAwsSshTagArrayOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionAwsSshTagArrayInput` via:
//
//	InfrastructureDefinitionAwsSshTagArray{ InfrastructureDefinitionAwsSshTagArgs{...} }
type InfrastructureDefinitionAwsSshTagArrayInput interface {
	pulumi.Input

	ToInfrastructureDefinitionAwsSshTagArrayOutput() InfrastructureDefinitionAwsSshTagArrayOutput
	ToInfrastructureDefinitionAwsSshTagArrayOutputWithContext(context.Context) InfrastructureDefinitionAwsSshTagArrayOutput
}

type InfrastructureDefinitionAwsSshTagArray []InfrastructureDefinitionAwsSshTagInput

func (InfrastructureDefinitionAwsSshTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InfrastructureDefinitionAwsSshTag)(nil)).Elem()
}

func (i InfrastructureDefinitionAwsSshTagArray) ToInfrastructureDefinitionAwsSshTagArrayOutput() InfrastructureDefinitionAwsSshTagArrayOutput {
	return i.ToInfrastructureDefinitionAwsSshTagArrayOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionAwsSshTagArray) ToInfrastructureDefinitionAwsSshTagArrayOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsSshTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAwsSshTagArrayOutput)
}

type InfrastructureDefinitionAwsSshTagOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionAwsSshTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionAwsSshTag)(nil)).Elem()
}

func (o InfrastructureDefinitionAwsSshTagOutput) ToInfrastructureDefinitionAwsSshTagOutput() InfrastructureDefinitionAwsSshTagOutput {
	return o
}

func (o InfrastructureDefinitionAwsSshTagOutput) ToInfrastructureDefinitionAwsSshTagOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsSshTagOutput {
	return o
}

// The key of the tag.
func (o InfrastructureDefinitionAwsSshTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsSshTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value of the tag.
func (o InfrastructureDefinitionAwsSshTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsSshTag) string { return v.Value }).(pulumi.StringOutput)
}

type InfrastructureDefinitionAwsSshTagArrayOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionAwsSshTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InfrastructureDefinitionAwsSshTag)(nil)).Elem()
}

func (o InfrastructureDefinitionAwsSshTagArrayOutput) ToInfrastructureDefinitionAwsSshTagArrayOutput() InfrastructureDefinitionAwsSshTagArrayOutput {
	return o
}

func (o InfrastructureDefinitionAwsSshTagArrayOutput) ToInfrastructureDefinitionAwsSshTagArrayOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsSshTagArrayOutput {
	return o
}

func (o InfrastructureDefinitionAwsSshTagArrayOutput) Index(i pulumi.IntInput) InfrastructureDefinitionAwsSshTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InfrastructureDefinitionAwsSshTag {
		return vs[0].([]InfrastructureDefinitionAwsSshTag)[vs[1].(int)]
	}).(InfrastructureDefinitionAwsSshTagOutput)
}

type InfrastructureDefinitionAwsWinrm struct {
	// The name of the autoscaling group.
	AutoscalingGroupName string `pulumi:"autoscalingGroupName"`
	// The name of the cloud provider to connect with.
	CloudProviderName string `pulumi:"cloudProviderName"`
	// The desired capacity of the autoscaling group.
	DesiredCapacity *int `pulumi:"desiredCapacity"`
	// The name of the host connection attributes to use.
	HostConnectionAttrsName string `pulumi:"hostConnectionAttrsName"`
	// The type of host connection to use. Valid options are PRIVATE*DNS, PUBLIC*DNS, PRIVATE*IP, PUBLIC*IP
	HostConnectionType string `pulumi:"hostConnectionType"`
	// The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}
	HostnameConvention *string `pulumi:"hostnameConvention"`
	// The name of the load balancer to use.
	LoadbalancerName *string `pulumi:"loadbalancerName"`
	// The region to deploy to.
	Region string `pulumi:"region"`
}

// InfrastructureDefinitionAwsWinrmInput is an input type that accepts InfrastructureDefinitionAwsWinrmArgs and InfrastructureDefinitionAwsWinrmOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionAwsWinrmInput` via:
//
//	InfrastructureDefinitionAwsWinrmArgs{...}
type InfrastructureDefinitionAwsWinrmInput interface {
	pulumi.Input

	ToInfrastructureDefinitionAwsWinrmOutput() InfrastructureDefinitionAwsWinrmOutput
	ToInfrastructureDefinitionAwsWinrmOutputWithContext(context.Context) InfrastructureDefinitionAwsWinrmOutput
}

type InfrastructureDefinitionAwsWinrmArgs struct {
	// The name of the autoscaling group.
	AutoscalingGroupName pulumi.StringInput `pulumi:"autoscalingGroupName"`
	// The name of the cloud provider to connect with.
	CloudProviderName pulumi.StringInput `pulumi:"cloudProviderName"`
	// The desired capacity of the autoscaling group.
	DesiredCapacity pulumi.IntPtrInput `pulumi:"desiredCapacity"`
	// The name of the host connection attributes to use.
	HostConnectionAttrsName pulumi.StringInput `pulumi:"hostConnectionAttrsName"`
	// The type of host connection to use. Valid options are PRIVATE*DNS, PUBLIC*DNS, PRIVATE*IP, PUBLIC*IP
	HostConnectionType pulumi.StringInput `pulumi:"hostConnectionType"`
	// The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}
	HostnameConvention pulumi.StringPtrInput `pulumi:"hostnameConvention"`
	// The name of the load balancer to use.
	LoadbalancerName pulumi.StringPtrInput `pulumi:"loadbalancerName"`
	// The region to deploy to.
	Region pulumi.StringInput `pulumi:"region"`
}

func (InfrastructureDefinitionAwsWinrmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionAwsWinrm)(nil)).Elem()
}

func (i InfrastructureDefinitionAwsWinrmArgs) ToInfrastructureDefinitionAwsWinrmOutput() InfrastructureDefinitionAwsWinrmOutput {
	return i.ToInfrastructureDefinitionAwsWinrmOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionAwsWinrmArgs) ToInfrastructureDefinitionAwsWinrmOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsWinrmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAwsWinrmOutput)
}

func (i InfrastructureDefinitionAwsWinrmArgs) ToInfrastructureDefinitionAwsWinrmPtrOutput() InfrastructureDefinitionAwsWinrmPtrOutput {
	return i.ToInfrastructureDefinitionAwsWinrmPtrOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionAwsWinrmArgs) ToInfrastructureDefinitionAwsWinrmPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsWinrmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAwsWinrmOutput).ToInfrastructureDefinitionAwsWinrmPtrOutputWithContext(ctx)
}

// InfrastructureDefinitionAwsWinrmPtrInput is an input type that accepts InfrastructureDefinitionAwsWinrmArgs, InfrastructureDefinitionAwsWinrmPtr and InfrastructureDefinitionAwsWinrmPtrOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionAwsWinrmPtrInput` via:
//
//	        InfrastructureDefinitionAwsWinrmArgs{...}
//
//	or:
//
//	        nil
type InfrastructureDefinitionAwsWinrmPtrInput interface {
	pulumi.Input

	ToInfrastructureDefinitionAwsWinrmPtrOutput() InfrastructureDefinitionAwsWinrmPtrOutput
	ToInfrastructureDefinitionAwsWinrmPtrOutputWithContext(context.Context) InfrastructureDefinitionAwsWinrmPtrOutput
}

type infrastructureDefinitionAwsWinrmPtrType InfrastructureDefinitionAwsWinrmArgs

func InfrastructureDefinitionAwsWinrmPtr(v *InfrastructureDefinitionAwsWinrmArgs) InfrastructureDefinitionAwsWinrmPtrInput {
	return (*infrastructureDefinitionAwsWinrmPtrType)(v)
}

func (*infrastructureDefinitionAwsWinrmPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionAwsWinrm)(nil)).Elem()
}

func (i *infrastructureDefinitionAwsWinrmPtrType) ToInfrastructureDefinitionAwsWinrmPtrOutput() InfrastructureDefinitionAwsWinrmPtrOutput {
	return i.ToInfrastructureDefinitionAwsWinrmPtrOutputWithContext(context.Background())
}

func (i *infrastructureDefinitionAwsWinrmPtrType) ToInfrastructureDefinitionAwsWinrmPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsWinrmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAwsWinrmPtrOutput)
}

type InfrastructureDefinitionAwsWinrmOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionAwsWinrmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionAwsWinrm)(nil)).Elem()
}

func (o InfrastructureDefinitionAwsWinrmOutput) ToInfrastructureDefinitionAwsWinrmOutput() InfrastructureDefinitionAwsWinrmOutput {
	return o
}

func (o InfrastructureDefinitionAwsWinrmOutput) ToInfrastructureDefinitionAwsWinrmOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsWinrmOutput {
	return o
}

func (o InfrastructureDefinitionAwsWinrmOutput) ToInfrastructureDefinitionAwsWinrmPtrOutput() InfrastructureDefinitionAwsWinrmPtrOutput {
	return o.ToInfrastructureDefinitionAwsWinrmPtrOutputWithContext(context.Background())
}

func (o InfrastructureDefinitionAwsWinrmOutput) ToInfrastructureDefinitionAwsWinrmPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsWinrmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InfrastructureDefinitionAwsWinrm) *InfrastructureDefinitionAwsWinrm {
		return &v
	}).(InfrastructureDefinitionAwsWinrmPtrOutput)
}

// The name of the autoscaling group.
func (o InfrastructureDefinitionAwsWinrmOutput) AutoscalingGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsWinrm) string { return v.AutoscalingGroupName }).(pulumi.StringOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionAwsWinrmOutput) CloudProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsWinrm) string { return v.CloudProviderName }).(pulumi.StringOutput)
}

// The desired capacity of the autoscaling group.
func (o InfrastructureDefinitionAwsWinrmOutput) DesiredCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsWinrm) *int { return v.DesiredCapacity }).(pulumi.IntPtrOutput)
}

// The name of the host connection attributes to use.
func (o InfrastructureDefinitionAwsWinrmOutput) HostConnectionAttrsName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsWinrm) string { return v.HostConnectionAttrsName }).(pulumi.StringOutput)
}

// The type of host connection to use. Valid options are PRIVATE*DNS, PUBLIC*DNS, PRIVATE*IP, PUBLIC*IP
func (o InfrastructureDefinitionAwsWinrmOutput) HostConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsWinrm) string { return v.HostConnectionType }).(pulumi.StringOutput)
}

// The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}
func (o InfrastructureDefinitionAwsWinrmOutput) HostnameConvention() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsWinrm) *string { return v.HostnameConvention }).(pulumi.StringPtrOutput)
}

// The name of the load balancer to use.
func (o InfrastructureDefinitionAwsWinrmOutput) LoadbalancerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsWinrm) *string { return v.LoadbalancerName }).(pulumi.StringPtrOutput)
}

// The region to deploy to.
func (o InfrastructureDefinitionAwsWinrmOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAwsWinrm) string { return v.Region }).(pulumi.StringOutput)
}

type InfrastructureDefinitionAwsWinrmPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionAwsWinrmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionAwsWinrm)(nil)).Elem()
}

func (o InfrastructureDefinitionAwsWinrmPtrOutput) ToInfrastructureDefinitionAwsWinrmPtrOutput() InfrastructureDefinitionAwsWinrmPtrOutput {
	return o
}

func (o InfrastructureDefinitionAwsWinrmPtrOutput) ToInfrastructureDefinitionAwsWinrmPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAwsWinrmPtrOutput {
	return o
}

func (o InfrastructureDefinitionAwsWinrmPtrOutput) Elem() InfrastructureDefinitionAwsWinrmOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsWinrm) InfrastructureDefinitionAwsWinrm {
		if v != nil {
			return *v
		}
		var ret InfrastructureDefinitionAwsWinrm
		return ret
	}).(InfrastructureDefinitionAwsWinrmOutput)
}

// The name of the autoscaling group.
func (o InfrastructureDefinitionAwsWinrmPtrOutput) AutoscalingGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsWinrm) *string {
		if v == nil {
			return nil
		}
		return &v.AutoscalingGroupName
	}).(pulumi.StringPtrOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionAwsWinrmPtrOutput) CloudProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsWinrm) *string {
		if v == nil {
			return nil
		}
		return &v.CloudProviderName
	}).(pulumi.StringPtrOutput)
}

// The desired capacity of the autoscaling group.
func (o InfrastructureDefinitionAwsWinrmPtrOutput) DesiredCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsWinrm) *int {
		if v == nil {
			return nil
		}
		return v.DesiredCapacity
	}).(pulumi.IntPtrOutput)
}

// The name of the host connection attributes to use.
func (o InfrastructureDefinitionAwsWinrmPtrOutput) HostConnectionAttrsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsWinrm) *string {
		if v == nil {
			return nil
		}
		return &v.HostConnectionAttrsName
	}).(pulumi.StringPtrOutput)
}

// The type of host connection to use. Valid options are PRIVATE*DNS, PUBLIC*DNS, PRIVATE*IP, PUBLIC*IP
func (o InfrastructureDefinitionAwsWinrmPtrOutput) HostConnectionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsWinrm) *string {
		if v == nil {
			return nil
		}
		return &v.HostConnectionType
	}).(pulumi.StringPtrOutput)
}

// The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}
func (o InfrastructureDefinitionAwsWinrmPtrOutput) HostnameConvention() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsWinrm) *string {
		if v == nil {
			return nil
		}
		return v.HostnameConvention
	}).(pulumi.StringPtrOutput)
}

// The name of the load balancer to use.
func (o InfrastructureDefinitionAwsWinrmPtrOutput) LoadbalancerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsWinrm) *string {
		if v == nil {
			return nil
		}
		return v.LoadbalancerName
	}).(pulumi.StringPtrOutput)
}

// The region to deploy to.
func (o InfrastructureDefinitionAwsWinrmPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAwsWinrm) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

type InfrastructureDefinitionAzureVmss struct {
	// The type of authentication to use. Valid options are SSH*PUBLIC*KEY.
	AuthType string `pulumi:"authType"`
	// Base name.
	BaseName string `pulumi:"baseName"`
	// The name of the cloud provider to connect with.
	CloudProviderName string `pulumi:"cloudProviderName"`
	// The type of deployment. Valid options are NATIVE_VMSS
	DeploymentType string `pulumi:"deploymentType"`
	// The name of the host connection attributes to use.
	HostConnectionAttrsName *string `pulumi:"hostConnectionAttrsName"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The unique id of the azure subscription.
	SubscriptionId string `pulumi:"subscriptionId"`
	// The username to connect with.
	Username string `pulumi:"username"`
}

// InfrastructureDefinitionAzureVmssInput is an input type that accepts InfrastructureDefinitionAzureVmssArgs and InfrastructureDefinitionAzureVmssOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionAzureVmssInput` via:
//
//	InfrastructureDefinitionAzureVmssArgs{...}
type InfrastructureDefinitionAzureVmssInput interface {
	pulumi.Input

	ToInfrastructureDefinitionAzureVmssOutput() InfrastructureDefinitionAzureVmssOutput
	ToInfrastructureDefinitionAzureVmssOutputWithContext(context.Context) InfrastructureDefinitionAzureVmssOutput
}

type InfrastructureDefinitionAzureVmssArgs struct {
	// The type of authentication to use. Valid options are SSH*PUBLIC*KEY.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Base name.
	BaseName pulumi.StringInput `pulumi:"baseName"`
	// The name of the cloud provider to connect with.
	CloudProviderName pulumi.StringInput `pulumi:"cloudProviderName"`
	// The type of deployment. Valid options are NATIVE_VMSS
	DeploymentType pulumi.StringInput `pulumi:"deploymentType"`
	// The name of the host connection attributes to use.
	HostConnectionAttrsName pulumi.StringPtrInput `pulumi:"hostConnectionAttrsName"`
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The unique id of the azure subscription.
	SubscriptionId pulumi.StringInput `pulumi:"subscriptionId"`
	// The username to connect with.
	Username pulumi.StringInput `pulumi:"username"`
}

func (InfrastructureDefinitionAzureVmssArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionAzureVmss)(nil)).Elem()
}

func (i InfrastructureDefinitionAzureVmssArgs) ToInfrastructureDefinitionAzureVmssOutput() InfrastructureDefinitionAzureVmssOutput {
	return i.ToInfrastructureDefinitionAzureVmssOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionAzureVmssArgs) ToInfrastructureDefinitionAzureVmssOutputWithContext(ctx context.Context) InfrastructureDefinitionAzureVmssOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAzureVmssOutput)
}

func (i InfrastructureDefinitionAzureVmssArgs) ToInfrastructureDefinitionAzureVmssPtrOutput() InfrastructureDefinitionAzureVmssPtrOutput {
	return i.ToInfrastructureDefinitionAzureVmssPtrOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionAzureVmssArgs) ToInfrastructureDefinitionAzureVmssPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAzureVmssPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAzureVmssOutput).ToInfrastructureDefinitionAzureVmssPtrOutputWithContext(ctx)
}

// InfrastructureDefinitionAzureVmssPtrInput is an input type that accepts InfrastructureDefinitionAzureVmssArgs, InfrastructureDefinitionAzureVmssPtr and InfrastructureDefinitionAzureVmssPtrOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionAzureVmssPtrInput` via:
//
//	        InfrastructureDefinitionAzureVmssArgs{...}
//
//	or:
//
//	        nil
type InfrastructureDefinitionAzureVmssPtrInput interface {
	pulumi.Input

	ToInfrastructureDefinitionAzureVmssPtrOutput() InfrastructureDefinitionAzureVmssPtrOutput
	ToInfrastructureDefinitionAzureVmssPtrOutputWithContext(context.Context) InfrastructureDefinitionAzureVmssPtrOutput
}

type infrastructureDefinitionAzureVmssPtrType InfrastructureDefinitionAzureVmssArgs

func InfrastructureDefinitionAzureVmssPtr(v *InfrastructureDefinitionAzureVmssArgs) InfrastructureDefinitionAzureVmssPtrInput {
	return (*infrastructureDefinitionAzureVmssPtrType)(v)
}

func (*infrastructureDefinitionAzureVmssPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionAzureVmss)(nil)).Elem()
}

func (i *infrastructureDefinitionAzureVmssPtrType) ToInfrastructureDefinitionAzureVmssPtrOutput() InfrastructureDefinitionAzureVmssPtrOutput {
	return i.ToInfrastructureDefinitionAzureVmssPtrOutputWithContext(context.Background())
}

func (i *infrastructureDefinitionAzureVmssPtrType) ToInfrastructureDefinitionAzureVmssPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAzureVmssPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAzureVmssPtrOutput)
}

type InfrastructureDefinitionAzureVmssOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionAzureVmssOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionAzureVmss)(nil)).Elem()
}

func (o InfrastructureDefinitionAzureVmssOutput) ToInfrastructureDefinitionAzureVmssOutput() InfrastructureDefinitionAzureVmssOutput {
	return o
}

func (o InfrastructureDefinitionAzureVmssOutput) ToInfrastructureDefinitionAzureVmssOutputWithContext(ctx context.Context) InfrastructureDefinitionAzureVmssOutput {
	return o
}

func (o InfrastructureDefinitionAzureVmssOutput) ToInfrastructureDefinitionAzureVmssPtrOutput() InfrastructureDefinitionAzureVmssPtrOutput {
	return o.ToInfrastructureDefinitionAzureVmssPtrOutputWithContext(context.Background())
}

func (o InfrastructureDefinitionAzureVmssOutput) ToInfrastructureDefinitionAzureVmssPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAzureVmssPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InfrastructureDefinitionAzureVmss) *InfrastructureDefinitionAzureVmss {
		return &v
	}).(InfrastructureDefinitionAzureVmssPtrOutput)
}

// The type of authentication to use. Valid options are SSH*PUBLIC*KEY.
func (o InfrastructureDefinitionAzureVmssOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAzureVmss) string { return v.AuthType }).(pulumi.StringOutput)
}

// Base name.
func (o InfrastructureDefinitionAzureVmssOutput) BaseName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAzureVmss) string { return v.BaseName }).(pulumi.StringOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionAzureVmssOutput) CloudProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAzureVmss) string { return v.CloudProviderName }).(pulumi.StringOutput)
}

// The type of deployment. Valid options are NATIVE_VMSS
func (o InfrastructureDefinitionAzureVmssOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAzureVmss) string { return v.DeploymentType }).(pulumi.StringOutput)
}

// The name of the host connection attributes to use.
func (o InfrastructureDefinitionAzureVmssOutput) HostConnectionAttrsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAzureVmss) *string { return v.HostConnectionAttrsName }).(pulumi.StringPtrOutput)
}

// The name of the resource group.
func (o InfrastructureDefinitionAzureVmssOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAzureVmss) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The unique id of the azure subscription.
func (o InfrastructureDefinitionAzureVmssOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAzureVmss) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

// The username to connect with.
func (o InfrastructureDefinitionAzureVmssOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAzureVmss) string { return v.Username }).(pulumi.StringOutput)
}

type InfrastructureDefinitionAzureVmssPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionAzureVmssPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionAzureVmss)(nil)).Elem()
}

func (o InfrastructureDefinitionAzureVmssPtrOutput) ToInfrastructureDefinitionAzureVmssPtrOutput() InfrastructureDefinitionAzureVmssPtrOutput {
	return o
}

func (o InfrastructureDefinitionAzureVmssPtrOutput) ToInfrastructureDefinitionAzureVmssPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAzureVmssPtrOutput {
	return o
}

func (o InfrastructureDefinitionAzureVmssPtrOutput) Elem() InfrastructureDefinitionAzureVmssOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAzureVmss) InfrastructureDefinitionAzureVmss {
		if v != nil {
			return *v
		}
		var ret InfrastructureDefinitionAzureVmss
		return ret
	}).(InfrastructureDefinitionAzureVmssOutput)
}

// The type of authentication to use. Valid options are SSH*PUBLIC*KEY.
func (o InfrastructureDefinitionAzureVmssPtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAzureVmss) *string {
		if v == nil {
			return nil
		}
		return &v.AuthType
	}).(pulumi.StringPtrOutput)
}

// Base name.
func (o InfrastructureDefinitionAzureVmssPtrOutput) BaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAzureVmss) *string {
		if v == nil {
			return nil
		}
		return &v.BaseName
	}).(pulumi.StringPtrOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionAzureVmssPtrOutput) CloudProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAzureVmss) *string {
		if v == nil {
			return nil
		}
		return &v.CloudProviderName
	}).(pulumi.StringPtrOutput)
}

// The type of deployment. Valid options are NATIVE_VMSS
func (o InfrastructureDefinitionAzureVmssPtrOutput) DeploymentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAzureVmss) *string {
		if v == nil {
			return nil
		}
		return &v.DeploymentType
	}).(pulumi.StringPtrOutput)
}

// The name of the host connection attributes to use.
func (o InfrastructureDefinitionAzureVmssPtrOutput) HostConnectionAttrsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAzureVmss) *string {
		if v == nil {
			return nil
		}
		return v.HostConnectionAttrsName
	}).(pulumi.StringPtrOutput)
}

// The name of the resource group.
func (o InfrastructureDefinitionAzureVmssPtrOutput) ResourceGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAzureVmss) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceGroupName
	}).(pulumi.StringPtrOutput)
}

// The unique id of the azure subscription.
func (o InfrastructureDefinitionAzureVmssPtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAzureVmss) *string {
		if v == nil {
			return nil
		}
		return &v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// The username to connect with.
func (o InfrastructureDefinitionAzureVmssPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAzureVmss) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type InfrastructureDefinitionAzureWebapp struct {
	// The name of the cloud provider to connect with.
	CloudProviderName string `pulumi:"cloudProviderName"`
	// The name of the resource group.
	ResourceGroup string `pulumi:"resourceGroup"`
	// The unique id of the azure subscription.
	SubscriptionId string `pulumi:"subscriptionId"`
}

// InfrastructureDefinitionAzureWebappInput is an input type that accepts InfrastructureDefinitionAzureWebappArgs and InfrastructureDefinitionAzureWebappOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionAzureWebappInput` via:
//
//	InfrastructureDefinitionAzureWebappArgs{...}
type InfrastructureDefinitionAzureWebappInput interface {
	pulumi.Input

	ToInfrastructureDefinitionAzureWebappOutput() InfrastructureDefinitionAzureWebappOutput
	ToInfrastructureDefinitionAzureWebappOutputWithContext(context.Context) InfrastructureDefinitionAzureWebappOutput
}

type InfrastructureDefinitionAzureWebappArgs struct {
	// The name of the cloud provider to connect with.
	CloudProviderName pulumi.StringInput `pulumi:"cloudProviderName"`
	// The name of the resource group.
	ResourceGroup pulumi.StringInput `pulumi:"resourceGroup"`
	// The unique id of the azure subscription.
	SubscriptionId pulumi.StringInput `pulumi:"subscriptionId"`
}

func (InfrastructureDefinitionAzureWebappArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionAzureWebapp)(nil)).Elem()
}

func (i InfrastructureDefinitionAzureWebappArgs) ToInfrastructureDefinitionAzureWebappOutput() InfrastructureDefinitionAzureWebappOutput {
	return i.ToInfrastructureDefinitionAzureWebappOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionAzureWebappArgs) ToInfrastructureDefinitionAzureWebappOutputWithContext(ctx context.Context) InfrastructureDefinitionAzureWebappOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAzureWebappOutput)
}

func (i InfrastructureDefinitionAzureWebappArgs) ToInfrastructureDefinitionAzureWebappPtrOutput() InfrastructureDefinitionAzureWebappPtrOutput {
	return i.ToInfrastructureDefinitionAzureWebappPtrOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionAzureWebappArgs) ToInfrastructureDefinitionAzureWebappPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAzureWebappPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAzureWebappOutput).ToInfrastructureDefinitionAzureWebappPtrOutputWithContext(ctx)
}

// InfrastructureDefinitionAzureWebappPtrInput is an input type that accepts InfrastructureDefinitionAzureWebappArgs, InfrastructureDefinitionAzureWebappPtr and InfrastructureDefinitionAzureWebappPtrOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionAzureWebappPtrInput` via:
//
//	        InfrastructureDefinitionAzureWebappArgs{...}
//
//	or:
//
//	        nil
type InfrastructureDefinitionAzureWebappPtrInput interface {
	pulumi.Input

	ToInfrastructureDefinitionAzureWebappPtrOutput() InfrastructureDefinitionAzureWebappPtrOutput
	ToInfrastructureDefinitionAzureWebappPtrOutputWithContext(context.Context) InfrastructureDefinitionAzureWebappPtrOutput
}

type infrastructureDefinitionAzureWebappPtrType InfrastructureDefinitionAzureWebappArgs

func InfrastructureDefinitionAzureWebappPtr(v *InfrastructureDefinitionAzureWebappArgs) InfrastructureDefinitionAzureWebappPtrInput {
	return (*infrastructureDefinitionAzureWebappPtrType)(v)
}

func (*infrastructureDefinitionAzureWebappPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionAzureWebapp)(nil)).Elem()
}

func (i *infrastructureDefinitionAzureWebappPtrType) ToInfrastructureDefinitionAzureWebappPtrOutput() InfrastructureDefinitionAzureWebappPtrOutput {
	return i.ToInfrastructureDefinitionAzureWebappPtrOutputWithContext(context.Background())
}

func (i *infrastructureDefinitionAzureWebappPtrType) ToInfrastructureDefinitionAzureWebappPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAzureWebappPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionAzureWebappPtrOutput)
}

type InfrastructureDefinitionAzureWebappOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionAzureWebappOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionAzureWebapp)(nil)).Elem()
}

func (o InfrastructureDefinitionAzureWebappOutput) ToInfrastructureDefinitionAzureWebappOutput() InfrastructureDefinitionAzureWebappOutput {
	return o
}

func (o InfrastructureDefinitionAzureWebappOutput) ToInfrastructureDefinitionAzureWebappOutputWithContext(ctx context.Context) InfrastructureDefinitionAzureWebappOutput {
	return o
}

func (o InfrastructureDefinitionAzureWebappOutput) ToInfrastructureDefinitionAzureWebappPtrOutput() InfrastructureDefinitionAzureWebappPtrOutput {
	return o.ToInfrastructureDefinitionAzureWebappPtrOutputWithContext(context.Background())
}

func (o InfrastructureDefinitionAzureWebappOutput) ToInfrastructureDefinitionAzureWebappPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAzureWebappPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InfrastructureDefinitionAzureWebapp) *InfrastructureDefinitionAzureWebapp {
		return &v
	}).(InfrastructureDefinitionAzureWebappPtrOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionAzureWebappOutput) CloudProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAzureWebapp) string { return v.CloudProviderName }).(pulumi.StringOutput)
}

// The name of the resource group.
func (o InfrastructureDefinitionAzureWebappOutput) ResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAzureWebapp) string { return v.ResourceGroup }).(pulumi.StringOutput)
}

// The unique id of the azure subscription.
func (o InfrastructureDefinitionAzureWebappOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionAzureWebapp) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

type InfrastructureDefinitionAzureWebappPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionAzureWebappPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionAzureWebapp)(nil)).Elem()
}

func (o InfrastructureDefinitionAzureWebappPtrOutput) ToInfrastructureDefinitionAzureWebappPtrOutput() InfrastructureDefinitionAzureWebappPtrOutput {
	return o
}

func (o InfrastructureDefinitionAzureWebappPtrOutput) ToInfrastructureDefinitionAzureWebappPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionAzureWebappPtrOutput {
	return o
}

func (o InfrastructureDefinitionAzureWebappPtrOutput) Elem() InfrastructureDefinitionAzureWebappOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAzureWebapp) InfrastructureDefinitionAzureWebapp {
		if v != nil {
			return *v
		}
		var ret InfrastructureDefinitionAzureWebapp
		return ret
	}).(InfrastructureDefinitionAzureWebappOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionAzureWebappPtrOutput) CloudProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAzureWebapp) *string {
		if v == nil {
			return nil
		}
		return &v.CloudProviderName
	}).(pulumi.StringPtrOutput)
}

// The name of the resource group.
func (o InfrastructureDefinitionAzureWebappPtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAzureWebapp) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// The unique id of the azure subscription.
func (o InfrastructureDefinitionAzureWebappPtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionAzureWebapp) *string {
		if v == nil {
			return nil
		}
		return &v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

type InfrastructureDefinitionCustom struct {
	// The template version
	DeploymentTypeTemplateVersion string `pulumi:"deploymentTypeTemplateVersion"`
	// Variables to be used in the service
	Variables []InfrastructureDefinitionCustomVariable `pulumi:"variables"`
}

// InfrastructureDefinitionCustomInput is an input type that accepts InfrastructureDefinitionCustomArgs and InfrastructureDefinitionCustomOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionCustomInput` via:
//
//	InfrastructureDefinitionCustomArgs{...}
type InfrastructureDefinitionCustomInput interface {
	pulumi.Input

	ToInfrastructureDefinitionCustomOutput() InfrastructureDefinitionCustomOutput
	ToInfrastructureDefinitionCustomOutputWithContext(context.Context) InfrastructureDefinitionCustomOutput
}

type InfrastructureDefinitionCustomArgs struct {
	// The template version
	DeploymentTypeTemplateVersion pulumi.StringInput `pulumi:"deploymentTypeTemplateVersion"`
	// Variables to be used in the service
	Variables InfrastructureDefinitionCustomVariableArrayInput `pulumi:"variables"`
}

func (InfrastructureDefinitionCustomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionCustom)(nil)).Elem()
}

func (i InfrastructureDefinitionCustomArgs) ToInfrastructureDefinitionCustomOutput() InfrastructureDefinitionCustomOutput {
	return i.ToInfrastructureDefinitionCustomOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionCustomArgs) ToInfrastructureDefinitionCustomOutputWithContext(ctx context.Context) InfrastructureDefinitionCustomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionCustomOutput)
}

func (i InfrastructureDefinitionCustomArgs) ToInfrastructureDefinitionCustomPtrOutput() InfrastructureDefinitionCustomPtrOutput {
	return i.ToInfrastructureDefinitionCustomPtrOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionCustomArgs) ToInfrastructureDefinitionCustomPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionCustomPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionCustomOutput).ToInfrastructureDefinitionCustomPtrOutputWithContext(ctx)
}

// InfrastructureDefinitionCustomPtrInput is an input type that accepts InfrastructureDefinitionCustomArgs, InfrastructureDefinitionCustomPtr and InfrastructureDefinitionCustomPtrOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionCustomPtrInput` via:
//
//	        InfrastructureDefinitionCustomArgs{...}
//
//	or:
//
//	        nil
type InfrastructureDefinitionCustomPtrInput interface {
	pulumi.Input

	ToInfrastructureDefinitionCustomPtrOutput() InfrastructureDefinitionCustomPtrOutput
	ToInfrastructureDefinitionCustomPtrOutputWithContext(context.Context) InfrastructureDefinitionCustomPtrOutput
}

type infrastructureDefinitionCustomPtrType InfrastructureDefinitionCustomArgs

func InfrastructureDefinitionCustomPtr(v *InfrastructureDefinitionCustomArgs) InfrastructureDefinitionCustomPtrInput {
	return (*infrastructureDefinitionCustomPtrType)(v)
}

func (*infrastructureDefinitionCustomPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionCustom)(nil)).Elem()
}

func (i *infrastructureDefinitionCustomPtrType) ToInfrastructureDefinitionCustomPtrOutput() InfrastructureDefinitionCustomPtrOutput {
	return i.ToInfrastructureDefinitionCustomPtrOutputWithContext(context.Background())
}

func (i *infrastructureDefinitionCustomPtrType) ToInfrastructureDefinitionCustomPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionCustomPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionCustomPtrOutput)
}

type InfrastructureDefinitionCustomOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionCustomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionCustom)(nil)).Elem()
}

func (o InfrastructureDefinitionCustomOutput) ToInfrastructureDefinitionCustomOutput() InfrastructureDefinitionCustomOutput {
	return o
}

func (o InfrastructureDefinitionCustomOutput) ToInfrastructureDefinitionCustomOutputWithContext(ctx context.Context) InfrastructureDefinitionCustomOutput {
	return o
}

func (o InfrastructureDefinitionCustomOutput) ToInfrastructureDefinitionCustomPtrOutput() InfrastructureDefinitionCustomPtrOutput {
	return o.ToInfrastructureDefinitionCustomPtrOutputWithContext(context.Background())
}

func (o InfrastructureDefinitionCustomOutput) ToInfrastructureDefinitionCustomPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionCustomPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InfrastructureDefinitionCustom) *InfrastructureDefinitionCustom {
		return &v
	}).(InfrastructureDefinitionCustomPtrOutput)
}

// The template version
func (o InfrastructureDefinitionCustomOutput) DeploymentTypeTemplateVersion() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionCustom) string { return v.DeploymentTypeTemplateVersion }).(pulumi.StringOutput)
}

// Variables to be used in the service
func (o InfrastructureDefinitionCustomOutput) Variables() InfrastructureDefinitionCustomVariableArrayOutput {
	return o.ApplyT(func(v InfrastructureDefinitionCustom) []InfrastructureDefinitionCustomVariable { return v.Variables }).(InfrastructureDefinitionCustomVariableArrayOutput)
}

type InfrastructureDefinitionCustomPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionCustomPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionCustom)(nil)).Elem()
}

func (o InfrastructureDefinitionCustomPtrOutput) ToInfrastructureDefinitionCustomPtrOutput() InfrastructureDefinitionCustomPtrOutput {
	return o
}

func (o InfrastructureDefinitionCustomPtrOutput) ToInfrastructureDefinitionCustomPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionCustomPtrOutput {
	return o
}

func (o InfrastructureDefinitionCustomPtrOutput) Elem() InfrastructureDefinitionCustomOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionCustom) InfrastructureDefinitionCustom {
		if v != nil {
			return *v
		}
		var ret InfrastructureDefinitionCustom
		return ret
	}).(InfrastructureDefinitionCustomOutput)
}

// The template version
func (o InfrastructureDefinitionCustomPtrOutput) DeploymentTypeTemplateVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionCustom) *string {
		if v == nil {
			return nil
		}
		return &v.DeploymentTypeTemplateVersion
	}).(pulumi.StringPtrOutput)
}

// Variables to be used in the service
func (o InfrastructureDefinitionCustomPtrOutput) Variables() InfrastructureDefinitionCustomVariableArrayOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionCustom) []InfrastructureDefinitionCustomVariable {
		if v == nil {
			return nil
		}
		return v.Variables
	}).(InfrastructureDefinitionCustomVariableArrayOutput)
}

type InfrastructureDefinitionCustomVariable struct {
	// Name of the variable
	Name string `pulumi:"name"`
	// Value of the variable
	Value string `pulumi:"value"`
}

// InfrastructureDefinitionCustomVariableInput is an input type that accepts InfrastructureDefinitionCustomVariableArgs and InfrastructureDefinitionCustomVariableOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionCustomVariableInput` via:
//
//	InfrastructureDefinitionCustomVariableArgs{...}
type InfrastructureDefinitionCustomVariableInput interface {
	pulumi.Input

	ToInfrastructureDefinitionCustomVariableOutput() InfrastructureDefinitionCustomVariableOutput
	ToInfrastructureDefinitionCustomVariableOutputWithContext(context.Context) InfrastructureDefinitionCustomVariableOutput
}

type InfrastructureDefinitionCustomVariableArgs struct {
	// Name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Value of the variable
	Value pulumi.StringInput `pulumi:"value"`
}

func (InfrastructureDefinitionCustomVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionCustomVariable)(nil)).Elem()
}

func (i InfrastructureDefinitionCustomVariableArgs) ToInfrastructureDefinitionCustomVariableOutput() InfrastructureDefinitionCustomVariableOutput {
	return i.ToInfrastructureDefinitionCustomVariableOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionCustomVariableArgs) ToInfrastructureDefinitionCustomVariableOutputWithContext(ctx context.Context) InfrastructureDefinitionCustomVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionCustomVariableOutput)
}

// InfrastructureDefinitionCustomVariableArrayInput is an input type that accepts InfrastructureDefinitionCustomVariableArray and InfrastructureDefinitionCustomVariableArrayOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionCustomVariableArrayInput` via:
//
//	InfrastructureDefinitionCustomVariableArray{ InfrastructureDefinitionCustomVariableArgs{...} }
type InfrastructureDefinitionCustomVariableArrayInput interface {
	pulumi.Input

	ToInfrastructureDefinitionCustomVariableArrayOutput() InfrastructureDefinitionCustomVariableArrayOutput
	ToInfrastructureDefinitionCustomVariableArrayOutputWithContext(context.Context) InfrastructureDefinitionCustomVariableArrayOutput
}

type InfrastructureDefinitionCustomVariableArray []InfrastructureDefinitionCustomVariableInput

func (InfrastructureDefinitionCustomVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InfrastructureDefinitionCustomVariable)(nil)).Elem()
}

func (i InfrastructureDefinitionCustomVariableArray) ToInfrastructureDefinitionCustomVariableArrayOutput() InfrastructureDefinitionCustomVariableArrayOutput {
	return i.ToInfrastructureDefinitionCustomVariableArrayOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionCustomVariableArray) ToInfrastructureDefinitionCustomVariableArrayOutputWithContext(ctx context.Context) InfrastructureDefinitionCustomVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionCustomVariableArrayOutput)
}

type InfrastructureDefinitionCustomVariableOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionCustomVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionCustomVariable)(nil)).Elem()
}

func (o InfrastructureDefinitionCustomVariableOutput) ToInfrastructureDefinitionCustomVariableOutput() InfrastructureDefinitionCustomVariableOutput {
	return o
}

func (o InfrastructureDefinitionCustomVariableOutput) ToInfrastructureDefinitionCustomVariableOutputWithContext(ctx context.Context) InfrastructureDefinitionCustomVariableOutput {
	return o
}

// Name of the variable
func (o InfrastructureDefinitionCustomVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionCustomVariable) string { return v.Name }).(pulumi.StringOutput)
}

// Value of the variable
func (o InfrastructureDefinitionCustomVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionCustomVariable) string { return v.Value }).(pulumi.StringOutput)
}

type InfrastructureDefinitionCustomVariableArrayOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionCustomVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InfrastructureDefinitionCustomVariable)(nil)).Elem()
}

func (o InfrastructureDefinitionCustomVariableArrayOutput) ToInfrastructureDefinitionCustomVariableArrayOutput() InfrastructureDefinitionCustomVariableArrayOutput {
	return o
}

func (o InfrastructureDefinitionCustomVariableArrayOutput) ToInfrastructureDefinitionCustomVariableArrayOutputWithContext(ctx context.Context) InfrastructureDefinitionCustomVariableArrayOutput {
	return o
}

func (o InfrastructureDefinitionCustomVariableArrayOutput) Index(i pulumi.IntInput) InfrastructureDefinitionCustomVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InfrastructureDefinitionCustomVariable {
		return vs[0].([]InfrastructureDefinitionCustomVariable)[vs[1].(int)]
	}).(InfrastructureDefinitionCustomVariableOutput)
}

type InfrastructureDefinitionDatacenterSsh struct {
	// The name of the cloud provider to connect with.
	CloudProviderName string `pulumi:"cloudProviderName"`
	// The name of the SSH connection attributes to use.
	HostConnectionAttributesName string `pulumi:"hostConnectionAttributesName"`
	// A list of hosts to deploy to.
	Hostnames []string `pulumi:"hostnames"`
}

// InfrastructureDefinitionDatacenterSshInput is an input type that accepts InfrastructureDefinitionDatacenterSshArgs and InfrastructureDefinitionDatacenterSshOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionDatacenterSshInput` via:
//
//	InfrastructureDefinitionDatacenterSshArgs{...}
type InfrastructureDefinitionDatacenterSshInput interface {
	pulumi.Input

	ToInfrastructureDefinitionDatacenterSshOutput() InfrastructureDefinitionDatacenterSshOutput
	ToInfrastructureDefinitionDatacenterSshOutputWithContext(context.Context) InfrastructureDefinitionDatacenterSshOutput
}

type InfrastructureDefinitionDatacenterSshArgs struct {
	// The name of the cloud provider to connect with.
	CloudProviderName pulumi.StringInput `pulumi:"cloudProviderName"`
	// The name of the SSH connection attributes to use.
	HostConnectionAttributesName pulumi.StringInput `pulumi:"hostConnectionAttributesName"`
	// A list of hosts to deploy to.
	Hostnames pulumi.StringArrayInput `pulumi:"hostnames"`
}

func (InfrastructureDefinitionDatacenterSshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionDatacenterSsh)(nil)).Elem()
}

func (i InfrastructureDefinitionDatacenterSshArgs) ToInfrastructureDefinitionDatacenterSshOutput() InfrastructureDefinitionDatacenterSshOutput {
	return i.ToInfrastructureDefinitionDatacenterSshOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionDatacenterSshArgs) ToInfrastructureDefinitionDatacenterSshOutputWithContext(ctx context.Context) InfrastructureDefinitionDatacenterSshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionDatacenterSshOutput)
}

func (i InfrastructureDefinitionDatacenterSshArgs) ToInfrastructureDefinitionDatacenterSshPtrOutput() InfrastructureDefinitionDatacenterSshPtrOutput {
	return i.ToInfrastructureDefinitionDatacenterSshPtrOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionDatacenterSshArgs) ToInfrastructureDefinitionDatacenterSshPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionDatacenterSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionDatacenterSshOutput).ToInfrastructureDefinitionDatacenterSshPtrOutputWithContext(ctx)
}

// InfrastructureDefinitionDatacenterSshPtrInput is an input type that accepts InfrastructureDefinitionDatacenterSshArgs, InfrastructureDefinitionDatacenterSshPtr and InfrastructureDefinitionDatacenterSshPtrOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionDatacenterSshPtrInput` via:
//
//	        InfrastructureDefinitionDatacenterSshArgs{...}
//
//	or:
//
//	        nil
type InfrastructureDefinitionDatacenterSshPtrInput interface {
	pulumi.Input

	ToInfrastructureDefinitionDatacenterSshPtrOutput() InfrastructureDefinitionDatacenterSshPtrOutput
	ToInfrastructureDefinitionDatacenterSshPtrOutputWithContext(context.Context) InfrastructureDefinitionDatacenterSshPtrOutput
}

type infrastructureDefinitionDatacenterSshPtrType InfrastructureDefinitionDatacenterSshArgs

func InfrastructureDefinitionDatacenterSshPtr(v *InfrastructureDefinitionDatacenterSshArgs) InfrastructureDefinitionDatacenterSshPtrInput {
	return (*infrastructureDefinitionDatacenterSshPtrType)(v)
}

func (*infrastructureDefinitionDatacenterSshPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionDatacenterSsh)(nil)).Elem()
}

func (i *infrastructureDefinitionDatacenterSshPtrType) ToInfrastructureDefinitionDatacenterSshPtrOutput() InfrastructureDefinitionDatacenterSshPtrOutput {
	return i.ToInfrastructureDefinitionDatacenterSshPtrOutputWithContext(context.Background())
}

func (i *infrastructureDefinitionDatacenterSshPtrType) ToInfrastructureDefinitionDatacenterSshPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionDatacenterSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionDatacenterSshPtrOutput)
}

type InfrastructureDefinitionDatacenterSshOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionDatacenterSshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionDatacenterSsh)(nil)).Elem()
}

func (o InfrastructureDefinitionDatacenterSshOutput) ToInfrastructureDefinitionDatacenterSshOutput() InfrastructureDefinitionDatacenterSshOutput {
	return o
}

func (o InfrastructureDefinitionDatacenterSshOutput) ToInfrastructureDefinitionDatacenterSshOutputWithContext(ctx context.Context) InfrastructureDefinitionDatacenterSshOutput {
	return o
}

func (o InfrastructureDefinitionDatacenterSshOutput) ToInfrastructureDefinitionDatacenterSshPtrOutput() InfrastructureDefinitionDatacenterSshPtrOutput {
	return o.ToInfrastructureDefinitionDatacenterSshPtrOutputWithContext(context.Background())
}

func (o InfrastructureDefinitionDatacenterSshOutput) ToInfrastructureDefinitionDatacenterSshPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionDatacenterSshPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InfrastructureDefinitionDatacenterSsh) *InfrastructureDefinitionDatacenterSsh {
		return &v
	}).(InfrastructureDefinitionDatacenterSshPtrOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionDatacenterSshOutput) CloudProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionDatacenterSsh) string { return v.CloudProviderName }).(pulumi.StringOutput)
}

// The name of the SSH connection attributes to use.
func (o InfrastructureDefinitionDatacenterSshOutput) HostConnectionAttributesName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionDatacenterSsh) string { return v.HostConnectionAttributesName }).(pulumi.StringOutput)
}

// A list of hosts to deploy to.
func (o InfrastructureDefinitionDatacenterSshOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InfrastructureDefinitionDatacenterSsh) []string { return v.Hostnames }).(pulumi.StringArrayOutput)
}

type InfrastructureDefinitionDatacenterSshPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionDatacenterSshPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionDatacenterSsh)(nil)).Elem()
}

func (o InfrastructureDefinitionDatacenterSshPtrOutput) ToInfrastructureDefinitionDatacenterSshPtrOutput() InfrastructureDefinitionDatacenterSshPtrOutput {
	return o
}

func (o InfrastructureDefinitionDatacenterSshPtrOutput) ToInfrastructureDefinitionDatacenterSshPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionDatacenterSshPtrOutput {
	return o
}

func (o InfrastructureDefinitionDatacenterSshPtrOutput) Elem() InfrastructureDefinitionDatacenterSshOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionDatacenterSsh) InfrastructureDefinitionDatacenterSsh {
		if v != nil {
			return *v
		}
		var ret InfrastructureDefinitionDatacenterSsh
		return ret
	}).(InfrastructureDefinitionDatacenterSshOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionDatacenterSshPtrOutput) CloudProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionDatacenterSsh) *string {
		if v == nil {
			return nil
		}
		return &v.CloudProviderName
	}).(pulumi.StringPtrOutput)
}

// The name of the SSH connection attributes to use.
func (o InfrastructureDefinitionDatacenterSshPtrOutput) HostConnectionAttributesName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionDatacenterSsh) *string {
		if v == nil {
			return nil
		}
		return &v.HostConnectionAttributesName
	}).(pulumi.StringPtrOutput)
}

// A list of hosts to deploy to.
func (o InfrastructureDefinitionDatacenterSshPtrOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionDatacenterSsh) []string {
		if v == nil {
			return nil
		}
		return v.Hostnames
	}).(pulumi.StringArrayOutput)
}

type InfrastructureDefinitionDatacenterWinrm struct {
	// The name of the cloud provider to connect with.
	CloudProviderName string `pulumi:"cloudProviderName"`
	// A list of hosts to deploy to.
	Hostnames []string `pulumi:"hostnames"`
	// The name of the WinRM connection attributes to use.
	WinrmConnectionAttributesName string `pulumi:"winrmConnectionAttributesName"`
}

// InfrastructureDefinitionDatacenterWinrmInput is an input type that accepts InfrastructureDefinitionDatacenterWinrmArgs and InfrastructureDefinitionDatacenterWinrmOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionDatacenterWinrmInput` via:
//
//	InfrastructureDefinitionDatacenterWinrmArgs{...}
type InfrastructureDefinitionDatacenterWinrmInput interface {
	pulumi.Input

	ToInfrastructureDefinitionDatacenterWinrmOutput() InfrastructureDefinitionDatacenterWinrmOutput
	ToInfrastructureDefinitionDatacenterWinrmOutputWithContext(context.Context) InfrastructureDefinitionDatacenterWinrmOutput
}

type InfrastructureDefinitionDatacenterWinrmArgs struct {
	// The name of the cloud provider to connect with.
	CloudProviderName pulumi.StringInput `pulumi:"cloudProviderName"`
	// A list of hosts to deploy to.
	Hostnames pulumi.StringArrayInput `pulumi:"hostnames"`
	// The name of the WinRM connection attributes to use.
	WinrmConnectionAttributesName pulumi.StringInput `pulumi:"winrmConnectionAttributesName"`
}

func (InfrastructureDefinitionDatacenterWinrmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionDatacenterWinrm)(nil)).Elem()
}

func (i InfrastructureDefinitionDatacenterWinrmArgs) ToInfrastructureDefinitionDatacenterWinrmOutput() InfrastructureDefinitionDatacenterWinrmOutput {
	return i.ToInfrastructureDefinitionDatacenterWinrmOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionDatacenterWinrmArgs) ToInfrastructureDefinitionDatacenterWinrmOutputWithContext(ctx context.Context) InfrastructureDefinitionDatacenterWinrmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionDatacenterWinrmOutput)
}

func (i InfrastructureDefinitionDatacenterWinrmArgs) ToInfrastructureDefinitionDatacenterWinrmPtrOutput() InfrastructureDefinitionDatacenterWinrmPtrOutput {
	return i.ToInfrastructureDefinitionDatacenterWinrmPtrOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionDatacenterWinrmArgs) ToInfrastructureDefinitionDatacenterWinrmPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionDatacenterWinrmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionDatacenterWinrmOutput).ToInfrastructureDefinitionDatacenterWinrmPtrOutputWithContext(ctx)
}

// InfrastructureDefinitionDatacenterWinrmPtrInput is an input type that accepts InfrastructureDefinitionDatacenterWinrmArgs, InfrastructureDefinitionDatacenterWinrmPtr and InfrastructureDefinitionDatacenterWinrmPtrOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionDatacenterWinrmPtrInput` via:
//
//	        InfrastructureDefinitionDatacenterWinrmArgs{...}
//
//	or:
//
//	        nil
type InfrastructureDefinitionDatacenterWinrmPtrInput interface {
	pulumi.Input

	ToInfrastructureDefinitionDatacenterWinrmPtrOutput() InfrastructureDefinitionDatacenterWinrmPtrOutput
	ToInfrastructureDefinitionDatacenterWinrmPtrOutputWithContext(context.Context) InfrastructureDefinitionDatacenterWinrmPtrOutput
}

type infrastructureDefinitionDatacenterWinrmPtrType InfrastructureDefinitionDatacenterWinrmArgs

func InfrastructureDefinitionDatacenterWinrmPtr(v *InfrastructureDefinitionDatacenterWinrmArgs) InfrastructureDefinitionDatacenterWinrmPtrInput {
	return (*infrastructureDefinitionDatacenterWinrmPtrType)(v)
}

func (*infrastructureDefinitionDatacenterWinrmPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionDatacenterWinrm)(nil)).Elem()
}

func (i *infrastructureDefinitionDatacenterWinrmPtrType) ToInfrastructureDefinitionDatacenterWinrmPtrOutput() InfrastructureDefinitionDatacenterWinrmPtrOutput {
	return i.ToInfrastructureDefinitionDatacenterWinrmPtrOutputWithContext(context.Background())
}

func (i *infrastructureDefinitionDatacenterWinrmPtrType) ToInfrastructureDefinitionDatacenterWinrmPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionDatacenterWinrmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionDatacenterWinrmPtrOutput)
}

type InfrastructureDefinitionDatacenterWinrmOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionDatacenterWinrmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionDatacenterWinrm)(nil)).Elem()
}

func (o InfrastructureDefinitionDatacenterWinrmOutput) ToInfrastructureDefinitionDatacenterWinrmOutput() InfrastructureDefinitionDatacenterWinrmOutput {
	return o
}

func (o InfrastructureDefinitionDatacenterWinrmOutput) ToInfrastructureDefinitionDatacenterWinrmOutputWithContext(ctx context.Context) InfrastructureDefinitionDatacenterWinrmOutput {
	return o
}

func (o InfrastructureDefinitionDatacenterWinrmOutput) ToInfrastructureDefinitionDatacenterWinrmPtrOutput() InfrastructureDefinitionDatacenterWinrmPtrOutput {
	return o.ToInfrastructureDefinitionDatacenterWinrmPtrOutputWithContext(context.Background())
}

func (o InfrastructureDefinitionDatacenterWinrmOutput) ToInfrastructureDefinitionDatacenterWinrmPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionDatacenterWinrmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InfrastructureDefinitionDatacenterWinrm) *InfrastructureDefinitionDatacenterWinrm {
		return &v
	}).(InfrastructureDefinitionDatacenterWinrmPtrOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionDatacenterWinrmOutput) CloudProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionDatacenterWinrm) string { return v.CloudProviderName }).(pulumi.StringOutput)
}

// A list of hosts to deploy to.
func (o InfrastructureDefinitionDatacenterWinrmOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InfrastructureDefinitionDatacenterWinrm) []string { return v.Hostnames }).(pulumi.StringArrayOutput)
}

// The name of the WinRM connection attributes to use.
func (o InfrastructureDefinitionDatacenterWinrmOutput) WinrmConnectionAttributesName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionDatacenterWinrm) string { return v.WinrmConnectionAttributesName }).(pulumi.StringOutput)
}

type InfrastructureDefinitionDatacenterWinrmPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionDatacenterWinrmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionDatacenterWinrm)(nil)).Elem()
}

func (o InfrastructureDefinitionDatacenterWinrmPtrOutput) ToInfrastructureDefinitionDatacenterWinrmPtrOutput() InfrastructureDefinitionDatacenterWinrmPtrOutput {
	return o
}

func (o InfrastructureDefinitionDatacenterWinrmPtrOutput) ToInfrastructureDefinitionDatacenterWinrmPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionDatacenterWinrmPtrOutput {
	return o
}

func (o InfrastructureDefinitionDatacenterWinrmPtrOutput) Elem() InfrastructureDefinitionDatacenterWinrmOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionDatacenterWinrm) InfrastructureDefinitionDatacenterWinrm {
		if v != nil {
			return *v
		}
		var ret InfrastructureDefinitionDatacenterWinrm
		return ret
	}).(InfrastructureDefinitionDatacenterWinrmOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionDatacenterWinrmPtrOutput) CloudProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionDatacenterWinrm) *string {
		if v == nil {
			return nil
		}
		return &v.CloudProviderName
	}).(pulumi.StringPtrOutput)
}

// A list of hosts to deploy to.
func (o InfrastructureDefinitionDatacenterWinrmPtrOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionDatacenterWinrm) []string {
		if v == nil {
			return nil
		}
		return v.Hostnames
	}).(pulumi.StringArrayOutput)
}

// The name of the WinRM connection attributes to use.
func (o InfrastructureDefinitionDatacenterWinrmPtrOutput) WinrmConnectionAttributesName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionDatacenterWinrm) *string {
		if v == nil {
			return nil
		}
		return &v.WinrmConnectionAttributesName
	}).(pulumi.StringPtrOutput)
}

type InfrastructureDefinitionKubernetes struct {
	// The name of the cloud provider to connect with.
	CloudProviderName string `pulumi:"cloudProviderName"`
	// The namespace in Kubernetes to deploy to.
	Namespace string `pulumi:"namespace"`
	// The naming convention of the release. When using Helm Native the default is ${infra.kubernetes.infraId}. For standard Kubernetes manifests the default is release-${infra.kubernetes.infraId}
	ReleaseName string `pulumi:"releaseName"`
}

// InfrastructureDefinitionKubernetesInput is an input type that accepts InfrastructureDefinitionKubernetesArgs and InfrastructureDefinitionKubernetesOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionKubernetesInput` via:
//
//	InfrastructureDefinitionKubernetesArgs{...}
type InfrastructureDefinitionKubernetesInput interface {
	pulumi.Input

	ToInfrastructureDefinitionKubernetesOutput() InfrastructureDefinitionKubernetesOutput
	ToInfrastructureDefinitionKubernetesOutputWithContext(context.Context) InfrastructureDefinitionKubernetesOutput
}

type InfrastructureDefinitionKubernetesArgs struct {
	// The name of the cloud provider to connect with.
	CloudProviderName pulumi.StringInput `pulumi:"cloudProviderName"`
	// The namespace in Kubernetes to deploy to.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// The naming convention of the release. When using Helm Native the default is ${infra.kubernetes.infraId}. For standard Kubernetes manifests the default is release-${infra.kubernetes.infraId}
	ReleaseName pulumi.StringInput `pulumi:"releaseName"`
}

func (InfrastructureDefinitionKubernetesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionKubernetes)(nil)).Elem()
}

func (i InfrastructureDefinitionKubernetesArgs) ToInfrastructureDefinitionKubernetesOutput() InfrastructureDefinitionKubernetesOutput {
	return i.ToInfrastructureDefinitionKubernetesOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionKubernetesArgs) ToInfrastructureDefinitionKubernetesOutputWithContext(ctx context.Context) InfrastructureDefinitionKubernetesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionKubernetesOutput)
}

func (i InfrastructureDefinitionKubernetesArgs) ToInfrastructureDefinitionKubernetesPtrOutput() InfrastructureDefinitionKubernetesPtrOutput {
	return i.ToInfrastructureDefinitionKubernetesPtrOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionKubernetesArgs) ToInfrastructureDefinitionKubernetesPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionKubernetesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionKubernetesOutput).ToInfrastructureDefinitionKubernetesPtrOutputWithContext(ctx)
}

// InfrastructureDefinitionKubernetesPtrInput is an input type that accepts InfrastructureDefinitionKubernetesArgs, InfrastructureDefinitionKubernetesPtr and InfrastructureDefinitionKubernetesPtrOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionKubernetesPtrInput` via:
//
//	        InfrastructureDefinitionKubernetesArgs{...}
//
//	or:
//
//	        nil
type InfrastructureDefinitionKubernetesPtrInput interface {
	pulumi.Input

	ToInfrastructureDefinitionKubernetesPtrOutput() InfrastructureDefinitionKubernetesPtrOutput
	ToInfrastructureDefinitionKubernetesPtrOutputWithContext(context.Context) InfrastructureDefinitionKubernetesPtrOutput
}

type infrastructureDefinitionKubernetesPtrType InfrastructureDefinitionKubernetesArgs

func InfrastructureDefinitionKubernetesPtr(v *InfrastructureDefinitionKubernetesArgs) InfrastructureDefinitionKubernetesPtrInput {
	return (*infrastructureDefinitionKubernetesPtrType)(v)
}

func (*infrastructureDefinitionKubernetesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionKubernetes)(nil)).Elem()
}

func (i *infrastructureDefinitionKubernetesPtrType) ToInfrastructureDefinitionKubernetesPtrOutput() InfrastructureDefinitionKubernetesPtrOutput {
	return i.ToInfrastructureDefinitionKubernetesPtrOutputWithContext(context.Background())
}

func (i *infrastructureDefinitionKubernetesPtrType) ToInfrastructureDefinitionKubernetesPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionKubernetesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionKubernetesPtrOutput)
}

type InfrastructureDefinitionKubernetesOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionKubernetesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionKubernetes)(nil)).Elem()
}

func (o InfrastructureDefinitionKubernetesOutput) ToInfrastructureDefinitionKubernetesOutput() InfrastructureDefinitionKubernetesOutput {
	return o
}

func (o InfrastructureDefinitionKubernetesOutput) ToInfrastructureDefinitionKubernetesOutputWithContext(ctx context.Context) InfrastructureDefinitionKubernetesOutput {
	return o
}

func (o InfrastructureDefinitionKubernetesOutput) ToInfrastructureDefinitionKubernetesPtrOutput() InfrastructureDefinitionKubernetesPtrOutput {
	return o.ToInfrastructureDefinitionKubernetesPtrOutputWithContext(context.Background())
}

func (o InfrastructureDefinitionKubernetesOutput) ToInfrastructureDefinitionKubernetesPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionKubernetesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InfrastructureDefinitionKubernetes) *InfrastructureDefinitionKubernetes {
		return &v
	}).(InfrastructureDefinitionKubernetesPtrOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionKubernetesOutput) CloudProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionKubernetes) string { return v.CloudProviderName }).(pulumi.StringOutput)
}

// The namespace in Kubernetes to deploy to.
func (o InfrastructureDefinitionKubernetesOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionKubernetes) string { return v.Namespace }).(pulumi.StringOutput)
}

// The naming convention of the release. When using Helm Native the default is ${infra.kubernetes.infraId}. For standard Kubernetes manifests the default is release-${infra.kubernetes.infraId}
func (o InfrastructureDefinitionKubernetesOutput) ReleaseName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionKubernetes) string { return v.ReleaseName }).(pulumi.StringOutput)
}

type InfrastructureDefinitionKubernetesPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionKubernetesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionKubernetes)(nil)).Elem()
}

func (o InfrastructureDefinitionKubernetesPtrOutput) ToInfrastructureDefinitionKubernetesPtrOutput() InfrastructureDefinitionKubernetesPtrOutput {
	return o
}

func (o InfrastructureDefinitionKubernetesPtrOutput) ToInfrastructureDefinitionKubernetesPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionKubernetesPtrOutput {
	return o
}

func (o InfrastructureDefinitionKubernetesPtrOutput) Elem() InfrastructureDefinitionKubernetesOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionKubernetes) InfrastructureDefinitionKubernetes {
		if v != nil {
			return *v
		}
		var ret InfrastructureDefinitionKubernetes
		return ret
	}).(InfrastructureDefinitionKubernetesOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionKubernetesPtrOutput) CloudProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionKubernetes) *string {
		if v == nil {
			return nil
		}
		return &v.CloudProviderName
	}).(pulumi.StringPtrOutput)
}

// The namespace in Kubernetes to deploy to.
func (o InfrastructureDefinitionKubernetesPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionKubernetes) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The naming convention of the release. When using Helm Native the default is ${infra.kubernetes.infraId}. For standard Kubernetes manifests the default is release-${infra.kubernetes.infraId}
func (o InfrastructureDefinitionKubernetesPtrOutput) ReleaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionKubernetes) *string {
		if v == nil {
			return nil
		}
		return &v.ReleaseName
	}).(pulumi.StringPtrOutput)
}

type InfrastructureDefinitionKubernetesGcp struct {
	// The name of the cloud provider to connect with.
	CloudProviderName string `pulumi:"cloudProviderName"`
	// The name of the cluster being deployed to.
	ClusterName string `pulumi:"clusterName"`
	// The namespace in Kubernetes to deploy to.
	Namespace string `pulumi:"namespace"`
	// The naming convention of the release.
	ReleaseName string `pulumi:"releaseName"`
}

// InfrastructureDefinitionKubernetesGcpInput is an input type that accepts InfrastructureDefinitionKubernetesGcpArgs and InfrastructureDefinitionKubernetesGcpOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionKubernetesGcpInput` via:
//
//	InfrastructureDefinitionKubernetesGcpArgs{...}
type InfrastructureDefinitionKubernetesGcpInput interface {
	pulumi.Input

	ToInfrastructureDefinitionKubernetesGcpOutput() InfrastructureDefinitionKubernetesGcpOutput
	ToInfrastructureDefinitionKubernetesGcpOutputWithContext(context.Context) InfrastructureDefinitionKubernetesGcpOutput
}

type InfrastructureDefinitionKubernetesGcpArgs struct {
	// The name of the cloud provider to connect with.
	CloudProviderName pulumi.StringInput `pulumi:"cloudProviderName"`
	// The name of the cluster being deployed to.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// The namespace in Kubernetes to deploy to.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// The naming convention of the release.
	ReleaseName pulumi.StringInput `pulumi:"releaseName"`
}

func (InfrastructureDefinitionKubernetesGcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionKubernetesGcp)(nil)).Elem()
}

func (i InfrastructureDefinitionKubernetesGcpArgs) ToInfrastructureDefinitionKubernetesGcpOutput() InfrastructureDefinitionKubernetesGcpOutput {
	return i.ToInfrastructureDefinitionKubernetesGcpOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionKubernetesGcpArgs) ToInfrastructureDefinitionKubernetesGcpOutputWithContext(ctx context.Context) InfrastructureDefinitionKubernetesGcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionKubernetesGcpOutput)
}

func (i InfrastructureDefinitionKubernetesGcpArgs) ToInfrastructureDefinitionKubernetesGcpPtrOutput() InfrastructureDefinitionKubernetesGcpPtrOutput {
	return i.ToInfrastructureDefinitionKubernetesGcpPtrOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionKubernetesGcpArgs) ToInfrastructureDefinitionKubernetesGcpPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionKubernetesGcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionKubernetesGcpOutput).ToInfrastructureDefinitionKubernetesGcpPtrOutputWithContext(ctx)
}

// InfrastructureDefinitionKubernetesGcpPtrInput is an input type that accepts InfrastructureDefinitionKubernetesGcpArgs, InfrastructureDefinitionKubernetesGcpPtr and InfrastructureDefinitionKubernetesGcpPtrOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionKubernetesGcpPtrInput` via:
//
//	        InfrastructureDefinitionKubernetesGcpArgs{...}
//
//	or:
//
//	        nil
type InfrastructureDefinitionKubernetesGcpPtrInput interface {
	pulumi.Input

	ToInfrastructureDefinitionKubernetesGcpPtrOutput() InfrastructureDefinitionKubernetesGcpPtrOutput
	ToInfrastructureDefinitionKubernetesGcpPtrOutputWithContext(context.Context) InfrastructureDefinitionKubernetesGcpPtrOutput
}

type infrastructureDefinitionKubernetesGcpPtrType InfrastructureDefinitionKubernetesGcpArgs

func InfrastructureDefinitionKubernetesGcpPtr(v *InfrastructureDefinitionKubernetesGcpArgs) InfrastructureDefinitionKubernetesGcpPtrInput {
	return (*infrastructureDefinitionKubernetesGcpPtrType)(v)
}

func (*infrastructureDefinitionKubernetesGcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionKubernetesGcp)(nil)).Elem()
}

func (i *infrastructureDefinitionKubernetesGcpPtrType) ToInfrastructureDefinitionKubernetesGcpPtrOutput() InfrastructureDefinitionKubernetesGcpPtrOutput {
	return i.ToInfrastructureDefinitionKubernetesGcpPtrOutputWithContext(context.Background())
}

func (i *infrastructureDefinitionKubernetesGcpPtrType) ToInfrastructureDefinitionKubernetesGcpPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionKubernetesGcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionKubernetesGcpPtrOutput)
}

type InfrastructureDefinitionKubernetesGcpOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionKubernetesGcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionKubernetesGcp)(nil)).Elem()
}

func (o InfrastructureDefinitionKubernetesGcpOutput) ToInfrastructureDefinitionKubernetesGcpOutput() InfrastructureDefinitionKubernetesGcpOutput {
	return o
}

func (o InfrastructureDefinitionKubernetesGcpOutput) ToInfrastructureDefinitionKubernetesGcpOutputWithContext(ctx context.Context) InfrastructureDefinitionKubernetesGcpOutput {
	return o
}

func (o InfrastructureDefinitionKubernetesGcpOutput) ToInfrastructureDefinitionKubernetesGcpPtrOutput() InfrastructureDefinitionKubernetesGcpPtrOutput {
	return o.ToInfrastructureDefinitionKubernetesGcpPtrOutputWithContext(context.Background())
}

func (o InfrastructureDefinitionKubernetesGcpOutput) ToInfrastructureDefinitionKubernetesGcpPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionKubernetesGcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InfrastructureDefinitionKubernetesGcp) *InfrastructureDefinitionKubernetesGcp {
		return &v
	}).(InfrastructureDefinitionKubernetesGcpPtrOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionKubernetesGcpOutput) CloudProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionKubernetesGcp) string { return v.CloudProviderName }).(pulumi.StringOutput)
}

// The name of the cluster being deployed to.
func (o InfrastructureDefinitionKubernetesGcpOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionKubernetesGcp) string { return v.ClusterName }).(pulumi.StringOutput)
}

// The namespace in Kubernetes to deploy to.
func (o InfrastructureDefinitionKubernetesGcpOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionKubernetesGcp) string { return v.Namespace }).(pulumi.StringOutput)
}

// The naming convention of the release.
func (o InfrastructureDefinitionKubernetesGcpOutput) ReleaseName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionKubernetesGcp) string { return v.ReleaseName }).(pulumi.StringOutput)
}

type InfrastructureDefinitionKubernetesGcpPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionKubernetesGcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionKubernetesGcp)(nil)).Elem()
}

func (o InfrastructureDefinitionKubernetesGcpPtrOutput) ToInfrastructureDefinitionKubernetesGcpPtrOutput() InfrastructureDefinitionKubernetesGcpPtrOutput {
	return o
}

func (o InfrastructureDefinitionKubernetesGcpPtrOutput) ToInfrastructureDefinitionKubernetesGcpPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionKubernetesGcpPtrOutput {
	return o
}

func (o InfrastructureDefinitionKubernetesGcpPtrOutput) Elem() InfrastructureDefinitionKubernetesGcpOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionKubernetesGcp) InfrastructureDefinitionKubernetesGcp {
		if v != nil {
			return *v
		}
		var ret InfrastructureDefinitionKubernetesGcp
		return ret
	}).(InfrastructureDefinitionKubernetesGcpOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionKubernetesGcpPtrOutput) CloudProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionKubernetesGcp) *string {
		if v == nil {
			return nil
		}
		return &v.CloudProviderName
	}).(pulumi.StringPtrOutput)
}

// The name of the cluster being deployed to.
func (o InfrastructureDefinitionKubernetesGcpPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionKubernetesGcp) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// The namespace in Kubernetes to deploy to.
func (o InfrastructureDefinitionKubernetesGcpPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionKubernetesGcp) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The naming convention of the release.
func (o InfrastructureDefinitionKubernetesGcpPtrOutput) ReleaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionKubernetesGcp) *string {
		if v == nil {
			return nil
		}
		return &v.ReleaseName
	}).(pulumi.StringPtrOutput)
}

type InfrastructureDefinitionTanzu struct {
	// The name of the cloud provider to connect with.
	CloudProviderName string `pulumi:"cloudProviderName"`
	// The PCF organization to use.
	Organization string `pulumi:"organization"`
	// The PCF space to deploy to.
	Space string `pulumi:"space"`
}

// InfrastructureDefinitionTanzuInput is an input type that accepts InfrastructureDefinitionTanzuArgs and InfrastructureDefinitionTanzuOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionTanzuInput` via:
//
//	InfrastructureDefinitionTanzuArgs{...}
type InfrastructureDefinitionTanzuInput interface {
	pulumi.Input

	ToInfrastructureDefinitionTanzuOutput() InfrastructureDefinitionTanzuOutput
	ToInfrastructureDefinitionTanzuOutputWithContext(context.Context) InfrastructureDefinitionTanzuOutput
}

type InfrastructureDefinitionTanzuArgs struct {
	// The name of the cloud provider to connect with.
	CloudProviderName pulumi.StringInput `pulumi:"cloudProviderName"`
	// The PCF organization to use.
	Organization pulumi.StringInput `pulumi:"organization"`
	// The PCF space to deploy to.
	Space pulumi.StringInput `pulumi:"space"`
}

func (InfrastructureDefinitionTanzuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionTanzu)(nil)).Elem()
}

func (i InfrastructureDefinitionTanzuArgs) ToInfrastructureDefinitionTanzuOutput() InfrastructureDefinitionTanzuOutput {
	return i.ToInfrastructureDefinitionTanzuOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionTanzuArgs) ToInfrastructureDefinitionTanzuOutputWithContext(ctx context.Context) InfrastructureDefinitionTanzuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionTanzuOutput)
}

func (i InfrastructureDefinitionTanzuArgs) ToInfrastructureDefinitionTanzuPtrOutput() InfrastructureDefinitionTanzuPtrOutput {
	return i.ToInfrastructureDefinitionTanzuPtrOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionTanzuArgs) ToInfrastructureDefinitionTanzuPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionTanzuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionTanzuOutput).ToInfrastructureDefinitionTanzuPtrOutputWithContext(ctx)
}

// InfrastructureDefinitionTanzuPtrInput is an input type that accepts InfrastructureDefinitionTanzuArgs, InfrastructureDefinitionTanzuPtr and InfrastructureDefinitionTanzuPtrOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionTanzuPtrInput` via:
//
//	        InfrastructureDefinitionTanzuArgs{...}
//
//	or:
//
//	        nil
type InfrastructureDefinitionTanzuPtrInput interface {
	pulumi.Input

	ToInfrastructureDefinitionTanzuPtrOutput() InfrastructureDefinitionTanzuPtrOutput
	ToInfrastructureDefinitionTanzuPtrOutputWithContext(context.Context) InfrastructureDefinitionTanzuPtrOutput
}

type infrastructureDefinitionTanzuPtrType InfrastructureDefinitionTanzuArgs

func InfrastructureDefinitionTanzuPtr(v *InfrastructureDefinitionTanzuArgs) InfrastructureDefinitionTanzuPtrInput {
	return (*infrastructureDefinitionTanzuPtrType)(v)
}

func (*infrastructureDefinitionTanzuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionTanzu)(nil)).Elem()
}

func (i *infrastructureDefinitionTanzuPtrType) ToInfrastructureDefinitionTanzuPtrOutput() InfrastructureDefinitionTanzuPtrOutput {
	return i.ToInfrastructureDefinitionTanzuPtrOutputWithContext(context.Background())
}

func (i *infrastructureDefinitionTanzuPtrType) ToInfrastructureDefinitionTanzuPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionTanzuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionTanzuPtrOutput)
}

type InfrastructureDefinitionTanzuOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionTanzuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionTanzu)(nil)).Elem()
}

func (o InfrastructureDefinitionTanzuOutput) ToInfrastructureDefinitionTanzuOutput() InfrastructureDefinitionTanzuOutput {
	return o
}

func (o InfrastructureDefinitionTanzuOutput) ToInfrastructureDefinitionTanzuOutputWithContext(ctx context.Context) InfrastructureDefinitionTanzuOutput {
	return o
}

func (o InfrastructureDefinitionTanzuOutput) ToInfrastructureDefinitionTanzuPtrOutput() InfrastructureDefinitionTanzuPtrOutput {
	return o.ToInfrastructureDefinitionTanzuPtrOutputWithContext(context.Background())
}

func (o InfrastructureDefinitionTanzuOutput) ToInfrastructureDefinitionTanzuPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionTanzuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InfrastructureDefinitionTanzu) *InfrastructureDefinitionTanzu {
		return &v
	}).(InfrastructureDefinitionTanzuPtrOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionTanzuOutput) CloudProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionTanzu) string { return v.CloudProviderName }).(pulumi.StringOutput)
}

// The PCF organization to use.
func (o InfrastructureDefinitionTanzuOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionTanzu) string { return v.Organization }).(pulumi.StringOutput)
}

// The PCF space to deploy to.
func (o InfrastructureDefinitionTanzuOutput) Space() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionTanzu) string { return v.Space }).(pulumi.StringOutput)
}

type InfrastructureDefinitionTanzuPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionTanzuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionTanzu)(nil)).Elem()
}

func (o InfrastructureDefinitionTanzuPtrOutput) ToInfrastructureDefinitionTanzuPtrOutput() InfrastructureDefinitionTanzuPtrOutput {
	return o
}

func (o InfrastructureDefinitionTanzuPtrOutput) ToInfrastructureDefinitionTanzuPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionTanzuPtrOutput {
	return o
}

func (o InfrastructureDefinitionTanzuPtrOutput) Elem() InfrastructureDefinitionTanzuOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionTanzu) InfrastructureDefinitionTanzu {
		if v != nil {
			return *v
		}
		var ret InfrastructureDefinitionTanzu
		return ret
	}).(InfrastructureDefinitionTanzuOutput)
}

// The name of the cloud provider to connect with.
func (o InfrastructureDefinitionTanzuPtrOutput) CloudProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionTanzu) *string {
		if v == nil {
			return nil
		}
		return &v.CloudProviderName
	}).(pulumi.StringPtrOutput)
}

// The PCF organization to use.
func (o InfrastructureDefinitionTanzuPtrOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionTanzu) *string {
		if v == nil {
			return nil
		}
		return &v.Organization
	}).(pulumi.StringPtrOutput)
}

// The PCF space to deploy to.
func (o InfrastructureDefinitionTanzuPtrOutput) Space() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionTanzu) *string {
		if v == nil {
			return nil
		}
		return &v.Space
	}).(pulumi.StringPtrOutput)
}

type PlatformCcmFiltersFilterProperties struct {
	// Type of CCM filters.
	FilterType string `pulumi:"filterType"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
}

// PlatformCcmFiltersFilterPropertiesInput is an input type that accepts PlatformCcmFiltersFilterPropertiesArgs and PlatformCcmFiltersFilterPropertiesOutput values.
// You can construct a concrete instance of `PlatformCcmFiltersFilterPropertiesInput` via:
//
//	PlatformCcmFiltersFilterPropertiesArgs{...}
type PlatformCcmFiltersFilterPropertiesInput interface {
	pulumi.Input

	ToPlatformCcmFiltersFilterPropertiesOutput() PlatformCcmFiltersFilterPropertiesOutput
	ToPlatformCcmFiltersFilterPropertiesOutputWithContext(context.Context) PlatformCcmFiltersFilterPropertiesOutput
}

type PlatformCcmFiltersFilterPropertiesArgs struct {
	// Type of CCM filters.
	FilterType pulumi.StringInput `pulumi:"filterType"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (PlatformCcmFiltersFilterPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformCcmFiltersFilterProperties)(nil)).Elem()
}

func (i PlatformCcmFiltersFilterPropertiesArgs) ToPlatformCcmFiltersFilterPropertiesOutput() PlatformCcmFiltersFilterPropertiesOutput {
	return i.ToPlatformCcmFiltersFilterPropertiesOutputWithContext(context.Background())
}

func (i PlatformCcmFiltersFilterPropertiesArgs) ToPlatformCcmFiltersFilterPropertiesOutputWithContext(ctx context.Context) PlatformCcmFiltersFilterPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformCcmFiltersFilterPropertiesOutput)
}

func (i PlatformCcmFiltersFilterPropertiesArgs) ToPlatformCcmFiltersFilterPropertiesPtrOutput() PlatformCcmFiltersFilterPropertiesPtrOutput {
	return i.ToPlatformCcmFiltersFilterPropertiesPtrOutputWithContext(context.Background())
}

func (i PlatformCcmFiltersFilterPropertiesArgs) ToPlatformCcmFiltersFilterPropertiesPtrOutputWithContext(ctx context.Context) PlatformCcmFiltersFilterPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformCcmFiltersFilterPropertiesOutput).ToPlatformCcmFiltersFilterPropertiesPtrOutputWithContext(ctx)
}

// PlatformCcmFiltersFilterPropertiesPtrInput is an input type that accepts PlatformCcmFiltersFilterPropertiesArgs, PlatformCcmFiltersFilterPropertiesPtr and PlatformCcmFiltersFilterPropertiesPtrOutput values.
// You can construct a concrete instance of `PlatformCcmFiltersFilterPropertiesPtrInput` via:
//
//	        PlatformCcmFiltersFilterPropertiesArgs{...}
//
//	or:
//
//	        nil
type PlatformCcmFiltersFilterPropertiesPtrInput interface {
	pulumi.Input

	ToPlatformCcmFiltersFilterPropertiesPtrOutput() PlatformCcmFiltersFilterPropertiesPtrOutput
	ToPlatformCcmFiltersFilterPropertiesPtrOutputWithContext(context.Context) PlatformCcmFiltersFilterPropertiesPtrOutput
}

type platformCcmFiltersFilterPropertiesPtrType PlatformCcmFiltersFilterPropertiesArgs

func PlatformCcmFiltersFilterPropertiesPtr(v *PlatformCcmFiltersFilterPropertiesArgs) PlatformCcmFiltersFilterPropertiesPtrInput {
	return (*platformCcmFiltersFilterPropertiesPtrType)(v)
}

func (*platformCcmFiltersFilterPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlatformCcmFiltersFilterProperties)(nil)).Elem()
}

func (i *platformCcmFiltersFilterPropertiesPtrType) ToPlatformCcmFiltersFilterPropertiesPtrOutput() PlatformCcmFiltersFilterPropertiesPtrOutput {
	return i.ToPlatformCcmFiltersFilterPropertiesPtrOutputWithContext(context.Background())
}

func (i *platformCcmFiltersFilterPropertiesPtrType) ToPlatformCcmFiltersFilterPropertiesPtrOutputWithContext(ctx context.Context) PlatformCcmFiltersFilterPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformCcmFiltersFilterPropertiesPtrOutput)
}

type PlatformCcmFiltersFilterPropertiesOutput struct{ *pulumi.OutputState }

func (PlatformCcmFiltersFilterPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformCcmFiltersFilterProperties)(nil)).Elem()
}

func (o PlatformCcmFiltersFilterPropertiesOutput) ToPlatformCcmFiltersFilterPropertiesOutput() PlatformCcmFiltersFilterPropertiesOutput {
	return o
}

func (o PlatformCcmFiltersFilterPropertiesOutput) ToPlatformCcmFiltersFilterPropertiesOutputWithContext(ctx context.Context) PlatformCcmFiltersFilterPropertiesOutput {
	return o
}

func (o PlatformCcmFiltersFilterPropertiesOutput) ToPlatformCcmFiltersFilterPropertiesPtrOutput() PlatformCcmFiltersFilterPropertiesPtrOutput {
	return o.ToPlatformCcmFiltersFilterPropertiesPtrOutputWithContext(context.Background())
}

func (o PlatformCcmFiltersFilterPropertiesOutput) ToPlatformCcmFiltersFilterPropertiesPtrOutputWithContext(ctx context.Context) PlatformCcmFiltersFilterPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlatformCcmFiltersFilterProperties) *PlatformCcmFiltersFilterProperties {
		return &v
	}).(PlatformCcmFiltersFilterPropertiesPtrOutput)
}

// Type of CCM filters.
func (o PlatformCcmFiltersFilterPropertiesOutput) FilterType() pulumi.StringOutput {
	return o.ApplyT(func(v PlatformCcmFiltersFilterProperties) string { return v.FilterType }).(pulumi.StringOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o PlatformCcmFiltersFilterPropertiesOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PlatformCcmFiltersFilterProperties) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type PlatformCcmFiltersFilterPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PlatformCcmFiltersFilterPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlatformCcmFiltersFilterProperties)(nil)).Elem()
}

func (o PlatformCcmFiltersFilterPropertiesPtrOutput) ToPlatformCcmFiltersFilterPropertiesPtrOutput() PlatformCcmFiltersFilterPropertiesPtrOutput {
	return o
}

func (o PlatformCcmFiltersFilterPropertiesPtrOutput) ToPlatformCcmFiltersFilterPropertiesPtrOutputWithContext(ctx context.Context) PlatformCcmFiltersFilterPropertiesPtrOutput {
	return o
}

func (o PlatformCcmFiltersFilterPropertiesPtrOutput) Elem() PlatformCcmFiltersFilterPropertiesOutput {
	return o.ApplyT(func(v *PlatformCcmFiltersFilterProperties) PlatformCcmFiltersFilterProperties {
		if v != nil {
			return *v
		}
		var ret PlatformCcmFiltersFilterProperties
		return ret
	}).(PlatformCcmFiltersFilterPropertiesOutput)
}

// Type of CCM filters.
func (o PlatformCcmFiltersFilterPropertiesPtrOutput) FilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlatformCcmFiltersFilterProperties) *string {
		if v == nil {
			return nil
		}
		return &v.FilterType
	}).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o PlatformCcmFiltersFilterPropertiesPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PlatformCcmFiltersFilterProperties) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

type SshCredentialKerberosAuthentication struct {
	// Port to use for Kerberos authentication
	Port int `pulumi:"port"`
	// Name of the principal for authentication
	Principal string `pulumi:"principal"`
	// Realm associated with the Kerberos authentication
	Realm string `pulumi:"realm"`
	// TGT generation method
	TgtGenerationMethod *SshCredentialKerberosAuthenticationTgtGenerationMethod `pulumi:"tgtGenerationMethod"`
}

// SshCredentialKerberosAuthenticationInput is an input type that accepts SshCredentialKerberosAuthenticationArgs and SshCredentialKerberosAuthenticationOutput values.
// You can construct a concrete instance of `SshCredentialKerberosAuthenticationInput` via:
//
//	SshCredentialKerberosAuthenticationArgs{...}
type SshCredentialKerberosAuthenticationInput interface {
	pulumi.Input

	ToSshCredentialKerberosAuthenticationOutput() SshCredentialKerberosAuthenticationOutput
	ToSshCredentialKerberosAuthenticationOutputWithContext(context.Context) SshCredentialKerberosAuthenticationOutput
}

type SshCredentialKerberosAuthenticationArgs struct {
	// Port to use for Kerberos authentication
	Port pulumi.IntInput `pulumi:"port"`
	// Name of the principal for authentication
	Principal pulumi.StringInput `pulumi:"principal"`
	// Realm associated with the Kerberos authentication
	Realm pulumi.StringInput `pulumi:"realm"`
	// TGT generation method
	TgtGenerationMethod SshCredentialKerberosAuthenticationTgtGenerationMethodPtrInput `pulumi:"tgtGenerationMethod"`
}

func (SshCredentialKerberosAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshCredentialKerberosAuthentication)(nil)).Elem()
}

func (i SshCredentialKerberosAuthenticationArgs) ToSshCredentialKerberosAuthenticationOutput() SshCredentialKerberosAuthenticationOutput {
	return i.ToSshCredentialKerberosAuthenticationOutputWithContext(context.Background())
}

func (i SshCredentialKerberosAuthenticationArgs) ToSshCredentialKerberosAuthenticationOutputWithContext(ctx context.Context) SshCredentialKerberosAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialKerberosAuthenticationOutput)
}

func (i SshCredentialKerberosAuthenticationArgs) ToSshCredentialKerberosAuthenticationPtrOutput() SshCredentialKerberosAuthenticationPtrOutput {
	return i.ToSshCredentialKerberosAuthenticationPtrOutputWithContext(context.Background())
}

func (i SshCredentialKerberosAuthenticationArgs) ToSshCredentialKerberosAuthenticationPtrOutputWithContext(ctx context.Context) SshCredentialKerberosAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialKerberosAuthenticationOutput).ToSshCredentialKerberosAuthenticationPtrOutputWithContext(ctx)
}

// SshCredentialKerberosAuthenticationPtrInput is an input type that accepts SshCredentialKerberosAuthenticationArgs, SshCredentialKerberosAuthenticationPtr and SshCredentialKerberosAuthenticationPtrOutput values.
// You can construct a concrete instance of `SshCredentialKerberosAuthenticationPtrInput` via:
//
//	        SshCredentialKerberosAuthenticationArgs{...}
//
//	or:
//
//	        nil
type SshCredentialKerberosAuthenticationPtrInput interface {
	pulumi.Input

	ToSshCredentialKerberosAuthenticationPtrOutput() SshCredentialKerberosAuthenticationPtrOutput
	ToSshCredentialKerberosAuthenticationPtrOutputWithContext(context.Context) SshCredentialKerberosAuthenticationPtrOutput
}

type sshCredentialKerberosAuthenticationPtrType SshCredentialKerberosAuthenticationArgs

func SshCredentialKerberosAuthenticationPtr(v *SshCredentialKerberosAuthenticationArgs) SshCredentialKerberosAuthenticationPtrInput {
	return (*sshCredentialKerberosAuthenticationPtrType)(v)
}

func (*sshCredentialKerberosAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SshCredentialKerberosAuthentication)(nil)).Elem()
}

func (i *sshCredentialKerberosAuthenticationPtrType) ToSshCredentialKerberosAuthenticationPtrOutput() SshCredentialKerberosAuthenticationPtrOutput {
	return i.ToSshCredentialKerberosAuthenticationPtrOutputWithContext(context.Background())
}

func (i *sshCredentialKerberosAuthenticationPtrType) ToSshCredentialKerberosAuthenticationPtrOutputWithContext(ctx context.Context) SshCredentialKerberosAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialKerberosAuthenticationPtrOutput)
}

type SshCredentialKerberosAuthenticationOutput struct{ *pulumi.OutputState }

func (SshCredentialKerberosAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshCredentialKerberosAuthentication)(nil)).Elem()
}

func (o SshCredentialKerberosAuthenticationOutput) ToSshCredentialKerberosAuthenticationOutput() SshCredentialKerberosAuthenticationOutput {
	return o
}

func (o SshCredentialKerberosAuthenticationOutput) ToSshCredentialKerberosAuthenticationOutputWithContext(ctx context.Context) SshCredentialKerberosAuthenticationOutput {
	return o
}

func (o SshCredentialKerberosAuthenticationOutput) ToSshCredentialKerberosAuthenticationPtrOutput() SshCredentialKerberosAuthenticationPtrOutput {
	return o.ToSshCredentialKerberosAuthenticationPtrOutputWithContext(context.Background())
}

func (o SshCredentialKerberosAuthenticationOutput) ToSshCredentialKerberosAuthenticationPtrOutputWithContext(ctx context.Context) SshCredentialKerberosAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SshCredentialKerberosAuthentication) *SshCredentialKerberosAuthentication {
		return &v
	}).(SshCredentialKerberosAuthenticationPtrOutput)
}

// Port to use for Kerberos authentication
func (o SshCredentialKerberosAuthenticationOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v SshCredentialKerberosAuthentication) int { return v.Port }).(pulumi.IntOutput)
}

// Name of the principal for authentication
func (o SshCredentialKerberosAuthenticationOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v SshCredentialKerberosAuthentication) string { return v.Principal }).(pulumi.StringOutput)
}

// Realm associated with the Kerberos authentication
func (o SshCredentialKerberosAuthenticationOutput) Realm() pulumi.StringOutput {
	return o.ApplyT(func(v SshCredentialKerberosAuthentication) string { return v.Realm }).(pulumi.StringOutput)
}

// TGT generation method
func (o SshCredentialKerberosAuthenticationOutput) TgtGenerationMethod() SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput {
	return o.ApplyT(func(v SshCredentialKerberosAuthentication) *SshCredentialKerberosAuthenticationTgtGenerationMethod {
		return v.TgtGenerationMethod
	}).(SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput)
}

type SshCredentialKerberosAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (SshCredentialKerberosAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshCredentialKerberosAuthentication)(nil)).Elem()
}

func (o SshCredentialKerberosAuthenticationPtrOutput) ToSshCredentialKerberosAuthenticationPtrOutput() SshCredentialKerberosAuthenticationPtrOutput {
	return o
}

func (o SshCredentialKerberosAuthenticationPtrOutput) ToSshCredentialKerberosAuthenticationPtrOutputWithContext(ctx context.Context) SshCredentialKerberosAuthenticationPtrOutput {
	return o
}

func (o SshCredentialKerberosAuthenticationPtrOutput) Elem() SshCredentialKerberosAuthenticationOutput {
	return o.ApplyT(func(v *SshCredentialKerberosAuthentication) SshCredentialKerberosAuthentication {
		if v != nil {
			return *v
		}
		var ret SshCredentialKerberosAuthentication
		return ret
	}).(SshCredentialKerberosAuthenticationOutput)
}

// Port to use for Kerberos authentication
func (o SshCredentialKerberosAuthenticationPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SshCredentialKerberosAuthentication) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Name of the principal for authentication
func (o SshCredentialKerberosAuthenticationPtrOutput) Principal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshCredentialKerberosAuthentication) *string {
		if v == nil {
			return nil
		}
		return &v.Principal
	}).(pulumi.StringPtrOutput)
}

// Realm associated with the Kerberos authentication
func (o SshCredentialKerberosAuthenticationPtrOutput) Realm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshCredentialKerberosAuthentication) *string {
		if v == nil {
			return nil
		}
		return &v.Realm
	}).(pulumi.StringPtrOutput)
}

// TGT generation method
func (o SshCredentialKerberosAuthenticationPtrOutput) TgtGenerationMethod() SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput {
	return o.ApplyT(func(v *SshCredentialKerberosAuthentication) *SshCredentialKerberosAuthenticationTgtGenerationMethod {
		if v == nil {
			return nil
		}
		return v.TgtGenerationMethod
	}).(SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput)
}

type SshCredentialKerberosAuthenticationTgtGenerationMethod struct {
	// The id of the encrypted text secret
	KerberosPasswordId *string `pulumi:"kerberosPasswordId"`
	// The path to the key tab file
	KeyTabFilePath *string `pulumi:"keyTabFilePath"`
}

// SshCredentialKerberosAuthenticationTgtGenerationMethodInput is an input type that accepts SshCredentialKerberosAuthenticationTgtGenerationMethodArgs and SshCredentialKerberosAuthenticationTgtGenerationMethodOutput values.
// You can construct a concrete instance of `SshCredentialKerberosAuthenticationTgtGenerationMethodInput` via:
//
//	SshCredentialKerberosAuthenticationTgtGenerationMethodArgs{...}
type SshCredentialKerberosAuthenticationTgtGenerationMethodInput interface {
	pulumi.Input

	ToSshCredentialKerberosAuthenticationTgtGenerationMethodOutput() SshCredentialKerberosAuthenticationTgtGenerationMethodOutput
	ToSshCredentialKerberosAuthenticationTgtGenerationMethodOutputWithContext(context.Context) SshCredentialKerberosAuthenticationTgtGenerationMethodOutput
}

type SshCredentialKerberosAuthenticationTgtGenerationMethodArgs struct {
	// The id of the encrypted text secret
	KerberosPasswordId pulumi.StringPtrInput `pulumi:"kerberosPasswordId"`
	// The path to the key tab file
	KeyTabFilePath pulumi.StringPtrInput `pulumi:"keyTabFilePath"`
}

func (SshCredentialKerberosAuthenticationTgtGenerationMethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshCredentialKerberosAuthenticationTgtGenerationMethod)(nil)).Elem()
}

func (i SshCredentialKerberosAuthenticationTgtGenerationMethodArgs) ToSshCredentialKerberosAuthenticationTgtGenerationMethodOutput() SshCredentialKerberosAuthenticationTgtGenerationMethodOutput {
	return i.ToSshCredentialKerberosAuthenticationTgtGenerationMethodOutputWithContext(context.Background())
}

func (i SshCredentialKerberosAuthenticationTgtGenerationMethodArgs) ToSshCredentialKerberosAuthenticationTgtGenerationMethodOutputWithContext(ctx context.Context) SshCredentialKerberosAuthenticationTgtGenerationMethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialKerberosAuthenticationTgtGenerationMethodOutput)
}

func (i SshCredentialKerberosAuthenticationTgtGenerationMethodArgs) ToSshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput() SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput {
	return i.ToSshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutputWithContext(context.Background())
}

func (i SshCredentialKerberosAuthenticationTgtGenerationMethodArgs) ToSshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutputWithContext(ctx context.Context) SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialKerberosAuthenticationTgtGenerationMethodOutput).ToSshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutputWithContext(ctx)
}

// SshCredentialKerberosAuthenticationTgtGenerationMethodPtrInput is an input type that accepts SshCredentialKerberosAuthenticationTgtGenerationMethodArgs, SshCredentialKerberosAuthenticationTgtGenerationMethodPtr and SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput values.
// You can construct a concrete instance of `SshCredentialKerberosAuthenticationTgtGenerationMethodPtrInput` via:
//
//	        SshCredentialKerberosAuthenticationTgtGenerationMethodArgs{...}
//
//	or:
//
//	        nil
type SshCredentialKerberosAuthenticationTgtGenerationMethodPtrInput interface {
	pulumi.Input

	ToSshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput() SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput
	ToSshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutputWithContext(context.Context) SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput
}

type sshCredentialKerberosAuthenticationTgtGenerationMethodPtrType SshCredentialKerberosAuthenticationTgtGenerationMethodArgs

func SshCredentialKerberosAuthenticationTgtGenerationMethodPtr(v *SshCredentialKerberosAuthenticationTgtGenerationMethodArgs) SshCredentialKerberosAuthenticationTgtGenerationMethodPtrInput {
	return (*sshCredentialKerberosAuthenticationTgtGenerationMethodPtrType)(v)
}

func (*sshCredentialKerberosAuthenticationTgtGenerationMethodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SshCredentialKerberosAuthenticationTgtGenerationMethod)(nil)).Elem()
}

func (i *sshCredentialKerberosAuthenticationTgtGenerationMethodPtrType) ToSshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput() SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput {
	return i.ToSshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutputWithContext(context.Background())
}

func (i *sshCredentialKerberosAuthenticationTgtGenerationMethodPtrType) ToSshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutputWithContext(ctx context.Context) SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput)
}

type SshCredentialKerberosAuthenticationTgtGenerationMethodOutput struct{ *pulumi.OutputState }

func (SshCredentialKerberosAuthenticationTgtGenerationMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshCredentialKerberosAuthenticationTgtGenerationMethod)(nil)).Elem()
}

func (o SshCredentialKerberosAuthenticationTgtGenerationMethodOutput) ToSshCredentialKerberosAuthenticationTgtGenerationMethodOutput() SshCredentialKerberosAuthenticationTgtGenerationMethodOutput {
	return o
}

func (o SshCredentialKerberosAuthenticationTgtGenerationMethodOutput) ToSshCredentialKerberosAuthenticationTgtGenerationMethodOutputWithContext(ctx context.Context) SshCredentialKerberosAuthenticationTgtGenerationMethodOutput {
	return o
}

func (o SshCredentialKerberosAuthenticationTgtGenerationMethodOutput) ToSshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput() SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput {
	return o.ToSshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutputWithContext(context.Background())
}

func (o SshCredentialKerberosAuthenticationTgtGenerationMethodOutput) ToSshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutputWithContext(ctx context.Context) SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SshCredentialKerberosAuthenticationTgtGenerationMethod) *SshCredentialKerberosAuthenticationTgtGenerationMethod {
		return &v
	}).(SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput)
}

// The id of the encrypted text secret
func (o SshCredentialKerberosAuthenticationTgtGenerationMethodOutput) KerberosPasswordId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshCredentialKerberosAuthenticationTgtGenerationMethod) *string { return v.KerberosPasswordId }).(pulumi.StringPtrOutput)
}

// The path to the key tab file
func (o SshCredentialKerberosAuthenticationTgtGenerationMethodOutput) KeyTabFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshCredentialKerberosAuthenticationTgtGenerationMethod) *string { return v.KeyTabFilePath }).(pulumi.StringPtrOutput)
}

type SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput struct{ *pulumi.OutputState }

func (SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshCredentialKerberosAuthenticationTgtGenerationMethod)(nil)).Elem()
}

func (o SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput) ToSshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput() SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput {
	return o
}

func (o SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput) ToSshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutputWithContext(ctx context.Context) SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput {
	return o
}

func (o SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput) Elem() SshCredentialKerberosAuthenticationTgtGenerationMethodOutput {
	return o.ApplyT(func(v *SshCredentialKerberosAuthenticationTgtGenerationMethod) SshCredentialKerberosAuthenticationTgtGenerationMethod {
		if v != nil {
			return *v
		}
		var ret SshCredentialKerberosAuthenticationTgtGenerationMethod
		return ret
	}).(SshCredentialKerberosAuthenticationTgtGenerationMethodOutput)
}

// The id of the encrypted text secret
func (o SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput) KerberosPasswordId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshCredentialKerberosAuthenticationTgtGenerationMethod) *string {
		if v == nil {
			return nil
		}
		return v.KerberosPasswordId
	}).(pulumi.StringPtrOutput)
}

// The path to the key tab file
func (o SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput) KeyTabFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshCredentialKerberosAuthenticationTgtGenerationMethod) *string {
		if v == nil {
			return nil
		}
		return v.KeyTabFilePath
	}).(pulumi.StringPtrOutput)
}

type SshCredentialSshAuthentication struct {
	// Inline SSH authentication configuration. Only ond of `passphraseSecretId` or `sshKeyFileId` should be used
	InlineSsh *SshCredentialSshAuthenticationInlineSsh `pulumi:"inlineSsh"`
	// The port to connect to
	Port int `pulumi:"port"`
	// Server password authentication configuration
	ServerPassword *SshCredentialSshAuthenticationServerPassword `pulumi:"serverPassword"`
	// Use ssh key file for authentication
	SshKeyFile *SshCredentialSshAuthenticationSshKeyFile `pulumi:"sshKeyFile"`
	// The username to use when connecting to ssh
	Username string `pulumi:"username"`
}

// SshCredentialSshAuthenticationInput is an input type that accepts SshCredentialSshAuthenticationArgs and SshCredentialSshAuthenticationOutput values.
// You can construct a concrete instance of `SshCredentialSshAuthenticationInput` via:
//
//	SshCredentialSshAuthenticationArgs{...}
type SshCredentialSshAuthenticationInput interface {
	pulumi.Input

	ToSshCredentialSshAuthenticationOutput() SshCredentialSshAuthenticationOutput
	ToSshCredentialSshAuthenticationOutputWithContext(context.Context) SshCredentialSshAuthenticationOutput
}

type SshCredentialSshAuthenticationArgs struct {
	// Inline SSH authentication configuration. Only ond of `passphraseSecretId` or `sshKeyFileId` should be used
	InlineSsh SshCredentialSshAuthenticationInlineSshPtrInput `pulumi:"inlineSsh"`
	// The port to connect to
	Port pulumi.IntInput `pulumi:"port"`
	// Server password authentication configuration
	ServerPassword SshCredentialSshAuthenticationServerPasswordPtrInput `pulumi:"serverPassword"`
	// Use ssh key file for authentication
	SshKeyFile SshCredentialSshAuthenticationSshKeyFilePtrInput `pulumi:"sshKeyFile"`
	// The username to use when connecting to ssh
	Username pulumi.StringInput `pulumi:"username"`
}

func (SshCredentialSshAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshCredentialSshAuthentication)(nil)).Elem()
}

func (i SshCredentialSshAuthenticationArgs) ToSshCredentialSshAuthenticationOutput() SshCredentialSshAuthenticationOutput {
	return i.ToSshCredentialSshAuthenticationOutputWithContext(context.Background())
}

func (i SshCredentialSshAuthenticationArgs) ToSshCredentialSshAuthenticationOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialSshAuthenticationOutput)
}

func (i SshCredentialSshAuthenticationArgs) ToSshCredentialSshAuthenticationPtrOutput() SshCredentialSshAuthenticationPtrOutput {
	return i.ToSshCredentialSshAuthenticationPtrOutputWithContext(context.Background())
}

func (i SshCredentialSshAuthenticationArgs) ToSshCredentialSshAuthenticationPtrOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialSshAuthenticationOutput).ToSshCredentialSshAuthenticationPtrOutputWithContext(ctx)
}

// SshCredentialSshAuthenticationPtrInput is an input type that accepts SshCredentialSshAuthenticationArgs, SshCredentialSshAuthenticationPtr and SshCredentialSshAuthenticationPtrOutput values.
// You can construct a concrete instance of `SshCredentialSshAuthenticationPtrInput` via:
//
//	        SshCredentialSshAuthenticationArgs{...}
//
//	or:
//
//	        nil
type SshCredentialSshAuthenticationPtrInput interface {
	pulumi.Input

	ToSshCredentialSshAuthenticationPtrOutput() SshCredentialSshAuthenticationPtrOutput
	ToSshCredentialSshAuthenticationPtrOutputWithContext(context.Context) SshCredentialSshAuthenticationPtrOutput
}

type sshCredentialSshAuthenticationPtrType SshCredentialSshAuthenticationArgs

func SshCredentialSshAuthenticationPtr(v *SshCredentialSshAuthenticationArgs) SshCredentialSshAuthenticationPtrInput {
	return (*sshCredentialSshAuthenticationPtrType)(v)
}

func (*sshCredentialSshAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SshCredentialSshAuthentication)(nil)).Elem()
}

func (i *sshCredentialSshAuthenticationPtrType) ToSshCredentialSshAuthenticationPtrOutput() SshCredentialSshAuthenticationPtrOutput {
	return i.ToSshCredentialSshAuthenticationPtrOutputWithContext(context.Background())
}

func (i *sshCredentialSshAuthenticationPtrType) ToSshCredentialSshAuthenticationPtrOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialSshAuthenticationPtrOutput)
}

type SshCredentialSshAuthenticationOutput struct{ *pulumi.OutputState }

func (SshCredentialSshAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshCredentialSshAuthentication)(nil)).Elem()
}

func (o SshCredentialSshAuthenticationOutput) ToSshCredentialSshAuthenticationOutput() SshCredentialSshAuthenticationOutput {
	return o
}

func (o SshCredentialSshAuthenticationOutput) ToSshCredentialSshAuthenticationOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationOutput {
	return o
}

func (o SshCredentialSshAuthenticationOutput) ToSshCredentialSshAuthenticationPtrOutput() SshCredentialSshAuthenticationPtrOutput {
	return o.ToSshCredentialSshAuthenticationPtrOutputWithContext(context.Background())
}

func (o SshCredentialSshAuthenticationOutput) ToSshCredentialSshAuthenticationPtrOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SshCredentialSshAuthentication) *SshCredentialSshAuthentication {
		return &v
	}).(SshCredentialSshAuthenticationPtrOutput)
}

// Inline SSH authentication configuration. Only ond of `passphraseSecretId` or `sshKeyFileId` should be used
func (o SshCredentialSshAuthenticationOutput) InlineSsh() SshCredentialSshAuthenticationInlineSshPtrOutput {
	return o.ApplyT(func(v SshCredentialSshAuthentication) *SshCredentialSshAuthenticationInlineSsh { return v.InlineSsh }).(SshCredentialSshAuthenticationInlineSshPtrOutput)
}

// The port to connect to
func (o SshCredentialSshAuthenticationOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v SshCredentialSshAuthentication) int { return v.Port }).(pulumi.IntOutput)
}

// Server password authentication configuration
func (o SshCredentialSshAuthenticationOutput) ServerPassword() SshCredentialSshAuthenticationServerPasswordPtrOutput {
	return o.ApplyT(func(v SshCredentialSshAuthentication) *SshCredentialSshAuthenticationServerPassword {
		return v.ServerPassword
	}).(SshCredentialSshAuthenticationServerPasswordPtrOutput)
}

// Use ssh key file for authentication
func (o SshCredentialSshAuthenticationOutput) SshKeyFile() SshCredentialSshAuthenticationSshKeyFilePtrOutput {
	return o.ApplyT(func(v SshCredentialSshAuthentication) *SshCredentialSshAuthenticationSshKeyFile { return v.SshKeyFile }).(SshCredentialSshAuthenticationSshKeyFilePtrOutput)
}

// The username to use when connecting to ssh
func (o SshCredentialSshAuthenticationOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SshCredentialSshAuthentication) string { return v.Username }).(pulumi.StringOutput)
}

type SshCredentialSshAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (SshCredentialSshAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshCredentialSshAuthentication)(nil)).Elem()
}

func (o SshCredentialSshAuthenticationPtrOutput) ToSshCredentialSshAuthenticationPtrOutput() SshCredentialSshAuthenticationPtrOutput {
	return o
}

func (o SshCredentialSshAuthenticationPtrOutput) ToSshCredentialSshAuthenticationPtrOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationPtrOutput {
	return o
}

func (o SshCredentialSshAuthenticationPtrOutput) Elem() SshCredentialSshAuthenticationOutput {
	return o.ApplyT(func(v *SshCredentialSshAuthentication) SshCredentialSshAuthentication {
		if v != nil {
			return *v
		}
		var ret SshCredentialSshAuthentication
		return ret
	}).(SshCredentialSshAuthenticationOutput)
}

// Inline SSH authentication configuration. Only ond of `passphraseSecretId` or `sshKeyFileId` should be used
func (o SshCredentialSshAuthenticationPtrOutput) InlineSsh() SshCredentialSshAuthenticationInlineSshPtrOutput {
	return o.ApplyT(func(v *SshCredentialSshAuthentication) *SshCredentialSshAuthenticationInlineSsh {
		if v == nil {
			return nil
		}
		return v.InlineSsh
	}).(SshCredentialSshAuthenticationInlineSshPtrOutput)
}

// The port to connect to
func (o SshCredentialSshAuthenticationPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SshCredentialSshAuthentication) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Server password authentication configuration
func (o SshCredentialSshAuthenticationPtrOutput) ServerPassword() SshCredentialSshAuthenticationServerPasswordPtrOutput {
	return o.ApplyT(func(v *SshCredentialSshAuthentication) *SshCredentialSshAuthenticationServerPassword {
		if v == nil {
			return nil
		}
		return v.ServerPassword
	}).(SshCredentialSshAuthenticationServerPasswordPtrOutput)
}

// Use ssh key file for authentication
func (o SshCredentialSshAuthenticationPtrOutput) SshKeyFile() SshCredentialSshAuthenticationSshKeyFilePtrOutput {
	return o.ApplyT(func(v *SshCredentialSshAuthentication) *SshCredentialSshAuthenticationSshKeyFile {
		if v == nil {
			return nil
		}
		return v.SshKeyFile
	}).(SshCredentialSshAuthenticationSshKeyFilePtrOutput)
}

// The username to use when connecting to ssh
func (o SshCredentialSshAuthenticationPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshCredentialSshAuthentication) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type SshCredentialSshAuthenticationInlineSsh struct {
	// The id of the encrypted secret to use
	PassphraseSecretId *string `pulumi:"passphraseSecretId"`
	// The id of the secret containing the SSH key
	SshKeyFileId string `pulumi:"sshKeyFileId"`
}

// SshCredentialSshAuthenticationInlineSshInput is an input type that accepts SshCredentialSshAuthenticationInlineSshArgs and SshCredentialSshAuthenticationInlineSshOutput values.
// You can construct a concrete instance of `SshCredentialSshAuthenticationInlineSshInput` via:
//
//	SshCredentialSshAuthenticationInlineSshArgs{...}
type SshCredentialSshAuthenticationInlineSshInput interface {
	pulumi.Input

	ToSshCredentialSshAuthenticationInlineSshOutput() SshCredentialSshAuthenticationInlineSshOutput
	ToSshCredentialSshAuthenticationInlineSshOutputWithContext(context.Context) SshCredentialSshAuthenticationInlineSshOutput
}

type SshCredentialSshAuthenticationInlineSshArgs struct {
	// The id of the encrypted secret to use
	PassphraseSecretId pulumi.StringPtrInput `pulumi:"passphraseSecretId"`
	// The id of the secret containing the SSH key
	SshKeyFileId pulumi.StringInput `pulumi:"sshKeyFileId"`
}

func (SshCredentialSshAuthenticationInlineSshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshCredentialSshAuthenticationInlineSsh)(nil)).Elem()
}

func (i SshCredentialSshAuthenticationInlineSshArgs) ToSshCredentialSshAuthenticationInlineSshOutput() SshCredentialSshAuthenticationInlineSshOutput {
	return i.ToSshCredentialSshAuthenticationInlineSshOutputWithContext(context.Background())
}

func (i SshCredentialSshAuthenticationInlineSshArgs) ToSshCredentialSshAuthenticationInlineSshOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationInlineSshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialSshAuthenticationInlineSshOutput)
}

func (i SshCredentialSshAuthenticationInlineSshArgs) ToSshCredentialSshAuthenticationInlineSshPtrOutput() SshCredentialSshAuthenticationInlineSshPtrOutput {
	return i.ToSshCredentialSshAuthenticationInlineSshPtrOutputWithContext(context.Background())
}

func (i SshCredentialSshAuthenticationInlineSshArgs) ToSshCredentialSshAuthenticationInlineSshPtrOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationInlineSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialSshAuthenticationInlineSshOutput).ToSshCredentialSshAuthenticationInlineSshPtrOutputWithContext(ctx)
}

// SshCredentialSshAuthenticationInlineSshPtrInput is an input type that accepts SshCredentialSshAuthenticationInlineSshArgs, SshCredentialSshAuthenticationInlineSshPtr and SshCredentialSshAuthenticationInlineSshPtrOutput values.
// You can construct a concrete instance of `SshCredentialSshAuthenticationInlineSshPtrInput` via:
//
//	        SshCredentialSshAuthenticationInlineSshArgs{...}
//
//	or:
//
//	        nil
type SshCredentialSshAuthenticationInlineSshPtrInput interface {
	pulumi.Input

	ToSshCredentialSshAuthenticationInlineSshPtrOutput() SshCredentialSshAuthenticationInlineSshPtrOutput
	ToSshCredentialSshAuthenticationInlineSshPtrOutputWithContext(context.Context) SshCredentialSshAuthenticationInlineSshPtrOutput
}

type sshCredentialSshAuthenticationInlineSshPtrType SshCredentialSshAuthenticationInlineSshArgs

func SshCredentialSshAuthenticationInlineSshPtr(v *SshCredentialSshAuthenticationInlineSshArgs) SshCredentialSshAuthenticationInlineSshPtrInput {
	return (*sshCredentialSshAuthenticationInlineSshPtrType)(v)
}

func (*sshCredentialSshAuthenticationInlineSshPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SshCredentialSshAuthenticationInlineSsh)(nil)).Elem()
}

func (i *sshCredentialSshAuthenticationInlineSshPtrType) ToSshCredentialSshAuthenticationInlineSshPtrOutput() SshCredentialSshAuthenticationInlineSshPtrOutput {
	return i.ToSshCredentialSshAuthenticationInlineSshPtrOutputWithContext(context.Background())
}

func (i *sshCredentialSshAuthenticationInlineSshPtrType) ToSshCredentialSshAuthenticationInlineSshPtrOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationInlineSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialSshAuthenticationInlineSshPtrOutput)
}

type SshCredentialSshAuthenticationInlineSshOutput struct{ *pulumi.OutputState }

func (SshCredentialSshAuthenticationInlineSshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshCredentialSshAuthenticationInlineSsh)(nil)).Elem()
}

func (o SshCredentialSshAuthenticationInlineSshOutput) ToSshCredentialSshAuthenticationInlineSshOutput() SshCredentialSshAuthenticationInlineSshOutput {
	return o
}

func (o SshCredentialSshAuthenticationInlineSshOutput) ToSshCredentialSshAuthenticationInlineSshOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationInlineSshOutput {
	return o
}

func (o SshCredentialSshAuthenticationInlineSshOutput) ToSshCredentialSshAuthenticationInlineSshPtrOutput() SshCredentialSshAuthenticationInlineSshPtrOutput {
	return o.ToSshCredentialSshAuthenticationInlineSshPtrOutputWithContext(context.Background())
}

func (o SshCredentialSshAuthenticationInlineSshOutput) ToSshCredentialSshAuthenticationInlineSshPtrOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationInlineSshPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SshCredentialSshAuthenticationInlineSsh) *SshCredentialSshAuthenticationInlineSsh {
		return &v
	}).(SshCredentialSshAuthenticationInlineSshPtrOutput)
}

// The id of the encrypted secret to use
func (o SshCredentialSshAuthenticationInlineSshOutput) PassphraseSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshCredentialSshAuthenticationInlineSsh) *string { return v.PassphraseSecretId }).(pulumi.StringPtrOutput)
}

// The id of the secret containing the SSH key
func (o SshCredentialSshAuthenticationInlineSshOutput) SshKeyFileId() pulumi.StringOutput {
	return o.ApplyT(func(v SshCredentialSshAuthenticationInlineSsh) string { return v.SshKeyFileId }).(pulumi.StringOutput)
}

type SshCredentialSshAuthenticationInlineSshPtrOutput struct{ *pulumi.OutputState }

func (SshCredentialSshAuthenticationInlineSshPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshCredentialSshAuthenticationInlineSsh)(nil)).Elem()
}

func (o SshCredentialSshAuthenticationInlineSshPtrOutput) ToSshCredentialSshAuthenticationInlineSshPtrOutput() SshCredentialSshAuthenticationInlineSshPtrOutput {
	return o
}

func (o SshCredentialSshAuthenticationInlineSshPtrOutput) ToSshCredentialSshAuthenticationInlineSshPtrOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationInlineSshPtrOutput {
	return o
}

func (o SshCredentialSshAuthenticationInlineSshPtrOutput) Elem() SshCredentialSshAuthenticationInlineSshOutput {
	return o.ApplyT(func(v *SshCredentialSshAuthenticationInlineSsh) SshCredentialSshAuthenticationInlineSsh {
		if v != nil {
			return *v
		}
		var ret SshCredentialSshAuthenticationInlineSsh
		return ret
	}).(SshCredentialSshAuthenticationInlineSshOutput)
}

// The id of the encrypted secret to use
func (o SshCredentialSshAuthenticationInlineSshPtrOutput) PassphraseSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshCredentialSshAuthenticationInlineSsh) *string {
		if v == nil {
			return nil
		}
		return v.PassphraseSecretId
	}).(pulumi.StringPtrOutput)
}

// The id of the secret containing the SSH key
func (o SshCredentialSshAuthenticationInlineSshPtrOutput) SshKeyFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshCredentialSshAuthenticationInlineSsh) *string {
		if v == nil {
			return nil
		}
		return &v.SshKeyFileId
	}).(pulumi.StringPtrOutput)
}

type SshCredentialSshAuthenticationServerPassword struct {
	// The id of the encrypted secret
	PasswordSecretId string `pulumi:"passwordSecretId"`
}

// SshCredentialSshAuthenticationServerPasswordInput is an input type that accepts SshCredentialSshAuthenticationServerPasswordArgs and SshCredentialSshAuthenticationServerPasswordOutput values.
// You can construct a concrete instance of `SshCredentialSshAuthenticationServerPasswordInput` via:
//
//	SshCredentialSshAuthenticationServerPasswordArgs{...}
type SshCredentialSshAuthenticationServerPasswordInput interface {
	pulumi.Input

	ToSshCredentialSshAuthenticationServerPasswordOutput() SshCredentialSshAuthenticationServerPasswordOutput
	ToSshCredentialSshAuthenticationServerPasswordOutputWithContext(context.Context) SshCredentialSshAuthenticationServerPasswordOutput
}

type SshCredentialSshAuthenticationServerPasswordArgs struct {
	// The id of the encrypted secret
	PasswordSecretId pulumi.StringInput `pulumi:"passwordSecretId"`
}

func (SshCredentialSshAuthenticationServerPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshCredentialSshAuthenticationServerPassword)(nil)).Elem()
}

func (i SshCredentialSshAuthenticationServerPasswordArgs) ToSshCredentialSshAuthenticationServerPasswordOutput() SshCredentialSshAuthenticationServerPasswordOutput {
	return i.ToSshCredentialSshAuthenticationServerPasswordOutputWithContext(context.Background())
}

func (i SshCredentialSshAuthenticationServerPasswordArgs) ToSshCredentialSshAuthenticationServerPasswordOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationServerPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialSshAuthenticationServerPasswordOutput)
}

func (i SshCredentialSshAuthenticationServerPasswordArgs) ToSshCredentialSshAuthenticationServerPasswordPtrOutput() SshCredentialSshAuthenticationServerPasswordPtrOutput {
	return i.ToSshCredentialSshAuthenticationServerPasswordPtrOutputWithContext(context.Background())
}

func (i SshCredentialSshAuthenticationServerPasswordArgs) ToSshCredentialSshAuthenticationServerPasswordPtrOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationServerPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialSshAuthenticationServerPasswordOutput).ToSshCredentialSshAuthenticationServerPasswordPtrOutputWithContext(ctx)
}

// SshCredentialSshAuthenticationServerPasswordPtrInput is an input type that accepts SshCredentialSshAuthenticationServerPasswordArgs, SshCredentialSshAuthenticationServerPasswordPtr and SshCredentialSshAuthenticationServerPasswordPtrOutput values.
// You can construct a concrete instance of `SshCredentialSshAuthenticationServerPasswordPtrInput` via:
//
//	        SshCredentialSshAuthenticationServerPasswordArgs{...}
//
//	or:
//
//	        nil
type SshCredentialSshAuthenticationServerPasswordPtrInput interface {
	pulumi.Input

	ToSshCredentialSshAuthenticationServerPasswordPtrOutput() SshCredentialSshAuthenticationServerPasswordPtrOutput
	ToSshCredentialSshAuthenticationServerPasswordPtrOutputWithContext(context.Context) SshCredentialSshAuthenticationServerPasswordPtrOutput
}

type sshCredentialSshAuthenticationServerPasswordPtrType SshCredentialSshAuthenticationServerPasswordArgs

func SshCredentialSshAuthenticationServerPasswordPtr(v *SshCredentialSshAuthenticationServerPasswordArgs) SshCredentialSshAuthenticationServerPasswordPtrInput {
	return (*sshCredentialSshAuthenticationServerPasswordPtrType)(v)
}

func (*sshCredentialSshAuthenticationServerPasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SshCredentialSshAuthenticationServerPassword)(nil)).Elem()
}

func (i *sshCredentialSshAuthenticationServerPasswordPtrType) ToSshCredentialSshAuthenticationServerPasswordPtrOutput() SshCredentialSshAuthenticationServerPasswordPtrOutput {
	return i.ToSshCredentialSshAuthenticationServerPasswordPtrOutputWithContext(context.Background())
}

func (i *sshCredentialSshAuthenticationServerPasswordPtrType) ToSshCredentialSshAuthenticationServerPasswordPtrOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationServerPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialSshAuthenticationServerPasswordPtrOutput)
}

type SshCredentialSshAuthenticationServerPasswordOutput struct{ *pulumi.OutputState }

func (SshCredentialSshAuthenticationServerPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshCredentialSshAuthenticationServerPassword)(nil)).Elem()
}

func (o SshCredentialSshAuthenticationServerPasswordOutput) ToSshCredentialSshAuthenticationServerPasswordOutput() SshCredentialSshAuthenticationServerPasswordOutput {
	return o
}

func (o SshCredentialSshAuthenticationServerPasswordOutput) ToSshCredentialSshAuthenticationServerPasswordOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationServerPasswordOutput {
	return o
}

func (o SshCredentialSshAuthenticationServerPasswordOutput) ToSshCredentialSshAuthenticationServerPasswordPtrOutput() SshCredentialSshAuthenticationServerPasswordPtrOutput {
	return o.ToSshCredentialSshAuthenticationServerPasswordPtrOutputWithContext(context.Background())
}

func (o SshCredentialSshAuthenticationServerPasswordOutput) ToSshCredentialSshAuthenticationServerPasswordPtrOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationServerPasswordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SshCredentialSshAuthenticationServerPassword) *SshCredentialSshAuthenticationServerPassword {
		return &v
	}).(SshCredentialSshAuthenticationServerPasswordPtrOutput)
}

// The id of the encrypted secret
func (o SshCredentialSshAuthenticationServerPasswordOutput) PasswordSecretId() pulumi.StringOutput {
	return o.ApplyT(func(v SshCredentialSshAuthenticationServerPassword) string { return v.PasswordSecretId }).(pulumi.StringOutput)
}

type SshCredentialSshAuthenticationServerPasswordPtrOutput struct{ *pulumi.OutputState }

func (SshCredentialSshAuthenticationServerPasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshCredentialSshAuthenticationServerPassword)(nil)).Elem()
}

func (o SshCredentialSshAuthenticationServerPasswordPtrOutput) ToSshCredentialSshAuthenticationServerPasswordPtrOutput() SshCredentialSshAuthenticationServerPasswordPtrOutput {
	return o
}

func (o SshCredentialSshAuthenticationServerPasswordPtrOutput) ToSshCredentialSshAuthenticationServerPasswordPtrOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationServerPasswordPtrOutput {
	return o
}

func (o SshCredentialSshAuthenticationServerPasswordPtrOutput) Elem() SshCredentialSshAuthenticationServerPasswordOutput {
	return o.ApplyT(func(v *SshCredentialSshAuthenticationServerPassword) SshCredentialSshAuthenticationServerPassword {
		if v != nil {
			return *v
		}
		var ret SshCredentialSshAuthenticationServerPassword
		return ret
	}).(SshCredentialSshAuthenticationServerPasswordOutput)
}

// The id of the encrypted secret
func (o SshCredentialSshAuthenticationServerPasswordPtrOutput) PasswordSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshCredentialSshAuthenticationServerPassword) *string {
		if v == nil {
			return nil
		}
		return &v.PasswordSecretId
	}).(pulumi.StringPtrOutput)
}

type SshCredentialSshAuthenticationSshKeyFile struct {
	// The id of the secret containing the password to use for the ssh key
	PassphraseSecretId *string `pulumi:"passphraseSecretId"`
	// The path to the key file on the delegate
	Path string `pulumi:"path"`
}

// SshCredentialSshAuthenticationSshKeyFileInput is an input type that accepts SshCredentialSshAuthenticationSshKeyFileArgs and SshCredentialSshAuthenticationSshKeyFileOutput values.
// You can construct a concrete instance of `SshCredentialSshAuthenticationSshKeyFileInput` via:
//
//	SshCredentialSshAuthenticationSshKeyFileArgs{...}
type SshCredentialSshAuthenticationSshKeyFileInput interface {
	pulumi.Input

	ToSshCredentialSshAuthenticationSshKeyFileOutput() SshCredentialSshAuthenticationSshKeyFileOutput
	ToSshCredentialSshAuthenticationSshKeyFileOutputWithContext(context.Context) SshCredentialSshAuthenticationSshKeyFileOutput
}

type SshCredentialSshAuthenticationSshKeyFileArgs struct {
	// The id of the secret containing the password to use for the ssh key
	PassphraseSecretId pulumi.StringPtrInput `pulumi:"passphraseSecretId"`
	// The path to the key file on the delegate
	Path pulumi.StringInput `pulumi:"path"`
}

func (SshCredentialSshAuthenticationSshKeyFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshCredentialSshAuthenticationSshKeyFile)(nil)).Elem()
}

func (i SshCredentialSshAuthenticationSshKeyFileArgs) ToSshCredentialSshAuthenticationSshKeyFileOutput() SshCredentialSshAuthenticationSshKeyFileOutput {
	return i.ToSshCredentialSshAuthenticationSshKeyFileOutputWithContext(context.Background())
}

func (i SshCredentialSshAuthenticationSshKeyFileArgs) ToSshCredentialSshAuthenticationSshKeyFileOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationSshKeyFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialSshAuthenticationSshKeyFileOutput)
}

func (i SshCredentialSshAuthenticationSshKeyFileArgs) ToSshCredentialSshAuthenticationSshKeyFilePtrOutput() SshCredentialSshAuthenticationSshKeyFilePtrOutput {
	return i.ToSshCredentialSshAuthenticationSshKeyFilePtrOutputWithContext(context.Background())
}

func (i SshCredentialSshAuthenticationSshKeyFileArgs) ToSshCredentialSshAuthenticationSshKeyFilePtrOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationSshKeyFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialSshAuthenticationSshKeyFileOutput).ToSshCredentialSshAuthenticationSshKeyFilePtrOutputWithContext(ctx)
}

// SshCredentialSshAuthenticationSshKeyFilePtrInput is an input type that accepts SshCredentialSshAuthenticationSshKeyFileArgs, SshCredentialSshAuthenticationSshKeyFilePtr and SshCredentialSshAuthenticationSshKeyFilePtrOutput values.
// You can construct a concrete instance of `SshCredentialSshAuthenticationSshKeyFilePtrInput` via:
//
//	        SshCredentialSshAuthenticationSshKeyFileArgs{...}
//
//	or:
//
//	        nil
type SshCredentialSshAuthenticationSshKeyFilePtrInput interface {
	pulumi.Input

	ToSshCredentialSshAuthenticationSshKeyFilePtrOutput() SshCredentialSshAuthenticationSshKeyFilePtrOutput
	ToSshCredentialSshAuthenticationSshKeyFilePtrOutputWithContext(context.Context) SshCredentialSshAuthenticationSshKeyFilePtrOutput
}

type sshCredentialSshAuthenticationSshKeyFilePtrType SshCredentialSshAuthenticationSshKeyFileArgs

func SshCredentialSshAuthenticationSshKeyFilePtr(v *SshCredentialSshAuthenticationSshKeyFileArgs) SshCredentialSshAuthenticationSshKeyFilePtrInput {
	return (*sshCredentialSshAuthenticationSshKeyFilePtrType)(v)
}

func (*sshCredentialSshAuthenticationSshKeyFilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SshCredentialSshAuthenticationSshKeyFile)(nil)).Elem()
}

func (i *sshCredentialSshAuthenticationSshKeyFilePtrType) ToSshCredentialSshAuthenticationSshKeyFilePtrOutput() SshCredentialSshAuthenticationSshKeyFilePtrOutput {
	return i.ToSshCredentialSshAuthenticationSshKeyFilePtrOutputWithContext(context.Background())
}

func (i *sshCredentialSshAuthenticationSshKeyFilePtrType) ToSshCredentialSshAuthenticationSshKeyFilePtrOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationSshKeyFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialSshAuthenticationSshKeyFilePtrOutput)
}

type SshCredentialSshAuthenticationSshKeyFileOutput struct{ *pulumi.OutputState }

func (SshCredentialSshAuthenticationSshKeyFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshCredentialSshAuthenticationSshKeyFile)(nil)).Elem()
}

func (o SshCredentialSshAuthenticationSshKeyFileOutput) ToSshCredentialSshAuthenticationSshKeyFileOutput() SshCredentialSshAuthenticationSshKeyFileOutput {
	return o
}

func (o SshCredentialSshAuthenticationSshKeyFileOutput) ToSshCredentialSshAuthenticationSshKeyFileOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationSshKeyFileOutput {
	return o
}

func (o SshCredentialSshAuthenticationSshKeyFileOutput) ToSshCredentialSshAuthenticationSshKeyFilePtrOutput() SshCredentialSshAuthenticationSshKeyFilePtrOutput {
	return o.ToSshCredentialSshAuthenticationSshKeyFilePtrOutputWithContext(context.Background())
}

func (o SshCredentialSshAuthenticationSshKeyFileOutput) ToSshCredentialSshAuthenticationSshKeyFilePtrOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationSshKeyFilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SshCredentialSshAuthenticationSshKeyFile) *SshCredentialSshAuthenticationSshKeyFile {
		return &v
	}).(SshCredentialSshAuthenticationSshKeyFilePtrOutput)
}

// The id of the secret containing the password to use for the ssh key
func (o SshCredentialSshAuthenticationSshKeyFileOutput) PassphraseSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshCredentialSshAuthenticationSshKeyFile) *string { return v.PassphraseSecretId }).(pulumi.StringPtrOutput)
}

// The path to the key file on the delegate
func (o SshCredentialSshAuthenticationSshKeyFileOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v SshCredentialSshAuthenticationSshKeyFile) string { return v.Path }).(pulumi.StringOutput)
}

type SshCredentialSshAuthenticationSshKeyFilePtrOutput struct{ *pulumi.OutputState }

func (SshCredentialSshAuthenticationSshKeyFilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshCredentialSshAuthenticationSshKeyFile)(nil)).Elem()
}

func (o SshCredentialSshAuthenticationSshKeyFilePtrOutput) ToSshCredentialSshAuthenticationSshKeyFilePtrOutput() SshCredentialSshAuthenticationSshKeyFilePtrOutput {
	return o
}

func (o SshCredentialSshAuthenticationSshKeyFilePtrOutput) ToSshCredentialSshAuthenticationSshKeyFilePtrOutputWithContext(ctx context.Context) SshCredentialSshAuthenticationSshKeyFilePtrOutput {
	return o
}

func (o SshCredentialSshAuthenticationSshKeyFilePtrOutput) Elem() SshCredentialSshAuthenticationSshKeyFileOutput {
	return o.ApplyT(func(v *SshCredentialSshAuthenticationSshKeyFile) SshCredentialSshAuthenticationSshKeyFile {
		if v != nil {
			return *v
		}
		var ret SshCredentialSshAuthenticationSshKeyFile
		return ret
	}).(SshCredentialSshAuthenticationSshKeyFileOutput)
}

// The id of the secret containing the password to use for the ssh key
func (o SshCredentialSshAuthenticationSshKeyFilePtrOutput) PassphraseSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshCredentialSshAuthenticationSshKeyFile) *string {
		if v == nil {
			return nil
		}
		return v.PassphraseSecretId
	}).(pulumi.StringPtrOutput)
}

// The path to the key file on the delegate
func (o SshCredentialSshAuthenticationSshKeyFilePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshCredentialSshAuthenticationSshKeyFile) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

type SshCredentialUsageScope struct {
	// Id of the application to scope to. If empty then this scope applies to all applications.
	ApplicationId *string `pulumi:"applicationId"`
	// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	EnvironmentFilterType *string `pulumi:"environmentFilterType"`
	// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
	EnvironmentId *string `pulumi:"environmentId"`
}

// SshCredentialUsageScopeInput is an input type that accepts SshCredentialUsageScopeArgs and SshCredentialUsageScopeOutput values.
// You can construct a concrete instance of `SshCredentialUsageScopeInput` via:
//
//	SshCredentialUsageScopeArgs{...}
type SshCredentialUsageScopeInput interface {
	pulumi.Input

	ToSshCredentialUsageScopeOutput() SshCredentialUsageScopeOutput
	ToSshCredentialUsageScopeOutputWithContext(context.Context) SshCredentialUsageScopeOutput
}

type SshCredentialUsageScopeArgs struct {
	// Id of the application to scope to. If empty then this scope applies to all applications.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
	// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	EnvironmentFilterType pulumi.StringPtrInput `pulumi:"environmentFilterType"`
	// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
}

func (SshCredentialUsageScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshCredentialUsageScope)(nil)).Elem()
}

func (i SshCredentialUsageScopeArgs) ToSshCredentialUsageScopeOutput() SshCredentialUsageScopeOutput {
	return i.ToSshCredentialUsageScopeOutputWithContext(context.Background())
}

func (i SshCredentialUsageScopeArgs) ToSshCredentialUsageScopeOutputWithContext(ctx context.Context) SshCredentialUsageScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialUsageScopeOutput)
}

// SshCredentialUsageScopeArrayInput is an input type that accepts SshCredentialUsageScopeArray and SshCredentialUsageScopeArrayOutput values.
// You can construct a concrete instance of `SshCredentialUsageScopeArrayInput` via:
//
//	SshCredentialUsageScopeArray{ SshCredentialUsageScopeArgs{...} }
type SshCredentialUsageScopeArrayInput interface {
	pulumi.Input

	ToSshCredentialUsageScopeArrayOutput() SshCredentialUsageScopeArrayOutput
	ToSshCredentialUsageScopeArrayOutputWithContext(context.Context) SshCredentialUsageScopeArrayOutput
}

type SshCredentialUsageScopeArray []SshCredentialUsageScopeInput

func (SshCredentialUsageScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SshCredentialUsageScope)(nil)).Elem()
}

func (i SshCredentialUsageScopeArray) ToSshCredentialUsageScopeArrayOutput() SshCredentialUsageScopeArrayOutput {
	return i.ToSshCredentialUsageScopeArrayOutputWithContext(context.Background())
}

func (i SshCredentialUsageScopeArray) ToSshCredentialUsageScopeArrayOutputWithContext(ctx context.Context) SshCredentialUsageScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshCredentialUsageScopeArrayOutput)
}

type SshCredentialUsageScopeOutput struct{ *pulumi.OutputState }

func (SshCredentialUsageScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshCredentialUsageScope)(nil)).Elem()
}

func (o SshCredentialUsageScopeOutput) ToSshCredentialUsageScopeOutput() SshCredentialUsageScopeOutput {
	return o
}

func (o SshCredentialUsageScopeOutput) ToSshCredentialUsageScopeOutputWithContext(ctx context.Context) SshCredentialUsageScopeOutput {
	return o
}

// Id of the application to scope to. If empty then this scope applies to all applications.
func (o SshCredentialUsageScopeOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshCredentialUsageScope) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
func (o SshCredentialUsageScopeOutput) EnvironmentFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshCredentialUsageScope) *string { return v.EnvironmentFilterType }).(pulumi.StringPtrOutput)
}

// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
func (o SshCredentialUsageScopeOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshCredentialUsageScope) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

type SshCredentialUsageScopeArrayOutput struct{ *pulumi.OutputState }

func (SshCredentialUsageScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SshCredentialUsageScope)(nil)).Elem()
}

func (o SshCredentialUsageScopeArrayOutput) ToSshCredentialUsageScopeArrayOutput() SshCredentialUsageScopeArrayOutput {
	return o
}

func (o SshCredentialUsageScopeArrayOutput) ToSshCredentialUsageScopeArrayOutputWithContext(ctx context.Context) SshCredentialUsageScopeArrayOutput {
	return o
}

func (o SshCredentialUsageScopeArrayOutput) Index(i pulumi.IntInput) SshCredentialUsageScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SshCredentialUsageScope {
		return vs[0].([]SshCredentialUsageScope)[vs[1].(int)]
	}).(SshCredentialUsageScopeOutput)
}

type UserGroupLdapSettings struct {
	// The group DN of the LDAP user group.
	GroupDn *string `pulumi:"groupDn"`
	// The group name of the LDAP user group.
	GroupName *string `pulumi:"groupName"`
	// The ID of the SSO provider.
	SsoProviderId *string `pulumi:"ssoProviderId"`
}

// UserGroupLdapSettingsInput is an input type that accepts UserGroupLdapSettingsArgs and UserGroupLdapSettingsOutput values.
// You can construct a concrete instance of `UserGroupLdapSettingsInput` via:
//
//	UserGroupLdapSettingsArgs{...}
type UserGroupLdapSettingsInput interface {
	pulumi.Input

	ToUserGroupLdapSettingsOutput() UserGroupLdapSettingsOutput
	ToUserGroupLdapSettingsOutputWithContext(context.Context) UserGroupLdapSettingsOutput
}

type UserGroupLdapSettingsArgs struct {
	// The group DN of the LDAP user group.
	GroupDn pulumi.StringPtrInput `pulumi:"groupDn"`
	// The group name of the LDAP user group.
	GroupName pulumi.StringPtrInput `pulumi:"groupName"`
	// The ID of the SSO provider.
	SsoProviderId pulumi.StringPtrInput `pulumi:"ssoProviderId"`
}

func (UserGroupLdapSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupLdapSettings)(nil)).Elem()
}

func (i UserGroupLdapSettingsArgs) ToUserGroupLdapSettingsOutput() UserGroupLdapSettingsOutput {
	return i.ToUserGroupLdapSettingsOutputWithContext(context.Background())
}

func (i UserGroupLdapSettingsArgs) ToUserGroupLdapSettingsOutputWithContext(ctx context.Context) UserGroupLdapSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupLdapSettingsOutput)
}

func (i UserGroupLdapSettingsArgs) ToUserGroupLdapSettingsPtrOutput() UserGroupLdapSettingsPtrOutput {
	return i.ToUserGroupLdapSettingsPtrOutputWithContext(context.Background())
}

func (i UserGroupLdapSettingsArgs) ToUserGroupLdapSettingsPtrOutputWithContext(ctx context.Context) UserGroupLdapSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupLdapSettingsOutput).ToUserGroupLdapSettingsPtrOutputWithContext(ctx)
}

// UserGroupLdapSettingsPtrInput is an input type that accepts UserGroupLdapSettingsArgs, UserGroupLdapSettingsPtr and UserGroupLdapSettingsPtrOutput values.
// You can construct a concrete instance of `UserGroupLdapSettingsPtrInput` via:
//
//	        UserGroupLdapSettingsArgs{...}
//
//	or:
//
//	        nil
type UserGroupLdapSettingsPtrInput interface {
	pulumi.Input

	ToUserGroupLdapSettingsPtrOutput() UserGroupLdapSettingsPtrOutput
	ToUserGroupLdapSettingsPtrOutputWithContext(context.Context) UserGroupLdapSettingsPtrOutput
}

type userGroupLdapSettingsPtrType UserGroupLdapSettingsArgs

func UserGroupLdapSettingsPtr(v *UserGroupLdapSettingsArgs) UserGroupLdapSettingsPtrInput {
	return (*userGroupLdapSettingsPtrType)(v)
}

func (*userGroupLdapSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupLdapSettings)(nil)).Elem()
}

func (i *userGroupLdapSettingsPtrType) ToUserGroupLdapSettingsPtrOutput() UserGroupLdapSettingsPtrOutput {
	return i.ToUserGroupLdapSettingsPtrOutputWithContext(context.Background())
}

func (i *userGroupLdapSettingsPtrType) ToUserGroupLdapSettingsPtrOutputWithContext(ctx context.Context) UserGroupLdapSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupLdapSettingsPtrOutput)
}

type UserGroupLdapSettingsOutput struct{ *pulumi.OutputState }

func (UserGroupLdapSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupLdapSettings)(nil)).Elem()
}

func (o UserGroupLdapSettingsOutput) ToUserGroupLdapSettingsOutput() UserGroupLdapSettingsOutput {
	return o
}

func (o UserGroupLdapSettingsOutput) ToUserGroupLdapSettingsOutputWithContext(ctx context.Context) UserGroupLdapSettingsOutput {
	return o
}

func (o UserGroupLdapSettingsOutput) ToUserGroupLdapSettingsPtrOutput() UserGroupLdapSettingsPtrOutput {
	return o.ToUserGroupLdapSettingsPtrOutputWithContext(context.Background())
}

func (o UserGroupLdapSettingsOutput) ToUserGroupLdapSettingsPtrOutputWithContext(ctx context.Context) UserGroupLdapSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserGroupLdapSettings) *UserGroupLdapSettings {
		return &v
	}).(UserGroupLdapSettingsPtrOutput)
}

// The group DN of the LDAP user group.
func (o UserGroupLdapSettingsOutput) GroupDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserGroupLdapSettings) *string { return v.GroupDn }).(pulumi.StringPtrOutput)
}

// The group name of the LDAP user group.
func (o UserGroupLdapSettingsOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserGroupLdapSettings) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

// The ID of the SSO provider.
func (o UserGroupLdapSettingsOutput) SsoProviderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserGroupLdapSettings) *string { return v.SsoProviderId }).(pulumi.StringPtrOutput)
}

type UserGroupLdapSettingsPtrOutput struct{ *pulumi.OutputState }

func (UserGroupLdapSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupLdapSettings)(nil)).Elem()
}

func (o UserGroupLdapSettingsPtrOutput) ToUserGroupLdapSettingsPtrOutput() UserGroupLdapSettingsPtrOutput {
	return o
}

func (o UserGroupLdapSettingsPtrOutput) ToUserGroupLdapSettingsPtrOutputWithContext(ctx context.Context) UserGroupLdapSettingsPtrOutput {
	return o
}

func (o UserGroupLdapSettingsPtrOutput) Elem() UserGroupLdapSettingsOutput {
	return o.ApplyT(func(v *UserGroupLdapSettings) UserGroupLdapSettings {
		if v != nil {
			return *v
		}
		var ret UserGroupLdapSettings
		return ret
	}).(UserGroupLdapSettingsOutput)
}

// The group DN of the LDAP user group.
func (o UserGroupLdapSettingsPtrOutput) GroupDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserGroupLdapSettings) *string {
		if v == nil {
			return nil
		}
		return v.GroupDn
	}).(pulumi.StringPtrOutput)
}

// The group name of the LDAP user group.
func (o UserGroupLdapSettingsPtrOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserGroupLdapSettings) *string {
		if v == nil {
			return nil
		}
		return v.GroupName
	}).(pulumi.StringPtrOutput)
}

// The ID of the SSO provider.
func (o UserGroupLdapSettingsPtrOutput) SsoProviderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserGroupLdapSettings) *string {
		if v == nil {
			return nil
		}
		return v.SsoProviderId
	}).(pulumi.StringPtrOutput)
}

type UserGroupNotificationSettings struct {
	// The email addresses of the user group.
	GroupEmailAddresses []string `pulumi:"groupEmailAddresses"`
	// The Microsoft Teams webhook URL of the user group.
	MicrosoftTeamsWebhookUrl *string `pulumi:"microsoftTeamsWebhookUrl"`
	// Indicates whether an email is sent when a new user is added to the group.
	SendMailToNewMembers *bool `pulumi:"sendMailToNewMembers"`
	// Enable this setting to have notifications sent to the members of this group.
	SendNotificationsToMembers *bool `pulumi:"sendNotificationsToMembers"`
	// The Slack channel to send notifications to.
	SlackChannel *string `pulumi:"slackChannel"`
	// The Slack webhook URL to send notifications to.
	SlackWebhookUrl *string `pulumi:"slackWebhookUrl"`
}

// UserGroupNotificationSettingsInput is an input type that accepts UserGroupNotificationSettingsArgs and UserGroupNotificationSettingsOutput values.
// You can construct a concrete instance of `UserGroupNotificationSettingsInput` via:
//
//	UserGroupNotificationSettingsArgs{...}
type UserGroupNotificationSettingsInput interface {
	pulumi.Input

	ToUserGroupNotificationSettingsOutput() UserGroupNotificationSettingsOutput
	ToUserGroupNotificationSettingsOutputWithContext(context.Context) UserGroupNotificationSettingsOutput
}

type UserGroupNotificationSettingsArgs struct {
	// The email addresses of the user group.
	GroupEmailAddresses pulumi.StringArrayInput `pulumi:"groupEmailAddresses"`
	// The Microsoft Teams webhook URL of the user group.
	MicrosoftTeamsWebhookUrl pulumi.StringPtrInput `pulumi:"microsoftTeamsWebhookUrl"`
	// Indicates whether an email is sent when a new user is added to the group.
	SendMailToNewMembers pulumi.BoolPtrInput `pulumi:"sendMailToNewMembers"`
	// Enable this setting to have notifications sent to the members of this group.
	SendNotificationsToMembers pulumi.BoolPtrInput `pulumi:"sendNotificationsToMembers"`
	// The Slack channel to send notifications to.
	SlackChannel pulumi.StringPtrInput `pulumi:"slackChannel"`
	// The Slack webhook URL to send notifications to.
	SlackWebhookUrl pulumi.StringPtrInput `pulumi:"slackWebhookUrl"`
}

func (UserGroupNotificationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupNotificationSettings)(nil)).Elem()
}

func (i UserGroupNotificationSettingsArgs) ToUserGroupNotificationSettingsOutput() UserGroupNotificationSettingsOutput {
	return i.ToUserGroupNotificationSettingsOutputWithContext(context.Background())
}

func (i UserGroupNotificationSettingsArgs) ToUserGroupNotificationSettingsOutputWithContext(ctx context.Context) UserGroupNotificationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupNotificationSettingsOutput)
}

func (i UserGroupNotificationSettingsArgs) ToUserGroupNotificationSettingsPtrOutput() UserGroupNotificationSettingsPtrOutput {
	return i.ToUserGroupNotificationSettingsPtrOutputWithContext(context.Background())
}

func (i UserGroupNotificationSettingsArgs) ToUserGroupNotificationSettingsPtrOutputWithContext(ctx context.Context) UserGroupNotificationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupNotificationSettingsOutput).ToUserGroupNotificationSettingsPtrOutputWithContext(ctx)
}

// UserGroupNotificationSettingsPtrInput is an input type that accepts UserGroupNotificationSettingsArgs, UserGroupNotificationSettingsPtr and UserGroupNotificationSettingsPtrOutput values.
// You can construct a concrete instance of `UserGroupNotificationSettingsPtrInput` via:
//
//	        UserGroupNotificationSettingsArgs{...}
//
//	or:
//
//	        nil
type UserGroupNotificationSettingsPtrInput interface {
	pulumi.Input

	ToUserGroupNotificationSettingsPtrOutput() UserGroupNotificationSettingsPtrOutput
	ToUserGroupNotificationSettingsPtrOutputWithContext(context.Context) UserGroupNotificationSettingsPtrOutput
}

type userGroupNotificationSettingsPtrType UserGroupNotificationSettingsArgs

func UserGroupNotificationSettingsPtr(v *UserGroupNotificationSettingsArgs) UserGroupNotificationSettingsPtrInput {
	return (*userGroupNotificationSettingsPtrType)(v)
}

func (*userGroupNotificationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupNotificationSettings)(nil)).Elem()
}

func (i *userGroupNotificationSettingsPtrType) ToUserGroupNotificationSettingsPtrOutput() UserGroupNotificationSettingsPtrOutput {
	return i.ToUserGroupNotificationSettingsPtrOutputWithContext(context.Background())
}

func (i *userGroupNotificationSettingsPtrType) ToUserGroupNotificationSettingsPtrOutputWithContext(ctx context.Context) UserGroupNotificationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupNotificationSettingsPtrOutput)
}

type UserGroupNotificationSettingsOutput struct{ *pulumi.OutputState }

func (UserGroupNotificationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupNotificationSettings)(nil)).Elem()
}

func (o UserGroupNotificationSettingsOutput) ToUserGroupNotificationSettingsOutput() UserGroupNotificationSettingsOutput {
	return o
}

func (o UserGroupNotificationSettingsOutput) ToUserGroupNotificationSettingsOutputWithContext(ctx context.Context) UserGroupNotificationSettingsOutput {
	return o
}

func (o UserGroupNotificationSettingsOutput) ToUserGroupNotificationSettingsPtrOutput() UserGroupNotificationSettingsPtrOutput {
	return o.ToUserGroupNotificationSettingsPtrOutputWithContext(context.Background())
}

func (o UserGroupNotificationSettingsOutput) ToUserGroupNotificationSettingsPtrOutputWithContext(ctx context.Context) UserGroupNotificationSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserGroupNotificationSettings) *UserGroupNotificationSettings {
		return &v
	}).(UserGroupNotificationSettingsPtrOutput)
}

// The email addresses of the user group.
func (o UserGroupNotificationSettingsOutput) GroupEmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupNotificationSettings) []string { return v.GroupEmailAddresses }).(pulumi.StringArrayOutput)
}

// The Microsoft Teams webhook URL of the user group.
func (o UserGroupNotificationSettingsOutput) MicrosoftTeamsWebhookUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserGroupNotificationSettings) *string { return v.MicrosoftTeamsWebhookUrl }).(pulumi.StringPtrOutput)
}

// Indicates whether an email is sent when a new user is added to the group.
func (o UserGroupNotificationSettingsOutput) SendMailToNewMembers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserGroupNotificationSettings) *bool { return v.SendMailToNewMembers }).(pulumi.BoolPtrOutput)
}

// Enable this setting to have notifications sent to the members of this group.
func (o UserGroupNotificationSettingsOutput) SendNotificationsToMembers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserGroupNotificationSettings) *bool { return v.SendNotificationsToMembers }).(pulumi.BoolPtrOutput)
}

// The Slack channel to send notifications to.
func (o UserGroupNotificationSettingsOutput) SlackChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserGroupNotificationSettings) *string { return v.SlackChannel }).(pulumi.StringPtrOutput)
}

// The Slack webhook URL to send notifications to.
func (o UserGroupNotificationSettingsOutput) SlackWebhookUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserGroupNotificationSettings) *string { return v.SlackWebhookUrl }).(pulumi.StringPtrOutput)
}

type UserGroupNotificationSettingsPtrOutput struct{ *pulumi.OutputState }

func (UserGroupNotificationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupNotificationSettings)(nil)).Elem()
}

func (o UserGroupNotificationSettingsPtrOutput) ToUserGroupNotificationSettingsPtrOutput() UserGroupNotificationSettingsPtrOutput {
	return o
}

func (o UserGroupNotificationSettingsPtrOutput) ToUserGroupNotificationSettingsPtrOutputWithContext(ctx context.Context) UserGroupNotificationSettingsPtrOutput {
	return o
}

func (o UserGroupNotificationSettingsPtrOutput) Elem() UserGroupNotificationSettingsOutput {
	return o.ApplyT(func(v *UserGroupNotificationSettings) UserGroupNotificationSettings {
		if v != nil {
			return *v
		}
		var ret UserGroupNotificationSettings
		return ret
	}).(UserGroupNotificationSettingsOutput)
}

// The email addresses of the user group.
func (o UserGroupNotificationSettingsPtrOutput) GroupEmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UserGroupNotificationSettings) []string {
		if v == nil {
			return nil
		}
		return v.GroupEmailAddresses
	}).(pulumi.StringArrayOutput)
}

// The Microsoft Teams webhook URL of the user group.
func (o UserGroupNotificationSettingsPtrOutput) MicrosoftTeamsWebhookUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserGroupNotificationSettings) *string {
		if v == nil {
			return nil
		}
		return v.MicrosoftTeamsWebhookUrl
	}).(pulumi.StringPtrOutput)
}

// Indicates whether an email is sent when a new user is added to the group.
func (o UserGroupNotificationSettingsPtrOutput) SendMailToNewMembers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserGroupNotificationSettings) *bool {
		if v == nil {
			return nil
		}
		return v.SendMailToNewMembers
	}).(pulumi.BoolPtrOutput)
}

// Enable this setting to have notifications sent to the members of this group.
func (o UserGroupNotificationSettingsPtrOutput) SendNotificationsToMembers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserGroupNotificationSettings) *bool {
		if v == nil {
			return nil
		}
		return v.SendNotificationsToMembers
	}).(pulumi.BoolPtrOutput)
}

// The Slack channel to send notifications to.
func (o UserGroupNotificationSettingsPtrOutput) SlackChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserGroupNotificationSettings) *string {
		if v == nil {
			return nil
		}
		return v.SlackChannel
	}).(pulumi.StringPtrOutput)
}

// The Slack webhook URL to send notifications to.
func (o UserGroupNotificationSettingsPtrOutput) SlackWebhookUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserGroupNotificationSettings) *string {
		if v == nil {
			return nil
		}
		return v.SlackWebhookUrl
	}).(pulumi.StringPtrOutput)
}

type UserGroupPermissionsType struct {
	// The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS
	AccountPermissions []string `pulumi:"accountPermissions"`
	// Application specific permissions
	AppPermissions *UserGroupPermissionsAppPermissions `pulumi:"appPermissions"`
}

// UserGroupPermissionsTypeInput is an input type that accepts UserGroupPermissionsTypeArgs and UserGroupPermissionsTypeOutput values.
// You can construct a concrete instance of `UserGroupPermissionsTypeInput` via:
//
//	UserGroupPermissionsTypeArgs{...}
type UserGroupPermissionsTypeInput interface {
	pulumi.Input

	ToUserGroupPermissionsTypeOutput() UserGroupPermissionsTypeOutput
	ToUserGroupPermissionsTypeOutputWithContext(context.Context) UserGroupPermissionsTypeOutput
}

type UserGroupPermissionsTypeArgs struct {
	// The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS
	AccountPermissions pulumi.StringArrayInput `pulumi:"accountPermissions"`
	// Application specific permissions
	AppPermissions UserGroupPermissionsAppPermissionsPtrInput `pulumi:"appPermissions"`
}

func (UserGroupPermissionsTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPermissionsType)(nil)).Elem()
}

func (i UserGroupPermissionsTypeArgs) ToUserGroupPermissionsTypeOutput() UserGroupPermissionsTypeOutput {
	return i.ToUserGroupPermissionsTypeOutputWithContext(context.Background())
}

func (i UserGroupPermissionsTypeArgs) ToUserGroupPermissionsTypeOutputWithContext(ctx context.Context) UserGroupPermissionsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsTypeOutput)
}

func (i UserGroupPermissionsTypeArgs) ToUserGroupPermissionsTypePtrOutput() UserGroupPermissionsTypePtrOutput {
	return i.ToUserGroupPermissionsTypePtrOutputWithContext(context.Background())
}

func (i UserGroupPermissionsTypeArgs) ToUserGroupPermissionsTypePtrOutputWithContext(ctx context.Context) UserGroupPermissionsTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsTypeOutput).ToUserGroupPermissionsTypePtrOutputWithContext(ctx)
}

// UserGroupPermissionsTypePtrInput is an input type that accepts UserGroupPermissionsTypeArgs, UserGroupPermissionsTypePtr and UserGroupPermissionsTypePtrOutput values.
// You can construct a concrete instance of `UserGroupPermissionsTypePtrInput` via:
//
//	        UserGroupPermissionsTypeArgs{...}
//
//	or:
//
//	        nil
type UserGroupPermissionsTypePtrInput interface {
	pulumi.Input

	ToUserGroupPermissionsTypePtrOutput() UserGroupPermissionsTypePtrOutput
	ToUserGroupPermissionsTypePtrOutputWithContext(context.Context) UserGroupPermissionsTypePtrOutput
}

type userGroupPermissionsTypePtrType UserGroupPermissionsTypeArgs

func UserGroupPermissionsTypePtr(v *UserGroupPermissionsTypeArgs) UserGroupPermissionsTypePtrInput {
	return (*userGroupPermissionsTypePtrType)(v)
}

func (*userGroupPermissionsTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupPermissionsType)(nil)).Elem()
}

func (i *userGroupPermissionsTypePtrType) ToUserGroupPermissionsTypePtrOutput() UserGroupPermissionsTypePtrOutput {
	return i.ToUserGroupPermissionsTypePtrOutputWithContext(context.Background())
}

func (i *userGroupPermissionsTypePtrType) ToUserGroupPermissionsTypePtrOutputWithContext(ctx context.Context) UserGroupPermissionsTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsTypePtrOutput)
}

type UserGroupPermissionsTypeOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPermissionsType)(nil)).Elem()
}

func (o UserGroupPermissionsTypeOutput) ToUserGroupPermissionsTypeOutput() UserGroupPermissionsTypeOutput {
	return o
}

func (o UserGroupPermissionsTypeOutput) ToUserGroupPermissionsTypeOutputWithContext(ctx context.Context) UserGroupPermissionsTypeOutput {
	return o
}

func (o UserGroupPermissionsTypeOutput) ToUserGroupPermissionsTypePtrOutput() UserGroupPermissionsTypePtrOutput {
	return o.ToUserGroupPermissionsTypePtrOutputWithContext(context.Background())
}

func (o UserGroupPermissionsTypeOutput) ToUserGroupPermissionsTypePtrOutputWithContext(ctx context.Context) UserGroupPermissionsTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserGroupPermissionsType) *UserGroupPermissionsType {
		return &v
	}).(UserGroupPermissionsTypePtrOutput)
}

// The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS
func (o UserGroupPermissionsTypeOutput) AccountPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsType) []string { return v.AccountPermissions }).(pulumi.StringArrayOutput)
}

// Application specific permissions
func (o UserGroupPermissionsTypeOutput) AppPermissions() UserGroupPermissionsAppPermissionsPtrOutput {
	return o.ApplyT(func(v UserGroupPermissionsType) *UserGroupPermissionsAppPermissions { return v.AppPermissions }).(UserGroupPermissionsAppPermissionsPtrOutput)
}

type UserGroupPermissionsTypePtrOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupPermissionsType)(nil)).Elem()
}

func (o UserGroupPermissionsTypePtrOutput) ToUserGroupPermissionsTypePtrOutput() UserGroupPermissionsTypePtrOutput {
	return o
}

func (o UserGroupPermissionsTypePtrOutput) ToUserGroupPermissionsTypePtrOutputWithContext(ctx context.Context) UserGroupPermissionsTypePtrOutput {
	return o
}

func (o UserGroupPermissionsTypePtrOutput) Elem() UserGroupPermissionsTypeOutput {
	return o.ApplyT(func(v *UserGroupPermissionsType) UserGroupPermissionsType {
		if v != nil {
			return *v
		}
		var ret UserGroupPermissionsType
		return ret
	}).(UserGroupPermissionsTypeOutput)
}

// The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS
func (o UserGroupPermissionsTypePtrOutput) AccountPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UserGroupPermissionsType) []string {
		if v == nil {
			return nil
		}
		return v.AccountPermissions
	}).(pulumi.StringArrayOutput)
}

// Application specific permissions
func (o UserGroupPermissionsTypePtrOutput) AppPermissions() UserGroupPermissionsAppPermissionsPtrOutput {
	return o.ApplyT(func(v *UserGroupPermissionsType) *UserGroupPermissionsAppPermissions {
		if v == nil {
			return nil
		}
		return v.AppPermissions
	}).(UserGroupPermissionsAppPermissionsPtrOutput)
}

type UserGroupPermissionsAppPermissions struct {
	// The permission to perform actions against all resources.
	Alls []UserGroupPermissionsAppPermissionsAll `pulumi:"alls"`
	// Permission configuration to perform actions against deployments.
	Deployments []UserGroupPermissionsAppPermissionsDeployment `pulumi:"deployments"`
	// Permission configuration to perform actions against workflows.
	Environments []UserGroupPermissionsAppPermissionsEnvironment `pulumi:"environments"`
	// Permission configuration to perform actions against pipelines.
	Pipelines []UserGroupPermissionsAppPermissionsPipeline `pulumi:"pipelines"`
	// Permission configuration to perform actions against provisioners.
	Provisioners []UserGroupPermissionsAppPermissionsProvisioner `pulumi:"provisioners"`
	// Permission configuration to perform actions against services.
	Services []UserGroupPermissionsAppPermissionsService `pulumi:"services"`
	// Permission configuration to perform actions against templates.
	Templates []UserGroupPermissionsAppPermissionsTemplate `pulumi:"templates"`
	// Permission configuration to perform actions against workflows.
	Workflows []UserGroupPermissionsAppPermissionsWorkflow `pulumi:"workflows"`
}

// UserGroupPermissionsAppPermissionsInput is an input type that accepts UserGroupPermissionsAppPermissionsArgs and UserGroupPermissionsAppPermissionsOutput values.
// You can construct a concrete instance of `UserGroupPermissionsAppPermissionsInput` via:
//
//	UserGroupPermissionsAppPermissionsArgs{...}
type UserGroupPermissionsAppPermissionsInput interface {
	pulumi.Input

	ToUserGroupPermissionsAppPermissionsOutput() UserGroupPermissionsAppPermissionsOutput
	ToUserGroupPermissionsAppPermissionsOutputWithContext(context.Context) UserGroupPermissionsAppPermissionsOutput
}

type UserGroupPermissionsAppPermissionsArgs struct {
	// The permission to perform actions against all resources.
	Alls UserGroupPermissionsAppPermissionsAllArrayInput `pulumi:"alls"`
	// Permission configuration to perform actions against deployments.
	Deployments UserGroupPermissionsAppPermissionsDeploymentArrayInput `pulumi:"deployments"`
	// Permission configuration to perform actions against workflows.
	Environments UserGroupPermissionsAppPermissionsEnvironmentArrayInput `pulumi:"environments"`
	// Permission configuration to perform actions against pipelines.
	Pipelines UserGroupPermissionsAppPermissionsPipelineArrayInput `pulumi:"pipelines"`
	// Permission configuration to perform actions against provisioners.
	Provisioners UserGroupPermissionsAppPermissionsProvisionerArrayInput `pulumi:"provisioners"`
	// Permission configuration to perform actions against services.
	Services UserGroupPermissionsAppPermissionsServiceArrayInput `pulumi:"services"`
	// Permission configuration to perform actions against templates.
	Templates UserGroupPermissionsAppPermissionsTemplateArrayInput `pulumi:"templates"`
	// Permission configuration to perform actions against workflows.
	Workflows UserGroupPermissionsAppPermissionsWorkflowArrayInput `pulumi:"workflows"`
}

func (UserGroupPermissionsAppPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPermissionsAppPermissions)(nil)).Elem()
}

func (i UserGroupPermissionsAppPermissionsArgs) ToUserGroupPermissionsAppPermissionsOutput() UserGroupPermissionsAppPermissionsOutput {
	return i.ToUserGroupPermissionsAppPermissionsOutputWithContext(context.Background())
}

func (i UserGroupPermissionsAppPermissionsArgs) ToUserGroupPermissionsAppPermissionsOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsAppPermissionsOutput)
}

func (i UserGroupPermissionsAppPermissionsArgs) ToUserGroupPermissionsAppPermissionsPtrOutput() UserGroupPermissionsAppPermissionsPtrOutput {
	return i.ToUserGroupPermissionsAppPermissionsPtrOutputWithContext(context.Background())
}

func (i UserGroupPermissionsAppPermissionsArgs) ToUserGroupPermissionsAppPermissionsPtrOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsAppPermissionsOutput).ToUserGroupPermissionsAppPermissionsPtrOutputWithContext(ctx)
}

// UserGroupPermissionsAppPermissionsPtrInput is an input type that accepts UserGroupPermissionsAppPermissionsArgs, UserGroupPermissionsAppPermissionsPtr and UserGroupPermissionsAppPermissionsPtrOutput values.
// You can construct a concrete instance of `UserGroupPermissionsAppPermissionsPtrInput` via:
//
//	        UserGroupPermissionsAppPermissionsArgs{...}
//
//	or:
//
//	        nil
type UserGroupPermissionsAppPermissionsPtrInput interface {
	pulumi.Input

	ToUserGroupPermissionsAppPermissionsPtrOutput() UserGroupPermissionsAppPermissionsPtrOutput
	ToUserGroupPermissionsAppPermissionsPtrOutputWithContext(context.Context) UserGroupPermissionsAppPermissionsPtrOutput
}

type userGroupPermissionsAppPermissionsPtrType UserGroupPermissionsAppPermissionsArgs

func UserGroupPermissionsAppPermissionsPtr(v *UserGroupPermissionsAppPermissionsArgs) UserGroupPermissionsAppPermissionsPtrInput {
	return (*userGroupPermissionsAppPermissionsPtrType)(v)
}

func (*userGroupPermissionsAppPermissionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupPermissionsAppPermissions)(nil)).Elem()
}

func (i *userGroupPermissionsAppPermissionsPtrType) ToUserGroupPermissionsAppPermissionsPtrOutput() UserGroupPermissionsAppPermissionsPtrOutput {
	return i.ToUserGroupPermissionsAppPermissionsPtrOutputWithContext(context.Background())
}

func (i *userGroupPermissionsAppPermissionsPtrType) ToUserGroupPermissionsAppPermissionsPtrOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsAppPermissionsPtrOutput)
}

type UserGroupPermissionsAppPermissionsOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsAppPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPermissionsAppPermissions)(nil)).Elem()
}

func (o UserGroupPermissionsAppPermissionsOutput) ToUserGroupPermissionsAppPermissionsOutput() UserGroupPermissionsAppPermissionsOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsOutput) ToUserGroupPermissionsAppPermissionsOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsOutput) ToUserGroupPermissionsAppPermissionsPtrOutput() UserGroupPermissionsAppPermissionsPtrOutput {
	return o.ToUserGroupPermissionsAppPermissionsPtrOutputWithContext(context.Background())
}

func (o UserGroupPermissionsAppPermissionsOutput) ToUserGroupPermissionsAppPermissionsPtrOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserGroupPermissionsAppPermissions) *UserGroupPermissionsAppPermissions {
		return &v
	}).(UserGroupPermissionsAppPermissionsPtrOutput)
}

// The permission to perform actions against all resources.
func (o UserGroupPermissionsAppPermissionsOutput) Alls() UserGroupPermissionsAppPermissionsAllArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissions) []UserGroupPermissionsAppPermissionsAll { return v.Alls }).(UserGroupPermissionsAppPermissionsAllArrayOutput)
}

// Permission configuration to perform actions against deployments.
func (o UserGroupPermissionsAppPermissionsOutput) Deployments() UserGroupPermissionsAppPermissionsDeploymentArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissions) []UserGroupPermissionsAppPermissionsDeployment {
		return v.Deployments
	}).(UserGroupPermissionsAppPermissionsDeploymentArrayOutput)
}

// Permission configuration to perform actions against workflows.
func (o UserGroupPermissionsAppPermissionsOutput) Environments() UserGroupPermissionsAppPermissionsEnvironmentArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissions) []UserGroupPermissionsAppPermissionsEnvironment {
		return v.Environments
	}).(UserGroupPermissionsAppPermissionsEnvironmentArrayOutput)
}

// Permission configuration to perform actions against pipelines.
func (o UserGroupPermissionsAppPermissionsOutput) Pipelines() UserGroupPermissionsAppPermissionsPipelineArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissions) []UserGroupPermissionsAppPermissionsPipeline {
		return v.Pipelines
	}).(UserGroupPermissionsAppPermissionsPipelineArrayOutput)
}

// Permission configuration to perform actions against provisioners.
func (o UserGroupPermissionsAppPermissionsOutput) Provisioners() UserGroupPermissionsAppPermissionsProvisionerArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissions) []UserGroupPermissionsAppPermissionsProvisioner {
		return v.Provisioners
	}).(UserGroupPermissionsAppPermissionsProvisionerArrayOutput)
}

// Permission configuration to perform actions against services.
func (o UserGroupPermissionsAppPermissionsOutput) Services() UserGroupPermissionsAppPermissionsServiceArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissions) []UserGroupPermissionsAppPermissionsService {
		return v.Services
	}).(UserGroupPermissionsAppPermissionsServiceArrayOutput)
}

// Permission configuration to perform actions against templates.
func (o UserGroupPermissionsAppPermissionsOutput) Templates() UserGroupPermissionsAppPermissionsTemplateArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissions) []UserGroupPermissionsAppPermissionsTemplate {
		return v.Templates
	}).(UserGroupPermissionsAppPermissionsTemplateArrayOutput)
}

// Permission configuration to perform actions against workflows.
func (o UserGroupPermissionsAppPermissionsOutput) Workflows() UserGroupPermissionsAppPermissionsWorkflowArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissions) []UserGroupPermissionsAppPermissionsWorkflow {
		return v.Workflows
	}).(UserGroupPermissionsAppPermissionsWorkflowArrayOutput)
}

type UserGroupPermissionsAppPermissionsPtrOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsAppPermissionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupPermissionsAppPermissions)(nil)).Elem()
}

func (o UserGroupPermissionsAppPermissionsPtrOutput) ToUserGroupPermissionsAppPermissionsPtrOutput() UserGroupPermissionsAppPermissionsPtrOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsPtrOutput) ToUserGroupPermissionsAppPermissionsPtrOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsPtrOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsPtrOutput) Elem() UserGroupPermissionsAppPermissionsOutput {
	return o.ApplyT(func(v *UserGroupPermissionsAppPermissions) UserGroupPermissionsAppPermissions {
		if v != nil {
			return *v
		}
		var ret UserGroupPermissionsAppPermissions
		return ret
	}).(UserGroupPermissionsAppPermissionsOutput)
}

// The permission to perform actions against all resources.
func (o UserGroupPermissionsAppPermissionsPtrOutput) Alls() UserGroupPermissionsAppPermissionsAllArrayOutput {
	return o.ApplyT(func(v *UserGroupPermissionsAppPermissions) []UserGroupPermissionsAppPermissionsAll {
		if v == nil {
			return nil
		}
		return v.Alls
	}).(UserGroupPermissionsAppPermissionsAllArrayOutput)
}

// Permission configuration to perform actions against deployments.
func (o UserGroupPermissionsAppPermissionsPtrOutput) Deployments() UserGroupPermissionsAppPermissionsDeploymentArrayOutput {
	return o.ApplyT(func(v *UserGroupPermissionsAppPermissions) []UserGroupPermissionsAppPermissionsDeployment {
		if v == nil {
			return nil
		}
		return v.Deployments
	}).(UserGroupPermissionsAppPermissionsDeploymentArrayOutput)
}

// Permission configuration to perform actions against workflows.
func (o UserGroupPermissionsAppPermissionsPtrOutput) Environments() UserGroupPermissionsAppPermissionsEnvironmentArrayOutput {
	return o.ApplyT(func(v *UserGroupPermissionsAppPermissions) []UserGroupPermissionsAppPermissionsEnvironment {
		if v == nil {
			return nil
		}
		return v.Environments
	}).(UserGroupPermissionsAppPermissionsEnvironmentArrayOutput)
}

// Permission configuration to perform actions against pipelines.
func (o UserGroupPermissionsAppPermissionsPtrOutput) Pipelines() UserGroupPermissionsAppPermissionsPipelineArrayOutput {
	return o.ApplyT(func(v *UserGroupPermissionsAppPermissions) []UserGroupPermissionsAppPermissionsPipeline {
		if v == nil {
			return nil
		}
		return v.Pipelines
	}).(UserGroupPermissionsAppPermissionsPipelineArrayOutput)
}

// Permission configuration to perform actions against provisioners.
func (o UserGroupPermissionsAppPermissionsPtrOutput) Provisioners() UserGroupPermissionsAppPermissionsProvisionerArrayOutput {
	return o.ApplyT(func(v *UserGroupPermissionsAppPermissions) []UserGroupPermissionsAppPermissionsProvisioner {
		if v == nil {
			return nil
		}
		return v.Provisioners
	}).(UserGroupPermissionsAppPermissionsProvisionerArrayOutput)
}

// Permission configuration to perform actions against services.
func (o UserGroupPermissionsAppPermissionsPtrOutput) Services() UserGroupPermissionsAppPermissionsServiceArrayOutput {
	return o.ApplyT(func(v *UserGroupPermissionsAppPermissions) []UserGroupPermissionsAppPermissionsService {
		if v == nil {
			return nil
		}
		return v.Services
	}).(UserGroupPermissionsAppPermissionsServiceArrayOutput)
}

// Permission configuration to perform actions against templates.
func (o UserGroupPermissionsAppPermissionsPtrOutput) Templates() UserGroupPermissionsAppPermissionsTemplateArrayOutput {
	return o.ApplyT(func(v *UserGroupPermissionsAppPermissions) []UserGroupPermissionsAppPermissionsTemplate {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(UserGroupPermissionsAppPermissionsTemplateArrayOutput)
}

// Permission configuration to perform actions against workflows.
func (o UserGroupPermissionsAppPermissionsPtrOutput) Workflows() UserGroupPermissionsAppPermissionsWorkflowArrayOutput {
	return o.ApplyT(func(v *UserGroupPermissionsAppPermissions) []UserGroupPermissionsAppPermissionsWorkflow {
		if v == nil {
			return nil
		}
		return v.Workflows
	}).(UserGroupPermissionsAppPermissionsWorkflowArrayOutput)
}

type UserGroupPermissionsAppPermissionsAll struct {
	// The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE, EXECUTE*WORKFLOW, EXECUTE*PIPELINE, ROLLBACK_WORKFLOW
	Actions []string `pulumi:"actions"`
	// The application IDs to which the permission applies. Leave empty to apply to all applications.
	AppIds []string `pulumi:"appIds"`
}

// UserGroupPermissionsAppPermissionsAllInput is an input type that accepts UserGroupPermissionsAppPermissionsAllArgs and UserGroupPermissionsAppPermissionsAllOutput values.
// You can construct a concrete instance of `UserGroupPermissionsAppPermissionsAllInput` via:
//
//	UserGroupPermissionsAppPermissionsAllArgs{...}
type UserGroupPermissionsAppPermissionsAllInput interface {
	pulumi.Input

	ToUserGroupPermissionsAppPermissionsAllOutput() UserGroupPermissionsAppPermissionsAllOutput
	ToUserGroupPermissionsAppPermissionsAllOutputWithContext(context.Context) UserGroupPermissionsAppPermissionsAllOutput
}

type UserGroupPermissionsAppPermissionsAllArgs struct {
	// The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE, EXECUTE*WORKFLOW, EXECUTE*PIPELINE, ROLLBACK_WORKFLOW
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// The application IDs to which the permission applies. Leave empty to apply to all applications.
	AppIds pulumi.StringArrayInput `pulumi:"appIds"`
}

func (UserGroupPermissionsAppPermissionsAllArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPermissionsAppPermissionsAll)(nil)).Elem()
}

func (i UserGroupPermissionsAppPermissionsAllArgs) ToUserGroupPermissionsAppPermissionsAllOutput() UserGroupPermissionsAppPermissionsAllOutput {
	return i.ToUserGroupPermissionsAppPermissionsAllOutputWithContext(context.Background())
}

func (i UserGroupPermissionsAppPermissionsAllArgs) ToUserGroupPermissionsAppPermissionsAllOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsAllOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsAppPermissionsAllOutput)
}

// UserGroupPermissionsAppPermissionsAllArrayInput is an input type that accepts UserGroupPermissionsAppPermissionsAllArray and UserGroupPermissionsAppPermissionsAllArrayOutput values.
// You can construct a concrete instance of `UserGroupPermissionsAppPermissionsAllArrayInput` via:
//
//	UserGroupPermissionsAppPermissionsAllArray{ UserGroupPermissionsAppPermissionsAllArgs{...} }
type UserGroupPermissionsAppPermissionsAllArrayInput interface {
	pulumi.Input

	ToUserGroupPermissionsAppPermissionsAllArrayOutput() UserGroupPermissionsAppPermissionsAllArrayOutput
	ToUserGroupPermissionsAppPermissionsAllArrayOutputWithContext(context.Context) UserGroupPermissionsAppPermissionsAllArrayOutput
}

type UserGroupPermissionsAppPermissionsAllArray []UserGroupPermissionsAppPermissionsAllInput

func (UserGroupPermissionsAppPermissionsAllArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserGroupPermissionsAppPermissionsAll)(nil)).Elem()
}

func (i UserGroupPermissionsAppPermissionsAllArray) ToUserGroupPermissionsAppPermissionsAllArrayOutput() UserGroupPermissionsAppPermissionsAllArrayOutput {
	return i.ToUserGroupPermissionsAppPermissionsAllArrayOutputWithContext(context.Background())
}

func (i UserGroupPermissionsAppPermissionsAllArray) ToUserGroupPermissionsAppPermissionsAllArrayOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsAllArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsAppPermissionsAllArrayOutput)
}

type UserGroupPermissionsAppPermissionsAllOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsAppPermissionsAllOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPermissionsAppPermissionsAll)(nil)).Elem()
}

func (o UserGroupPermissionsAppPermissionsAllOutput) ToUserGroupPermissionsAppPermissionsAllOutput() UserGroupPermissionsAppPermissionsAllOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsAllOutput) ToUserGroupPermissionsAppPermissionsAllOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsAllOutput {
	return o
}

// The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE, EXECUTE*WORKFLOW, EXECUTE*PIPELINE, ROLLBACK_WORKFLOW
func (o UserGroupPermissionsAppPermissionsAllOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsAll) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// The application IDs to which the permission applies. Leave empty to apply to all applications.
func (o UserGroupPermissionsAppPermissionsAllOutput) AppIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsAll) []string { return v.AppIds }).(pulumi.StringArrayOutput)
}

type UserGroupPermissionsAppPermissionsAllArrayOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsAppPermissionsAllArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserGroupPermissionsAppPermissionsAll)(nil)).Elem()
}

func (o UserGroupPermissionsAppPermissionsAllArrayOutput) ToUserGroupPermissionsAppPermissionsAllArrayOutput() UserGroupPermissionsAppPermissionsAllArrayOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsAllArrayOutput) ToUserGroupPermissionsAppPermissionsAllArrayOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsAllArrayOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsAllArrayOutput) Index(i pulumi.IntInput) UserGroupPermissionsAppPermissionsAllOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserGroupPermissionsAppPermissionsAll {
		return vs[0].([]UserGroupPermissionsAppPermissionsAll)[vs[1].(int)]
	}).(UserGroupPermissionsAppPermissionsAllOutput)
}

type UserGroupPermissionsAppPermissionsDeployment struct {
	// The actions allowed to be performed. Valid options are READ, EXECUTE*WORKFLOW, EXECUTE*PIPELINE, ROLLBACK*WORKFLOW, ABORT*WORKFLOW
	Actions []string `pulumi:"actions"`
	// The application IDs to which the permission applies. Leave empty to apply to all applications.
	AppIds []string `pulumi:"appIds"`
	// The environment IDs to which the permission applies. Leave empty to apply to all environments.
	EnvIds []string `pulumi:"envIds"`
	// The filters to apply to the action. Valid options are: NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	Filters []string `pulumi:"filters"`
}

// UserGroupPermissionsAppPermissionsDeploymentInput is an input type that accepts UserGroupPermissionsAppPermissionsDeploymentArgs and UserGroupPermissionsAppPermissionsDeploymentOutput values.
// You can construct a concrete instance of `UserGroupPermissionsAppPermissionsDeploymentInput` via:
//
//	UserGroupPermissionsAppPermissionsDeploymentArgs{...}
type UserGroupPermissionsAppPermissionsDeploymentInput interface {
	pulumi.Input

	ToUserGroupPermissionsAppPermissionsDeploymentOutput() UserGroupPermissionsAppPermissionsDeploymentOutput
	ToUserGroupPermissionsAppPermissionsDeploymentOutputWithContext(context.Context) UserGroupPermissionsAppPermissionsDeploymentOutput
}

type UserGroupPermissionsAppPermissionsDeploymentArgs struct {
	// The actions allowed to be performed. Valid options are READ, EXECUTE*WORKFLOW, EXECUTE*PIPELINE, ROLLBACK*WORKFLOW, ABORT*WORKFLOW
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// The application IDs to which the permission applies. Leave empty to apply to all applications.
	AppIds pulumi.StringArrayInput `pulumi:"appIds"`
	// The environment IDs to which the permission applies. Leave empty to apply to all environments.
	EnvIds pulumi.StringArrayInput `pulumi:"envIds"`
	// The filters to apply to the action. Valid options are: NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	Filters pulumi.StringArrayInput `pulumi:"filters"`
}

func (UserGroupPermissionsAppPermissionsDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPermissionsAppPermissionsDeployment)(nil)).Elem()
}

func (i UserGroupPermissionsAppPermissionsDeploymentArgs) ToUserGroupPermissionsAppPermissionsDeploymentOutput() UserGroupPermissionsAppPermissionsDeploymentOutput {
	return i.ToUserGroupPermissionsAppPermissionsDeploymentOutputWithContext(context.Background())
}

func (i UserGroupPermissionsAppPermissionsDeploymentArgs) ToUserGroupPermissionsAppPermissionsDeploymentOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsAppPermissionsDeploymentOutput)
}

// UserGroupPermissionsAppPermissionsDeploymentArrayInput is an input type that accepts UserGroupPermissionsAppPermissionsDeploymentArray and UserGroupPermissionsAppPermissionsDeploymentArrayOutput values.
// You can construct a concrete instance of `UserGroupPermissionsAppPermissionsDeploymentArrayInput` via:
//
//	UserGroupPermissionsAppPermissionsDeploymentArray{ UserGroupPermissionsAppPermissionsDeploymentArgs{...} }
type UserGroupPermissionsAppPermissionsDeploymentArrayInput interface {
	pulumi.Input

	ToUserGroupPermissionsAppPermissionsDeploymentArrayOutput() UserGroupPermissionsAppPermissionsDeploymentArrayOutput
	ToUserGroupPermissionsAppPermissionsDeploymentArrayOutputWithContext(context.Context) UserGroupPermissionsAppPermissionsDeploymentArrayOutput
}

type UserGroupPermissionsAppPermissionsDeploymentArray []UserGroupPermissionsAppPermissionsDeploymentInput

func (UserGroupPermissionsAppPermissionsDeploymentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserGroupPermissionsAppPermissionsDeployment)(nil)).Elem()
}

func (i UserGroupPermissionsAppPermissionsDeploymentArray) ToUserGroupPermissionsAppPermissionsDeploymentArrayOutput() UserGroupPermissionsAppPermissionsDeploymentArrayOutput {
	return i.ToUserGroupPermissionsAppPermissionsDeploymentArrayOutputWithContext(context.Background())
}

func (i UserGroupPermissionsAppPermissionsDeploymentArray) ToUserGroupPermissionsAppPermissionsDeploymentArrayOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsDeploymentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsAppPermissionsDeploymentArrayOutput)
}

type UserGroupPermissionsAppPermissionsDeploymentOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsAppPermissionsDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPermissionsAppPermissionsDeployment)(nil)).Elem()
}

func (o UserGroupPermissionsAppPermissionsDeploymentOutput) ToUserGroupPermissionsAppPermissionsDeploymentOutput() UserGroupPermissionsAppPermissionsDeploymentOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsDeploymentOutput) ToUserGroupPermissionsAppPermissionsDeploymentOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsDeploymentOutput {
	return o
}

// The actions allowed to be performed. Valid options are READ, EXECUTE*WORKFLOW, EXECUTE*PIPELINE, ROLLBACK*WORKFLOW, ABORT*WORKFLOW
func (o UserGroupPermissionsAppPermissionsDeploymentOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsDeployment) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// The application IDs to which the permission applies. Leave empty to apply to all applications.
func (o UserGroupPermissionsAppPermissionsDeploymentOutput) AppIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsDeployment) []string { return v.AppIds }).(pulumi.StringArrayOutput)
}

// The environment IDs to which the permission applies. Leave empty to apply to all environments.
func (o UserGroupPermissionsAppPermissionsDeploymentOutput) EnvIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsDeployment) []string { return v.EnvIds }).(pulumi.StringArrayOutput)
}

// The filters to apply to the action. Valid options are: NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
func (o UserGroupPermissionsAppPermissionsDeploymentOutput) Filters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsDeployment) []string { return v.Filters }).(pulumi.StringArrayOutput)
}

type UserGroupPermissionsAppPermissionsDeploymentArrayOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsAppPermissionsDeploymentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserGroupPermissionsAppPermissionsDeployment)(nil)).Elem()
}

func (o UserGroupPermissionsAppPermissionsDeploymentArrayOutput) ToUserGroupPermissionsAppPermissionsDeploymentArrayOutput() UserGroupPermissionsAppPermissionsDeploymentArrayOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsDeploymentArrayOutput) ToUserGroupPermissionsAppPermissionsDeploymentArrayOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsDeploymentArrayOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsDeploymentArrayOutput) Index(i pulumi.IntInput) UserGroupPermissionsAppPermissionsDeploymentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserGroupPermissionsAppPermissionsDeployment {
		return vs[0].([]UserGroupPermissionsAppPermissionsDeployment)[vs[1].(int)]
	}).(UserGroupPermissionsAppPermissionsDeploymentOutput)
}

type UserGroupPermissionsAppPermissionsEnvironment struct {
	// The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE
	Actions []string `pulumi:"actions"`
	// The application IDs to which the permission applies. Leave empty to apply to all applications.
	AppIds []string `pulumi:"appIds"`
	// The environment IDs to which the permission applies. Leave empty to apply to all environments.
	EnvIds []string `pulumi:"envIds"`
	// The filters to apply to the action. Valid options are: NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	Filters []string `pulumi:"filters"`
}

// UserGroupPermissionsAppPermissionsEnvironmentInput is an input type that accepts UserGroupPermissionsAppPermissionsEnvironmentArgs and UserGroupPermissionsAppPermissionsEnvironmentOutput values.
// You can construct a concrete instance of `UserGroupPermissionsAppPermissionsEnvironmentInput` via:
//
//	UserGroupPermissionsAppPermissionsEnvironmentArgs{...}
type UserGroupPermissionsAppPermissionsEnvironmentInput interface {
	pulumi.Input

	ToUserGroupPermissionsAppPermissionsEnvironmentOutput() UserGroupPermissionsAppPermissionsEnvironmentOutput
	ToUserGroupPermissionsAppPermissionsEnvironmentOutputWithContext(context.Context) UserGroupPermissionsAppPermissionsEnvironmentOutput
}

type UserGroupPermissionsAppPermissionsEnvironmentArgs struct {
	// The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// The application IDs to which the permission applies. Leave empty to apply to all applications.
	AppIds pulumi.StringArrayInput `pulumi:"appIds"`
	// The environment IDs to which the permission applies. Leave empty to apply to all environments.
	EnvIds pulumi.StringArrayInput `pulumi:"envIds"`
	// The filters to apply to the action. Valid options are: NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	Filters pulumi.StringArrayInput `pulumi:"filters"`
}

func (UserGroupPermissionsAppPermissionsEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPermissionsAppPermissionsEnvironment)(nil)).Elem()
}

func (i UserGroupPermissionsAppPermissionsEnvironmentArgs) ToUserGroupPermissionsAppPermissionsEnvironmentOutput() UserGroupPermissionsAppPermissionsEnvironmentOutput {
	return i.ToUserGroupPermissionsAppPermissionsEnvironmentOutputWithContext(context.Background())
}

func (i UserGroupPermissionsAppPermissionsEnvironmentArgs) ToUserGroupPermissionsAppPermissionsEnvironmentOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsAppPermissionsEnvironmentOutput)
}

// UserGroupPermissionsAppPermissionsEnvironmentArrayInput is an input type that accepts UserGroupPermissionsAppPermissionsEnvironmentArray and UserGroupPermissionsAppPermissionsEnvironmentArrayOutput values.
// You can construct a concrete instance of `UserGroupPermissionsAppPermissionsEnvironmentArrayInput` via:
//
//	UserGroupPermissionsAppPermissionsEnvironmentArray{ UserGroupPermissionsAppPermissionsEnvironmentArgs{...} }
type UserGroupPermissionsAppPermissionsEnvironmentArrayInput interface {
	pulumi.Input

	ToUserGroupPermissionsAppPermissionsEnvironmentArrayOutput() UserGroupPermissionsAppPermissionsEnvironmentArrayOutput
	ToUserGroupPermissionsAppPermissionsEnvironmentArrayOutputWithContext(context.Context) UserGroupPermissionsAppPermissionsEnvironmentArrayOutput
}

type UserGroupPermissionsAppPermissionsEnvironmentArray []UserGroupPermissionsAppPermissionsEnvironmentInput

func (UserGroupPermissionsAppPermissionsEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserGroupPermissionsAppPermissionsEnvironment)(nil)).Elem()
}

func (i UserGroupPermissionsAppPermissionsEnvironmentArray) ToUserGroupPermissionsAppPermissionsEnvironmentArrayOutput() UserGroupPermissionsAppPermissionsEnvironmentArrayOutput {
	return i.ToUserGroupPermissionsAppPermissionsEnvironmentArrayOutputWithContext(context.Background())
}

func (i UserGroupPermissionsAppPermissionsEnvironmentArray) ToUserGroupPermissionsAppPermissionsEnvironmentArrayOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsAppPermissionsEnvironmentArrayOutput)
}

type UserGroupPermissionsAppPermissionsEnvironmentOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsAppPermissionsEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPermissionsAppPermissionsEnvironment)(nil)).Elem()
}

func (o UserGroupPermissionsAppPermissionsEnvironmentOutput) ToUserGroupPermissionsAppPermissionsEnvironmentOutput() UserGroupPermissionsAppPermissionsEnvironmentOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsEnvironmentOutput) ToUserGroupPermissionsAppPermissionsEnvironmentOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsEnvironmentOutput {
	return o
}

// The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE
func (o UserGroupPermissionsAppPermissionsEnvironmentOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsEnvironment) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// The application IDs to which the permission applies. Leave empty to apply to all applications.
func (o UserGroupPermissionsAppPermissionsEnvironmentOutput) AppIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsEnvironment) []string { return v.AppIds }).(pulumi.StringArrayOutput)
}

// The environment IDs to which the permission applies. Leave empty to apply to all environments.
func (o UserGroupPermissionsAppPermissionsEnvironmentOutput) EnvIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsEnvironment) []string { return v.EnvIds }).(pulumi.StringArrayOutput)
}

// The filters to apply to the action. Valid options are: NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
func (o UserGroupPermissionsAppPermissionsEnvironmentOutput) Filters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsEnvironment) []string { return v.Filters }).(pulumi.StringArrayOutput)
}

type UserGroupPermissionsAppPermissionsEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsAppPermissionsEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserGroupPermissionsAppPermissionsEnvironment)(nil)).Elem()
}

func (o UserGroupPermissionsAppPermissionsEnvironmentArrayOutput) ToUserGroupPermissionsAppPermissionsEnvironmentArrayOutput() UserGroupPermissionsAppPermissionsEnvironmentArrayOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsEnvironmentArrayOutput) ToUserGroupPermissionsAppPermissionsEnvironmentArrayOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsEnvironmentArrayOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsEnvironmentArrayOutput) Index(i pulumi.IntInput) UserGroupPermissionsAppPermissionsEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserGroupPermissionsAppPermissionsEnvironment {
		return vs[0].([]UserGroupPermissionsAppPermissionsEnvironment)[vs[1].(int)]
	}).(UserGroupPermissionsAppPermissionsEnvironmentOutput)
}

type UserGroupPermissionsAppPermissionsPipeline struct {
	// The actions allowed to be performed. Valid options are [CREATE READ UPDATE DELETE]
	Actions []string `pulumi:"actions"`
	// The application IDs to which the permission applies. Leave empty to apply to all applications.
	AppIds []string `pulumi:"appIds"`
	// The environment IDs to which the permission applies. Leave empty to apply to all environments.
	EnvIds []string `pulumi:"envIds"`
	// The filters to apply to the action. Valid options are: NON*PRODUCTION*PIPELINES, PRODUCTION_PIPELINES.
	Filters []string `pulumi:"filters"`
}

// UserGroupPermissionsAppPermissionsPipelineInput is an input type that accepts UserGroupPermissionsAppPermissionsPipelineArgs and UserGroupPermissionsAppPermissionsPipelineOutput values.
// You can construct a concrete instance of `UserGroupPermissionsAppPermissionsPipelineInput` via:
//
//	UserGroupPermissionsAppPermissionsPipelineArgs{...}
type UserGroupPermissionsAppPermissionsPipelineInput interface {
	pulumi.Input

	ToUserGroupPermissionsAppPermissionsPipelineOutput() UserGroupPermissionsAppPermissionsPipelineOutput
	ToUserGroupPermissionsAppPermissionsPipelineOutputWithContext(context.Context) UserGroupPermissionsAppPermissionsPipelineOutput
}

type UserGroupPermissionsAppPermissionsPipelineArgs struct {
	// The actions allowed to be performed. Valid options are [CREATE READ UPDATE DELETE]
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// The application IDs to which the permission applies. Leave empty to apply to all applications.
	AppIds pulumi.StringArrayInput `pulumi:"appIds"`
	// The environment IDs to which the permission applies. Leave empty to apply to all environments.
	EnvIds pulumi.StringArrayInput `pulumi:"envIds"`
	// The filters to apply to the action. Valid options are: NON*PRODUCTION*PIPELINES, PRODUCTION_PIPELINES.
	Filters pulumi.StringArrayInput `pulumi:"filters"`
}

func (UserGroupPermissionsAppPermissionsPipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPermissionsAppPermissionsPipeline)(nil)).Elem()
}

func (i UserGroupPermissionsAppPermissionsPipelineArgs) ToUserGroupPermissionsAppPermissionsPipelineOutput() UserGroupPermissionsAppPermissionsPipelineOutput {
	return i.ToUserGroupPermissionsAppPermissionsPipelineOutputWithContext(context.Background())
}

func (i UserGroupPermissionsAppPermissionsPipelineArgs) ToUserGroupPermissionsAppPermissionsPipelineOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsPipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsAppPermissionsPipelineOutput)
}

// UserGroupPermissionsAppPermissionsPipelineArrayInput is an input type that accepts UserGroupPermissionsAppPermissionsPipelineArray and UserGroupPermissionsAppPermissionsPipelineArrayOutput values.
// You can construct a concrete instance of `UserGroupPermissionsAppPermissionsPipelineArrayInput` via:
//
//	UserGroupPermissionsAppPermissionsPipelineArray{ UserGroupPermissionsAppPermissionsPipelineArgs{...} }
type UserGroupPermissionsAppPermissionsPipelineArrayInput interface {
	pulumi.Input

	ToUserGroupPermissionsAppPermissionsPipelineArrayOutput() UserGroupPermissionsAppPermissionsPipelineArrayOutput
	ToUserGroupPermissionsAppPermissionsPipelineArrayOutputWithContext(context.Context) UserGroupPermissionsAppPermissionsPipelineArrayOutput
}

type UserGroupPermissionsAppPermissionsPipelineArray []UserGroupPermissionsAppPermissionsPipelineInput

func (UserGroupPermissionsAppPermissionsPipelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserGroupPermissionsAppPermissionsPipeline)(nil)).Elem()
}

func (i UserGroupPermissionsAppPermissionsPipelineArray) ToUserGroupPermissionsAppPermissionsPipelineArrayOutput() UserGroupPermissionsAppPermissionsPipelineArrayOutput {
	return i.ToUserGroupPermissionsAppPermissionsPipelineArrayOutputWithContext(context.Background())
}

func (i UserGroupPermissionsAppPermissionsPipelineArray) ToUserGroupPermissionsAppPermissionsPipelineArrayOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsPipelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsAppPermissionsPipelineArrayOutput)
}

type UserGroupPermissionsAppPermissionsPipelineOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsAppPermissionsPipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPermissionsAppPermissionsPipeline)(nil)).Elem()
}

func (o UserGroupPermissionsAppPermissionsPipelineOutput) ToUserGroupPermissionsAppPermissionsPipelineOutput() UserGroupPermissionsAppPermissionsPipelineOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsPipelineOutput) ToUserGroupPermissionsAppPermissionsPipelineOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsPipelineOutput {
	return o
}

// The actions allowed to be performed. Valid options are [CREATE READ UPDATE DELETE]
func (o UserGroupPermissionsAppPermissionsPipelineOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsPipeline) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// The application IDs to which the permission applies. Leave empty to apply to all applications.
func (o UserGroupPermissionsAppPermissionsPipelineOutput) AppIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsPipeline) []string { return v.AppIds }).(pulumi.StringArrayOutput)
}

// The environment IDs to which the permission applies. Leave empty to apply to all environments.
func (o UserGroupPermissionsAppPermissionsPipelineOutput) EnvIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsPipeline) []string { return v.EnvIds }).(pulumi.StringArrayOutput)
}

// The filters to apply to the action. Valid options are: NON*PRODUCTION*PIPELINES, PRODUCTION_PIPELINES.
func (o UserGroupPermissionsAppPermissionsPipelineOutput) Filters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsPipeline) []string { return v.Filters }).(pulumi.StringArrayOutput)
}

type UserGroupPermissionsAppPermissionsPipelineArrayOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsAppPermissionsPipelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserGroupPermissionsAppPermissionsPipeline)(nil)).Elem()
}

func (o UserGroupPermissionsAppPermissionsPipelineArrayOutput) ToUserGroupPermissionsAppPermissionsPipelineArrayOutput() UserGroupPermissionsAppPermissionsPipelineArrayOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsPipelineArrayOutput) ToUserGroupPermissionsAppPermissionsPipelineArrayOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsPipelineArrayOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsPipelineArrayOutput) Index(i pulumi.IntInput) UserGroupPermissionsAppPermissionsPipelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserGroupPermissionsAppPermissionsPipeline {
		return vs[0].([]UserGroupPermissionsAppPermissionsPipeline)[vs[1].(int)]
	}).(UserGroupPermissionsAppPermissionsPipelineOutput)
}

type UserGroupPermissionsAppPermissionsProvisioner struct {
	// The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE
	Actions []string `pulumi:"actions"`
	// The application IDs to which the permission applies. Leave empty to apply to all applications.
	AppIds []string `pulumi:"appIds"`
	// The provisioner IDs to which the permission applies. Leave empty to apply to all provisioners.
	ProvisionerIds []string `pulumi:"provisionerIds"`
}

// UserGroupPermissionsAppPermissionsProvisionerInput is an input type that accepts UserGroupPermissionsAppPermissionsProvisionerArgs and UserGroupPermissionsAppPermissionsProvisionerOutput values.
// You can construct a concrete instance of `UserGroupPermissionsAppPermissionsProvisionerInput` via:
//
//	UserGroupPermissionsAppPermissionsProvisionerArgs{...}
type UserGroupPermissionsAppPermissionsProvisionerInput interface {
	pulumi.Input

	ToUserGroupPermissionsAppPermissionsProvisionerOutput() UserGroupPermissionsAppPermissionsProvisionerOutput
	ToUserGroupPermissionsAppPermissionsProvisionerOutputWithContext(context.Context) UserGroupPermissionsAppPermissionsProvisionerOutput
}

type UserGroupPermissionsAppPermissionsProvisionerArgs struct {
	// The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// The application IDs to which the permission applies. Leave empty to apply to all applications.
	AppIds pulumi.StringArrayInput `pulumi:"appIds"`
	// The provisioner IDs to which the permission applies. Leave empty to apply to all provisioners.
	ProvisionerIds pulumi.StringArrayInput `pulumi:"provisionerIds"`
}

func (UserGroupPermissionsAppPermissionsProvisionerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPermissionsAppPermissionsProvisioner)(nil)).Elem()
}

func (i UserGroupPermissionsAppPermissionsProvisionerArgs) ToUserGroupPermissionsAppPermissionsProvisionerOutput() UserGroupPermissionsAppPermissionsProvisionerOutput {
	return i.ToUserGroupPermissionsAppPermissionsProvisionerOutputWithContext(context.Background())
}

func (i UserGroupPermissionsAppPermissionsProvisionerArgs) ToUserGroupPermissionsAppPermissionsProvisionerOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsProvisionerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsAppPermissionsProvisionerOutput)
}

// UserGroupPermissionsAppPermissionsProvisionerArrayInput is an input type that accepts UserGroupPermissionsAppPermissionsProvisionerArray and UserGroupPermissionsAppPermissionsProvisionerArrayOutput values.
// You can construct a concrete instance of `UserGroupPermissionsAppPermissionsProvisionerArrayInput` via:
//
//	UserGroupPermissionsAppPermissionsProvisionerArray{ UserGroupPermissionsAppPermissionsProvisionerArgs{...} }
type UserGroupPermissionsAppPermissionsProvisionerArrayInput interface {
	pulumi.Input

	ToUserGroupPermissionsAppPermissionsProvisionerArrayOutput() UserGroupPermissionsAppPermissionsProvisionerArrayOutput
	ToUserGroupPermissionsAppPermissionsProvisionerArrayOutputWithContext(context.Context) UserGroupPermissionsAppPermissionsProvisionerArrayOutput
}

type UserGroupPermissionsAppPermissionsProvisionerArray []UserGroupPermissionsAppPermissionsProvisionerInput

func (UserGroupPermissionsAppPermissionsProvisionerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserGroupPermissionsAppPermissionsProvisioner)(nil)).Elem()
}

func (i UserGroupPermissionsAppPermissionsProvisionerArray) ToUserGroupPermissionsAppPermissionsProvisionerArrayOutput() UserGroupPermissionsAppPermissionsProvisionerArrayOutput {
	return i.ToUserGroupPermissionsAppPermissionsProvisionerArrayOutputWithContext(context.Background())
}

func (i UserGroupPermissionsAppPermissionsProvisionerArray) ToUserGroupPermissionsAppPermissionsProvisionerArrayOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsProvisionerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsAppPermissionsProvisionerArrayOutput)
}

type UserGroupPermissionsAppPermissionsProvisionerOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsAppPermissionsProvisionerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPermissionsAppPermissionsProvisioner)(nil)).Elem()
}

func (o UserGroupPermissionsAppPermissionsProvisionerOutput) ToUserGroupPermissionsAppPermissionsProvisionerOutput() UserGroupPermissionsAppPermissionsProvisionerOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsProvisionerOutput) ToUserGroupPermissionsAppPermissionsProvisionerOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsProvisionerOutput {
	return o
}

// The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE
func (o UserGroupPermissionsAppPermissionsProvisionerOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsProvisioner) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// The application IDs to which the permission applies. Leave empty to apply to all applications.
func (o UserGroupPermissionsAppPermissionsProvisionerOutput) AppIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsProvisioner) []string { return v.AppIds }).(pulumi.StringArrayOutput)
}

// The provisioner IDs to which the permission applies. Leave empty to apply to all provisioners.
func (o UserGroupPermissionsAppPermissionsProvisionerOutput) ProvisionerIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsProvisioner) []string { return v.ProvisionerIds }).(pulumi.StringArrayOutput)
}

type UserGroupPermissionsAppPermissionsProvisionerArrayOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsAppPermissionsProvisionerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserGroupPermissionsAppPermissionsProvisioner)(nil)).Elem()
}

func (o UserGroupPermissionsAppPermissionsProvisionerArrayOutput) ToUserGroupPermissionsAppPermissionsProvisionerArrayOutput() UserGroupPermissionsAppPermissionsProvisionerArrayOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsProvisionerArrayOutput) ToUserGroupPermissionsAppPermissionsProvisionerArrayOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsProvisionerArrayOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsProvisionerArrayOutput) Index(i pulumi.IntInput) UserGroupPermissionsAppPermissionsProvisionerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserGroupPermissionsAppPermissionsProvisioner {
		return vs[0].([]UserGroupPermissionsAppPermissionsProvisioner)[vs[1].(int)]
	}).(UserGroupPermissionsAppPermissionsProvisionerOutput)
}

type UserGroupPermissionsAppPermissionsService struct {
	// The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE
	Actions []string `pulumi:"actions"`
	// The application IDs to which the permission applies. Leave empty to apply to all applications.
	AppIds []string `pulumi:"appIds"`
	// The service IDs to which the permission applies. Leave empty to apply to all services.
	ServiceIds []string `pulumi:"serviceIds"`
}

// UserGroupPermissionsAppPermissionsServiceInput is an input type that accepts UserGroupPermissionsAppPermissionsServiceArgs and UserGroupPermissionsAppPermissionsServiceOutput values.
// You can construct a concrete instance of `UserGroupPermissionsAppPermissionsServiceInput` via:
//
//	UserGroupPermissionsAppPermissionsServiceArgs{...}
type UserGroupPermissionsAppPermissionsServiceInput interface {
	pulumi.Input

	ToUserGroupPermissionsAppPermissionsServiceOutput() UserGroupPermissionsAppPermissionsServiceOutput
	ToUserGroupPermissionsAppPermissionsServiceOutputWithContext(context.Context) UserGroupPermissionsAppPermissionsServiceOutput
}

type UserGroupPermissionsAppPermissionsServiceArgs struct {
	// The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// The application IDs to which the permission applies. Leave empty to apply to all applications.
	AppIds pulumi.StringArrayInput `pulumi:"appIds"`
	// The service IDs to which the permission applies. Leave empty to apply to all services.
	ServiceIds pulumi.StringArrayInput `pulumi:"serviceIds"`
}

func (UserGroupPermissionsAppPermissionsServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPermissionsAppPermissionsService)(nil)).Elem()
}

func (i UserGroupPermissionsAppPermissionsServiceArgs) ToUserGroupPermissionsAppPermissionsServiceOutput() UserGroupPermissionsAppPermissionsServiceOutput {
	return i.ToUserGroupPermissionsAppPermissionsServiceOutputWithContext(context.Background())
}

func (i UserGroupPermissionsAppPermissionsServiceArgs) ToUserGroupPermissionsAppPermissionsServiceOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsAppPermissionsServiceOutput)
}

// UserGroupPermissionsAppPermissionsServiceArrayInput is an input type that accepts UserGroupPermissionsAppPermissionsServiceArray and UserGroupPermissionsAppPermissionsServiceArrayOutput values.
// You can construct a concrete instance of `UserGroupPermissionsAppPermissionsServiceArrayInput` via:
//
//	UserGroupPermissionsAppPermissionsServiceArray{ UserGroupPermissionsAppPermissionsServiceArgs{...} }
type UserGroupPermissionsAppPermissionsServiceArrayInput interface {
	pulumi.Input

	ToUserGroupPermissionsAppPermissionsServiceArrayOutput() UserGroupPermissionsAppPermissionsServiceArrayOutput
	ToUserGroupPermissionsAppPermissionsServiceArrayOutputWithContext(context.Context) UserGroupPermissionsAppPermissionsServiceArrayOutput
}

type UserGroupPermissionsAppPermissionsServiceArray []UserGroupPermissionsAppPermissionsServiceInput

func (UserGroupPermissionsAppPermissionsServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserGroupPermissionsAppPermissionsService)(nil)).Elem()
}

func (i UserGroupPermissionsAppPermissionsServiceArray) ToUserGroupPermissionsAppPermissionsServiceArrayOutput() UserGroupPermissionsAppPermissionsServiceArrayOutput {
	return i.ToUserGroupPermissionsAppPermissionsServiceArrayOutputWithContext(context.Background())
}

func (i UserGroupPermissionsAppPermissionsServiceArray) ToUserGroupPermissionsAppPermissionsServiceArrayOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsAppPermissionsServiceArrayOutput)
}

type UserGroupPermissionsAppPermissionsServiceOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsAppPermissionsServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPermissionsAppPermissionsService)(nil)).Elem()
}

func (o UserGroupPermissionsAppPermissionsServiceOutput) ToUserGroupPermissionsAppPermissionsServiceOutput() UserGroupPermissionsAppPermissionsServiceOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsServiceOutput) ToUserGroupPermissionsAppPermissionsServiceOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsServiceOutput {
	return o
}

// The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE
func (o UserGroupPermissionsAppPermissionsServiceOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsService) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// The application IDs to which the permission applies. Leave empty to apply to all applications.
func (o UserGroupPermissionsAppPermissionsServiceOutput) AppIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsService) []string { return v.AppIds }).(pulumi.StringArrayOutput)
}

// The service IDs to which the permission applies. Leave empty to apply to all services.
func (o UserGroupPermissionsAppPermissionsServiceOutput) ServiceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsService) []string { return v.ServiceIds }).(pulumi.StringArrayOutput)
}

type UserGroupPermissionsAppPermissionsServiceArrayOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsAppPermissionsServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserGroupPermissionsAppPermissionsService)(nil)).Elem()
}

func (o UserGroupPermissionsAppPermissionsServiceArrayOutput) ToUserGroupPermissionsAppPermissionsServiceArrayOutput() UserGroupPermissionsAppPermissionsServiceArrayOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsServiceArrayOutput) ToUserGroupPermissionsAppPermissionsServiceArrayOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsServiceArrayOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsServiceArrayOutput) Index(i pulumi.IntInput) UserGroupPermissionsAppPermissionsServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserGroupPermissionsAppPermissionsService {
		return vs[0].([]UserGroupPermissionsAppPermissionsService)[vs[1].(int)]
	}).(UserGroupPermissionsAppPermissionsServiceOutput)
}

type UserGroupPermissionsAppPermissionsTemplate struct {
	// The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE
	Actions []string `pulumi:"actions"`
	// The application IDs to which the permission applies. Leave empty to apply to all applications.
	AppIds []string `pulumi:"appIds"`
	// The template IDs to which the permission applies. Leave empty to apply to all environments.
	TemplateIds []string `pulumi:"templateIds"`
}

// UserGroupPermissionsAppPermissionsTemplateInput is an input type that accepts UserGroupPermissionsAppPermissionsTemplateArgs and UserGroupPermissionsAppPermissionsTemplateOutput values.
// You can construct a concrete instance of `UserGroupPermissionsAppPermissionsTemplateInput` via:
//
//	UserGroupPermissionsAppPermissionsTemplateArgs{...}
type UserGroupPermissionsAppPermissionsTemplateInput interface {
	pulumi.Input

	ToUserGroupPermissionsAppPermissionsTemplateOutput() UserGroupPermissionsAppPermissionsTemplateOutput
	ToUserGroupPermissionsAppPermissionsTemplateOutputWithContext(context.Context) UserGroupPermissionsAppPermissionsTemplateOutput
}

type UserGroupPermissionsAppPermissionsTemplateArgs struct {
	// The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// The application IDs to which the permission applies. Leave empty to apply to all applications.
	AppIds pulumi.StringArrayInput `pulumi:"appIds"`
	// The template IDs to which the permission applies. Leave empty to apply to all environments.
	TemplateIds pulumi.StringArrayInput `pulumi:"templateIds"`
}

func (UserGroupPermissionsAppPermissionsTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPermissionsAppPermissionsTemplate)(nil)).Elem()
}

func (i UserGroupPermissionsAppPermissionsTemplateArgs) ToUserGroupPermissionsAppPermissionsTemplateOutput() UserGroupPermissionsAppPermissionsTemplateOutput {
	return i.ToUserGroupPermissionsAppPermissionsTemplateOutputWithContext(context.Background())
}

func (i UserGroupPermissionsAppPermissionsTemplateArgs) ToUserGroupPermissionsAppPermissionsTemplateOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsAppPermissionsTemplateOutput)
}

// UserGroupPermissionsAppPermissionsTemplateArrayInput is an input type that accepts UserGroupPermissionsAppPermissionsTemplateArray and UserGroupPermissionsAppPermissionsTemplateArrayOutput values.
// You can construct a concrete instance of `UserGroupPermissionsAppPermissionsTemplateArrayInput` via:
//
//	UserGroupPermissionsAppPermissionsTemplateArray{ UserGroupPermissionsAppPermissionsTemplateArgs{...} }
type UserGroupPermissionsAppPermissionsTemplateArrayInput interface {
	pulumi.Input

	ToUserGroupPermissionsAppPermissionsTemplateArrayOutput() UserGroupPermissionsAppPermissionsTemplateArrayOutput
	ToUserGroupPermissionsAppPermissionsTemplateArrayOutputWithContext(context.Context) UserGroupPermissionsAppPermissionsTemplateArrayOutput
}

type UserGroupPermissionsAppPermissionsTemplateArray []UserGroupPermissionsAppPermissionsTemplateInput

func (UserGroupPermissionsAppPermissionsTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserGroupPermissionsAppPermissionsTemplate)(nil)).Elem()
}

func (i UserGroupPermissionsAppPermissionsTemplateArray) ToUserGroupPermissionsAppPermissionsTemplateArrayOutput() UserGroupPermissionsAppPermissionsTemplateArrayOutput {
	return i.ToUserGroupPermissionsAppPermissionsTemplateArrayOutputWithContext(context.Background())
}

func (i UserGroupPermissionsAppPermissionsTemplateArray) ToUserGroupPermissionsAppPermissionsTemplateArrayOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsAppPermissionsTemplateArrayOutput)
}

type UserGroupPermissionsAppPermissionsTemplateOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsAppPermissionsTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPermissionsAppPermissionsTemplate)(nil)).Elem()
}

func (o UserGroupPermissionsAppPermissionsTemplateOutput) ToUserGroupPermissionsAppPermissionsTemplateOutput() UserGroupPermissionsAppPermissionsTemplateOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsTemplateOutput) ToUserGroupPermissionsAppPermissionsTemplateOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsTemplateOutput {
	return o
}

// The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE
func (o UserGroupPermissionsAppPermissionsTemplateOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsTemplate) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// The application IDs to which the permission applies. Leave empty to apply to all applications.
func (o UserGroupPermissionsAppPermissionsTemplateOutput) AppIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsTemplate) []string { return v.AppIds }).(pulumi.StringArrayOutput)
}

// The template IDs to which the permission applies. Leave empty to apply to all environments.
func (o UserGroupPermissionsAppPermissionsTemplateOutput) TemplateIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsTemplate) []string { return v.TemplateIds }).(pulumi.StringArrayOutput)
}

type UserGroupPermissionsAppPermissionsTemplateArrayOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsAppPermissionsTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserGroupPermissionsAppPermissionsTemplate)(nil)).Elem()
}

func (o UserGroupPermissionsAppPermissionsTemplateArrayOutput) ToUserGroupPermissionsAppPermissionsTemplateArrayOutput() UserGroupPermissionsAppPermissionsTemplateArrayOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsTemplateArrayOutput) ToUserGroupPermissionsAppPermissionsTemplateArrayOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsTemplateArrayOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsTemplateArrayOutput) Index(i pulumi.IntInput) UserGroupPermissionsAppPermissionsTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserGroupPermissionsAppPermissionsTemplate {
		return vs[0].([]UserGroupPermissionsAppPermissionsTemplate)[vs[1].(int)]
	}).(UserGroupPermissionsAppPermissionsTemplateOutput)
}

type UserGroupPermissionsAppPermissionsWorkflow struct {
	// The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE
	Actions []string `pulumi:"actions"`
	// The application IDs to which the permission applies. Leave empty to apply to all applications.
	AppIds []string `pulumi:"appIds"`
	// The filters to apply to the action. Valid options are: NON*PRODUCTION*WORKFLOWS, PRODUCTION*WORKFLOWS, WORKFLOW*TEMPLATES.
	Filters []string `pulumi:"filters"`
}

// UserGroupPermissionsAppPermissionsWorkflowInput is an input type that accepts UserGroupPermissionsAppPermissionsWorkflowArgs and UserGroupPermissionsAppPermissionsWorkflowOutput values.
// You can construct a concrete instance of `UserGroupPermissionsAppPermissionsWorkflowInput` via:
//
//	UserGroupPermissionsAppPermissionsWorkflowArgs{...}
type UserGroupPermissionsAppPermissionsWorkflowInput interface {
	pulumi.Input

	ToUserGroupPermissionsAppPermissionsWorkflowOutput() UserGroupPermissionsAppPermissionsWorkflowOutput
	ToUserGroupPermissionsAppPermissionsWorkflowOutputWithContext(context.Context) UserGroupPermissionsAppPermissionsWorkflowOutput
}

type UserGroupPermissionsAppPermissionsWorkflowArgs struct {
	// The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// The application IDs to which the permission applies. Leave empty to apply to all applications.
	AppIds pulumi.StringArrayInput `pulumi:"appIds"`
	// The filters to apply to the action. Valid options are: NON*PRODUCTION*WORKFLOWS, PRODUCTION*WORKFLOWS, WORKFLOW*TEMPLATES.
	Filters pulumi.StringArrayInput `pulumi:"filters"`
}

func (UserGroupPermissionsAppPermissionsWorkflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPermissionsAppPermissionsWorkflow)(nil)).Elem()
}

func (i UserGroupPermissionsAppPermissionsWorkflowArgs) ToUserGroupPermissionsAppPermissionsWorkflowOutput() UserGroupPermissionsAppPermissionsWorkflowOutput {
	return i.ToUserGroupPermissionsAppPermissionsWorkflowOutputWithContext(context.Background())
}

func (i UserGroupPermissionsAppPermissionsWorkflowArgs) ToUserGroupPermissionsAppPermissionsWorkflowOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsWorkflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsAppPermissionsWorkflowOutput)
}

// UserGroupPermissionsAppPermissionsWorkflowArrayInput is an input type that accepts UserGroupPermissionsAppPermissionsWorkflowArray and UserGroupPermissionsAppPermissionsWorkflowArrayOutput values.
// You can construct a concrete instance of `UserGroupPermissionsAppPermissionsWorkflowArrayInput` via:
//
//	UserGroupPermissionsAppPermissionsWorkflowArray{ UserGroupPermissionsAppPermissionsWorkflowArgs{...} }
type UserGroupPermissionsAppPermissionsWorkflowArrayInput interface {
	pulumi.Input

	ToUserGroupPermissionsAppPermissionsWorkflowArrayOutput() UserGroupPermissionsAppPermissionsWorkflowArrayOutput
	ToUserGroupPermissionsAppPermissionsWorkflowArrayOutputWithContext(context.Context) UserGroupPermissionsAppPermissionsWorkflowArrayOutput
}

type UserGroupPermissionsAppPermissionsWorkflowArray []UserGroupPermissionsAppPermissionsWorkflowInput

func (UserGroupPermissionsAppPermissionsWorkflowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserGroupPermissionsAppPermissionsWorkflow)(nil)).Elem()
}

func (i UserGroupPermissionsAppPermissionsWorkflowArray) ToUserGroupPermissionsAppPermissionsWorkflowArrayOutput() UserGroupPermissionsAppPermissionsWorkflowArrayOutput {
	return i.ToUserGroupPermissionsAppPermissionsWorkflowArrayOutputWithContext(context.Background())
}

func (i UserGroupPermissionsAppPermissionsWorkflowArray) ToUserGroupPermissionsAppPermissionsWorkflowArrayOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsWorkflowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPermissionsAppPermissionsWorkflowArrayOutput)
}

type UserGroupPermissionsAppPermissionsWorkflowOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsAppPermissionsWorkflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPermissionsAppPermissionsWorkflow)(nil)).Elem()
}

func (o UserGroupPermissionsAppPermissionsWorkflowOutput) ToUserGroupPermissionsAppPermissionsWorkflowOutput() UserGroupPermissionsAppPermissionsWorkflowOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsWorkflowOutput) ToUserGroupPermissionsAppPermissionsWorkflowOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsWorkflowOutput {
	return o
}

// The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE
func (o UserGroupPermissionsAppPermissionsWorkflowOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsWorkflow) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// The application IDs to which the permission applies. Leave empty to apply to all applications.
func (o UserGroupPermissionsAppPermissionsWorkflowOutput) AppIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsWorkflow) []string { return v.AppIds }).(pulumi.StringArrayOutput)
}

// The filters to apply to the action. Valid options are: NON*PRODUCTION*WORKFLOWS, PRODUCTION*WORKFLOWS, WORKFLOW*TEMPLATES.
func (o UserGroupPermissionsAppPermissionsWorkflowOutput) Filters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPermissionsAppPermissionsWorkflow) []string { return v.Filters }).(pulumi.StringArrayOutput)
}

type UserGroupPermissionsAppPermissionsWorkflowArrayOutput struct{ *pulumi.OutputState }

func (UserGroupPermissionsAppPermissionsWorkflowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserGroupPermissionsAppPermissionsWorkflow)(nil)).Elem()
}

func (o UserGroupPermissionsAppPermissionsWorkflowArrayOutput) ToUserGroupPermissionsAppPermissionsWorkflowArrayOutput() UserGroupPermissionsAppPermissionsWorkflowArrayOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsWorkflowArrayOutput) ToUserGroupPermissionsAppPermissionsWorkflowArrayOutputWithContext(ctx context.Context) UserGroupPermissionsAppPermissionsWorkflowArrayOutput {
	return o
}

func (o UserGroupPermissionsAppPermissionsWorkflowArrayOutput) Index(i pulumi.IntInput) UserGroupPermissionsAppPermissionsWorkflowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserGroupPermissionsAppPermissionsWorkflow {
		return vs[0].([]UserGroupPermissionsAppPermissionsWorkflow)[vs[1].(int)]
	}).(UserGroupPermissionsAppPermissionsWorkflowOutput)
}

type UserGroupSamlSettings struct {
	// The group name of the SAML user group.
	GroupName *string `pulumi:"groupName"`
	// The ID of the SSO provider.
	SsoProviderId *string `pulumi:"ssoProviderId"`
}

// UserGroupSamlSettingsInput is an input type that accepts UserGroupSamlSettingsArgs and UserGroupSamlSettingsOutput values.
// You can construct a concrete instance of `UserGroupSamlSettingsInput` via:
//
//	UserGroupSamlSettingsArgs{...}
type UserGroupSamlSettingsInput interface {
	pulumi.Input

	ToUserGroupSamlSettingsOutput() UserGroupSamlSettingsOutput
	ToUserGroupSamlSettingsOutputWithContext(context.Context) UserGroupSamlSettingsOutput
}

type UserGroupSamlSettingsArgs struct {
	// The group name of the SAML user group.
	GroupName pulumi.StringPtrInput `pulumi:"groupName"`
	// The ID of the SSO provider.
	SsoProviderId pulumi.StringPtrInput `pulumi:"ssoProviderId"`
}

func (UserGroupSamlSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupSamlSettings)(nil)).Elem()
}

func (i UserGroupSamlSettingsArgs) ToUserGroupSamlSettingsOutput() UserGroupSamlSettingsOutput {
	return i.ToUserGroupSamlSettingsOutputWithContext(context.Background())
}

func (i UserGroupSamlSettingsArgs) ToUserGroupSamlSettingsOutputWithContext(ctx context.Context) UserGroupSamlSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupSamlSettingsOutput)
}

func (i UserGroupSamlSettingsArgs) ToUserGroupSamlSettingsPtrOutput() UserGroupSamlSettingsPtrOutput {
	return i.ToUserGroupSamlSettingsPtrOutputWithContext(context.Background())
}

func (i UserGroupSamlSettingsArgs) ToUserGroupSamlSettingsPtrOutputWithContext(ctx context.Context) UserGroupSamlSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupSamlSettingsOutput).ToUserGroupSamlSettingsPtrOutputWithContext(ctx)
}

// UserGroupSamlSettingsPtrInput is an input type that accepts UserGroupSamlSettingsArgs, UserGroupSamlSettingsPtr and UserGroupSamlSettingsPtrOutput values.
// You can construct a concrete instance of `UserGroupSamlSettingsPtrInput` via:
//
//	        UserGroupSamlSettingsArgs{...}
//
//	or:
//
//	        nil
type UserGroupSamlSettingsPtrInput interface {
	pulumi.Input

	ToUserGroupSamlSettingsPtrOutput() UserGroupSamlSettingsPtrOutput
	ToUserGroupSamlSettingsPtrOutputWithContext(context.Context) UserGroupSamlSettingsPtrOutput
}

type userGroupSamlSettingsPtrType UserGroupSamlSettingsArgs

func UserGroupSamlSettingsPtr(v *UserGroupSamlSettingsArgs) UserGroupSamlSettingsPtrInput {
	return (*userGroupSamlSettingsPtrType)(v)
}

func (*userGroupSamlSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupSamlSettings)(nil)).Elem()
}

func (i *userGroupSamlSettingsPtrType) ToUserGroupSamlSettingsPtrOutput() UserGroupSamlSettingsPtrOutput {
	return i.ToUserGroupSamlSettingsPtrOutputWithContext(context.Background())
}

func (i *userGroupSamlSettingsPtrType) ToUserGroupSamlSettingsPtrOutputWithContext(ctx context.Context) UserGroupSamlSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupSamlSettingsPtrOutput)
}

type UserGroupSamlSettingsOutput struct{ *pulumi.OutputState }

func (UserGroupSamlSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupSamlSettings)(nil)).Elem()
}

func (o UserGroupSamlSettingsOutput) ToUserGroupSamlSettingsOutput() UserGroupSamlSettingsOutput {
	return o
}

func (o UserGroupSamlSettingsOutput) ToUserGroupSamlSettingsOutputWithContext(ctx context.Context) UserGroupSamlSettingsOutput {
	return o
}

func (o UserGroupSamlSettingsOutput) ToUserGroupSamlSettingsPtrOutput() UserGroupSamlSettingsPtrOutput {
	return o.ToUserGroupSamlSettingsPtrOutputWithContext(context.Background())
}

func (o UserGroupSamlSettingsOutput) ToUserGroupSamlSettingsPtrOutputWithContext(ctx context.Context) UserGroupSamlSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserGroupSamlSettings) *UserGroupSamlSettings {
		return &v
	}).(UserGroupSamlSettingsPtrOutput)
}

// The group name of the SAML user group.
func (o UserGroupSamlSettingsOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserGroupSamlSettings) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

// The ID of the SSO provider.
func (o UserGroupSamlSettingsOutput) SsoProviderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserGroupSamlSettings) *string { return v.SsoProviderId }).(pulumi.StringPtrOutput)
}

type UserGroupSamlSettingsPtrOutput struct{ *pulumi.OutputState }

func (UserGroupSamlSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupSamlSettings)(nil)).Elem()
}

func (o UserGroupSamlSettingsPtrOutput) ToUserGroupSamlSettingsPtrOutput() UserGroupSamlSettingsPtrOutput {
	return o
}

func (o UserGroupSamlSettingsPtrOutput) ToUserGroupSamlSettingsPtrOutputWithContext(ctx context.Context) UserGroupSamlSettingsPtrOutput {
	return o
}

func (o UserGroupSamlSettingsPtrOutput) Elem() UserGroupSamlSettingsOutput {
	return o.ApplyT(func(v *UserGroupSamlSettings) UserGroupSamlSettings {
		if v != nil {
			return *v
		}
		var ret UserGroupSamlSettings
		return ret
	}).(UserGroupSamlSettingsOutput)
}

// The group name of the SAML user group.
func (o UserGroupSamlSettingsPtrOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserGroupSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.GroupName
	}).(pulumi.StringPtrOutput)
}

// The ID of the SSO provider.
func (o UserGroupSamlSettingsPtrOutput) SsoProviderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserGroupSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.SsoProviderId
	}).(pulumi.StringPtrOutput)
}

type GetEncryptedTextUsageScope struct {
	// Id of the application to scope to. If empty then this scope applies to all applications.
	ApplicationId *string `pulumi:"applicationId"`
	// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	EnvironmentFilterType *string `pulumi:"environmentFilterType"`
	// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
	EnvironmentId *string `pulumi:"environmentId"`
}

// GetEncryptedTextUsageScopeInput is an input type that accepts GetEncryptedTextUsageScopeArgs and GetEncryptedTextUsageScopeOutput values.
// You can construct a concrete instance of `GetEncryptedTextUsageScopeInput` via:
//
//	GetEncryptedTextUsageScopeArgs{...}
type GetEncryptedTextUsageScopeInput interface {
	pulumi.Input

	ToGetEncryptedTextUsageScopeOutput() GetEncryptedTextUsageScopeOutput
	ToGetEncryptedTextUsageScopeOutputWithContext(context.Context) GetEncryptedTextUsageScopeOutput
}

type GetEncryptedTextUsageScopeArgs struct {
	// Id of the application to scope to. If empty then this scope applies to all applications.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
	// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	EnvironmentFilterType pulumi.StringPtrInput `pulumi:"environmentFilterType"`
	// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
}

func (GetEncryptedTextUsageScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEncryptedTextUsageScope)(nil)).Elem()
}

func (i GetEncryptedTextUsageScopeArgs) ToGetEncryptedTextUsageScopeOutput() GetEncryptedTextUsageScopeOutput {
	return i.ToGetEncryptedTextUsageScopeOutputWithContext(context.Background())
}

func (i GetEncryptedTextUsageScopeArgs) ToGetEncryptedTextUsageScopeOutputWithContext(ctx context.Context) GetEncryptedTextUsageScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEncryptedTextUsageScopeOutput)
}

// GetEncryptedTextUsageScopeArrayInput is an input type that accepts GetEncryptedTextUsageScopeArray and GetEncryptedTextUsageScopeArrayOutput values.
// You can construct a concrete instance of `GetEncryptedTextUsageScopeArrayInput` via:
//
//	GetEncryptedTextUsageScopeArray{ GetEncryptedTextUsageScopeArgs{...} }
type GetEncryptedTextUsageScopeArrayInput interface {
	pulumi.Input

	ToGetEncryptedTextUsageScopeArrayOutput() GetEncryptedTextUsageScopeArrayOutput
	ToGetEncryptedTextUsageScopeArrayOutputWithContext(context.Context) GetEncryptedTextUsageScopeArrayOutput
}

type GetEncryptedTextUsageScopeArray []GetEncryptedTextUsageScopeInput

func (GetEncryptedTextUsageScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEncryptedTextUsageScope)(nil)).Elem()
}

func (i GetEncryptedTextUsageScopeArray) ToGetEncryptedTextUsageScopeArrayOutput() GetEncryptedTextUsageScopeArrayOutput {
	return i.ToGetEncryptedTextUsageScopeArrayOutputWithContext(context.Background())
}

func (i GetEncryptedTextUsageScopeArray) ToGetEncryptedTextUsageScopeArrayOutputWithContext(ctx context.Context) GetEncryptedTextUsageScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEncryptedTextUsageScopeArrayOutput)
}

type GetEncryptedTextUsageScopeOutput struct{ *pulumi.OutputState }

func (GetEncryptedTextUsageScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEncryptedTextUsageScope)(nil)).Elem()
}

func (o GetEncryptedTextUsageScopeOutput) ToGetEncryptedTextUsageScopeOutput() GetEncryptedTextUsageScopeOutput {
	return o
}

func (o GetEncryptedTextUsageScopeOutput) ToGetEncryptedTextUsageScopeOutputWithContext(ctx context.Context) GetEncryptedTextUsageScopeOutput {
	return o
}

// Id of the application to scope to. If empty then this scope applies to all applications.
func (o GetEncryptedTextUsageScopeOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEncryptedTextUsageScope) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
func (o GetEncryptedTextUsageScopeOutput) EnvironmentFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEncryptedTextUsageScope) *string { return v.EnvironmentFilterType }).(pulumi.StringPtrOutput)
}

// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
func (o GetEncryptedTextUsageScopeOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEncryptedTextUsageScope) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

type GetEncryptedTextUsageScopeArrayOutput struct{ *pulumi.OutputState }

func (GetEncryptedTextUsageScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEncryptedTextUsageScope)(nil)).Elem()
}

func (o GetEncryptedTextUsageScopeArrayOutput) ToGetEncryptedTextUsageScopeArrayOutput() GetEncryptedTextUsageScopeArrayOutput {
	return o
}

func (o GetEncryptedTextUsageScopeArrayOutput) ToGetEncryptedTextUsageScopeArrayOutputWithContext(ctx context.Context) GetEncryptedTextUsageScopeArrayOutput {
	return o
}

func (o GetEncryptedTextUsageScopeArrayOutput) Index(i pulumi.IntInput) GetEncryptedTextUsageScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEncryptedTextUsageScope {
		return vs[0].([]GetEncryptedTextUsageScope)[vs[1].(int)]
	}).(GetEncryptedTextUsageScopeOutput)
}

type GetEnvironmentVariableOverride struct {
	// The name of the variable
	Name string `pulumi:"name"`
	// The name of the service
	ServiceName string `pulumi:"serviceName"`
	// The type of the service variable. Valid values are `TEXT` and `ENCRYPTED_TEXT`
	Type string `pulumi:"type"`
	// The value of the service variable
	Value string `pulumi:"value"`
}

// GetEnvironmentVariableOverrideInput is an input type that accepts GetEnvironmentVariableOverrideArgs and GetEnvironmentVariableOverrideOutput values.
// You can construct a concrete instance of `GetEnvironmentVariableOverrideInput` via:
//
//	GetEnvironmentVariableOverrideArgs{...}
type GetEnvironmentVariableOverrideInput interface {
	pulumi.Input

	ToGetEnvironmentVariableOverrideOutput() GetEnvironmentVariableOverrideOutput
	ToGetEnvironmentVariableOverrideOutputWithContext(context.Context) GetEnvironmentVariableOverrideOutput
}

type GetEnvironmentVariableOverrideArgs struct {
	// The name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the service
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	// The type of the service variable. Valid values are `TEXT` and `ENCRYPTED_TEXT`
	Type pulumi.StringInput `pulumi:"type"`
	// The value of the service variable
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetEnvironmentVariableOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEnvironmentVariableOverride)(nil)).Elem()
}

func (i GetEnvironmentVariableOverrideArgs) ToGetEnvironmentVariableOverrideOutput() GetEnvironmentVariableOverrideOutput {
	return i.ToGetEnvironmentVariableOverrideOutputWithContext(context.Background())
}

func (i GetEnvironmentVariableOverrideArgs) ToGetEnvironmentVariableOverrideOutputWithContext(ctx context.Context) GetEnvironmentVariableOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEnvironmentVariableOverrideOutput)
}

// GetEnvironmentVariableOverrideArrayInput is an input type that accepts GetEnvironmentVariableOverrideArray and GetEnvironmentVariableOverrideArrayOutput values.
// You can construct a concrete instance of `GetEnvironmentVariableOverrideArrayInput` via:
//
//	GetEnvironmentVariableOverrideArray{ GetEnvironmentVariableOverrideArgs{...} }
type GetEnvironmentVariableOverrideArrayInput interface {
	pulumi.Input

	ToGetEnvironmentVariableOverrideArrayOutput() GetEnvironmentVariableOverrideArrayOutput
	ToGetEnvironmentVariableOverrideArrayOutputWithContext(context.Context) GetEnvironmentVariableOverrideArrayOutput
}

type GetEnvironmentVariableOverrideArray []GetEnvironmentVariableOverrideInput

func (GetEnvironmentVariableOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEnvironmentVariableOverride)(nil)).Elem()
}

func (i GetEnvironmentVariableOverrideArray) ToGetEnvironmentVariableOverrideArrayOutput() GetEnvironmentVariableOverrideArrayOutput {
	return i.ToGetEnvironmentVariableOverrideArrayOutputWithContext(context.Background())
}

func (i GetEnvironmentVariableOverrideArray) ToGetEnvironmentVariableOverrideArrayOutputWithContext(ctx context.Context) GetEnvironmentVariableOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEnvironmentVariableOverrideArrayOutput)
}

type GetEnvironmentVariableOverrideOutput struct{ *pulumi.OutputState }

func (GetEnvironmentVariableOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEnvironmentVariableOverride)(nil)).Elem()
}

func (o GetEnvironmentVariableOverrideOutput) ToGetEnvironmentVariableOverrideOutput() GetEnvironmentVariableOverrideOutput {
	return o
}

func (o GetEnvironmentVariableOverrideOutput) ToGetEnvironmentVariableOverrideOutputWithContext(ctx context.Context) GetEnvironmentVariableOverrideOutput {
	return o
}

// The name of the variable
func (o GetEnvironmentVariableOverrideOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetEnvironmentVariableOverride) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the service
func (o GetEnvironmentVariableOverrideOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetEnvironmentVariableOverride) string { return v.ServiceName }).(pulumi.StringOutput)
}

// The type of the service variable. Valid values are `TEXT` and `ENCRYPTED_TEXT`
func (o GetEnvironmentVariableOverrideOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetEnvironmentVariableOverride) string { return v.Type }).(pulumi.StringOutput)
}

// The value of the service variable
func (o GetEnvironmentVariableOverrideOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetEnvironmentVariableOverride) string { return v.Value }).(pulumi.StringOutput)
}

type GetEnvironmentVariableOverrideArrayOutput struct{ *pulumi.OutputState }

func (GetEnvironmentVariableOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEnvironmentVariableOverride)(nil)).Elem()
}

func (o GetEnvironmentVariableOverrideArrayOutput) ToGetEnvironmentVariableOverrideArrayOutput() GetEnvironmentVariableOverrideArrayOutput {
	return o
}

func (o GetEnvironmentVariableOverrideArrayOutput) ToGetEnvironmentVariableOverrideArrayOutputWithContext(ctx context.Context) GetEnvironmentVariableOverrideArrayOutput {
	return o
}

func (o GetEnvironmentVariableOverrideArrayOutput) Index(i pulumi.IntInput) GetEnvironmentVariableOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEnvironmentVariableOverride {
		return vs[0].([]GetEnvironmentVariableOverride)[vs[1].(int)]
	}).(GetEnvironmentVariableOverrideOutput)
}

type GetGitConnectorCommitDetail struct {
	// The email id of the author.
	AuthorEmailId string `pulumi:"authorEmailId"`
	// The name of the author.
	AuthorName string `pulumi:"authorName"`
	// Commit message.
	Message string `pulumi:"message"`
}

// GetGitConnectorCommitDetailInput is an input type that accepts GetGitConnectorCommitDetailArgs and GetGitConnectorCommitDetailOutput values.
// You can construct a concrete instance of `GetGitConnectorCommitDetailInput` via:
//
//	GetGitConnectorCommitDetailArgs{...}
type GetGitConnectorCommitDetailInput interface {
	pulumi.Input

	ToGetGitConnectorCommitDetailOutput() GetGitConnectorCommitDetailOutput
	ToGetGitConnectorCommitDetailOutputWithContext(context.Context) GetGitConnectorCommitDetailOutput
}

type GetGitConnectorCommitDetailArgs struct {
	// The email id of the author.
	AuthorEmailId pulumi.StringInput `pulumi:"authorEmailId"`
	// The name of the author.
	AuthorName pulumi.StringInput `pulumi:"authorName"`
	// Commit message.
	Message pulumi.StringInput `pulumi:"message"`
}

func (GetGitConnectorCommitDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGitConnectorCommitDetail)(nil)).Elem()
}

func (i GetGitConnectorCommitDetailArgs) ToGetGitConnectorCommitDetailOutput() GetGitConnectorCommitDetailOutput {
	return i.ToGetGitConnectorCommitDetailOutputWithContext(context.Background())
}

func (i GetGitConnectorCommitDetailArgs) ToGetGitConnectorCommitDetailOutputWithContext(ctx context.Context) GetGitConnectorCommitDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGitConnectorCommitDetailOutput)
}

// GetGitConnectorCommitDetailArrayInput is an input type that accepts GetGitConnectorCommitDetailArray and GetGitConnectorCommitDetailArrayOutput values.
// You can construct a concrete instance of `GetGitConnectorCommitDetailArrayInput` via:
//
//	GetGitConnectorCommitDetailArray{ GetGitConnectorCommitDetailArgs{...} }
type GetGitConnectorCommitDetailArrayInput interface {
	pulumi.Input

	ToGetGitConnectorCommitDetailArrayOutput() GetGitConnectorCommitDetailArrayOutput
	ToGetGitConnectorCommitDetailArrayOutputWithContext(context.Context) GetGitConnectorCommitDetailArrayOutput
}

type GetGitConnectorCommitDetailArray []GetGitConnectorCommitDetailInput

func (GetGitConnectorCommitDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGitConnectorCommitDetail)(nil)).Elem()
}

func (i GetGitConnectorCommitDetailArray) ToGetGitConnectorCommitDetailArrayOutput() GetGitConnectorCommitDetailArrayOutput {
	return i.ToGetGitConnectorCommitDetailArrayOutputWithContext(context.Background())
}

func (i GetGitConnectorCommitDetailArray) ToGetGitConnectorCommitDetailArrayOutputWithContext(ctx context.Context) GetGitConnectorCommitDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGitConnectorCommitDetailArrayOutput)
}

type GetGitConnectorCommitDetailOutput struct{ *pulumi.OutputState }

func (GetGitConnectorCommitDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGitConnectorCommitDetail)(nil)).Elem()
}

func (o GetGitConnectorCommitDetailOutput) ToGetGitConnectorCommitDetailOutput() GetGitConnectorCommitDetailOutput {
	return o
}

func (o GetGitConnectorCommitDetailOutput) ToGetGitConnectorCommitDetailOutputWithContext(ctx context.Context) GetGitConnectorCommitDetailOutput {
	return o
}

// The email id of the author.
func (o GetGitConnectorCommitDetailOutput) AuthorEmailId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGitConnectorCommitDetail) string { return v.AuthorEmailId }).(pulumi.StringOutput)
}

// The name of the author.
func (o GetGitConnectorCommitDetailOutput) AuthorName() pulumi.StringOutput {
	return o.ApplyT(func(v GetGitConnectorCommitDetail) string { return v.AuthorName }).(pulumi.StringOutput)
}

// Commit message.
func (o GetGitConnectorCommitDetailOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GetGitConnectorCommitDetail) string { return v.Message }).(pulumi.StringOutput)
}

type GetGitConnectorCommitDetailArrayOutput struct{ *pulumi.OutputState }

func (GetGitConnectorCommitDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGitConnectorCommitDetail)(nil)).Elem()
}

func (o GetGitConnectorCommitDetailArrayOutput) ToGetGitConnectorCommitDetailArrayOutput() GetGitConnectorCommitDetailArrayOutput {
	return o
}

func (o GetGitConnectorCommitDetailArrayOutput) ToGetGitConnectorCommitDetailArrayOutputWithContext(ctx context.Context) GetGitConnectorCommitDetailArrayOutput {
	return o
}

func (o GetGitConnectorCommitDetailArrayOutput) Index(i pulumi.IntInput) GetGitConnectorCommitDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGitConnectorCommitDetail {
		return vs[0].([]GetGitConnectorCommitDetail)[vs[1].(int)]
	}).(GetGitConnectorCommitDetailOutput)
}

type GetSecretManagerUsageScope struct {
	// Id of the application to scope to. If empty then this scope applies to all applications.
	ApplicationId *string `pulumi:"applicationId"`
	// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	EnvironmentFilterType *string `pulumi:"environmentFilterType"`
	// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
	EnvironmentId *string `pulumi:"environmentId"`
}

// GetSecretManagerUsageScopeInput is an input type that accepts GetSecretManagerUsageScopeArgs and GetSecretManagerUsageScopeOutput values.
// You can construct a concrete instance of `GetSecretManagerUsageScopeInput` via:
//
//	GetSecretManagerUsageScopeArgs{...}
type GetSecretManagerUsageScopeInput interface {
	pulumi.Input

	ToGetSecretManagerUsageScopeOutput() GetSecretManagerUsageScopeOutput
	ToGetSecretManagerUsageScopeOutputWithContext(context.Context) GetSecretManagerUsageScopeOutput
}

type GetSecretManagerUsageScopeArgs struct {
	// Id of the application to scope to. If empty then this scope applies to all applications.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
	// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	EnvironmentFilterType pulumi.StringPtrInput `pulumi:"environmentFilterType"`
	// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
}

func (GetSecretManagerUsageScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretManagerUsageScope)(nil)).Elem()
}

func (i GetSecretManagerUsageScopeArgs) ToGetSecretManagerUsageScopeOutput() GetSecretManagerUsageScopeOutput {
	return i.ToGetSecretManagerUsageScopeOutputWithContext(context.Background())
}

func (i GetSecretManagerUsageScopeArgs) ToGetSecretManagerUsageScopeOutputWithContext(ctx context.Context) GetSecretManagerUsageScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretManagerUsageScopeOutput)
}

// GetSecretManagerUsageScopeArrayInput is an input type that accepts GetSecretManagerUsageScopeArray and GetSecretManagerUsageScopeArrayOutput values.
// You can construct a concrete instance of `GetSecretManagerUsageScopeArrayInput` via:
//
//	GetSecretManagerUsageScopeArray{ GetSecretManagerUsageScopeArgs{...} }
type GetSecretManagerUsageScopeArrayInput interface {
	pulumi.Input

	ToGetSecretManagerUsageScopeArrayOutput() GetSecretManagerUsageScopeArrayOutput
	ToGetSecretManagerUsageScopeArrayOutputWithContext(context.Context) GetSecretManagerUsageScopeArrayOutput
}

type GetSecretManagerUsageScopeArray []GetSecretManagerUsageScopeInput

func (GetSecretManagerUsageScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretManagerUsageScope)(nil)).Elem()
}

func (i GetSecretManagerUsageScopeArray) ToGetSecretManagerUsageScopeArrayOutput() GetSecretManagerUsageScopeArrayOutput {
	return i.ToGetSecretManagerUsageScopeArrayOutputWithContext(context.Background())
}

func (i GetSecretManagerUsageScopeArray) ToGetSecretManagerUsageScopeArrayOutputWithContext(ctx context.Context) GetSecretManagerUsageScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretManagerUsageScopeArrayOutput)
}

type GetSecretManagerUsageScopeOutput struct{ *pulumi.OutputState }

func (GetSecretManagerUsageScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretManagerUsageScope)(nil)).Elem()
}

func (o GetSecretManagerUsageScopeOutput) ToGetSecretManagerUsageScopeOutput() GetSecretManagerUsageScopeOutput {
	return o
}

func (o GetSecretManagerUsageScopeOutput) ToGetSecretManagerUsageScopeOutputWithContext(ctx context.Context) GetSecretManagerUsageScopeOutput {
	return o
}

// Id of the application to scope to. If empty then this scope applies to all applications.
func (o GetSecretManagerUsageScopeOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretManagerUsageScope) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
func (o GetSecretManagerUsageScopeOutput) EnvironmentFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretManagerUsageScope) *string { return v.EnvironmentFilterType }).(pulumi.StringPtrOutput)
}

// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
func (o GetSecretManagerUsageScopeOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretManagerUsageScope) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

type GetSecretManagerUsageScopeArrayOutput struct{ *pulumi.OutputState }

func (GetSecretManagerUsageScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretManagerUsageScope)(nil)).Elem()
}

func (o GetSecretManagerUsageScopeArrayOutput) ToGetSecretManagerUsageScopeArrayOutput() GetSecretManagerUsageScopeArrayOutput {
	return o
}

func (o GetSecretManagerUsageScopeArrayOutput) ToGetSecretManagerUsageScopeArrayOutputWithContext(ctx context.Context) GetSecretManagerUsageScopeArrayOutput {
	return o
}

func (o GetSecretManagerUsageScopeArrayOutput) Index(i pulumi.IntInput) GetSecretManagerUsageScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretManagerUsageScope {
		return vs[0].([]GetSecretManagerUsageScope)[vs[1].(int)]
	}).(GetSecretManagerUsageScopeOutput)
}

type GetSshCredentialUsageScope struct {
	// Id of the application to scope to. If empty then this scope applies to all applications.
	ApplicationId *string `pulumi:"applicationId"`
	// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	EnvironmentFilterType *string `pulumi:"environmentFilterType"`
	// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
	EnvironmentId *string `pulumi:"environmentId"`
}

// GetSshCredentialUsageScopeInput is an input type that accepts GetSshCredentialUsageScopeArgs and GetSshCredentialUsageScopeOutput values.
// You can construct a concrete instance of `GetSshCredentialUsageScopeInput` via:
//
//	GetSshCredentialUsageScopeArgs{...}
type GetSshCredentialUsageScopeInput interface {
	pulumi.Input

	ToGetSshCredentialUsageScopeOutput() GetSshCredentialUsageScopeOutput
	ToGetSshCredentialUsageScopeOutputWithContext(context.Context) GetSshCredentialUsageScopeOutput
}

type GetSshCredentialUsageScopeArgs struct {
	// Id of the application to scope to. If empty then this scope applies to all applications.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
	// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
	EnvironmentFilterType pulumi.StringPtrInput `pulumi:"environmentFilterType"`
	// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
}

func (GetSshCredentialUsageScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSshCredentialUsageScope)(nil)).Elem()
}

func (i GetSshCredentialUsageScopeArgs) ToGetSshCredentialUsageScopeOutput() GetSshCredentialUsageScopeOutput {
	return i.ToGetSshCredentialUsageScopeOutputWithContext(context.Background())
}

func (i GetSshCredentialUsageScopeArgs) ToGetSshCredentialUsageScopeOutputWithContext(ctx context.Context) GetSshCredentialUsageScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSshCredentialUsageScopeOutput)
}

// GetSshCredentialUsageScopeArrayInput is an input type that accepts GetSshCredentialUsageScopeArray and GetSshCredentialUsageScopeArrayOutput values.
// You can construct a concrete instance of `GetSshCredentialUsageScopeArrayInput` via:
//
//	GetSshCredentialUsageScopeArray{ GetSshCredentialUsageScopeArgs{...} }
type GetSshCredentialUsageScopeArrayInput interface {
	pulumi.Input

	ToGetSshCredentialUsageScopeArrayOutput() GetSshCredentialUsageScopeArrayOutput
	ToGetSshCredentialUsageScopeArrayOutputWithContext(context.Context) GetSshCredentialUsageScopeArrayOutput
}

type GetSshCredentialUsageScopeArray []GetSshCredentialUsageScopeInput

func (GetSshCredentialUsageScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSshCredentialUsageScope)(nil)).Elem()
}

func (i GetSshCredentialUsageScopeArray) ToGetSshCredentialUsageScopeArrayOutput() GetSshCredentialUsageScopeArrayOutput {
	return i.ToGetSshCredentialUsageScopeArrayOutputWithContext(context.Background())
}

func (i GetSshCredentialUsageScopeArray) ToGetSshCredentialUsageScopeArrayOutputWithContext(ctx context.Context) GetSshCredentialUsageScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSshCredentialUsageScopeArrayOutput)
}

type GetSshCredentialUsageScopeOutput struct{ *pulumi.OutputState }

func (GetSshCredentialUsageScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSshCredentialUsageScope)(nil)).Elem()
}

func (o GetSshCredentialUsageScopeOutput) ToGetSshCredentialUsageScopeOutput() GetSshCredentialUsageScopeOutput {
	return o
}

func (o GetSshCredentialUsageScopeOutput) ToGetSshCredentialUsageScopeOutputWithContext(ctx context.Context) GetSshCredentialUsageScopeOutput {
	return o
}

// Id of the application to scope to. If empty then this scope applies to all applications.
func (o GetSshCredentialUsageScopeOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSshCredentialUsageScope) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// Type of environment filter applied. Cannot be used with `environmentId`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.
func (o GetSshCredentialUsageScopeOutput) EnvironmentFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSshCredentialUsageScope) *string { return v.EnvironmentFilterType }).(pulumi.StringPtrOutput)
}

// Id of the id of the specific environment to scope to. Cannot be used with `environmentFilterType`.
func (o GetSshCredentialUsageScopeOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSshCredentialUsageScope) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

type GetSshCredentialUsageScopeArrayOutput struct{ *pulumi.OutputState }

func (GetSshCredentialUsageScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSshCredentialUsageScope)(nil)).Elem()
}

func (o GetSshCredentialUsageScopeArrayOutput) ToGetSshCredentialUsageScopeArrayOutput() GetSshCredentialUsageScopeArrayOutput {
	return o
}

func (o GetSshCredentialUsageScopeArrayOutput) ToGetSshCredentialUsageScopeArrayOutputWithContext(ctx context.Context) GetSshCredentialUsageScopeArrayOutput {
	return o
}

func (o GetSshCredentialUsageScopeArrayOutput) Index(i pulumi.IntInput) GetSshCredentialUsageScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSshCredentialUsageScope {
		return vs[0].([]GetSshCredentialUsageScope)[vs[1].(int)]
	}).(GetSshCredentialUsageScopeOutput)
}

type GetTriggerCondition struct {
	// On webhook.
	OnWebhooks []GetTriggerConditionOnWebhook `pulumi:"onWebhooks"`
	// Trigger condition.
	TriggerConditionType string `pulumi:"triggerConditionType"`
}

// GetTriggerConditionInput is an input type that accepts GetTriggerConditionArgs and GetTriggerConditionOutput values.
// You can construct a concrete instance of `GetTriggerConditionInput` via:
//
//	GetTriggerConditionArgs{...}
type GetTriggerConditionInput interface {
	pulumi.Input

	ToGetTriggerConditionOutput() GetTriggerConditionOutput
	ToGetTriggerConditionOutputWithContext(context.Context) GetTriggerConditionOutput
}

type GetTriggerConditionArgs struct {
	// On webhook.
	OnWebhooks GetTriggerConditionOnWebhookArrayInput `pulumi:"onWebhooks"`
	// Trigger condition.
	TriggerConditionType pulumi.StringInput `pulumi:"triggerConditionType"`
}

func (GetTriggerConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTriggerCondition)(nil)).Elem()
}

func (i GetTriggerConditionArgs) ToGetTriggerConditionOutput() GetTriggerConditionOutput {
	return i.ToGetTriggerConditionOutputWithContext(context.Background())
}

func (i GetTriggerConditionArgs) ToGetTriggerConditionOutputWithContext(ctx context.Context) GetTriggerConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTriggerConditionOutput)
}

// GetTriggerConditionArrayInput is an input type that accepts GetTriggerConditionArray and GetTriggerConditionArrayOutput values.
// You can construct a concrete instance of `GetTriggerConditionArrayInput` via:
//
//	GetTriggerConditionArray{ GetTriggerConditionArgs{...} }
type GetTriggerConditionArrayInput interface {
	pulumi.Input

	ToGetTriggerConditionArrayOutput() GetTriggerConditionArrayOutput
	ToGetTriggerConditionArrayOutputWithContext(context.Context) GetTriggerConditionArrayOutput
}

type GetTriggerConditionArray []GetTriggerConditionInput

func (GetTriggerConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTriggerCondition)(nil)).Elem()
}

func (i GetTriggerConditionArray) ToGetTriggerConditionArrayOutput() GetTriggerConditionArrayOutput {
	return i.ToGetTriggerConditionArrayOutputWithContext(context.Background())
}

func (i GetTriggerConditionArray) ToGetTriggerConditionArrayOutputWithContext(ctx context.Context) GetTriggerConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTriggerConditionArrayOutput)
}

type GetTriggerConditionOutput struct{ *pulumi.OutputState }

func (GetTriggerConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTriggerCondition)(nil)).Elem()
}

func (o GetTriggerConditionOutput) ToGetTriggerConditionOutput() GetTriggerConditionOutput {
	return o
}

func (o GetTriggerConditionOutput) ToGetTriggerConditionOutputWithContext(ctx context.Context) GetTriggerConditionOutput {
	return o
}

// On webhook.
func (o GetTriggerConditionOutput) OnWebhooks() GetTriggerConditionOnWebhookArrayOutput {
	return o.ApplyT(func(v GetTriggerCondition) []GetTriggerConditionOnWebhook { return v.OnWebhooks }).(GetTriggerConditionOnWebhookArrayOutput)
}

// Trigger condition.
func (o GetTriggerConditionOutput) TriggerConditionType() pulumi.StringOutput {
	return o.ApplyT(func(v GetTriggerCondition) string { return v.TriggerConditionType }).(pulumi.StringOutput)
}

type GetTriggerConditionArrayOutput struct{ *pulumi.OutputState }

func (GetTriggerConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTriggerCondition)(nil)).Elem()
}

func (o GetTriggerConditionArrayOutput) ToGetTriggerConditionArrayOutput() GetTriggerConditionArrayOutput {
	return o
}

func (o GetTriggerConditionArrayOutput) ToGetTriggerConditionArrayOutputWithContext(ctx context.Context) GetTriggerConditionArrayOutput {
	return o
}

func (o GetTriggerConditionArrayOutput) Index(i pulumi.IntInput) GetTriggerConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTriggerCondition {
		return vs[0].([]GetTriggerCondition)[vs[1].(int)]
	}).(GetTriggerConditionOutput)
}

type GetTriggerConditionOnWebhook struct {
	// Webhook details.
	WebhookDetails []GetTriggerConditionOnWebhookWebhookDetail `pulumi:"webhookDetails"`
}

// GetTriggerConditionOnWebhookInput is an input type that accepts GetTriggerConditionOnWebhookArgs and GetTriggerConditionOnWebhookOutput values.
// You can construct a concrete instance of `GetTriggerConditionOnWebhookInput` via:
//
//	GetTriggerConditionOnWebhookArgs{...}
type GetTriggerConditionOnWebhookInput interface {
	pulumi.Input

	ToGetTriggerConditionOnWebhookOutput() GetTriggerConditionOnWebhookOutput
	ToGetTriggerConditionOnWebhookOutputWithContext(context.Context) GetTriggerConditionOnWebhookOutput
}

type GetTriggerConditionOnWebhookArgs struct {
	// Webhook details.
	WebhookDetails GetTriggerConditionOnWebhookWebhookDetailArrayInput `pulumi:"webhookDetails"`
}

func (GetTriggerConditionOnWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTriggerConditionOnWebhook)(nil)).Elem()
}

func (i GetTriggerConditionOnWebhookArgs) ToGetTriggerConditionOnWebhookOutput() GetTriggerConditionOnWebhookOutput {
	return i.ToGetTriggerConditionOnWebhookOutputWithContext(context.Background())
}

func (i GetTriggerConditionOnWebhookArgs) ToGetTriggerConditionOnWebhookOutputWithContext(ctx context.Context) GetTriggerConditionOnWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTriggerConditionOnWebhookOutput)
}

// GetTriggerConditionOnWebhookArrayInput is an input type that accepts GetTriggerConditionOnWebhookArray and GetTriggerConditionOnWebhookArrayOutput values.
// You can construct a concrete instance of `GetTriggerConditionOnWebhookArrayInput` via:
//
//	GetTriggerConditionOnWebhookArray{ GetTriggerConditionOnWebhookArgs{...} }
type GetTriggerConditionOnWebhookArrayInput interface {
	pulumi.Input

	ToGetTriggerConditionOnWebhookArrayOutput() GetTriggerConditionOnWebhookArrayOutput
	ToGetTriggerConditionOnWebhookArrayOutputWithContext(context.Context) GetTriggerConditionOnWebhookArrayOutput
}

type GetTriggerConditionOnWebhookArray []GetTriggerConditionOnWebhookInput

func (GetTriggerConditionOnWebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTriggerConditionOnWebhook)(nil)).Elem()
}

func (i GetTriggerConditionOnWebhookArray) ToGetTriggerConditionOnWebhookArrayOutput() GetTriggerConditionOnWebhookArrayOutput {
	return i.ToGetTriggerConditionOnWebhookArrayOutputWithContext(context.Background())
}

func (i GetTriggerConditionOnWebhookArray) ToGetTriggerConditionOnWebhookArrayOutputWithContext(ctx context.Context) GetTriggerConditionOnWebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTriggerConditionOnWebhookArrayOutput)
}

type GetTriggerConditionOnWebhookOutput struct{ *pulumi.OutputState }

func (GetTriggerConditionOnWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTriggerConditionOnWebhook)(nil)).Elem()
}

func (o GetTriggerConditionOnWebhookOutput) ToGetTriggerConditionOnWebhookOutput() GetTriggerConditionOnWebhookOutput {
	return o
}

func (o GetTriggerConditionOnWebhookOutput) ToGetTriggerConditionOnWebhookOutputWithContext(ctx context.Context) GetTriggerConditionOnWebhookOutput {
	return o
}

// Webhook details.
func (o GetTriggerConditionOnWebhookOutput) WebhookDetails() GetTriggerConditionOnWebhookWebhookDetailArrayOutput {
	return o.ApplyT(func(v GetTriggerConditionOnWebhook) []GetTriggerConditionOnWebhookWebhookDetail {
		return v.WebhookDetails
	}).(GetTriggerConditionOnWebhookWebhookDetailArrayOutput)
}

type GetTriggerConditionOnWebhookArrayOutput struct{ *pulumi.OutputState }

func (GetTriggerConditionOnWebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTriggerConditionOnWebhook)(nil)).Elem()
}

func (o GetTriggerConditionOnWebhookArrayOutput) ToGetTriggerConditionOnWebhookArrayOutput() GetTriggerConditionOnWebhookArrayOutput {
	return o
}

func (o GetTriggerConditionOnWebhookArrayOutput) ToGetTriggerConditionOnWebhookArrayOutputWithContext(ctx context.Context) GetTriggerConditionOnWebhookArrayOutput {
	return o
}

func (o GetTriggerConditionOnWebhookArrayOutput) Index(i pulumi.IntInput) GetTriggerConditionOnWebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTriggerConditionOnWebhook {
		return vs[0].([]GetTriggerConditionOnWebhook)[vs[1].(int)]
	}).(GetTriggerConditionOnWebhookOutput)
}

type GetTriggerConditionOnWebhookWebhookDetail struct {
	// Header.
	Header string `pulumi:"header"`
	// Method.
	Method string `pulumi:"method"`
	// Payload.
	Payload string `pulumi:"payload"`
	// Webhook token.
	WebhookToken string `pulumi:"webhookToken"`
	// Webhook URL.
	WebhookUrl string `pulumi:"webhookUrl"`
}

// GetTriggerConditionOnWebhookWebhookDetailInput is an input type that accepts GetTriggerConditionOnWebhookWebhookDetailArgs and GetTriggerConditionOnWebhookWebhookDetailOutput values.
// You can construct a concrete instance of `GetTriggerConditionOnWebhookWebhookDetailInput` via:
//
//	GetTriggerConditionOnWebhookWebhookDetailArgs{...}
type GetTriggerConditionOnWebhookWebhookDetailInput interface {
	pulumi.Input

	ToGetTriggerConditionOnWebhookWebhookDetailOutput() GetTriggerConditionOnWebhookWebhookDetailOutput
	ToGetTriggerConditionOnWebhookWebhookDetailOutputWithContext(context.Context) GetTriggerConditionOnWebhookWebhookDetailOutput
}

type GetTriggerConditionOnWebhookWebhookDetailArgs struct {
	// Header.
	Header pulumi.StringInput `pulumi:"header"`
	// Method.
	Method pulumi.StringInput `pulumi:"method"`
	// Payload.
	Payload pulumi.StringInput `pulumi:"payload"`
	// Webhook token.
	WebhookToken pulumi.StringInput `pulumi:"webhookToken"`
	// Webhook URL.
	WebhookUrl pulumi.StringInput `pulumi:"webhookUrl"`
}

func (GetTriggerConditionOnWebhookWebhookDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTriggerConditionOnWebhookWebhookDetail)(nil)).Elem()
}

func (i GetTriggerConditionOnWebhookWebhookDetailArgs) ToGetTriggerConditionOnWebhookWebhookDetailOutput() GetTriggerConditionOnWebhookWebhookDetailOutput {
	return i.ToGetTriggerConditionOnWebhookWebhookDetailOutputWithContext(context.Background())
}

func (i GetTriggerConditionOnWebhookWebhookDetailArgs) ToGetTriggerConditionOnWebhookWebhookDetailOutputWithContext(ctx context.Context) GetTriggerConditionOnWebhookWebhookDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTriggerConditionOnWebhookWebhookDetailOutput)
}

// GetTriggerConditionOnWebhookWebhookDetailArrayInput is an input type that accepts GetTriggerConditionOnWebhookWebhookDetailArray and GetTriggerConditionOnWebhookWebhookDetailArrayOutput values.
// You can construct a concrete instance of `GetTriggerConditionOnWebhookWebhookDetailArrayInput` via:
//
//	GetTriggerConditionOnWebhookWebhookDetailArray{ GetTriggerConditionOnWebhookWebhookDetailArgs{...} }
type GetTriggerConditionOnWebhookWebhookDetailArrayInput interface {
	pulumi.Input

	ToGetTriggerConditionOnWebhookWebhookDetailArrayOutput() GetTriggerConditionOnWebhookWebhookDetailArrayOutput
	ToGetTriggerConditionOnWebhookWebhookDetailArrayOutputWithContext(context.Context) GetTriggerConditionOnWebhookWebhookDetailArrayOutput
}

type GetTriggerConditionOnWebhookWebhookDetailArray []GetTriggerConditionOnWebhookWebhookDetailInput

func (GetTriggerConditionOnWebhookWebhookDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTriggerConditionOnWebhookWebhookDetail)(nil)).Elem()
}

func (i GetTriggerConditionOnWebhookWebhookDetailArray) ToGetTriggerConditionOnWebhookWebhookDetailArrayOutput() GetTriggerConditionOnWebhookWebhookDetailArrayOutput {
	return i.ToGetTriggerConditionOnWebhookWebhookDetailArrayOutputWithContext(context.Background())
}

func (i GetTriggerConditionOnWebhookWebhookDetailArray) ToGetTriggerConditionOnWebhookWebhookDetailArrayOutputWithContext(ctx context.Context) GetTriggerConditionOnWebhookWebhookDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTriggerConditionOnWebhookWebhookDetailArrayOutput)
}

type GetTriggerConditionOnWebhookWebhookDetailOutput struct{ *pulumi.OutputState }

func (GetTriggerConditionOnWebhookWebhookDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTriggerConditionOnWebhookWebhookDetail)(nil)).Elem()
}

func (o GetTriggerConditionOnWebhookWebhookDetailOutput) ToGetTriggerConditionOnWebhookWebhookDetailOutput() GetTriggerConditionOnWebhookWebhookDetailOutput {
	return o
}

func (o GetTriggerConditionOnWebhookWebhookDetailOutput) ToGetTriggerConditionOnWebhookWebhookDetailOutputWithContext(ctx context.Context) GetTriggerConditionOnWebhookWebhookDetailOutput {
	return o
}

// Header.
func (o GetTriggerConditionOnWebhookWebhookDetailOutput) Header() pulumi.StringOutput {
	return o.ApplyT(func(v GetTriggerConditionOnWebhookWebhookDetail) string { return v.Header }).(pulumi.StringOutput)
}

// Method.
func (o GetTriggerConditionOnWebhookWebhookDetailOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v GetTriggerConditionOnWebhookWebhookDetail) string { return v.Method }).(pulumi.StringOutput)
}

// Payload.
func (o GetTriggerConditionOnWebhookWebhookDetailOutput) Payload() pulumi.StringOutput {
	return o.ApplyT(func(v GetTriggerConditionOnWebhookWebhookDetail) string { return v.Payload }).(pulumi.StringOutput)
}

// Webhook token.
func (o GetTriggerConditionOnWebhookWebhookDetailOutput) WebhookToken() pulumi.StringOutput {
	return o.ApplyT(func(v GetTriggerConditionOnWebhookWebhookDetail) string { return v.WebhookToken }).(pulumi.StringOutput)
}

// Webhook URL.
func (o GetTriggerConditionOnWebhookWebhookDetailOutput) WebhookUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetTriggerConditionOnWebhookWebhookDetail) string { return v.WebhookUrl }).(pulumi.StringOutput)
}

type GetTriggerConditionOnWebhookWebhookDetailArrayOutput struct{ *pulumi.OutputState }

func (GetTriggerConditionOnWebhookWebhookDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTriggerConditionOnWebhookWebhookDetail)(nil)).Elem()
}

func (o GetTriggerConditionOnWebhookWebhookDetailArrayOutput) ToGetTriggerConditionOnWebhookWebhookDetailArrayOutput() GetTriggerConditionOnWebhookWebhookDetailArrayOutput {
	return o
}

func (o GetTriggerConditionOnWebhookWebhookDetailArrayOutput) ToGetTriggerConditionOnWebhookWebhookDetailArrayOutputWithContext(ctx context.Context) GetTriggerConditionOnWebhookWebhookDetailArrayOutput {
	return o
}

func (o GetTriggerConditionOnWebhookWebhookDetailArrayOutput) Index(i pulumi.IntInput) GetTriggerConditionOnWebhookWebhookDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTriggerConditionOnWebhookWebhookDetail {
		return vs[0].([]GetTriggerConditionOnWebhookWebhookDetail)[vs[1].(int)]
	}).(GetTriggerConditionOnWebhookWebhookDetailOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptedTextUsageScopeInput)(nil)).Elem(), EncryptedTextUsageScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptedTextUsageScopeArrayInput)(nil)).Elem(), EncryptedTextUsageScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentVariableOverrideInput)(nil)).Elem(), EnvironmentVariableOverrideArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentVariableOverrideArrayInput)(nil)).Elem(), EnvironmentVariableOverrideArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitConnectorCommitDetailsInput)(nil)).Elem(), GitConnectorCommitDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitConnectorCommitDetailsPtrInput)(nil)).Elem(), GitConnectorCommitDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitConnectorUsageScopeInput)(nil)).Elem(), GitConnectorUsageScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitConnectorUsageScopeArrayInput)(nil)).Elem(), GitConnectorUsageScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionAwsAmiInput)(nil)).Elem(), InfrastructureDefinitionAwsAmiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionAwsAmiPtrInput)(nil)).Elem(), InfrastructureDefinitionAwsAmiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionAwsEcsInput)(nil)).Elem(), InfrastructureDefinitionAwsEcsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionAwsEcsPtrInput)(nil)).Elem(), InfrastructureDefinitionAwsEcsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionAwsLambdaInput)(nil)).Elem(), InfrastructureDefinitionAwsLambdaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionAwsLambdaPtrInput)(nil)).Elem(), InfrastructureDefinitionAwsLambdaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionAwsSshInput)(nil)).Elem(), InfrastructureDefinitionAwsSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionAwsSshPtrInput)(nil)).Elem(), InfrastructureDefinitionAwsSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionAwsSshTagInput)(nil)).Elem(), InfrastructureDefinitionAwsSshTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionAwsSshTagArrayInput)(nil)).Elem(), InfrastructureDefinitionAwsSshTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionAwsWinrmInput)(nil)).Elem(), InfrastructureDefinitionAwsWinrmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionAwsWinrmPtrInput)(nil)).Elem(), InfrastructureDefinitionAwsWinrmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionAzureVmssInput)(nil)).Elem(), InfrastructureDefinitionAzureVmssArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionAzureVmssPtrInput)(nil)).Elem(), InfrastructureDefinitionAzureVmssArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionAzureWebappInput)(nil)).Elem(), InfrastructureDefinitionAzureWebappArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionAzureWebappPtrInput)(nil)).Elem(), InfrastructureDefinitionAzureWebappArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionCustomInput)(nil)).Elem(), InfrastructureDefinitionCustomArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionCustomPtrInput)(nil)).Elem(), InfrastructureDefinitionCustomArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionCustomVariableInput)(nil)).Elem(), InfrastructureDefinitionCustomVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionCustomVariableArrayInput)(nil)).Elem(), InfrastructureDefinitionCustomVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionDatacenterSshInput)(nil)).Elem(), InfrastructureDefinitionDatacenterSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionDatacenterSshPtrInput)(nil)).Elem(), InfrastructureDefinitionDatacenterSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionDatacenterWinrmInput)(nil)).Elem(), InfrastructureDefinitionDatacenterWinrmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionDatacenterWinrmPtrInput)(nil)).Elem(), InfrastructureDefinitionDatacenterWinrmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionKubernetesInput)(nil)).Elem(), InfrastructureDefinitionKubernetesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionKubernetesPtrInput)(nil)).Elem(), InfrastructureDefinitionKubernetesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionKubernetesGcpInput)(nil)).Elem(), InfrastructureDefinitionKubernetesGcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionKubernetesGcpPtrInput)(nil)).Elem(), InfrastructureDefinitionKubernetesGcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionTanzuInput)(nil)).Elem(), InfrastructureDefinitionTanzuArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureDefinitionTanzuPtrInput)(nil)).Elem(), InfrastructureDefinitionTanzuArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlatformCcmFiltersFilterPropertiesInput)(nil)).Elem(), PlatformCcmFiltersFilterPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlatformCcmFiltersFilterPropertiesPtrInput)(nil)).Elem(), PlatformCcmFiltersFilterPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshCredentialKerberosAuthenticationInput)(nil)).Elem(), SshCredentialKerberosAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshCredentialKerberosAuthenticationPtrInput)(nil)).Elem(), SshCredentialKerberosAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshCredentialKerberosAuthenticationTgtGenerationMethodInput)(nil)).Elem(), SshCredentialKerberosAuthenticationTgtGenerationMethodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshCredentialKerberosAuthenticationTgtGenerationMethodPtrInput)(nil)).Elem(), SshCredentialKerberosAuthenticationTgtGenerationMethodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshCredentialSshAuthenticationInput)(nil)).Elem(), SshCredentialSshAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshCredentialSshAuthenticationPtrInput)(nil)).Elem(), SshCredentialSshAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshCredentialSshAuthenticationInlineSshInput)(nil)).Elem(), SshCredentialSshAuthenticationInlineSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshCredentialSshAuthenticationInlineSshPtrInput)(nil)).Elem(), SshCredentialSshAuthenticationInlineSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshCredentialSshAuthenticationServerPasswordInput)(nil)).Elem(), SshCredentialSshAuthenticationServerPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshCredentialSshAuthenticationServerPasswordPtrInput)(nil)).Elem(), SshCredentialSshAuthenticationServerPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshCredentialSshAuthenticationSshKeyFileInput)(nil)).Elem(), SshCredentialSshAuthenticationSshKeyFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshCredentialSshAuthenticationSshKeyFilePtrInput)(nil)).Elem(), SshCredentialSshAuthenticationSshKeyFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshCredentialUsageScopeInput)(nil)).Elem(), SshCredentialUsageScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshCredentialUsageScopeArrayInput)(nil)).Elem(), SshCredentialUsageScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupLdapSettingsInput)(nil)).Elem(), UserGroupLdapSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupLdapSettingsPtrInput)(nil)).Elem(), UserGroupLdapSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupNotificationSettingsInput)(nil)).Elem(), UserGroupNotificationSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupNotificationSettingsPtrInput)(nil)).Elem(), UserGroupNotificationSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsTypeInput)(nil)).Elem(), UserGroupPermissionsTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsTypePtrInput)(nil)).Elem(), UserGroupPermissionsTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsAppPermissionsInput)(nil)).Elem(), UserGroupPermissionsAppPermissionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsAppPermissionsPtrInput)(nil)).Elem(), UserGroupPermissionsAppPermissionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsAppPermissionsAllInput)(nil)).Elem(), UserGroupPermissionsAppPermissionsAllArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsAppPermissionsAllArrayInput)(nil)).Elem(), UserGroupPermissionsAppPermissionsAllArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsAppPermissionsDeploymentInput)(nil)).Elem(), UserGroupPermissionsAppPermissionsDeploymentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsAppPermissionsDeploymentArrayInput)(nil)).Elem(), UserGroupPermissionsAppPermissionsDeploymentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsAppPermissionsEnvironmentInput)(nil)).Elem(), UserGroupPermissionsAppPermissionsEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsAppPermissionsEnvironmentArrayInput)(nil)).Elem(), UserGroupPermissionsAppPermissionsEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsAppPermissionsPipelineInput)(nil)).Elem(), UserGroupPermissionsAppPermissionsPipelineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsAppPermissionsPipelineArrayInput)(nil)).Elem(), UserGroupPermissionsAppPermissionsPipelineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsAppPermissionsProvisionerInput)(nil)).Elem(), UserGroupPermissionsAppPermissionsProvisionerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsAppPermissionsProvisionerArrayInput)(nil)).Elem(), UserGroupPermissionsAppPermissionsProvisionerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsAppPermissionsServiceInput)(nil)).Elem(), UserGroupPermissionsAppPermissionsServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsAppPermissionsServiceArrayInput)(nil)).Elem(), UserGroupPermissionsAppPermissionsServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsAppPermissionsTemplateInput)(nil)).Elem(), UserGroupPermissionsAppPermissionsTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsAppPermissionsTemplateArrayInput)(nil)).Elem(), UserGroupPermissionsAppPermissionsTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsAppPermissionsWorkflowInput)(nil)).Elem(), UserGroupPermissionsAppPermissionsWorkflowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPermissionsAppPermissionsWorkflowArrayInput)(nil)).Elem(), UserGroupPermissionsAppPermissionsWorkflowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupSamlSettingsInput)(nil)).Elem(), UserGroupSamlSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupSamlSettingsPtrInput)(nil)).Elem(), UserGroupSamlSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEncryptedTextUsageScopeInput)(nil)).Elem(), GetEncryptedTextUsageScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEncryptedTextUsageScopeArrayInput)(nil)).Elem(), GetEncryptedTextUsageScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEnvironmentVariableOverrideInput)(nil)).Elem(), GetEnvironmentVariableOverrideArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEnvironmentVariableOverrideArrayInput)(nil)).Elem(), GetEnvironmentVariableOverrideArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGitConnectorCommitDetailInput)(nil)).Elem(), GetGitConnectorCommitDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGitConnectorCommitDetailArrayInput)(nil)).Elem(), GetGitConnectorCommitDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretManagerUsageScopeInput)(nil)).Elem(), GetSecretManagerUsageScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretManagerUsageScopeArrayInput)(nil)).Elem(), GetSecretManagerUsageScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSshCredentialUsageScopeInput)(nil)).Elem(), GetSshCredentialUsageScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSshCredentialUsageScopeArrayInput)(nil)).Elem(), GetSshCredentialUsageScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTriggerConditionInput)(nil)).Elem(), GetTriggerConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTriggerConditionArrayInput)(nil)).Elem(), GetTriggerConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTriggerConditionOnWebhookInput)(nil)).Elem(), GetTriggerConditionOnWebhookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTriggerConditionOnWebhookArrayInput)(nil)).Elem(), GetTriggerConditionOnWebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTriggerConditionOnWebhookWebhookDetailInput)(nil)).Elem(), GetTriggerConditionOnWebhookWebhookDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTriggerConditionOnWebhookWebhookDetailArrayInput)(nil)).Elem(), GetTriggerConditionOnWebhookWebhookDetailArray{})
	pulumi.RegisterOutputType(EncryptedTextUsageScopeOutput{})
	pulumi.RegisterOutputType(EncryptedTextUsageScopeArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableOverrideOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableOverrideArrayOutput{})
	pulumi.RegisterOutputType(GitConnectorCommitDetailsOutput{})
	pulumi.RegisterOutputType(GitConnectorCommitDetailsPtrOutput{})
	pulumi.RegisterOutputType(GitConnectorUsageScopeOutput{})
	pulumi.RegisterOutputType(GitConnectorUsageScopeArrayOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionAwsAmiOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionAwsAmiPtrOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionAwsEcsOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionAwsEcsPtrOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionAwsLambdaOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionAwsLambdaPtrOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionAwsSshOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionAwsSshPtrOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionAwsSshTagOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionAwsSshTagArrayOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionAwsWinrmOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionAwsWinrmPtrOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionAzureVmssOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionAzureVmssPtrOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionAzureWebappOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionAzureWebappPtrOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionCustomOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionCustomPtrOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionCustomVariableOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionCustomVariableArrayOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionDatacenterSshOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionDatacenterSshPtrOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionDatacenterWinrmOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionDatacenterWinrmPtrOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionKubernetesOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionKubernetesPtrOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionKubernetesGcpOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionKubernetesGcpPtrOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionTanzuOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionTanzuPtrOutput{})
	pulumi.RegisterOutputType(PlatformCcmFiltersFilterPropertiesOutput{})
	pulumi.RegisterOutputType(PlatformCcmFiltersFilterPropertiesPtrOutput{})
	pulumi.RegisterOutputType(SshCredentialKerberosAuthenticationOutput{})
	pulumi.RegisterOutputType(SshCredentialKerberosAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(SshCredentialKerberosAuthenticationTgtGenerationMethodOutput{})
	pulumi.RegisterOutputType(SshCredentialKerberosAuthenticationTgtGenerationMethodPtrOutput{})
	pulumi.RegisterOutputType(SshCredentialSshAuthenticationOutput{})
	pulumi.RegisterOutputType(SshCredentialSshAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(SshCredentialSshAuthenticationInlineSshOutput{})
	pulumi.RegisterOutputType(SshCredentialSshAuthenticationInlineSshPtrOutput{})
	pulumi.RegisterOutputType(SshCredentialSshAuthenticationServerPasswordOutput{})
	pulumi.RegisterOutputType(SshCredentialSshAuthenticationServerPasswordPtrOutput{})
	pulumi.RegisterOutputType(SshCredentialSshAuthenticationSshKeyFileOutput{})
	pulumi.RegisterOutputType(SshCredentialSshAuthenticationSshKeyFilePtrOutput{})
	pulumi.RegisterOutputType(SshCredentialUsageScopeOutput{})
	pulumi.RegisterOutputType(SshCredentialUsageScopeArrayOutput{})
	pulumi.RegisterOutputType(UserGroupLdapSettingsOutput{})
	pulumi.RegisterOutputType(UserGroupLdapSettingsPtrOutput{})
	pulumi.RegisterOutputType(UserGroupNotificationSettingsOutput{})
	pulumi.RegisterOutputType(UserGroupNotificationSettingsPtrOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsTypeOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsTypePtrOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsAppPermissionsOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsAppPermissionsPtrOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsAppPermissionsAllOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsAppPermissionsAllArrayOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsAppPermissionsDeploymentOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsAppPermissionsDeploymentArrayOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsAppPermissionsEnvironmentOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsAppPermissionsEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsAppPermissionsPipelineOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsAppPermissionsPipelineArrayOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsAppPermissionsProvisionerOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsAppPermissionsProvisionerArrayOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsAppPermissionsServiceOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsAppPermissionsServiceArrayOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsAppPermissionsTemplateOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsAppPermissionsTemplateArrayOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsAppPermissionsWorkflowOutput{})
	pulumi.RegisterOutputType(UserGroupPermissionsAppPermissionsWorkflowArrayOutput{})
	pulumi.RegisterOutputType(UserGroupSamlSettingsOutput{})
	pulumi.RegisterOutputType(UserGroupSamlSettingsPtrOutput{})
	pulumi.RegisterOutputType(GetEncryptedTextUsageScopeOutput{})
	pulumi.RegisterOutputType(GetEncryptedTextUsageScopeArrayOutput{})
	pulumi.RegisterOutputType(GetEnvironmentVariableOverrideOutput{})
	pulumi.RegisterOutputType(GetEnvironmentVariableOverrideArrayOutput{})
	pulumi.RegisterOutputType(GetGitConnectorCommitDetailOutput{})
	pulumi.RegisterOutputType(GetGitConnectorCommitDetailArrayOutput{})
	pulumi.RegisterOutputType(GetSecretManagerUsageScopeOutput{})
	pulumi.RegisterOutputType(GetSecretManagerUsageScopeArrayOutput{})
	pulumi.RegisterOutputType(GetSshCredentialUsageScopeOutput{})
	pulumi.RegisterOutputType(GetSshCredentialUsageScopeArrayOutput{})
	pulumi.RegisterOutputType(GetTriggerConditionOutput{})
	pulumi.RegisterOutputType(GetTriggerConditionArrayOutput{})
	pulumi.RegisterOutputType(GetTriggerConditionOnWebhookOutput{})
	pulumi.RegisterOutputType(GetTriggerConditionOnWebhookArrayOutput{})
	pulumi.RegisterOutputType(GetTriggerConditionOnWebhookWebhookDetailOutput{})
	pulumi.RegisterOutputType(GetTriggerConditionOnWebhookWebhookDetailArrayOutput{})
}
