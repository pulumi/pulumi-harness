// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harness

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness service
func GetService(ctx *pulumi.Context, args *GetServiceArgs, opts ...pulumi.InvokeOption) (*GetServiceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetServiceResult
	err := ctx.Invoke("harness:index/getService:getService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getService.
type GetServiceArgs struct {
	// The id of the application the service belongs to
	AppId string `pulumi:"appId"`
	// Unique identifier of the application
	Id string `pulumi:"id"`
}

// A collection of values returned by getService.
type GetServiceResult struct {
	// The id of the application the service belongs to
	AppId string `pulumi:"appId"`
	// The type of artifact deployed by the service
	ArtifactType string `pulumi:"artifactType"`
	// The application description
	Description string `pulumi:"description"`
	// The version of Helm being used by the service.
	HelmVersion string `pulumi:"helmVersion"`
	// Unique identifier of the application
	Id string `pulumi:"id"`
	// The name of the service
	Name string `pulumi:"name"`
	// Tags for the service
	Tags map[string]string `pulumi:"tags"`
	// The path of the template used for the custom deployment
	TemplateUri string `pulumi:"templateUri"`
	// The type of the deployment
	Type string `pulumi:"type"`
}

func GetServiceOutput(ctx *pulumi.Context, args GetServiceOutputArgs, opts ...pulumi.InvokeOption) GetServiceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetServiceResultOutput, error) {
			args := v.(GetServiceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("harness:index/getService:getService", args, GetServiceResultOutput{}, options).(GetServiceResultOutput), nil
		}).(GetServiceResultOutput)
}

// A collection of arguments for invoking getService.
type GetServiceOutputArgs struct {
	// The id of the application the service belongs to
	AppId pulumi.StringInput `pulumi:"appId"`
	// Unique identifier of the application
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetServiceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceArgs)(nil)).Elem()
}

// A collection of values returned by getService.
type GetServiceResultOutput struct{ *pulumi.OutputState }

func (GetServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceResult)(nil)).Elem()
}

func (o GetServiceResultOutput) ToGetServiceResultOutput() GetServiceResultOutput {
	return o
}

func (o GetServiceResultOutput) ToGetServiceResultOutputWithContext(ctx context.Context) GetServiceResultOutput {
	return o
}

// The id of the application the service belongs to
func (o GetServiceResultOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceResult) string { return v.AppId }).(pulumi.StringOutput)
}

// The type of artifact deployed by the service
func (o GetServiceResultOutput) ArtifactType() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceResult) string { return v.ArtifactType }).(pulumi.StringOutput)
}

// The application description
func (o GetServiceResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceResult) string { return v.Description }).(pulumi.StringOutput)
}

// The version of Helm being used by the service.
func (o GetServiceResultOutput) HelmVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceResult) string { return v.HelmVersion }).(pulumi.StringOutput)
}

// Unique identifier of the application
func (o GetServiceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the service
func (o GetServiceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceResult) string { return v.Name }).(pulumi.StringOutput)
}

// Tags for the service
func (o GetServiceResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetServiceResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The path of the template used for the custom deployment
func (o GetServiceResultOutput) TemplateUri() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceResult) string { return v.TemplateUri }).(pulumi.StringOutput)
}

// The type of the deployment
func (o GetServiceResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetServiceResultOutput{})
}
