// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetManualFreezeCurrentOrUpcomingWindow {
    /**
     * @return End time of the freeze window
     * 
     */
    private Integer endTime;
    /**
     * @return Start time of the freeze window
     * 
     */
    private Integer startTime;

    private GetManualFreezeCurrentOrUpcomingWindow() {}
    /**
     * @return End time of the freeze window
     * 
     */
    public Integer endTime() {
        return this.endTime;
    }
    /**
     * @return Start time of the freeze window
     * 
     */
    public Integer startTime() {
        return this.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManualFreezeCurrentOrUpcomingWindow defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer endTime;
        private Integer startTime;
        public Builder() {}
        public Builder(GetManualFreezeCurrentOrUpcomingWindow defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endTime = defaults.endTime;
    	      this.startTime = defaults.startTime;
        }

        @CustomType.Setter
        public Builder endTime(Integer endTime) {
            if (endTime == null) {
              throw new MissingRequiredPropertyException("GetManualFreezeCurrentOrUpcomingWindow", "endTime");
            }
            this.endTime = endTime;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(Integer startTime) {
            if (startTime == null) {
              throw new MissingRequiredPropertyException("GetManualFreezeCurrentOrUpcomingWindow", "startTime");
            }
            this.startTime = startTime;
            return this;
        }
        public GetManualFreezeCurrentOrUpcomingWindow build() {
            final var _resultValue = new GetManualFreezeCurrentOrUpcomingWindow();
            _resultValue.endTime = endTime;
            _resultValue.startTime = startTime;
            return _resultValue;
        }
    }
}
