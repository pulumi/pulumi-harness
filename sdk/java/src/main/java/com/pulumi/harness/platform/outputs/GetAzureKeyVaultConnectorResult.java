// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAzureKeyVaultConnectorResult {
    /**
     * @return Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE
     * 
     */
    private String azureEnvironmentType;
    /**
     * @return Application ID of the Azure App.
     * 
     */
    private String clientId;
    /**
     * @return Connect using only the delegates which have these tags.
     * 
     */
    private List<String> delegateSelectors;
    /**
     * @return Description of the resource.
     * 
     */
    private String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Unique identifier of the resource.
     * 
     */
    private String identifier;
    /**
     * @return Specifies whether or not is the default value.
     * 
     */
    private Boolean isDefault;
    /**
     * @return Name of the resource.
     * 
     */
    private @Nullable String name;
    /**
     * @return Unique identifier of the organization.
     * 
     */
    private @Nullable String orgId;
    /**
     * @return Unique identifier of the project.
     * 
     */
    private @Nullable String projectId;
    /**
     * @return The Harness text secret with the Azure authentication key as its value.
     * 
     */
    private String secretKey;
    /**
     * @return Azure subscription ID.
     * 
     */
    private String subscription;
    /**
     * @return Tags to associate with the resource.
     * 
     */
    private List<String> tags;
    /**
     * @return The Azure Active Directory (AAD) directory ID where you created your application.
     * 
     */
    private String tenantId;
    /**
     * @return Name of the vault.
     * 
     */
    private String vaultName;

    private GetAzureKeyVaultConnectorResult() {}
    /**
     * @return Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE
     * 
     */
    public String azureEnvironmentType() {
        return this.azureEnvironmentType;
    }
    /**
     * @return Application ID of the Azure App.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return Connect using only the delegates which have these tags.
     * 
     */
    public List<String> delegateSelectors() {
        return this.delegateSelectors;
    }
    /**
     * @return Description of the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Unique identifier of the resource.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return Specifies whether or not is the default value.
     * 
     */
    public Boolean isDefault() {
        return this.isDefault;
    }
    /**
     * @return Name of the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }
    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return The Harness text secret with the Azure authentication key as its value.
     * 
     */
    public String secretKey() {
        return this.secretKey;
    }
    /**
     * @return Azure subscription ID.
     * 
     */
    public String subscription() {
        return this.subscription;
    }
    /**
     * @return Tags to associate with the resource.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return The Azure Active Directory (AAD) directory ID where you created your application.
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }
    /**
     * @return Name of the vault.
     * 
     */
    public String vaultName() {
        return this.vaultName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAzureKeyVaultConnectorResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String azureEnvironmentType;
        private String clientId;
        private List<String> delegateSelectors;
        private String description;
        private String id;
        private String identifier;
        private Boolean isDefault;
        private @Nullable String name;
        private @Nullable String orgId;
        private @Nullable String projectId;
        private String secretKey;
        private String subscription;
        private List<String> tags;
        private String tenantId;
        private String vaultName;
        public Builder() {}
        public Builder(GetAzureKeyVaultConnectorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.azureEnvironmentType = defaults.azureEnvironmentType;
    	      this.clientId = defaults.clientId;
    	      this.delegateSelectors = defaults.delegateSelectors;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.isDefault = defaults.isDefault;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.projectId = defaults.projectId;
    	      this.secretKey = defaults.secretKey;
    	      this.subscription = defaults.subscription;
    	      this.tags = defaults.tags;
    	      this.tenantId = defaults.tenantId;
    	      this.vaultName = defaults.vaultName;
        }

        @CustomType.Setter
        public Builder azureEnvironmentType(String azureEnvironmentType) {
            if (azureEnvironmentType == null) {
              throw new MissingRequiredPropertyException("GetAzureKeyVaultConnectorResult", "azureEnvironmentType");
            }
            this.azureEnvironmentType = azureEnvironmentType;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetAzureKeyVaultConnectorResult", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder delegateSelectors(List<String> delegateSelectors) {
            if (delegateSelectors == null) {
              throw new MissingRequiredPropertyException("GetAzureKeyVaultConnectorResult", "delegateSelectors");
            }
            this.delegateSelectors = delegateSelectors;
            return this;
        }
        public Builder delegateSelectors(String... delegateSelectors) {
            return delegateSelectors(List.of(delegateSelectors));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetAzureKeyVaultConnectorResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAzureKeyVaultConnectorResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            if (identifier == null) {
              throw new MissingRequiredPropertyException("GetAzureKeyVaultConnectorResult", "identifier");
            }
            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder isDefault(Boolean isDefault) {
            if (isDefault == null) {
              throw new MissingRequiredPropertyException("GetAzureKeyVaultConnectorResult", "isDefault");
            }
            this.isDefault = isDefault;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(@Nullable String orgId) {

            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder secretKey(String secretKey) {
            if (secretKey == null) {
              throw new MissingRequiredPropertyException("GetAzureKeyVaultConnectorResult", "secretKey");
            }
            this.secretKey = secretKey;
            return this;
        }
        @CustomType.Setter
        public Builder subscription(String subscription) {
            if (subscription == null) {
              throw new MissingRequiredPropertyException("GetAzureKeyVaultConnectorResult", "subscription");
            }
            this.subscription = subscription;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetAzureKeyVaultConnectorResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tenantId(String tenantId) {
            if (tenantId == null) {
              throw new MissingRequiredPropertyException("GetAzureKeyVaultConnectorResult", "tenantId");
            }
            this.tenantId = tenantId;
            return this;
        }
        @CustomType.Setter
        public Builder vaultName(String vaultName) {
            if (vaultName == null) {
              throw new MissingRequiredPropertyException("GetAzureKeyVaultConnectorResult", "vaultName");
            }
            this.vaultName = vaultName;
            return this;
        }
        public GetAzureKeyVaultConnectorResult build() {
            final var _resultValue = new GetAzureKeyVaultConnectorResult();
            _resultValue.azureEnvironmentType = azureEnvironmentType;
            _resultValue.clientId = clientId;
            _resultValue.delegateSelectors = delegateSelectors;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.isDefault = isDefault;
            _resultValue.name = name;
            _resultValue.orgId = orgId;
            _resultValue.projectId = projectId;
            _resultValue.secretKey = secretKey;
            _resultValue.subscription = subscription;
            _resultValue.tags = tags;
            _resultValue.tenantId = tenantId;
            _resultValue.vaultName = vaultName;
            return _resultValue;
        }
    }
}
