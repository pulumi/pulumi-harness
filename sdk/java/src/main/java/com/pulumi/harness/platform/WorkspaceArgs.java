// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.WorkspaceEnvironmentVariableArgs;
import com.pulumi.harness.platform.inputs.WorkspaceTerraformVariableArgs;
import com.pulumi.harness.platform.inputs.WorkspaceTerraformVariableFileArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceArgs Empty = new WorkspaceArgs();

    /**
     * Cost estimation enabled determines if cost estimation operations are performed.
     * 
     */
    @Import(name="costEstimationEnabled", required=true)
    private Output<Boolean> costEstimationEnabled;

    /**
     * @return Cost estimation enabled determines if cost estimation operations are performed.
     * 
     */
    public Output<Boolean> costEstimationEnabled() {
        return this.costEstimationEnabled;
    }

    /**
     * Default pipelines associated with this workspace
     * 
     */
    @Import(name="defaultPipelines")
    private @Nullable Output<Map<String,String>> defaultPipelines;

    /**
     * @return Default pipelines associated with this workspace
     * 
     */
    public Optional<Output<Map<String,String>>> defaultPipelines() {
        return Optional.ofNullable(this.defaultPipelines);
    }

    /**
     * Description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Environment variables configured on the workspace
     * 
     */
    @Import(name="environmentVariables")
    private @Nullable Output<List<WorkspaceEnvironmentVariableArgs>> environmentVariables;

    /**
     * @return Environment variables configured on the workspace
     * 
     */
    public Optional<Output<List<WorkspaceEnvironmentVariableArgs>>> environmentVariables() {
        return Optional.ofNullable(this.environmentVariables);
    }

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId", required=true)
    private Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Provider connector is the reference to the connector for the infrastructure provider
     * 
     */
    @Import(name="providerConnector", required=true)
    private Output<String> providerConnector;

    /**
     * @return Provider connector is the reference to the connector for the infrastructure provider
     * 
     */
    public Output<String> providerConnector() {
        return this.providerConnector;
    }

    @Import(name="provisionerType", required=true)
    private Output<String> provisionerType;

    public Output<String> provisionerType() {
        return this.provisionerType;
    }

    @Import(name="provisionerVersion", required=true)
    private Output<String> provisionerVersion;

    public Output<String> provisionerVersion() {
        return this.provisionerVersion;
    }

    /**
     * Repository is the name of the repository to fetch the code from.
     * 
     */
    @Import(name="repository", required=true)
    private Output<String> repository;

    /**
     * @return Repository is the name of the repository to fetch the code from.
     * 
     */
    public Output<String> repository() {
        return this.repository;
    }

    /**
     * Repository branch is the name of the branch to fetch the code from. This cannot be set if repository commit or sha is set.
     * 
     */
    @Import(name="repositoryBranch")
    private @Nullable Output<String> repositoryBranch;

    /**
     * @return Repository branch is the name of the branch to fetch the code from. This cannot be set if repository commit or sha is set.
     * 
     */
    public Optional<Output<String>> repositoryBranch() {
        return Optional.ofNullable(this.repositoryBranch);
    }

    /**
     * Repository commit is tag to fetch the code from. This cannot be set if repository branch or sha is set.
     * 
     */
    @Import(name="repositoryCommit")
    private @Nullable Output<String> repositoryCommit;

    /**
     * @return Repository commit is tag to fetch the code from. This cannot be set if repository branch or sha is set.
     * 
     */
    public Optional<Output<String>> repositoryCommit() {
        return Optional.ofNullable(this.repositoryCommit);
    }

    /**
     * Repository connector is the reference to the connector used to fetch the code.
     * 
     */
    @Import(name="repositoryConnector", required=true)
    private Output<String> repositoryConnector;

    /**
     * @return Repository connector is the reference to the connector used to fetch the code.
     * 
     */
    public Output<String> repositoryConnector() {
        return this.repositoryConnector;
    }

    /**
     * Repository path is the path in which the code resides.
     * 
     */
    @Import(name="repositoryPath", required=true)
    private Output<String> repositoryPath;

    /**
     * @return Repository path is the path in which the code resides.
     * 
     */
    public Output<String> repositoryPath() {
        return this.repositoryPath;
    }

    /**
     * Repository commit is commit SHA to fetch the code from. This cannot be set if repository branch or commit is set.
     * 
     */
    @Import(name="repositorySha")
    private @Nullable Output<String> repositorySha;

    /**
     * @return Repository commit is commit SHA to fetch the code from. This cannot be set if repository branch or commit is set.
     * 
     */
    public Optional<Output<String>> repositorySha() {
        return Optional.ofNullable(this.repositorySha);
    }

    /**
     * Tags to associate with the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags to associate with the resource.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="terraformVariableFiles")
    private @Nullable Output<List<WorkspaceTerraformVariableFileArgs>> terraformVariableFiles;

    public Optional<Output<List<WorkspaceTerraformVariableFileArgs>>> terraformVariableFiles() {
        return Optional.ofNullable(this.terraformVariableFiles);
    }

    @Import(name="terraformVariables")
    private @Nullable Output<List<WorkspaceTerraformVariableArgs>> terraformVariables;

    public Optional<Output<List<WorkspaceTerraformVariableArgs>>> terraformVariables() {
        return Optional.ofNullable(this.terraformVariables);
    }

    /**
     * Variable sets to use.
     * 
     */
    @Import(name="variableSets")
    private @Nullable Output<List<String>> variableSets;

    /**
     * @return Variable sets to use.
     * 
     */
    public Optional<Output<List<String>>> variableSets() {
        return Optional.ofNullable(this.variableSets);
    }

    private WorkspaceArgs() {}

    private WorkspaceArgs(WorkspaceArgs $) {
        this.costEstimationEnabled = $.costEstimationEnabled;
        this.defaultPipelines = $.defaultPipelines;
        this.description = $.description;
        this.environmentVariables = $.environmentVariables;
        this.identifier = $.identifier;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.providerConnector = $.providerConnector;
        this.provisionerType = $.provisionerType;
        this.provisionerVersion = $.provisionerVersion;
        this.repository = $.repository;
        this.repositoryBranch = $.repositoryBranch;
        this.repositoryCommit = $.repositoryCommit;
        this.repositoryConnector = $.repositoryConnector;
        this.repositoryPath = $.repositoryPath;
        this.repositorySha = $.repositorySha;
        this.tags = $.tags;
        this.terraformVariableFiles = $.terraformVariableFiles;
        this.terraformVariables = $.terraformVariables;
        this.variableSets = $.variableSets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceArgs $;

        public Builder() {
            $ = new WorkspaceArgs();
        }

        public Builder(WorkspaceArgs defaults) {
            $ = new WorkspaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param costEstimationEnabled Cost estimation enabled determines if cost estimation operations are performed.
         * 
         * @return builder
         * 
         */
        public Builder costEstimationEnabled(Output<Boolean> costEstimationEnabled) {
            $.costEstimationEnabled = costEstimationEnabled;
            return this;
        }

        /**
         * @param costEstimationEnabled Cost estimation enabled determines if cost estimation operations are performed.
         * 
         * @return builder
         * 
         */
        public Builder costEstimationEnabled(Boolean costEstimationEnabled) {
            return costEstimationEnabled(Output.of(costEstimationEnabled));
        }

        /**
         * @param defaultPipelines Default pipelines associated with this workspace
         * 
         * @return builder
         * 
         */
        public Builder defaultPipelines(@Nullable Output<Map<String,String>> defaultPipelines) {
            $.defaultPipelines = defaultPipelines;
            return this;
        }

        /**
         * @param defaultPipelines Default pipelines associated with this workspace
         * 
         * @return builder
         * 
         */
        public Builder defaultPipelines(Map<String,String> defaultPipelines) {
            return defaultPipelines(Output.of(defaultPipelines));
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param environmentVariables Environment variables configured on the workspace
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(@Nullable Output<List<WorkspaceEnvironmentVariableArgs>> environmentVariables) {
            $.environmentVariables = environmentVariables;
            return this;
        }

        /**
         * @param environmentVariables Environment variables configured on the workspace
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(List<WorkspaceEnvironmentVariableArgs> environmentVariables) {
            return environmentVariables(Output.of(environmentVariables));
        }

        /**
         * @param environmentVariables Environment variables configured on the workspace
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(WorkspaceEnvironmentVariableArgs... environmentVariables) {
            return environmentVariables(List.of(environmentVariables));
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param providerConnector Provider connector is the reference to the connector for the infrastructure provider
         * 
         * @return builder
         * 
         */
        public Builder providerConnector(Output<String> providerConnector) {
            $.providerConnector = providerConnector;
            return this;
        }

        /**
         * @param providerConnector Provider connector is the reference to the connector for the infrastructure provider
         * 
         * @return builder
         * 
         */
        public Builder providerConnector(String providerConnector) {
            return providerConnector(Output.of(providerConnector));
        }

        public Builder provisionerType(Output<String> provisionerType) {
            $.provisionerType = provisionerType;
            return this;
        }

        public Builder provisionerType(String provisionerType) {
            return provisionerType(Output.of(provisionerType));
        }

        public Builder provisionerVersion(Output<String> provisionerVersion) {
            $.provisionerVersion = provisionerVersion;
            return this;
        }

        public Builder provisionerVersion(String provisionerVersion) {
            return provisionerVersion(Output.of(provisionerVersion));
        }

        /**
         * @param repository Repository is the name of the repository to fetch the code from.
         * 
         * @return builder
         * 
         */
        public Builder repository(Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository Repository is the name of the repository to fetch the code from.
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        /**
         * @param repositoryBranch Repository branch is the name of the branch to fetch the code from. This cannot be set if repository commit or sha is set.
         * 
         * @return builder
         * 
         */
        public Builder repositoryBranch(@Nullable Output<String> repositoryBranch) {
            $.repositoryBranch = repositoryBranch;
            return this;
        }

        /**
         * @param repositoryBranch Repository branch is the name of the branch to fetch the code from. This cannot be set if repository commit or sha is set.
         * 
         * @return builder
         * 
         */
        public Builder repositoryBranch(String repositoryBranch) {
            return repositoryBranch(Output.of(repositoryBranch));
        }

        /**
         * @param repositoryCommit Repository commit is tag to fetch the code from. This cannot be set if repository branch or sha is set.
         * 
         * @return builder
         * 
         */
        public Builder repositoryCommit(@Nullable Output<String> repositoryCommit) {
            $.repositoryCommit = repositoryCommit;
            return this;
        }

        /**
         * @param repositoryCommit Repository commit is tag to fetch the code from. This cannot be set if repository branch or sha is set.
         * 
         * @return builder
         * 
         */
        public Builder repositoryCommit(String repositoryCommit) {
            return repositoryCommit(Output.of(repositoryCommit));
        }

        /**
         * @param repositoryConnector Repository connector is the reference to the connector used to fetch the code.
         * 
         * @return builder
         * 
         */
        public Builder repositoryConnector(Output<String> repositoryConnector) {
            $.repositoryConnector = repositoryConnector;
            return this;
        }

        /**
         * @param repositoryConnector Repository connector is the reference to the connector used to fetch the code.
         * 
         * @return builder
         * 
         */
        public Builder repositoryConnector(String repositoryConnector) {
            return repositoryConnector(Output.of(repositoryConnector));
        }

        /**
         * @param repositoryPath Repository path is the path in which the code resides.
         * 
         * @return builder
         * 
         */
        public Builder repositoryPath(Output<String> repositoryPath) {
            $.repositoryPath = repositoryPath;
            return this;
        }

        /**
         * @param repositoryPath Repository path is the path in which the code resides.
         * 
         * @return builder
         * 
         */
        public Builder repositoryPath(String repositoryPath) {
            return repositoryPath(Output.of(repositoryPath));
        }

        /**
         * @param repositorySha Repository commit is commit SHA to fetch the code from. This cannot be set if repository branch or commit is set.
         * 
         * @return builder
         * 
         */
        public Builder repositorySha(@Nullable Output<String> repositorySha) {
            $.repositorySha = repositorySha;
            return this;
        }

        /**
         * @param repositorySha Repository commit is commit SHA to fetch the code from. This cannot be set if repository branch or commit is set.
         * 
         * @return builder
         * 
         */
        public Builder repositorySha(String repositorySha) {
            return repositorySha(Output.of(repositorySha));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public Builder terraformVariableFiles(@Nullable Output<List<WorkspaceTerraformVariableFileArgs>> terraformVariableFiles) {
            $.terraformVariableFiles = terraformVariableFiles;
            return this;
        }

        public Builder terraformVariableFiles(List<WorkspaceTerraformVariableFileArgs> terraformVariableFiles) {
            return terraformVariableFiles(Output.of(terraformVariableFiles));
        }

        public Builder terraformVariableFiles(WorkspaceTerraformVariableFileArgs... terraformVariableFiles) {
            return terraformVariableFiles(List.of(terraformVariableFiles));
        }

        public Builder terraformVariables(@Nullable Output<List<WorkspaceTerraformVariableArgs>> terraformVariables) {
            $.terraformVariables = terraformVariables;
            return this;
        }

        public Builder terraformVariables(List<WorkspaceTerraformVariableArgs> terraformVariables) {
            return terraformVariables(Output.of(terraformVariables));
        }

        public Builder terraformVariables(WorkspaceTerraformVariableArgs... terraformVariables) {
            return terraformVariables(List.of(terraformVariables));
        }

        /**
         * @param variableSets Variable sets to use.
         * 
         * @return builder
         * 
         */
        public Builder variableSets(@Nullable Output<List<String>> variableSets) {
            $.variableSets = variableSets;
            return this;
        }

        /**
         * @param variableSets Variable sets to use.
         * 
         * @return builder
         * 
         */
        public Builder variableSets(List<String> variableSets) {
            return variableSets(Output.of(variableSets));
        }

        /**
         * @param variableSets Variable sets to use.
         * 
         * @return builder
         * 
         */
        public Builder variableSets(String... variableSets) {
            return variableSets(List.of(variableSets));
        }

        public WorkspaceArgs build() {
            if ($.costEstimationEnabled == null) {
                throw new MissingRequiredPropertyException("WorkspaceArgs", "costEstimationEnabled");
            }
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("WorkspaceArgs", "identifier");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("WorkspaceArgs", "orgId");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("WorkspaceArgs", "projectId");
            }
            if ($.providerConnector == null) {
                throw new MissingRequiredPropertyException("WorkspaceArgs", "providerConnector");
            }
            if ($.provisionerType == null) {
                throw new MissingRequiredPropertyException("WorkspaceArgs", "provisionerType");
            }
            if ($.provisionerVersion == null) {
                throw new MissingRequiredPropertyException("WorkspaceArgs", "provisionerVersion");
            }
            if ($.repository == null) {
                throw new MissingRequiredPropertyException("WorkspaceArgs", "repository");
            }
            if ($.repositoryConnector == null) {
                throw new MissingRequiredPropertyException("WorkspaceArgs", "repositoryConnector");
            }
            if ($.repositoryPath == null) {
                throw new MissingRequiredPropertyException("WorkspaceArgs", "repositoryPath");
            }
            return $;
        }
    }

}
