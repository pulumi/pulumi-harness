// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.ConnectorRancherBearerTokenArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorRancherArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorRancherArgs Empty = new ConnectorRancherArgs();

    /**
     * Bearer token information for the rancher cluster.
     * 
     */
    @Import(name="bearerToken")
    private @Nullable Output<ConnectorRancherBearerTokenArgs> bearerToken;

    /**
     * @return Bearer token information for the rancher cluster.
     * 
     */
    public Optional<Output<ConnectorRancherBearerTokenArgs>> bearerToken() {
        return Optional.ofNullable(this.bearerToken);
    }

    /**
     * Selectors to use for the delegate.
     * 
     */
    @Import(name="delegateSelectors")
    private @Nullable Output<List<String>> delegateSelectors;

    /**
     * @return Selectors to use for the delegate.
     * 
     */
    public Optional<Output<List<String>>> delegateSelectors() {
        return Optional.ofNullable(this.delegateSelectors);
    }

    /**
     * Description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Enable this flag for force deletion of connector
     * 
     */
    @Import(name="forceDelete")
    private @Nullable Output<Boolean> forceDelete;

    /**
     * @return Enable this flag for force deletion of connector
     * 
     */
    public Optional<Output<Boolean>> forceDelete() {
        return Optional.ofNullable(this.forceDelete);
    }

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The URL of the Rancher cluster.
     * 
     */
    @Import(name="rancherUrl", required=true)
    private Output<String> rancherUrl;

    /**
     * @return The URL of the Rancher cluster.
     * 
     */
    public Output<String> rancherUrl() {
        return this.rancherUrl;
    }

    /**
     * Tags to associate with the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags to associate with the resource.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ConnectorRancherArgs() {}

    private ConnectorRancherArgs(ConnectorRancherArgs $) {
        this.bearerToken = $.bearerToken;
        this.delegateSelectors = $.delegateSelectors;
        this.description = $.description;
        this.forceDelete = $.forceDelete;
        this.identifier = $.identifier;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.rancherUrl = $.rancherUrl;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorRancherArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorRancherArgs $;

        public Builder() {
            $ = new ConnectorRancherArgs();
        }

        public Builder(ConnectorRancherArgs defaults) {
            $ = new ConnectorRancherArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bearerToken Bearer token information for the rancher cluster.
         * 
         * @return builder
         * 
         */
        public Builder bearerToken(@Nullable Output<ConnectorRancherBearerTokenArgs> bearerToken) {
            $.bearerToken = bearerToken;
            return this;
        }

        /**
         * @param bearerToken Bearer token information for the rancher cluster.
         * 
         * @return builder
         * 
         */
        public Builder bearerToken(ConnectorRancherBearerTokenArgs bearerToken) {
            return bearerToken(Output.of(bearerToken));
        }

        /**
         * @param delegateSelectors Selectors to use for the delegate.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(@Nullable Output<List<String>> delegateSelectors) {
            $.delegateSelectors = delegateSelectors;
            return this;
        }

        /**
         * @param delegateSelectors Selectors to use for the delegate.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(List<String> delegateSelectors) {
            return delegateSelectors(Output.of(delegateSelectors));
        }

        /**
         * @param delegateSelectors Selectors to use for the delegate.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(String... delegateSelectors) {
            return delegateSelectors(List.of(delegateSelectors));
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param forceDelete Enable this flag for force deletion of connector
         * 
         * @return builder
         * 
         */
        public Builder forceDelete(@Nullable Output<Boolean> forceDelete) {
            $.forceDelete = forceDelete;
            return this;
        }

        /**
         * @param forceDelete Enable this flag for force deletion of connector
         * 
         * @return builder
         * 
         */
        public Builder forceDelete(Boolean forceDelete) {
            return forceDelete(Output.of(forceDelete));
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param rancherUrl The URL of the Rancher cluster.
         * 
         * @return builder
         * 
         */
        public Builder rancherUrl(Output<String> rancherUrl) {
            $.rancherUrl = rancherUrl;
            return this;
        }

        /**
         * @param rancherUrl The URL of the Rancher cluster.
         * 
         * @return builder
         * 
         */
        public Builder rancherUrl(String rancherUrl) {
            return rancherUrl(Output.of(rancherUrl));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public ConnectorRancherArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("ConnectorRancherArgs", "identifier");
            }
            if ($.rancherUrl == null) {
                throw new MissingRequiredPropertyException("ConnectorRancherArgs", "rancherUrl");
            }
            return $;
        }
    }

}
