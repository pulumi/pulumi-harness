// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TokenState extends com.pulumi.resources.ResourceArgs {

    public static final TokenState Empty = new TokenState();

    /**
     * Account Identifier for the Entity
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Account Identifier for the Entity
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Identifier of the API Key
     * 
     */
    @Import(name="apikeyId")
    private @Nullable Output<String> apikeyId;

    /**
     * @return Identifier of the API Key
     * 
     */
    public Optional<Output<String>> apikeyId() {
        return Optional.ofNullable(this.apikeyId);
    }

    /**
     * Type of the API Key
     * 
     */
    @Import(name="apikeyType")
    private @Nullable Output<String> apikeyType;

    /**
     * @return Type of the API Key
     * 
     */
    public Optional<Output<String>> apikeyType() {
        return Optional.ofNullable(this.apikeyType);
    }

    /**
     * Description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Email Id of the user who created the Token
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return Email Id of the user who created the Token
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * Encoded password of the Token
     * 
     */
    @Import(name="encodedPassword")
    private @Nullable Output<String> encodedPassword;

    /**
     * @return Encoded password of the Token
     * 
     */
    public Optional<Output<String>> encodedPassword() {
        return Optional.ofNullable(this.encodedPassword);
    }

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Parent Entity Identifier of the API Key
     * 
     */
    @Import(name="parentId")
    private @Nullable Output<String> parentId;

    /**
     * @return Parent Entity Identifier of the API Key
     * 
     */
    public Optional<Output<String>> parentId() {
        return Optional.ofNullable(this.parentId);
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Scheduled expiry time in milliseconds
     * 
     */
    @Import(name="scheduledExpireTime")
    private @Nullable Output<Integer> scheduledExpireTime;

    /**
     * @return Scheduled expiry time in milliseconds
     * 
     */
    public Optional<Output<Integer>> scheduledExpireTime() {
        return Optional.ofNullable(this.scheduledExpireTime);
    }

    /**
     * Tags to associate with the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags to associate with the resource.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Name of the user who created the Token
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Name of the user who created the Token
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * Boolean value to indicate if Token is valid or not.
     * 
     */
    @Import(name="valid")
    private @Nullable Output<Boolean> valid;

    /**
     * @return Boolean value to indicate if Token is valid or not.
     * 
     */
    public Optional<Output<Boolean>> valid() {
        return Optional.ofNullable(this.valid);
    }

    /**
     * This is the time from which the Token is valid. The time is in milliseconds
     * 
     */
    @Import(name="validFrom")
    private @Nullable Output<Integer> validFrom;

    /**
     * @return This is the time from which the Token is valid. The time is in milliseconds
     * 
     */
    public Optional<Output<Integer>> validFrom() {
        return Optional.ofNullable(this.validFrom);
    }

    /**
     * This is the time till which the Token is valid. The time is in milliseconds
     * 
     */
    @Import(name="validTo")
    private @Nullable Output<Integer> validTo;

    /**
     * @return This is the time till which the Token is valid. The time is in milliseconds
     * 
     */
    public Optional<Output<Integer>> validTo() {
        return Optional.ofNullable(this.validTo);
    }

    /**
     * Value of the Token
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return Value of the Token
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private TokenState() {}

    private TokenState(TokenState $) {
        this.accountId = $.accountId;
        this.apikeyId = $.apikeyId;
        this.apikeyType = $.apikeyType;
        this.description = $.description;
        this.email = $.email;
        this.encodedPassword = $.encodedPassword;
        this.identifier = $.identifier;
        this.name = $.name;
        this.orgId = $.orgId;
        this.parentId = $.parentId;
        this.projectId = $.projectId;
        this.scheduledExpireTime = $.scheduledExpireTime;
        this.tags = $.tags;
        this.username = $.username;
        this.valid = $.valid;
        this.validFrom = $.validFrom;
        this.validTo = $.validTo;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TokenState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TokenState $;

        public Builder() {
            $ = new TokenState();
        }

        public Builder(TokenState defaults) {
            $ = new TokenState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account Identifier for the Entity
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account Identifier for the Entity
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param apikeyId Identifier of the API Key
         * 
         * @return builder
         * 
         */
        public Builder apikeyId(@Nullable Output<String> apikeyId) {
            $.apikeyId = apikeyId;
            return this;
        }

        /**
         * @param apikeyId Identifier of the API Key
         * 
         * @return builder
         * 
         */
        public Builder apikeyId(String apikeyId) {
            return apikeyId(Output.of(apikeyId));
        }

        /**
         * @param apikeyType Type of the API Key
         * 
         * @return builder
         * 
         */
        public Builder apikeyType(@Nullable Output<String> apikeyType) {
            $.apikeyType = apikeyType;
            return this;
        }

        /**
         * @param apikeyType Type of the API Key
         * 
         * @return builder
         * 
         */
        public Builder apikeyType(String apikeyType) {
            return apikeyType(Output.of(apikeyType));
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param email Email Id of the user who created the Token
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Email Id of the user who created the Token
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param encodedPassword Encoded password of the Token
         * 
         * @return builder
         * 
         */
        public Builder encodedPassword(@Nullable Output<String> encodedPassword) {
            $.encodedPassword = encodedPassword;
            return this;
        }

        /**
         * @param encodedPassword Encoded password of the Token
         * 
         * @return builder
         * 
         */
        public Builder encodedPassword(String encodedPassword) {
            return encodedPassword(Output.of(encodedPassword));
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param parentId Parent Entity Identifier of the API Key
         * 
         * @return builder
         * 
         */
        public Builder parentId(@Nullable Output<String> parentId) {
            $.parentId = parentId;
            return this;
        }

        /**
         * @param parentId Parent Entity Identifier of the API Key
         * 
         * @return builder
         * 
         */
        public Builder parentId(String parentId) {
            return parentId(Output.of(parentId));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param scheduledExpireTime Scheduled expiry time in milliseconds
         * 
         * @return builder
         * 
         */
        public Builder scheduledExpireTime(@Nullable Output<Integer> scheduledExpireTime) {
            $.scheduledExpireTime = scheduledExpireTime;
            return this;
        }

        /**
         * @param scheduledExpireTime Scheduled expiry time in milliseconds
         * 
         * @return builder
         * 
         */
        public Builder scheduledExpireTime(Integer scheduledExpireTime) {
            return scheduledExpireTime(Output.of(scheduledExpireTime));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param username Name of the user who created the Token
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Name of the user who created the Token
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param valid Boolean value to indicate if Token is valid or not.
         * 
         * @return builder
         * 
         */
        public Builder valid(@Nullable Output<Boolean> valid) {
            $.valid = valid;
            return this;
        }

        /**
         * @param valid Boolean value to indicate if Token is valid or not.
         * 
         * @return builder
         * 
         */
        public Builder valid(Boolean valid) {
            return valid(Output.of(valid));
        }

        /**
         * @param validFrom This is the time from which the Token is valid. The time is in milliseconds
         * 
         * @return builder
         * 
         */
        public Builder validFrom(@Nullable Output<Integer> validFrom) {
            $.validFrom = validFrom;
            return this;
        }

        /**
         * @param validFrom This is the time from which the Token is valid. The time is in milliseconds
         * 
         * @return builder
         * 
         */
        public Builder validFrom(Integer validFrom) {
            return validFrom(Output.of(validFrom));
        }

        /**
         * @param validTo This is the time till which the Token is valid. The time is in milliseconds
         * 
         * @return builder
         * 
         */
        public Builder validTo(@Nullable Output<Integer> validTo) {
            $.validTo = validTo;
            return this;
        }

        /**
         * @param validTo This is the time till which the Token is valid. The time is in milliseconds
         * 
         * @return builder
         * 
         */
        public Builder validTo(Integer validTo) {
            return validTo(Output.of(validTo));
        }

        /**
         * @param value Value of the Token
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Value of the Token
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public TokenState build() {
            return $;
        }
    }

}
