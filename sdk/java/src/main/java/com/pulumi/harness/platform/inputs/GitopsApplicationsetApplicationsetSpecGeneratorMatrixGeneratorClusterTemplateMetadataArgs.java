// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorClusterTemplateMetadataArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorClusterTemplateMetadataArgs Empty = new GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorClusterTemplateMetadataArgs();

    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * List of finalizers to apply to the resulting Application.
     * 
     */
    @Import(name="finalizers")
    private @Nullable Output<List<String>> finalizers;

    /**
     * @return List of finalizers to apply to the resulting Application.
     * 
     */
    public Optional<Output<List<String>>> finalizers() {
        return Optional.ofNullable(this.finalizers);
    }

    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Name of the resulting Application
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resulting Application
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Namespace of the resulting Application
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Namespace of the resulting Application
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    private GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorClusterTemplateMetadataArgs() {}

    private GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorClusterTemplateMetadataArgs(GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorClusterTemplateMetadataArgs $) {
        this.annotations = $.annotations;
        this.finalizers = $.finalizers;
        this.labels = $.labels;
        this.name = $.name;
        this.namespace = $.namespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorClusterTemplateMetadataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorClusterTemplateMetadataArgs $;

        public Builder() {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorClusterTemplateMetadataArgs();
        }

        public Builder(GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorClusterTemplateMetadataArgs defaults) {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorClusterTemplateMetadataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param finalizers List of finalizers to apply to the resulting Application.
         * 
         * @return builder
         * 
         */
        public Builder finalizers(@Nullable Output<List<String>> finalizers) {
            $.finalizers = finalizers;
            return this;
        }

        /**
         * @param finalizers List of finalizers to apply to the resulting Application.
         * 
         * @return builder
         * 
         */
        public Builder finalizers(List<String> finalizers) {
            return finalizers(Output.of(finalizers));
        }

        /**
         * @param finalizers List of finalizers to apply to the resulting Application.
         * 
         * @return builder
         * 
         */
        public Builder finalizers(String... finalizers) {
            return finalizers(List.of(finalizers));
        }

        /**
         * @param labels Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name Name of the resulting Application
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resulting Application
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace Namespace of the resulting Application
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Namespace of the resulting Application
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorClusterTemplateMetadataArgs build() {
            return $;
        }
    }

}
