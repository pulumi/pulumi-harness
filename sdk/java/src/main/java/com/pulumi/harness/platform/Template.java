// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.TemplateArgs;
import com.pulumi.harness.platform.inputs.TemplateState;
import com.pulumi.harness.platform.outputs.TemplateGitDetails;
import com.pulumi.harness.platform.outputs.TemplateGitImportDetails;
import com.pulumi.harness.platform.outputs.TemplateTemplateImportRequest;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for creating a Template. Description field is deprecated
 * 
 * ## Import
 * 
 * The `pulumi import` command can be used, for example:
 * 
 * Import account level template
 * 
 * ```sh
 * $ pulumi import harness:platform/template:Template example &lt;template_id&gt;
 * ```
 * 
 * Import org level template
 * 
 * ```sh
 * $ pulumi import harness:platform/template:Template example &lt;ord_id&gt;/&lt;template_id&gt;
 * ```
 * 
 * Import project level template
 * 
 * ```sh
 * $ pulumi import harness:platform/template:Template example &lt;org_id&gt;/&lt;project_id&gt;/&lt;template_id&gt;
 * ```
 * 
 */
@ResourceType(type="harness:platform/template:Template")
public class Template extends com.pulumi.resources.CustomResource {
    /**
     * Specify comment with respect to changes.
     * 
     */
    @Export(name="comments", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> comments;

    /**
     * @return Specify comment with respect to changes.
     * 
     */
    public Output<Optional<String>> comments() {
        return Codegen.optional(this.comments);
    }
    /**
     * Description of the entity. Description field is deprecated
     * 
     * @deprecated
     * description field is deprecated
     * 
     */
    @Deprecated /* description field is deprecated */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the entity. Description field is deprecated
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other entities reference it
     * 
     */
    @Export(name="forceDelete", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> forceDelete;

    /**
     * @return Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other entities reference it
     * 
     */
    public Output<Boolean> forceDelete() {
        return this.forceDelete;
    }
    /**
     * Contains parameters related to creating an Entity for Git Experience.
     * 
     */
    @Export(name="gitDetails", refs={TemplateGitDetails.class}, tree="[0]")
    private Output<TemplateGitDetails> gitDetails;

    /**
     * @return Contains parameters related to creating an Entity for Git Experience.
     * 
     */
    public Output<TemplateGitDetails> gitDetails() {
        return this.gitDetails;
    }
    /**
     * Contains Git Information for importing entities from Git
     * 
     */
    @Export(name="gitImportDetails", refs={TemplateGitImportDetails.class}, tree="[0]")
    private Output</* @Nullable */ TemplateGitImportDetails> gitImportDetails;

    /**
     * @return Contains Git Information for importing entities from Git
     * 
     */
    public Output<Optional<TemplateGitImportDetails>> gitImportDetails() {
        return Codegen.optional(this.gitImportDetails);
    }
    /**
     * Unique identifier of the resource. Cannot be changed once the resource is created. Must match the identifier in the template_yaml.
     * 
     */
    @Export(name="identifier", refs={String.class}, tree="[0]")
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource. Cannot be changed once the resource is created. Must match the identifier in the template_yaml.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }
    /**
     * Flag to set if importing from Git
     * 
     */
    @Export(name="importFromGit", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> importFromGit;

    /**
     * @return Flag to set if importing from Git
     * 
     */
    public Output<Optional<Boolean>> importFromGit() {
        return Codegen.optional(this.importFromGit);
    }
    /**
     * True if given version for template to be set as stable.
     * 
     */
    @Export(name="isStable", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isStable;

    /**
     * @return True if given version for template to be set as stable.
     * 
     */
    public Output<Boolean> isStable() {
        return this.isStable;
    }
    /**
     * Name of the Variable
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the Variable
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Organization Identifier for the Entity
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> orgId;

    /**
     * @return Organization Identifier for the Entity
     * 
     */
    public Output<Optional<String>> orgId() {
        return Codegen.optional(this.orgId);
    }
    /**
     * Project Identifier for the Entity
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> projectId;

    /**
     * @return Project Identifier for the Entity
     * 
     */
    public Output<Optional<String>> projectId() {
        return Codegen.optional(this.projectId);
    }
    /**
     * Tags to associate with the resource.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Tags to associate with the resource.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Contains parameters for importing template.
     * 
     */
    @Export(name="templateImportRequest", refs={TemplateTemplateImportRequest.class}, tree="[0]")
    private Output</* @Nullable */ TemplateTemplateImportRequest> templateImportRequest;

    /**
     * @return Contains parameters for importing template.
     * 
     */
    public Output<Optional<TemplateTemplateImportRequest>> templateImportRequest() {
        return Codegen.optional(this.templateImportRequest);
    }
    /**
     * Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference an entity at the account scope, prefix &#39;account` to the expression: account.{identifier}. For eg, to reference a connector with identifier &#39;connectorId&#39; at the organization scope in a stage mention it as connectorRef: org.connectorId.
     * 
     */
    @Export(name="templateYaml", refs={String.class}, tree="[0]")
    private Output<String> templateYaml;

    /**
     * @return Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference an entity at the account scope, prefix &#39;account` to the expression: account.{identifier}. For eg, to reference a connector with identifier &#39;connectorId&#39; at the organization scope in a stage mention it as connectorRef: org.connectorId.
     * 
     */
    public Output<String> templateYaml() {
        return this.templateYaml;
    }
    /**
     * Version Label for Template.
     * 
     */
    @Export(name="version", refs={String.class}, tree="[0]")
    private Output<String> version;

    /**
     * @return Version Label for Template.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Template(java.lang.String name) {
        this(name, TemplateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Template(java.lang.String name, TemplateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Template(java.lang.String name, TemplateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/template:Template", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Template(java.lang.String name, Output<java.lang.String> id, @Nullable TemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/template:Template", name, state, makeResourceOptions(options, id), false);
    }

    private static TemplateArgs makeArgs(TemplateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? TemplateArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Template get(java.lang.String name, Output<java.lang.String> id, @Nullable TemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Template(name, id, state, options);
    }
}
