// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cluster.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetOrchestratorConfigReplacementScheduleWindowDetails {
    private @Nullable Boolean allDay;
    /**
     * @return List of days on which schedule need to be active. Valid values are SUN, MON, TUE, WED, THU, FRI and SAT.
     * 
     */
    private List<String> days;
    /**
     * @return End time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
     * 
     */
    private @Nullable String endTime;
    /**
     * @return Start time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
     * 
     */
    private @Nullable String startTime;
    /**
     * @return Time zone in which the schedule needs to be executed. Example Valid values: UTC, America/New*York, Europe/London, Asia/Kolkata, Asia/Tokyo, Asia/Hong*Kong, Asia/Singapore, Australia/Melbourne and Australia/Sydney.
     * 
     */
    private String timeZone;

    private GetOrchestratorConfigReplacementScheduleWindowDetails() {}
    public Optional<Boolean> allDay() {
        return Optional.ofNullable(this.allDay);
    }
    /**
     * @return List of days on which schedule need to be active. Valid values are SUN, MON, TUE, WED, THU, FRI and SAT.
     * 
     */
    public List<String> days() {
        return this.days;
    }
    /**
     * @return End time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
     * 
     */
    public Optional<String> endTime() {
        return Optional.ofNullable(this.endTime);
    }
    /**
     * @return Start time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
     * 
     */
    public Optional<String> startTime() {
        return Optional.ofNullable(this.startTime);
    }
    /**
     * @return Time zone in which the schedule needs to be executed. Example Valid values: UTC, America/New*York, Europe/London, Asia/Kolkata, Asia/Tokyo, Asia/Hong*Kong, Asia/Singapore, Australia/Melbourne and Australia/Sydney.
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOrchestratorConfigReplacementScheduleWindowDetails defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allDay;
        private List<String> days;
        private @Nullable String endTime;
        private @Nullable String startTime;
        private String timeZone;
        public Builder() {}
        public Builder(GetOrchestratorConfigReplacementScheduleWindowDetails defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allDay = defaults.allDay;
    	      this.days = defaults.days;
    	      this.endTime = defaults.endTime;
    	      this.startTime = defaults.startTime;
    	      this.timeZone = defaults.timeZone;
        }

        @CustomType.Setter
        public Builder allDay(@Nullable Boolean allDay) {

            this.allDay = allDay;
            return this;
        }
        @CustomType.Setter
        public Builder days(List<String> days) {
            if (days == null) {
              throw new MissingRequiredPropertyException("GetOrchestratorConfigReplacementScheduleWindowDetails", "days");
            }
            this.days = days;
            return this;
        }
        public Builder days(String... days) {
            return days(List.of(days));
        }
        @CustomType.Setter
        public Builder endTime(@Nullable String endTime) {

            this.endTime = endTime;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(@Nullable String startTime) {

            this.startTime = startTime;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            if (timeZone == null) {
              throw new MissingRequiredPropertyException("GetOrchestratorConfigReplacementScheduleWindowDetails", "timeZone");
            }
            this.timeZone = timeZone;
            return this;
        }
        public GetOrchestratorConfigReplacementScheduleWindowDetails build() {
            final var _resultValue = new GetOrchestratorConfigReplacementScheduleWindowDetails();
            _resultValue.allDay = allDay;
            _resultValue.days = days;
            _resultValue.endTime = endTime;
            _resultValue.startTime = startTime;
            _resultValue.timeZone = timeZone;
            return _resultValue;
        }
    }
}
