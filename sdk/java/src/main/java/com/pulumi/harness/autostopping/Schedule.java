// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.autostopping;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.autostopping.ScheduleArgs;
import com.pulumi.harness.autostopping.inputs.ScheduleState;
import com.pulumi.harness.autostopping.outputs.ScheduleRepeat;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for creating a fixed schedule for Harness AutoStopping rule
 * 
 */
@ResourceType(type="harness:autostopping/schedule:Schedule")
public class Schedule extends com.pulumi.resources.CustomResource {
    /**
     * Time until which schedule will be active. Need to be in YYYY-MM-DD HH:mm:SS format. Eg 2006-01-02 15:04:05
     * 
     */
    @Export(name="endingOn", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> endingOn;

    /**
     * @return Time until which schedule will be active. Need to be in YYYY-MM-DD HH:mm:SS format. Eg 2006-01-02 15:04:05
     * 
     */
    public Output<Optional<String>> endingOn() {
        return Codegen.optional(this.endingOn);
    }
    /**
     * Unique identifier of the schedule
     * 
     */
    @Export(name="identifier", refs={Double.class}, tree="[0]")
    private Output<Double> identifier;

    /**
     * @return Unique identifier of the schedule
     * 
     */
    public Output<Double> identifier() {
        return this.identifier;
    }
    /**
     * Name of the schedule
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the schedule
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * For defining periodic schedule. Periodic nature will be applicable from the time of creation of schedule, unless specific &#39;time_period&#39; is specified
     * 
     */
    @Export(name="repeats", refs={List.class,ScheduleRepeat.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ScheduleRepeat>> repeats;

    /**
     * @return For defining periodic schedule. Periodic nature will be applicable from the time of creation of schedule, unless specific &#39;time_period&#39; is specified
     * 
     */
    public Output<Optional<List<ScheduleRepeat>>> repeats() {
        return Codegen.optional(this.repeats);
    }
    /**
     * ID of AutoStopping rules on which the schedule applies
     * 
     */
    @Export(name="rules", refs={List.class,Double.class}, tree="[0,1]")
    private Output<List<Double>> rules;

    /**
     * @return ID of AutoStopping rules on which the schedule applies
     * 
     */
    public Output<List<Double>> rules() {
        return this.rules;
    }
    /**
     * Type of the schedule. Valid values are `uptime` and `downtime`
     * 
     */
    @Export(name="scheduleType", refs={String.class}, tree="[0]")
    private Output<String> scheduleType;

    /**
     * @return Type of the schedule. Valid values are `uptime` and `downtime`
     * 
     */
    public Output<String> scheduleType() {
        return this.scheduleType;
    }
    /**
     * Time from which schedule will be active. Schedule will take immediate effect if starting_from is not specified. Need to be in YYYY-MM-DD HH:mm:SS format. Eg 2006-01-02 15:04:05
     * 
     */
    @Export(name="startingFrom", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> startingFrom;

    /**
     * @return Time from which schedule will be active. Schedule will take immediate effect if starting_from is not specified. Need to be in YYYY-MM-DD HH:mm:SS format. Eg 2006-01-02 15:04:05
     * 
     */
    public Output<Optional<String>> startingFrom() {
        return Codegen.optional(this.startingFrom);
    }
    /**
     * Time zone in which schedule needs to be executed
     * 
     */
    @Export(name="timeZone", refs={String.class}, tree="[0]")
    private Output<String> timeZone;

    /**
     * @return Time zone in which schedule needs to be executed
     * 
     */
    public Output<String> timeZone() {
        return this.timeZone;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Schedule(java.lang.String name) {
        this(name, ScheduleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Schedule(java.lang.String name, ScheduleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Schedule(java.lang.String name, ScheduleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:autostopping/schedule:Schedule", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Schedule(java.lang.String name, Output<java.lang.String> id, @Nullable ScheduleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:autostopping/schedule:Schedule", name, state, makeResourceOptions(options, id), false);
    }

    private static ScheduleArgs makeArgs(ScheduleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ScheduleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Schedule get(java.lang.String name, Output<java.lang.String> id, @Nullable ScheduleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Schedule(name, id, state, options);
    }
}
