// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetGitopsFiltersResult {
    /**
     * @return Properties of the filters entity defined in Harness as a JSON string. All values should be arrays of strings. Example: jsonencode({&#34;healthStatus&#34;: [&#34;Healthy&#34;, &#34;Degraded&#34;], &#34;syncStatus&#34;: [&#34;Synced&#34;]})
     * 
     */
    private String filterProperties;
    /**
     * @return This indicates visibility of filters, by default it is Everyone.
     * 
     */
    private String filterVisibility;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Unique identifier of the resource.
     * 
     */
    private String identifier;
    /**
     * @return Name of the Filter.
     * 
     */
    private String name;
    /**
     * @return Organization Identifier for the Entity.
     * 
     */
    private String orgId;
    /**
     * @return Project Identifier for the Entity.
     * 
     */
    private String projectId;
    /**
     * @return Type of filter.
     * 
     */
    private String type;

    private GetGitopsFiltersResult() {}
    /**
     * @return Properties of the filters entity defined in Harness as a JSON string. All values should be arrays of strings. Example: jsonencode({&#34;healthStatus&#34;: [&#34;Healthy&#34;, &#34;Degraded&#34;], &#34;syncStatus&#34;: [&#34;Synced&#34;]})
     * 
     */
    public String filterProperties() {
        return this.filterProperties;
    }
    /**
     * @return This indicates visibility of filters, by default it is Everyone.
     * 
     */
    public String filterVisibility() {
        return this.filterVisibility;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Unique identifier of the resource.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return Name of the Filter.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Organization Identifier for the Entity.
     * 
     */
    public String orgId() {
        return this.orgId;
    }
    /**
     * @return Project Identifier for the Entity.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Type of filter.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGitopsFiltersResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String filterProperties;
        private String filterVisibility;
        private String id;
        private String identifier;
        private String name;
        private String orgId;
        private String projectId;
        private String type;
        public Builder() {}
        public Builder(GetGitopsFiltersResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filterProperties = defaults.filterProperties;
    	      this.filterVisibility = defaults.filterVisibility;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.projectId = defaults.projectId;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder filterProperties(String filterProperties) {
            if (filterProperties == null) {
              throw new MissingRequiredPropertyException("GetGitopsFiltersResult", "filterProperties");
            }
            this.filterProperties = filterProperties;
            return this;
        }
        @CustomType.Setter
        public Builder filterVisibility(String filterVisibility) {
            if (filterVisibility == null) {
              throw new MissingRequiredPropertyException("GetGitopsFiltersResult", "filterVisibility");
            }
            this.filterVisibility = filterVisibility;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGitopsFiltersResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            if (identifier == null) {
              throw new MissingRequiredPropertyException("GetGitopsFiltersResult", "identifier");
            }
            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGitopsFiltersResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(String orgId) {
            if (orgId == null) {
              throw new MissingRequiredPropertyException("GetGitopsFiltersResult", "orgId");
            }
            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetGitopsFiltersResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetGitopsFiltersResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetGitopsFiltersResult build() {
            final var _resultValue = new GetGitopsFiltersResult();
            _resultValue.filterProperties = filterProperties;
            _resultValue.filterVisibility = filterVisibility;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.name = name;
            _resultValue.orgId = orgId;
            _resultValue.projectId = projectId;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
