// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.chaos.ImageRegistryArgs;
import com.pulumi.harness.chaos.inputs.ImageRegistryState;
import com.pulumi.harness.chaos.outputs.ImageRegistryCustomImage;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for managing a Harness Chaos Image Registry
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.chaos.ImageRegistry;
 * import com.pulumi.harness.chaos.ImageRegistryArgs;
 * import com.pulumi.harness.chaos.inputs.ImageRegistryCustomImageArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ImageRegistry("example", ImageRegistryArgs.builder()
 *             .orgId("<org_id>")
 *             .projectId("<project_id>")
 *             .registryServer("<registry_server>")
 *             .registryAccount("<registry_account>")
 *             .isPrivate(true)
 *             .secretName("<secret_name>")
 *             .isDefault(false)
 *             .isOverrideAllowed(true)
 *             .useCustomImages(true)
 *             .customImages(ImageRegistryCustomImageArgs.builder()
 *                 .logWatcher("<log_watcher_image>")
 *                 .ddcr("<ddcr_image>")
 *                 .ddcrLib("<ddcr_lib_image>")
 *                 .ddcrFault("<ddcr_fault_image>")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 */
@ResourceType(type="harness:chaos/imageRegistry:ImageRegistry")
public class ImageRegistry extends com.pulumi.resources.CustomResource {
    /**
     * Creation timestamp
     * 
     */
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    /**
     * @return Creation timestamp
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * Custom images configuration
     * 
     */
    @Export(name="customImages", refs={List.class,ImageRegistryCustomImage.class}, tree="[0,1]")
    private Output<List<ImageRegistryCustomImage>> customImages;

    /**
     * @return Custom images configuration
     * 
     */
    public Output<List<ImageRegistryCustomImage>> customImages() {
        return this.customImages;
    }
    /**
     * The infrastructure ID to set up the image registry
     * 
     */
    @Export(name="infraId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> infraId;

    /**
     * @return The infrastructure ID to set up the image registry
     * 
     */
    public Output<Optional<String>> infraId() {
        return Codegen.optional(this.infraId);
    }
    /**
     * Whether this is the default registry
     * 
     */
    @Export(name="isDefault", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isDefault;

    /**
     * @return Whether this is the default registry
     * 
     */
    public Output<Optional<Boolean>> isDefault() {
        return Codegen.optional(this.isDefault);
    }
    /**
     * Whether override is allowed for this registry
     * 
     */
    @Export(name="isOverrideAllowed", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isOverrideAllowed;

    /**
     * @return Whether override is allowed for this registry
     * 
     */
    public Output<Optional<Boolean>> isOverrideAllowed() {
        return Codegen.optional(this.isOverrideAllowed);
    }
    /**
     * Whether the registry is private
     * 
     */
    @Export(name="isPrivate", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isPrivate;

    /**
     * @return Whether the registry is private
     * 
     */
    public Output<Boolean> isPrivate() {
        return this.isPrivate;
    }
    /**
     * The organization ID of the image registry
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> orgId;

    /**
     * @return The organization ID of the image registry
     * 
     */
    public Output<Optional<String>> orgId() {
        return Codegen.optional(this.orgId);
    }
    /**
     * The project ID of the image registry
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> projectId;

    /**
     * @return The project ID of the image registry
     * 
     */
    public Output<Optional<String>> projectId() {
        return Codegen.optional(this.projectId);
    }
    /**
     * The registry account name
     * 
     */
    @Export(name="registryAccount", refs={String.class}, tree="[0]")
    private Output<String> registryAccount;

    /**
     * @return The registry account name
     * 
     */
    public Output<String> registryAccount() {
        return this.registryAccount;
    }
    /**
     * The registry server URL
     * 
     */
    @Export(name="registryServer", refs={String.class}, tree="[0]")
    private Output<String> registryServer;

    /**
     * @return The registry server URL
     * 
     */
    public Output<String> registryServer() {
        return this.registryServer;
    }
    /**
     * The name of the secret for authentication
     * 
     */
    @Export(name="secretName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> secretName;

    /**
     * @return The name of the secret for authentication
     * 
     */
    public Output<Optional<String>> secretName() {
        return Codegen.optional(this.secretName);
    }
    /**
     * Last update timestamp
     * 
     */
    @Export(name="updatedAt", refs={String.class}, tree="[0]")
    private Output<String> updatedAt;

    /**
     * @return Last update timestamp
     * 
     */
    public Output<String> updatedAt() {
        return this.updatedAt;
    }
    /**
     * Whether to use custom images
     * 
     */
    @Export(name="useCustomImages", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> useCustomImages;

    /**
     * @return Whether to use custom images
     * 
     */
    public Output<Optional<Boolean>> useCustomImages() {
        return Codegen.optional(this.useCustomImages);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ImageRegistry(java.lang.String name) {
        this(name, ImageRegistryArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ImageRegistry(java.lang.String name, ImageRegistryArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ImageRegistry(java.lang.String name, ImageRegistryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:chaos/imageRegistry:ImageRegistry", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ImageRegistry(java.lang.String name, Output<java.lang.String> id, @Nullable ImageRegistryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:chaos/imageRegistry:ImageRegistry", name, state, makeResourceOptions(options, id), false);
    }

    private static ImageRegistryArgs makeArgs(ImageRegistryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ImageRegistryArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ImageRegistry get(java.lang.String name, Output<java.lang.String> id, @Nullable ImageRegistryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ImageRegistry(name, id, state, options);
    }
}
