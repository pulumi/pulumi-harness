// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.harness.platform.outputs.GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory {
    /**
     * @return Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: &#39;{config.yaml,env-use2/*}&#39;
     * 
     */
    private @Nullable String exclude;
    /**
     * @return Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: &#39;{*.yml,*.yaml}&#39;
     * 
     */
    private @Nullable String include;
    /**
     * @return Jsonnet specific options.
     * 
     */
    private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet jsonnet;
    /**
     * @return Whether to scan a directory recursively for manifests.
     * 
     */
    private @Nullable Boolean recurse;

    private GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory() {}
    /**
     * @return Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: &#39;{config.yaml,env-use2/*}&#39;
     * 
     */
    public Optional<String> exclude() {
        return Optional.ofNullable(this.exclude);
    }
    /**
     * @return Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: &#39;{*.yml,*.yaml}&#39;
     * 
     */
    public Optional<String> include() {
        return Optional.ofNullable(this.include);
    }
    /**
     * @return Jsonnet specific options.
     * 
     */
    public Optional<GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet> jsonnet() {
        return Optional.ofNullable(this.jsonnet);
    }
    /**
     * @return Whether to scan a directory recursively for manifests.
     * 
     */
    public Optional<Boolean> recurse() {
        return Optional.ofNullable(this.recurse);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String exclude;
        private @Nullable String include;
        private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet jsonnet;
        private @Nullable Boolean recurse;
        public Builder() {}
        public Builder(GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exclude = defaults.exclude;
    	      this.include = defaults.include;
    	      this.jsonnet = defaults.jsonnet;
    	      this.recurse = defaults.recurse;
        }

        @CustomType.Setter
        public Builder exclude(@Nullable String exclude) {

            this.exclude = exclude;
            return this;
        }
        @CustomType.Setter
        public Builder include(@Nullable String include) {

            this.include = include;
            return this;
        }
        @CustomType.Setter
        public Builder jsonnet(@Nullable GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet jsonnet) {

            this.jsonnet = jsonnet;
            return this;
        }
        @CustomType.Setter
        public Builder recurse(@Nullable Boolean recurse) {

            this.recurse = recurse;
            return this;
        }
        public GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory build() {
            final var _resultValue = new GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory();
            _resultValue.exclude = exclude;
            _resultValue.include = include;
            _resultValue.jsonnet = jsonnet;
            _resultValue.recurse = recurse;
            return _resultValue;
        }
    }
}
