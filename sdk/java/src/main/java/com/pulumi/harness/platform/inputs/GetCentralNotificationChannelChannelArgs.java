// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GetCentralNotificationChannelChannelHeaderArgs;
import com.pulumi.harness.platform.inputs.GetCentralNotificationChannelChannelUserGroupArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCentralNotificationChannelChannelArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetCentralNotificationChannelChannelArgs Empty = new GetCentralNotificationChannelChannelArgs();

    /**
     * API key for the webhook or integration.
     * 
     */
    @Import(name="apiKey")
    private @Nullable Output<String> apiKey;

    /**
     * @return API key for the webhook or integration.
     * 
     */
    public Optional<Output<String>> apiKey() {
        return Optional.ofNullable(this.apiKey);
    }

    /**
     * List of Datadog webhook URLs.
     * 
     */
    @Import(name="datadogUrls")
    private @Nullable Output<List<String>> datadogUrls;

    /**
     * @return List of Datadog webhook URLs.
     * 
     */
    public Optional<Output<List<String>>> datadogUrls() {
        return Optional.ofNullable(this.datadogUrls);
    }

    /**
     * List of delegate selectors to use for sending notifications.
     * 
     */
    @Import(name="delegateSelectors")
    private @Nullable Output<List<String>> delegateSelectors;

    /**
     * @return List of delegate selectors to use for sending notifications.
     * 
     */
    public Optional<Output<List<String>>> delegateSelectors() {
        return Optional.ofNullable(this.delegateSelectors);
    }

    /**
     * List of email addresses to notify.
     * 
     */
    @Import(name="emailIds")
    private @Nullable Output<List<String>> emailIds;

    /**
     * @return List of email addresses to notify.
     * 
     */
    public Optional<Output<List<String>>> emailIds() {
        return Optional.ofNullable(this.emailIds);
    }

    /**
     * Whether to execute the notification logic on delegate.
     * 
     */
    @Import(name="executeOnDelegate")
    private @Nullable Output<Boolean> executeOnDelegate;

    /**
     * @return Whether to execute the notification logic on delegate.
     * 
     */
    public Optional<Output<Boolean>> executeOnDelegate() {
        return Optional.ofNullable(this.executeOnDelegate);
    }

    /**
     * Custom HTTP headers to include in webhook requests.
     * 
     */
    @Import(name="headers", required=true)
    private Output<List<GetCentralNotificationChannelChannelHeaderArgs>> headers;

    /**
     * @return Custom HTTP headers to include in webhook requests.
     * 
     */
    public Output<List<GetCentralNotificationChannelChannelHeaderArgs>> headers() {
        return this.headers;
    }

    /**
     * List of Microsoft Teams integration keys.
     * 
     */
    @Import(name="msTeamKeys")
    private @Nullable Output<List<String>> msTeamKeys;

    /**
     * @return List of Microsoft Teams integration keys.
     * 
     */
    public Optional<Output<List<String>>> msTeamKeys() {
        return Optional.ofNullable(this.msTeamKeys);
    }

    /**
     * List of PagerDuty integration keys.
     * 
     */
    @Import(name="pagerDutyIntegrationKeys")
    private @Nullable Output<List<String>> pagerDutyIntegrationKeys;

    /**
     * @return List of PagerDuty integration keys.
     * 
     */
    public Optional<Output<List<String>>> pagerDutyIntegrationKeys() {
        return Optional.ofNullable(this.pagerDutyIntegrationKeys);
    }

    /**
     * List of Slack webhook URLs to send notifications to.
     * 
     */
    @Import(name="slackWebhookUrls")
    private @Nullable Output<List<String>> slackWebhookUrls;

    /**
     * @return List of Slack webhook URLs to send notifications to.
     * 
     */
    public Optional<Output<List<String>>> slackWebhookUrls() {
        return Optional.ofNullable(this.slackWebhookUrls);
    }

    /**
     * List of user groups to notify.
     * 
     */
    @Import(name="userGroups")
    private @Nullable Output<List<GetCentralNotificationChannelChannelUserGroupArgs>> userGroups;

    /**
     * @return List of user groups to notify.
     * 
     */
    public Optional<Output<List<GetCentralNotificationChannelChannelUserGroupArgs>>> userGroups() {
        return Optional.ofNullable(this.userGroups);
    }

    /**
     * List of generic webhook URLs.
     * 
     */
    @Import(name="webhookUrls")
    private @Nullable Output<List<String>> webhookUrls;

    /**
     * @return List of generic webhook URLs.
     * 
     */
    public Optional<Output<List<String>>> webhookUrls() {
        return Optional.ofNullable(this.webhookUrls);
    }

    private GetCentralNotificationChannelChannelArgs() {}

    private GetCentralNotificationChannelChannelArgs(GetCentralNotificationChannelChannelArgs $) {
        this.apiKey = $.apiKey;
        this.datadogUrls = $.datadogUrls;
        this.delegateSelectors = $.delegateSelectors;
        this.emailIds = $.emailIds;
        this.executeOnDelegate = $.executeOnDelegate;
        this.headers = $.headers;
        this.msTeamKeys = $.msTeamKeys;
        this.pagerDutyIntegrationKeys = $.pagerDutyIntegrationKeys;
        this.slackWebhookUrls = $.slackWebhookUrls;
        this.userGroups = $.userGroups;
        this.webhookUrls = $.webhookUrls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCentralNotificationChannelChannelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCentralNotificationChannelChannelArgs $;

        public Builder() {
            $ = new GetCentralNotificationChannelChannelArgs();
        }

        public Builder(GetCentralNotificationChannelChannelArgs defaults) {
            $ = new GetCentralNotificationChannelChannelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKey API key for the webhook or integration.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(@Nullable Output<String> apiKey) {
            $.apiKey = apiKey;
            return this;
        }

        /**
         * @param apiKey API key for the webhook or integration.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(String apiKey) {
            return apiKey(Output.of(apiKey));
        }

        /**
         * @param datadogUrls List of Datadog webhook URLs.
         * 
         * @return builder
         * 
         */
        public Builder datadogUrls(@Nullable Output<List<String>> datadogUrls) {
            $.datadogUrls = datadogUrls;
            return this;
        }

        /**
         * @param datadogUrls List of Datadog webhook URLs.
         * 
         * @return builder
         * 
         */
        public Builder datadogUrls(List<String> datadogUrls) {
            return datadogUrls(Output.of(datadogUrls));
        }

        /**
         * @param datadogUrls List of Datadog webhook URLs.
         * 
         * @return builder
         * 
         */
        public Builder datadogUrls(String... datadogUrls) {
            return datadogUrls(List.of(datadogUrls));
        }

        /**
         * @param delegateSelectors List of delegate selectors to use for sending notifications.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(@Nullable Output<List<String>> delegateSelectors) {
            $.delegateSelectors = delegateSelectors;
            return this;
        }

        /**
         * @param delegateSelectors List of delegate selectors to use for sending notifications.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(List<String> delegateSelectors) {
            return delegateSelectors(Output.of(delegateSelectors));
        }

        /**
         * @param delegateSelectors List of delegate selectors to use for sending notifications.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(String... delegateSelectors) {
            return delegateSelectors(List.of(delegateSelectors));
        }

        /**
         * @param emailIds List of email addresses to notify.
         * 
         * @return builder
         * 
         */
        public Builder emailIds(@Nullable Output<List<String>> emailIds) {
            $.emailIds = emailIds;
            return this;
        }

        /**
         * @param emailIds List of email addresses to notify.
         * 
         * @return builder
         * 
         */
        public Builder emailIds(List<String> emailIds) {
            return emailIds(Output.of(emailIds));
        }

        /**
         * @param emailIds List of email addresses to notify.
         * 
         * @return builder
         * 
         */
        public Builder emailIds(String... emailIds) {
            return emailIds(List.of(emailIds));
        }

        /**
         * @param executeOnDelegate Whether to execute the notification logic on delegate.
         * 
         * @return builder
         * 
         */
        public Builder executeOnDelegate(@Nullable Output<Boolean> executeOnDelegate) {
            $.executeOnDelegate = executeOnDelegate;
            return this;
        }

        /**
         * @param executeOnDelegate Whether to execute the notification logic on delegate.
         * 
         * @return builder
         * 
         */
        public Builder executeOnDelegate(Boolean executeOnDelegate) {
            return executeOnDelegate(Output.of(executeOnDelegate));
        }

        /**
         * @param headers Custom HTTP headers to include in webhook requests.
         * 
         * @return builder
         * 
         */
        public Builder headers(Output<List<GetCentralNotificationChannelChannelHeaderArgs>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers Custom HTTP headers to include in webhook requests.
         * 
         * @return builder
         * 
         */
        public Builder headers(List<GetCentralNotificationChannelChannelHeaderArgs> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param headers Custom HTTP headers to include in webhook requests.
         * 
         * @return builder
         * 
         */
        public Builder headers(GetCentralNotificationChannelChannelHeaderArgs... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param msTeamKeys List of Microsoft Teams integration keys.
         * 
         * @return builder
         * 
         */
        public Builder msTeamKeys(@Nullable Output<List<String>> msTeamKeys) {
            $.msTeamKeys = msTeamKeys;
            return this;
        }

        /**
         * @param msTeamKeys List of Microsoft Teams integration keys.
         * 
         * @return builder
         * 
         */
        public Builder msTeamKeys(List<String> msTeamKeys) {
            return msTeamKeys(Output.of(msTeamKeys));
        }

        /**
         * @param msTeamKeys List of Microsoft Teams integration keys.
         * 
         * @return builder
         * 
         */
        public Builder msTeamKeys(String... msTeamKeys) {
            return msTeamKeys(List.of(msTeamKeys));
        }

        /**
         * @param pagerDutyIntegrationKeys List of PagerDuty integration keys.
         * 
         * @return builder
         * 
         */
        public Builder pagerDutyIntegrationKeys(@Nullable Output<List<String>> pagerDutyIntegrationKeys) {
            $.pagerDutyIntegrationKeys = pagerDutyIntegrationKeys;
            return this;
        }

        /**
         * @param pagerDutyIntegrationKeys List of PagerDuty integration keys.
         * 
         * @return builder
         * 
         */
        public Builder pagerDutyIntegrationKeys(List<String> pagerDutyIntegrationKeys) {
            return pagerDutyIntegrationKeys(Output.of(pagerDutyIntegrationKeys));
        }

        /**
         * @param pagerDutyIntegrationKeys List of PagerDuty integration keys.
         * 
         * @return builder
         * 
         */
        public Builder pagerDutyIntegrationKeys(String... pagerDutyIntegrationKeys) {
            return pagerDutyIntegrationKeys(List.of(pagerDutyIntegrationKeys));
        }

        /**
         * @param slackWebhookUrls List of Slack webhook URLs to send notifications to.
         * 
         * @return builder
         * 
         */
        public Builder slackWebhookUrls(@Nullable Output<List<String>> slackWebhookUrls) {
            $.slackWebhookUrls = slackWebhookUrls;
            return this;
        }

        /**
         * @param slackWebhookUrls List of Slack webhook URLs to send notifications to.
         * 
         * @return builder
         * 
         */
        public Builder slackWebhookUrls(List<String> slackWebhookUrls) {
            return slackWebhookUrls(Output.of(slackWebhookUrls));
        }

        /**
         * @param slackWebhookUrls List of Slack webhook URLs to send notifications to.
         * 
         * @return builder
         * 
         */
        public Builder slackWebhookUrls(String... slackWebhookUrls) {
            return slackWebhookUrls(List.of(slackWebhookUrls));
        }

        /**
         * @param userGroups List of user groups to notify.
         * 
         * @return builder
         * 
         */
        public Builder userGroups(@Nullable Output<List<GetCentralNotificationChannelChannelUserGroupArgs>> userGroups) {
            $.userGroups = userGroups;
            return this;
        }

        /**
         * @param userGroups List of user groups to notify.
         * 
         * @return builder
         * 
         */
        public Builder userGroups(List<GetCentralNotificationChannelChannelUserGroupArgs> userGroups) {
            return userGroups(Output.of(userGroups));
        }

        /**
         * @param userGroups List of user groups to notify.
         * 
         * @return builder
         * 
         */
        public Builder userGroups(GetCentralNotificationChannelChannelUserGroupArgs... userGroups) {
            return userGroups(List.of(userGroups));
        }

        /**
         * @param webhookUrls List of generic webhook URLs.
         * 
         * @return builder
         * 
         */
        public Builder webhookUrls(@Nullable Output<List<String>> webhookUrls) {
            $.webhookUrls = webhookUrls;
            return this;
        }

        /**
         * @param webhookUrls List of generic webhook URLs.
         * 
         * @return builder
         * 
         */
        public Builder webhookUrls(List<String> webhookUrls) {
            return webhookUrls(Output.of(webhookUrls));
        }

        /**
         * @param webhookUrls List of generic webhook URLs.
         * 
         * @return builder
         * 
         */
        public Builder webhookUrls(String... webhookUrls) {
            return webhookUrls(List.of(webhookUrls));
        }

        public GetCentralNotificationChannelChannelArgs build() {
            if ($.headers == null) {
                throw new MissingRequiredPropertyException("GetCentralNotificationChannelChannelArgs", "headers");
            }
            return $;
        }
    }

}
