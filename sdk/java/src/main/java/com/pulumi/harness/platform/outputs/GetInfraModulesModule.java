// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInfraModulesModule {
    /**
     * @return Account that owns the module
     * 
     */
    private String account;
    /**
     * @return Timestamp when the module was created
     * 
     */
    private Integer created;
    /**
     * @return Description of the module
     * 
     */
    private String description;
    /**
     * @return Identifier of the module
     * 
     */
    private String id;
    /**
     * @return Name of the module
     * 
     */
    private String name;
    /**
     * @return Organization that owns the module
     * 
     */
    private String org;
    /**
     * @return Project that owns the module
     * 
     */
    private String project;
    /**
     * @return Repository where the module is stored
     * 
     */
    private String repository;
    /**
     * @return Repository branch
     * 
     */
    private String repositoryBranch;
    /**
     * @return Repository commit
     * 
     */
    private String repositoryCommit;
    /**
     * @return Repository connector reference
     * 
     */
    private String repositoryConnector;
    /**
     * @return Path within repository
     * 
     */
    private String repositoryPath;
    /**
     * @return Repository URL
     * 
     */
    private String repositoryUrl;
    /**
     * @return Timestamp when the module was last synced
     * 
     */
    private Integer synced;
    /**
     * @return Provider of the module
     * 
     */
    private String system;
    /**
     * @return Tags associated with the module
     * 
     */
    private String tags;
    /**
     * @return Whether testing is enabled for the module
     * 
     */
    private Boolean testingEnabled;
    /**
     * @return Timestamp when the module was last modified
     * 
     */
    private Integer updated;

    private GetInfraModulesModule() {}
    /**
     * @return Account that owns the module
     * 
     */
    public String account() {
        return this.account;
    }
    /**
     * @return Timestamp when the module was created
     * 
     */
    public Integer created() {
        return this.created;
    }
    /**
     * @return Description of the module
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Identifier of the module
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Name of the module
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Organization that owns the module
     * 
     */
    public String org() {
        return this.org;
    }
    /**
     * @return Project that owns the module
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return Repository where the module is stored
     * 
     */
    public String repository() {
        return this.repository;
    }
    /**
     * @return Repository branch
     * 
     */
    public String repositoryBranch() {
        return this.repositoryBranch;
    }
    /**
     * @return Repository commit
     * 
     */
    public String repositoryCommit() {
        return this.repositoryCommit;
    }
    /**
     * @return Repository connector reference
     * 
     */
    public String repositoryConnector() {
        return this.repositoryConnector;
    }
    /**
     * @return Path within repository
     * 
     */
    public String repositoryPath() {
        return this.repositoryPath;
    }
    /**
     * @return Repository URL
     * 
     */
    public String repositoryUrl() {
        return this.repositoryUrl;
    }
    /**
     * @return Timestamp when the module was last synced
     * 
     */
    public Integer synced() {
        return this.synced;
    }
    /**
     * @return Provider of the module
     * 
     */
    public String system() {
        return this.system;
    }
    /**
     * @return Tags associated with the module
     * 
     */
    public String tags() {
        return this.tags;
    }
    /**
     * @return Whether testing is enabled for the module
     * 
     */
    public Boolean testingEnabled() {
        return this.testingEnabled;
    }
    /**
     * @return Timestamp when the module was last modified
     * 
     */
    public Integer updated() {
        return this.updated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInfraModulesModule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String account;
        private Integer created;
        private String description;
        private String id;
        private String name;
        private String org;
        private String project;
        private String repository;
        private String repositoryBranch;
        private String repositoryCommit;
        private String repositoryConnector;
        private String repositoryPath;
        private String repositoryUrl;
        private Integer synced;
        private String system;
        private String tags;
        private Boolean testingEnabled;
        private Integer updated;
        public Builder() {}
        public Builder(GetInfraModulesModule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.account = defaults.account;
    	      this.created = defaults.created;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.org = defaults.org;
    	      this.project = defaults.project;
    	      this.repository = defaults.repository;
    	      this.repositoryBranch = defaults.repositoryBranch;
    	      this.repositoryCommit = defaults.repositoryCommit;
    	      this.repositoryConnector = defaults.repositoryConnector;
    	      this.repositoryPath = defaults.repositoryPath;
    	      this.repositoryUrl = defaults.repositoryUrl;
    	      this.synced = defaults.synced;
    	      this.system = defaults.system;
    	      this.tags = defaults.tags;
    	      this.testingEnabled = defaults.testingEnabled;
    	      this.updated = defaults.updated;
        }

        @CustomType.Setter
        public Builder account(String account) {
            if (account == null) {
              throw new MissingRequiredPropertyException("GetInfraModulesModule", "account");
            }
            this.account = account;
            return this;
        }
        @CustomType.Setter
        public Builder created(Integer created) {
            if (created == null) {
              throw new MissingRequiredPropertyException("GetInfraModulesModule", "created");
            }
            this.created = created;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetInfraModulesModule", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInfraModulesModule", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetInfraModulesModule", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder org(String org) {
            if (org == null) {
              throw new MissingRequiredPropertyException("GetInfraModulesModule", "org");
            }
            this.org = org;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetInfraModulesModule", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder repository(String repository) {
            if (repository == null) {
              throw new MissingRequiredPropertyException("GetInfraModulesModule", "repository");
            }
            this.repository = repository;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryBranch(String repositoryBranch) {
            if (repositoryBranch == null) {
              throw new MissingRequiredPropertyException("GetInfraModulesModule", "repositoryBranch");
            }
            this.repositoryBranch = repositoryBranch;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryCommit(String repositoryCommit) {
            if (repositoryCommit == null) {
              throw new MissingRequiredPropertyException("GetInfraModulesModule", "repositoryCommit");
            }
            this.repositoryCommit = repositoryCommit;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryConnector(String repositoryConnector) {
            if (repositoryConnector == null) {
              throw new MissingRequiredPropertyException("GetInfraModulesModule", "repositoryConnector");
            }
            this.repositoryConnector = repositoryConnector;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryPath(String repositoryPath) {
            if (repositoryPath == null) {
              throw new MissingRequiredPropertyException("GetInfraModulesModule", "repositoryPath");
            }
            this.repositoryPath = repositoryPath;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryUrl(String repositoryUrl) {
            if (repositoryUrl == null) {
              throw new MissingRequiredPropertyException("GetInfraModulesModule", "repositoryUrl");
            }
            this.repositoryUrl = repositoryUrl;
            return this;
        }
        @CustomType.Setter
        public Builder synced(Integer synced) {
            if (synced == null) {
              throw new MissingRequiredPropertyException("GetInfraModulesModule", "synced");
            }
            this.synced = synced;
            return this;
        }
        @CustomType.Setter
        public Builder system(String system) {
            if (system == null) {
              throw new MissingRequiredPropertyException("GetInfraModulesModule", "system");
            }
            this.system = system;
            return this;
        }
        @CustomType.Setter
        public Builder tags(String tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetInfraModulesModule", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder testingEnabled(Boolean testingEnabled) {
            if (testingEnabled == null) {
              throw new MissingRequiredPropertyException("GetInfraModulesModule", "testingEnabled");
            }
            this.testingEnabled = testingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder updated(Integer updated) {
            if (updated == null) {
              throw new MissingRequiredPropertyException("GetInfraModulesModule", "updated");
            }
            this.updated = updated;
            return this;
        }
        public GetInfraModulesModule build() {
            final var _resultValue = new GetInfraModulesModule();
            _resultValue.account = account;
            _resultValue.created = created;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.org = org;
            _resultValue.project = project;
            _resultValue.repository = repository;
            _resultValue.repositoryBranch = repositoryBranch;
            _resultValue.repositoryCommit = repositoryCommit;
            _resultValue.repositoryConnector = repositoryConnector;
            _resultValue.repositoryPath = repositoryPath;
            _resultValue.repositoryUrl = repositoryUrl;
            _resultValue.synced = synced;
            _resultValue.system = system;
            _resultValue.tags = tags;
            _resultValue.testingEnabled = testingEnabled;
            _resultValue.updated = updated;
            return _resultValue;
        }
    }
}
