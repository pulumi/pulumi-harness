// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.CentralNotificationChannelChannelArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CentralNotificationChannelArgs extends com.pulumi.resources.ResourceArgs {

    public static final CentralNotificationChannelArgs Empty = new CentralNotificationChannelArgs();

    @Import(name="channel", required=true)
    private Output<CentralNotificationChannelChannelArgs> channel;

    public Output<CentralNotificationChannelChannelArgs> channel() {
        return this.channel;
    }

    @Import(name="identifier", required=true)
    private Output<String> identifier;

    public Output<String> identifier() {
        return this.identifier;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="notificationChannelType", required=true)
    private Output<String> notificationChannelType;

    public Output<String> notificationChannelType() {
        return this.notificationChannelType;
    }

    @Import(name="org")
    private @Nullable Output<String> org;

    public Optional<Output<String>> org() {
        return Optional.ofNullable(this.org);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private CentralNotificationChannelArgs() {}

    private CentralNotificationChannelArgs(CentralNotificationChannelArgs $) {
        this.channel = $.channel;
        this.identifier = $.identifier;
        this.name = $.name;
        this.notificationChannelType = $.notificationChannelType;
        this.org = $.org;
        this.project = $.project;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CentralNotificationChannelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CentralNotificationChannelArgs $;

        public Builder() {
            $ = new CentralNotificationChannelArgs();
        }

        public Builder(CentralNotificationChannelArgs defaults) {
            $ = new CentralNotificationChannelArgs(Objects.requireNonNull(defaults));
        }

        public Builder channel(Output<CentralNotificationChannelChannelArgs> channel) {
            $.channel = channel;
            return this;
        }

        public Builder channel(CentralNotificationChannelChannelArgs channel) {
            return channel(Output.of(channel));
        }

        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder notificationChannelType(Output<String> notificationChannelType) {
            $.notificationChannelType = notificationChannelType;
            return this;
        }

        public Builder notificationChannelType(String notificationChannelType) {
            return notificationChannelType(Output.of(notificationChannelType));
        }

        public Builder org(@Nullable Output<String> org) {
            $.org = org;
            return this;
        }

        public Builder org(String org) {
            return org(Output.of(org));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public CentralNotificationChannelArgs build() {
            if ($.channel == null) {
                throw new MissingRequiredPropertyException("CentralNotificationChannelArgs", "channel");
            }
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("CentralNotificationChannelArgs", "identifier");
            }
            if ($.notificationChannelType == null) {
                throw new MissingRequiredPropertyException("CentralNotificationChannelArgs", "notificationChannelType");
            }
            return $;
        }
    }

}
