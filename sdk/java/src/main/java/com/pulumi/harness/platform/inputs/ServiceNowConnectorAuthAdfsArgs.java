// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ServiceNowConnectorAuthAdfsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceNowConnectorAuthAdfsArgs Empty = new ServiceNowConnectorAuthAdfsArgs();

    /**
     * asdf URL.
     * 
     */
    @Import(name="adfsUrl", required=true)
    private Output<String> adfsUrl;

    /**
     * @return asdf URL.
     * 
     */
    public Output<String> adfsUrl() {
        return this.adfsUrl;
    }

    /**
     * Reference to a secret containing the certificate to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    @Import(name="certificateRef", required=true)
    private Output<String> certificateRef;

    /**
     * @return Reference to a secret containing the certificate to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public Output<String> certificateRef() {
        return this.certificateRef;
    }

    /**
     * Reference to a secret containing the clientIdRef to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    @Import(name="clientIdRef", required=true)
    private Output<String> clientIdRef;

    /**
     * @return Reference to a secret containing the clientIdRef to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public Output<String> clientIdRef() {
        return this.clientIdRef;
    }

    /**
     * Reference to a secret containing the privateKeyRef to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    @Import(name="privateKeyRef", required=true)
    private Output<String> privateKeyRef;

    /**
     * @return Reference to a secret containing the privateKeyRef to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public Output<String> privateKeyRef() {
        return this.privateKeyRef;
    }

    /**
     * Reference to a secret containing the resourceIdRef to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    @Import(name="resourceIdRef", required=true)
    private Output<String> resourceIdRef;

    /**
     * @return Reference to a secret containing the resourceIdRef to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public Output<String> resourceIdRef() {
        return this.resourceIdRef;
    }

    private ServiceNowConnectorAuthAdfsArgs() {}

    private ServiceNowConnectorAuthAdfsArgs(ServiceNowConnectorAuthAdfsArgs $) {
        this.adfsUrl = $.adfsUrl;
        this.certificateRef = $.certificateRef;
        this.clientIdRef = $.clientIdRef;
        this.privateKeyRef = $.privateKeyRef;
        this.resourceIdRef = $.resourceIdRef;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceNowConnectorAuthAdfsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceNowConnectorAuthAdfsArgs $;

        public Builder() {
            $ = new ServiceNowConnectorAuthAdfsArgs();
        }

        public Builder(ServiceNowConnectorAuthAdfsArgs defaults) {
            $ = new ServiceNowConnectorAuthAdfsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adfsUrl asdf URL.
         * 
         * @return builder
         * 
         */
        public Builder adfsUrl(Output<String> adfsUrl) {
            $.adfsUrl = adfsUrl;
            return this;
        }

        /**
         * @param adfsUrl asdf URL.
         * 
         * @return builder
         * 
         */
        public Builder adfsUrl(String adfsUrl) {
            return adfsUrl(Output.of(adfsUrl));
        }

        /**
         * @param certificateRef Reference to a secret containing the certificate to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder certificateRef(Output<String> certificateRef) {
            $.certificateRef = certificateRef;
            return this;
        }

        /**
         * @param certificateRef Reference to a secret containing the certificate to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder certificateRef(String certificateRef) {
            return certificateRef(Output.of(certificateRef));
        }

        /**
         * @param clientIdRef Reference to a secret containing the clientIdRef to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder clientIdRef(Output<String> clientIdRef) {
            $.clientIdRef = clientIdRef;
            return this;
        }

        /**
         * @param clientIdRef Reference to a secret containing the clientIdRef to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder clientIdRef(String clientIdRef) {
            return clientIdRef(Output.of(clientIdRef));
        }

        /**
         * @param privateKeyRef Reference to a secret containing the privateKeyRef to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyRef(Output<String> privateKeyRef) {
            $.privateKeyRef = privateKeyRef;
            return this;
        }

        /**
         * @param privateKeyRef Reference to a secret containing the privateKeyRef to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyRef(String privateKeyRef) {
            return privateKeyRef(Output.of(privateKeyRef));
        }

        /**
         * @param resourceIdRef Reference to a secret containing the resourceIdRef to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder resourceIdRef(Output<String> resourceIdRef) {
            $.resourceIdRef = resourceIdRef;
            return this;
        }

        /**
         * @param resourceIdRef Reference to a secret containing the resourceIdRef to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder resourceIdRef(String resourceIdRef) {
            return resourceIdRef(Output.of(resourceIdRef));
        }

        public ServiceNowConnectorAuthAdfsArgs build() {
            if ($.adfsUrl == null) {
                throw new MissingRequiredPropertyException("ServiceNowConnectorAuthAdfsArgs", "adfsUrl");
            }
            if ($.certificateRef == null) {
                throw new MissingRequiredPropertyException("ServiceNowConnectorAuthAdfsArgs", "certificateRef");
            }
            if ($.clientIdRef == null) {
                throw new MissingRequiredPropertyException("ServiceNowConnectorAuthAdfsArgs", "clientIdRef");
            }
            if ($.privateKeyRef == null) {
                throw new MissingRequiredPropertyException("ServiceNowConnectorAuthAdfsArgs", "privateKeyRef");
            }
            if ($.resourceIdRef == null) {
                throw new MissingRequiredPropertyException("ServiceNowConnectorAuthAdfsArgs", "resourceIdRef");
            }
            return $;
        }
    }

}
