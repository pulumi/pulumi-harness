// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetGitopsRepoCredCred {
    /**
     * @return Specifies whether helm-oci support should be enabled for this repo.
     * 
     */
    private Boolean enableOci;
    /**
     * @return Specifies the GitHub API URL for GitHub app authentication.
     * 
     */
    private String githubAppEnterpriseBaseUrl;
    /**
     * @return Specifies the Github App ID of the app used to access the repo for GitHub app authentication.
     * 
     */
    private String githubAppId;
    /**
     * @return Specifies the ID of the installed GitHub App for GitHub app authentication.
     * 
     */
    private String githubAppInstallationId;
    /**
     * @return github*app*private_key specifies the private key PEM data for authentication via GitHub app.
     * 
     */
    private String githubAppPrivateKey;
    /**
     * @return Password or PAT to be used for authenticating the remote repository.
     * 
     */
    private String password;
    /**
     * @return SSH Key in PEM format for authenticating the repository. Used only for Git repository.
     * 
     */
    private String sshPrivateKey;
    /**
     * @return Certificate in PEM format for authenticating at the repo server. This is used for mTLS.
     * 
     */
    private String tlsClientCertData;
    /**
     * @return Private key in PEM format for authenticating at the repo server. This is used for mTLS.
     * 
     */
    private String tlsClientCertKey;
    /**
     * @return Type specifies the type of the repoCreds.Can be either &#39;git&#39; or &#39;helm. &#39;git&#39; is assumed if empty or absent
     * 
     */
    private String type;
    /**
     * @return URL of the remote repository. Make sure you pass at least an org, this will not work if you just provide the host, for eg. &#34;https://github.com&#34;
     * 
     */
    private String url;
    /**
     * @return Username to be used for authenticating the remote repository.
     * 
     */
    private String username;

    private GetGitopsRepoCredCred() {}
    /**
     * @return Specifies whether helm-oci support should be enabled for this repo.
     * 
     */
    public Boolean enableOci() {
        return this.enableOci;
    }
    /**
     * @return Specifies the GitHub API URL for GitHub app authentication.
     * 
     */
    public String githubAppEnterpriseBaseUrl() {
        return this.githubAppEnterpriseBaseUrl;
    }
    /**
     * @return Specifies the Github App ID of the app used to access the repo for GitHub app authentication.
     * 
     */
    public String githubAppId() {
        return this.githubAppId;
    }
    /**
     * @return Specifies the ID of the installed GitHub App for GitHub app authentication.
     * 
     */
    public String githubAppInstallationId() {
        return this.githubAppInstallationId;
    }
    /**
     * @return github*app*private_key specifies the private key PEM data for authentication via GitHub app.
     * 
     */
    public String githubAppPrivateKey() {
        return this.githubAppPrivateKey;
    }
    /**
     * @return Password or PAT to be used for authenticating the remote repository.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return SSH Key in PEM format for authenticating the repository. Used only for Git repository.
     * 
     */
    public String sshPrivateKey() {
        return this.sshPrivateKey;
    }
    /**
     * @return Certificate in PEM format for authenticating at the repo server. This is used for mTLS.
     * 
     */
    public String tlsClientCertData() {
        return this.tlsClientCertData;
    }
    /**
     * @return Private key in PEM format for authenticating at the repo server. This is used for mTLS.
     * 
     */
    public String tlsClientCertKey() {
        return this.tlsClientCertKey;
    }
    /**
     * @return Type specifies the type of the repoCreds.Can be either &#39;git&#39; or &#39;helm. &#39;git&#39; is assumed if empty or absent
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return URL of the remote repository. Make sure you pass at least an org, this will not work if you just provide the host, for eg. &#34;https://github.com&#34;
     * 
     */
    public String url() {
        return this.url;
    }
    /**
     * @return Username to be used for authenticating the remote repository.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGitopsRepoCredCred defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean enableOci;
        private String githubAppEnterpriseBaseUrl;
        private String githubAppId;
        private String githubAppInstallationId;
        private String githubAppPrivateKey;
        private String password;
        private String sshPrivateKey;
        private String tlsClientCertData;
        private String tlsClientCertKey;
        private String type;
        private String url;
        private String username;
        public Builder() {}
        public Builder(GetGitopsRepoCredCred defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableOci = defaults.enableOci;
    	      this.githubAppEnterpriseBaseUrl = defaults.githubAppEnterpriseBaseUrl;
    	      this.githubAppId = defaults.githubAppId;
    	      this.githubAppInstallationId = defaults.githubAppInstallationId;
    	      this.githubAppPrivateKey = defaults.githubAppPrivateKey;
    	      this.password = defaults.password;
    	      this.sshPrivateKey = defaults.sshPrivateKey;
    	      this.tlsClientCertData = defaults.tlsClientCertData;
    	      this.tlsClientCertKey = defaults.tlsClientCertKey;
    	      this.type = defaults.type;
    	      this.url = defaults.url;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder enableOci(Boolean enableOci) {
            if (enableOci == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepoCredCred", "enableOci");
            }
            this.enableOci = enableOci;
            return this;
        }
        @CustomType.Setter
        public Builder githubAppEnterpriseBaseUrl(String githubAppEnterpriseBaseUrl) {
            if (githubAppEnterpriseBaseUrl == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepoCredCred", "githubAppEnterpriseBaseUrl");
            }
            this.githubAppEnterpriseBaseUrl = githubAppEnterpriseBaseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder githubAppId(String githubAppId) {
            if (githubAppId == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepoCredCred", "githubAppId");
            }
            this.githubAppId = githubAppId;
            return this;
        }
        @CustomType.Setter
        public Builder githubAppInstallationId(String githubAppInstallationId) {
            if (githubAppInstallationId == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepoCredCred", "githubAppInstallationId");
            }
            this.githubAppInstallationId = githubAppInstallationId;
            return this;
        }
        @CustomType.Setter
        public Builder githubAppPrivateKey(String githubAppPrivateKey) {
            if (githubAppPrivateKey == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepoCredCred", "githubAppPrivateKey");
            }
            this.githubAppPrivateKey = githubAppPrivateKey;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepoCredCred", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder sshPrivateKey(String sshPrivateKey) {
            if (sshPrivateKey == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepoCredCred", "sshPrivateKey");
            }
            this.sshPrivateKey = sshPrivateKey;
            return this;
        }
        @CustomType.Setter
        public Builder tlsClientCertData(String tlsClientCertData) {
            if (tlsClientCertData == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepoCredCred", "tlsClientCertData");
            }
            this.tlsClientCertData = tlsClientCertData;
            return this;
        }
        @CustomType.Setter
        public Builder tlsClientCertKey(String tlsClientCertKey) {
            if (tlsClientCertKey == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepoCredCred", "tlsClientCertKey");
            }
            this.tlsClientCertKey = tlsClientCertKey;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepoCredCred", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepoCredCred", "url");
            }
            this.url = url;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepoCredCred", "username");
            }
            this.username = username;
            return this;
        }
        public GetGitopsRepoCredCred build() {
            final var _resultValue = new GetGitopsRepoCredCred();
            _resultValue.enableOci = enableOci;
            _resultValue.githubAppEnterpriseBaseUrl = githubAppEnterpriseBaseUrl;
            _resultValue.githubAppId = githubAppId;
            _resultValue.githubAppInstallationId = githubAppInstallationId;
            _resultValue.githubAppPrivateKey = githubAppPrivateKey;
            _resultValue.password = password;
            _resultValue.sshPrivateKey = sshPrivateKey;
            _resultValue.tlsClientCertData = tlsClientCertData;
            _resultValue.tlsClientCertKey = tlsClientCertKey;
            _resultValue.type = type;
            _resultValue.url = url;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
