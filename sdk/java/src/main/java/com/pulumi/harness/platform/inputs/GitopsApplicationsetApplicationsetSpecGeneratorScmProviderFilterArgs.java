// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsApplicationsetApplicationsetSpecGeneratorScmProviderFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsApplicationsetApplicationsetSpecGeneratorScmProviderFilterArgs Empty = new GitopsApplicationsetApplicationsetSpecGeneratorScmProviderFilterArgs();

    /**
     * A regex which must match the branch name.
     * 
     */
    @Import(name="branchMatch")
    private @Nullable Output<String> branchMatch;

    /**
     * @return A regex which must match the branch name.
     * 
     */
    public Optional<Output<String>> branchMatch() {
        return Optional.ofNullable(this.branchMatch);
    }

    /**
     * A regex which must match at least one label.
     * 
     */
    @Import(name="labelMatch")
    private @Nullable Output<String> labelMatch;

    /**
     * @return A regex which must match at least one label.
     * 
     */
    public Optional<Output<String>> labelMatch() {
        return Optional.ofNullable(this.labelMatch);
    }

    /**
     * An array of paths, all of which must not exist.
     * 
     */
    @Import(name="pathsDoNotExists")
    private @Nullable Output<List<String>> pathsDoNotExists;

    /**
     * @return An array of paths, all of which must not exist.
     * 
     */
    public Optional<Output<List<String>>> pathsDoNotExists() {
        return Optional.ofNullable(this.pathsDoNotExists);
    }

    /**
     * An array of paths, all of which must exist.
     * 
     */
    @Import(name="pathsExists")
    private @Nullable Output<List<String>> pathsExists;

    /**
     * @return An array of paths, all of which must exist.
     * 
     */
    public Optional<Output<List<String>>> pathsExists() {
        return Optional.ofNullable(this.pathsExists);
    }

    /**
     * A regex for repo names.
     * 
     */
    @Import(name="repositoryMatch")
    private @Nullable Output<String> repositoryMatch;

    /**
     * @return A regex for repo names.
     * 
     */
    public Optional<Output<String>> repositoryMatch() {
        return Optional.ofNullable(this.repositoryMatch);
    }

    private GitopsApplicationsetApplicationsetSpecGeneratorScmProviderFilterArgs() {}

    private GitopsApplicationsetApplicationsetSpecGeneratorScmProviderFilterArgs(GitopsApplicationsetApplicationsetSpecGeneratorScmProviderFilterArgs $) {
        this.branchMatch = $.branchMatch;
        this.labelMatch = $.labelMatch;
        this.pathsDoNotExists = $.pathsDoNotExists;
        this.pathsExists = $.pathsExists;
        this.repositoryMatch = $.repositoryMatch;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsApplicationsetApplicationsetSpecGeneratorScmProviderFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsApplicationsetApplicationsetSpecGeneratorScmProviderFilterArgs $;

        public Builder() {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorScmProviderFilterArgs();
        }

        public Builder(GitopsApplicationsetApplicationsetSpecGeneratorScmProviderFilterArgs defaults) {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorScmProviderFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branchMatch A regex which must match the branch name.
         * 
         * @return builder
         * 
         */
        public Builder branchMatch(@Nullable Output<String> branchMatch) {
            $.branchMatch = branchMatch;
            return this;
        }

        /**
         * @param branchMatch A regex which must match the branch name.
         * 
         * @return builder
         * 
         */
        public Builder branchMatch(String branchMatch) {
            return branchMatch(Output.of(branchMatch));
        }

        /**
         * @param labelMatch A regex which must match at least one label.
         * 
         * @return builder
         * 
         */
        public Builder labelMatch(@Nullable Output<String> labelMatch) {
            $.labelMatch = labelMatch;
            return this;
        }

        /**
         * @param labelMatch A regex which must match at least one label.
         * 
         * @return builder
         * 
         */
        public Builder labelMatch(String labelMatch) {
            return labelMatch(Output.of(labelMatch));
        }

        /**
         * @param pathsDoNotExists An array of paths, all of which must not exist.
         * 
         * @return builder
         * 
         */
        public Builder pathsDoNotExists(@Nullable Output<List<String>> pathsDoNotExists) {
            $.pathsDoNotExists = pathsDoNotExists;
            return this;
        }

        /**
         * @param pathsDoNotExists An array of paths, all of which must not exist.
         * 
         * @return builder
         * 
         */
        public Builder pathsDoNotExists(List<String> pathsDoNotExists) {
            return pathsDoNotExists(Output.of(pathsDoNotExists));
        }

        /**
         * @param pathsDoNotExists An array of paths, all of which must not exist.
         * 
         * @return builder
         * 
         */
        public Builder pathsDoNotExists(String... pathsDoNotExists) {
            return pathsDoNotExists(List.of(pathsDoNotExists));
        }

        /**
         * @param pathsExists An array of paths, all of which must exist.
         * 
         * @return builder
         * 
         */
        public Builder pathsExists(@Nullable Output<List<String>> pathsExists) {
            $.pathsExists = pathsExists;
            return this;
        }

        /**
         * @param pathsExists An array of paths, all of which must exist.
         * 
         * @return builder
         * 
         */
        public Builder pathsExists(List<String> pathsExists) {
            return pathsExists(Output.of(pathsExists));
        }

        /**
         * @param pathsExists An array of paths, all of which must exist.
         * 
         * @return builder
         * 
         */
        public Builder pathsExists(String... pathsExists) {
            return pathsExists(List.of(pathsExists));
        }

        /**
         * @param repositoryMatch A regex for repo names.
         * 
         * @return builder
         * 
         */
        public Builder repositoryMatch(@Nullable Output<String> repositoryMatch) {
            $.repositoryMatch = repositoryMatch;
            return this;
        }

        /**
         * @param repositoryMatch A regex for repo names.
         * 
         * @return builder
         * 
         */
        public Builder repositoryMatch(String repositoryMatch) {
            return repositoryMatch(Output.of(repositoryMatch));
        }

        public GitopsApplicationsetApplicationsetSpecGeneratorScmProviderFilterArgs build() {
            return $;
        }
    }

}
