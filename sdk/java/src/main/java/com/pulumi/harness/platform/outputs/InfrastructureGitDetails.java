// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InfrastructureGitDetails {
    /**
     * @return Name of the default branch (this checks out a new branch titled by branch_name).
     * 
     */
    private @Nullable String baseBranch;
    /**
     * @return Name of the branch.
     * 
     */
    private @Nullable String branch;
    /**
     * @return Commit message used for the merge commit.
     * 
     */
    private @Nullable String commitMessage;
    /**
     * @return Identifier of the Harness Connector used for CRUD operations on the Entity. To reference a connector at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a connector at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    private @Nullable String connectorRef;
    /**
     * @return File path of the Entity in the repository.
     * 
     */
    private @Nullable String filePath;
    /**
     * @return import infrastructure from git
     * 
     */
    private @Nullable Boolean importFromGit;
    /**
     * @return force import infrastructure from remote even if same file path already exist
     * 
     */
    private @Nullable Boolean isForceImport;
    /**
     * @return If the gitProvider is HarnessCode
     * 
     */
    private @Nullable Boolean isHarnesscodeRepo;
    /**
     * @return If a new branch creation is requested.
     * 
     */
    private @Nullable Boolean isNewBranch;
    /**
     * @return Last commit identifier (for Git Repositories other than Github). To be provided only when updating infrastructure.
     * 
     */
    private @Nullable String lastCommitId;
    /**
     * @return Last object identifier (for Github). To be provided only when updating infrastructure.
     * 
     */
    private @Nullable String lastObjectId;
    /**
     * @return If the Entity is to be fetched from cache
     * 
     */
    private @Nullable String loadFromCache;
    /**
     * @return If the Entity is to be fetched from fallbackBranch
     * 
     */
    private @Nullable Boolean loadFromFallbackBranch;
    /**
     * @return Identifier of the Harness Connector used for CRUD operations on the Parent Entity. To reference a connector at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a connector at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    private @Nullable String parentEntityConnectorRef;
    /**
     * @return Name of the repository where parent entity lies.
     * 
     */
    private @Nullable String parentEntityRepoName;
    /**
     * @return Name of the repository.
     * 
     */
    private @Nullable String repoName;
    /**
     * @return Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
     * 
     */
    private @Nullable String storeType;

    private InfrastructureGitDetails() {}
    /**
     * @return Name of the default branch (this checks out a new branch titled by branch_name).
     * 
     */
    public Optional<String> baseBranch() {
        return Optional.ofNullable(this.baseBranch);
    }
    /**
     * @return Name of the branch.
     * 
     */
    public Optional<String> branch() {
        return Optional.ofNullable(this.branch);
    }
    /**
     * @return Commit message used for the merge commit.
     * 
     */
    public Optional<String> commitMessage() {
        return Optional.ofNullable(this.commitMessage);
    }
    /**
     * @return Identifier of the Harness Connector used for CRUD operations on the Entity. To reference a connector at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a connector at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public Optional<String> connectorRef() {
        return Optional.ofNullable(this.connectorRef);
    }
    /**
     * @return File path of the Entity in the repository.
     * 
     */
    public Optional<String> filePath() {
        return Optional.ofNullable(this.filePath);
    }
    /**
     * @return import infrastructure from git
     * 
     */
    public Optional<Boolean> importFromGit() {
        return Optional.ofNullable(this.importFromGit);
    }
    /**
     * @return force import infrastructure from remote even if same file path already exist
     * 
     */
    public Optional<Boolean> isForceImport() {
        return Optional.ofNullable(this.isForceImport);
    }
    /**
     * @return If the gitProvider is HarnessCode
     * 
     */
    public Optional<Boolean> isHarnesscodeRepo() {
        return Optional.ofNullable(this.isHarnesscodeRepo);
    }
    /**
     * @return If a new branch creation is requested.
     * 
     */
    public Optional<Boolean> isNewBranch() {
        return Optional.ofNullable(this.isNewBranch);
    }
    /**
     * @return Last commit identifier (for Git Repositories other than Github). To be provided only when updating infrastructure.
     * 
     */
    public Optional<String> lastCommitId() {
        return Optional.ofNullable(this.lastCommitId);
    }
    /**
     * @return Last object identifier (for Github). To be provided only when updating infrastructure.
     * 
     */
    public Optional<String> lastObjectId() {
        return Optional.ofNullable(this.lastObjectId);
    }
    /**
     * @return If the Entity is to be fetched from cache
     * 
     */
    public Optional<String> loadFromCache() {
        return Optional.ofNullable(this.loadFromCache);
    }
    /**
     * @return If the Entity is to be fetched from fallbackBranch
     * 
     */
    public Optional<Boolean> loadFromFallbackBranch() {
        return Optional.ofNullable(this.loadFromFallbackBranch);
    }
    /**
     * @return Identifier of the Harness Connector used for CRUD operations on the Parent Entity. To reference a connector at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a connector at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public Optional<String> parentEntityConnectorRef() {
        return Optional.ofNullable(this.parentEntityConnectorRef);
    }
    /**
     * @return Name of the repository where parent entity lies.
     * 
     */
    public Optional<String> parentEntityRepoName() {
        return Optional.ofNullable(this.parentEntityRepoName);
    }
    /**
     * @return Name of the repository.
     * 
     */
    public Optional<String> repoName() {
        return Optional.ofNullable(this.repoName);
    }
    /**
     * @return Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
     * 
     */
    public Optional<String> storeType() {
        return Optional.ofNullable(this.storeType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InfrastructureGitDetails defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String baseBranch;
        private @Nullable String branch;
        private @Nullable String commitMessage;
        private @Nullable String connectorRef;
        private @Nullable String filePath;
        private @Nullable Boolean importFromGit;
        private @Nullable Boolean isForceImport;
        private @Nullable Boolean isHarnesscodeRepo;
        private @Nullable Boolean isNewBranch;
        private @Nullable String lastCommitId;
        private @Nullable String lastObjectId;
        private @Nullable String loadFromCache;
        private @Nullable Boolean loadFromFallbackBranch;
        private @Nullable String parentEntityConnectorRef;
        private @Nullable String parentEntityRepoName;
        private @Nullable String repoName;
        private @Nullable String storeType;
        public Builder() {}
        public Builder(InfrastructureGitDetails defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseBranch = defaults.baseBranch;
    	      this.branch = defaults.branch;
    	      this.commitMessage = defaults.commitMessage;
    	      this.connectorRef = defaults.connectorRef;
    	      this.filePath = defaults.filePath;
    	      this.importFromGit = defaults.importFromGit;
    	      this.isForceImport = defaults.isForceImport;
    	      this.isHarnesscodeRepo = defaults.isHarnesscodeRepo;
    	      this.isNewBranch = defaults.isNewBranch;
    	      this.lastCommitId = defaults.lastCommitId;
    	      this.lastObjectId = defaults.lastObjectId;
    	      this.loadFromCache = defaults.loadFromCache;
    	      this.loadFromFallbackBranch = defaults.loadFromFallbackBranch;
    	      this.parentEntityConnectorRef = defaults.parentEntityConnectorRef;
    	      this.parentEntityRepoName = defaults.parentEntityRepoName;
    	      this.repoName = defaults.repoName;
    	      this.storeType = defaults.storeType;
        }

        @CustomType.Setter
        public Builder baseBranch(@Nullable String baseBranch) {

            this.baseBranch = baseBranch;
            return this;
        }
        @CustomType.Setter
        public Builder branch(@Nullable String branch) {

            this.branch = branch;
            return this;
        }
        @CustomType.Setter
        public Builder commitMessage(@Nullable String commitMessage) {

            this.commitMessage = commitMessage;
            return this;
        }
        @CustomType.Setter
        public Builder connectorRef(@Nullable String connectorRef) {

            this.connectorRef = connectorRef;
            return this;
        }
        @CustomType.Setter
        public Builder filePath(@Nullable String filePath) {

            this.filePath = filePath;
            return this;
        }
        @CustomType.Setter
        public Builder importFromGit(@Nullable Boolean importFromGit) {

            this.importFromGit = importFromGit;
            return this;
        }
        @CustomType.Setter
        public Builder isForceImport(@Nullable Boolean isForceImport) {

            this.isForceImport = isForceImport;
            return this;
        }
        @CustomType.Setter
        public Builder isHarnesscodeRepo(@Nullable Boolean isHarnesscodeRepo) {

            this.isHarnesscodeRepo = isHarnesscodeRepo;
            return this;
        }
        @CustomType.Setter
        public Builder isNewBranch(@Nullable Boolean isNewBranch) {

            this.isNewBranch = isNewBranch;
            return this;
        }
        @CustomType.Setter
        public Builder lastCommitId(@Nullable String lastCommitId) {

            this.lastCommitId = lastCommitId;
            return this;
        }
        @CustomType.Setter
        public Builder lastObjectId(@Nullable String lastObjectId) {

            this.lastObjectId = lastObjectId;
            return this;
        }
        @CustomType.Setter
        public Builder loadFromCache(@Nullable String loadFromCache) {

            this.loadFromCache = loadFromCache;
            return this;
        }
        @CustomType.Setter
        public Builder loadFromFallbackBranch(@Nullable Boolean loadFromFallbackBranch) {

            this.loadFromFallbackBranch = loadFromFallbackBranch;
            return this;
        }
        @CustomType.Setter
        public Builder parentEntityConnectorRef(@Nullable String parentEntityConnectorRef) {

            this.parentEntityConnectorRef = parentEntityConnectorRef;
            return this;
        }
        @CustomType.Setter
        public Builder parentEntityRepoName(@Nullable String parentEntityRepoName) {

            this.parentEntityRepoName = parentEntityRepoName;
            return this;
        }
        @CustomType.Setter
        public Builder repoName(@Nullable String repoName) {

            this.repoName = repoName;
            return this;
        }
        @CustomType.Setter
        public Builder storeType(@Nullable String storeType) {

            this.storeType = storeType;
            return this;
        }
        public InfrastructureGitDetails build() {
            final var _resultValue = new InfrastructureGitDetails();
            _resultValue.baseBranch = baseBranch;
            _resultValue.branch = branch;
            _resultValue.commitMessage = commitMessage;
            _resultValue.connectorRef = connectorRef;
            _resultValue.filePath = filePath;
            _resultValue.importFromGit = importFromGit;
            _resultValue.isForceImport = isForceImport;
            _resultValue.isHarnesscodeRepo = isHarnesscodeRepo;
            _resultValue.isNewBranch = isNewBranch;
            _resultValue.lastCommitId = lastCommitId;
            _resultValue.lastObjectId = lastObjectId;
            _resultValue.loadFromCache = loadFromCache;
            _resultValue.loadFromFallbackBranch = loadFromFallbackBranch;
            _resultValue.parentEntityConnectorRef = parentEntityConnectorRef;
            _resultValue.parentEntityRepoName = parentEntityRepoName;
            _resultValue.repoName = repoName;
            _resultValue.storeType = storeType;
            return _resultValue;
        }
    }
}
