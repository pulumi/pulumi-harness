// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cluster.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetOrchestratorConfigReplacementScheduleWindowDetails extends com.pulumi.resources.InvokeArgs {

    public static final GetOrchestratorConfigReplacementScheduleWindowDetails Empty = new GetOrchestratorConfigReplacementScheduleWindowDetails();

    @Import(name="allDay")
    private @Nullable Boolean allDay;

    public Optional<Boolean> allDay() {
        return Optional.ofNullable(this.allDay);
    }

    /**
     * List of days on which schedule need to be active. Valid values are SUN, MON, TUE, WED, THU, FRI and SAT.
     * 
     */
    @Import(name="days", required=true)
    private List<String> days;

    /**
     * @return List of days on which schedule need to be active. Valid values are SUN, MON, TUE, WED, THU, FRI and SAT.
     * 
     */
    public List<String> days() {
        return this.days;
    }

    /**
     * End time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
     * 
     */
    @Import(name="endTime")
    private @Nullable String endTime;

    /**
     * @return End time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
     * 
     */
    public Optional<String> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * Start time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
     * 
     */
    @Import(name="startTime")
    private @Nullable String startTime;

    /**
     * @return Start time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
     * 
     */
    public Optional<String> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * Time zone in which the schedule needs to be executed. Example Valid values: UTC, America/New*York, Europe/London, Asia/Kolkata, Asia/Tokyo, Asia/Hong*Kong, Asia/Singapore, Australia/Melbourne and Australia/Sydney.
     * 
     */
    @Import(name="timeZone", required=true)
    private String timeZone;

    /**
     * @return Time zone in which the schedule needs to be executed. Example Valid values: UTC, America/New*York, Europe/London, Asia/Kolkata, Asia/Tokyo, Asia/Hong*Kong, Asia/Singapore, Australia/Melbourne and Australia/Sydney.
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }

    private GetOrchestratorConfigReplacementScheduleWindowDetails() {}

    private GetOrchestratorConfigReplacementScheduleWindowDetails(GetOrchestratorConfigReplacementScheduleWindowDetails $) {
        this.allDay = $.allDay;
        this.days = $.days;
        this.endTime = $.endTime;
        this.startTime = $.startTime;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetOrchestratorConfigReplacementScheduleWindowDetails defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetOrchestratorConfigReplacementScheduleWindowDetails $;

        public Builder() {
            $ = new GetOrchestratorConfigReplacementScheduleWindowDetails();
        }

        public Builder(GetOrchestratorConfigReplacementScheduleWindowDetails defaults) {
            $ = new GetOrchestratorConfigReplacementScheduleWindowDetails(Objects.requireNonNull(defaults));
        }

        public Builder allDay(@Nullable Boolean allDay) {
            $.allDay = allDay;
            return this;
        }

        /**
         * @param days List of days on which schedule need to be active. Valid values are SUN, MON, TUE, WED, THU, FRI and SAT.
         * 
         * @return builder
         * 
         */
        public Builder days(List<String> days) {
            $.days = days;
            return this;
        }

        /**
         * @param days List of days on which schedule need to be active. Valid values are SUN, MON, TUE, WED, THU, FRI and SAT.
         * 
         * @return builder
         * 
         */
        public Builder days(String... days) {
            return days(List.of(days));
        }

        /**
         * @param endTime End time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable String endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param startTime Start time of schedule in the format HH:MM. Eg : 13:15 for 01:15pm
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable String startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param timeZone Time zone in which the schedule needs to be executed. Example Valid values: UTC, America/New*York, Europe/London, Asia/Kolkata, Asia/Tokyo, Asia/Hong*Kong, Asia/Singapore, Australia/Melbourne and Australia/Sydney.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        public GetOrchestratorConfigReplacementScheduleWindowDetails build() {
            if ($.days == null) {
                throw new MissingRequiredPropertyException("GetOrchestratorConfigReplacementScheduleWindowDetails", "days");
            }
            if ($.timeZone == null) {
                throw new MissingRequiredPropertyException("GetOrchestratorConfigReplacementScheduleWindowDetails", "timeZone");
            }
            return $;
        }
    }

}
