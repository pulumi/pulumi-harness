// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GetRepoRuleBranchBypass;
import com.pulumi.harness.platform.outputs.GetRepoRuleBranchPattern;
import com.pulumi.harness.platform.outputs.GetRepoRuleBranchPolicy;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRepoRuleBranchResult {
    /**
     * @return List of users who can bypass this rule.
     * 
     */
    private List<GetRepoRuleBranchBypass> bypasses;
    /**
     * @return Timestamp when the rule was created.
     * 
     */
    private Integer created;
    /**
     * @return ID of the user who created the rule.
     * 
     */
    private Integer createdBy;
    /**
     * @return Description of the rule.
     * 
     */
    private @Nullable String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Identifier of the rule.
     * 
     */
    private String identifier;
    /**
     * @return Unique identifier of the organization.
     * 
     */
    private @Nullable String orgId;
    /**
     * @return Pattern of branch to which rule will apply.
     * 
     */
    private @Nullable List<GetRepoRuleBranchPattern> patterns;
    /**
     * @return Policies to be applied for this rule.
     * 
     */
    private List<GetRepoRuleBranchPolicy> policies;
    /**
     * @return Unique identifier of the project.
     * 
     */
    private @Nullable String projectId;
    /**
     * @return Repo identifier of the repository.
     * 
     */
    private String repoIdentifier;
    /**
     * @return State of the rule (active, disable, monitor).
     * 
     */
    private String state;
    /**
     * @return Timestamp when the rule was updated.
     * 
     */
    private Integer updated;
    /**
     * @return ID of the user who updated the rule.
     * 
     */
    private Integer updatedBy;

    private GetRepoRuleBranchResult() {}
    /**
     * @return List of users who can bypass this rule.
     * 
     */
    public List<GetRepoRuleBranchBypass> bypasses() {
        return this.bypasses;
    }
    /**
     * @return Timestamp when the rule was created.
     * 
     */
    public Integer created() {
        return this.created;
    }
    /**
     * @return ID of the user who created the rule.
     * 
     */
    public Integer createdBy() {
        return this.createdBy;
    }
    /**
     * @return Description of the rule.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Identifier of the rule.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }
    /**
     * @return Pattern of branch to which rule will apply.
     * 
     */
    public List<GetRepoRuleBranchPattern> patterns() {
        return this.patterns == null ? List.of() : this.patterns;
    }
    /**
     * @return Policies to be applied for this rule.
     * 
     */
    public List<GetRepoRuleBranchPolicy> policies() {
        return this.policies;
    }
    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return Repo identifier of the repository.
     * 
     */
    public String repoIdentifier() {
        return this.repoIdentifier;
    }
    /**
     * @return State of the rule (active, disable, monitor).
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Timestamp when the rule was updated.
     * 
     */
    public Integer updated() {
        return this.updated;
    }
    /**
     * @return ID of the user who updated the rule.
     * 
     */
    public Integer updatedBy() {
        return this.updatedBy;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepoRuleBranchResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetRepoRuleBranchBypass> bypasses;
        private Integer created;
        private Integer createdBy;
        private @Nullable String description;
        private String id;
        private String identifier;
        private @Nullable String orgId;
        private @Nullable List<GetRepoRuleBranchPattern> patterns;
        private List<GetRepoRuleBranchPolicy> policies;
        private @Nullable String projectId;
        private String repoIdentifier;
        private String state;
        private Integer updated;
        private Integer updatedBy;
        public Builder() {}
        public Builder(GetRepoRuleBranchResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bypasses = defaults.bypasses;
    	      this.created = defaults.created;
    	      this.createdBy = defaults.createdBy;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.orgId = defaults.orgId;
    	      this.patterns = defaults.patterns;
    	      this.policies = defaults.policies;
    	      this.projectId = defaults.projectId;
    	      this.repoIdentifier = defaults.repoIdentifier;
    	      this.state = defaults.state;
    	      this.updated = defaults.updated;
    	      this.updatedBy = defaults.updatedBy;
        }

        @CustomType.Setter
        public Builder bypasses(List<GetRepoRuleBranchBypass> bypasses) {
            if (bypasses == null) {
              throw new MissingRequiredPropertyException("GetRepoRuleBranchResult", "bypasses");
            }
            this.bypasses = bypasses;
            return this;
        }
        public Builder bypasses(GetRepoRuleBranchBypass... bypasses) {
            return bypasses(List.of(bypasses));
        }
        @CustomType.Setter
        public Builder created(Integer created) {
            if (created == null) {
              throw new MissingRequiredPropertyException("GetRepoRuleBranchResult", "created");
            }
            this.created = created;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(Integer createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetRepoRuleBranchResult", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRepoRuleBranchResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            if (identifier == null) {
              throw new MissingRequiredPropertyException("GetRepoRuleBranchResult", "identifier");
            }
            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(@Nullable String orgId) {

            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder patterns(@Nullable List<GetRepoRuleBranchPattern> patterns) {

            this.patterns = patterns;
            return this;
        }
        public Builder patterns(GetRepoRuleBranchPattern... patterns) {
            return patterns(List.of(patterns));
        }
        @CustomType.Setter
        public Builder policies(List<GetRepoRuleBranchPolicy> policies) {
            if (policies == null) {
              throw new MissingRequiredPropertyException("GetRepoRuleBranchResult", "policies");
            }
            this.policies = policies;
            return this;
        }
        public Builder policies(GetRepoRuleBranchPolicy... policies) {
            return policies(List.of(policies));
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder repoIdentifier(String repoIdentifier) {
            if (repoIdentifier == null) {
              throw new MissingRequiredPropertyException("GetRepoRuleBranchResult", "repoIdentifier");
            }
            this.repoIdentifier = repoIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetRepoRuleBranchResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder updated(Integer updated) {
            if (updated == null) {
              throw new MissingRequiredPropertyException("GetRepoRuleBranchResult", "updated");
            }
            this.updated = updated;
            return this;
        }
        @CustomType.Setter
        public Builder updatedBy(Integer updatedBy) {
            if (updatedBy == null) {
              throw new MissingRequiredPropertyException("GetRepoRuleBranchResult", "updatedBy");
            }
            this.updatedBy = updatedBy;
            return this;
        }
        public GetRepoRuleBranchResult build() {
            final var _resultValue = new GetRepoRuleBranchResult();
            _resultValue.bypasses = bypasses;
            _resultValue.created = created;
            _resultValue.createdBy = createdBy;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.orgId = orgId;
            _resultValue.patterns = patterns;
            _resultValue.policies = policies;
            _resultValue.projectId = projectId;
            _resultValue.repoIdentifier = repoIdentifier;
            _resultValue.state = state;
            _resultValue.updated = updated;
            _resultValue.updatedBy = updatedBy;
            return _resultValue;
        }
    }
}
