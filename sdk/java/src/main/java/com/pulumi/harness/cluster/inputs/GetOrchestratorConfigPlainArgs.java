// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cluster.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.cluster.inputs.GetOrchestratorConfigBinpacking;
import com.pulumi.harness.cluster.inputs.GetOrchestratorConfigCommitmentIntegration;
import com.pulumi.harness.cluster.inputs.GetOrchestratorConfigDistribution;
import com.pulumi.harness.cluster.inputs.GetOrchestratorConfigNodePreferences;
import com.pulumi.harness.cluster.inputs.GetOrchestratorConfigReplacementSchedule;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetOrchestratorConfigPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetOrchestratorConfigPlainArgs Empty = new GetOrchestratorConfigPlainArgs();

    /**
     * Binpacking preferences for Cluster Orchestrator
     * 
     */
    @Import(name="binpacking")
    private @Nullable GetOrchestratorConfigBinpacking binpacking;

    /**
     * @return Binpacking preferences for Cluster Orchestrator
     * 
     */
    public Optional<GetOrchestratorConfigBinpacking> binpacking() {
        return Optional.ofNullable(this.binpacking);
    }

    /**
     * Commitment integration configuration for Cluster Orchestrator
     * 
     */
    @Import(name="commitmentIntegration")
    private @Nullable GetOrchestratorConfigCommitmentIntegration commitmentIntegration;

    /**
     * @return Commitment integration configuration for Cluster Orchestrator
     * 
     */
    public Optional<GetOrchestratorConfigCommitmentIntegration> commitmentIntegration() {
        return Optional.ofNullable(this.commitmentIntegration);
    }

    /**
     * Spot and Ondemand Distribution Preferences for workload replicas
     * 
     */
    @Import(name="distribution")
    private @Nullable GetOrchestratorConfigDistribution distribution;

    /**
     * @return Spot and Ondemand Distribution Preferences for workload replicas
     * 
     */
    public Optional<GetOrchestratorConfigDistribution> distribution() {
        return Optional.ofNullable(this.distribution);
    }

    /**
     * Node preferences for Cluster Orchestrator
     * 
     */
    @Import(name="nodePreferences")
    private @Nullable GetOrchestratorConfigNodePreferences nodePreferences;

    /**
     * @return Node preferences for Cluster Orchestrator
     * 
     */
    public Optional<GetOrchestratorConfigNodePreferences> nodePreferences() {
        return Optional.ofNullable(this.nodePreferences);
    }

    /**
     * ID of the Cluster Orchestrator Object
     * 
     */
    @Import(name="orchestratorId", required=true)
    private String orchestratorId;

    /**
     * @return ID of the Cluster Orchestrator Object
     * 
     */
    public String orchestratorId() {
        return this.orchestratorId;
    }

    /**
     * Replacement schedule for Cluster Orchestrator
     * 
     */
    @Import(name="replacementSchedule")
    private @Nullable GetOrchestratorConfigReplacementSchedule replacementSchedule;

    /**
     * @return Replacement schedule for Cluster Orchestrator
     * 
     */
    public Optional<GetOrchestratorConfigReplacementSchedule> replacementSchedule() {
        return Optional.ofNullable(this.replacementSchedule);
    }

    private GetOrchestratorConfigPlainArgs() {}

    private GetOrchestratorConfigPlainArgs(GetOrchestratorConfigPlainArgs $) {
        this.binpacking = $.binpacking;
        this.commitmentIntegration = $.commitmentIntegration;
        this.distribution = $.distribution;
        this.nodePreferences = $.nodePreferences;
        this.orchestratorId = $.orchestratorId;
        this.replacementSchedule = $.replacementSchedule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetOrchestratorConfigPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetOrchestratorConfigPlainArgs $;

        public Builder() {
            $ = new GetOrchestratorConfigPlainArgs();
        }

        public Builder(GetOrchestratorConfigPlainArgs defaults) {
            $ = new GetOrchestratorConfigPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param binpacking Binpacking preferences for Cluster Orchestrator
         * 
         * @return builder
         * 
         */
        public Builder binpacking(@Nullable GetOrchestratorConfigBinpacking binpacking) {
            $.binpacking = binpacking;
            return this;
        }

        /**
         * @param commitmentIntegration Commitment integration configuration for Cluster Orchestrator
         * 
         * @return builder
         * 
         */
        public Builder commitmentIntegration(@Nullable GetOrchestratorConfigCommitmentIntegration commitmentIntegration) {
            $.commitmentIntegration = commitmentIntegration;
            return this;
        }

        /**
         * @param distribution Spot and Ondemand Distribution Preferences for workload replicas
         * 
         * @return builder
         * 
         */
        public Builder distribution(@Nullable GetOrchestratorConfigDistribution distribution) {
            $.distribution = distribution;
            return this;
        }

        /**
         * @param nodePreferences Node preferences for Cluster Orchestrator
         * 
         * @return builder
         * 
         */
        public Builder nodePreferences(@Nullable GetOrchestratorConfigNodePreferences nodePreferences) {
            $.nodePreferences = nodePreferences;
            return this;
        }

        /**
         * @param orchestratorId ID of the Cluster Orchestrator Object
         * 
         * @return builder
         * 
         */
        public Builder orchestratorId(String orchestratorId) {
            $.orchestratorId = orchestratorId;
            return this;
        }

        /**
         * @param replacementSchedule Replacement schedule for Cluster Orchestrator
         * 
         * @return builder
         * 
         */
        public Builder replacementSchedule(@Nullable GetOrchestratorConfigReplacementSchedule replacementSchedule) {
            $.replacementSchedule = replacementSchedule;
            return this;
        }

        public GetOrchestratorConfigPlainArgs build() {
            if ($.orchestratorId == null) {
                throw new MissingRequiredPropertyException("GetOrchestratorConfigPlainArgs", "orchestratorId");
            }
            return $;
        }
    }

}
