// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetTriggerConditionOnWebhookWebhookDetail {
    /**
     * @return Header.
     * 
     */
    private String header;
    /**
     * @return Method.
     * 
     */
    private String method;
    /**
     * @return Payload.
     * 
     */
    private String payload;
    /**
     * @return Webhook token.
     * 
     */
    private String webhookToken;
    /**
     * @return Webhook URL.
     * 
     */
    private String webhookUrl;

    private GetTriggerConditionOnWebhookWebhookDetail() {}
    /**
     * @return Header.
     * 
     */
    public String header() {
        return this.header;
    }
    /**
     * @return Method.
     * 
     */
    public String method() {
        return this.method;
    }
    /**
     * @return Payload.
     * 
     */
    public String payload() {
        return this.payload;
    }
    /**
     * @return Webhook token.
     * 
     */
    public String webhookToken() {
        return this.webhookToken;
    }
    /**
     * @return Webhook URL.
     * 
     */
    public String webhookUrl() {
        return this.webhookUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTriggerConditionOnWebhookWebhookDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String header;
        private String method;
        private String payload;
        private String webhookToken;
        private String webhookUrl;
        public Builder() {}
        public Builder(GetTriggerConditionOnWebhookWebhookDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.header = defaults.header;
    	      this.method = defaults.method;
    	      this.payload = defaults.payload;
    	      this.webhookToken = defaults.webhookToken;
    	      this.webhookUrl = defaults.webhookUrl;
        }

        @CustomType.Setter
        public Builder header(String header) {
            if (header == null) {
              throw new MissingRequiredPropertyException("GetTriggerConditionOnWebhookWebhookDetail", "header");
            }
            this.header = header;
            return this;
        }
        @CustomType.Setter
        public Builder method(String method) {
            if (method == null) {
              throw new MissingRequiredPropertyException("GetTriggerConditionOnWebhookWebhookDetail", "method");
            }
            this.method = method;
            return this;
        }
        @CustomType.Setter
        public Builder payload(String payload) {
            if (payload == null) {
              throw new MissingRequiredPropertyException("GetTriggerConditionOnWebhookWebhookDetail", "payload");
            }
            this.payload = payload;
            return this;
        }
        @CustomType.Setter
        public Builder webhookToken(String webhookToken) {
            if (webhookToken == null) {
              throw new MissingRequiredPropertyException("GetTriggerConditionOnWebhookWebhookDetail", "webhookToken");
            }
            this.webhookToken = webhookToken;
            return this;
        }
        @CustomType.Setter
        public Builder webhookUrl(String webhookUrl) {
            if (webhookUrl == null) {
              throw new MissingRequiredPropertyException("GetTriggerConditionOnWebhookWebhookDetail", "webhookUrl");
            }
            this.webhookUrl = webhookUrl;
            return this;
        }
        public GetTriggerConditionOnWebhookWebhookDetail build() {
            final var _resultValue = new GetTriggerConditionOnWebhookWebhookDetail();
            _resultValue.header = header;
            _resultValue.method = method;
            _resultValue.payload = payload;
            _resultValue.webhookToken = webhookToken;
            _resultValue.webhookUrl = webhookUrl;
            return _resultValue;
        }
    }
}
