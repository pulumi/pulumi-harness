// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.ApplicationGitSyncArgs;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.inputs.ApplicationGitSyncState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for configuring application git sync.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.HarnessFunctions;
 * import com.pulumi.harness.inputs.GetSecretManagerArgs;
 * import com.pulumi.harness.EncryptedText;
 * import com.pulumi.harness.EncryptedTextArgs;
 * import com.pulumi.harness.GitConnector;
 * import com.pulumi.harness.GitConnectorArgs;
 * import com.pulumi.harness.Application;
 * import com.pulumi.harness.ApplicationArgs;
 * import com.pulumi.harness.ApplicationGitSync;
 * import com.pulumi.harness.ApplicationGitSyncArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()
 *             .default_(true)
 *             .build());
 * 
 *         var githubToken = new EncryptedText("githubToken", EncryptedTextArgs.builder()
 *             .name("github_token")
 *             .value("<TOKEN>")
 *             .secretManagerId(default_.id())
 *             .build());
 * 
 *         var myrepo = new GitConnector("myrepo", GitConnectorArgs.builder()
 *             .name("myrepo")
 *             .url("https://github.com/someorg/myrepo")
 *             .branch("main")
 *             .generateWebhookUrl(true)
 *             .username("someuser")
 *             .passwordSecretId(githubToken.id())
 *             .urlType("REPO")
 *             .build());
 * 
 *         var example = new Application("example", ApplicationArgs.builder()
 *             .name("example-app")
 *             .build());
 * 
 *         var exampleApplicationGitSync = new ApplicationGitSync("exampleApplicationGitSync", ApplicationGitSyncArgs.builder()
 *             .appId(example.id())
 *             .connectorId(myrepo.id())
 *             .branch("main")
 *             .enabled(false)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * The `pulumi import` command can be used, for example:
 * 
 * Import using the Harness application id
 * 
 * ```sh
 * $ pulumi import harness:index/applicationGitSync:ApplicationGitSync myapp Xyz123
 * ```
 * 
 */
@ResourceType(type="harness:index/applicationGitSync:ApplicationGitSync")
public class ApplicationGitSync extends com.pulumi.resources.CustomResource {
    /**
     * The id of the application.
     * 
     */
    @Export(name="appId", refs={String.class}, tree="[0]")
    private Output<String> appId;

    /**
     * @return The id of the application.
     * 
     */
    public Output<String> appId() {
        return this.appId;
    }
    /**
     * The branch of the git repository to sync to.
     * 
     */
    @Export(name="branch", refs={String.class}, tree="[0]")
    private Output<String> branch;

    /**
     * @return The branch of the git repository to sync to.
     * 
     */
    public Output<String> branch() {
        return this.branch;
    }
    /**
     * The id of the git connector to use.
     * 
     */
    @Export(name="connectorId", refs={String.class}, tree="[0]")
    private Output<String> connectorId;

    /**
     * @return The id of the git connector to use.
     * 
     */
    public Output<String> connectorId() {
        return this.connectorId;
    }
    /**
     * Whether or not to enable git sync.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return Whether or not to enable git sync.
     * 
     */
    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    /**
     * The name of the git repository to sync to. This is only used if the git connector is for an account and not an individual repository.
     * 
     */
    @Export(name="repositoryName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> repositoryName;

    /**
     * @return The name of the git repository to sync to. This is only used if the git connector is for an account and not an individual repository.
     * 
     */
    public Output<Optional<String>> repositoryName() {
        return Codegen.optional(this.repositoryName);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ApplicationGitSync(java.lang.String name) {
        this(name, ApplicationGitSyncArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ApplicationGitSync(java.lang.String name, ApplicationGitSyncArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ApplicationGitSync(java.lang.String name, ApplicationGitSyncArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:index/applicationGitSync:ApplicationGitSync", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ApplicationGitSync(java.lang.String name, Output<java.lang.String> id, @Nullable ApplicationGitSyncState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:index/applicationGitSync:ApplicationGitSync", name, state, makeResourceOptions(options, id), false);
    }

    private static ApplicationGitSyncArgs makeArgs(ApplicationGitSyncArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ApplicationGitSyncArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ApplicationGitSync get(java.lang.String name, Output<java.lang.String> id, @Nullable ApplicationGitSyncState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ApplicationGitSync(name, id, state, options);
    }
}
