// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.NotificationRuleRequestCondition;
import com.pulumi.harness.platform.outputs.NotificationRuleRequestNotificationMethod;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class NotificationRuleRequest {
    /**
     * @return Notification Rule conditions specification.
     * 
     */
    private List<NotificationRuleRequestCondition> conditions;
    /**
     * @return Name for the Notification Rule.
     * 
     */
    private String name;
    /**
     * @return Notification Method specifications.
     * 
     */
    private NotificationRuleRequestNotificationMethod notificationMethod;
    /**
     * @return Type of the Notification Rule.
     * 
     */
    private String type;

    private NotificationRuleRequest() {}
    /**
     * @return Notification Rule conditions specification.
     * 
     */
    public List<NotificationRuleRequestCondition> conditions() {
        return this.conditions;
    }
    /**
     * @return Name for the Notification Rule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Notification Method specifications.
     * 
     */
    public NotificationRuleRequestNotificationMethod notificationMethod() {
        return this.notificationMethod;
    }
    /**
     * @return Type of the Notification Rule.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NotificationRuleRequest defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<NotificationRuleRequestCondition> conditions;
        private String name;
        private NotificationRuleRequestNotificationMethod notificationMethod;
        private String type;
        public Builder() {}
        public Builder(NotificationRuleRequest defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditions = defaults.conditions;
    	      this.name = defaults.name;
    	      this.notificationMethod = defaults.notificationMethod;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder conditions(List<NotificationRuleRequestCondition> conditions) {
            if (conditions == null) {
              throw new MissingRequiredPropertyException("NotificationRuleRequest", "conditions");
            }
            this.conditions = conditions;
            return this;
        }
        public Builder conditions(NotificationRuleRequestCondition... conditions) {
            return conditions(List.of(conditions));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("NotificationRuleRequest", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notificationMethod(NotificationRuleRequestNotificationMethod notificationMethod) {
            if (notificationMethod == null) {
              throw new MissingRequiredPropertyException("NotificationRuleRequest", "notificationMethod");
            }
            this.notificationMethod = notificationMethod;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("NotificationRuleRequest", "type");
            }
            this.type = type;
            return this;
        }
        public NotificationRuleRequest build() {
            final var _resultValue = new NotificationRuleRequest();
            _resultValue.conditions = conditions;
            _resultValue.name = name;
            _resultValue.notificationMethod = notificationMethod;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
