// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TemplateTemplateImportRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final TemplateTemplateImportRequestArgs Empty = new TemplateTemplateImportRequestArgs();

    /**
     * Description of the template.
     * 
     */
    @Import(name="templateDescription")
    private @Nullable Output<String> templateDescription;

    /**
     * @return Description of the template.
     * 
     */
    public Optional<Output<String>> templateDescription() {
        return Optional.ofNullable(this.templateDescription);
    }

    /**
     * Name of the template.
     * 
     */
    @Import(name="templateName")
    private @Nullable Output<String> templateName;

    /**
     * @return Name of the template.
     * 
     */
    public Optional<Output<String>> templateName() {
        return Optional.ofNullable(this.templateName);
    }

    /**
     * Version of the template.
     * 
     */
    @Import(name="templateVersion")
    private @Nullable Output<String> templateVersion;

    /**
     * @return Version of the template.
     * 
     */
    public Optional<Output<String>> templateVersion() {
        return Optional.ofNullable(this.templateVersion);
    }

    private TemplateTemplateImportRequestArgs() {}

    private TemplateTemplateImportRequestArgs(TemplateTemplateImportRequestArgs $) {
        this.templateDescription = $.templateDescription;
        this.templateName = $.templateName;
        this.templateVersion = $.templateVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TemplateTemplateImportRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TemplateTemplateImportRequestArgs $;

        public Builder() {
            $ = new TemplateTemplateImportRequestArgs();
        }

        public Builder(TemplateTemplateImportRequestArgs defaults) {
            $ = new TemplateTemplateImportRequestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param templateDescription Description of the template.
         * 
         * @return builder
         * 
         */
        public Builder templateDescription(@Nullable Output<String> templateDescription) {
            $.templateDescription = templateDescription;
            return this;
        }

        /**
         * @param templateDescription Description of the template.
         * 
         * @return builder
         * 
         */
        public Builder templateDescription(String templateDescription) {
            return templateDescription(Output.of(templateDescription));
        }

        /**
         * @param templateName Name of the template.
         * 
         * @return builder
         * 
         */
        public Builder templateName(@Nullable Output<String> templateName) {
            $.templateName = templateName;
            return this;
        }

        /**
         * @param templateName Name of the template.
         * 
         * @return builder
         * 
         */
        public Builder templateName(String templateName) {
            return templateName(Output.of(templateName));
        }

        /**
         * @param templateVersion Version of the template.
         * 
         * @return builder
         * 
         */
        public Builder templateVersion(@Nullable Output<String> templateVersion) {
            $.templateVersion = templateVersion;
            return this;
        }

        /**
         * @param templateVersion Version of the template.
         * 
         * @return builder
         * 
         */
        public Builder templateVersion(String templateVersion) {
            return templateVersion(Output.of(templateVersion));
        }

        public TemplateTemplateImportRequestArgs build() {
            return $;
        }
    }

}
