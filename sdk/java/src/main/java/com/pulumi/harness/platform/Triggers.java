// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.TriggersArgs;
import com.pulumi.harness.platform.inputs.TriggersState;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for creating triggers in Harness.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.platform.Triggers;
 * import com.pulumi.harness.platform.TriggersArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Triggers("example", TriggersArgs.builder()
 *             .identifier("identifier")
 *             .orgId("orgIdentifer")
 *             .projectId("projectIdentifier")
 *             .name("name")
 *             .targetId("pipelineIdentifier")
 *             .yaml("""
 * trigger:
 *   name: name
 *   identifier: identifier
 *   enabled: true
 *   description: ""
 *   tags: {}
 *   projectIdentifier: projectIdentifier
 *   orgIdentifier: orgIdentifer
 *   pipelineIdentifier: pipelineIdentifier
 *   source:
 *     type: Webhook
 *     spec:
 *       type: Github
 *       spec:
 *         type: Push
 *         spec:
 *           connectorRef: account.TestAccResourceConnectorGithub_Ssh_IZBeG
 *           autoAbortPreviousExecutions: false
 *           payloadConditions:
 *           - key: changedFiles
 *             operator: Equals
 *             value: value
 *           - key: targetBranch
 *             operator: Equals
 *             value: value
 *           headerConditions: []
 *           repoName: repoName
 *           actions: []
 *   inputYaml: |
 *     pipeline: {}\n
 *             """)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * The `pulumi import` command can be used, for example:
 * 
 * Import trigger
 * 
 * ```sh
 * $ pulumi import harness:platform/triggers:Triggers example &lt;org_id&gt;/&lt;project_id&gt;/&lt;target_id&gt;/&lt;triggers_id&gt;
 * ```
 * 
 */
@ResourceType(type="harness:platform/triggers:Triggers")
public class Triggers extends com.pulumi.resources.CustomResource {
    /**
     * Description of the resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Unique identifier of the resource.
     * 
     */
    @Export(name="identifier", refs={String.class}, tree="[0]")
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }
    /**
     * if-Match
     * 
     */
    @Export(name="ifMatch", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ifMatch;

    /**
     * @return if-Match
     * 
     */
    public Output<Optional<String>> ifMatch() {
        return Codegen.optional(this.ifMatch);
    }
    /**
     * ignore error default false
     * 
     */
    @Export(name="ignoreError", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ignoreError;

    /**
     * @return ignore error default false
     * 
     */
    public Output<Optional<Boolean>> ignoreError() {
        return Codegen.optional(this.ignoreError);
    }
    /**
     * Name of the resource.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Unique identifier of the organization.
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }
    /**
     * Unique identifier of the project.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * Tags to associate with the resource.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Tags to associate with the resource.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Identifier of the target pipeline
     * 
     */
    @Export(name="targetId", refs={String.class}, tree="[0]")
    private Output<String> targetId;

    /**
     * @return Identifier of the target pipeline
     * 
     */
    public Output<String> targetId() {
        return this.targetId;
    }
    /**
     * trigger yaml. In YAML, to reference an entity at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference an entity at the account scope, prefix &#39;account` to the expression: account.{identifier}. For eg, to reference a connector with identifier &#39;connectorId&#39; at the organization scope in a stage mention it as connectorRef: org.connectorId.
     * 
     */
    @Export(name="yaml", refs={String.class}, tree="[0]")
    private Output<String> yaml;

    /**
     * @return trigger yaml. In YAML, to reference an entity at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference an entity at the account scope, prefix &#39;account` to the expression: account.{identifier}. For eg, to reference a connector with identifier &#39;connectorId&#39; at the organization scope in a stage mention it as connectorRef: org.connectorId.
     * 
     */
    public Output<String> yaml() {
        return this.yaml;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Triggers(java.lang.String name) {
        this(name, TriggersArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Triggers(java.lang.String name, TriggersArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Triggers(java.lang.String name, TriggersArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/triggers:Triggers", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Triggers(java.lang.String name, Output<java.lang.String> id, @Nullable TriggersState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/triggers:Triggers", name, state, makeResourceOptions(options, id), false);
    }

    private static TriggersArgs makeArgs(TriggersArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? TriggersArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Triggers get(java.lang.String name, Output<java.lang.String> id, @Nullable TriggersState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Triggers(name, id, state, options);
    }
}
