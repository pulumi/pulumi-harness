// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PipelineFiltersFilterPropertiesModulePropertiesCd {
    /**
     * @return Artifact display names of the CD pipeline.
     * 
     */
    private @Nullable List<String> artifactDisplayNames;
    /**
     * @return Deployment type of the CD pipeline, eg. Kubernetes
     * 
     */
    private @Nullable String deploymentTypes;
    /**
     * @return Environment identifier of the CD pipeline.
     * 
     */
    private @Nullable List<String> environmentIdentifiers;
    /**
     * @return Environment names of the CD pipeline.
     * 
     */
    private @Nullable List<String> environmentNames;
    /**
     * @return Deployment type of the CD pipeline, eg. Kubernetes
     * 
     */
    private @Nullable String serviceDefinitionTypes;
    /**
     * @return Service identifiers of the CD pipeline.
     * 
     */
    private @Nullable List<String> serviceIdentifiers;
    /**
     * @return Service names of the CD pipeline.
     * 
     */
    private @Nullable List<String> serviceNames;

    private PipelineFiltersFilterPropertiesModulePropertiesCd() {}
    /**
     * @return Artifact display names of the CD pipeline.
     * 
     */
    public List<String> artifactDisplayNames() {
        return this.artifactDisplayNames == null ? List.of() : this.artifactDisplayNames;
    }
    /**
     * @return Deployment type of the CD pipeline, eg. Kubernetes
     * 
     */
    public Optional<String> deploymentTypes() {
        return Optional.ofNullable(this.deploymentTypes);
    }
    /**
     * @return Environment identifier of the CD pipeline.
     * 
     */
    public List<String> environmentIdentifiers() {
        return this.environmentIdentifiers == null ? List.of() : this.environmentIdentifiers;
    }
    /**
     * @return Environment names of the CD pipeline.
     * 
     */
    public List<String> environmentNames() {
        return this.environmentNames == null ? List.of() : this.environmentNames;
    }
    /**
     * @return Deployment type of the CD pipeline, eg. Kubernetes
     * 
     */
    public Optional<String> serviceDefinitionTypes() {
        return Optional.ofNullable(this.serviceDefinitionTypes);
    }
    /**
     * @return Service identifiers of the CD pipeline.
     * 
     */
    public List<String> serviceIdentifiers() {
        return this.serviceIdentifiers == null ? List.of() : this.serviceIdentifiers;
    }
    /**
     * @return Service names of the CD pipeline.
     * 
     */
    public List<String> serviceNames() {
        return this.serviceNames == null ? List.of() : this.serviceNames;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineFiltersFilterPropertiesModulePropertiesCd defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> artifactDisplayNames;
        private @Nullable String deploymentTypes;
        private @Nullable List<String> environmentIdentifiers;
        private @Nullable List<String> environmentNames;
        private @Nullable String serviceDefinitionTypes;
        private @Nullable List<String> serviceIdentifiers;
        private @Nullable List<String> serviceNames;
        public Builder() {}
        public Builder(PipelineFiltersFilterPropertiesModulePropertiesCd defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifactDisplayNames = defaults.artifactDisplayNames;
    	      this.deploymentTypes = defaults.deploymentTypes;
    	      this.environmentIdentifiers = defaults.environmentIdentifiers;
    	      this.environmentNames = defaults.environmentNames;
    	      this.serviceDefinitionTypes = defaults.serviceDefinitionTypes;
    	      this.serviceIdentifiers = defaults.serviceIdentifiers;
    	      this.serviceNames = defaults.serviceNames;
        }

        @CustomType.Setter
        public Builder artifactDisplayNames(@Nullable List<String> artifactDisplayNames) {

            this.artifactDisplayNames = artifactDisplayNames;
            return this;
        }
        public Builder artifactDisplayNames(String... artifactDisplayNames) {
            return artifactDisplayNames(List.of(artifactDisplayNames));
        }
        @CustomType.Setter
        public Builder deploymentTypes(@Nullable String deploymentTypes) {

            this.deploymentTypes = deploymentTypes;
            return this;
        }
        @CustomType.Setter
        public Builder environmentIdentifiers(@Nullable List<String> environmentIdentifiers) {

            this.environmentIdentifiers = environmentIdentifiers;
            return this;
        }
        public Builder environmentIdentifiers(String... environmentIdentifiers) {
            return environmentIdentifiers(List.of(environmentIdentifiers));
        }
        @CustomType.Setter
        public Builder environmentNames(@Nullable List<String> environmentNames) {

            this.environmentNames = environmentNames;
            return this;
        }
        public Builder environmentNames(String... environmentNames) {
            return environmentNames(List.of(environmentNames));
        }
        @CustomType.Setter
        public Builder serviceDefinitionTypes(@Nullable String serviceDefinitionTypes) {

            this.serviceDefinitionTypes = serviceDefinitionTypes;
            return this;
        }
        @CustomType.Setter
        public Builder serviceIdentifiers(@Nullable List<String> serviceIdentifiers) {

            this.serviceIdentifiers = serviceIdentifiers;
            return this;
        }
        public Builder serviceIdentifiers(String... serviceIdentifiers) {
            return serviceIdentifiers(List.of(serviceIdentifiers));
        }
        @CustomType.Setter
        public Builder serviceNames(@Nullable List<String> serviceNames) {

            this.serviceNames = serviceNames;
            return this;
        }
        public Builder serviceNames(String... serviceNames) {
            return serviceNames(List.of(serviceNames));
        }
        public PipelineFiltersFilterPropertiesModulePropertiesCd build() {
            final var _resultValue = new PipelineFiltersFilterPropertiesModulePropertiesCd();
            _resultValue.artifactDisplayNames = artifactDisplayNames;
            _resultValue.deploymentTypes = deploymentTypes;
            _resultValue.environmentIdentifiers = environmentIdentifiers;
            _resultValue.environmentNames = environmentNames;
            _resultValue.serviceDefinitionTypes = serviceDefinitionTypes;
            _resultValue.serviceIdentifiers = serviceIdentifiers;
            _resultValue.serviceNames = serviceNames;
            return _resultValue;
        }
    }
}
