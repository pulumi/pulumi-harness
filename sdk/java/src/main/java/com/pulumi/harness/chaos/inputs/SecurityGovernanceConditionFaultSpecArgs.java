// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.chaos.inputs.SecurityGovernanceConditionFaultSpecFaultArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class SecurityGovernanceConditionFaultSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityGovernanceConditionFaultSpecArgs Empty = new SecurityGovernanceConditionFaultSpecArgs();

    /**
     * List of fault specifications
     * 
     */
    @Import(name="faults", required=true)
    private Output<List<SecurityGovernanceConditionFaultSpecFaultArgs>> faults;

    /**
     * @return List of fault specifications
     * 
     */
    public Output<List<SecurityGovernanceConditionFaultSpecFaultArgs>> faults() {
        return this.faults;
    }

    /**
     * Operator for comparing faults (EQUAL*TO or NOT*EQUAL_TO)
     * 
     */
    @Import(name="operator", required=true)
    private Output<String> operator;

    /**
     * @return Operator for comparing faults (EQUAL*TO or NOT*EQUAL_TO)
     * 
     */
    public Output<String> operator() {
        return this.operator;
    }

    private SecurityGovernanceConditionFaultSpecArgs() {}

    private SecurityGovernanceConditionFaultSpecArgs(SecurityGovernanceConditionFaultSpecArgs $) {
        this.faults = $.faults;
        this.operator = $.operator;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityGovernanceConditionFaultSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityGovernanceConditionFaultSpecArgs $;

        public Builder() {
            $ = new SecurityGovernanceConditionFaultSpecArgs();
        }

        public Builder(SecurityGovernanceConditionFaultSpecArgs defaults) {
            $ = new SecurityGovernanceConditionFaultSpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param faults List of fault specifications
         * 
         * @return builder
         * 
         */
        public Builder faults(Output<List<SecurityGovernanceConditionFaultSpecFaultArgs>> faults) {
            $.faults = faults;
            return this;
        }

        /**
         * @param faults List of fault specifications
         * 
         * @return builder
         * 
         */
        public Builder faults(List<SecurityGovernanceConditionFaultSpecFaultArgs> faults) {
            return faults(Output.of(faults));
        }

        /**
         * @param faults List of fault specifications
         * 
         * @return builder
         * 
         */
        public Builder faults(SecurityGovernanceConditionFaultSpecFaultArgs... faults) {
            return faults(List.of(faults));
        }

        /**
         * @param operator Operator for comparing faults (EQUAL*TO or NOT*EQUAL_TO)
         * 
         * @return builder
         * 
         */
        public Builder operator(Output<String> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator Operator for comparing faults (EQUAL*TO or NOT*EQUAL_TO)
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        public SecurityGovernanceConditionFaultSpecArgs build() {
            if ($.faults == null) {
                throw new MissingRequiredPropertyException("SecurityGovernanceConditionFaultSpecArgs", "faults");
            }
            if ($.operator == null) {
                throw new MissingRequiredPropertyException("SecurityGovernanceConditionFaultSpecArgs", "operator");
            }
            return $;
        }
    }

}
