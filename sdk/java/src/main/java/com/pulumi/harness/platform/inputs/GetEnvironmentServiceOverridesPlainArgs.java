// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetEnvironmentServiceOverridesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetEnvironmentServiceOverridesPlainArgs Empty = new GetEnvironmentServiceOverridesPlainArgs();

    /**
     * The env ID to which the overrides associated.
     * 
     */
    @Import(name="envId", required=true)
    private String envId;

    /**
     * @return The env ID to which the overrides associated.
     * 
     */
    public String envId() {
        return this.envId;
    }

    /**
     * identifier of the service overrides.
     * 
     */
    @Import(name="identifier")
    private @Nullable String identifier;

    /**
     * @return identifier of the service overrides.
     * 
     */
    public Optional<String> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable String orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable String projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The service ID to which the overrides applies.
     * 
     */
    @Import(name="serviceId")
    private @Nullable String serviceId;

    /**
     * @return The service ID to which the overrides applies.
     * 
     */
    public Optional<String> serviceId() {
        return Optional.ofNullable(this.serviceId);
    }

    private GetEnvironmentServiceOverridesPlainArgs() {}

    private GetEnvironmentServiceOverridesPlainArgs(GetEnvironmentServiceOverridesPlainArgs $) {
        this.envId = $.envId;
        this.identifier = $.identifier;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.serviceId = $.serviceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetEnvironmentServiceOverridesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetEnvironmentServiceOverridesPlainArgs $;

        public Builder() {
            $ = new GetEnvironmentServiceOverridesPlainArgs();
        }

        public Builder(GetEnvironmentServiceOverridesPlainArgs defaults) {
            $ = new GetEnvironmentServiceOverridesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param envId The env ID to which the overrides associated.
         * 
         * @return builder
         * 
         */
        public Builder envId(String envId) {
            $.envId = envId;
            return this;
        }

        /**
         * @param identifier identifier of the service overrides.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable String identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable String orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable String projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param serviceId The service ID to which the overrides applies.
         * 
         * @return builder
         * 
         */
        public Builder serviceId(@Nullable String serviceId) {
            $.serviceId = serviceId;
            return this;
        }

        public GetEnvironmentServiceOverridesPlainArgs build() {
            if ($.envId == null) {
                throw new MissingRequiredPropertyException("GetEnvironmentServiceOverridesPlainArgs", "envId");
            }
            return $;
        }
    }

}
