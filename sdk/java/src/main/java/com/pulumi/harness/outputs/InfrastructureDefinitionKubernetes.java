// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class InfrastructureDefinitionKubernetes {
    /**
     * @return The name of the cloud provider to connect with.
     * 
     */
    private String cloudProviderName;
    /**
     * @return The namespace in Kubernetes to deploy to.
     * 
     */
    private String namespace;
    /**
     * @return The naming convention of the release. When using Helm Native the default is ${infra.kubernetes.infraId}. For standard Kubernetes manifests the default is release-${infra.kubernetes.infraId}
     * 
     */
    private String releaseName;

    private InfrastructureDefinitionKubernetes() {}
    /**
     * @return The name of the cloud provider to connect with.
     * 
     */
    public String cloudProviderName() {
        return this.cloudProviderName;
    }
    /**
     * @return The namespace in Kubernetes to deploy to.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The naming convention of the release. When using Helm Native the default is ${infra.kubernetes.infraId}. For standard Kubernetes manifests the default is release-${infra.kubernetes.infraId}
     * 
     */
    public String releaseName() {
        return this.releaseName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InfrastructureDefinitionKubernetes defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cloudProviderName;
        private String namespace;
        private String releaseName;
        public Builder() {}
        public Builder(InfrastructureDefinitionKubernetes defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudProviderName = defaults.cloudProviderName;
    	      this.namespace = defaults.namespace;
    	      this.releaseName = defaults.releaseName;
        }

        @CustomType.Setter
        public Builder cloudProviderName(String cloudProviderName) {
            if (cloudProviderName == null) {
              throw new MissingRequiredPropertyException("InfrastructureDefinitionKubernetes", "cloudProviderName");
            }
            this.cloudProviderName = cloudProviderName;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("InfrastructureDefinitionKubernetes", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder releaseName(String releaseName) {
            if (releaseName == null) {
              throw new MissingRequiredPropertyException("InfrastructureDefinitionKubernetes", "releaseName");
            }
            this.releaseName = releaseName;
            return this;
        }
        public InfrastructureDefinitionKubernetes build() {
            final var _resultValue = new InfrastructureDefinitionKubernetes();
            _resultValue.cloudProviderName = cloudProviderName;
            _resultValue.namespace = namespace;
            _resultValue.releaseName = releaseName;
            return _resultValue;
        }
    }
}
