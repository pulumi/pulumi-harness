// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.chaos.inputs.InfrastructureV2ImageRegistryCustomImageArgs;
import com.pulumi.harness.chaos.inputs.InfrastructureV2ImageRegistryIdentifierArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InfrastructureV2ImageRegistryArgs extends com.pulumi.resources.ResourceArgs {

    public static final InfrastructureV2ImageRegistryArgs Empty = new InfrastructureV2ImageRegistryArgs();

    /**
     * Timestamp when the registry was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Timestamp when the registry was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Custom image configurations. Required when use*custom*images is true.
     * 
     */
    @Import(name="customImages")
    private @Nullable Output<List<InfrastructureV2ImageRegistryCustomImageArgs>> customImages;

    /**
     * @return Custom image configurations. Required when use*custom*images is true.
     * 
     */
    public Optional<Output<List<InfrastructureV2ImageRegistryCustomImageArgs>>> customImages() {
        return Optional.ofNullable(this.customImages);
    }

    /**
     * Scoped identifiers for the registry.
     * 
     */
    @Import(name="identifiers")
    private @Nullable Output<List<InfrastructureV2ImageRegistryIdentifierArgs>> identifiers;

    /**
     * @return Scoped identifiers for the registry.
     * 
     */
    public Optional<Output<List<InfrastructureV2ImageRegistryIdentifierArgs>>> identifiers() {
        return Optional.ofNullable(this.identifiers);
    }

    /**
     * ID of the infrastructure.
     * 
     */
    @Import(name="infraId")
    private @Nullable Output<String> infraId;

    /**
     * @return ID of the infrastructure.
     * 
     */
    public Optional<Output<String>> infraId() {
        return Optional.ofNullable(this.infraId);
    }

    /**
     * Whether this is the default registry.
     * 
     */
    @Import(name="isDefault")
    private @Nullable Output<Boolean> isDefault;

    /**
     * @return Whether this is the default registry.
     * 
     */
    public Optional<Output<Boolean>> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    /**
     * Whether override is allowed for this registry.
     * 
     */
    @Import(name="isOverrideAllowed")
    private @Nullable Output<Boolean> isOverrideAllowed;

    /**
     * @return Whether override is allowed for this registry.
     * 
     */
    public Optional<Output<Boolean>> isOverrideAllowed() {
        return Optional.ofNullable(this.isOverrideAllowed);
    }

    /**
     * Whether the registry is private.
     * 
     */
    @Import(name="isPrivate")
    private @Nullable Output<Boolean> isPrivate;

    /**
     * @return Whether the registry is private.
     * 
     */
    public Optional<Output<Boolean>> isPrivate() {
        return Optional.ofNullable(this.isPrivate);
    }

    /**
     * The account name for the container registry.
     * 
     */
    @Import(name="registryAccount")
    private @Nullable Output<String> registryAccount;

    /**
     * @return The account name for the container registry.
     * 
     */
    public Optional<Output<String>> registryAccount() {
        return Optional.ofNullable(this.registryAccount);
    }

    /**
     * The container image registry server URL (e.g., docker.io, gcr.io).
     * 
     */
    @Import(name="registryServer")
    private @Nullable Output<String> registryServer;

    /**
     * @return The container image registry server URL (e.g., docker.io, gcr.io).
     * 
     */
    public Optional<Output<String>> registryServer() {
        return Optional.ofNullable(this.registryServer);
    }

    /**
     * Name of the Kubernetes secret containing registry credentials.
     * 
     */
    @Import(name="secretName")
    private @Nullable Output<String> secretName;

    /**
     * @return Name of the Kubernetes secret containing registry credentials.
     * 
     */
    public Optional<Output<String>> secretName() {
        return Optional.ofNullable(this.secretName);
    }

    /**
     * Timestamp when the registry was last updated.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return Timestamp when the registry was last updated.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * Whether to use custom images instead of default ones.
     * 
     */
    @Import(name="useCustomImages")
    private @Nullable Output<Boolean> useCustomImages;

    /**
     * @return Whether to use custom images instead of default ones.
     * 
     */
    public Optional<Output<Boolean>> useCustomImages() {
        return Optional.ofNullable(this.useCustomImages);
    }

    private InfrastructureV2ImageRegistryArgs() {}

    private InfrastructureV2ImageRegistryArgs(InfrastructureV2ImageRegistryArgs $) {
        this.createdAt = $.createdAt;
        this.customImages = $.customImages;
        this.identifiers = $.identifiers;
        this.infraId = $.infraId;
        this.isDefault = $.isDefault;
        this.isOverrideAllowed = $.isOverrideAllowed;
        this.isPrivate = $.isPrivate;
        this.registryAccount = $.registryAccount;
        this.registryServer = $.registryServer;
        this.secretName = $.secretName;
        this.updatedAt = $.updatedAt;
        this.useCustomImages = $.useCustomImages;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InfrastructureV2ImageRegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InfrastructureV2ImageRegistryArgs $;

        public Builder() {
            $ = new InfrastructureV2ImageRegistryArgs();
        }

        public Builder(InfrastructureV2ImageRegistryArgs defaults) {
            $ = new InfrastructureV2ImageRegistryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt Timestamp when the registry was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Timestamp when the registry was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param customImages Custom image configurations. Required when use*custom*images is true.
         * 
         * @return builder
         * 
         */
        public Builder customImages(@Nullable Output<List<InfrastructureV2ImageRegistryCustomImageArgs>> customImages) {
            $.customImages = customImages;
            return this;
        }

        /**
         * @param customImages Custom image configurations. Required when use*custom*images is true.
         * 
         * @return builder
         * 
         */
        public Builder customImages(List<InfrastructureV2ImageRegistryCustomImageArgs> customImages) {
            return customImages(Output.of(customImages));
        }

        /**
         * @param customImages Custom image configurations. Required when use*custom*images is true.
         * 
         * @return builder
         * 
         */
        public Builder customImages(InfrastructureV2ImageRegistryCustomImageArgs... customImages) {
            return customImages(List.of(customImages));
        }

        /**
         * @param identifiers Scoped identifiers for the registry.
         * 
         * @return builder
         * 
         */
        public Builder identifiers(@Nullable Output<List<InfrastructureV2ImageRegistryIdentifierArgs>> identifiers) {
            $.identifiers = identifiers;
            return this;
        }

        /**
         * @param identifiers Scoped identifiers for the registry.
         * 
         * @return builder
         * 
         */
        public Builder identifiers(List<InfrastructureV2ImageRegistryIdentifierArgs> identifiers) {
            return identifiers(Output.of(identifiers));
        }

        /**
         * @param identifiers Scoped identifiers for the registry.
         * 
         * @return builder
         * 
         */
        public Builder identifiers(InfrastructureV2ImageRegistryIdentifierArgs... identifiers) {
            return identifiers(List.of(identifiers));
        }

        /**
         * @param infraId ID of the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder infraId(@Nullable Output<String> infraId) {
            $.infraId = infraId;
            return this;
        }

        /**
         * @param infraId ID of the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder infraId(String infraId) {
            return infraId(Output.of(infraId));
        }

        /**
         * @param isDefault Whether this is the default registry.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(@Nullable Output<Boolean> isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        /**
         * @param isDefault Whether this is the default registry.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(Boolean isDefault) {
            return isDefault(Output.of(isDefault));
        }

        /**
         * @param isOverrideAllowed Whether override is allowed for this registry.
         * 
         * @return builder
         * 
         */
        public Builder isOverrideAllowed(@Nullable Output<Boolean> isOverrideAllowed) {
            $.isOverrideAllowed = isOverrideAllowed;
            return this;
        }

        /**
         * @param isOverrideAllowed Whether override is allowed for this registry.
         * 
         * @return builder
         * 
         */
        public Builder isOverrideAllowed(Boolean isOverrideAllowed) {
            return isOverrideAllowed(Output.of(isOverrideAllowed));
        }

        /**
         * @param isPrivate Whether the registry is private.
         * 
         * @return builder
         * 
         */
        public Builder isPrivate(@Nullable Output<Boolean> isPrivate) {
            $.isPrivate = isPrivate;
            return this;
        }

        /**
         * @param isPrivate Whether the registry is private.
         * 
         * @return builder
         * 
         */
        public Builder isPrivate(Boolean isPrivate) {
            return isPrivate(Output.of(isPrivate));
        }

        /**
         * @param registryAccount The account name for the container registry.
         * 
         * @return builder
         * 
         */
        public Builder registryAccount(@Nullable Output<String> registryAccount) {
            $.registryAccount = registryAccount;
            return this;
        }

        /**
         * @param registryAccount The account name for the container registry.
         * 
         * @return builder
         * 
         */
        public Builder registryAccount(String registryAccount) {
            return registryAccount(Output.of(registryAccount));
        }

        /**
         * @param registryServer The container image registry server URL (e.g., docker.io, gcr.io).
         * 
         * @return builder
         * 
         */
        public Builder registryServer(@Nullable Output<String> registryServer) {
            $.registryServer = registryServer;
            return this;
        }

        /**
         * @param registryServer The container image registry server URL (e.g., docker.io, gcr.io).
         * 
         * @return builder
         * 
         */
        public Builder registryServer(String registryServer) {
            return registryServer(Output.of(registryServer));
        }

        /**
         * @param secretName Name of the Kubernetes secret containing registry credentials.
         * 
         * @return builder
         * 
         */
        public Builder secretName(@Nullable Output<String> secretName) {
            $.secretName = secretName;
            return this;
        }

        /**
         * @param secretName Name of the Kubernetes secret containing registry credentials.
         * 
         * @return builder
         * 
         */
        public Builder secretName(String secretName) {
            return secretName(Output.of(secretName));
        }

        /**
         * @param updatedAt Timestamp when the registry was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt Timestamp when the registry was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param useCustomImages Whether to use custom images instead of default ones.
         * 
         * @return builder
         * 
         */
        public Builder useCustomImages(@Nullable Output<Boolean> useCustomImages) {
            $.useCustomImages = useCustomImages;
            return this;
        }

        /**
         * @param useCustomImages Whether to use custom images instead of default ones.
         * 
         * @return builder
         * 
         */
        public Builder useCustomImages(Boolean useCustomImages) {
            return useCustomImages(Output.of(useCustomImages));
        }

        public InfrastructureV2ImageRegistryArgs build() {
            return $;
        }
    }

}
