// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorGcpKmsManualArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorGcpKmsManualArgs Empty = new ConnectorGcpKmsManualArgs();

    /**
     * Reference to the Harness secret containing the secret key. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    @Import(name="credentials", required=true)
    private Output<String> credentials;

    /**
     * @return Reference to the Harness secret containing the secret key. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public Output<String> credentials() {
        return this.credentials;
    }

    /**
     * The delegates to connect with.
     * 
     */
    @Import(name="delegateSelectors")
    private @Nullable Output<List<String>> delegateSelectors;

    /**
     * @return The delegates to connect with.
     * 
     */
    public Optional<Output<List<String>>> delegateSelectors() {
        return Optional.ofNullable(this.delegateSelectors);
    }

    private ConnectorGcpKmsManualArgs() {}

    private ConnectorGcpKmsManualArgs(ConnectorGcpKmsManualArgs $) {
        this.credentials = $.credentials;
        this.delegateSelectors = $.delegateSelectors;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorGcpKmsManualArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorGcpKmsManualArgs $;

        public Builder() {
            $ = new ConnectorGcpKmsManualArgs();
        }

        public Builder(ConnectorGcpKmsManualArgs defaults) {
            $ = new ConnectorGcpKmsManualArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param credentials Reference to the Harness secret containing the secret key. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder credentials(Output<String> credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param credentials Reference to the Harness secret containing the secret key. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder credentials(String credentials) {
            return credentials(Output.of(credentials));
        }

        /**
         * @param delegateSelectors The delegates to connect with.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(@Nullable Output<List<String>> delegateSelectors) {
            $.delegateSelectors = delegateSelectors;
            return this;
        }

        /**
         * @param delegateSelectors The delegates to connect with.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(List<String> delegateSelectors) {
            return delegateSelectors(Output.of(delegateSelectors));
        }

        /**
         * @param delegateSelectors The delegates to connect with.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(String... delegateSelectors) {
            return delegateSelectors(List.of(delegateSelectors));
        }

        public ConnectorGcpKmsManualArgs build() {
            if ($.credentials == null) {
                throw new MissingRequiredPropertyException("ConnectorGcpKmsManualArgs", "credentials");
            }
            return $;
        }
    }

}
