// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.chaos.inputs.ImageRegistryCustomImageArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageRegistryState extends com.pulumi.resources.ResourceArgs {

    public static final ImageRegistryState Empty = new ImageRegistryState();

    /**
     * Creation timestamp
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Creation timestamp
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Custom images configuration
     * 
     */
    @Import(name="customImages")
    private @Nullable Output<List<ImageRegistryCustomImageArgs>> customImages;

    /**
     * @return Custom images configuration
     * 
     */
    public Optional<Output<List<ImageRegistryCustomImageArgs>>> customImages() {
        return Optional.ofNullable(this.customImages);
    }

    /**
     * The infrastructure ID to set up the image registry
     * 
     */
    @Import(name="infraId")
    private @Nullable Output<String> infraId;

    /**
     * @return The infrastructure ID to set up the image registry
     * 
     */
    public Optional<Output<String>> infraId() {
        return Optional.ofNullable(this.infraId);
    }

    /**
     * Whether this is the default registry
     * 
     */
    @Import(name="isDefault")
    private @Nullable Output<Boolean> isDefault;

    /**
     * @return Whether this is the default registry
     * 
     */
    public Optional<Output<Boolean>> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    /**
     * Whether override is allowed for this registry
     * 
     */
    @Import(name="isOverrideAllowed")
    private @Nullable Output<Boolean> isOverrideAllowed;

    /**
     * @return Whether override is allowed for this registry
     * 
     */
    public Optional<Output<Boolean>> isOverrideAllowed() {
        return Optional.ofNullable(this.isOverrideAllowed);
    }

    /**
     * Whether the registry is private
     * 
     */
    @Import(name="isPrivate")
    private @Nullable Output<Boolean> isPrivate;

    /**
     * @return Whether the registry is private
     * 
     */
    public Optional<Output<Boolean>> isPrivate() {
        return Optional.ofNullable(this.isPrivate);
    }

    /**
     * The organization ID of the image registry
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return The organization ID of the image registry
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * The project ID of the image registry
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The project ID of the image registry
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The registry account name
     * 
     */
    @Import(name="registryAccount")
    private @Nullable Output<String> registryAccount;

    /**
     * @return The registry account name
     * 
     */
    public Optional<Output<String>> registryAccount() {
        return Optional.ofNullable(this.registryAccount);
    }

    /**
     * The registry server URL
     * 
     */
    @Import(name="registryServer")
    private @Nullable Output<String> registryServer;

    /**
     * @return The registry server URL
     * 
     */
    public Optional<Output<String>> registryServer() {
        return Optional.ofNullable(this.registryServer);
    }

    /**
     * The name of the secret for authentication
     * 
     */
    @Import(name="secretName")
    private @Nullable Output<String> secretName;

    /**
     * @return The name of the secret for authentication
     * 
     */
    public Optional<Output<String>> secretName() {
        return Optional.ofNullable(this.secretName);
    }

    /**
     * Last update timestamp
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return Last update timestamp
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * Whether to use custom images
     * 
     */
    @Import(name="useCustomImages")
    private @Nullable Output<Boolean> useCustomImages;

    /**
     * @return Whether to use custom images
     * 
     */
    public Optional<Output<Boolean>> useCustomImages() {
        return Optional.ofNullable(this.useCustomImages);
    }

    private ImageRegistryState() {}

    private ImageRegistryState(ImageRegistryState $) {
        this.createdAt = $.createdAt;
        this.customImages = $.customImages;
        this.infraId = $.infraId;
        this.isDefault = $.isDefault;
        this.isOverrideAllowed = $.isOverrideAllowed;
        this.isPrivate = $.isPrivate;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.registryAccount = $.registryAccount;
        this.registryServer = $.registryServer;
        this.secretName = $.secretName;
        this.updatedAt = $.updatedAt;
        this.useCustomImages = $.useCustomImages;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageRegistryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageRegistryState $;

        public Builder() {
            $ = new ImageRegistryState();
        }

        public Builder(ImageRegistryState defaults) {
            $ = new ImageRegistryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt Creation timestamp
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Creation timestamp
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param customImages Custom images configuration
         * 
         * @return builder
         * 
         */
        public Builder customImages(@Nullable Output<List<ImageRegistryCustomImageArgs>> customImages) {
            $.customImages = customImages;
            return this;
        }

        /**
         * @param customImages Custom images configuration
         * 
         * @return builder
         * 
         */
        public Builder customImages(List<ImageRegistryCustomImageArgs> customImages) {
            return customImages(Output.of(customImages));
        }

        /**
         * @param customImages Custom images configuration
         * 
         * @return builder
         * 
         */
        public Builder customImages(ImageRegistryCustomImageArgs... customImages) {
            return customImages(List.of(customImages));
        }

        /**
         * @param infraId The infrastructure ID to set up the image registry
         * 
         * @return builder
         * 
         */
        public Builder infraId(@Nullable Output<String> infraId) {
            $.infraId = infraId;
            return this;
        }

        /**
         * @param infraId The infrastructure ID to set up the image registry
         * 
         * @return builder
         * 
         */
        public Builder infraId(String infraId) {
            return infraId(Output.of(infraId));
        }

        /**
         * @param isDefault Whether this is the default registry
         * 
         * @return builder
         * 
         */
        public Builder isDefault(@Nullable Output<Boolean> isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        /**
         * @param isDefault Whether this is the default registry
         * 
         * @return builder
         * 
         */
        public Builder isDefault(Boolean isDefault) {
            return isDefault(Output.of(isDefault));
        }

        /**
         * @param isOverrideAllowed Whether override is allowed for this registry
         * 
         * @return builder
         * 
         */
        public Builder isOverrideAllowed(@Nullable Output<Boolean> isOverrideAllowed) {
            $.isOverrideAllowed = isOverrideAllowed;
            return this;
        }

        /**
         * @param isOverrideAllowed Whether override is allowed for this registry
         * 
         * @return builder
         * 
         */
        public Builder isOverrideAllowed(Boolean isOverrideAllowed) {
            return isOverrideAllowed(Output.of(isOverrideAllowed));
        }

        /**
         * @param isPrivate Whether the registry is private
         * 
         * @return builder
         * 
         */
        public Builder isPrivate(@Nullable Output<Boolean> isPrivate) {
            $.isPrivate = isPrivate;
            return this;
        }

        /**
         * @param isPrivate Whether the registry is private
         * 
         * @return builder
         * 
         */
        public Builder isPrivate(Boolean isPrivate) {
            return isPrivate(Output.of(isPrivate));
        }

        /**
         * @param orgId The organization ID of the image registry
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The organization ID of the image registry
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId The project ID of the image registry
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project ID of the image registry
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param registryAccount The registry account name
         * 
         * @return builder
         * 
         */
        public Builder registryAccount(@Nullable Output<String> registryAccount) {
            $.registryAccount = registryAccount;
            return this;
        }

        /**
         * @param registryAccount The registry account name
         * 
         * @return builder
         * 
         */
        public Builder registryAccount(String registryAccount) {
            return registryAccount(Output.of(registryAccount));
        }

        /**
         * @param registryServer The registry server URL
         * 
         * @return builder
         * 
         */
        public Builder registryServer(@Nullable Output<String> registryServer) {
            $.registryServer = registryServer;
            return this;
        }

        /**
         * @param registryServer The registry server URL
         * 
         * @return builder
         * 
         */
        public Builder registryServer(String registryServer) {
            return registryServer(Output.of(registryServer));
        }

        /**
         * @param secretName The name of the secret for authentication
         * 
         * @return builder
         * 
         */
        public Builder secretName(@Nullable Output<String> secretName) {
            $.secretName = secretName;
            return this;
        }

        /**
         * @param secretName The name of the secret for authentication
         * 
         * @return builder
         * 
         */
        public Builder secretName(String secretName) {
            return secretName(Output.of(secretName));
        }

        /**
         * @param updatedAt Last update timestamp
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt Last update timestamp
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param useCustomImages Whether to use custom images
         * 
         * @return builder
         * 
         */
        public Builder useCustomImages(@Nullable Output<Boolean> useCustomImages) {
            $.useCustomImages = useCustomImages;
            return this;
        }

        /**
         * @param useCustomImages Whether to use custom images
         * 
         * @return builder
         * 
         */
        public Builder useCustomImages(Boolean useCustomImages) {
            return useCustomImages(Output.of(useCustomImages));
        }

        public ImageRegistryState build() {
            return $;
        }
    }

}
