// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GitOpsRepositoryEcrGenArgs;
import com.pulumi.harness.platform.inputs.GitOpsRepositoryGcrGenArgs;
import com.pulumi.harness.platform.inputs.GitOpsRepositoryRepoArgs;
import com.pulumi.harness.platform.inputs.GitOpsRepositoryUpdateMaskArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitOpsRepositoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitOpsRepositoryArgs Empty = new GitOpsRepositoryArgs();

    /**
     * Account identifier of the GitOps repository.
     * 
     * @deprecated
     * This field is deprecated and will be removed in a future release.
     * 
     */
    @Deprecated /* This field is deprecated and will be removed in a future release. */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Account identifier of the GitOps repository.
     * 
     * @deprecated
     * This field is deprecated and will be removed in a future release.
     * 
     */
    @Deprecated /* This field is deprecated and will be removed in a future release. */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Agent identifier of the GitOps repository.
     * 
     */
    @Import(name="agentId", required=true)
    private Output<String> agentId;

    /**
     * @return Agent identifier of the GitOps repository.
     * 
     */
    public Output<String> agentId() {
        return this.agentId;
    }

    /**
     * Indicates if to operate on credential set instead of repository.
     * 
     */
    @Import(name="credsOnly")
    private @Nullable Output<Boolean> credsOnly;

    /**
     * @return Indicates if to operate on credential set instead of repository.
     * 
     */
    public Optional<Output<Boolean>> credsOnly() {
        return Optional.ofNullable(this.credsOnly);
    }

    /**
     * ECR access token generator specific configuration.
     * 
     */
    @Import(name="ecrGen")
    private @Nullable Output<GitOpsRepositoryEcrGenArgs> ecrGen;

    /**
     * @return ECR access token generator specific configuration.
     * 
     */
    public Optional<Output<GitOpsRepositoryEcrGenArgs>> ecrGen() {
        return Optional.ofNullable(this.ecrGen);
    }

    /**
     * Indicates if the repository should be deleted forcefully, regardless of existing applications using that repo.
     * 
     */
    @Import(name="forceDelete")
    private @Nullable Output<Boolean> forceDelete;

    /**
     * @return Indicates if the repository should be deleted forcefully, regardless of existing applications using that repo.
     * 
     */
    public Optional<Output<Boolean>> forceDelete() {
        return Optional.ofNullable(this.forceDelete);
    }

    /**
     * GCR access token generator specific configuration.
     * 
     */
    @Import(name="gcrGen")
    private @Nullable Output<GitOpsRepositoryGcrGenArgs> gcrGen;

    /**
     * @return GCR access token generator specific configuration.
     * 
     */
    public Optional<Output<GitOpsRepositoryGcrGenArgs>> gcrGen() {
        return Optional.ofNullable(this.gcrGen);
    }

    /**
     * Default: &#34;UNSET&#34;
     * Enum: &#34;UNSET&#34; &#34;AWS*ECR&#34; &#34;GOOGLE*GCR&#34;
     * 
     */
    @Import(name="genType")
    private @Nullable Output<String> genType;

    /**
     * @return Default: &#34;UNSET&#34;
     * Enum: &#34;UNSET&#34; &#34;AWS*ECR&#34; &#34;GOOGLE*GCR&#34;
     * 
     */
    public Optional<Output<String>> genType() {
        return Optional.ofNullable(this.genType);
    }

    /**
     * Identifier of the GitOps repository.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return Identifier of the GitOps repository.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * Organization identifier of the GitOps repository.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Organization identifier of the GitOps repository.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Project identifier of the GitOps repository.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Project identifier of the GitOps repository.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * For OCI repos, this is the interval to refresh the token to access the registry.
     * 
     */
    @Import(name="refreshInterval")
    private @Nullable Output<String> refreshInterval;

    /**
     * @return For OCI repos, this is the interval to refresh the token to access the registry.
     * 
     */
    public Optional<Output<String>> refreshInterval() {
        return Optional.ofNullable(this.refreshInterval);
    }

    /**
     * Repo details holding application configurations.
     * 
     */
    @Import(name="repos", required=true)
    private Output<List<GitOpsRepositoryRepoArgs>> repos;

    /**
     * @return Repo details holding application configurations.
     * 
     */
    public Output<List<GitOpsRepositoryRepoArgs>> repos() {
        return this.repos;
    }

    /**
     * Update mask of the repository.
     * 
     * @deprecated
     * This field is deprecated and will be removed in a future release.
     * 
     */
    @Deprecated /* This field is deprecated and will be removed in a future release. */
    @Import(name="updateMasks")
    private @Nullable Output<List<GitOpsRepositoryUpdateMaskArgs>> updateMasks;

    /**
     * @return Update mask of the repository.
     * 
     * @deprecated
     * This field is deprecated and will be removed in a future release.
     * 
     */
    @Deprecated /* This field is deprecated and will be removed in a future release. */
    public Optional<Output<List<GitOpsRepositoryUpdateMaskArgs>>> updateMasks() {
        return Optional.ofNullable(this.updateMasks);
    }

    /**
     * Indicates if the GitOps repository should be updated if existing and inserted if not.
     * 
     */
    @Import(name="upsert")
    private @Nullable Output<Boolean> upsert;

    /**
     * @return Indicates if the GitOps repository should be updated if existing and inserted if not.
     * 
     */
    public Optional<Output<Boolean>> upsert() {
        return Optional.ofNullable(this.upsert);
    }

    private GitOpsRepositoryArgs() {}

    private GitOpsRepositoryArgs(GitOpsRepositoryArgs $) {
        this.accountId = $.accountId;
        this.agentId = $.agentId;
        this.credsOnly = $.credsOnly;
        this.ecrGen = $.ecrGen;
        this.forceDelete = $.forceDelete;
        this.gcrGen = $.gcrGen;
        this.genType = $.genType;
        this.identifier = $.identifier;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.refreshInterval = $.refreshInterval;
        this.repos = $.repos;
        this.updateMasks = $.updateMasks;
        this.upsert = $.upsert;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitOpsRepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitOpsRepositoryArgs $;

        public Builder() {
            $ = new GitOpsRepositoryArgs();
        }

        public Builder(GitOpsRepositoryArgs defaults) {
            $ = new GitOpsRepositoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account identifier of the GitOps repository.
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed in a future release.
         * 
         */
        @Deprecated /* This field is deprecated and will be removed in a future release. */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account identifier of the GitOps repository.
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed in a future release.
         * 
         */
        @Deprecated /* This field is deprecated and will be removed in a future release. */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param agentId Agent identifier of the GitOps repository.
         * 
         * @return builder
         * 
         */
        public Builder agentId(Output<String> agentId) {
            $.agentId = agentId;
            return this;
        }

        /**
         * @param agentId Agent identifier of the GitOps repository.
         * 
         * @return builder
         * 
         */
        public Builder agentId(String agentId) {
            return agentId(Output.of(agentId));
        }

        /**
         * @param credsOnly Indicates if to operate on credential set instead of repository.
         * 
         * @return builder
         * 
         */
        public Builder credsOnly(@Nullable Output<Boolean> credsOnly) {
            $.credsOnly = credsOnly;
            return this;
        }

        /**
         * @param credsOnly Indicates if to operate on credential set instead of repository.
         * 
         * @return builder
         * 
         */
        public Builder credsOnly(Boolean credsOnly) {
            return credsOnly(Output.of(credsOnly));
        }

        /**
         * @param ecrGen ECR access token generator specific configuration.
         * 
         * @return builder
         * 
         */
        public Builder ecrGen(@Nullable Output<GitOpsRepositoryEcrGenArgs> ecrGen) {
            $.ecrGen = ecrGen;
            return this;
        }

        /**
         * @param ecrGen ECR access token generator specific configuration.
         * 
         * @return builder
         * 
         */
        public Builder ecrGen(GitOpsRepositoryEcrGenArgs ecrGen) {
            return ecrGen(Output.of(ecrGen));
        }

        /**
         * @param forceDelete Indicates if the repository should be deleted forcefully, regardless of existing applications using that repo.
         * 
         * @return builder
         * 
         */
        public Builder forceDelete(@Nullable Output<Boolean> forceDelete) {
            $.forceDelete = forceDelete;
            return this;
        }

        /**
         * @param forceDelete Indicates if the repository should be deleted forcefully, regardless of existing applications using that repo.
         * 
         * @return builder
         * 
         */
        public Builder forceDelete(Boolean forceDelete) {
            return forceDelete(Output.of(forceDelete));
        }

        /**
         * @param gcrGen GCR access token generator specific configuration.
         * 
         * @return builder
         * 
         */
        public Builder gcrGen(@Nullable Output<GitOpsRepositoryGcrGenArgs> gcrGen) {
            $.gcrGen = gcrGen;
            return this;
        }

        /**
         * @param gcrGen GCR access token generator specific configuration.
         * 
         * @return builder
         * 
         */
        public Builder gcrGen(GitOpsRepositoryGcrGenArgs gcrGen) {
            return gcrGen(Output.of(gcrGen));
        }

        /**
         * @param genType Default: &#34;UNSET&#34;
         * Enum: &#34;UNSET&#34; &#34;AWS*ECR&#34; &#34;GOOGLE*GCR&#34;
         * 
         * @return builder
         * 
         */
        public Builder genType(@Nullable Output<String> genType) {
            $.genType = genType;
            return this;
        }

        /**
         * @param genType Default: &#34;UNSET&#34;
         * Enum: &#34;UNSET&#34; &#34;AWS*ECR&#34; &#34;GOOGLE*GCR&#34;
         * 
         * @return builder
         * 
         */
        public Builder genType(String genType) {
            return genType(Output.of(genType));
        }

        /**
         * @param identifier Identifier of the GitOps repository.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Identifier of the GitOps repository.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param orgId Organization identifier of the GitOps repository.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Organization identifier of the GitOps repository.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Project identifier of the GitOps repository.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project identifier of the GitOps repository.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param refreshInterval For OCI repos, this is the interval to refresh the token to access the registry.
         * 
         * @return builder
         * 
         */
        public Builder refreshInterval(@Nullable Output<String> refreshInterval) {
            $.refreshInterval = refreshInterval;
            return this;
        }

        /**
         * @param refreshInterval For OCI repos, this is the interval to refresh the token to access the registry.
         * 
         * @return builder
         * 
         */
        public Builder refreshInterval(String refreshInterval) {
            return refreshInterval(Output.of(refreshInterval));
        }

        /**
         * @param repos Repo details holding application configurations.
         * 
         * @return builder
         * 
         */
        public Builder repos(Output<List<GitOpsRepositoryRepoArgs>> repos) {
            $.repos = repos;
            return this;
        }

        /**
         * @param repos Repo details holding application configurations.
         * 
         * @return builder
         * 
         */
        public Builder repos(List<GitOpsRepositoryRepoArgs> repos) {
            return repos(Output.of(repos));
        }

        /**
         * @param repos Repo details holding application configurations.
         * 
         * @return builder
         * 
         */
        public Builder repos(GitOpsRepositoryRepoArgs... repos) {
            return repos(List.of(repos));
        }

        /**
         * @param updateMasks Update mask of the repository.
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed in a future release.
         * 
         */
        @Deprecated /* This field is deprecated and will be removed in a future release. */
        public Builder updateMasks(@Nullable Output<List<GitOpsRepositoryUpdateMaskArgs>> updateMasks) {
            $.updateMasks = updateMasks;
            return this;
        }

        /**
         * @param updateMasks Update mask of the repository.
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed in a future release.
         * 
         */
        @Deprecated /* This field is deprecated and will be removed in a future release. */
        public Builder updateMasks(List<GitOpsRepositoryUpdateMaskArgs> updateMasks) {
            return updateMasks(Output.of(updateMasks));
        }

        /**
         * @param updateMasks Update mask of the repository.
         * 
         * @return builder
         * 
         * @deprecated
         * This field is deprecated and will be removed in a future release.
         * 
         */
        @Deprecated /* This field is deprecated and will be removed in a future release. */
        public Builder updateMasks(GitOpsRepositoryUpdateMaskArgs... updateMasks) {
            return updateMasks(List.of(updateMasks));
        }

        /**
         * @param upsert Indicates if the GitOps repository should be updated if existing and inserted if not.
         * 
         * @return builder
         * 
         */
        public Builder upsert(@Nullable Output<Boolean> upsert) {
            $.upsert = upsert;
            return this;
        }

        /**
         * @param upsert Indicates if the GitOps repository should be updated if existing and inserted if not.
         * 
         * @return builder
         * 
         */
        public Builder upsert(Boolean upsert) {
            return upsert(Output.of(upsert));
        }

        public GitOpsRepositoryArgs build() {
            if ($.agentId == null) {
                throw new MissingRequiredPropertyException("GitOpsRepositoryArgs", "agentId");
            }
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("GitOpsRepositoryArgs", "identifier");
            }
            if ($.repos == null) {
                throw new MissingRequiredPropertyException("GitOpsRepositoryArgs", "repos");
            }
            return $;
        }
    }

}
