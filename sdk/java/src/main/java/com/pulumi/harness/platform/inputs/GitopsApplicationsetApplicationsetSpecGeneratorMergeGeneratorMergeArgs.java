// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeGeneratorArgs;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeTemplateArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeArgs Empty = new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeArgs();

    /**
     * Child generator. Generators are responsible for generating parameters, which are then combined by the parent merge generator.
     * 
     */
    @Import(name="generators", required=true)
    private Output<List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeGeneratorArgs>> generators;

    /**
     * @return Child generator. Generators are responsible for generating parameters, which are then combined by the parent merge generator.
     * 
     */
    public Output<List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeGeneratorArgs>> generators() {
        return this.generators;
    }

    /**
     * Keys to merge into resulting parameter set.
     * 
     */
    @Import(name="mergeKeys", required=true)
    private Output<List<String>> mergeKeys;

    /**
     * @return Keys to merge into resulting parameter set.
     * 
     */
    public Output<List<String>> mergeKeys() {
        return this.mergeKeys;
    }

    /**
     * Generator template. Used to override the values of the spec-level template.
     * 
     */
    @Import(name="template")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeTemplateArgs> template;

    /**
     * @return Generator template. Used to override the values of the spec-level template.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeTemplateArgs>> template() {
        return Optional.ofNullable(this.template);
    }

    private GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeArgs() {}

    private GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeArgs(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeArgs $) {
        this.generators = $.generators;
        this.mergeKeys = $.mergeKeys;
        this.template = $.template;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeArgs $;

        public Builder() {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeArgs();
        }

        public Builder(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeArgs defaults) {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param generators Child generator. Generators are responsible for generating parameters, which are then combined by the parent merge generator.
         * 
         * @return builder
         * 
         */
        public Builder generators(Output<List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeGeneratorArgs>> generators) {
            $.generators = generators;
            return this;
        }

        /**
         * @param generators Child generator. Generators are responsible for generating parameters, which are then combined by the parent merge generator.
         * 
         * @return builder
         * 
         */
        public Builder generators(List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeGeneratorArgs> generators) {
            return generators(Output.of(generators));
        }

        /**
         * @param generators Child generator. Generators are responsible for generating parameters, which are then combined by the parent merge generator.
         * 
         * @return builder
         * 
         */
        public Builder generators(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeGeneratorArgs... generators) {
            return generators(List.of(generators));
        }

        /**
         * @param mergeKeys Keys to merge into resulting parameter set.
         * 
         * @return builder
         * 
         */
        public Builder mergeKeys(Output<List<String>> mergeKeys) {
            $.mergeKeys = mergeKeys;
            return this;
        }

        /**
         * @param mergeKeys Keys to merge into resulting parameter set.
         * 
         * @return builder
         * 
         */
        public Builder mergeKeys(List<String> mergeKeys) {
            return mergeKeys(Output.of(mergeKeys));
        }

        /**
         * @param mergeKeys Keys to merge into resulting parameter set.
         * 
         * @return builder
         * 
         */
        public Builder mergeKeys(String... mergeKeys) {
            return mergeKeys(List.of(mergeKeys));
        }

        /**
         * @param template Generator template. Used to override the values of the spec-level template.
         * 
         * @return builder
         * 
         */
        public Builder template(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeTemplateArgs> template) {
            $.template = template;
            return this;
        }

        /**
         * @param template Generator template. Used to override the values of the spec-level template.
         * 
         * @return builder
         * 
         */
        public Builder template(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeTemplateArgs template) {
            return template(Output.of(template));
        }

        public GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeArgs build() {
            if ($.generators == null) {
                throw new MissingRequiredPropertyException("GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeArgs", "generators");
            }
            if ($.mergeKeys == null) {
                throw new MissingRequiredPropertyException("GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMergeArgs", "mergeKeys");
            }
            return $;
        }
    }

}
