// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GetCentralNotificationRuleCustomNotificationTemplateRef;
import com.pulumi.harness.platform.inputs.GetCentralNotificationRuleNotificationCondition;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCentralNotificationRulePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCentralNotificationRulePlainArgs Empty = new GetCentralNotificationRulePlainArgs();

    @Import(name="customNotificationTemplateRef")
    private @Nullable GetCentralNotificationRuleCustomNotificationTemplateRef customNotificationTemplateRef;

    public Optional<GetCentralNotificationRuleCustomNotificationTemplateRef> customNotificationTemplateRef() {
        return Optional.ofNullable(this.customNotificationTemplateRef);
    }

    /**
     * Identifier of the Notification Rule.
     * 
     */
    @Import(name="identifier", required=true)
    private String identifier;

    /**
     * @return Identifier of the Notification Rule.
     * 
     */
    public String identifier() {
        return this.identifier;
    }

    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="notificationChannelRefs")
    private @Nullable List<String> notificationChannelRefs;

    public Optional<List<String>> notificationChannelRefs() {
        return Optional.ofNullable(this.notificationChannelRefs);
    }

    @Import(name="notificationConditions")
    private @Nullable List<GetCentralNotificationRuleNotificationCondition> notificationConditions;

    public Optional<List<GetCentralNotificationRuleNotificationCondition>> notificationConditions() {
        return Optional.ofNullable(this.notificationConditions);
    }

    /**
     * Identifier of the organization in which the Notification Rule is configured.
     * 
     */
    @Import(name="org")
    private @Nullable String org;

    /**
     * @return Identifier of the organization in which the Notification Rule is configured.
     * 
     */
    public Optional<String> org() {
        return Optional.ofNullable(this.org);
    }

    /**
     * Identifier of the project in which the Notification Rule is configured.
     * 
     */
    @Import(name="project")
    private @Nullable String project;

    /**
     * @return Identifier of the project in which the Notification Rule is configured.
     * 
     */
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="status")
    private @Nullable String status;

    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    private GetCentralNotificationRulePlainArgs() {}

    private GetCentralNotificationRulePlainArgs(GetCentralNotificationRulePlainArgs $) {
        this.customNotificationTemplateRef = $.customNotificationTemplateRef;
        this.identifier = $.identifier;
        this.name = $.name;
        this.notificationChannelRefs = $.notificationChannelRefs;
        this.notificationConditions = $.notificationConditions;
        this.org = $.org;
        this.project = $.project;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCentralNotificationRulePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCentralNotificationRulePlainArgs $;

        public Builder() {
            $ = new GetCentralNotificationRulePlainArgs();
        }

        public Builder(GetCentralNotificationRulePlainArgs defaults) {
            $ = new GetCentralNotificationRulePlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder customNotificationTemplateRef(@Nullable GetCentralNotificationRuleCustomNotificationTemplateRef customNotificationTemplateRef) {
            $.customNotificationTemplateRef = customNotificationTemplateRef;
            return this;
        }

        /**
         * @param identifier Identifier of the Notification Rule.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            $.identifier = identifier;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder notificationChannelRefs(@Nullable List<String> notificationChannelRefs) {
            $.notificationChannelRefs = notificationChannelRefs;
            return this;
        }

        public Builder notificationChannelRefs(String... notificationChannelRefs) {
            return notificationChannelRefs(List.of(notificationChannelRefs));
        }

        public Builder notificationConditions(@Nullable List<GetCentralNotificationRuleNotificationCondition> notificationConditions) {
            $.notificationConditions = notificationConditions;
            return this;
        }

        public Builder notificationConditions(GetCentralNotificationRuleNotificationCondition... notificationConditions) {
            return notificationConditions(List.of(notificationConditions));
        }

        /**
         * @param org Identifier of the organization in which the Notification Rule is configured.
         * 
         * @return builder
         * 
         */
        public Builder org(@Nullable String org) {
            $.org = org;
            return this;
        }

        /**
         * @param project Identifier of the project in which the Notification Rule is configured.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable String project) {
            $.project = project;
            return this;
        }

        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        public GetCentralNotificationRulePlainArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("GetCentralNotificationRulePlainArgs", "identifier");
            }
            return $;
        }
    }

}
