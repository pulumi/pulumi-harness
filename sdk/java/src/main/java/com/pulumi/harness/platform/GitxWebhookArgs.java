// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitxWebhookArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitxWebhookArgs Empty = new GitxWebhookArgs();

    /**
     * ConnectorRef to be used to create Gitx webhook.
     * 
     */
    @Import(name="connectorRef", required=true)
    private Output<String> connectorRef;

    /**
     * @return ConnectorRef to be used to create Gitx webhook.
     * 
     */
    public Output<String> connectorRef() {
        return this.connectorRef;
    }

    /**
     * Description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Folder Paths
     * 
     */
    @Import(name="folderPaths")
    private @Nullable Output<List<String>> folderPaths;

    /**
     * @return Folder Paths
     * 
     */
    public Optional<Output<List<String>>> folderPaths() {
        return Optional.ofNullable(this.folderPaths);
    }

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * Flag to enable the webhook
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    /**
     * @return Flag to enable the webhook
     * 
     */
    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Repo Identifier for Gitx webhook.
     * 
     */
    @Import(name="repoName", required=true)
    private Output<String> repoName;

    /**
     * @return Repo Identifier for Gitx webhook.
     * 
     */
    public Output<String> repoName() {
        return this.repoName;
    }

    /**
     * Tags to associate with the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags to associate with the resource.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private GitxWebhookArgs() {}

    private GitxWebhookArgs(GitxWebhookArgs $) {
        this.connectorRef = $.connectorRef;
        this.description = $.description;
        this.folderPaths = $.folderPaths;
        this.identifier = $.identifier;
        this.isEnabled = $.isEnabled;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.repoName = $.repoName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitxWebhookArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitxWebhookArgs $;

        public Builder() {
            $ = new GitxWebhookArgs();
        }

        public Builder(GitxWebhookArgs defaults) {
            $ = new GitxWebhookArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectorRef ConnectorRef to be used to create Gitx webhook.
         * 
         * @return builder
         * 
         */
        public Builder connectorRef(Output<String> connectorRef) {
            $.connectorRef = connectorRef;
            return this;
        }

        /**
         * @param connectorRef ConnectorRef to be used to create Gitx webhook.
         * 
         * @return builder
         * 
         */
        public Builder connectorRef(String connectorRef) {
            return connectorRef(Output.of(connectorRef));
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param folderPaths Folder Paths
         * 
         * @return builder
         * 
         */
        public Builder folderPaths(@Nullable Output<List<String>> folderPaths) {
            $.folderPaths = folderPaths;
            return this;
        }

        /**
         * @param folderPaths Folder Paths
         * 
         * @return builder
         * 
         */
        public Builder folderPaths(List<String> folderPaths) {
            return folderPaths(Output.of(folderPaths));
        }

        /**
         * @param folderPaths Folder Paths
         * 
         * @return builder
         * 
         */
        public Builder folderPaths(String... folderPaths) {
            return folderPaths(List.of(folderPaths));
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param isEnabled Flag to enable the webhook
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled Flag to enable the webhook
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param repoName Repo Identifier for Gitx webhook.
         * 
         * @return builder
         * 
         */
        public Builder repoName(Output<String> repoName) {
            $.repoName = repoName;
            return this;
        }

        /**
         * @param repoName Repo Identifier for Gitx webhook.
         * 
         * @return builder
         * 
         */
        public Builder repoName(String repoName) {
            return repoName(Output.of(repoName));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public GitxWebhookArgs build() {
            if ($.connectorRef == null) {
                throw new MissingRequiredPropertyException("GitxWebhookArgs", "connectorRef");
            }
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("GitxWebhookArgs", "identifier");
            }
            if ($.repoName == null) {
                throw new MissingRequiredPropertyException("GitxWebhookArgs", "repoName");
            }
            return $;
        }
    }

}
