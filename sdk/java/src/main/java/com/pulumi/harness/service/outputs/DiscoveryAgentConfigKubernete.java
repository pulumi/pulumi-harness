// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.service.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.service.outputs.DiscoveryAgentConfigKuberneteResource;
import com.pulumi.harness.service.outputs.DiscoveryAgentConfigKuberneteToleration;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DiscoveryAgentConfigKubernete {
    /**
     * @return Annotations to add to all resources.
     * 
     */
    private @Nullable Map<String,String> annotations;
    /**
     * @return Whether to disable namespace creation.
     * 
     */
    private @Nullable Boolean disableNamespaceCreation;
    /**
     * @return The image pull policy.
     * 
     */
    private @Nullable String imagePullPolicy;
    /**
     * @return Labels to add to all resources.
     * 
     */
    private @Nullable Map<String,String> labels;
    /**
     * @return Kubernetes namespace to use
     * 
     */
    private String namespace;
    /**
     * @return Whether the agent is namespaced.
     * 
     */
    private @Nullable Boolean namespaced;
    /**
     * @return Node selector labels.
     * 
     */
    private @Nullable Map<String,String> nodeSelector;
    /**
     * @return Compute resource requirements for the agent container.
     * 
     */
    private @Nullable List<DiscoveryAgentConfigKuberneteResource> resources;
    /**
     * @return The group ID to run as.
     * 
     */
    private @Nullable Integer runAsGroup;
    /**
     * @return The user ID to run as.
     * 
     */
    private @Nullable Integer runAsUser;
    /**
     * @return Service account to use
     * 
     */
    private @Nullable String serviceAccount;
    /**
     * @return Tolerations for pod assignment.
     * 
     */
    private @Nullable List<DiscoveryAgentConfigKuberneteToleration> tolerations;

    private DiscoveryAgentConfigKubernete() {}
    /**
     * @return Annotations to add to all resources.
     * 
     */
    public Map<String,String> annotations() {
        return this.annotations == null ? Map.of() : this.annotations;
    }
    /**
     * @return Whether to disable namespace creation.
     * 
     */
    public Optional<Boolean> disableNamespaceCreation() {
        return Optional.ofNullable(this.disableNamespaceCreation);
    }
    /**
     * @return The image pull policy.
     * 
     */
    public Optional<String> imagePullPolicy() {
        return Optional.ofNullable(this.imagePullPolicy);
    }
    /**
     * @return Labels to add to all resources.
     * 
     */
    public Map<String,String> labels() {
        return this.labels == null ? Map.of() : this.labels;
    }
    /**
     * @return Kubernetes namespace to use
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return Whether the agent is namespaced.
     * 
     */
    public Optional<Boolean> namespaced() {
        return Optional.ofNullable(this.namespaced);
    }
    /**
     * @return Node selector labels.
     * 
     */
    public Map<String,String> nodeSelector() {
        return this.nodeSelector == null ? Map.of() : this.nodeSelector;
    }
    /**
     * @return Compute resource requirements for the agent container.
     * 
     */
    public List<DiscoveryAgentConfigKuberneteResource> resources() {
        return this.resources == null ? List.of() : this.resources;
    }
    /**
     * @return The group ID to run as.
     * 
     */
    public Optional<Integer> runAsGroup() {
        return Optional.ofNullable(this.runAsGroup);
    }
    /**
     * @return The user ID to run as.
     * 
     */
    public Optional<Integer> runAsUser() {
        return Optional.ofNullable(this.runAsUser);
    }
    /**
     * @return Service account to use
     * 
     */
    public Optional<String> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }
    /**
     * @return Tolerations for pod assignment.
     * 
     */
    public List<DiscoveryAgentConfigKuberneteToleration> tolerations() {
        return this.tolerations == null ? List.of() : this.tolerations;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DiscoveryAgentConfigKubernete defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Map<String,String> annotations;
        private @Nullable Boolean disableNamespaceCreation;
        private @Nullable String imagePullPolicy;
        private @Nullable Map<String,String> labels;
        private String namespace;
        private @Nullable Boolean namespaced;
        private @Nullable Map<String,String> nodeSelector;
        private @Nullable List<DiscoveryAgentConfigKuberneteResource> resources;
        private @Nullable Integer runAsGroup;
        private @Nullable Integer runAsUser;
        private @Nullable String serviceAccount;
        private @Nullable List<DiscoveryAgentConfigKuberneteToleration> tolerations;
        public Builder() {}
        public Builder(DiscoveryAgentConfigKubernete defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.disableNamespaceCreation = defaults.disableNamespaceCreation;
    	      this.imagePullPolicy = defaults.imagePullPolicy;
    	      this.labels = defaults.labels;
    	      this.namespace = defaults.namespace;
    	      this.namespaced = defaults.namespaced;
    	      this.nodeSelector = defaults.nodeSelector;
    	      this.resources = defaults.resources;
    	      this.runAsGroup = defaults.runAsGroup;
    	      this.runAsUser = defaults.runAsUser;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.tolerations = defaults.tolerations;
        }

        @CustomType.Setter
        public Builder annotations(@Nullable Map<String,String> annotations) {

            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder disableNamespaceCreation(@Nullable Boolean disableNamespaceCreation) {

            this.disableNamespaceCreation = disableNamespaceCreation;
            return this;
        }
        @CustomType.Setter
        public Builder imagePullPolicy(@Nullable String imagePullPolicy) {

            this.imagePullPolicy = imagePullPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder labels(@Nullable Map<String,String> labels) {

            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("DiscoveryAgentConfigKubernete", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder namespaced(@Nullable Boolean namespaced) {

            this.namespaced = namespaced;
            return this;
        }
        @CustomType.Setter
        public Builder nodeSelector(@Nullable Map<String,String> nodeSelector) {

            this.nodeSelector = nodeSelector;
            return this;
        }
        @CustomType.Setter
        public Builder resources(@Nullable List<DiscoveryAgentConfigKuberneteResource> resources) {

            this.resources = resources;
            return this;
        }
        public Builder resources(DiscoveryAgentConfigKuberneteResource... resources) {
            return resources(List.of(resources));
        }
        @CustomType.Setter
        public Builder runAsGroup(@Nullable Integer runAsGroup) {

            this.runAsGroup = runAsGroup;
            return this;
        }
        @CustomType.Setter
        public Builder runAsUser(@Nullable Integer runAsUser) {

            this.runAsUser = runAsUser;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccount(@Nullable String serviceAccount) {

            this.serviceAccount = serviceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder tolerations(@Nullable List<DiscoveryAgentConfigKuberneteToleration> tolerations) {

            this.tolerations = tolerations;
            return this;
        }
        public Builder tolerations(DiscoveryAgentConfigKuberneteToleration... tolerations) {
            return tolerations(List.of(tolerations));
        }
        public DiscoveryAgentConfigKubernete build() {
            final var _resultValue = new DiscoveryAgentConfigKubernete();
            _resultValue.annotations = annotations;
            _resultValue.disableNamespaceCreation = disableNamespaceCreation;
            _resultValue.imagePullPolicy = imagePullPolicy;
            _resultValue.labels = labels;
            _resultValue.namespace = namespace;
            _resultValue.namespaced = namespaced;
            _resultValue.nodeSelector = nodeSelector;
            _resultValue.resources = resources;
            _resultValue.runAsGroup = runAsGroup;
            _resultValue.runAsUser = runAsUser;
            _resultValue.serviceAccount = serviceAccount;
            _resultValue.tolerations = tolerations;
            return _resultValue;
        }
    }
}
