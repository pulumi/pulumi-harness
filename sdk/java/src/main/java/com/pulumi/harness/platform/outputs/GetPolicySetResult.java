// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GetPolicySetPolicy;
import com.pulumi.harness.platform.outputs.GetPolicySetPolicyReference;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPolicySetResult {
    /**
     * @return Action code for the policyset.
     * 
     */
    private String action;
    /**
     * @return Description of the resource.
     * 
     */
    private String description;
    /**
     * @return Enabled for the policyset.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Unique identifier of the resource.
     * 
     */
    private String identifier;
    /**
     * @return Name of the resource.
     * 
     */
    private @Nullable String name;
    /**
     * @return Unique identifier of the organization.
     * 
     */
    private @Nullable String orgId;
    /**
     * @return List of policy identifiers / severity for the policyset. Deprecated: Use &#39;policy_references&#39; instead.
     * 
     * @deprecated
     * Use &#39;policy_references&#39; instead. This field will be removed in a future version.
     * 
     */
    @Deprecated /* Use 'policy_references' instead. This field will be removed in a future version. */
    private List<GetPolicySetPolicy> policies;
    /**
     * @return Set of policy identifiers / severity for the policyset. Order is not significant.
     * 
     */
    private List<GetPolicySetPolicyReference> policyReferences;
    /**
     * @return Unique identifier of the project.
     * 
     */
    private @Nullable String projectId;
    /**
     * @return Tags to associate with the resource.
     * 
     */
    private List<String> tags;
    /**
     * @return Type of the policyset.
     * 
     */
    private String type;

    private GetPolicySetResult() {}
    /**
     * @return Action code for the policyset.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return Description of the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Enabled for the policyset.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Unique identifier of the resource.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return Name of the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }
    /**
     * @return List of policy identifiers / severity for the policyset. Deprecated: Use &#39;policy_references&#39; instead.
     * 
     * @deprecated
     * Use &#39;policy_references&#39; instead. This field will be removed in a future version.
     * 
     */
    @Deprecated /* Use 'policy_references' instead. This field will be removed in a future version. */
    public List<GetPolicySetPolicy> policies() {
        return this.policies;
    }
    /**
     * @return Set of policy identifiers / severity for the policyset. Order is not significant.
     * 
     */
    public List<GetPolicySetPolicyReference> policyReferences() {
        return this.policyReferences;
    }
    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return Tags to associate with the resource.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return Type of the policyset.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPolicySetResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private String description;
        private @Nullable Boolean enabled;
        private String id;
        private String identifier;
        private @Nullable String name;
        private @Nullable String orgId;
        private List<GetPolicySetPolicy> policies;
        private List<GetPolicySetPolicyReference> policyReferences;
        private @Nullable String projectId;
        private List<String> tags;
        private String type;
        public Builder() {}
        public Builder(GetPolicySetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.description = defaults.description;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.policies = defaults.policies;
    	      this.policyReferences = defaults.policyReferences;
    	      this.projectId = defaults.projectId;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("GetPolicySetResult", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetPolicySetResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPolicySetResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            if (identifier == null) {
              throw new MissingRequiredPropertyException("GetPolicySetResult", "identifier");
            }
            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(@Nullable String orgId) {

            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder policies(List<GetPolicySetPolicy> policies) {
            if (policies == null) {
              throw new MissingRequiredPropertyException("GetPolicySetResult", "policies");
            }
            this.policies = policies;
            return this;
        }
        public Builder policies(GetPolicySetPolicy... policies) {
            return policies(List.of(policies));
        }
        @CustomType.Setter
        public Builder policyReferences(List<GetPolicySetPolicyReference> policyReferences) {
            if (policyReferences == null) {
              throw new MissingRequiredPropertyException("GetPolicySetResult", "policyReferences");
            }
            this.policyReferences = policyReferences;
            return this;
        }
        public Builder policyReferences(GetPolicySetPolicyReference... policyReferences) {
            return policyReferences(List.of(policyReferences));
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetPolicySetResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetPolicySetResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetPolicySetResult build() {
            final var _resultValue = new GetPolicySetResult();
            _resultValue.action = action;
            _resultValue.description = description;
            _resultValue.enabled = enabled;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.name = name;
            _resultValue.orgId = orgId;
            _resultValue.policies = policies;
            _resultValue.policyReferences = policyReferences;
            _resultValue.projectId = projectId;
            _resultValue.tags = tags;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
