// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cloudprovider;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AzureArgs extends com.pulumi.resources.ResourceArgs {

    public static final AzureArgs Empty = new AzureArgs();

    /**
     * The client id for the Azure application
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return The client id for the Azure application
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * The type of environment. Valid options are [AZURE AZURE*US*GOVERNMENT]
     * 
     */
    @Import(name="environmentType")
    private @Nullable Output<String> environmentType;

    /**
     * @return The type of environment. Valid options are [AZURE AZURE*US*GOVERNMENT]
     * 
     */
    public Optional<Output<String>> environmentType() {
        return Optional.ofNullable(this.environmentType);
    }

    /**
     * The Name of the Harness secret containing the key for the Azure application
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return The Name of the Harness secret containing the key for the Azure application
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * The name of the cloud provider.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the cloud provider.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The tenant id for the Azure application
     * 
     */
    @Import(name="tenantId", required=true)
    private Output<String> tenantId;

    /**
     * @return The tenant id for the Azure application
     * 
     */
    public Output<String> tenantId() {
        return this.tenantId;
    }

    private AzureArgs() {}

    private AzureArgs(AzureArgs $) {
        this.clientId = $.clientId;
        this.environmentType = $.environmentType;
        this.key = $.key;
        this.name = $.name;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureArgs $;

        public Builder() {
            $ = new AzureArgs();
        }

        public Builder(AzureArgs defaults) {
            $ = new AzureArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId The client id for the Azure application
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The client id for the Azure application
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param environmentType The type of environment. Valid options are [AZURE AZURE*US*GOVERNMENT]
         * 
         * @return builder
         * 
         */
        public Builder environmentType(@Nullable Output<String> environmentType) {
            $.environmentType = environmentType;
            return this;
        }

        /**
         * @param environmentType The type of environment. Valid options are [AZURE AZURE*US*GOVERNMENT]
         * 
         * @return builder
         * 
         */
        public Builder environmentType(String environmentType) {
            return environmentType(Output.of(environmentType));
        }

        /**
         * @param key The Name of the Harness secret containing the key for the Azure application
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The Name of the Harness secret containing the key for the Azure application
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param name The name of the cloud provider.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the cloud provider.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tenantId The tenant id for the Azure application
         * 
         * @return builder
         * 
         */
        public Builder tenantId(Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId The tenant id for the Azure application
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public AzureArgs build() {
            if ($.clientId == null) {
                throw new MissingRequiredPropertyException("AzureArgs", "clientId");
            }
            if ($.key == null) {
                throw new MissingRequiredPropertyException("AzureArgs", "key");
            }
            if ($.tenantId == null) {
                throw new MissingRequiredPropertyException("AzureArgs", "tenantId");
            }
            return $;
        }
    }

}
