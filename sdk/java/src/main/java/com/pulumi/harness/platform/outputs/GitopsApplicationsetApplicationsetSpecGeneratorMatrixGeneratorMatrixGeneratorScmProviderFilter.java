// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderFilter {
    /**
     * @return A regex which must match the branch name.
     * 
     */
    private @Nullable String branchMatch;
    /**
     * @return A regex which must match at least one label.
     * 
     */
    private @Nullable String labelMatch;
    /**
     * @return An array of paths, all of which must not exist.
     * 
     */
    private @Nullable List<String> pathsDoNotExists;
    /**
     * @return An array of paths, all of which must exist.
     * 
     */
    private @Nullable List<String> pathsExists;
    /**
     * @return A regex for repo names.
     * 
     */
    private @Nullable String repositoryMatch;

    private GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderFilter() {}
    /**
     * @return A regex which must match the branch name.
     * 
     */
    public Optional<String> branchMatch() {
        return Optional.ofNullable(this.branchMatch);
    }
    /**
     * @return A regex which must match at least one label.
     * 
     */
    public Optional<String> labelMatch() {
        return Optional.ofNullable(this.labelMatch);
    }
    /**
     * @return An array of paths, all of which must not exist.
     * 
     */
    public List<String> pathsDoNotExists() {
        return this.pathsDoNotExists == null ? List.of() : this.pathsDoNotExists;
    }
    /**
     * @return An array of paths, all of which must exist.
     * 
     */
    public List<String> pathsExists() {
        return this.pathsExists == null ? List.of() : this.pathsExists;
    }
    /**
     * @return A regex for repo names.
     * 
     */
    public Optional<String> repositoryMatch() {
        return Optional.ofNullable(this.repositoryMatch);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String branchMatch;
        private @Nullable String labelMatch;
        private @Nullable List<String> pathsDoNotExists;
        private @Nullable List<String> pathsExists;
        private @Nullable String repositoryMatch;
        public Builder() {}
        public Builder(GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branchMatch = defaults.branchMatch;
    	      this.labelMatch = defaults.labelMatch;
    	      this.pathsDoNotExists = defaults.pathsDoNotExists;
    	      this.pathsExists = defaults.pathsExists;
    	      this.repositoryMatch = defaults.repositoryMatch;
        }

        @CustomType.Setter
        public Builder branchMatch(@Nullable String branchMatch) {

            this.branchMatch = branchMatch;
            return this;
        }
        @CustomType.Setter
        public Builder labelMatch(@Nullable String labelMatch) {

            this.labelMatch = labelMatch;
            return this;
        }
        @CustomType.Setter
        public Builder pathsDoNotExists(@Nullable List<String> pathsDoNotExists) {

            this.pathsDoNotExists = pathsDoNotExists;
            return this;
        }
        public Builder pathsDoNotExists(String... pathsDoNotExists) {
            return pathsDoNotExists(List.of(pathsDoNotExists));
        }
        @CustomType.Setter
        public Builder pathsExists(@Nullable List<String> pathsExists) {

            this.pathsExists = pathsExists;
            return this;
        }
        public Builder pathsExists(String... pathsExists) {
            return pathsExists(List.of(pathsExists));
        }
        @CustomType.Setter
        public Builder repositoryMatch(@Nullable String repositoryMatch) {

            this.repositoryMatch = repositoryMatch;
            return this;
        }
        public GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderFilter build() {
            final var _resultValue = new GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderFilter();
            _resultValue.branchMatch = branchMatch;
            _resultValue.labelMatch = labelMatch;
            _resultValue.pathsDoNotExists = pathsDoNotExists;
            _resultValue.pathsExists = pathsExists;
            _resultValue.repositoryMatch = repositoryMatch;
            return _resultValue;
        }
    }
}
