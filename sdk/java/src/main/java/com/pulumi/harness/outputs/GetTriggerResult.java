// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.outputs.GetTriggerCondition;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTriggerResult {
    /**
     * @return The id of the application.
     * 
     */
    private @Nullable String appId;
    /**
     * @return The condition that will execute the Trigger: On new artifact, On pipeline completion, On Cron schedule, On webhook, On New Manifest.
     * 
     */
    private List<GetTriggerCondition> conditions;
    /**
     * @return The trigger description.
     * 
     */
    private @Nullable String description;
    /**
     * @return Unique identifier of the trigger.
     * 
     */
    private @Nullable String id;
    /**
     * @return The name of the trigger.
     * 
     */
    private @Nullable String name;

    private GetTriggerResult() {}
    /**
     * @return The id of the application.
     * 
     */
    public Optional<String> appId() {
        return Optional.ofNullable(this.appId);
    }
    /**
     * @return The condition that will execute the Trigger: On new artifact, On pipeline completion, On Cron schedule, On webhook, On New Manifest.
     * 
     */
    public List<GetTriggerCondition> conditions() {
        return this.conditions;
    }
    /**
     * @return The trigger description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Unique identifier of the trigger.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The name of the trigger.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTriggerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String appId;
        private List<GetTriggerCondition> conditions;
        private @Nullable String description;
        private @Nullable String id;
        private @Nullable String name;
        public Builder() {}
        public Builder(GetTriggerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appId = defaults.appId;
    	      this.conditions = defaults.conditions;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder appId(@Nullable String appId) {

            this.appId = appId;
            return this;
        }
        @CustomType.Setter
        public Builder conditions(List<GetTriggerCondition> conditions) {
            if (conditions == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "conditions");
            }
            this.conditions = conditions;
            return this;
        }
        public Builder conditions(GetTriggerCondition... conditions) {
            return conditions(List.of(conditions));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        public GetTriggerResult build() {
            final var _resultValue = new GetTriggerResult();
            _resultValue.appId = appId;
            _resultValue.conditions = conditions;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
