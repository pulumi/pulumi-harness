// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cloudprovider;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.cloudprovider.inputs.GcpUsageScopeArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GcpArgs extends com.pulumi.resources.ResourceArgs {

    public static final GcpArgs Empty = new GcpArgs();

    /**
     * Delegate selectors to use for this provider.
     * 
     */
    @Import(name="delegateSelectors")
    private @Nullable Output<List<String>> delegateSelectors;

    /**
     * @return Delegate selectors to use for this provider.
     * 
     */
    public Optional<Output<List<String>>> delegateSelectors() {
        return Optional.ofNullable(this.delegateSelectors);
    }

    /**
     * The name of the cloud provider.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the cloud provider.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The id of the secret containing the GCP credentials
     * 
     */
    @Import(name="secretFileId")
    private @Nullable Output<String> secretFileId;

    /**
     * @return The id of the secret containing the GCP credentials
     * 
     */
    public Optional<Output<String>> secretFileId() {
        return Optional.ofNullable(this.secretFileId);
    }

    /**
     * Skip validation of GCP configuration.
     * 
     */
    @Import(name="skipValidation")
    private @Nullable Output<Boolean> skipValidation;

    /**
     * @return Skip validation of GCP configuration.
     * 
     */
    public Optional<Output<Boolean>> skipValidation() {
        return Optional.ofNullable(this.skipValidation);
    }

    /**
     * This block is used for scoping the resource to a specific set of applications or environments.
     * 
     */
    @Import(name="usageScopes")
    private @Nullable Output<List<GcpUsageScopeArgs>> usageScopes;

    /**
     * @return This block is used for scoping the resource to a specific set of applications or environments.
     * 
     */
    public Optional<Output<List<GcpUsageScopeArgs>>> usageScopes() {
        return Optional.ofNullable(this.usageScopes);
    }

    private GcpArgs() {}

    private GcpArgs(GcpArgs $) {
        this.delegateSelectors = $.delegateSelectors;
        this.name = $.name;
        this.secretFileId = $.secretFileId;
        this.skipValidation = $.skipValidation;
        this.usageScopes = $.usageScopes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GcpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GcpArgs $;

        public Builder() {
            $ = new GcpArgs();
        }

        public Builder(GcpArgs defaults) {
            $ = new GcpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param delegateSelectors Delegate selectors to use for this provider.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(@Nullable Output<List<String>> delegateSelectors) {
            $.delegateSelectors = delegateSelectors;
            return this;
        }

        /**
         * @param delegateSelectors Delegate selectors to use for this provider.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(List<String> delegateSelectors) {
            return delegateSelectors(Output.of(delegateSelectors));
        }

        /**
         * @param delegateSelectors Delegate selectors to use for this provider.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(String... delegateSelectors) {
            return delegateSelectors(List.of(delegateSelectors));
        }

        /**
         * @param name The name of the cloud provider.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the cloud provider.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param secretFileId The id of the secret containing the GCP credentials
         * 
         * @return builder
         * 
         */
        public Builder secretFileId(@Nullable Output<String> secretFileId) {
            $.secretFileId = secretFileId;
            return this;
        }

        /**
         * @param secretFileId The id of the secret containing the GCP credentials
         * 
         * @return builder
         * 
         */
        public Builder secretFileId(String secretFileId) {
            return secretFileId(Output.of(secretFileId));
        }

        /**
         * @param skipValidation Skip validation of GCP configuration.
         * 
         * @return builder
         * 
         */
        public Builder skipValidation(@Nullable Output<Boolean> skipValidation) {
            $.skipValidation = skipValidation;
            return this;
        }

        /**
         * @param skipValidation Skip validation of GCP configuration.
         * 
         * @return builder
         * 
         */
        public Builder skipValidation(Boolean skipValidation) {
            return skipValidation(Output.of(skipValidation));
        }

        /**
         * @param usageScopes This block is used for scoping the resource to a specific set of applications or environments.
         * 
         * @return builder
         * 
         */
        public Builder usageScopes(@Nullable Output<List<GcpUsageScopeArgs>> usageScopes) {
            $.usageScopes = usageScopes;
            return this;
        }

        /**
         * @param usageScopes This block is used for scoping the resource to a specific set of applications or environments.
         * 
         * @return builder
         * 
         */
        public Builder usageScopes(List<GcpUsageScopeArgs> usageScopes) {
            return usageScopes(Output.of(usageScopes));
        }

        /**
         * @param usageScopes This block is used for scoping the resource to a specific set of applications or environments.
         * 
         * @return builder
         * 
         */
        public Builder usageScopes(GcpUsageScopeArgs... usageScopes) {
            return usageScopes(List.of(usageScopes));
        }

        public GcpArgs build() {
            return $;
        }
    }

}
