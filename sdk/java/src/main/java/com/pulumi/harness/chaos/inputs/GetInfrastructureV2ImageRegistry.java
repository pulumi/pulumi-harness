// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.chaos.inputs.GetInfrastructureV2ImageRegistryCustomImage;
import com.pulumi.harness.chaos.inputs.GetInfrastructureV2ImageRegistryIdentifier;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetInfrastructureV2ImageRegistry extends com.pulumi.resources.InvokeArgs {

    public static final GetInfrastructureV2ImageRegistry Empty = new GetInfrastructureV2ImageRegistry();

    /**
     * Timestamp when the registry was created.
     * 
     */
    @Import(name="createdAt", required=true)
    private String createdAt;

    /**
     * @return Timestamp when the registry was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }

    /**
     * Custom image configurations. Required when use*custom*images is true.
     * 
     */
    @Import(name="customImages", required=true)
    private List<GetInfrastructureV2ImageRegistryCustomImage> customImages;

    /**
     * @return Custom image configurations. Required when use*custom*images is true.
     * 
     */
    public List<GetInfrastructureV2ImageRegistryCustomImage> customImages() {
        return this.customImages;
    }

    /**
     * Scoped identifiers for the registry.
     * 
     */
    @Import(name="identifiers", required=true)
    private List<GetInfrastructureV2ImageRegistryIdentifier> identifiers;

    /**
     * @return Scoped identifiers for the registry.
     * 
     */
    public List<GetInfrastructureV2ImageRegistryIdentifier> identifiers() {
        return this.identifiers;
    }

    /**
     * ID of the infrastructure.
     * 
     */
    @Import(name="infraId", required=true)
    private String infraId;

    /**
     * @return ID of the infrastructure.
     * 
     */
    public String infraId() {
        return this.infraId;
    }

    /**
     * Whether this is the default registry.
     * 
     */
    @Import(name="isDefault", required=true)
    private Boolean isDefault;

    /**
     * @return Whether this is the default registry.
     * 
     */
    public Boolean isDefault() {
        return this.isDefault;
    }

    /**
     * Whether override is allowed for this registry.
     * 
     */
    @Import(name="isOverrideAllowed", required=true)
    private Boolean isOverrideAllowed;

    /**
     * @return Whether override is allowed for this registry.
     * 
     */
    public Boolean isOverrideAllowed() {
        return this.isOverrideAllowed;
    }

    /**
     * Whether the registry is private.
     * 
     */
    @Import(name="isPrivate", required=true)
    private Boolean isPrivate;

    /**
     * @return Whether the registry is private.
     * 
     */
    public Boolean isPrivate() {
        return this.isPrivate;
    }

    /**
     * The account name for the container registry.
     * 
     */
    @Import(name="registryAccount", required=true)
    private String registryAccount;

    /**
     * @return The account name for the container registry.
     * 
     */
    public String registryAccount() {
        return this.registryAccount;
    }

    /**
     * The container image registry server URL (e.g., docker.io, gcr.io).
     * 
     */
    @Import(name="registryServer", required=true)
    private String registryServer;

    /**
     * @return The container image registry server URL (e.g., docker.io, gcr.io).
     * 
     */
    public String registryServer() {
        return this.registryServer;
    }

    /**
     * Name of the Kubernetes secret containing registry credentials.
     * 
     */
    @Import(name="secretName")
    private @Nullable String secretName;

    /**
     * @return Name of the Kubernetes secret containing registry credentials.
     * 
     */
    public Optional<String> secretName() {
        return Optional.ofNullable(this.secretName);
    }

    /**
     * Timestamp when the registry was last updated.
     * 
     */
    @Import(name="updatedAt", required=true)
    private String updatedAt;

    /**
     * @return Timestamp when the registry was last updated.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    /**
     * Whether to use custom images instead of default ones.
     * 
     */
    @Import(name="useCustomImages", required=true)
    private Boolean useCustomImages;

    /**
     * @return Whether to use custom images instead of default ones.
     * 
     */
    public Boolean useCustomImages() {
        return this.useCustomImages;
    }

    private GetInfrastructureV2ImageRegistry() {}

    private GetInfrastructureV2ImageRegistry(GetInfrastructureV2ImageRegistry $) {
        this.createdAt = $.createdAt;
        this.customImages = $.customImages;
        this.identifiers = $.identifiers;
        this.infraId = $.infraId;
        this.isDefault = $.isDefault;
        this.isOverrideAllowed = $.isOverrideAllowed;
        this.isPrivate = $.isPrivate;
        this.registryAccount = $.registryAccount;
        this.registryServer = $.registryServer;
        this.secretName = $.secretName;
        this.updatedAt = $.updatedAt;
        this.useCustomImages = $.useCustomImages;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInfrastructureV2ImageRegistry defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInfrastructureV2ImageRegistry $;

        public Builder() {
            $ = new GetInfrastructureV2ImageRegistry();
        }

        public Builder(GetInfrastructureV2ImageRegistry defaults) {
            $ = new GetInfrastructureV2ImageRegistry(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt Timestamp when the registry was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param customImages Custom image configurations. Required when use*custom*images is true.
         * 
         * @return builder
         * 
         */
        public Builder customImages(List<GetInfrastructureV2ImageRegistryCustomImage> customImages) {
            $.customImages = customImages;
            return this;
        }

        /**
         * @param customImages Custom image configurations. Required when use*custom*images is true.
         * 
         * @return builder
         * 
         */
        public Builder customImages(GetInfrastructureV2ImageRegistryCustomImage... customImages) {
            return customImages(List.of(customImages));
        }

        /**
         * @param identifiers Scoped identifiers for the registry.
         * 
         * @return builder
         * 
         */
        public Builder identifiers(List<GetInfrastructureV2ImageRegistryIdentifier> identifiers) {
            $.identifiers = identifiers;
            return this;
        }

        /**
         * @param identifiers Scoped identifiers for the registry.
         * 
         * @return builder
         * 
         */
        public Builder identifiers(GetInfrastructureV2ImageRegistryIdentifier... identifiers) {
            return identifiers(List.of(identifiers));
        }

        /**
         * @param infraId ID of the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder infraId(String infraId) {
            $.infraId = infraId;
            return this;
        }

        /**
         * @param isDefault Whether this is the default registry.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(Boolean isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        /**
         * @param isOverrideAllowed Whether override is allowed for this registry.
         * 
         * @return builder
         * 
         */
        public Builder isOverrideAllowed(Boolean isOverrideAllowed) {
            $.isOverrideAllowed = isOverrideAllowed;
            return this;
        }

        /**
         * @param isPrivate Whether the registry is private.
         * 
         * @return builder
         * 
         */
        public Builder isPrivate(Boolean isPrivate) {
            $.isPrivate = isPrivate;
            return this;
        }

        /**
         * @param registryAccount The account name for the container registry.
         * 
         * @return builder
         * 
         */
        public Builder registryAccount(String registryAccount) {
            $.registryAccount = registryAccount;
            return this;
        }

        /**
         * @param registryServer The container image registry server URL (e.g., docker.io, gcr.io).
         * 
         * @return builder
         * 
         */
        public Builder registryServer(String registryServer) {
            $.registryServer = registryServer;
            return this;
        }

        /**
         * @param secretName Name of the Kubernetes secret containing registry credentials.
         * 
         * @return builder
         * 
         */
        public Builder secretName(@Nullable String secretName) {
            $.secretName = secretName;
            return this;
        }

        /**
         * @param updatedAt Timestamp when the registry was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param useCustomImages Whether to use custom images instead of default ones.
         * 
         * @return builder
         * 
         */
        public Builder useCustomImages(Boolean useCustomImages) {
            $.useCustomImages = useCustomImages;
            return this;
        }

        public GetInfrastructureV2ImageRegistry build() {
            if ($.createdAt == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "createdAt");
            }
            if ($.customImages == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "customImages");
            }
            if ($.identifiers == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "identifiers");
            }
            if ($.infraId == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "infraId");
            }
            if ($.isDefault == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "isDefault");
            }
            if ($.isOverrideAllowed == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "isOverrideAllowed");
            }
            if ($.isPrivate == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "isPrivate");
            }
            if ($.registryAccount == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "registryAccount");
            }
            if ($.registryServer == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "registryServer");
            }
            if ($.updatedAt == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "updatedAt");
            }
            if ($.useCustomImages == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "useCustomImages");
            }
            return $;
        }
    }

}
