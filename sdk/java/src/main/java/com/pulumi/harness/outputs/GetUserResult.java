// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUserResult {
    /**
     * @return The email of the user.
     * 
     */
    private @Nullable String email;
    /**
     * @return Unique identifier of the user
     * 
     */
    private @Nullable String id;
    /**
     * @return Flag indicating whether or not the users email has been verified.
     * 
     */
    private Boolean isEmailVerified;
    /**
     * @return Flag indicating whether or not the user was imported from an identity provider.
     * 
     */
    private Boolean isImportedFromIdentityProvider;
    /**
     * @return Flag indicating whether or not the users password has expired.
     * 
     */
    private Boolean isPasswordExpired;
    /**
     * @return Flag indicating whether or not two-factor authentication is enabled for the user.
     * 
     */
    private Boolean isTwoFactorAuthEnabled;
    /**
     * @return Flag indicating whether or not the user is locked out.
     * 
     */
    private Boolean isUserLocked;
    /**
     * @return The name of the user.
     * 
     */
    private String name;

    private GetUserResult() {}
    /**
     * @return The email of the user.
     * 
     */
    public Optional<String> email() {
        return Optional.ofNullable(this.email);
    }
    /**
     * @return Unique identifier of the user
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Flag indicating whether or not the users email has been verified.
     * 
     */
    public Boolean isEmailVerified() {
        return this.isEmailVerified;
    }
    /**
     * @return Flag indicating whether or not the user was imported from an identity provider.
     * 
     */
    public Boolean isImportedFromIdentityProvider() {
        return this.isImportedFromIdentityProvider;
    }
    /**
     * @return Flag indicating whether or not the users password has expired.
     * 
     */
    public Boolean isPasswordExpired() {
        return this.isPasswordExpired;
    }
    /**
     * @return Flag indicating whether or not two-factor authentication is enabled for the user.
     * 
     */
    public Boolean isTwoFactorAuthEnabled() {
        return this.isTwoFactorAuthEnabled;
    }
    /**
     * @return Flag indicating whether or not the user is locked out.
     * 
     */
    public Boolean isUserLocked() {
        return this.isUserLocked;
    }
    /**
     * @return The name of the user.
     * 
     */
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String email;
        private @Nullable String id;
        private Boolean isEmailVerified;
        private Boolean isImportedFromIdentityProvider;
        private Boolean isPasswordExpired;
        private Boolean isTwoFactorAuthEnabled;
        private Boolean isUserLocked;
        private String name;
        public Builder() {}
        public Builder(GetUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.email = defaults.email;
    	      this.id = defaults.id;
    	      this.isEmailVerified = defaults.isEmailVerified;
    	      this.isImportedFromIdentityProvider = defaults.isImportedFromIdentityProvider;
    	      this.isPasswordExpired = defaults.isPasswordExpired;
    	      this.isTwoFactorAuthEnabled = defaults.isTwoFactorAuthEnabled;
    	      this.isUserLocked = defaults.isUserLocked;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder email(@Nullable String email) {

            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isEmailVerified(Boolean isEmailVerified) {
            if (isEmailVerified == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "isEmailVerified");
            }
            this.isEmailVerified = isEmailVerified;
            return this;
        }
        @CustomType.Setter
        public Builder isImportedFromIdentityProvider(Boolean isImportedFromIdentityProvider) {
            if (isImportedFromIdentityProvider == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "isImportedFromIdentityProvider");
            }
            this.isImportedFromIdentityProvider = isImportedFromIdentityProvider;
            return this;
        }
        @CustomType.Setter
        public Builder isPasswordExpired(Boolean isPasswordExpired) {
            if (isPasswordExpired == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "isPasswordExpired");
            }
            this.isPasswordExpired = isPasswordExpired;
            return this;
        }
        @CustomType.Setter
        public Builder isTwoFactorAuthEnabled(Boolean isTwoFactorAuthEnabled) {
            if (isTwoFactorAuthEnabled == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "isTwoFactorAuthEnabled");
            }
            this.isTwoFactorAuthEnabled = isTwoFactorAuthEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isUserLocked(Boolean isUserLocked) {
            if (isUserLocked == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "isUserLocked");
            }
            this.isUserLocked = isUserLocked;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "name");
            }
            this.name = name;
            return this;
        }
        public GetUserResult build() {
            final var _resultValue = new GetUserResult();
            _resultValue.email = email;
            _resultValue.id = id;
            _resultValue.isEmailVerified = isEmailVerified;
            _resultValue.isImportedFromIdentityProvider = isImportedFromIdentityProvider;
            _resultValue.isPasswordExpired = isPasswordExpired;
            _resultValue.isTwoFactorAuthEnabled = isTwoFactorAuthEnabled;
            _resultValue.isUserLocked = isUserLocked;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
