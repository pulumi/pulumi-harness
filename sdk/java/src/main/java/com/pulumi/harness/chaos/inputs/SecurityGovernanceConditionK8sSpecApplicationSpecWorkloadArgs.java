// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityGovernanceConditionK8sSpecApplicationSpecWorkloadArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityGovernanceConditionK8sSpecApplicationSpecWorkloadArgs Empty = new SecurityGovernanceConditionK8sSpecApplicationSpecWorkloadArgs();

    /**
     * ID for the application map
     * 
     */
    @Import(name="applicationMapId")
    private @Nullable Output<String> applicationMapId;

    /**
     * @return ID for the application map
     * 
     */
    public Optional<Output<String>> applicationMapId() {
        return Optional.ofNullable(this.applicationMapId);
    }

    /**
     * Kind of the workload (e.g., deployment, statefulset)
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return Kind of the workload (e.g., deployment, statefulset)
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Label selector for the workload
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return Label selector for the workload
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * Namespace of the workload
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return Namespace of the workload
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * List of services associated with the workload
     * 
     */
    @Import(name="services")
    private @Nullable Output<List<String>> services;

    /**
     * @return List of services associated with the workload
     * 
     */
    public Optional<Output<List<String>>> services() {
        return Optional.ofNullable(this.services);
    }

    private SecurityGovernanceConditionK8sSpecApplicationSpecWorkloadArgs() {}

    private SecurityGovernanceConditionK8sSpecApplicationSpecWorkloadArgs(SecurityGovernanceConditionK8sSpecApplicationSpecWorkloadArgs $) {
        this.applicationMapId = $.applicationMapId;
        this.kind = $.kind;
        this.label = $.label;
        this.namespace = $.namespace;
        this.services = $.services;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityGovernanceConditionK8sSpecApplicationSpecWorkloadArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityGovernanceConditionK8sSpecApplicationSpecWorkloadArgs $;

        public Builder() {
            $ = new SecurityGovernanceConditionK8sSpecApplicationSpecWorkloadArgs();
        }

        public Builder(SecurityGovernanceConditionK8sSpecApplicationSpecWorkloadArgs defaults) {
            $ = new SecurityGovernanceConditionK8sSpecApplicationSpecWorkloadArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationMapId ID for the application map
         * 
         * @return builder
         * 
         */
        public Builder applicationMapId(@Nullable Output<String> applicationMapId) {
            $.applicationMapId = applicationMapId;
            return this;
        }

        /**
         * @param applicationMapId ID for the application map
         * 
         * @return builder
         * 
         */
        public Builder applicationMapId(String applicationMapId) {
            return applicationMapId(Output.of(applicationMapId));
        }

        /**
         * @param kind Kind of the workload (e.g., deployment, statefulset)
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind Kind of the workload (e.g., deployment, statefulset)
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param label Label selector for the workload
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label Label selector for the workload
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param namespace Namespace of the workload
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Namespace of the workload
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param services List of services associated with the workload
         * 
         * @return builder
         * 
         */
        public Builder services(@Nullable Output<List<String>> services) {
            $.services = services;
            return this;
        }

        /**
         * @param services List of services associated with the workload
         * 
         * @return builder
         * 
         */
        public Builder services(List<String> services) {
            return services(Output.of(services));
        }

        /**
         * @param services List of services associated with the workload
         * 
         * @return builder
         * 
         */
        public Builder services(String... services) {
            return services(List.of(services));
        }

        public SecurityGovernanceConditionK8sSpecApplicationSpecWorkloadArgs build() {
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("SecurityGovernanceConditionK8sSpecApplicationSpecWorkloadArgs", "namespace");
            }
            return $;
        }
    }

}
