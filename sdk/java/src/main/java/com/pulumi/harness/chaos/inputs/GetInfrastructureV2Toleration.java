// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetInfrastructureV2Toleration extends com.pulumi.resources.InvokeArgs {

    public static final GetInfrastructureV2Toleration Empty = new GetInfrastructureV2Toleration();

    /**
     * Effect indicates the taint effect to match. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     * 
     */
    @Import(name="effect", required=true)
    private String effect;

    /**
     * @return Effect indicates the taint effect to match. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     * 
     */
    public String effect() {
        return this.effect;
    }

    /**
     * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists.
     * 
     */
    @Import(name="key", required=true)
    private String key;

    /**
     * @return Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists.
     * 
     */
    public String key() {
        return this.key;
    }

    /**
     * Operator represents a key&#39;s relationship to the value. Valid operators are Exists and Equal. Defaults to Equal.
     * 
     */
    @Import(name="operator", required=true)
    private String operator;

    /**
     * @return Operator represents a key&#39;s relationship to the value. Valid operators are Exists and Equal. Defaults to Equal.
     * 
     */
    public String operator() {
        return this.operator;
    }

    /**
     * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     * 
     */
    @Import(name="tolerationSeconds")
    private @Nullable Integer tolerationSeconds;

    /**
     * @return TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     * 
     */
    public Optional<Integer> tolerationSeconds() {
        return Optional.ofNullable(this.tolerationSeconds);
    }

    /**
     * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     * 
     */
    @Import(name="value")
    private @Nullable String value;

    /**
     * @return Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     * 
     */
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }

    private GetInfrastructureV2Toleration() {}

    private GetInfrastructureV2Toleration(GetInfrastructureV2Toleration $) {
        this.effect = $.effect;
        this.key = $.key;
        this.operator = $.operator;
        this.tolerationSeconds = $.tolerationSeconds;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInfrastructureV2Toleration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInfrastructureV2Toleration $;

        public Builder() {
            $ = new GetInfrastructureV2Toleration();
        }

        public Builder(GetInfrastructureV2Toleration defaults) {
            $ = new GetInfrastructureV2Toleration(Objects.requireNonNull(defaults));
        }

        /**
         * @param effect Effect indicates the taint effect to match. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
         * 
         * @return builder
         * 
         */
        public Builder effect(String effect) {
            $.effect = effect;
            return this;
        }

        /**
         * @param key Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            $.key = key;
            return this;
        }

        /**
         * @param operator Operator represents a key&#39;s relationship to the value. Valid operators are Exists and Equal. Defaults to Equal.
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param tolerationSeconds TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
         * 
         * @return builder
         * 
         */
        public Builder tolerationSeconds(@Nullable Integer tolerationSeconds) {
            $.tolerationSeconds = tolerationSeconds;
            return this;
        }

        /**
         * @param value Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable String value) {
            $.value = value;
            return this;
        }

        public GetInfrastructureV2Toleration build() {
            if ($.effect == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureV2Toleration", "effect");
            }
            if ($.key == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureV2Toleration", "key");
            }
            if ($.operator == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureV2Toleration", "operator");
            }
            return $;
        }
    }

}
