// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.autostopping.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.autostopping.inputs.RuleVmTcpForwardRuleArgs;
import com.pulumi.harness.autostopping.inputs.RuleVmTcpRdpArgs;
import com.pulumi.harness.autostopping.inputs.RuleVmTcpSshArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuleVmTcpArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuleVmTcpArgs Empty = new RuleVmTcpArgs();

    /**
     * Additional tcp forwarding rules
     * 
     */
    @Import(name="forwardRules")
    private @Nullable Output<List<RuleVmTcpForwardRuleArgs>> forwardRules;

    /**
     * @return Additional tcp forwarding rules
     * 
     */
    public Optional<Output<List<RuleVmTcpForwardRuleArgs>>> forwardRules() {
        return Optional.ofNullable(this.forwardRules);
    }

    /**
     * Id of the Proxy
     * 
     */
    @Import(name="proxyId", required=true)
    private Output<String> proxyId;

    /**
     * @return Id of the Proxy
     * 
     */
    public Output<String> proxyId() {
        return this.proxyId;
    }

    /**
     * RDP configuration
     * 
     */
    @Import(name="rdps")
    private @Nullable Output<List<RuleVmTcpRdpArgs>> rdps;

    /**
     * @return RDP configuration
     * 
     */
    public Optional<Output<List<RuleVmTcpRdpArgs>>> rdps() {
        return Optional.ofNullable(this.rdps);
    }

    /**
     * SSH configuration
     * 
     */
    @Import(name="sshes")
    private @Nullable Output<List<RuleVmTcpSshArgs>> sshes;

    /**
     * @return SSH configuration
     * 
     */
    public Optional<Output<List<RuleVmTcpSshArgs>>> sshes() {
        return Optional.ofNullable(this.sshes);
    }

    private RuleVmTcpArgs() {}

    private RuleVmTcpArgs(RuleVmTcpArgs $) {
        this.forwardRules = $.forwardRules;
        this.proxyId = $.proxyId;
        this.rdps = $.rdps;
        this.sshes = $.sshes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleVmTcpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleVmTcpArgs $;

        public Builder() {
            $ = new RuleVmTcpArgs();
        }

        public Builder(RuleVmTcpArgs defaults) {
            $ = new RuleVmTcpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param forwardRules Additional tcp forwarding rules
         * 
         * @return builder
         * 
         */
        public Builder forwardRules(@Nullable Output<List<RuleVmTcpForwardRuleArgs>> forwardRules) {
            $.forwardRules = forwardRules;
            return this;
        }

        /**
         * @param forwardRules Additional tcp forwarding rules
         * 
         * @return builder
         * 
         */
        public Builder forwardRules(List<RuleVmTcpForwardRuleArgs> forwardRules) {
            return forwardRules(Output.of(forwardRules));
        }

        /**
         * @param forwardRules Additional tcp forwarding rules
         * 
         * @return builder
         * 
         */
        public Builder forwardRules(RuleVmTcpForwardRuleArgs... forwardRules) {
            return forwardRules(List.of(forwardRules));
        }

        /**
         * @param proxyId Id of the Proxy
         * 
         * @return builder
         * 
         */
        public Builder proxyId(Output<String> proxyId) {
            $.proxyId = proxyId;
            return this;
        }

        /**
         * @param proxyId Id of the Proxy
         * 
         * @return builder
         * 
         */
        public Builder proxyId(String proxyId) {
            return proxyId(Output.of(proxyId));
        }

        /**
         * @param rdps RDP configuration
         * 
         * @return builder
         * 
         */
        public Builder rdps(@Nullable Output<List<RuleVmTcpRdpArgs>> rdps) {
            $.rdps = rdps;
            return this;
        }

        /**
         * @param rdps RDP configuration
         * 
         * @return builder
         * 
         */
        public Builder rdps(List<RuleVmTcpRdpArgs> rdps) {
            return rdps(Output.of(rdps));
        }

        /**
         * @param rdps RDP configuration
         * 
         * @return builder
         * 
         */
        public Builder rdps(RuleVmTcpRdpArgs... rdps) {
            return rdps(List.of(rdps));
        }

        /**
         * @param sshes SSH configuration
         * 
         * @return builder
         * 
         */
        public Builder sshes(@Nullable Output<List<RuleVmTcpSshArgs>> sshes) {
            $.sshes = sshes;
            return this;
        }

        /**
         * @param sshes SSH configuration
         * 
         * @return builder
         * 
         */
        public Builder sshes(List<RuleVmTcpSshArgs> sshes) {
            return sshes(Output.of(sshes));
        }

        /**
         * @param sshes SSH configuration
         * 
         * @return builder
         * 
         */
        public Builder sshes(RuleVmTcpSshArgs... sshes) {
            return sshes(List.of(sshes));
        }

        public RuleVmTcpArgs build() {
            if ($.proxyId == null) {
                throw new MissingRequiredPropertyException("RuleVmTcpArgs", "proxyId");
            }
            return $;
        }
    }

}
