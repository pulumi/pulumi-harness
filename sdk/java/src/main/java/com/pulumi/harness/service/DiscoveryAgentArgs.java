// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.service;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.service.inputs.DiscoveryAgentConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiscoveryAgentArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiscoveryAgentArgs Empty = new DiscoveryAgentArgs();

    /**
     * Configuration for the agent. This is a required field.
     * 
     */
    @Import(name="configs", required=true)
    private Output<List<DiscoveryAgentConfigArgs>> configs;

    /**
     * @return Configuration for the agent. This is a required field.
     * 
     */
    public Output<List<DiscoveryAgentConfigArgs>> configs() {
        return this.configs;
    }

    /**
     * Correlation ID for the agent.
     * 
     */
    @Import(name="correlationId")
    private @Nullable Output<String> correlationId;

    /**
     * @return Correlation ID for the agent.
     * 
     */
    public Optional<Output<String>> correlationId() {
        return Optional.ofNullable(this.correlationId);
    }

    /**
     * The environment identifier of the agent. This is a required field.
     * 
     */
    @Import(name="environmentIdentifier", required=true)
    private Output<String> environmentIdentifier;

    /**
     * @return The environment identifier of the agent. This is a required field.
     * 
     */
    public Output<String> environmentIdentifier() {
        return this.environmentIdentifier;
    }

    /**
     * The infrastructure identifier of the agent. This is a required field.
     * 
     */
    @Import(name="infraIdentifier", required=true)
    private Output<String> infraIdentifier;

    /**
     * @return The infrastructure identifier of the agent. This is a required field.
     * 
     */
    public Output<String> infraIdentifier() {
        return this.infraIdentifier;
    }

    /**
     * Type of installation for the agent.
     * 
     */
    @Import(name="installationType")
    private @Nullable Output<String> installationType;

    /**
     * @return Type of installation for the agent.
     * 
     */
    public Optional<Output<String>> installationType() {
        return Optional.ofNullable(this.installationType);
    }

    /**
     * The name of the agent. This is a required field.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the agent. This is a required field.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     * 
     */
    @Import(name="orgIdentifier")
    private @Nullable Output<String> orgIdentifier;

    /**
     * @return The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     * 
     */
    public Optional<Output<String>> orgIdentifier() {
        return Optional.ofNullable(this.orgIdentifier);
    }

    /**
     * Whether this is a permanent installation.
     * 
     */
    @Import(name="permanentInstallation")
    private @Nullable Output<Boolean> permanentInstallation;

    /**
     * @return Whether this is a permanent installation.
     * 
     */
    public Optional<Output<Boolean>> permanentInstallation() {
        return Optional.ofNullable(this.permanentInstallation);
    }

    /**
     * The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     * 
     */
    @Import(name="projectIdentifier")
    private @Nullable Output<String> projectIdentifier;

    /**
     * @return The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     * 
     */
    public Optional<Output<String>> projectIdentifier() {
        return Optional.ofNullable(this.projectIdentifier);
    }

    /**
     * Webhook URL for the agent.
     * 
     */
    @Import(name="webhookUrl")
    private @Nullable Output<String> webhookUrl;

    /**
     * @return Webhook URL for the agent.
     * 
     */
    public Optional<Output<String>> webhookUrl() {
        return Optional.ofNullable(this.webhookUrl);
    }

    private DiscoveryAgentArgs() {}

    private DiscoveryAgentArgs(DiscoveryAgentArgs $) {
        this.configs = $.configs;
        this.correlationId = $.correlationId;
        this.environmentIdentifier = $.environmentIdentifier;
        this.infraIdentifier = $.infraIdentifier;
        this.installationType = $.installationType;
        this.name = $.name;
        this.orgIdentifier = $.orgIdentifier;
        this.permanentInstallation = $.permanentInstallation;
        this.projectIdentifier = $.projectIdentifier;
        this.webhookUrl = $.webhookUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiscoveryAgentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiscoveryAgentArgs $;

        public Builder() {
            $ = new DiscoveryAgentArgs();
        }

        public Builder(DiscoveryAgentArgs defaults) {
            $ = new DiscoveryAgentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configs Configuration for the agent. This is a required field.
         * 
         * @return builder
         * 
         */
        public Builder configs(Output<List<DiscoveryAgentConfigArgs>> configs) {
            $.configs = configs;
            return this;
        }

        /**
         * @param configs Configuration for the agent. This is a required field.
         * 
         * @return builder
         * 
         */
        public Builder configs(List<DiscoveryAgentConfigArgs> configs) {
            return configs(Output.of(configs));
        }

        /**
         * @param configs Configuration for the agent. This is a required field.
         * 
         * @return builder
         * 
         */
        public Builder configs(DiscoveryAgentConfigArgs... configs) {
            return configs(List.of(configs));
        }

        /**
         * @param correlationId Correlation ID for the agent.
         * 
         * @return builder
         * 
         */
        public Builder correlationId(@Nullable Output<String> correlationId) {
            $.correlationId = correlationId;
            return this;
        }

        /**
         * @param correlationId Correlation ID for the agent.
         * 
         * @return builder
         * 
         */
        public Builder correlationId(String correlationId) {
            return correlationId(Output.of(correlationId));
        }

        /**
         * @param environmentIdentifier The environment identifier of the agent. This is a required field.
         * 
         * @return builder
         * 
         */
        public Builder environmentIdentifier(Output<String> environmentIdentifier) {
            $.environmentIdentifier = environmentIdentifier;
            return this;
        }

        /**
         * @param environmentIdentifier The environment identifier of the agent. This is a required field.
         * 
         * @return builder
         * 
         */
        public Builder environmentIdentifier(String environmentIdentifier) {
            return environmentIdentifier(Output.of(environmentIdentifier));
        }

        /**
         * @param infraIdentifier The infrastructure identifier of the agent. This is a required field.
         * 
         * @return builder
         * 
         */
        public Builder infraIdentifier(Output<String> infraIdentifier) {
            $.infraIdentifier = infraIdentifier;
            return this;
        }

        /**
         * @param infraIdentifier The infrastructure identifier of the agent. This is a required field.
         * 
         * @return builder
         * 
         */
        public Builder infraIdentifier(String infraIdentifier) {
            return infraIdentifier(Output.of(infraIdentifier));
        }

        /**
         * @param installationType Type of installation for the agent.
         * 
         * @return builder
         * 
         */
        public Builder installationType(@Nullable Output<String> installationType) {
            $.installationType = installationType;
            return this;
        }

        /**
         * @param installationType Type of installation for the agent.
         * 
         * @return builder
         * 
         */
        public Builder installationType(String installationType) {
            return installationType(Output.of(installationType));
        }

        /**
         * @param name The name of the agent. This is a required field.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the agent. This is a required field.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgIdentifier The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
         * 
         * @return builder
         * 
         */
        public Builder orgIdentifier(@Nullable Output<String> orgIdentifier) {
            $.orgIdentifier = orgIdentifier;
            return this;
        }

        /**
         * @param orgIdentifier The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
         * 
         * @return builder
         * 
         */
        public Builder orgIdentifier(String orgIdentifier) {
            return orgIdentifier(Output.of(orgIdentifier));
        }

        /**
         * @param permanentInstallation Whether this is a permanent installation.
         * 
         * @return builder
         * 
         */
        public Builder permanentInstallation(@Nullable Output<Boolean> permanentInstallation) {
            $.permanentInstallation = permanentInstallation;
            return this;
        }

        /**
         * @param permanentInstallation Whether this is a permanent installation.
         * 
         * @return builder
         * 
         */
        public Builder permanentInstallation(Boolean permanentInstallation) {
            return permanentInstallation(Output.of(permanentInstallation));
        }

        /**
         * @param projectIdentifier The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
         * 
         * @return builder
         * 
         */
        public Builder projectIdentifier(@Nullable Output<String> projectIdentifier) {
            $.projectIdentifier = projectIdentifier;
            return this;
        }

        /**
         * @param projectIdentifier The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
         * 
         * @return builder
         * 
         */
        public Builder projectIdentifier(String projectIdentifier) {
            return projectIdentifier(Output.of(projectIdentifier));
        }

        /**
         * @param webhookUrl Webhook URL for the agent.
         * 
         * @return builder
         * 
         */
        public Builder webhookUrl(@Nullable Output<String> webhookUrl) {
            $.webhookUrl = webhookUrl;
            return this;
        }

        /**
         * @param webhookUrl Webhook URL for the agent.
         * 
         * @return builder
         * 
         */
        public Builder webhookUrl(String webhookUrl) {
            return webhookUrl(Output.of(webhookUrl));
        }

        public DiscoveryAgentArgs build() {
            if ($.configs == null) {
                throw new MissingRequiredPropertyException("DiscoveryAgentArgs", "configs");
            }
            if ($.environmentIdentifier == null) {
                throw new MissingRequiredPropertyException("DiscoveryAgentArgs", "environmentIdentifier");
            }
            if ($.infraIdentifier == null) {
                throw new MissingRequiredPropertyException("DiscoveryAgentArgs", "infraIdentifier");
            }
            return $;
        }
    }

}
