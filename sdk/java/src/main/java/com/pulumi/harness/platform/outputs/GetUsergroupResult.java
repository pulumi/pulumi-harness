// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GetUsergroupNotificationConfig;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUsergroupResult {
    /**
     * @return Description of the resource.
     * 
     */
    private String description;
    /**
     * @return Whether the user group is externally managed.
     * 
     */
    private Boolean externallyManaged;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Unique identifier of the resource.
     * 
     */
    private @Nullable String identifier;
    /**
     * @return Name of the linked SSO.
     * 
     */
    private String linkedSsoDisplayName;
    /**
     * @return The SSO account ID that the user group is linked to.
     * 
     */
    private String linkedSsoId;
    /**
     * @return Type of linked SSO.
     * 
     */
    private String linkedSsoType;
    /**
     * @return Name of the resource.
     * 
     */
    private @Nullable String name;
    /**
     * @return List of notification settings.
     * 
     */
    private @Nullable List<GetUsergroupNotificationConfig> notificationConfigs;
    /**
     * @return Unique identifier of the organization.
     * 
     */
    private @Nullable String orgId;
    /**
     * @return Unique identifier of the project.
     * 
     */
    private @Nullable String projectId;
    /**
     * @return Identifier of the userGroup in SSO.
     * 
     */
    private String ssoGroupId;
    /**
     * @return Name of the SSO userGroup.
     * 
     */
    private String ssoGroupName;
    /**
     * @return Whether sso is linked or not.
     * 
     */
    private Boolean ssoLinked;
    /**
     * @return Tags to associate with the resource.
     * 
     */
    private List<String> tags;
    /**
     * @return List of users in the UserGroup.
     * 
     */
    private List<String> users;

    private GetUsergroupResult() {}
    /**
     * @return Description of the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Whether the user group is externally managed.
     * 
     */
    public Boolean externallyManaged() {
        return this.externallyManaged;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Optional<String> identifier() {
        return Optional.ofNullable(this.identifier);
    }
    /**
     * @return Name of the linked SSO.
     * 
     */
    public String linkedSsoDisplayName() {
        return this.linkedSsoDisplayName;
    }
    /**
     * @return The SSO account ID that the user group is linked to.
     * 
     */
    public String linkedSsoId() {
        return this.linkedSsoId;
    }
    /**
     * @return Type of linked SSO.
     * 
     */
    public String linkedSsoType() {
        return this.linkedSsoType;
    }
    /**
     * @return Name of the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return List of notification settings.
     * 
     */
    public List<GetUsergroupNotificationConfig> notificationConfigs() {
        return this.notificationConfigs == null ? List.of() : this.notificationConfigs;
    }
    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }
    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return Identifier of the userGroup in SSO.
     * 
     */
    public String ssoGroupId() {
        return this.ssoGroupId;
    }
    /**
     * @return Name of the SSO userGroup.
     * 
     */
    public String ssoGroupName() {
        return this.ssoGroupName;
    }
    /**
     * @return Whether sso is linked or not.
     * 
     */
    public Boolean ssoLinked() {
        return this.ssoLinked;
    }
    /**
     * @return Tags to associate with the resource.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return List of users in the UserGroup.
     * 
     */
    public List<String> users() {
        return this.users;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUsergroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private Boolean externallyManaged;
        private String id;
        private @Nullable String identifier;
        private String linkedSsoDisplayName;
        private String linkedSsoId;
        private String linkedSsoType;
        private @Nullable String name;
        private @Nullable List<GetUsergroupNotificationConfig> notificationConfigs;
        private @Nullable String orgId;
        private @Nullable String projectId;
        private String ssoGroupId;
        private String ssoGroupName;
        private Boolean ssoLinked;
        private List<String> tags;
        private List<String> users;
        public Builder() {}
        public Builder(GetUsergroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.externallyManaged = defaults.externallyManaged;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.linkedSsoDisplayName = defaults.linkedSsoDisplayName;
    	      this.linkedSsoId = defaults.linkedSsoId;
    	      this.linkedSsoType = defaults.linkedSsoType;
    	      this.name = defaults.name;
    	      this.notificationConfigs = defaults.notificationConfigs;
    	      this.orgId = defaults.orgId;
    	      this.projectId = defaults.projectId;
    	      this.ssoGroupId = defaults.ssoGroupId;
    	      this.ssoGroupName = defaults.ssoGroupName;
    	      this.ssoLinked = defaults.ssoLinked;
    	      this.tags = defaults.tags;
    	      this.users = defaults.users;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetUsergroupResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder externallyManaged(Boolean externallyManaged) {
            if (externallyManaged == null) {
              throw new MissingRequiredPropertyException("GetUsergroupResult", "externallyManaged");
            }
            this.externallyManaged = externallyManaged;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUsergroupResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(@Nullable String identifier) {

            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder linkedSsoDisplayName(String linkedSsoDisplayName) {
            if (linkedSsoDisplayName == null) {
              throw new MissingRequiredPropertyException("GetUsergroupResult", "linkedSsoDisplayName");
            }
            this.linkedSsoDisplayName = linkedSsoDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder linkedSsoId(String linkedSsoId) {
            if (linkedSsoId == null) {
              throw new MissingRequiredPropertyException("GetUsergroupResult", "linkedSsoId");
            }
            this.linkedSsoId = linkedSsoId;
            return this;
        }
        @CustomType.Setter
        public Builder linkedSsoType(String linkedSsoType) {
            if (linkedSsoType == null) {
              throw new MissingRequiredPropertyException("GetUsergroupResult", "linkedSsoType");
            }
            this.linkedSsoType = linkedSsoType;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notificationConfigs(@Nullable List<GetUsergroupNotificationConfig> notificationConfigs) {

            this.notificationConfigs = notificationConfigs;
            return this;
        }
        public Builder notificationConfigs(GetUsergroupNotificationConfig... notificationConfigs) {
            return notificationConfigs(List.of(notificationConfigs));
        }
        @CustomType.Setter
        public Builder orgId(@Nullable String orgId) {

            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder ssoGroupId(String ssoGroupId) {
            if (ssoGroupId == null) {
              throw new MissingRequiredPropertyException("GetUsergroupResult", "ssoGroupId");
            }
            this.ssoGroupId = ssoGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder ssoGroupName(String ssoGroupName) {
            if (ssoGroupName == null) {
              throw new MissingRequiredPropertyException("GetUsergroupResult", "ssoGroupName");
            }
            this.ssoGroupName = ssoGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder ssoLinked(Boolean ssoLinked) {
            if (ssoLinked == null) {
              throw new MissingRequiredPropertyException("GetUsergroupResult", "ssoLinked");
            }
            this.ssoLinked = ssoLinked;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetUsergroupResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder users(List<String> users) {
            if (users == null) {
              throw new MissingRequiredPropertyException("GetUsergroupResult", "users");
            }
            this.users = users;
            return this;
        }
        public Builder users(String... users) {
            return users(List.of(users));
        }
        public GetUsergroupResult build() {
            final var _resultValue = new GetUsergroupResult();
            _resultValue.description = description;
            _resultValue.externallyManaged = externallyManaged;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.linkedSsoDisplayName = linkedSsoDisplayName;
            _resultValue.linkedSsoId = linkedSsoId;
            _resultValue.linkedSsoType = linkedSsoType;
            _resultValue.name = name;
            _resultValue.notificationConfigs = notificationConfigs;
            _resultValue.orgId = orgId;
            _resultValue.projectId = projectId;
            _resultValue.ssoGroupId = ssoGroupId;
            _resultValue.ssoGroupName = ssoGroupName;
            _resultValue.ssoLinked = ssoLinked;
            _resultValue.tags = tags;
            _resultValue.users = users;
            return _resultValue;
        }
    }
}
