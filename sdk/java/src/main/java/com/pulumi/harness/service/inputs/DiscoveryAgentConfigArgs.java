// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.service.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.service.inputs.DiscoveryAgentConfigDataArgs;
import com.pulumi.harness.service.inputs.DiscoveryAgentConfigKuberneteArgs;
import com.pulumi.harness.service.inputs.DiscoveryAgentConfigMtlArgs;
import com.pulumi.harness.service.inputs.DiscoveryAgentConfigProxyArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiscoveryAgentConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiscoveryAgentConfigArgs Empty = new DiscoveryAgentConfigArgs();

    /**
     * Docker image for the collector.
     * 
     */
    @Import(name="collectorImage")
    private @Nullable Output<String> collectorImage;

    /**
     * @return Docker image for the collector.
     * 
     */
    public Optional<Output<String>> collectorImage() {
        return Optional.ofNullable(this.collectorImage);
    }

    /**
     * Data collection configuration.
     * 
     */
    @Import(name="datas")
    private @Nullable Output<List<DiscoveryAgentConfigDataArgs>> datas;

    /**
     * @return Data collection configuration.
     * 
     */
    public Optional<Output<List<DiscoveryAgentConfigDataArgs>>> datas() {
        return Optional.ofNullable(this.datas);
    }

    /**
     * List of image pull secrets.
     * 
     */
    @Import(name="imagePullSecrets")
    private @Nullable Output<List<String>> imagePullSecrets;

    /**
     * @return List of image pull secrets.
     * 
     */
    public Optional<Output<List<String>>> imagePullSecrets() {
        return Optional.ofNullable(this.imagePullSecrets);
    }

    /**
     * Kubernetes-specific configuration.
     * 
     */
    @Import(name="kubernetes", required=true)
    private Output<List<DiscoveryAgentConfigKuberneteArgs>> kubernetes;

    /**
     * @return Kubernetes-specific configuration.
     * 
     */
    public Output<List<DiscoveryAgentConfigKuberneteArgs>> kubernetes() {
        return this.kubernetes;
    }

    /**
     * Docker image for the log watcher.
     * 
     */
    @Import(name="logWatcherImage")
    private @Nullable Output<String> logWatcherImage;

    /**
     * @return Docker image for the log watcher.
     * 
     */
    public Optional<Output<String>> logWatcherImage() {
        return Optional.ofNullable(this.logWatcherImage);
    }

    /**
     * mTLS configuration.
     * 
     */
    @Import(name="mtls")
    private @Nullable Output<List<DiscoveryAgentConfigMtlArgs>> mtls;

    /**
     * @return mTLS configuration.
     * 
     */
    public Optional<Output<List<DiscoveryAgentConfigMtlArgs>>> mtls() {
        return Optional.ofNullable(this.mtls);
    }

    /**
     * Proxy configuration.
     * 
     */
    @Import(name="proxies")
    private @Nullable Output<List<DiscoveryAgentConfigProxyArgs>> proxies;

    /**
     * @return Proxy configuration.
     * 
     */
    public Optional<Output<List<DiscoveryAgentConfigProxyArgs>>> proxies() {
        return Optional.ofNullable(this.proxies);
    }

    /**
     * Whether to skip TLS verification.
     * 
     */
    @Import(name="skipSecureVerify")
    private @Nullable Output<Boolean> skipSecureVerify;

    /**
     * @return Whether to skip TLS verification.
     * 
     */
    public Optional<Output<Boolean>> skipSecureVerify() {
        return Optional.ofNullable(this.skipSecureVerify);
    }

    private DiscoveryAgentConfigArgs() {}

    private DiscoveryAgentConfigArgs(DiscoveryAgentConfigArgs $) {
        this.collectorImage = $.collectorImage;
        this.datas = $.datas;
        this.imagePullSecrets = $.imagePullSecrets;
        this.kubernetes = $.kubernetes;
        this.logWatcherImage = $.logWatcherImage;
        this.mtls = $.mtls;
        this.proxies = $.proxies;
        this.skipSecureVerify = $.skipSecureVerify;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiscoveryAgentConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiscoveryAgentConfigArgs $;

        public Builder() {
            $ = new DiscoveryAgentConfigArgs();
        }

        public Builder(DiscoveryAgentConfigArgs defaults) {
            $ = new DiscoveryAgentConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param collectorImage Docker image for the collector.
         * 
         * @return builder
         * 
         */
        public Builder collectorImage(@Nullable Output<String> collectorImage) {
            $.collectorImage = collectorImage;
            return this;
        }

        /**
         * @param collectorImage Docker image for the collector.
         * 
         * @return builder
         * 
         */
        public Builder collectorImage(String collectorImage) {
            return collectorImage(Output.of(collectorImage));
        }

        /**
         * @param datas Data collection configuration.
         * 
         * @return builder
         * 
         */
        public Builder datas(@Nullable Output<List<DiscoveryAgentConfigDataArgs>> datas) {
            $.datas = datas;
            return this;
        }

        /**
         * @param datas Data collection configuration.
         * 
         * @return builder
         * 
         */
        public Builder datas(List<DiscoveryAgentConfigDataArgs> datas) {
            return datas(Output.of(datas));
        }

        /**
         * @param datas Data collection configuration.
         * 
         * @return builder
         * 
         */
        public Builder datas(DiscoveryAgentConfigDataArgs... datas) {
            return datas(List.of(datas));
        }

        /**
         * @param imagePullSecrets List of image pull secrets.
         * 
         * @return builder
         * 
         */
        public Builder imagePullSecrets(@Nullable Output<List<String>> imagePullSecrets) {
            $.imagePullSecrets = imagePullSecrets;
            return this;
        }

        /**
         * @param imagePullSecrets List of image pull secrets.
         * 
         * @return builder
         * 
         */
        public Builder imagePullSecrets(List<String> imagePullSecrets) {
            return imagePullSecrets(Output.of(imagePullSecrets));
        }

        /**
         * @param imagePullSecrets List of image pull secrets.
         * 
         * @return builder
         * 
         */
        public Builder imagePullSecrets(String... imagePullSecrets) {
            return imagePullSecrets(List.of(imagePullSecrets));
        }

        /**
         * @param kubernetes Kubernetes-specific configuration.
         * 
         * @return builder
         * 
         */
        public Builder kubernetes(Output<List<DiscoveryAgentConfigKuberneteArgs>> kubernetes) {
            $.kubernetes = kubernetes;
            return this;
        }

        /**
         * @param kubernetes Kubernetes-specific configuration.
         * 
         * @return builder
         * 
         */
        public Builder kubernetes(List<DiscoveryAgentConfigKuberneteArgs> kubernetes) {
            return kubernetes(Output.of(kubernetes));
        }

        /**
         * @param kubernetes Kubernetes-specific configuration.
         * 
         * @return builder
         * 
         */
        public Builder kubernetes(DiscoveryAgentConfigKuberneteArgs... kubernetes) {
            return kubernetes(List.of(kubernetes));
        }

        /**
         * @param logWatcherImage Docker image for the log watcher.
         * 
         * @return builder
         * 
         */
        public Builder logWatcherImage(@Nullable Output<String> logWatcherImage) {
            $.logWatcherImage = logWatcherImage;
            return this;
        }

        /**
         * @param logWatcherImage Docker image for the log watcher.
         * 
         * @return builder
         * 
         */
        public Builder logWatcherImage(String logWatcherImage) {
            return logWatcherImage(Output.of(logWatcherImage));
        }

        /**
         * @param mtls mTLS configuration.
         * 
         * @return builder
         * 
         */
        public Builder mtls(@Nullable Output<List<DiscoveryAgentConfigMtlArgs>> mtls) {
            $.mtls = mtls;
            return this;
        }

        /**
         * @param mtls mTLS configuration.
         * 
         * @return builder
         * 
         */
        public Builder mtls(List<DiscoveryAgentConfigMtlArgs> mtls) {
            return mtls(Output.of(mtls));
        }

        /**
         * @param mtls mTLS configuration.
         * 
         * @return builder
         * 
         */
        public Builder mtls(DiscoveryAgentConfigMtlArgs... mtls) {
            return mtls(List.of(mtls));
        }

        /**
         * @param proxies Proxy configuration.
         * 
         * @return builder
         * 
         */
        public Builder proxies(@Nullable Output<List<DiscoveryAgentConfigProxyArgs>> proxies) {
            $.proxies = proxies;
            return this;
        }

        /**
         * @param proxies Proxy configuration.
         * 
         * @return builder
         * 
         */
        public Builder proxies(List<DiscoveryAgentConfigProxyArgs> proxies) {
            return proxies(Output.of(proxies));
        }

        /**
         * @param proxies Proxy configuration.
         * 
         * @return builder
         * 
         */
        public Builder proxies(DiscoveryAgentConfigProxyArgs... proxies) {
            return proxies(List.of(proxies));
        }

        /**
         * @param skipSecureVerify Whether to skip TLS verification.
         * 
         * @return builder
         * 
         */
        public Builder skipSecureVerify(@Nullable Output<Boolean> skipSecureVerify) {
            $.skipSecureVerify = skipSecureVerify;
            return this;
        }

        /**
         * @param skipSecureVerify Whether to skip TLS verification.
         * 
         * @return builder
         * 
         */
        public Builder skipSecureVerify(Boolean skipSecureVerify) {
            return skipSecureVerify(Output.of(skipSecureVerify));
        }

        public DiscoveryAgentConfigArgs build() {
            if ($.kubernetes == null) {
                throw new MissingRequiredPropertyException("DiscoveryAgentConfigArgs", "kubernetes");
            }
            return $;
        }
    }

}
