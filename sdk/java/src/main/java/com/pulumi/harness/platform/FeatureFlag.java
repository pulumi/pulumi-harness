// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.FeatureFlagArgs;
import com.pulumi.harness.platform.inputs.FeatureFlagState;
import com.pulumi.harness.platform.outputs.FeatureFlagEnvironment;
import com.pulumi.harness.platform.outputs.FeatureFlagTag;
import com.pulumi.harness.platform.outputs.FeatureFlagVariation;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for managing Feature Flags.
 * 
 */
@ResourceType(type="harness:platform/featureFlag:FeatureFlag")
public class FeatureFlag extends com.pulumi.resources.CustomResource {
    /**
     * Whether or not the flag is archived.
     * 
     */
    @Export(name="archived", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> archived;

    /**
     * @return Whether or not the flag is archived.
     * 
     */
    public Output<Optional<Boolean>> archived() {
        return Codegen.optional(this.archived);
    }
    /**
     * Which of the variations to use when the flag is toggled to off state
     * 
     */
    @Export(name="defaultOffVariation", refs={String.class}, tree="[0]")
    private Output<String> defaultOffVariation;

    /**
     * @return Which of the variations to use when the flag is toggled to off state
     * 
     */
    public Output<String> defaultOffVariation() {
        return this.defaultOffVariation;
    }
    /**
     * Which of the variations to use when the flag is toggled to on state
     * 
     */
    @Export(name="defaultOnVariation", refs={String.class}, tree="[0]")
    private Output<String> defaultOnVariation;

    /**
     * @return Which of the variations to use when the flag is toggled to on state
     * 
     */
    public Output<String> defaultOnVariation() {
        return this.defaultOnVariation;
    }
    /**
     * Description of the Feature Flag
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the Feature Flag
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Environment Identifier
     * 
     */
    @Export(name="environments", refs={List.class,FeatureFlagEnvironment.class}, tree="[0,1]")
    private Output</* @Nullable */ List<FeatureFlagEnvironment>> environments;

    /**
     * @return Environment Identifier
     * 
     */
    public Output<Optional<List<FeatureFlagEnvironment>>> environments() {
        return Codegen.optional(this.environments);
    }
    /**
     * Identifier of the Feature Flag
     * 
     */
    @Export(name="identifier", refs={String.class}, tree="[0]")
    private Output<String> identifier;

    /**
     * @return Identifier of the Feature Flag
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }
    /**
     * The type of data the flag represents. Valid values are `boolean`, `int`, `string`, `json`
     * 
     */
    @Export(name="kind", refs={String.class}, tree="[0]")
    private Output<String> kind;

    /**
     * @return The type of data the flag represents. Valid values are `boolean`, `int`, `string`, `json`
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }
    /**
     * Name of the Feature Flag
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the Feature Flag
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Organization Identifier
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output<String> orgId;

    /**
     * @return Organization Identifier
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }
    /**
     * The owner of the flag
     * 
     */
    @Export(name="owner", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> owner;

    /**
     * @return The owner of the flag
     * 
     */
    public Output<Optional<String>> owner() {
        return Codegen.optional(this.owner);
    }
    /**
     * Whether or not the flag is permanent. If it is, it will never be flagged as stale
     * 
     */
    @Export(name="permanent", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> permanent;

    /**
     * @return Whether or not the flag is permanent. If it is, it will never be flagged as stale
     * 
     */
    public Output<Boolean> permanent() {
        return this.permanent;
    }
    /**
     * Project Identifier
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return Project Identifier
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * The tags for the flag
     * 
     */
    @Export(name="tags", refs={List.class,FeatureFlagTag.class}, tree="[0,1]")
    private Output</* @Nullable */ List<FeatureFlagTag>> tags;

    /**
     * @return The tags for the flag
     * 
     */
    public Output<Optional<List<FeatureFlagTag>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The options available for your flag
     * 
     */
    @Export(name="variations", refs={List.class,FeatureFlagVariation.class}, tree="[0,1]")
    private Output<List<FeatureFlagVariation>> variations;

    /**
     * @return The options available for your flag
     * 
     */
    public Output<List<FeatureFlagVariation>> variations() {
        return this.variations;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public FeatureFlag(java.lang.String name) {
        this(name, FeatureFlagArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public FeatureFlag(java.lang.String name, FeatureFlagArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public FeatureFlag(java.lang.String name, FeatureFlagArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/featureFlag:FeatureFlag", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private FeatureFlag(java.lang.String name, Output<java.lang.String> id, @Nullable FeatureFlagState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/featureFlag:FeatureFlag", name, state, makeResourceOptions(options, id), false);
    }

    private static FeatureFlagArgs makeArgs(FeatureFlagArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? FeatureFlagArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static FeatureFlag get(java.lang.String name, Output<java.lang.String> id, @Nullable FeatureFlagState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new FeatureFlag(name, id, state, options);
    }
}
