// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTokenResult {
    /**
     * @return Account Identifier for the Entity
     * 
     */
    private String accountId;
    /**
     * @return Identifier of the API Key
     * 
     */
    private String apikeyId;
    /**
     * @return Type of the API Key
     * 
     */
    private String apikeyType;
    /**
     * @return Description of the resource.
     * 
     */
    private String description;
    /**
     * @return Email Id of the user who created the Token
     * 
     */
    private @Nullable String email;
    /**
     * @return Encoded password of the Token
     * 
     */
    private @Nullable String encodedPassword;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Unique identifier of the resource.
     * 
     */
    private String identifier;
    /**
     * @return Name of the resource.
     * 
     */
    private @Nullable String name;
    /**
     * @return Unique identifier of the organization.
     * 
     */
    private @Nullable String orgId;
    /**
     * @return Parent Entity Identifier of the API Key
     * 
     */
    private String parentId;
    /**
     * @return Unique identifier of the project.
     * 
     */
    private @Nullable String projectId;
    /**
     * @return Scheduled expiry time in milliseconds
     * 
     */
    private @Nullable Integer scheduledExpireTime;
    /**
     * @return Tags to associate with the resource.
     * 
     */
    private List<String> tags;
    /**
     * @return Name of the user who created the Token
     * 
     */
    private @Nullable String username;
    /**
     * @return Boolean value to indicate if Token is valid or not.
     * 
     */
    private @Nullable Boolean valid;
    /**
     * @return This is the time from which the Token is valid. The time is in milliseconds
     * 
     */
    private @Nullable Integer validFrom;
    /**
     * @return This is the time till which the Token is valid. The time is in milliseconds
     * 
     */
    private @Nullable Integer validTo;

    private GetTokenResult() {}
    /**
     * @return Account Identifier for the Entity
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Identifier of the API Key
     * 
     */
    public String apikeyId() {
        return this.apikeyId;
    }
    /**
     * @return Type of the API Key
     * 
     */
    public String apikeyType() {
        return this.apikeyType;
    }
    /**
     * @return Description of the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Email Id of the user who created the Token
     * 
     */
    public Optional<String> email() {
        return Optional.ofNullable(this.email);
    }
    /**
     * @return Encoded password of the Token
     * 
     */
    public Optional<String> encodedPassword() {
        return Optional.ofNullable(this.encodedPassword);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Unique identifier of the resource.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return Name of the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }
    /**
     * @return Parent Entity Identifier of the API Key
     * 
     */
    public String parentId() {
        return this.parentId;
    }
    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return Scheduled expiry time in milliseconds
     * 
     */
    public Optional<Integer> scheduledExpireTime() {
        return Optional.ofNullable(this.scheduledExpireTime);
    }
    /**
     * @return Tags to associate with the resource.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return Name of the user who created the Token
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }
    /**
     * @return Boolean value to indicate if Token is valid or not.
     * 
     */
    public Optional<Boolean> valid() {
        return Optional.ofNullable(this.valid);
    }
    /**
     * @return This is the time from which the Token is valid. The time is in milliseconds
     * 
     */
    public Optional<Integer> validFrom() {
        return Optional.ofNullable(this.validFrom);
    }
    /**
     * @return This is the time till which the Token is valid. The time is in milliseconds
     * 
     */
    public Optional<Integer> validTo() {
        return Optional.ofNullable(this.validTo);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTokenResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String apikeyId;
        private String apikeyType;
        private String description;
        private @Nullable String email;
        private @Nullable String encodedPassword;
        private String id;
        private String identifier;
        private @Nullable String name;
        private @Nullable String orgId;
        private String parentId;
        private @Nullable String projectId;
        private @Nullable Integer scheduledExpireTime;
        private List<String> tags;
        private @Nullable String username;
        private @Nullable Boolean valid;
        private @Nullable Integer validFrom;
        private @Nullable Integer validTo;
        public Builder() {}
        public Builder(GetTokenResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.apikeyId = defaults.apikeyId;
    	      this.apikeyType = defaults.apikeyType;
    	      this.description = defaults.description;
    	      this.email = defaults.email;
    	      this.encodedPassword = defaults.encodedPassword;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.parentId = defaults.parentId;
    	      this.projectId = defaults.projectId;
    	      this.scheduledExpireTime = defaults.scheduledExpireTime;
    	      this.tags = defaults.tags;
    	      this.username = defaults.username;
    	      this.valid = defaults.valid;
    	      this.validFrom = defaults.validFrom;
    	      this.validTo = defaults.validTo;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetTokenResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder apikeyId(String apikeyId) {
            if (apikeyId == null) {
              throw new MissingRequiredPropertyException("GetTokenResult", "apikeyId");
            }
            this.apikeyId = apikeyId;
            return this;
        }
        @CustomType.Setter
        public Builder apikeyType(String apikeyType) {
            if (apikeyType == null) {
              throw new MissingRequiredPropertyException("GetTokenResult", "apikeyType");
            }
            this.apikeyType = apikeyType;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetTokenResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder email(@Nullable String email) {

            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder encodedPassword(@Nullable String encodedPassword) {

            this.encodedPassword = encodedPassword;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTokenResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            if (identifier == null) {
              throw new MissingRequiredPropertyException("GetTokenResult", "identifier");
            }
            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(@Nullable String orgId) {

            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder parentId(String parentId) {
            if (parentId == null) {
              throw new MissingRequiredPropertyException("GetTokenResult", "parentId");
            }
            this.parentId = parentId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder scheduledExpireTime(@Nullable Integer scheduledExpireTime) {

            this.scheduledExpireTime = scheduledExpireTime;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetTokenResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {

            this.username = username;
            return this;
        }
        @CustomType.Setter
        public Builder valid(@Nullable Boolean valid) {

            this.valid = valid;
            return this;
        }
        @CustomType.Setter
        public Builder validFrom(@Nullable Integer validFrom) {

            this.validFrom = validFrom;
            return this;
        }
        @CustomType.Setter
        public Builder validTo(@Nullable Integer validTo) {

            this.validTo = validTo;
            return this;
        }
        public GetTokenResult build() {
            final var _resultValue = new GetTokenResult();
            _resultValue.accountId = accountId;
            _resultValue.apikeyId = apikeyId;
            _resultValue.apikeyType = apikeyType;
            _resultValue.description = description;
            _resultValue.email = email;
            _resultValue.encodedPassword = encodedPassword;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.name = name;
            _resultValue.orgId = orgId;
            _resultValue.parentId = parentId;
            _resultValue.projectId = projectId;
            _resultValue.scheduledExpireTime = scheduledExpireTime;
            _resultValue.tags = tags;
            _resultValue.username = username;
            _resultValue.valid = valid;
            _resultValue.validFrom = validFrom;
            _resultValue.validTo = validTo;
            return _resultValue;
        }
    }
}
