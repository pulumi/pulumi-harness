// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.chaos.inputs.InfrastructureV2EnvArgs;
import com.pulumi.harness.chaos.inputs.InfrastructureV2IdentifierArgs;
import com.pulumi.harness.chaos.inputs.InfrastructureV2ImageRegistryArgs;
import com.pulumi.harness.chaos.inputs.InfrastructureV2MtlsArgs;
import com.pulumi.harness.chaos.inputs.InfrastructureV2ProxyArgs;
import com.pulumi.harness.chaos.inputs.InfrastructureV2TolerationArgs;
import com.pulumi.harness.chaos.inputs.InfrastructureV2VolumeArgs;
import com.pulumi.harness.chaos.inputs.InfrastructureV2VolumeMountArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InfrastructureV2State extends com.pulumi.resources.ResourceArgs {

    public static final InfrastructureV2State Empty = new InfrastructureV2State();

    /**
     * Enable AI features for the infrastructure.
     * 
     */
    @Import(name="aiEnabled")
    private @Nullable Output<Boolean> aiEnabled;

    /**
     * @return Enable AI features for the infrastructure.
     * 
     */
    public Optional<Output<Boolean>> aiEnabled() {
        return Optional.ofNullable(this.aiEnabled);
    }

    /**
     * Annotations to apply to the infrastructure pods.
     * 
     */
    @Import(name="annotation")
    private @Nullable Output<Map<String,String>> annotation;

    /**
     * @return Annotations to apply to the infrastructure pods.
     * 
     */
    public Optional<Output<Map<String,String>>> annotation() {
        return Optional.ofNullable(this.annotation);
    }

    /**
     * Container configurations.
     * 
     */
    @Import(name="containers")
    private @Nullable Output<String> containers;

    /**
     * @return Container configurations.
     * 
     */
    public Optional<Output<String>> containers() {
        return Optional.ofNullable(this.containers);
    }

    /**
     * Correlation ID for the request.
     * 
     */
    @Import(name="correlationId")
    private @Nullable Output<String> correlationId;

    /**
     * @return Correlation ID for the request.
     * 
     */
    public Optional<Output<String>> correlationId() {
        return Optional.ofNullable(this.correlationId);
    }

    /**
     * Creation timestamp.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Creation timestamp.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Description of the infrastructure.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the infrastructure.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * ID of the discovery agent to use.
     * 
     */
    @Import(name="discoveryAgentId")
    private @Nullable Output<String> discoveryAgentId;

    /**
     * @return ID of the discovery agent to use.
     * 
     */
    public Optional<Output<String>> discoveryAgentId() {
        return Optional.ofNullable(this.discoveryAgentId);
    }

    /**
     * The ID of the environment.
     * 
     */
    @Import(name="environmentId")
    private @Nullable Output<String> environmentId;

    /**
     * @return The ID of the environment.
     * 
     */
    public Optional<Output<String>> environmentId() {
        return Optional.ofNullable(this.environmentId);
    }

    /**
     * List of environment variables to set in the container.
     * 
     */
    @Import(name="envs")
    private @Nullable Output<List<InfrastructureV2EnvArgs>> envs;

    /**
     * @return List of environment variables to set in the container.
     * 
     */
    public Optional<Output<List<InfrastructureV2EnvArgs>>> envs() {
        return Optional.ofNullable(this.envs);
    }

    /**
     * Identifier for the infrastructure.
     * 
     */
    @Import(name="identifiers")
    private @Nullable Output<List<InfrastructureV2IdentifierArgs>> identifiers;

    /**
     * @return Identifier for the infrastructure.
     * 
     */
    public Optional<Output<List<InfrastructureV2IdentifierArgs>>> identifiers() {
        return Optional.ofNullable(this.identifiers);
    }

    /**
     * Identity for the infrastructure.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<String> identity;

    /**
     * @return Identity for the infrastructure.
     * 
     */
    public Optional<Output<String>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * Configuration for the container image registry.
     * 
     */
    @Import(name="imageRegistries")
    private @Nullable Output<List<InfrastructureV2ImageRegistryArgs>> imageRegistries;

    /**
     * @return Configuration for the container image registry.
     * 
     */
    public Optional<Output<List<InfrastructureV2ImageRegistryArgs>>> imageRegistries() {
        return Optional.ofNullable(this.imageRegistries);
    }

    /**
     * ID of the infrastructure.
     * 
     */
    @Import(name="infraId")
    private @Nullable Output<String> infraId;

    /**
     * @return ID of the infrastructure.
     * 
     */
    public Optional<Output<String>> infraId() {
        return Optional.ofNullable(this.infraId);
    }

    /**
     * Namespace where the infrastructure is installed.
     * 
     */
    @Import(name="infraNamespace")
    private @Nullable Output<String> infraNamespace;

    /**
     * @return Namespace where the infrastructure is installed.
     * 
     */
    public Optional<Output<String>> infraNamespace() {
        return Optional.ofNullable(this.infraNamespace);
    }

    /**
     * Scope of the infrastructure. Valid values: NAMESPACE, CLUSTER
     * 
     */
    @Import(name="infraScope")
    private @Nullable Output<String> infraScope;

    /**
     * @return Scope of the infrastructure. Valid values: NAMESPACE, CLUSTER
     * 
     */
    public Optional<Output<String>> infraScope() {
        return Optional.ofNullable(this.infraScope);
    }

    /**
     * Type of the infrastructure. Valid values: KUBERNETES, KUBERNETESV2
     * 
     */
    @Import(name="infraType")
    private @Nullable Output<String> infraType;

    /**
     * @return Type of the infrastructure. Valid values: KUBERNETES, KUBERNETESV2
     * 
     */
    public Optional<Output<String>> infraType() {
        return Optional.ofNullable(this.infraType);
    }

    /**
     * Skip TLS verification for the infrastructure.
     * 
     */
    @Import(name="insecureSkipVerify")
    private @Nullable Output<Boolean> insecureSkipVerify;

    /**
     * @return Skip TLS verification for the infrastructure.
     * 
     */
    public Optional<Output<Boolean>> insecureSkipVerify() {
        return Optional.ofNullable(this.insecureSkipVerify);
    }

    /**
     * Installation command for the infrastructure.
     * 
     */
    @Import(name="installCommand")
    private @Nullable Output<String> installCommand;

    /**
     * @return Installation command for the infrastructure.
     * 
     */
    public Optional<Output<String>> installCommand() {
        return Optional.ofNullable(this.installCommand);
    }

    /**
     * Kubernetes connector identifier.
     * 
     */
    @Import(name="k8sConnectorId")
    private @Nullable Output<String> k8sConnectorId;

    /**
     * @return Kubernetes connector identifier.
     * 
     */
    public Optional<Output<String>> k8sConnectorId() {
        return Optional.ofNullable(this.k8sConnectorId);
    }

    /**
     * Labels to apply to the infrastructure pods.
     * 
     */
    @Import(name="label")
    private @Nullable Output<Map<String,String>> label;

    /**
     * @return Labels to apply to the infrastructure pods.
     * 
     */
    public Optional<Output<Map<String,String>>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * mTLS configuration for the infrastructure.
     * 
     */
    @Import(name="mtls")
    private @Nullable Output<InfrastructureV2MtlsArgs> mtls;

    /**
     * @return mTLS configuration for the infrastructure.
     * 
     */
    public Optional<Output<InfrastructureV2MtlsArgs>> mtls() {
        return Optional.ofNullable(this.mtls);
    }

    /**
     * Name of the infrastructure.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the infrastructure.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Kubernetes namespace where the infrastructure will be installed. Maps to the infrastructure namespace.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Kubernetes namespace where the infrastructure will be installed. Maps to the infrastructure namespace.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Node selector for the infrastructure pods.
     * 
     */
    @Import(name="nodeSelector")
    private @Nullable Output<Map<String,String>> nodeSelector;

    /**
     * @return Node selector for the infrastructure pods.
     * 
     */
    public Optional<Output<Map<String,String>>> nodeSelector() {
        return Optional.ofNullable(this.nodeSelector);
    }

    /**
     * The ID of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return The ID of the organization.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * The ID of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The ID of the project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Proxy configuration for the infrastructure.
     * 
     */
    @Import(name="proxy")
    private @Nullable Output<InfrastructureV2ProxyArgs> proxy;

    /**
     * @return Proxy configuration for the infrastructure.
     * 
     */
    public Optional<Output<InfrastructureV2ProxyArgs>> proxy() {
        return Optional.ofNullable(this.proxy);
    }

    /**
     * Group ID to run the infrastructure as.
     * 
     */
    @Import(name="runAsGroup")
    private @Nullable Output<Integer> runAsGroup;

    /**
     * @return Group ID to run the infrastructure as.
     * 
     */
    public Optional<Output<Integer>> runAsGroup() {
        return Optional.ofNullable(this.runAsGroup);
    }

    /**
     * User ID to run the infrastructure as.
     * 
     */
    @Import(name="runAsUser")
    private @Nullable Output<Integer> runAsUser;

    /**
     * @return User ID to run the infrastructure as.
     * 
     */
    public Optional<Output<Integer>> runAsUser() {
        return Optional.ofNullable(this.runAsUser);
    }

    /**
     * Service account used by the infrastructure.
     * 
     */
    @Import(name="serviceAccount")
    private @Nullable Output<String> serviceAccount;

    /**
     * @return Service account used by the infrastructure.
     * 
     */
    public Optional<Output<String>> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    /**
     * Status of the infrastructure.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the infrastructure.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Tags for the infrastructure.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags for the infrastructure.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * If specified, the pod&#39;s tolerations.
     * 
     */
    @Import(name="tolerations")
    private @Nullable Output<List<InfrastructureV2TolerationArgs>> tolerations;

    /**
     * @return If specified, the pod&#39;s tolerations.
     * 
     */
    public Optional<Output<List<InfrastructureV2TolerationArgs>>> tolerations() {
        return Optional.ofNullable(this.tolerations);
    }

    /**
     * Last update timestamp.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return Last update timestamp.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * Volume mounts for the container.
     * 
     */
    @Import(name="volumeMounts")
    private @Nullable Output<List<InfrastructureV2VolumeMountArgs>> volumeMounts;

    /**
     * @return Volume mounts for the container.
     * 
     */
    public Optional<Output<List<InfrastructureV2VolumeMountArgs>>> volumeMounts() {
        return Optional.ofNullable(this.volumeMounts);
    }

    /**
     * Volumes to be created in the infrastructure.
     * 
     */
    @Import(name="volumes")
    private @Nullable Output<List<InfrastructureV2VolumeArgs>> volumes;

    /**
     * @return Volumes to be created in the infrastructure.
     * 
     */
    public Optional<Output<List<InfrastructureV2VolumeArgs>>> volumes() {
        return Optional.ofNullable(this.volumes);
    }

    private InfrastructureV2State() {}

    private InfrastructureV2State(InfrastructureV2State $) {
        this.aiEnabled = $.aiEnabled;
        this.annotation = $.annotation;
        this.containers = $.containers;
        this.correlationId = $.correlationId;
        this.createdAt = $.createdAt;
        this.description = $.description;
        this.discoveryAgentId = $.discoveryAgentId;
        this.environmentId = $.environmentId;
        this.envs = $.envs;
        this.identifiers = $.identifiers;
        this.identity = $.identity;
        this.imageRegistries = $.imageRegistries;
        this.infraId = $.infraId;
        this.infraNamespace = $.infraNamespace;
        this.infraScope = $.infraScope;
        this.infraType = $.infraType;
        this.insecureSkipVerify = $.insecureSkipVerify;
        this.installCommand = $.installCommand;
        this.k8sConnectorId = $.k8sConnectorId;
        this.label = $.label;
        this.mtls = $.mtls;
        this.name = $.name;
        this.namespace = $.namespace;
        this.nodeSelector = $.nodeSelector;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.proxy = $.proxy;
        this.runAsGroup = $.runAsGroup;
        this.runAsUser = $.runAsUser;
        this.serviceAccount = $.serviceAccount;
        this.status = $.status;
        this.tags = $.tags;
        this.tolerations = $.tolerations;
        this.updatedAt = $.updatedAt;
        this.volumeMounts = $.volumeMounts;
        this.volumes = $.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InfrastructureV2State defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InfrastructureV2State $;

        public Builder() {
            $ = new InfrastructureV2State();
        }

        public Builder(InfrastructureV2State defaults) {
            $ = new InfrastructureV2State(Objects.requireNonNull(defaults));
        }

        /**
         * @param aiEnabled Enable AI features for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder aiEnabled(@Nullable Output<Boolean> aiEnabled) {
            $.aiEnabled = aiEnabled;
            return this;
        }

        /**
         * @param aiEnabled Enable AI features for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder aiEnabled(Boolean aiEnabled) {
            return aiEnabled(Output.of(aiEnabled));
        }

        /**
         * @param annotation Annotations to apply to the infrastructure pods.
         * 
         * @return builder
         * 
         */
        public Builder annotation(@Nullable Output<Map<String,String>> annotation) {
            $.annotation = annotation;
            return this;
        }

        /**
         * @param annotation Annotations to apply to the infrastructure pods.
         * 
         * @return builder
         * 
         */
        public Builder annotation(Map<String,String> annotation) {
            return annotation(Output.of(annotation));
        }

        /**
         * @param containers Container configurations.
         * 
         * @return builder
         * 
         */
        public Builder containers(@Nullable Output<String> containers) {
            $.containers = containers;
            return this;
        }

        /**
         * @param containers Container configurations.
         * 
         * @return builder
         * 
         */
        public Builder containers(String containers) {
            return containers(Output.of(containers));
        }

        /**
         * @param correlationId Correlation ID for the request.
         * 
         * @return builder
         * 
         */
        public Builder correlationId(@Nullable Output<String> correlationId) {
            $.correlationId = correlationId;
            return this;
        }

        /**
         * @param correlationId Correlation ID for the request.
         * 
         * @return builder
         * 
         */
        public Builder correlationId(String correlationId) {
            return correlationId(Output.of(correlationId));
        }

        /**
         * @param createdAt Creation timestamp.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Creation timestamp.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param description Description of the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param discoveryAgentId ID of the discovery agent to use.
         * 
         * @return builder
         * 
         */
        public Builder discoveryAgentId(@Nullable Output<String> discoveryAgentId) {
            $.discoveryAgentId = discoveryAgentId;
            return this;
        }

        /**
         * @param discoveryAgentId ID of the discovery agent to use.
         * 
         * @return builder
         * 
         */
        public Builder discoveryAgentId(String discoveryAgentId) {
            return discoveryAgentId(Output.of(discoveryAgentId));
        }

        /**
         * @param environmentId The ID of the environment.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(@Nullable Output<String> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        /**
         * @param environmentId The ID of the environment.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(String environmentId) {
            return environmentId(Output.of(environmentId));
        }

        /**
         * @param envs List of environment variables to set in the container.
         * 
         * @return builder
         * 
         */
        public Builder envs(@Nullable Output<List<InfrastructureV2EnvArgs>> envs) {
            $.envs = envs;
            return this;
        }

        /**
         * @param envs List of environment variables to set in the container.
         * 
         * @return builder
         * 
         */
        public Builder envs(List<InfrastructureV2EnvArgs> envs) {
            return envs(Output.of(envs));
        }

        /**
         * @param envs List of environment variables to set in the container.
         * 
         * @return builder
         * 
         */
        public Builder envs(InfrastructureV2EnvArgs... envs) {
            return envs(List.of(envs));
        }

        /**
         * @param identifiers Identifier for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder identifiers(@Nullable Output<List<InfrastructureV2IdentifierArgs>> identifiers) {
            $.identifiers = identifiers;
            return this;
        }

        /**
         * @param identifiers Identifier for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder identifiers(List<InfrastructureV2IdentifierArgs> identifiers) {
            return identifiers(Output.of(identifiers));
        }

        /**
         * @param identifiers Identifier for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder identifiers(InfrastructureV2IdentifierArgs... identifiers) {
            return identifiers(List.of(identifiers));
        }

        /**
         * @param identity Identity for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<String> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity Identity for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder identity(String identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param imageRegistries Configuration for the container image registry.
         * 
         * @return builder
         * 
         */
        public Builder imageRegistries(@Nullable Output<List<InfrastructureV2ImageRegistryArgs>> imageRegistries) {
            $.imageRegistries = imageRegistries;
            return this;
        }

        /**
         * @param imageRegistries Configuration for the container image registry.
         * 
         * @return builder
         * 
         */
        public Builder imageRegistries(List<InfrastructureV2ImageRegistryArgs> imageRegistries) {
            return imageRegistries(Output.of(imageRegistries));
        }

        /**
         * @param imageRegistries Configuration for the container image registry.
         * 
         * @return builder
         * 
         */
        public Builder imageRegistries(InfrastructureV2ImageRegistryArgs... imageRegistries) {
            return imageRegistries(List.of(imageRegistries));
        }

        /**
         * @param infraId ID of the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder infraId(@Nullable Output<String> infraId) {
            $.infraId = infraId;
            return this;
        }

        /**
         * @param infraId ID of the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder infraId(String infraId) {
            return infraId(Output.of(infraId));
        }

        /**
         * @param infraNamespace Namespace where the infrastructure is installed.
         * 
         * @return builder
         * 
         */
        public Builder infraNamespace(@Nullable Output<String> infraNamespace) {
            $.infraNamespace = infraNamespace;
            return this;
        }

        /**
         * @param infraNamespace Namespace where the infrastructure is installed.
         * 
         * @return builder
         * 
         */
        public Builder infraNamespace(String infraNamespace) {
            return infraNamespace(Output.of(infraNamespace));
        }

        /**
         * @param infraScope Scope of the infrastructure. Valid values: NAMESPACE, CLUSTER
         * 
         * @return builder
         * 
         */
        public Builder infraScope(@Nullable Output<String> infraScope) {
            $.infraScope = infraScope;
            return this;
        }

        /**
         * @param infraScope Scope of the infrastructure. Valid values: NAMESPACE, CLUSTER
         * 
         * @return builder
         * 
         */
        public Builder infraScope(String infraScope) {
            return infraScope(Output.of(infraScope));
        }

        /**
         * @param infraType Type of the infrastructure. Valid values: KUBERNETES, KUBERNETESV2
         * 
         * @return builder
         * 
         */
        public Builder infraType(@Nullable Output<String> infraType) {
            $.infraType = infraType;
            return this;
        }

        /**
         * @param infraType Type of the infrastructure. Valid values: KUBERNETES, KUBERNETESV2
         * 
         * @return builder
         * 
         */
        public Builder infraType(String infraType) {
            return infraType(Output.of(infraType));
        }

        /**
         * @param insecureSkipVerify Skip TLS verification for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder insecureSkipVerify(@Nullable Output<Boolean> insecureSkipVerify) {
            $.insecureSkipVerify = insecureSkipVerify;
            return this;
        }

        /**
         * @param insecureSkipVerify Skip TLS verification for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder insecureSkipVerify(Boolean insecureSkipVerify) {
            return insecureSkipVerify(Output.of(insecureSkipVerify));
        }

        /**
         * @param installCommand Installation command for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder installCommand(@Nullable Output<String> installCommand) {
            $.installCommand = installCommand;
            return this;
        }

        /**
         * @param installCommand Installation command for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder installCommand(String installCommand) {
            return installCommand(Output.of(installCommand));
        }

        /**
         * @param k8sConnectorId Kubernetes connector identifier.
         * 
         * @return builder
         * 
         */
        public Builder k8sConnectorId(@Nullable Output<String> k8sConnectorId) {
            $.k8sConnectorId = k8sConnectorId;
            return this;
        }

        /**
         * @param k8sConnectorId Kubernetes connector identifier.
         * 
         * @return builder
         * 
         */
        public Builder k8sConnectorId(String k8sConnectorId) {
            return k8sConnectorId(Output.of(k8sConnectorId));
        }

        /**
         * @param label Labels to apply to the infrastructure pods.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<Map<String,String>> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label Labels to apply to the infrastructure pods.
         * 
         * @return builder
         * 
         */
        public Builder label(Map<String,String> label) {
            return label(Output.of(label));
        }

        /**
         * @param mtls mTLS configuration for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder mtls(@Nullable Output<InfrastructureV2MtlsArgs> mtls) {
            $.mtls = mtls;
            return this;
        }

        /**
         * @param mtls mTLS configuration for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder mtls(InfrastructureV2MtlsArgs mtls) {
            return mtls(Output.of(mtls));
        }

        /**
         * @param name Name of the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace Kubernetes namespace where the infrastructure will be installed. Maps to the infrastructure namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Kubernetes namespace where the infrastructure will be installed. Maps to the infrastructure namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param nodeSelector Node selector for the infrastructure pods.
         * 
         * @return builder
         * 
         */
        public Builder nodeSelector(@Nullable Output<Map<String,String>> nodeSelector) {
            $.nodeSelector = nodeSelector;
            return this;
        }

        /**
         * @param nodeSelector Node selector for the infrastructure pods.
         * 
         * @return builder
         * 
         */
        public Builder nodeSelector(Map<String,String> nodeSelector) {
            return nodeSelector(Output.of(nodeSelector));
        }

        /**
         * @param orgId The ID of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The ID of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId The ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param proxy Proxy configuration for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder proxy(@Nullable Output<InfrastructureV2ProxyArgs> proxy) {
            $.proxy = proxy;
            return this;
        }

        /**
         * @param proxy Proxy configuration for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder proxy(InfrastructureV2ProxyArgs proxy) {
            return proxy(Output.of(proxy));
        }

        /**
         * @param runAsGroup Group ID to run the infrastructure as.
         * 
         * @return builder
         * 
         */
        public Builder runAsGroup(@Nullable Output<Integer> runAsGroup) {
            $.runAsGroup = runAsGroup;
            return this;
        }

        /**
         * @param runAsGroup Group ID to run the infrastructure as.
         * 
         * @return builder
         * 
         */
        public Builder runAsGroup(Integer runAsGroup) {
            return runAsGroup(Output.of(runAsGroup));
        }

        /**
         * @param runAsUser User ID to run the infrastructure as.
         * 
         * @return builder
         * 
         */
        public Builder runAsUser(@Nullable Output<Integer> runAsUser) {
            $.runAsUser = runAsUser;
            return this;
        }

        /**
         * @param runAsUser User ID to run the infrastructure as.
         * 
         * @return builder
         * 
         */
        public Builder runAsUser(Integer runAsUser) {
            return runAsUser(Output.of(runAsUser));
        }

        /**
         * @param serviceAccount Service account used by the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param serviceAccount Service account used by the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        /**
         * @param status Status of the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags Tags for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tolerations If specified, the pod&#39;s tolerations.
         * 
         * @return builder
         * 
         */
        public Builder tolerations(@Nullable Output<List<InfrastructureV2TolerationArgs>> tolerations) {
            $.tolerations = tolerations;
            return this;
        }

        /**
         * @param tolerations If specified, the pod&#39;s tolerations.
         * 
         * @return builder
         * 
         */
        public Builder tolerations(List<InfrastructureV2TolerationArgs> tolerations) {
            return tolerations(Output.of(tolerations));
        }

        /**
         * @param tolerations If specified, the pod&#39;s tolerations.
         * 
         * @return builder
         * 
         */
        public Builder tolerations(InfrastructureV2TolerationArgs... tolerations) {
            return tolerations(List.of(tolerations));
        }

        /**
         * @param updatedAt Last update timestamp.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt Last update timestamp.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param volumeMounts Volume mounts for the container.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(@Nullable Output<List<InfrastructureV2VolumeMountArgs>> volumeMounts) {
            $.volumeMounts = volumeMounts;
            return this;
        }

        /**
         * @param volumeMounts Volume mounts for the container.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(List<InfrastructureV2VolumeMountArgs> volumeMounts) {
            return volumeMounts(Output.of(volumeMounts));
        }

        /**
         * @param volumeMounts Volume mounts for the container.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(InfrastructureV2VolumeMountArgs... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }

        /**
         * @param volumes Volumes to be created in the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder volumes(@Nullable Output<List<InfrastructureV2VolumeArgs>> volumes) {
            $.volumes = volumes;
            return this;
        }

        /**
         * @param volumes Volumes to be created in the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder volumes(List<InfrastructureV2VolumeArgs> volumes) {
            return volumes(Output.of(volumes));
        }

        /**
         * @param volumes Volumes to be created in the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder volumes(InfrastructureV2VolumeArgs... volumes) {
            return volumes(List.of(volumes));
        }

        public InfrastructureV2State build() {
            return $;
        }
    }

}
