// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GetGitopsAgentOperatorYamlProxyArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGitopsAgentOperatorYamlArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetGitopsAgentOperatorYamlArgs Empty = new GetGitopsAgentOperatorYamlArgs();

    /**
     * CA data of the GitOps agent, base64 encoded content of ca chain.
     * 
     */
    @Import(name="caData")
    private @Nullable Output<String> caData;

    /**
     * @return CA data of the GitOps agent, base64 encoded content of ca chain.
     * 
     */
    public Optional<Output<String>> caData() {
        return Optional.ofNullable(this.caData);
    }

    /**
     * Identifier of the GitOps agent.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return Identifier of the GitOps agent.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * The kubernetes namespace where the agent is installed.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The kubernetes namespace where the agent is installed.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * Organization identifier of the GitOps agent.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Organization identifier of the GitOps agent.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Private key for the GitOps agent. If provided authentication token will not be regenerated. Must be base64 encoded.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return Private key for the GitOps agent. If provided authentication token will not be regenerated. Must be base64 encoded.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * Project identifier of the GitOps agent.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Project identifier of the GitOps agent.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Proxy settings for the GitOps agent.
     * 
     */
    @Import(name="proxies")
    private @Nullable Output<List<GetGitopsAgentOperatorYamlProxyArgs>> proxies;

    /**
     * @return Proxy settings for the GitOps agent.
     * 
     */
    public Optional<Output<List<GetGitopsAgentOperatorYamlProxyArgs>>> proxies() {
        return Optional.ofNullable(this.proxies);
    }

    /**
     * Skip CRDs for the GitOps agent.
     * 
     */
    @Import(name="skipCrds")
    private @Nullable Output<Boolean> skipCrds;

    /**
     * @return Skip CRDs for the GitOps agent.
     * 
     */
    public Optional<Output<Boolean>> skipCrds() {
        return Optional.ofNullable(this.skipCrds);
    }

    private GetGitopsAgentOperatorYamlArgs() {}

    private GetGitopsAgentOperatorYamlArgs(GetGitopsAgentOperatorYamlArgs $) {
        this.caData = $.caData;
        this.identifier = $.identifier;
        this.namespace = $.namespace;
        this.orgId = $.orgId;
        this.privateKey = $.privateKey;
        this.projectId = $.projectId;
        this.proxies = $.proxies;
        this.skipCrds = $.skipCrds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGitopsAgentOperatorYamlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGitopsAgentOperatorYamlArgs $;

        public Builder() {
            $ = new GetGitopsAgentOperatorYamlArgs();
        }

        public Builder(GetGitopsAgentOperatorYamlArgs defaults) {
            $ = new GetGitopsAgentOperatorYamlArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caData CA data of the GitOps agent, base64 encoded content of ca chain.
         * 
         * @return builder
         * 
         */
        public Builder caData(@Nullable Output<String> caData) {
            $.caData = caData;
            return this;
        }

        /**
         * @param caData CA data of the GitOps agent, base64 encoded content of ca chain.
         * 
         * @return builder
         * 
         */
        public Builder caData(String caData) {
            return caData(Output.of(caData));
        }

        /**
         * @param identifier Identifier of the GitOps agent.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Identifier of the GitOps agent.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param namespace The kubernetes namespace where the agent is installed.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The kubernetes namespace where the agent is installed.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param orgId Organization identifier of the GitOps agent.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Organization identifier of the GitOps agent.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param privateKey Private key for the GitOps agent. If provided authentication token will not be regenerated. Must be base64 encoded.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey Private key for the GitOps agent. If provided authentication token will not be regenerated. Must be base64 encoded.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param projectId Project identifier of the GitOps agent.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project identifier of the GitOps agent.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param proxies Proxy settings for the GitOps agent.
         * 
         * @return builder
         * 
         */
        public Builder proxies(@Nullable Output<List<GetGitopsAgentOperatorYamlProxyArgs>> proxies) {
            $.proxies = proxies;
            return this;
        }

        /**
         * @param proxies Proxy settings for the GitOps agent.
         * 
         * @return builder
         * 
         */
        public Builder proxies(List<GetGitopsAgentOperatorYamlProxyArgs> proxies) {
            return proxies(Output.of(proxies));
        }

        /**
         * @param proxies Proxy settings for the GitOps agent.
         * 
         * @return builder
         * 
         */
        public Builder proxies(GetGitopsAgentOperatorYamlProxyArgs... proxies) {
            return proxies(List.of(proxies));
        }

        /**
         * @param skipCrds Skip CRDs for the GitOps agent.
         * 
         * @return builder
         * 
         */
        public Builder skipCrds(@Nullable Output<Boolean> skipCrds) {
            $.skipCrds = skipCrds;
            return this;
        }

        /**
         * @param skipCrds Skip CRDs for the GitOps agent.
         * 
         * @return builder
         * 
         */
        public Builder skipCrds(Boolean skipCrds) {
            return skipCrds(Output.of(skipCrds));
        }

        public GetGitopsAgentOperatorYamlArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("GetGitopsAgentOperatorYamlArgs", "identifier");
            }
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("GetGitopsAgentOperatorYamlArgs", "namespace");
            }
            return $;
        }
    }

}
