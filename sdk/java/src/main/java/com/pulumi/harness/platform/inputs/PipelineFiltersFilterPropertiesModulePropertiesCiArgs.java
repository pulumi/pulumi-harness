// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.PipelineFiltersFilterPropertiesModulePropertiesCiCiExecutionInfoArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineFiltersFilterPropertiesModulePropertiesCiArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineFiltersFilterPropertiesModulePropertiesCiArgs Empty = new PipelineFiltersFilterPropertiesModulePropertiesCiArgs();

    /**
     * Branch which was used while building.
     * 
     */
    @Import(name="branch")
    private @Nullable Output<String> branch;

    /**
     * @return Branch which was used while building.
     * 
     */
    public Optional<Output<String>> branch() {
        return Optional.ofNullable(this.branch);
    }

    /**
     * Build type of the pipeline. Possible values: branch.
     * 
     */
    @Import(name="buildType")
    private @Nullable Output<String> buildType;

    /**
     * @return Build type of the pipeline. Possible values: branch.
     * 
     */
    public Optional<Output<String>> buildType() {
        return Optional.ofNullable(this.buildType);
    }

    /**
     * CI execution info for the pipeline.
     * 
     */
    @Import(name="ciExecutionInfo")
    private @Nullable Output<PipelineFiltersFilterPropertiesModulePropertiesCiCiExecutionInfoArgs> ciExecutionInfo;

    /**
     * @return CI execution info for the pipeline.
     * 
     */
    public Optional<Output<PipelineFiltersFilterPropertiesModulePropertiesCiCiExecutionInfoArgs>> ciExecutionInfo() {
        return Optional.ofNullable(this.ciExecutionInfo);
    }

    /**
     * name of the repository used in the pipeline.
     * 
     */
    @Import(name="repoNames")
    private @Nullable Output<String> repoNames;

    /**
     * @return name of the repository used in the pipeline.
     * 
     */
    public Optional<Output<String>> repoNames() {
        return Optional.ofNullable(this.repoNames);
    }

    /**
     * Tags to associate with the CI pipeline resource.
     * 
     */
    @Import(name="tag")
    private @Nullable Output<String> tag;

    /**
     * @return Tags to associate with the CI pipeline resource.
     * 
     */
    public Optional<Output<String>> tag() {
        return Optional.ofNullable(this.tag);
    }

    private PipelineFiltersFilterPropertiesModulePropertiesCiArgs() {}

    private PipelineFiltersFilterPropertiesModulePropertiesCiArgs(PipelineFiltersFilterPropertiesModulePropertiesCiArgs $) {
        this.branch = $.branch;
        this.buildType = $.buildType;
        this.ciExecutionInfo = $.ciExecutionInfo;
        this.repoNames = $.repoNames;
        this.tag = $.tag;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineFiltersFilterPropertiesModulePropertiesCiArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineFiltersFilterPropertiesModulePropertiesCiArgs $;

        public Builder() {
            $ = new PipelineFiltersFilterPropertiesModulePropertiesCiArgs();
        }

        public Builder(PipelineFiltersFilterPropertiesModulePropertiesCiArgs defaults) {
            $ = new PipelineFiltersFilterPropertiesModulePropertiesCiArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branch Branch which was used while building.
         * 
         * @return builder
         * 
         */
        public Builder branch(@Nullable Output<String> branch) {
            $.branch = branch;
            return this;
        }

        /**
         * @param branch Branch which was used while building.
         * 
         * @return builder
         * 
         */
        public Builder branch(String branch) {
            return branch(Output.of(branch));
        }

        /**
         * @param buildType Build type of the pipeline. Possible values: branch.
         * 
         * @return builder
         * 
         */
        public Builder buildType(@Nullable Output<String> buildType) {
            $.buildType = buildType;
            return this;
        }

        /**
         * @param buildType Build type of the pipeline. Possible values: branch.
         * 
         * @return builder
         * 
         */
        public Builder buildType(String buildType) {
            return buildType(Output.of(buildType));
        }

        /**
         * @param ciExecutionInfo CI execution info for the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder ciExecutionInfo(@Nullable Output<PipelineFiltersFilterPropertiesModulePropertiesCiCiExecutionInfoArgs> ciExecutionInfo) {
            $.ciExecutionInfo = ciExecutionInfo;
            return this;
        }

        /**
         * @param ciExecutionInfo CI execution info for the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder ciExecutionInfo(PipelineFiltersFilterPropertiesModulePropertiesCiCiExecutionInfoArgs ciExecutionInfo) {
            return ciExecutionInfo(Output.of(ciExecutionInfo));
        }

        /**
         * @param repoNames name of the repository used in the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder repoNames(@Nullable Output<String> repoNames) {
            $.repoNames = repoNames;
            return this;
        }

        /**
         * @param repoNames name of the repository used in the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder repoNames(String repoNames) {
            return repoNames(Output.of(repoNames));
        }

        /**
         * @param tag Tags to associate with the CI pipeline resource.
         * 
         * @return builder
         * 
         */
        public Builder tag(@Nullable Output<String> tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param tag Tags to associate with the CI pipeline resource.
         * 
         * @return builder
         * 
         */
        public Builder tag(String tag) {
            return tag(Output.of(tag));
        }

        public PipelineFiltersFilterPropertiesModulePropertiesCiArgs build() {
            return $;
        }
    }

}
