// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cluster.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetOrchestratorConfigDistribution extends com.pulumi.resources.InvokeArgs {

    public static final GetOrchestratorConfigDistribution Empty = new GetOrchestratorConfigDistribution();

    /**
     * Number of minimum ondemand replicas required for workloads
     * 
     */
    @Import(name="baseOndemandCapacity")
    private @Nullable Integer baseOndemandCapacity;

    /**
     * @return Number of minimum ondemand replicas required for workloads
     * 
     */
    public Optional<Integer> baseOndemandCapacity() {
        return Optional.ofNullable(this.baseOndemandCapacity);
    }

    /**
     * Percentage of on-demand replicas required for workloads
     * 
     */
    @Import(name="ondemandReplicaPercentage", required=true)
    private Double ondemandReplicaPercentage;

    /**
     * @return Percentage of on-demand replicas required for workloads
     * 
     */
    public Double ondemandReplicaPercentage() {
        return this.ondemandReplicaPercentage;
    }

    /**
     * Selector for choosing workloads for distribution
     * 
     */
    @Import(name="selector")
    private @Nullable String selector;

    /**
     * @return Selector for choosing workloads for distribution
     * 
     */
    public Optional<String> selector() {
        return Optional.ofNullable(this.selector);
    }

    /**
     * Strategy for choosing spot nodes for cluster
     * 
     */
    @Import(name="strategy")
    private @Nullable String strategy;

    /**
     * @return Strategy for choosing spot nodes for cluster
     * 
     */
    public Optional<String> strategy() {
        return Optional.ofNullable(this.strategy);
    }

    private GetOrchestratorConfigDistribution() {}

    private GetOrchestratorConfigDistribution(GetOrchestratorConfigDistribution $) {
        this.baseOndemandCapacity = $.baseOndemandCapacity;
        this.ondemandReplicaPercentage = $.ondemandReplicaPercentage;
        this.selector = $.selector;
        this.strategy = $.strategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetOrchestratorConfigDistribution defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetOrchestratorConfigDistribution $;

        public Builder() {
            $ = new GetOrchestratorConfigDistribution();
        }

        public Builder(GetOrchestratorConfigDistribution defaults) {
            $ = new GetOrchestratorConfigDistribution(Objects.requireNonNull(defaults));
        }

        /**
         * @param baseOndemandCapacity Number of minimum ondemand replicas required for workloads
         * 
         * @return builder
         * 
         */
        public Builder baseOndemandCapacity(@Nullable Integer baseOndemandCapacity) {
            $.baseOndemandCapacity = baseOndemandCapacity;
            return this;
        }

        /**
         * @param ondemandReplicaPercentage Percentage of on-demand replicas required for workloads
         * 
         * @return builder
         * 
         */
        public Builder ondemandReplicaPercentage(Double ondemandReplicaPercentage) {
            $.ondemandReplicaPercentage = ondemandReplicaPercentage;
            return this;
        }

        /**
         * @param selector Selector for choosing workloads for distribution
         * 
         * @return builder
         * 
         */
        public Builder selector(@Nullable String selector) {
            $.selector = selector;
            return this;
        }

        /**
         * @param strategy Strategy for choosing spot nodes for cluster
         * 
         * @return builder
         * 
         */
        public Builder strategy(@Nullable String strategy) {
            $.strategy = strategy;
            return this;
        }

        public GetOrchestratorConfigDistribution build() {
            if ($.ondemandReplicaPercentage == null) {
                throw new MissingRequiredPropertyException("GetOrchestratorConfigDistribution", "ondemandReplicaPercentage");
            }
            return $;
        }
    }

}
