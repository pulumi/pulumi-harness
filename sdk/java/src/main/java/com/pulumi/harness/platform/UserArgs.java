// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.UserRoleBindingArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserArgs Empty = new UserArgs();

    /**
     * The email of the user.
     * 
     */
    @Import(name="email", required=true)
    private Output<String> email;

    /**
     * @return The email of the user.
     * 
     */
    public Output<String> email() {
        return this.email;
    }

    /**
     * Organization identifier of the user.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Organization identifier of the user.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Project identifier of the user.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Project identifier of the user.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Role Bindings of the user. Cannot be updated.
     * 
     */
    @Import(name="roleBindings")
    private @Nullable Output<List<UserRoleBindingArgs>> roleBindings;

    /**
     * @return Role Bindings of the user. Cannot be updated.
     * 
     */
    public Optional<Output<List<UserRoleBindingArgs>>> roleBindings() {
        return Optional.ofNullable(this.roleBindings);
    }

    /**
     * The user group of the user. Cannot be updated.
     * 
     */
    @Import(name="userGroups", required=true)
    private Output<List<String>> userGroups;

    /**
     * @return The user group of the user. Cannot be updated.
     * 
     */
    public Output<List<String>> userGroups() {
        return this.userGroups;
    }

    private UserArgs() {}

    private UserArgs(UserArgs $) {
        this.email = $.email;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.roleBindings = $.roleBindings;
        this.userGroups = $.userGroups;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserArgs $;

        public Builder() {
            $ = new UserArgs();
        }

        public Builder(UserArgs defaults) {
            $ = new UserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param email The email of the user.
         * 
         * @return builder
         * 
         */
        public Builder email(Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email The email of the user.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param orgId Organization identifier of the user.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Organization identifier of the user.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Project identifier of the user.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project identifier of the user.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param roleBindings Role Bindings of the user. Cannot be updated.
         * 
         * @return builder
         * 
         */
        public Builder roleBindings(@Nullable Output<List<UserRoleBindingArgs>> roleBindings) {
            $.roleBindings = roleBindings;
            return this;
        }

        /**
         * @param roleBindings Role Bindings of the user. Cannot be updated.
         * 
         * @return builder
         * 
         */
        public Builder roleBindings(List<UserRoleBindingArgs> roleBindings) {
            return roleBindings(Output.of(roleBindings));
        }

        /**
         * @param roleBindings Role Bindings of the user. Cannot be updated.
         * 
         * @return builder
         * 
         */
        public Builder roleBindings(UserRoleBindingArgs... roleBindings) {
            return roleBindings(List.of(roleBindings));
        }

        /**
         * @param userGroups The user group of the user. Cannot be updated.
         * 
         * @return builder
         * 
         */
        public Builder userGroups(Output<List<String>> userGroups) {
            $.userGroups = userGroups;
            return this;
        }

        /**
         * @param userGroups The user group of the user. Cannot be updated.
         * 
         * @return builder
         * 
         */
        public Builder userGroups(List<String> userGroups) {
            return userGroups(Output.of(userGroups));
        }

        /**
         * @param userGroups The user group of the user. Cannot be updated.
         * 
         * @return builder
         * 
         */
        public Builder userGroups(String... userGroups) {
            return userGroups(List.of(userGroups));
        }

        public UserArgs build() {
            if ($.email == null) {
                throw new MissingRequiredPropertyException("UserArgs", "email");
            }
            if ($.userGroups == null) {
                throw new MissingRequiredPropertyException("UserArgs", "userGroups");
            }
            return $;
        }
    }

}
