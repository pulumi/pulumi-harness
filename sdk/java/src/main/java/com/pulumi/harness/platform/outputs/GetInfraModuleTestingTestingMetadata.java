// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInfraModuleTestingTestingMetadata {
    /**
     * @return Account is the internal customer account ID
     * 
     */
    private String account;
    /**
     * @return Organization identifier
     * 
     */
    private String org;
    /**
     * @return Pipelines where the testing is enabled
     * 
     */
    private List<String> pipelines;
    /**
     * @return Project identifier
     * 
     */
    private String project;
    /**
     * @return Provider connector for testing purposes
     * 
     */
    private String providerConnector;
    /**
     * @return Provisioner type for testing purposes
     * 
     */
    private String provisionerType;
    /**
     * @return Provisioner version for testing purposes
     * 
     */
    private String provisionerVersion;
    /**
     * @return Release pipeline
     * 
     */
    private String releasePipeline;

    private GetInfraModuleTestingTestingMetadata() {}
    /**
     * @return Account is the internal customer account ID
     * 
     */
    public String account() {
        return this.account;
    }
    /**
     * @return Organization identifier
     * 
     */
    public String org() {
        return this.org;
    }
    /**
     * @return Pipelines where the testing is enabled
     * 
     */
    public List<String> pipelines() {
        return this.pipelines;
    }
    /**
     * @return Project identifier
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return Provider connector for testing purposes
     * 
     */
    public String providerConnector() {
        return this.providerConnector;
    }
    /**
     * @return Provisioner type for testing purposes
     * 
     */
    public String provisionerType() {
        return this.provisionerType;
    }
    /**
     * @return Provisioner version for testing purposes
     * 
     */
    public String provisionerVersion() {
        return this.provisionerVersion;
    }
    /**
     * @return Release pipeline
     * 
     */
    public String releasePipeline() {
        return this.releasePipeline;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInfraModuleTestingTestingMetadata defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String account;
        private String org;
        private List<String> pipelines;
        private String project;
        private String providerConnector;
        private String provisionerType;
        private String provisionerVersion;
        private String releasePipeline;
        public Builder() {}
        public Builder(GetInfraModuleTestingTestingMetadata defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.account = defaults.account;
    	      this.org = defaults.org;
    	      this.pipelines = defaults.pipelines;
    	      this.project = defaults.project;
    	      this.providerConnector = defaults.providerConnector;
    	      this.provisionerType = defaults.provisionerType;
    	      this.provisionerVersion = defaults.provisionerVersion;
    	      this.releasePipeline = defaults.releasePipeline;
        }

        @CustomType.Setter
        public Builder account(String account) {
            if (account == null) {
              throw new MissingRequiredPropertyException("GetInfraModuleTestingTestingMetadata", "account");
            }
            this.account = account;
            return this;
        }
        @CustomType.Setter
        public Builder org(String org) {
            if (org == null) {
              throw new MissingRequiredPropertyException("GetInfraModuleTestingTestingMetadata", "org");
            }
            this.org = org;
            return this;
        }
        @CustomType.Setter
        public Builder pipelines(List<String> pipelines) {
            if (pipelines == null) {
              throw new MissingRequiredPropertyException("GetInfraModuleTestingTestingMetadata", "pipelines");
            }
            this.pipelines = pipelines;
            return this;
        }
        public Builder pipelines(String... pipelines) {
            return pipelines(List.of(pipelines));
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetInfraModuleTestingTestingMetadata", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder providerConnector(String providerConnector) {
            if (providerConnector == null) {
              throw new MissingRequiredPropertyException("GetInfraModuleTestingTestingMetadata", "providerConnector");
            }
            this.providerConnector = providerConnector;
            return this;
        }
        @CustomType.Setter
        public Builder provisionerType(String provisionerType) {
            if (provisionerType == null) {
              throw new MissingRequiredPropertyException("GetInfraModuleTestingTestingMetadata", "provisionerType");
            }
            this.provisionerType = provisionerType;
            return this;
        }
        @CustomType.Setter
        public Builder provisionerVersion(String provisionerVersion) {
            if (provisionerVersion == null) {
              throw new MissingRequiredPropertyException("GetInfraModuleTestingTestingMetadata", "provisionerVersion");
            }
            this.provisionerVersion = provisionerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder releasePipeline(String releasePipeline) {
            if (releasePipeline == null) {
              throw new MissingRequiredPropertyException("GetInfraModuleTestingTestingMetadata", "releasePipeline");
            }
            this.releasePipeline = releasePipeline;
            return this;
        }
        public GetInfraModuleTestingTestingMetadata build() {
            final var _resultValue = new GetInfraModuleTestingTestingMetadata();
            _resultValue.account = account;
            _resultValue.org = org;
            _resultValue.pipelines = pipelines;
            _resultValue.project = project;
            _resultValue.providerConnector = providerConnector;
            _resultValue.provisionerType = provisionerType;
            _resultValue.provisionerVersion = provisionerVersion;
            _resultValue.releasePipeline = releasePipeline;
            return _resultValue;
        }
    }
}
