// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetInfrastructureV2VolumeMountArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetInfrastructureV2VolumeMountArgs Empty = new GetInfrastructureV2VolumeMountArgs();

    /**
     * Path within the container at which the volume should be mounted. Must not contain &#39;:&#39;.
     * 
     */
    @Import(name="mountPath", required=true)
    private Output<String> mountPath;

    /**
     * @return Path within the container at which the volume should be mounted. Must not contain &#39;:&#39;.
     * 
     */
    public Output<String> mountPath() {
        return this.mountPath;
    }

    /**
     * Determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used.
     * 
     */
    @Import(name="mountPropagation")
    private @Nullable Output<String> mountPropagation;

    /**
     * @return Determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used.
     * 
     */
    public Optional<Output<String>> mountPropagation() {
        return Optional.ofNullable(this.mountPropagation);
    }

    /**
     * This must match the Name of a Volume.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return This must match the Name of a Volume.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Mounted read-only if true, read-write otherwise.
     * 
     */
    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    /**
     * @return Mounted read-only if true, read-write otherwise.
     * 
     */
    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    /**
     * Path within the volume from which the container&#39;s volume should be mounted. Mutually exclusive with sub*path*expr.
     * 
     */
    @Import(name="subPath")
    private @Nullable Output<String> subPath;

    /**
     * @return Path within the volume from which the container&#39;s volume should be mounted. Mutually exclusive with sub*path*expr.
     * 
     */
    public Optional<Output<String>> subPath() {
        return Optional.ofNullable(this.subPath);
    }

    /**
     * Expanded path within the volume from which the container&#39;s volume should be mounted. Behaves similarly to sub*path but environment variable references $(VAR*NAME) are expanded using the container&#39;s environment. Mutually exclusive with sub_path.
     * 
     */
    @Import(name="subPathExpr")
    private @Nullable Output<String> subPathExpr;

    /**
     * @return Expanded path within the volume from which the container&#39;s volume should be mounted. Behaves similarly to sub*path but environment variable references $(VAR*NAME) are expanded using the container&#39;s environment. Mutually exclusive with sub_path.
     * 
     */
    public Optional<Output<String>> subPathExpr() {
        return Optional.ofNullable(this.subPathExpr);
    }

    private GetInfrastructureV2VolumeMountArgs() {}

    private GetInfrastructureV2VolumeMountArgs(GetInfrastructureV2VolumeMountArgs $) {
        this.mountPath = $.mountPath;
        this.mountPropagation = $.mountPropagation;
        this.name = $.name;
        this.readOnly = $.readOnly;
        this.subPath = $.subPath;
        this.subPathExpr = $.subPathExpr;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInfrastructureV2VolumeMountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInfrastructureV2VolumeMountArgs $;

        public Builder() {
            $ = new GetInfrastructureV2VolumeMountArgs();
        }

        public Builder(GetInfrastructureV2VolumeMountArgs defaults) {
            $ = new GetInfrastructureV2VolumeMountArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mountPath Path within the container at which the volume should be mounted. Must not contain &#39;:&#39;.
         * 
         * @return builder
         * 
         */
        public Builder mountPath(Output<String> mountPath) {
            $.mountPath = mountPath;
            return this;
        }

        /**
         * @param mountPath Path within the container at which the volume should be mounted. Must not contain &#39;:&#39;.
         * 
         * @return builder
         * 
         */
        public Builder mountPath(String mountPath) {
            return mountPath(Output.of(mountPath));
        }

        /**
         * @param mountPropagation Determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used.
         * 
         * @return builder
         * 
         */
        public Builder mountPropagation(@Nullable Output<String> mountPropagation) {
            $.mountPropagation = mountPropagation;
            return this;
        }

        /**
         * @param mountPropagation Determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used.
         * 
         * @return builder
         * 
         */
        public Builder mountPropagation(String mountPropagation) {
            return mountPropagation(Output.of(mountPropagation));
        }

        /**
         * @param name This must match the Name of a Volume.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name This must match the Name of a Volume.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param readOnly Mounted read-only if true, read-write otherwise.
         * 
         * @return builder
         * 
         */
        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        /**
         * @param readOnly Mounted read-only if true, read-write otherwise.
         * 
         * @return builder
         * 
         */
        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        /**
         * @param subPath Path within the volume from which the container&#39;s volume should be mounted. Mutually exclusive with sub*path*expr.
         * 
         * @return builder
         * 
         */
        public Builder subPath(@Nullable Output<String> subPath) {
            $.subPath = subPath;
            return this;
        }

        /**
         * @param subPath Path within the volume from which the container&#39;s volume should be mounted. Mutually exclusive with sub*path*expr.
         * 
         * @return builder
         * 
         */
        public Builder subPath(String subPath) {
            return subPath(Output.of(subPath));
        }

        /**
         * @param subPathExpr Expanded path within the volume from which the container&#39;s volume should be mounted. Behaves similarly to sub*path but environment variable references $(VAR*NAME) are expanded using the container&#39;s environment. Mutually exclusive with sub_path.
         * 
         * @return builder
         * 
         */
        public Builder subPathExpr(@Nullable Output<String> subPathExpr) {
            $.subPathExpr = subPathExpr;
            return this;
        }

        /**
         * @param subPathExpr Expanded path within the volume from which the container&#39;s volume should be mounted. Behaves similarly to sub*path but environment variable references $(VAR*NAME) are expanded using the container&#39;s environment. Mutually exclusive with sub_path.
         * 
         * @return builder
         * 
         */
        public Builder subPathExpr(String subPathExpr) {
            return subPathExpr(Output.of(subPathExpr));
        }

        public GetInfrastructureV2VolumeMountArgs build() {
            if ($.mountPath == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureV2VolumeMountArgs", "mountPath");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureV2VolumeMountArgs", "name");
            }
            return $;
        }
    }

}
