// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GetGitopsApplicationsApplicationSpecSourceDirectory;
import com.pulumi.harness.platform.outputs.GetGitopsApplicationsApplicationSpecSourceHelm;
import com.pulumi.harness.platform.outputs.GetGitopsApplicationsApplicationSpecSourceKsonnet;
import com.pulumi.harness.platform.outputs.GetGitopsApplicationsApplicationSpecSourceKustomize;
import com.pulumi.harness.platform.outputs.GetGitopsApplicationsApplicationSpecSourcePlugin;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGitopsApplicationsApplicationSpecSource {
    /**
     * @return Helm chart name, and must be specified for the GitOps applications sourced from a helm repo.
     * 
     */
    private String chart;
    /**
     * @return Options for applications of type plain YAML or Jsonnet.
     * 
     */
    private List<GetGitopsApplicationsApplicationSpecSourceDirectory> directories;
    /**
     * @return Holds helm specific options.
     * 
     */
    private List<GetGitopsApplicationsApplicationSpecSourceHelm> helms;
    /**
     * @return Ksonnet specific options.
     * 
     */
    private List<GetGitopsApplicationsApplicationSpecSourceKsonnet> ksonnets;
    /**
     * @return Options specific to a GitOps application source specific to Kustomize.
     * 
     */
    private List<GetGitopsApplicationsApplicationSpecSourceKustomize> kustomizes;
    /**
     * @return Directory path within the git repository, and is only valid for the GitOps applications sourced from git.
     * 
     */
    private String path;
    /**
     * @return Options specific to config management plugins.
     * 
     */
    private List<GetGitopsApplicationsApplicationSpecSourcePlugin> plugins;
    /**
     * @return Reference name to be used in other source spec, used for multi-source applications.
     * 
     */
    private String ref;
    /**
     * @return URL to the repository (git or helm) that contains the GitOps application manifests.
     * 
     */
    private String repoUrl;
    /**
     * @return Revision of the source to sync the GitOps application to. In case of git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag of the chart&#39;s version.
     * 
     */
    private String targetRevision;

    private GetGitopsApplicationsApplicationSpecSource() {}
    /**
     * @return Helm chart name, and must be specified for the GitOps applications sourced from a helm repo.
     * 
     */
    public String chart() {
        return this.chart;
    }
    /**
     * @return Options for applications of type plain YAML or Jsonnet.
     * 
     */
    public List<GetGitopsApplicationsApplicationSpecSourceDirectory> directories() {
        return this.directories;
    }
    /**
     * @return Holds helm specific options.
     * 
     */
    public List<GetGitopsApplicationsApplicationSpecSourceHelm> helms() {
        return this.helms;
    }
    /**
     * @return Ksonnet specific options.
     * 
     */
    public List<GetGitopsApplicationsApplicationSpecSourceKsonnet> ksonnets() {
        return this.ksonnets;
    }
    /**
     * @return Options specific to a GitOps application source specific to Kustomize.
     * 
     */
    public List<GetGitopsApplicationsApplicationSpecSourceKustomize> kustomizes() {
        return this.kustomizes;
    }
    /**
     * @return Directory path within the git repository, and is only valid for the GitOps applications sourced from git.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return Options specific to config management plugins.
     * 
     */
    public List<GetGitopsApplicationsApplicationSpecSourcePlugin> plugins() {
        return this.plugins;
    }
    /**
     * @return Reference name to be used in other source spec, used for multi-source applications.
     * 
     */
    public String ref() {
        return this.ref;
    }
    /**
     * @return URL to the repository (git or helm) that contains the GitOps application manifests.
     * 
     */
    public String repoUrl() {
        return this.repoUrl;
    }
    /**
     * @return Revision of the source to sync the GitOps application to. In case of git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag of the chart&#39;s version.
     * 
     */
    public String targetRevision() {
        return this.targetRevision;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGitopsApplicationsApplicationSpecSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String chart;
        private List<GetGitopsApplicationsApplicationSpecSourceDirectory> directories;
        private List<GetGitopsApplicationsApplicationSpecSourceHelm> helms;
        private List<GetGitopsApplicationsApplicationSpecSourceKsonnet> ksonnets;
        private List<GetGitopsApplicationsApplicationSpecSourceKustomize> kustomizes;
        private String path;
        private List<GetGitopsApplicationsApplicationSpecSourcePlugin> plugins;
        private String ref;
        private String repoUrl;
        private String targetRevision;
        public Builder() {}
        public Builder(GetGitopsApplicationsApplicationSpecSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chart = defaults.chart;
    	      this.directories = defaults.directories;
    	      this.helms = defaults.helms;
    	      this.ksonnets = defaults.ksonnets;
    	      this.kustomizes = defaults.kustomizes;
    	      this.path = defaults.path;
    	      this.plugins = defaults.plugins;
    	      this.ref = defaults.ref;
    	      this.repoUrl = defaults.repoUrl;
    	      this.targetRevision = defaults.targetRevision;
        }

        @CustomType.Setter
        public Builder chart(String chart) {
            if (chart == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSource", "chart");
            }
            this.chart = chart;
            return this;
        }
        @CustomType.Setter
        public Builder directories(List<GetGitopsApplicationsApplicationSpecSourceDirectory> directories) {
            if (directories == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSource", "directories");
            }
            this.directories = directories;
            return this;
        }
        public Builder directories(GetGitopsApplicationsApplicationSpecSourceDirectory... directories) {
            return directories(List.of(directories));
        }
        @CustomType.Setter
        public Builder helms(List<GetGitopsApplicationsApplicationSpecSourceHelm> helms) {
            if (helms == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSource", "helms");
            }
            this.helms = helms;
            return this;
        }
        public Builder helms(GetGitopsApplicationsApplicationSpecSourceHelm... helms) {
            return helms(List.of(helms));
        }
        @CustomType.Setter
        public Builder ksonnets(List<GetGitopsApplicationsApplicationSpecSourceKsonnet> ksonnets) {
            if (ksonnets == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSource", "ksonnets");
            }
            this.ksonnets = ksonnets;
            return this;
        }
        public Builder ksonnets(GetGitopsApplicationsApplicationSpecSourceKsonnet... ksonnets) {
            return ksonnets(List.of(ksonnets));
        }
        @CustomType.Setter
        public Builder kustomizes(List<GetGitopsApplicationsApplicationSpecSourceKustomize> kustomizes) {
            if (kustomizes == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSource", "kustomizes");
            }
            this.kustomizes = kustomizes;
            return this;
        }
        public Builder kustomizes(GetGitopsApplicationsApplicationSpecSourceKustomize... kustomizes) {
            return kustomizes(List.of(kustomizes));
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSource", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder plugins(List<GetGitopsApplicationsApplicationSpecSourcePlugin> plugins) {
            if (plugins == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSource", "plugins");
            }
            this.plugins = plugins;
            return this;
        }
        public Builder plugins(GetGitopsApplicationsApplicationSpecSourcePlugin... plugins) {
            return plugins(List.of(plugins));
        }
        @CustomType.Setter
        public Builder ref(String ref) {
            if (ref == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSource", "ref");
            }
            this.ref = ref;
            return this;
        }
        @CustomType.Setter
        public Builder repoUrl(String repoUrl) {
            if (repoUrl == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSource", "repoUrl");
            }
            this.repoUrl = repoUrl;
            return this;
        }
        @CustomType.Setter
        public Builder targetRevision(String targetRevision) {
            if (targetRevision == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSource", "targetRevision");
            }
            this.targetRevision = targetRevision;
            return this;
        }
        public GetGitopsApplicationsApplicationSpecSource build() {
            final var _resultValue = new GetGitopsApplicationsApplicationSpecSource();
            _resultValue.chart = chart;
            _resultValue.directories = directories;
            _resultValue.helms = helms;
            _resultValue.ksonnets = ksonnets;
            _resultValue.kustomizes = kustomizes;
            _resultValue.path = path;
            _resultValue.plugins = plugins;
            _resultValue.ref = ref;
            _resultValue.repoUrl = repoUrl;
            _resultValue.targetRevision = targetRevision;
            return _resultValue;
        }
    }
}
