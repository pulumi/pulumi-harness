// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGithubTokenRef;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGithub {
    /**
     * @return The GitHub API URL to talk to. Default https://api.github.com/.
     * 
     */
    private @Nullable String api;
    /**
     * @return Reference to a GitHub App repo-creds secret with permission to access pull requests.
     * 
     */
    private @Nullable String appSecretName;
    /**
     * @return Labels is used to filter the PRs that you want to target.
     * 
     */
    private @Nullable List<String> labels;
    /**
     * @return GitHub org or user to scan.
     * 
     */
    private String owner;
    /**
     * @return GitHub repo name to scan.
     * 
     */
    private String repo;
    /**
     * @return Authentication token reference.
     * 
     */
    private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGithubTokenRef tokenRef;

    private GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGithub() {}
    /**
     * @return The GitHub API URL to talk to. Default https://api.github.com/.
     * 
     */
    public Optional<String> api() {
        return Optional.ofNullable(this.api);
    }
    /**
     * @return Reference to a GitHub App repo-creds secret with permission to access pull requests.
     * 
     */
    public Optional<String> appSecretName() {
        return Optional.ofNullable(this.appSecretName);
    }
    /**
     * @return Labels is used to filter the PRs that you want to target.
     * 
     */
    public List<String> labels() {
        return this.labels == null ? List.of() : this.labels;
    }
    /**
     * @return GitHub org or user to scan.
     * 
     */
    public String owner() {
        return this.owner;
    }
    /**
     * @return GitHub repo name to scan.
     * 
     */
    public String repo() {
        return this.repo;
    }
    /**
     * @return Authentication token reference.
     * 
     */
    public Optional<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGithubTokenRef> tokenRef() {
        return Optional.ofNullable(this.tokenRef);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGithub defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String api;
        private @Nullable String appSecretName;
        private @Nullable List<String> labels;
        private String owner;
        private String repo;
        private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGithubTokenRef tokenRef;
        public Builder() {}
        public Builder(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGithub defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.api = defaults.api;
    	      this.appSecretName = defaults.appSecretName;
    	      this.labels = defaults.labels;
    	      this.owner = defaults.owner;
    	      this.repo = defaults.repo;
    	      this.tokenRef = defaults.tokenRef;
        }

        @CustomType.Setter
        public Builder api(@Nullable String api) {

            this.api = api;
            return this;
        }
        @CustomType.Setter
        public Builder appSecretName(@Nullable String appSecretName) {

            this.appSecretName = appSecretName;
            return this;
        }
        @CustomType.Setter
        public Builder labels(@Nullable List<String> labels) {

            this.labels = labels;
            return this;
        }
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            if (owner == null) {
              throw new MissingRequiredPropertyException("GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGithub", "owner");
            }
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder repo(String repo) {
            if (repo == null) {
              throw new MissingRequiredPropertyException("GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGithub", "repo");
            }
            this.repo = repo;
            return this;
        }
        @CustomType.Setter
        public Builder tokenRef(@Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGithubTokenRef tokenRef) {

            this.tokenRef = tokenRef;
            return this;
        }
        public GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGithub build() {
            final var _resultValue = new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGithub();
            _resultValue.api = api;
            _resultValue.appSecretName = appSecretName;
            _resultValue.labels = labels;
            _resultValue.owner = owner;
            _resultValue.repo = repo;
            _resultValue.tokenRef = tokenRef;
            return _resultValue;
        }
    }
}
