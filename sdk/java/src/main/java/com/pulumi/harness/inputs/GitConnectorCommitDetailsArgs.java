// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitConnectorCommitDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitConnectorCommitDetailsArgs Empty = new GitConnectorCommitDetailsArgs();

    /**
     * The email id of the author
     * 
     */
    @Import(name="authorEmailId")
    private @Nullable Output<String> authorEmailId;

    /**
     * @return The email id of the author
     * 
     */
    public Optional<Output<String>> authorEmailId() {
        return Optional.ofNullable(this.authorEmailId);
    }

    /**
     * The name of the author
     * 
     */
    @Import(name="authorName")
    private @Nullable Output<String> authorName;

    /**
     * @return The name of the author
     * 
     */
    public Optional<Output<String>> authorName() {
        return Optional.ofNullable(this.authorName);
    }

    /**
     * Commit message
     * 
     */
    @Import(name="message")
    private @Nullable Output<String> message;

    /**
     * @return Commit message
     * 
     */
    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    private GitConnectorCommitDetailsArgs() {}

    private GitConnectorCommitDetailsArgs(GitConnectorCommitDetailsArgs $) {
        this.authorEmailId = $.authorEmailId;
        this.authorName = $.authorName;
        this.message = $.message;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitConnectorCommitDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitConnectorCommitDetailsArgs $;

        public Builder() {
            $ = new GitConnectorCommitDetailsArgs();
        }

        public Builder(GitConnectorCommitDetailsArgs defaults) {
            $ = new GitConnectorCommitDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorEmailId The email id of the author
         * 
         * @return builder
         * 
         */
        public Builder authorEmailId(@Nullable Output<String> authorEmailId) {
            $.authorEmailId = authorEmailId;
            return this;
        }

        /**
         * @param authorEmailId The email id of the author
         * 
         * @return builder
         * 
         */
        public Builder authorEmailId(String authorEmailId) {
            return authorEmailId(Output.of(authorEmailId));
        }

        /**
         * @param authorName The name of the author
         * 
         * @return builder
         * 
         */
        public Builder authorName(@Nullable Output<String> authorName) {
            $.authorName = authorName;
            return this;
        }

        /**
         * @param authorName The name of the author
         * 
         * @return builder
         * 
         */
        public Builder authorName(String authorName) {
            return authorName(Output.of(authorName));
        }

        /**
         * @param message Commit message
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message Commit message
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            return message(Output.of(message));
        }

        public GitConnectorCommitDetailsArgs build() {
            return $;
        }
    }

}
