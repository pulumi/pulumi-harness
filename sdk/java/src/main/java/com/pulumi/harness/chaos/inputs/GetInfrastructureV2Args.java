// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.chaos.inputs.GetInfrastructureV2ImageRegistryArgs;
import com.pulumi.harness.chaos.inputs.GetInfrastructureV2MtlsArgs;
import com.pulumi.harness.chaos.inputs.GetInfrastructureV2ProxyArgs;
import com.pulumi.harness.chaos.inputs.GetInfrastructureV2TolerationArgs;
import com.pulumi.harness.chaos.inputs.GetInfrastructureV2VolumeArgs;
import com.pulumi.harness.chaos.inputs.GetInfrastructureV2VolumeMountArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetInfrastructureV2Args extends com.pulumi.resources.InvokeArgs {

    public static final GetInfrastructureV2Args Empty = new GetInfrastructureV2Args();

    /**
     * The ID of the environment.
     * 
     */
    @Import(name="environmentId", required=true)
    private Output<String> environmentId;

    /**
     * @return The ID of the environment.
     * 
     */
    public Output<String> environmentId() {
        return this.environmentId;
    }

    /**
     * Configuration for the container image registry.
     * 
     */
    @Import(name="imageRegistries")
    private @Nullable Output<List<GetInfrastructureV2ImageRegistryArgs>> imageRegistries;

    /**
     * @return Configuration for the container image registry.
     * 
     */
    public Optional<Output<List<GetInfrastructureV2ImageRegistryArgs>>> imageRegistries() {
        return Optional.ofNullable(this.imageRegistries);
    }

    /**
     * The ID of the infrastructure.
     * 
     */
    @Import(name="infraId", required=true)
    private Output<String> infraId;

    /**
     * @return The ID of the infrastructure.
     * 
     */
    public Output<String> infraId() {
        return this.infraId;
    }

    /**
     * mTLS configuration for the infrastructure.
     * 
     */
    @Import(name="mtls")
    private @Nullable Output<GetInfrastructureV2MtlsArgs> mtls;

    /**
     * @return mTLS configuration for the infrastructure.
     * 
     */
    public Optional<Output<GetInfrastructureV2MtlsArgs>> mtls() {
        return Optional.ofNullable(this.mtls);
    }

    /**
     * The ID of the organization.
     * 
     */
    @Import(name="orgId", required=true)
    private Output<String> orgId;

    /**
     * @return The ID of the organization.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * The ID of the project.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The ID of the project.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Proxy configuration for the infrastructure.
     * 
     */
    @Import(name="proxy")
    private @Nullable Output<GetInfrastructureV2ProxyArgs> proxy;

    /**
     * @return Proxy configuration for the infrastructure.
     * 
     */
    public Optional<Output<GetInfrastructureV2ProxyArgs>> proxy() {
        return Optional.ofNullable(this.proxy);
    }

    /**
     * If specified, the pod&#39;s tolerations.
     * 
     */
    @Import(name="tolerations")
    private @Nullable Output<List<GetInfrastructureV2TolerationArgs>> tolerations;

    /**
     * @return If specified, the pod&#39;s tolerations.
     * 
     */
    public Optional<Output<List<GetInfrastructureV2TolerationArgs>>> tolerations() {
        return Optional.ofNullable(this.tolerations);
    }

    /**
     * Volume mounts for the container.
     * 
     */
    @Import(name="volumeMounts")
    private @Nullable Output<List<GetInfrastructureV2VolumeMountArgs>> volumeMounts;

    /**
     * @return Volume mounts for the container.
     * 
     */
    public Optional<Output<List<GetInfrastructureV2VolumeMountArgs>>> volumeMounts() {
        return Optional.ofNullable(this.volumeMounts);
    }

    /**
     * Volumes to be created in the infrastructure.
     * 
     */
    @Import(name="volumes")
    private @Nullable Output<List<GetInfrastructureV2VolumeArgs>> volumes;

    /**
     * @return Volumes to be created in the infrastructure.
     * 
     */
    public Optional<Output<List<GetInfrastructureV2VolumeArgs>>> volumes() {
        return Optional.ofNullable(this.volumes);
    }

    private GetInfrastructureV2Args() {}

    private GetInfrastructureV2Args(GetInfrastructureV2Args $) {
        this.environmentId = $.environmentId;
        this.imageRegistries = $.imageRegistries;
        this.infraId = $.infraId;
        this.mtls = $.mtls;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.proxy = $.proxy;
        this.tolerations = $.tolerations;
        this.volumeMounts = $.volumeMounts;
        this.volumes = $.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInfrastructureV2Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInfrastructureV2Args $;

        public Builder() {
            $ = new GetInfrastructureV2Args();
        }

        public Builder(GetInfrastructureV2Args defaults) {
            $ = new GetInfrastructureV2Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param environmentId The ID of the environment.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(Output<String> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        /**
         * @param environmentId The ID of the environment.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(String environmentId) {
            return environmentId(Output.of(environmentId));
        }

        /**
         * @param imageRegistries Configuration for the container image registry.
         * 
         * @return builder
         * 
         */
        public Builder imageRegistries(@Nullable Output<List<GetInfrastructureV2ImageRegistryArgs>> imageRegistries) {
            $.imageRegistries = imageRegistries;
            return this;
        }

        /**
         * @param imageRegistries Configuration for the container image registry.
         * 
         * @return builder
         * 
         */
        public Builder imageRegistries(List<GetInfrastructureV2ImageRegistryArgs> imageRegistries) {
            return imageRegistries(Output.of(imageRegistries));
        }

        /**
         * @param imageRegistries Configuration for the container image registry.
         * 
         * @return builder
         * 
         */
        public Builder imageRegistries(GetInfrastructureV2ImageRegistryArgs... imageRegistries) {
            return imageRegistries(List.of(imageRegistries));
        }

        /**
         * @param infraId The ID of the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder infraId(Output<String> infraId) {
            $.infraId = infraId;
            return this;
        }

        /**
         * @param infraId The ID of the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder infraId(String infraId) {
            return infraId(Output.of(infraId));
        }

        /**
         * @param mtls mTLS configuration for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder mtls(@Nullable Output<GetInfrastructureV2MtlsArgs> mtls) {
            $.mtls = mtls;
            return this;
        }

        /**
         * @param mtls mTLS configuration for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder mtls(GetInfrastructureV2MtlsArgs mtls) {
            return mtls(Output.of(mtls));
        }

        /**
         * @param orgId The ID of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The ID of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId The ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param proxy Proxy configuration for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder proxy(@Nullable Output<GetInfrastructureV2ProxyArgs> proxy) {
            $.proxy = proxy;
            return this;
        }

        /**
         * @param proxy Proxy configuration for the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder proxy(GetInfrastructureV2ProxyArgs proxy) {
            return proxy(Output.of(proxy));
        }

        /**
         * @param tolerations If specified, the pod&#39;s tolerations.
         * 
         * @return builder
         * 
         */
        public Builder tolerations(@Nullable Output<List<GetInfrastructureV2TolerationArgs>> tolerations) {
            $.tolerations = tolerations;
            return this;
        }

        /**
         * @param tolerations If specified, the pod&#39;s tolerations.
         * 
         * @return builder
         * 
         */
        public Builder tolerations(List<GetInfrastructureV2TolerationArgs> tolerations) {
            return tolerations(Output.of(tolerations));
        }

        /**
         * @param tolerations If specified, the pod&#39;s tolerations.
         * 
         * @return builder
         * 
         */
        public Builder tolerations(GetInfrastructureV2TolerationArgs... tolerations) {
            return tolerations(List.of(tolerations));
        }

        /**
         * @param volumeMounts Volume mounts for the container.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(@Nullable Output<List<GetInfrastructureV2VolumeMountArgs>> volumeMounts) {
            $.volumeMounts = volumeMounts;
            return this;
        }

        /**
         * @param volumeMounts Volume mounts for the container.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(List<GetInfrastructureV2VolumeMountArgs> volumeMounts) {
            return volumeMounts(Output.of(volumeMounts));
        }

        /**
         * @param volumeMounts Volume mounts for the container.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(GetInfrastructureV2VolumeMountArgs... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }

        /**
         * @param volumes Volumes to be created in the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder volumes(@Nullable Output<List<GetInfrastructureV2VolumeArgs>> volumes) {
            $.volumes = volumes;
            return this;
        }

        /**
         * @param volumes Volumes to be created in the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder volumes(List<GetInfrastructureV2VolumeArgs> volumes) {
            return volumes(Output.of(volumes));
        }

        /**
         * @param volumes Volumes to be created in the infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder volumes(GetInfrastructureV2VolumeArgs... volumes) {
            return volumes(List.of(volumes));
        }

        public GetInfrastructureV2Args build() {
            if ($.environmentId == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureV2Args", "environmentId");
            }
            if ($.infraId == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureV2Args", "infraId");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureV2Args", "orgId");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureV2Args", "projectId");
            }
            return $;
        }
    }

}
