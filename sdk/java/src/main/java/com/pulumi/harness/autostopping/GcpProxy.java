// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.autostopping;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.autostopping.GcpProxyArgs;
import com.pulumi.harness.autostopping.inputs.GcpProxyState;
import com.pulumi.harness.autostopping.outputs.GcpProxyCertificates;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for creating an GCP Autostopping proxy
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.autostopping.GcpProxy;
 * import com.pulumi.harness.autostopping.GcpProxyArgs;
 * import com.pulumi.harness.autostopping.inputs.GcpProxyCertificatesArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new GcpProxy("test", GcpProxyArgs.builder()
 *             .name("name")
 *             .cloudConnectorId("cloud_connector_id")
 *             .hostName("host_name")
 *             .region("region")
 *             .vpc("https://www.googleapis.com/compute/v1/projects/project_id/global/networks/netwok_id")
 *             .zone("zone")
 *             .securityGroups("http-server")
 *             .machineType("e2-micro")
 *             .subnetId("https://www.googleapis.com/compute/v1/projects/project_id/regions/region/subnetworks/subnet_name")
 *             .apiKey("")
 *             .allocateStaticIp(false)
 *             .certificates(GcpProxyCertificatesArgs.builder()
 *                 .keySecretId("projects/project_id/secrets/secret_id/versions/1")
 *                 .certSecretId("projects/project_id/secrets/secret_id/versions/1")
 *                 .build())
 *             .deleteCloudResourcesOnDestroy(false)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 */
@ResourceType(type="harness:autostopping/gcpProxy:GcpProxy")
public class GcpProxy extends com.pulumi.resources.CustomResource {
    /**
     * Boolean value to indicate if proxy vm needs to have static IP
     * 
     */
    @Export(name="allocateStaticIp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> allocateStaticIp;

    /**
     * @return Boolean value to indicate if proxy vm needs to have static IP
     * 
     */
    public Output<Optional<Boolean>> allocateStaticIp() {
        return Codegen.optional(this.allocateStaticIp);
    }
    /**
     * Harness NG API key
     * 
     */
    @Export(name="apiKey", refs={String.class}, tree="[0]")
    private Output<String> apiKey;

    /**
     * @return Harness NG API key
     * 
     */
    public Output<String> apiKey() {
        return this.apiKey;
    }
    @Export(name="certificates", refs={GcpProxyCertificates.class}, tree="[0]")
    private Output</* @Nullable */ GcpProxyCertificates> certificates;

    public Output<Optional<GcpProxyCertificates>> certificates() {
        return Codegen.optional(this.certificates);
    }
    /**
     * Id of the cloud connector
     * 
     */
    @Export(name="cloudConnectorId", refs={String.class}, tree="[0]")
    private Output<String> cloudConnectorId;

    /**
     * @return Id of the cloud connector
     * 
     */
    public Output<String> cloudConnectorId() {
        return this.cloudConnectorId;
    }
    @Export(name="deleteCloudResourcesOnDestroy", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> deleteCloudResourcesOnDestroy;

    public Output<Boolean> deleteCloudResourcesOnDestroy() {
        return this.deleteCloudResourcesOnDestroy;
    }
    /**
     * Hostname for the proxy
     * 
     */
    @Export(name="hostName", refs={String.class}, tree="[0]")
    private Output<String> hostName;

    /**
     * @return Hostname for the proxy
     * 
     */
    public Output<String> hostName() {
        return this.hostName;
    }
    /**
     * Unique identifier of the resource
     * 
     */
    @Export(name="identifier", refs={String.class}, tree="[0]")
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }
    /**
     * Machine instance type
     * 
     */
    @Export(name="machineType", refs={String.class}, tree="[0]")
    private Output<String> machineType;

    /**
     * @return Machine instance type
     * 
     */
    public Output<String> machineType() {
        return this.machineType;
    }
    /**
     * Name of the proxy
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the proxy
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Region in which cloud resources are hosted
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return Region in which cloud resources are hosted
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * Security Group to define the security rules that determine the inbound and outbound traffic
     * 
     */
    @Export(name="securityGroups", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> securityGroups;

    /**
     * @return Security Group to define the security rules that determine the inbound and outbound traffic
     * 
     */
    public Output<Optional<List<String>>> securityGroups() {
        return Codegen.optional(this.securityGroups);
    }
    /**
     * VPC in which cloud resources are hosted
     * 
     */
    @Export(name="subnetId", refs={String.class}, tree="[0]")
    private Output<String> subnetId;

    /**
     * @return VPC in which cloud resources are hosted
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }
    /**
     * VPC in which cloud resources are hosted
     * 
     */
    @Export(name="vpc", refs={String.class}, tree="[0]")
    private Output<String> vpc;

    /**
     * @return VPC in which cloud resources are hosted
     * 
     */
    public Output<String> vpc() {
        return this.vpc;
    }
    /**
     * Zone in which cloud resources are hosted
     * 
     */
    @Export(name="zone", refs={String.class}, tree="[0]")
    private Output<String> zone;

    /**
     * @return Zone in which cloud resources are hosted
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GcpProxy(java.lang.String name) {
        this(name, GcpProxyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GcpProxy(java.lang.String name, GcpProxyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GcpProxy(java.lang.String name, GcpProxyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:autostopping/gcpProxy:GcpProxy", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private GcpProxy(java.lang.String name, Output<java.lang.String> id, @Nullable GcpProxyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:autostopping/gcpProxy:GcpProxy", name, state, makeResourceOptions(options, id), false);
    }

    private static GcpProxyArgs makeArgs(GcpProxyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? GcpProxyArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .additionalSecretOutputs(List.of(
                "apiKey"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GcpProxy get(java.lang.String name, Output<java.lang.String> id, @Nullable GcpProxyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GcpProxy(name, id, state, options);
    }
}
