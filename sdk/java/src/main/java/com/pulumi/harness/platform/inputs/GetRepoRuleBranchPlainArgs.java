// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GetRepoRuleBranchBypass;
import com.pulumi.harness.platform.inputs.GetRepoRuleBranchPattern;
import com.pulumi.harness.platform.inputs.GetRepoRuleBranchPolicy;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRepoRuleBranchPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepoRuleBranchPlainArgs Empty = new GetRepoRuleBranchPlainArgs();

    /**
     * List of users who can bypass this rule.
     * 
     */
    @Import(name="bypasses", required=true)
    private List<GetRepoRuleBranchBypass> bypasses;

    /**
     * @return List of users who can bypass this rule.
     * 
     */
    public List<GetRepoRuleBranchBypass> bypasses() {
        return this.bypasses;
    }

    /**
     * Description of the rule.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Description of the rule.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Identifier of the rule.
     * 
     */
    @Import(name="identifier", required=true)
    private String identifier;

    /**
     * @return Identifier of the rule.
     * 
     */
    public String identifier() {
        return this.identifier;
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable String orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Pattern of branch to which rule will apply.
     * 
     */
    @Import(name="patterns")
    private @Nullable List<GetRepoRuleBranchPattern> patterns;

    /**
     * @return Pattern of branch to which rule will apply.
     * 
     */
    public Optional<List<GetRepoRuleBranchPattern>> patterns() {
        return Optional.ofNullable(this.patterns);
    }

    /**
     * Policies to be applied for this rule.
     * 
     */
    @Import(name="policies", required=true)
    private List<GetRepoRuleBranchPolicy> policies;

    /**
     * @return Policies to be applied for this rule.
     * 
     */
    public List<GetRepoRuleBranchPolicy> policies() {
        return this.policies;
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable String projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Repo identifier of the repository.
     * 
     */
    @Import(name="repoIdentifier", required=true)
    private String repoIdentifier;

    /**
     * @return Repo identifier of the repository.
     * 
     */
    public String repoIdentifier() {
        return this.repoIdentifier;
    }

    /**
     * State of the rule (active, disable, monitor).
     * 
     */
    @Import(name="state", required=true)
    private String state;

    /**
     * @return State of the rule (active, disable, monitor).
     * 
     */
    public String state() {
        return this.state;
    }

    private GetRepoRuleBranchPlainArgs() {}

    private GetRepoRuleBranchPlainArgs(GetRepoRuleBranchPlainArgs $) {
        this.bypasses = $.bypasses;
        this.description = $.description;
        this.identifier = $.identifier;
        this.orgId = $.orgId;
        this.patterns = $.patterns;
        this.policies = $.policies;
        this.projectId = $.projectId;
        this.repoIdentifier = $.repoIdentifier;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepoRuleBranchPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepoRuleBranchPlainArgs $;

        public Builder() {
            $ = new GetRepoRuleBranchPlainArgs();
        }

        public Builder(GetRepoRuleBranchPlainArgs defaults) {
            $ = new GetRepoRuleBranchPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bypasses List of users who can bypass this rule.
         * 
         * @return builder
         * 
         */
        public Builder bypasses(List<GetRepoRuleBranchBypass> bypasses) {
            $.bypasses = bypasses;
            return this;
        }

        /**
         * @param bypasses List of users who can bypass this rule.
         * 
         * @return builder
         * 
         */
        public Builder bypasses(GetRepoRuleBranchBypass... bypasses) {
            return bypasses(List.of(bypasses));
        }

        /**
         * @param description Description of the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param identifier Identifier of the rule.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable String orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param patterns Pattern of branch to which rule will apply.
         * 
         * @return builder
         * 
         */
        public Builder patterns(@Nullable List<GetRepoRuleBranchPattern> patterns) {
            $.patterns = patterns;
            return this;
        }

        /**
         * @param patterns Pattern of branch to which rule will apply.
         * 
         * @return builder
         * 
         */
        public Builder patterns(GetRepoRuleBranchPattern... patterns) {
            return patterns(List.of(patterns));
        }

        /**
         * @param policies Policies to be applied for this rule.
         * 
         * @return builder
         * 
         */
        public Builder policies(List<GetRepoRuleBranchPolicy> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @param policies Policies to be applied for this rule.
         * 
         * @return builder
         * 
         */
        public Builder policies(GetRepoRuleBranchPolicy... policies) {
            return policies(List.of(policies));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable String projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param repoIdentifier Repo identifier of the repository.
         * 
         * @return builder
         * 
         */
        public Builder repoIdentifier(String repoIdentifier) {
            $.repoIdentifier = repoIdentifier;
            return this;
        }

        /**
         * @param state State of the rule (active, disable, monitor).
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            $.state = state;
            return this;
        }

        public GetRepoRuleBranchPlainArgs build() {
            if ($.bypasses == null) {
                throw new MissingRequiredPropertyException("GetRepoRuleBranchPlainArgs", "bypasses");
            }
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("GetRepoRuleBranchPlainArgs", "identifier");
            }
            if ($.policies == null) {
                throw new MissingRequiredPropertyException("GetRepoRuleBranchPlainArgs", "policies");
            }
            if ($.repoIdentifier == null) {
                throw new MissingRequiredPropertyException("GetRepoRuleBranchPlainArgs", "repoIdentifier");
            }
            if ($.state == null) {
                throw new MissingRequiredPropertyException("GetRepoRuleBranchPlainArgs", "state");
            }
            return $;
        }
    }

}
