// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsApplicationsetArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsApplicationsetArgs Empty = new GitopsApplicationsetArgs();

    /**
     * Agent identifier of the GitOps applicationset.
     * 
     */
    @Import(name="agentId", required=true)
    private Output<String> agentId;

    /**
     * @return Agent identifier of the GitOps applicationset.
     * 
     */
    public Output<String> agentId() {
        return this.agentId;
    }

    /**
     * Definition of the GitOps applicationset resource.
     * 
     */
    @Import(name="applicationset", required=true)
    private Output<GitopsApplicationsetApplicationsetArgs> applicationset;

    /**
     * @return Definition of the GitOps applicationset resource.
     * 
     */
    public Output<GitopsApplicationsetApplicationsetArgs> applicationset() {
        return this.applicationset;
    }

    /**
     * Organization identifier of the GitOps applicationset.
     * 
     */
    @Import(name="orgId", required=true)
    private Output<String> orgId;

    /**
     * @return Organization identifier of the GitOps applicationset.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * Project identifier of the GitOps applicationset.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return Project identifier of the GitOps applicationset.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Indicates if the GitOps application should be updated if existing and inserted if not.
     * 
     */
    @Import(name="upsert")
    private @Nullable Output<Boolean> upsert;

    /**
     * @return Indicates if the GitOps application should be updated if existing and inserted if not.
     * 
     */
    public Optional<Output<Boolean>> upsert() {
        return Optional.ofNullable(this.upsert);
    }

    private GitopsApplicationsetArgs() {}

    private GitopsApplicationsetArgs(GitopsApplicationsetArgs $) {
        this.agentId = $.agentId;
        this.applicationset = $.applicationset;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.upsert = $.upsert;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsApplicationsetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsApplicationsetArgs $;

        public Builder() {
            $ = new GitopsApplicationsetArgs();
        }

        public Builder(GitopsApplicationsetArgs defaults) {
            $ = new GitopsApplicationsetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentId Agent identifier of the GitOps applicationset.
         * 
         * @return builder
         * 
         */
        public Builder agentId(Output<String> agentId) {
            $.agentId = agentId;
            return this;
        }

        /**
         * @param agentId Agent identifier of the GitOps applicationset.
         * 
         * @return builder
         * 
         */
        public Builder agentId(String agentId) {
            return agentId(Output.of(agentId));
        }

        /**
         * @param applicationset Definition of the GitOps applicationset resource.
         * 
         * @return builder
         * 
         */
        public Builder applicationset(Output<GitopsApplicationsetApplicationsetArgs> applicationset) {
            $.applicationset = applicationset;
            return this;
        }

        /**
         * @param applicationset Definition of the GitOps applicationset resource.
         * 
         * @return builder
         * 
         */
        public Builder applicationset(GitopsApplicationsetApplicationsetArgs applicationset) {
            return applicationset(Output.of(applicationset));
        }

        /**
         * @param orgId Organization identifier of the GitOps applicationset.
         * 
         * @return builder
         * 
         */
        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Organization identifier of the GitOps applicationset.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Project identifier of the GitOps applicationset.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project identifier of the GitOps applicationset.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param upsert Indicates if the GitOps application should be updated if existing and inserted if not.
         * 
         * @return builder
         * 
         */
        public Builder upsert(@Nullable Output<Boolean> upsert) {
            $.upsert = upsert;
            return this;
        }

        /**
         * @param upsert Indicates if the GitOps application should be updated if existing and inserted if not.
         * 
         * @return builder
         * 
         */
        public Builder upsert(Boolean upsert) {
            return upsert(Output.of(upsert));
        }

        public GitopsApplicationsetArgs build() {
            if ($.agentId == null) {
                throw new MissingRequiredPropertyException("GitopsApplicationsetArgs", "agentId");
            }
            if ($.applicationset == null) {
                throw new MissingRequiredPropertyException("GitopsApplicationsetArgs", "applicationset");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("GitopsApplicationsetArgs", "orgId");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("GitopsApplicationsetArgs", "projectId");
            }
            return $;
        }
    }

}
