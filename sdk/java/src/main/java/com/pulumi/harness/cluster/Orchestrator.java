// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cluster;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.cluster.OrchestratorArgs;
import com.pulumi.harness.cluster.inputs.OrchestratorState;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Resource for creating ClusterOrchestrators.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.cluster.Orchestrator;
 * import com.pulumi.harness.cluster.OrchestratorArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new Orchestrator("test", OrchestratorArgs.builder()
 *             .name("name")
 *             .clusterEndpoint("http://test.test.com")
 *             .k8sConnectorId("test")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 */
@ResourceType(type="harness:cluster/orchestrator:Orchestrator")
public class Orchestrator extends com.pulumi.resources.CustomResource {
    /**
     * Endpoint of the k8s cluster being onboarded under the orchestrator
     * 
     */
    @Export(name="clusterEndpoint", refs={String.class}, tree="[0]")
    private Output<String> clusterEndpoint;

    /**
     * @return Endpoint of the k8s cluster being onboarded under the orchestrator
     * 
     */
    public Output<String> clusterEndpoint() {
        return this.clusterEndpoint;
    }
    /**
     * ID of the Harness Kubernetes Connector Being used
     * 
     */
    @Export(name="k8sConnectorId", refs={String.class}, tree="[0]")
    private Output<String> k8sConnectorId;

    /**
     * @return ID of the Harness Kubernetes Connector Being used
     * 
     */
    public Output<String> k8sConnectorId() {
        return this.k8sConnectorId;
    }
    /**
     * Name of the Orchestrator
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the Orchestrator
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Orchestrator(java.lang.String name) {
        this(name, OrchestratorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Orchestrator(java.lang.String name, OrchestratorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Orchestrator(java.lang.String name, OrchestratorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:cluster/orchestrator:Orchestrator", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Orchestrator(java.lang.String name, Output<java.lang.String> id, @Nullable OrchestratorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:cluster/orchestrator:Orchestrator", name, state, makeResourceOptions(options, id), false);
    }

    private static OrchestratorArgs makeArgs(OrchestratorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? OrchestratorArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Orchestrator get(java.lang.String name, Output<java.lang.String> id, @Nullable OrchestratorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Orchestrator(name, id, state, options);
    }
}
