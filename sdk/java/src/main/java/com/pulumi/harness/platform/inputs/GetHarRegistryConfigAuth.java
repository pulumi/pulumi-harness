// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetHarRegistryConfigAuth extends com.pulumi.resources.InvokeArgs {

    public static final GetHarRegistryConfigAuth Empty = new GetHarRegistryConfigAuth();

    @Import(name="accessKey")
    private @Nullable String accessKey;

    public Optional<String> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }

    @Import(name="accessKeyIdentifier")
    private @Nullable String accessKeyIdentifier;

    public Optional<String> accessKeyIdentifier() {
        return Optional.ofNullable(this.accessKeyIdentifier);
    }

    @Import(name="accessKeySecretPath")
    private @Nullable String accessKeySecretPath;

    public Optional<String> accessKeySecretPath() {
        return Optional.ofNullable(this.accessKeySecretPath);
    }

    /**
     * Type of authentication (UserPassword, Anonymous)
     * 
     */
    @Import(name="authType", required=true)
    private String authType;

    /**
     * @return Type of authentication (UserPassword, Anonymous)
     * 
     */
    public String authType() {
        return this.authType;
    }

    /**
     * Secret identifier for UserPassword auth type
     * 
     */
    @Import(name="secretIdentifier")
    private @Nullable String secretIdentifier;

    /**
     * @return Secret identifier for UserPassword auth type
     * 
     */
    public Optional<String> secretIdentifier() {
        return Optional.ofNullable(this.secretIdentifier);
    }

    @Import(name="secretKeyIdentifier")
    private @Nullable String secretKeyIdentifier;

    public Optional<String> secretKeyIdentifier() {
        return Optional.ofNullable(this.secretKeyIdentifier);
    }

    @Import(name="secretKeySecretPath")
    private @Nullable String secretKeySecretPath;

    public Optional<String> secretKeySecretPath() {
        return Optional.ofNullable(this.secretKeySecretPath);
    }

    /**
     * Secret space path for UserPassword auth type
     * 
     */
    @Import(name="secretSpacePath")
    private @Nullable String secretSpacePath;

    /**
     * @return Secret space path for UserPassword auth type
     * 
     */
    public Optional<String> secretSpacePath() {
        return Optional.ofNullable(this.secretSpacePath);
    }

    /**
     * User name for UserPassword auth type
     * 
     */
    @Import(name="userName")
    private @Nullable String userName;

    /**
     * @return User name for UserPassword auth type
     * 
     */
    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }

    private GetHarRegistryConfigAuth() {}

    private GetHarRegistryConfigAuth(GetHarRegistryConfigAuth $) {
        this.accessKey = $.accessKey;
        this.accessKeyIdentifier = $.accessKeyIdentifier;
        this.accessKeySecretPath = $.accessKeySecretPath;
        this.authType = $.authType;
        this.secretIdentifier = $.secretIdentifier;
        this.secretKeyIdentifier = $.secretKeyIdentifier;
        this.secretKeySecretPath = $.secretKeySecretPath;
        this.secretSpacePath = $.secretSpacePath;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetHarRegistryConfigAuth defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetHarRegistryConfigAuth $;

        public Builder() {
            $ = new GetHarRegistryConfigAuth();
        }

        public Builder(GetHarRegistryConfigAuth defaults) {
            $ = new GetHarRegistryConfigAuth(Objects.requireNonNull(defaults));
        }

        public Builder accessKey(@Nullable String accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        public Builder accessKeyIdentifier(@Nullable String accessKeyIdentifier) {
            $.accessKeyIdentifier = accessKeyIdentifier;
            return this;
        }

        public Builder accessKeySecretPath(@Nullable String accessKeySecretPath) {
            $.accessKeySecretPath = accessKeySecretPath;
            return this;
        }

        /**
         * @param authType Type of authentication (UserPassword, Anonymous)
         * 
         * @return builder
         * 
         */
        public Builder authType(String authType) {
            $.authType = authType;
            return this;
        }

        /**
         * @param secretIdentifier Secret identifier for UserPassword auth type
         * 
         * @return builder
         * 
         */
        public Builder secretIdentifier(@Nullable String secretIdentifier) {
            $.secretIdentifier = secretIdentifier;
            return this;
        }

        public Builder secretKeyIdentifier(@Nullable String secretKeyIdentifier) {
            $.secretKeyIdentifier = secretKeyIdentifier;
            return this;
        }

        public Builder secretKeySecretPath(@Nullable String secretKeySecretPath) {
            $.secretKeySecretPath = secretKeySecretPath;
            return this;
        }

        /**
         * @param secretSpacePath Secret space path for UserPassword auth type
         * 
         * @return builder
         * 
         */
        public Builder secretSpacePath(@Nullable String secretSpacePath) {
            $.secretSpacePath = secretSpacePath;
            return this;
        }

        /**
         * @param userName User name for UserPassword auth type
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable String userName) {
            $.userName = userName;
            return this;
        }

        public GetHarRegistryConfigAuth build() {
            if ($.authType == null) {
                throw new MissingRequiredPropertyException("GetHarRegistryConfigAuth", "authType");
            }
            return $;
        }
    }

}
