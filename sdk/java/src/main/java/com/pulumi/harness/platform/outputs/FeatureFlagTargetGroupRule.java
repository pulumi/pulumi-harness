// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FeatureFlagTargetGroupRule {
    /**
     * @return The attribute to use in the clause.  This can be any target attribute
     * 
     */
    private String attribute;
    /**
     * @return The rule ID. Gets auto-generated by the system
     * 
     */
    private @Nullable String id;
    /**
     * @return Is the operation negated?
     * 
     */
    private @Nullable Boolean negate;
    /**
     * @return The type of operation such as equals, starts_with, contains
     * 
     */
    private String op;
    /**
     * @return The values that are compared against the operator
     * 
     */
    private List<String> values;

    private FeatureFlagTargetGroupRule() {}
    /**
     * @return The attribute to use in the clause.  This can be any target attribute
     * 
     */
    public String attribute() {
        return this.attribute;
    }
    /**
     * @return The rule ID. Gets auto-generated by the system
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Is the operation negated?
     * 
     */
    public Optional<Boolean> negate() {
        return Optional.ofNullable(this.negate);
    }
    /**
     * @return The type of operation such as equals, starts_with, contains
     * 
     */
    public String op() {
        return this.op;
    }
    /**
     * @return The values that are compared against the operator
     * 
     */
    public List<String> values() {
        return this.values;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FeatureFlagTargetGroupRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String attribute;
        private @Nullable String id;
        private @Nullable Boolean negate;
        private String op;
        private List<String> values;
        public Builder() {}
        public Builder(FeatureFlagTargetGroupRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attribute = defaults.attribute;
    	      this.id = defaults.id;
    	      this.negate = defaults.negate;
    	      this.op = defaults.op;
    	      this.values = defaults.values;
        }

        @CustomType.Setter
        public Builder attribute(String attribute) {
            if (attribute == null) {
              throw new MissingRequiredPropertyException("FeatureFlagTargetGroupRule", "attribute");
            }
            this.attribute = attribute;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder negate(@Nullable Boolean negate) {

            this.negate = negate;
            return this;
        }
        @CustomType.Setter
        public Builder op(String op) {
            if (op == null) {
              throw new MissingRequiredPropertyException("FeatureFlagTargetGroupRule", "op");
            }
            this.op = op;
            return this;
        }
        @CustomType.Setter
        public Builder values(List<String> values) {
            if (values == null) {
              throw new MissingRequiredPropertyException("FeatureFlagTargetGroupRule", "values");
            }
            this.values = values;
            return this;
        }
        public Builder values(String... values) {
            return values(List.of(values));
        }
        public FeatureFlagTargetGroupRule build() {
            final var _resultValue = new FeatureFlagTargetGroupRule();
            _resultValue.attribute = attribute;
            _resultValue.id = id;
            _resultValue.negate = negate;
            _resultValue.op = op;
            _resultValue.values = values;
            return _resultValue;
        }
    }
}
