// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetGithubConnectorApiAuthenticationGithubApp {
    /**
     * @return Enter the GitHub App ID from the GitHub App General tab.
     * 
     */
    private String applicationId;
    /**
     * @return Reference to the secret containing application id To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    private String applicationIdRef;
    /**
     * @return Enter the Installation ID located in the URL of the installed GitHub App.
     * 
     */
    private String installationId;
    /**
     * @return Reference to the secret containing installation id. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    private String installationIdRef;
    /**
     * @return Reference to the secret containing the private key. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    private String privateKeyRef;

    private GetGithubConnectorApiAuthenticationGithubApp() {}
    /**
     * @return Enter the GitHub App ID from the GitHub App General tab.
     * 
     */
    public String applicationId() {
        return this.applicationId;
    }
    /**
     * @return Reference to the secret containing application id To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public String applicationIdRef() {
        return this.applicationIdRef;
    }
    /**
     * @return Enter the Installation ID located in the URL of the installed GitHub App.
     * 
     */
    public String installationId() {
        return this.installationId;
    }
    /**
     * @return Reference to the secret containing installation id. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public String installationIdRef() {
        return this.installationIdRef;
    }
    /**
     * @return Reference to the secret containing the private key. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public String privateKeyRef() {
        return this.privateKeyRef;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGithubConnectorApiAuthenticationGithubApp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String applicationId;
        private String applicationIdRef;
        private String installationId;
        private String installationIdRef;
        private String privateKeyRef;
        public Builder() {}
        public Builder(GetGithubConnectorApiAuthenticationGithubApp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationId = defaults.applicationId;
    	      this.applicationIdRef = defaults.applicationIdRef;
    	      this.installationId = defaults.installationId;
    	      this.installationIdRef = defaults.installationIdRef;
    	      this.privateKeyRef = defaults.privateKeyRef;
        }

        @CustomType.Setter
        public Builder applicationId(String applicationId) {
            if (applicationId == null) {
              throw new MissingRequiredPropertyException("GetGithubConnectorApiAuthenticationGithubApp", "applicationId");
            }
            this.applicationId = applicationId;
            return this;
        }
        @CustomType.Setter
        public Builder applicationIdRef(String applicationIdRef) {
            if (applicationIdRef == null) {
              throw new MissingRequiredPropertyException("GetGithubConnectorApiAuthenticationGithubApp", "applicationIdRef");
            }
            this.applicationIdRef = applicationIdRef;
            return this;
        }
        @CustomType.Setter
        public Builder installationId(String installationId) {
            if (installationId == null) {
              throw new MissingRequiredPropertyException("GetGithubConnectorApiAuthenticationGithubApp", "installationId");
            }
            this.installationId = installationId;
            return this;
        }
        @CustomType.Setter
        public Builder installationIdRef(String installationIdRef) {
            if (installationIdRef == null) {
              throw new MissingRequiredPropertyException("GetGithubConnectorApiAuthenticationGithubApp", "installationIdRef");
            }
            this.installationIdRef = installationIdRef;
            return this;
        }
        @CustomType.Setter
        public Builder privateKeyRef(String privateKeyRef) {
            if (privateKeyRef == null) {
              throw new MissingRequiredPropertyException("GetGithubConnectorApiAuthenticationGithubApp", "privateKeyRef");
            }
            this.privateKeyRef = privateKeyRef;
            return this;
        }
        public GetGithubConnectorApiAuthenticationGithubApp build() {
            final var _resultValue = new GetGithubConnectorApiAuthenticationGithubApp();
            _resultValue.applicationId = applicationId;
            _resultValue.applicationIdRef = applicationIdRef;
            _resultValue.installationId = installationId;
            _resultValue.installationIdRef = installationIdRef;
            _resultValue.privateKeyRef = privateKeyRef;
            return _resultValue;
        }
    }
}
