// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.service.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.harness.service.outputs.DiscoveryAgentInstallationDetailAgentDetail;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DiscoveryAgentInstallationDetail {
    /**
     * @return The account identifier for the installation.
     * 
     */
    private @Nullable String accountIdentifier;
    /**
     * @return Details about the installed agent.
     * 
     */
    private @Nullable List<DiscoveryAgentInstallationDetailAgentDetail> agentDetails;
    /**
     * @return The ID of the installed agent.
     * 
     */
    private @Nullable String agentId;
    /**
     * @return The timestamp when the installation was created.
     * 
     */
    private @Nullable String createdAt;
    /**
     * @return The user who created the installation.
     * 
     */
    private @Nullable String createdBy;
    /**
     * @return The ID of the delegate used for installation.
     * 
     */
    private @Nullable String delegateId;
    /**
     * @return The ID of the delegate task for the installation.
     * 
     */
    private @Nullable String delegateTaskId;
    /**
     * @return The status of the delegate task (e.g., &#39;SUCCESS&#39;).
     * 
     */
    private @Nullable String delegateTaskStatus;
    /**
     * @return The environment identifier for the installation.
     * 
     */
    private @Nullable String environmentIdentifier;
    /**
     * @return The unique identifier of the installation.
     * 
     */
    private @Nullable String id;
    /**
     * @return Whether the installation was triggered by a cron job.
     * 
     */
    private @Nullable Boolean isCronTriggered;
    /**
     * @return The timestamp when the log stream was created.
     * 
     */
    private @Nullable String logStreamCreatedAt;
    /**
     * @return The ID of the log stream for the installation.
     * 
     */
    private @Nullable String logStreamId;
    /**
     * @return The organization identifier for the installation.
     * 
     */
    private @Nullable String organizationIdentifier;
    /**
     * @return The project identifier for the installation.
     * 
     */
    private @Nullable String projectIdentifier;
    /**
     * @return Whether the installation has been removed.
     * 
     */
    private @Nullable Boolean removed;
    /**
     * @return Whether the installation has been stopped.
     * 
     */
    private @Nullable Boolean stopped;
    /**
     * @return The timestamp when the installation was last updated.
     * 
     */
    private @Nullable String updatedAt;
    /**
     * @return The user who last updated the installation.
     * 
     */
    private @Nullable String updatedBy;

    private DiscoveryAgentInstallationDetail() {}
    /**
     * @return The account identifier for the installation.
     * 
     */
    public Optional<String> accountIdentifier() {
        return Optional.ofNullable(this.accountIdentifier);
    }
    /**
     * @return Details about the installed agent.
     * 
     */
    public List<DiscoveryAgentInstallationDetailAgentDetail> agentDetails() {
        return this.agentDetails == null ? List.of() : this.agentDetails;
    }
    /**
     * @return The ID of the installed agent.
     * 
     */
    public Optional<String> agentId() {
        return Optional.ofNullable(this.agentId);
    }
    /**
     * @return The timestamp when the installation was created.
     * 
     */
    public Optional<String> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }
    /**
     * @return The user who created the installation.
     * 
     */
    public Optional<String> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }
    /**
     * @return The ID of the delegate used for installation.
     * 
     */
    public Optional<String> delegateId() {
        return Optional.ofNullable(this.delegateId);
    }
    /**
     * @return The ID of the delegate task for the installation.
     * 
     */
    public Optional<String> delegateTaskId() {
        return Optional.ofNullable(this.delegateTaskId);
    }
    /**
     * @return The status of the delegate task (e.g., &#39;SUCCESS&#39;).
     * 
     */
    public Optional<String> delegateTaskStatus() {
        return Optional.ofNullable(this.delegateTaskStatus);
    }
    /**
     * @return The environment identifier for the installation.
     * 
     */
    public Optional<String> environmentIdentifier() {
        return Optional.ofNullable(this.environmentIdentifier);
    }
    /**
     * @return The unique identifier of the installation.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Whether the installation was triggered by a cron job.
     * 
     */
    public Optional<Boolean> isCronTriggered() {
        return Optional.ofNullable(this.isCronTriggered);
    }
    /**
     * @return The timestamp when the log stream was created.
     * 
     */
    public Optional<String> logStreamCreatedAt() {
        return Optional.ofNullable(this.logStreamCreatedAt);
    }
    /**
     * @return The ID of the log stream for the installation.
     * 
     */
    public Optional<String> logStreamId() {
        return Optional.ofNullable(this.logStreamId);
    }
    /**
     * @return The organization identifier for the installation.
     * 
     */
    public Optional<String> organizationIdentifier() {
        return Optional.ofNullable(this.organizationIdentifier);
    }
    /**
     * @return The project identifier for the installation.
     * 
     */
    public Optional<String> projectIdentifier() {
        return Optional.ofNullable(this.projectIdentifier);
    }
    /**
     * @return Whether the installation has been removed.
     * 
     */
    public Optional<Boolean> removed() {
        return Optional.ofNullable(this.removed);
    }
    /**
     * @return Whether the installation has been stopped.
     * 
     */
    public Optional<Boolean> stopped() {
        return Optional.ofNullable(this.stopped);
    }
    /**
     * @return The timestamp when the installation was last updated.
     * 
     */
    public Optional<String> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }
    /**
     * @return The user who last updated the installation.
     * 
     */
    public Optional<String> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DiscoveryAgentInstallationDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accountIdentifier;
        private @Nullable List<DiscoveryAgentInstallationDetailAgentDetail> agentDetails;
        private @Nullable String agentId;
        private @Nullable String createdAt;
        private @Nullable String createdBy;
        private @Nullable String delegateId;
        private @Nullable String delegateTaskId;
        private @Nullable String delegateTaskStatus;
        private @Nullable String environmentIdentifier;
        private @Nullable String id;
        private @Nullable Boolean isCronTriggered;
        private @Nullable String logStreamCreatedAt;
        private @Nullable String logStreamId;
        private @Nullable String organizationIdentifier;
        private @Nullable String projectIdentifier;
        private @Nullable Boolean removed;
        private @Nullable Boolean stopped;
        private @Nullable String updatedAt;
        private @Nullable String updatedBy;
        public Builder() {}
        public Builder(DiscoveryAgentInstallationDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountIdentifier = defaults.accountIdentifier;
    	      this.agentDetails = defaults.agentDetails;
    	      this.agentId = defaults.agentId;
    	      this.createdAt = defaults.createdAt;
    	      this.createdBy = defaults.createdBy;
    	      this.delegateId = defaults.delegateId;
    	      this.delegateTaskId = defaults.delegateTaskId;
    	      this.delegateTaskStatus = defaults.delegateTaskStatus;
    	      this.environmentIdentifier = defaults.environmentIdentifier;
    	      this.id = defaults.id;
    	      this.isCronTriggered = defaults.isCronTriggered;
    	      this.logStreamCreatedAt = defaults.logStreamCreatedAt;
    	      this.logStreamId = defaults.logStreamId;
    	      this.organizationIdentifier = defaults.organizationIdentifier;
    	      this.projectIdentifier = defaults.projectIdentifier;
    	      this.removed = defaults.removed;
    	      this.stopped = defaults.stopped;
    	      this.updatedAt = defaults.updatedAt;
    	      this.updatedBy = defaults.updatedBy;
        }

        @CustomType.Setter
        public Builder accountIdentifier(@Nullable String accountIdentifier) {

            this.accountIdentifier = accountIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder agentDetails(@Nullable List<DiscoveryAgentInstallationDetailAgentDetail> agentDetails) {

            this.agentDetails = agentDetails;
            return this;
        }
        public Builder agentDetails(DiscoveryAgentInstallationDetailAgentDetail... agentDetails) {
            return agentDetails(List.of(agentDetails));
        }
        @CustomType.Setter
        public Builder agentId(@Nullable String agentId) {

            this.agentId = agentId;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(@Nullable String createdAt) {

            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(@Nullable String createdBy) {

            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder delegateId(@Nullable String delegateId) {

            this.delegateId = delegateId;
            return this;
        }
        @CustomType.Setter
        public Builder delegateTaskId(@Nullable String delegateTaskId) {

            this.delegateTaskId = delegateTaskId;
            return this;
        }
        @CustomType.Setter
        public Builder delegateTaskStatus(@Nullable String delegateTaskStatus) {

            this.delegateTaskStatus = delegateTaskStatus;
            return this;
        }
        @CustomType.Setter
        public Builder environmentIdentifier(@Nullable String environmentIdentifier) {

            this.environmentIdentifier = environmentIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isCronTriggered(@Nullable Boolean isCronTriggered) {

            this.isCronTriggered = isCronTriggered;
            return this;
        }
        @CustomType.Setter
        public Builder logStreamCreatedAt(@Nullable String logStreamCreatedAt) {

            this.logStreamCreatedAt = logStreamCreatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder logStreamId(@Nullable String logStreamId) {

            this.logStreamId = logStreamId;
            return this;
        }
        @CustomType.Setter
        public Builder organizationIdentifier(@Nullable String organizationIdentifier) {

            this.organizationIdentifier = organizationIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder projectIdentifier(@Nullable String projectIdentifier) {

            this.projectIdentifier = projectIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder removed(@Nullable Boolean removed) {

            this.removed = removed;
            return this;
        }
        @CustomType.Setter
        public Builder stopped(@Nullable Boolean stopped) {

            this.stopped = stopped;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(@Nullable String updatedAt) {

            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder updatedBy(@Nullable String updatedBy) {

            this.updatedBy = updatedBy;
            return this;
        }
        public DiscoveryAgentInstallationDetail build() {
            final var _resultValue = new DiscoveryAgentInstallationDetail();
            _resultValue.accountIdentifier = accountIdentifier;
            _resultValue.agentDetails = agentDetails;
            _resultValue.agentId = agentId;
            _resultValue.createdAt = createdAt;
            _resultValue.createdBy = createdBy;
            _resultValue.delegateId = delegateId;
            _resultValue.delegateTaskId = delegateTaskId;
            _resultValue.delegateTaskStatus = delegateTaskStatus;
            _resultValue.environmentIdentifier = environmentIdentifier;
            _resultValue.id = id;
            _resultValue.isCronTriggered = isCronTriggered;
            _resultValue.logStreamCreatedAt = logStreamCreatedAt;
            _resultValue.logStreamId = logStreamId;
            _resultValue.organizationIdentifier = organizationIdentifier;
            _resultValue.projectIdentifier = projectIdentifier;
            _resultValue.removed = removed;
            _resultValue.stopped = stopped;
            _resultValue.updatedAt = updatedAt;
            _resultValue.updatedBy = updatedBy;
            return _resultValue;
        }
    }
}
