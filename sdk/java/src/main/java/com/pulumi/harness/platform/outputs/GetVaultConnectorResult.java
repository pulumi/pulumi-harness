// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVaultConnectorResult {
    /**
     * @return Access type.
     * 
     */
    private String accessType;
    /**
     * @return ID of App Role.
     * 
     */
    private String appRoleId;
    /**
     * @return The authentication token for Vault.
     * 
     */
    private String authToken;
    /**
     * @return The AWS region where AWS IAM auth will happen.
     * 
     */
    private String awsRegion;
    /**
     * @return The location of the Vault directory where Secret will be stored.
     * 
     */
    private String basePath;
    /**
     * @return Is default or not.
     * 
     */
    private Boolean default_;
    /**
     * @return List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.
     * 
     */
    private List<String> delegateSelectors;
    /**
     * @return Description of the resource.
     * 
     */
    private String description;
    /**
     * @return Execute on delegate or not.
     * 
     */
    private Boolean executeOnDelegate;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Unique identifier of the resource.
     * 
     */
    private String identifier;
    /**
     * @return Is default or not.
     * 
     */
    private Boolean isDefault;
    /**
     * @return Read only or not.
     * 
     */
    private Boolean isReadOnly;
    /**
     * @return The path where kubernetes auth is enabled in Vault.
     * 
     */
    private String k8sAuthEndpoint;
    /**
     * @return Name of the resource.
     * 
     */
    private @Nullable String name;
    /**
     * @return The Vault namespace where Secret will be created.
     * 
     */
    private String namespace;
    /**
     * @return Unique identifier of the organization.
     * 
     */
    private @Nullable String orgId;
    /**
     * @return Unique identifier of the project.
     * 
     */
    private @Nullable String projectId;
    /**
     * @return Read only.
     * 
     */
    private Boolean readOnly;
    /**
     * @return Boolean value to indicate if appRole token renewal is enabled or not.
     * 
     */
    private Boolean renewAppRoleToken;
    /**
     * @return The time interval for token renewal.
     * 
     */
    private Integer renewalIntervalMinutes;
    /**
     * @return Manually entered Secret Engine.
     * 
     */
    private Boolean secretEngineManuallyConfigured;
    /**
     * @return Name of the Secret Engine.
     * 
     */
    private String secretEngineName;
    /**
     * @return Version of Secret Engine.
     * 
     */
    private Integer secretEngineVersion;
    /**
     * @return ID of the Secret.
     * 
     */
    private String secretId;
    /**
     * @return The SA token path where the token is mounted in the K8s Pod.
     * 
     */
    private String serviceAccountTokenPath;
    /**
     * @return The location at which auth token is to be read from.
     * 
     */
    private String sinkPath;
    /**
     * @return Tags to associate with the resource.
     * 
     */
    private List<String> tags;
    /**
     * @return Boolean value to indicate if AWS IAM is used for authentication.
     * 
     */
    private Boolean useAwsIam;
    /**
     * @return Boolean value to indicate if JWT is used for authentication.
     * 
     */
    private Boolean useJwtAuth;
    /**
     * @return Boolean value to indicate if K8s Auth is used for authentication.
     * 
     */
    private Boolean useK8sAuth;
    /**
     * @return Boolean value to indicate if Vault Agent is used for authentication.
     * 
     */
    private Boolean useVaultAgent;
    /**
     * @return The Vault role defined to bind to AWS IAM account/role being accessed.
     * 
     */
    private String vaultAwsIamRole;
    /**
     * @return Custom path at with JWT auth in enabled for Vault.
     * 
     */
    private String vaultJwtAuthPath;
    /**
     * @return The Vault role defined with JWT auth type for accessing Vault as per policies binded.
     * 
     */
    private String vaultJwtAuthRole;
    /**
     * @return The role where K8s auth will happen.
     * 
     */
    private String vaultK8sAuthRole;
    /**
     * @return URL of the HashiCorp Vault.
     * 
     */
    private String vaultUrl;
    /**
     * @return The AWS IAM Header Server ID that has been configured for this AWS IAM instance.
     * 
     */
    private String xvaultAwsIamServerId;

    private GetVaultConnectorResult() {}
    /**
     * @return Access type.
     * 
     */
    public String accessType() {
        return this.accessType;
    }
    /**
     * @return ID of App Role.
     * 
     */
    public String appRoleId() {
        return this.appRoleId;
    }
    /**
     * @return The authentication token for Vault.
     * 
     */
    public String authToken() {
        return this.authToken;
    }
    /**
     * @return The AWS region where AWS IAM auth will happen.
     * 
     */
    public String awsRegion() {
        return this.awsRegion;
    }
    /**
     * @return The location of the Vault directory where Secret will be stored.
     * 
     */
    public String basePath() {
        return this.basePath;
    }
    /**
     * @return Is default or not.
     * 
     */
    public Boolean default_() {
        return this.default_;
    }
    /**
     * @return List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.
     * 
     */
    public List<String> delegateSelectors() {
        return this.delegateSelectors;
    }
    /**
     * @return Description of the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Execute on delegate or not.
     * 
     */
    public Boolean executeOnDelegate() {
        return this.executeOnDelegate;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Unique identifier of the resource.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return Is default or not.
     * 
     */
    public Boolean isDefault() {
        return this.isDefault;
    }
    /**
     * @return Read only or not.
     * 
     */
    public Boolean isReadOnly() {
        return this.isReadOnly;
    }
    /**
     * @return The path where kubernetes auth is enabled in Vault.
     * 
     */
    public String k8sAuthEndpoint() {
        return this.k8sAuthEndpoint;
    }
    /**
     * @return Name of the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The Vault namespace where Secret will be created.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }
    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return Read only.
     * 
     */
    public Boolean readOnly() {
        return this.readOnly;
    }
    /**
     * @return Boolean value to indicate if appRole token renewal is enabled or not.
     * 
     */
    public Boolean renewAppRoleToken() {
        return this.renewAppRoleToken;
    }
    /**
     * @return The time interval for token renewal.
     * 
     */
    public Integer renewalIntervalMinutes() {
        return this.renewalIntervalMinutes;
    }
    /**
     * @return Manually entered Secret Engine.
     * 
     */
    public Boolean secretEngineManuallyConfigured() {
        return this.secretEngineManuallyConfigured;
    }
    /**
     * @return Name of the Secret Engine.
     * 
     */
    public String secretEngineName() {
        return this.secretEngineName;
    }
    /**
     * @return Version of Secret Engine.
     * 
     */
    public Integer secretEngineVersion() {
        return this.secretEngineVersion;
    }
    /**
     * @return ID of the Secret.
     * 
     */
    public String secretId() {
        return this.secretId;
    }
    /**
     * @return The SA token path where the token is mounted in the K8s Pod.
     * 
     */
    public String serviceAccountTokenPath() {
        return this.serviceAccountTokenPath;
    }
    /**
     * @return The location at which auth token is to be read from.
     * 
     */
    public String sinkPath() {
        return this.sinkPath;
    }
    /**
     * @return Tags to associate with the resource.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return Boolean value to indicate if AWS IAM is used for authentication.
     * 
     */
    public Boolean useAwsIam() {
        return this.useAwsIam;
    }
    /**
     * @return Boolean value to indicate if JWT is used for authentication.
     * 
     */
    public Boolean useJwtAuth() {
        return this.useJwtAuth;
    }
    /**
     * @return Boolean value to indicate if K8s Auth is used for authentication.
     * 
     */
    public Boolean useK8sAuth() {
        return this.useK8sAuth;
    }
    /**
     * @return Boolean value to indicate if Vault Agent is used for authentication.
     * 
     */
    public Boolean useVaultAgent() {
        return this.useVaultAgent;
    }
    /**
     * @return The Vault role defined to bind to AWS IAM account/role being accessed.
     * 
     */
    public String vaultAwsIamRole() {
        return this.vaultAwsIamRole;
    }
    /**
     * @return Custom path at with JWT auth in enabled for Vault.
     * 
     */
    public String vaultJwtAuthPath() {
        return this.vaultJwtAuthPath;
    }
    /**
     * @return The Vault role defined with JWT auth type for accessing Vault as per policies binded.
     * 
     */
    public String vaultJwtAuthRole() {
        return this.vaultJwtAuthRole;
    }
    /**
     * @return The role where K8s auth will happen.
     * 
     */
    public String vaultK8sAuthRole() {
        return this.vaultK8sAuthRole;
    }
    /**
     * @return URL of the HashiCorp Vault.
     * 
     */
    public String vaultUrl() {
        return this.vaultUrl;
    }
    /**
     * @return The AWS IAM Header Server ID that has been configured for this AWS IAM instance.
     * 
     */
    public String xvaultAwsIamServerId() {
        return this.xvaultAwsIamServerId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVaultConnectorResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessType;
        private String appRoleId;
        private String authToken;
        private String awsRegion;
        private String basePath;
        private Boolean default_;
        private List<String> delegateSelectors;
        private String description;
        private Boolean executeOnDelegate;
        private String id;
        private String identifier;
        private Boolean isDefault;
        private Boolean isReadOnly;
        private String k8sAuthEndpoint;
        private @Nullable String name;
        private String namespace;
        private @Nullable String orgId;
        private @Nullable String projectId;
        private Boolean readOnly;
        private Boolean renewAppRoleToken;
        private Integer renewalIntervalMinutes;
        private Boolean secretEngineManuallyConfigured;
        private String secretEngineName;
        private Integer secretEngineVersion;
        private String secretId;
        private String serviceAccountTokenPath;
        private String sinkPath;
        private List<String> tags;
        private Boolean useAwsIam;
        private Boolean useJwtAuth;
        private Boolean useK8sAuth;
        private Boolean useVaultAgent;
        private String vaultAwsIamRole;
        private String vaultJwtAuthPath;
        private String vaultJwtAuthRole;
        private String vaultK8sAuthRole;
        private String vaultUrl;
        private String xvaultAwsIamServerId;
        public Builder() {}
        public Builder(GetVaultConnectorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessType = defaults.accessType;
    	      this.appRoleId = defaults.appRoleId;
    	      this.authToken = defaults.authToken;
    	      this.awsRegion = defaults.awsRegion;
    	      this.basePath = defaults.basePath;
    	      this.default_ = defaults.default_;
    	      this.delegateSelectors = defaults.delegateSelectors;
    	      this.description = defaults.description;
    	      this.executeOnDelegate = defaults.executeOnDelegate;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.isDefault = defaults.isDefault;
    	      this.isReadOnly = defaults.isReadOnly;
    	      this.k8sAuthEndpoint = defaults.k8sAuthEndpoint;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.orgId = defaults.orgId;
    	      this.projectId = defaults.projectId;
    	      this.readOnly = defaults.readOnly;
    	      this.renewAppRoleToken = defaults.renewAppRoleToken;
    	      this.renewalIntervalMinutes = defaults.renewalIntervalMinutes;
    	      this.secretEngineManuallyConfigured = defaults.secretEngineManuallyConfigured;
    	      this.secretEngineName = defaults.secretEngineName;
    	      this.secretEngineVersion = defaults.secretEngineVersion;
    	      this.secretId = defaults.secretId;
    	      this.serviceAccountTokenPath = defaults.serviceAccountTokenPath;
    	      this.sinkPath = defaults.sinkPath;
    	      this.tags = defaults.tags;
    	      this.useAwsIam = defaults.useAwsIam;
    	      this.useJwtAuth = defaults.useJwtAuth;
    	      this.useK8sAuth = defaults.useK8sAuth;
    	      this.useVaultAgent = defaults.useVaultAgent;
    	      this.vaultAwsIamRole = defaults.vaultAwsIamRole;
    	      this.vaultJwtAuthPath = defaults.vaultJwtAuthPath;
    	      this.vaultJwtAuthRole = defaults.vaultJwtAuthRole;
    	      this.vaultK8sAuthRole = defaults.vaultK8sAuthRole;
    	      this.vaultUrl = defaults.vaultUrl;
    	      this.xvaultAwsIamServerId = defaults.xvaultAwsIamServerId;
        }

        @CustomType.Setter
        public Builder accessType(String accessType) {
            if (accessType == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "accessType");
            }
            this.accessType = accessType;
            return this;
        }
        @CustomType.Setter
        public Builder appRoleId(String appRoleId) {
            if (appRoleId == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "appRoleId");
            }
            this.appRoleId = appRoleId;
            return this;
        }
        @CustomType.Setter
        public Builder authToken(String authToken) {
            if (authToken == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "authToken");
            }
            this.authToken = authToken;
            return this;
        }
        @CustomType.Setter
        public Builder awsRegion(String awsRegion) {
            if (awsRegion == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "awsRegion");
            }
            this.awsRegion = awsRegion;
            return this;
        }
        @CustomType.Setter
        public Builder basePath(String basePath) {
            if (basePath == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "basePath");
            }
            this.basePath = basePath;
            return this;
        }
        @CustomType.Setter("default")
        public Builder default_(Boolean default_) {
            if (default_ == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "default_");
            }
            this.default_ = default_;
            return this;
        }
        @CustomType.Setter
        public Builder delegateSelectors(List<String> delegateSelectors) {
            if (delegateSelectors == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "delegateSelectors");
            }
            this.delegateSelectors = delegateSelectors;
            return this;
        }
        public Builder delegateSelectors(String... delegateSelectors) {
            return delegateSelectors(List.of(delegateSelectors));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder executeOnDelegate(Boolean executeOnDelegate) {
            if (executeOnDelegate == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "executeOnDelegate");
            }
            this.executeOnDelegate = executeOnDelegate;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            if (identifier == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "identifier");
            }
            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder isDefault(Boolean isDefault) {
            if (isDefault == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "isDefault");
            }
            this.isDefault = isDefault;
            return this;
        }
        @CustomType.Setter
        public Builder isReadOnly(Boolean isReadOnly) {
            if (isReadOnly == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "isReadOnly");
            }
            this.isReadOnly = isReadOnly;
            return this;
        }
        @CustomType.Setter
        public Builder k8sAuthEndpoint(String k8sAuthEndpoint) {
            if (k8sAuthEndpoint == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "k8sAuthEndpoint");
            }
            this.k8sAuthEndpoint = k8sAuthEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(@Nullable String orgId) {

            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder readOnly(Boolean readOnly) {
            if (readOnly == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "readOnly");
            }
            this.readOnly = readOnly;
            return this;
        }
        @CustomType.Setter
        public Builder renewAppRoleToken(Boolean renewAppRoleToken) {
            if (renewAppRoleToken == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "renewAppRoleToken");
            }
            this.renewAppRoleToken = renewAppRoleToken;
            return this;
        }
        @CustomType.Setter
        public Builder renewalIntervalMinutes(Integer renewalIntervalMinutes) {
            if (renewalIntervalMinutes == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "renewalIntervalMinutes");
            }
            this.renewalIntervalMinutes = renewalIntervalMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder secretEngineManuallyConfigured(Boolean secretEngineManuallyConfigured) {
            if (secretEngineManuallyConfigured == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "secretEngineManuallyConfigured");
            }
            this.secretEngineManuallyConfigured = secretEngineManuallyConfigured;
            return this;
        }
        @CustomType.Setter
        public Builder secretEngineName(String secretEngineName) {
            if (secretEngineName == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "secretEngineName");
            }
            this.secretEngineName = secretEngineName;
            return this;
        }
        @CustomType.Setter
        public Builder secretEngineVersion(Integer secretEngineVersion) {
            if (secretEngineVersion == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "secretEngineVersion");
            }
            this.secretEngineVersion = secretEngineVersion;
            return this;
        }
        @CustomType.Setter
        public Builder secretId(String secretId) {
            if (secretId == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "secretId");
            }
            this.secretId = secretId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountTokenPath(String serviceAccountTokenPath) {
            if (serviceAccountTokenPath == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "serviceAccountTokenPath");
            }
            this.serviceAccountTokenPath = serviceAccountTokenPath;
            return this;
        }
        @CustomType.Setter
        public Builder sinkPath(String sinkPath) {
            if (sinkPath == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "sinkPath");
            }
            this.sinkPath = sinkPath;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder useAwsIam(Boolean useAwsIam) {
            if (useAwsIam == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "useAwsIam");
            }
            this.useAwsIam = useAwsIam;
            return this;
        }
        @CustomType.Setter
        public Builder useJwtAuth(Boolean useJwtAuth) {
            if (useJwtAuth == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "useJwtAuth");
            }
            this.useJwtAuth = useJwtAuth;
            return this;
        }
        @CustomType.Setter
        public Builder useK8sAuth(Boolean useK8sAuth) {
            if (useK8sAuth == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "useK8sAuth");
            }
            this.useK8sAuth = useK8sAuth;
            return this;
        }
        @CustomType.Setter
        public Builder useVaultAgent(Boolean useVaultAgent) {
            if (useVaultAgent == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "useVaultAgent");
            }
            this.useVaultAgent = useVaultAgent;
            return this;
        }
        @CustomType.Setter
        public Builder vaultAwsIamRole(String vaultAwsIamRole) {
            if (vaultAwsIamRole == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "vaultAwsIamRole");
            }
            this.vaultAwsIamRole = vaultAwsIamRole;
            return this;
        }
        @CustomType.Setter
        public Builder vaultJwtAuthPath(String vaultJwtAuthPath) {
            if (vaultJwtAuthPath == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "vaultJwtAuthPath");
            }
            this.vaultJwtAuthPath = vaultJwtAuthPath;
            return this;
        }
        @CustomType.Setter
        public Builder vaultJwtAuthRole(String vaultJwtAuthRole) {
            if (vaultJwtAuthRole == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "vaultJwtAuthRole");
            }
            this.vaultJwtAuthRole = vaultJwtAuthRole;
            return this;
        }
        @CustomType.Setter
        public Builder vaultK8sAuthRole(String vaultK8sAuthRole) {
            if (vaultK8sAuthRole == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "vaultK8sAuthRole");
            }
            this.vaultK8sAuthRole = vaultK8sAuthRole;
            return this;
        }
        @CustomType.Setter
        public Builder vaultUrl(String vaultUrl) {
            if (vaultUrl == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "vaultUrl");
            }
            this.vaultUrl = vaultUrl;
            return this;
        }
        @CustomType.Setter
        public Builder xvaultAwsIamServerId(String xvaultAwsIamServerId) {
            if (xvaultAwsIamServerId == null) {
              throw new MissingRequiredPropertyException("GetVaultConnectorResult", "xvaultAwsIamServerId");
            }
            this.xvaultAwsIamServerId = xvaultAwsIamServerId;
            return this;
        }
        public GetVaultConnectorResult build() {
            final var _resultValue = new GetVaultConnectorResult();
            _resultValue.accessType = accessType;
            _resultValue.appRoleId = appRoleId;
            _resultValue.authToken = authToken;
            _resultValue.awsRegion = awsRegion;
            _resultValue.basePath = basePath;
            _resultValue.default_ = default_;
            _resultValue.delegateSelectors = delegateSelectors;
            _resultValue.description = description;
            _resultValue.executeOnDelegate = executeOnDelegate;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.isDefault = isDefault;
            _resultValue.isReadOnly = isReadOnly;
            _resultValue.k8sAuthEndpoint = k8sAuthEndpoint;
            _resultValue.name = name;
            _resultValue.namespace = namespace;
            _resultValue.orgId = orgId;
            _resultValue.projectId = projectId;
            _resultValue.readOnly = readOnly;
            _resultValue.renewAppRoleToken = renewAppRoleToken;
            _resultValue.renewalIntervalMinutes = renewalIntervalMinutes;
            _resultValue.secretEngineManuallyConfigured = secretEngineManuallyConfigured;
            _resultValue.secretEngineName = secretEngineName;
            _resultValue.secretEngineVersion = secretEngineVersion;
            _resultValue.secretId = secretId;
            _resultValue.serviceAccountTokenPath = serviceAccountTokenPath;
            _resultValue.sinkPath = sinkPath;
            _resultValue.tags = tags;
            _resultValue.useAwsIam = useAwsIam;
            _resultValue.useJwtAuth = useJwtAuth;
            _resultValue.useK8sAuth = useK8sAuth;
            _resultValue.useVaultAgent = useVaultAgent;
            _resultValue.vaultAwsIamRole = vaultAwsIamRole;
            _resultValue.vaultJwtAuthPath = vaultJwtAuthPath;
            _resultValue.vaultJwtAuthRole = vaultJwtAuthRole;
            _resultValue.vaultK8sAuthRole = vaultK8sAuthRole;
            _resultValue.vaultUrl = vaultUrl;
            _resultValue.xvaultAwsIamServerId = xvaultAwsIamServerId;
            return _resultValue;
        }
    }
}
