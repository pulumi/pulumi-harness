// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCurrentUserResult {
    /**
     * @return Whether the user is an administrator.
     * 
     */
    private Boolean admin;
    /**
     * @return Billing frequency of the user.
     * 
     */
    private String billingFrequency;
    /**
     * @return Default account ID of the user.
     * 
     */
    private String defaultAccountId;
    /**
     * @return Edition of the platform being used.
     * 
     */
    private String edition;
    /**
     * @return Email address of the user.
     * 
     */
    private String email;
    /**
     * @return Whether the user&#39;s email address has been verified.
     * 
     */
    private Boolean emailVerified;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Intent of the user.
     * 
     */
    private String intent;
    /**
     * @return Whether 2FA is enabled for the user.
     * 
     */
    private Boolean isTwoFactorAuthEnabled;
    /**
     * @return Whether or not the user account is locked.
     * 
     */
    private Boolean locked;
    /**
     * @return Name of the user.
     * 
     */
    private String name;
    /**
     * @return Signup action of the user.
     * 
     */
    private String signupAction;
    /**
     * @return Token used to authenticate the user.
     * 
     */
    private String token;
    /**
     * @return Unique identifier of the user.
     * 
     */
    private String uuid;

    private GetCurrentUserResult() {}
    /**
     * @return Whether the user is an administrator.
     * 
     */
    public Boolean admin() {
        return this.admin;
    }
    /**
     * @return Billing frequency of the user.
     * 
     */
    public String billingFrequency() {
        return this.billingFrequency;
    }
    /**
     * @return Default account ID of the user.
     * 
     */
    public String defaultAccountId() {
        return this.defaultAccountId;
    }
    /**
     * @return Edition of the platform being used.
     * 
     */
    public String edition() {
        return this.edition;
    }
    /**
     * @return Email address of the user.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return Whether the user&#39;s email address has been verified.
     * 
     */
    public Boolean emailVerified() {
        return this.emailVerified;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Intent of the user.
     * 
     */
    public String intent() {
        return this.intent;
    }
    /**
     * @return Whether 2FA is enabled for the user.
     * 
     */
    public Boolean isTwoFactorAuthEnabled() {
        return this.isTwoFactorAuthEnabled;
    }
    /**
     * @return Whether or not the user account is locked.
     * 
     */
    public Boolean locked() {
        return this.locked;
    }
    /**
     * @return Name of the user.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Signup action of the user.
     * 
     */
    public String signupAction() {
        return this.signupAction;
    }
    /**
     * @return Token used to authenticate the user.
     * 
     */
    public String token() {
        return this.token;
    }
    /**
     * @return Unique identifier of the user.
     * 
     */
    public String uuid() {
        return this.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCurrentUserResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean admin;
        private String billingFrequency;
        private String defaultAccountId;
        private String edition;
        private String email;
        private Boolean emailVerified;
        private String id;
        private String intent;
        private Boolean isTwoFactorAuthEnabled;
        private Boolean locked;
        private String name;
        private String signupAction;
        private String token;
        private String uuid;
        public Builder() {}
        public Builder(GetCurrentUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.admin = defaults.admin;
    	      this.billingFrequency = defaults.billingFrequency;
    	      this.defaultAccountId = defaults.defaultAccountId;
    	      this.edition = defaults.edition;
    	      this.email = defaults.email;
    	      this.emailVerified = defaults.emailVerified;
    	      this.id = defaults.id;
    	      this.intent = defaults.intent;
    	      this.isTwoFactorAuthEnabled = defaults.isTwoFactorAuthEnabled;
    	      this.locked = defaults.locked;
    	      this.name = defaults.name;
    	      this.signupAction = defaults.signupAction;
    	      this.token = defaults.token;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder admin(Boolean admin) {
            if (admin == null) {
              throw new MissingRequiredPropertyException("GetCurrentUserResult", "admin");
            }
            this.admin = admin;
            return this;
        }
        @CustomType.Setter
        public Builder billingFrequency(String billingFrequency) {
            if (billingFrequency == null) {
              throw new MissingRequiredPropertyException("GetCurrentUserResult", "billingFrequency");
            }
            this.billingFrequency = billingFrequency;
            return this;
        }
        @CustomType.Setter
        public Builder defaultAccountId(String defaultAccountId) {
            if (defaultAccountId == null) {
              throw new MissingRequiredPropertyException("GetCurrentUserResult", "defaultAccountId");
            }
            this.defaultAccountId = defaultAccountId;
            return this;
        }
        @CustomType.Setter
        public Builder edition(String edition) {
            if (edition == null) {
              throw new MissingRequiredPropertyException("GetCurrentUserResult", "edition");
            }
            this.edition = edition;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetCurrentUserResult", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder emailVerified(Boolean emailVerified) {
            if (emailVerified == null) {
              throw new MissingRequiredPropertyException("GetCurrentUserResult", "emailVerified");
            }
            this.emailVerified = emailVerified;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCurrentUserResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder intent(String intent) {
            if (intent == null) {
              throw new MissingRequiredPropertyException("GetCurrentUserResult", "intent");
            }
            this.intent = intent;
            return this;
        }
        @CustomType.Setter
        public Builder isTwoFactorAuthEnabled(Boolean isTwoFactorAuthEnabled) {
            if (isTwoFactorAuthEnabled == null) {
              throw new MissingRequiredPropertyException("GetCurrentUserResult", "isTwoFactorAuthEnabled");
            }
            this.isTwoFactorAuthEnabled = isTwoFactorAuthEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder locked(Boolean locked) {
            if (locked == null) {
              throw new MissingRequiredPropertyException("GetCurrentUserResult", "locked");
            }
            this.locked = locked;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCurrentUserResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder signupAction(String signupAction) {
            if (signupAction == null) {
              throw new MissingRequiredPropertyException("GetCurrentUserResult", "signupAction");
            }
            this.signupAction = signupAction;
            return this;
        }
        @CustomType.Setter
        public Builder token(String token) {
            if (token == null) {
              throw new MissingRequiredPropertyException("GetCurrentUserResult", "token");
            }
            this.token = token;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(String uuid) {
            if (uuid == null) {
              throw new MissingRequiredPropertyException("GetCurrentUserResult", "uuid");
            }
            this.uuid = uuid;
            return this;
        }
        public GetCurrentUserResult build() {
            final var _resultValue = new GetCurrentUserResult();
            _resultValue.admin = admin;
            _resultValue.billingFrequency = billingFrequency;
            _resultValue.defaultAccountId = defaultAccountId;
            _resultValue.edition = edition;
            _resultValue.email = email;
            _resultValue.emailVerified = emailVerified;
            _resultValue.id = id;
            _resultValue.intent = intent;
            _resultValue.isTwoFactorAuthEnabled = isTwoFactorAuthEnabled;
            _resultValue.locked = locked;
            _resultValue.name = name;
            _resultValue.signupAction = signupAction;
            _resultValue.token = token;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
