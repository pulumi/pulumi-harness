// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GetManualFreezeFreezeWindowRecurrence;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetManualFreezeFreezeWindow {
    /**
     * @return Duration of the freeze window
     * 
     */
    private String duration;
    /**
     * @return End Time of the freeze window
     * 
     */
    private String endTime;
    /**
     * @return Recurrence of the freeze window
     * 
     */
    private List<GetManualFreezeFreezeWindowRecurrence> recurrences;
    /**
     * @return Start Time of the freeze window
     * 
     */
    private String startTime;
    /**
     * @return Time zone of the freeze window
     * 
     */
    private String timeZone;

    private GetManualFreezeFreezeWindow() {}
    /**
     * @return Duration of the freeze window
     * 
     */
    public String duration() {
        return this.duration;
    }
    /**
     * @return End Time of the freeze window
     * 
     */
    public String endTime() {
        return this.endTime;
    }
    /**
     * @return Recurrence of the freeze window
     * 
     */
    public List<GetManualFreezeFreezeWindowRecurrence> recurrences() {
        return this.recurrences;
    }
    /**
     * @return Start Time of the freeze window
     * 
     */
    public String startTime() {
        return this.startTime;
    }
    /**
     * @return Time zone of the freeze window
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManualFreezeFreezeWindow defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String duration;
        private String endTime;
        private List<GetManualFreezeFreezeWindowRecurrence> recurrences;
        private String startTime;
        private String timeZone;
        public Builder() {}
        public Builder(GetManualFreezeFreezeWindow defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.duration = defaults.duration;
    	      this.endTime = defaults.endTime;
    	      this.recurrences = defaults.recurrences;
    	      this.startTime = defaults.startTime;
    	      this.timeZone = defaults.timeZone;
        }

        @CustomType.Setter
        public Builder duration(String duration) {
            if (duration == null) {
              throw new MissingRequiredPropertyException("GetManualFreezeFreezeWindow", "duration");
            }
            this.duration = duration;
            return this;
        }
        @CustomType.Setter
        public Builder endTime(String endTime) {
            if (endTime == null) {
              throw new MissingRequiredPropertyException("GetManualFreezeFreezeWindow", "endTime");
            }
            this.endTime = endTime;
            return this;
        }
        @CustomType.Setter
        public Builder recurrences(List<GetManualFreezeFreezeWindowRecurrence> recurrences) {
            if (recurrences == null) {
              throw new MissingRequiredPropertyException("GetManualFreezeFreezeWindow", "recurrences");
            }
            this.recurrences = recurrences;
            return this;
        }
        public Builder recurrences(GetManualFreezeFreezeWindowRecurrence... recurrences) {
            return recurrences(List.of(recurrences));
        }
        @CustomType.Setter
        public Builder startTime(String startTime) {
            if (startTime == null) {
              throw new MissingRequiredPropertyException("GetManualFreezeFreezeWindow", "startTime");
            }
            this.startTime = startTime;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            if (timeZone == null) {
              throw new MissingRequiredPropertyException("GetManualFreezeFreezeWindow", "timeZone");
            }
            this.timeZone = timeZone;
            return this;
        }
        public GetManualFreezeFreezeWindow build() {
            final var _resultValue = new GetManualFreezeFreezeWindow();
            _resultValue.duration = duration;
            _resultValue.endTime = endTime;
            _resultValue.recurrences = recurrences;
            _resultValue.startTime = startTime;
            _resultValue.timeZone = timeZone;
            return _resultValue;
        }
    }
}
