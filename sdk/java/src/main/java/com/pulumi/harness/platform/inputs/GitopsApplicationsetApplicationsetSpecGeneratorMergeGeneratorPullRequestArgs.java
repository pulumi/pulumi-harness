// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestBitbucketServerArgs;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestFilterArgs;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGiteaArgs;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGithubArgs;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGitlabArgs;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestTemplateArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestArgs Empty = new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestArgs();

    /**
     * Fetch pull requests from a repo hosted on a Bitbucket Server.
     * 
     */
    @Import(name="bitbucketServer")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestBitbucketServerArgs> bitbucketServer;

    /**
     * @return Fetch pull requests from a repo hosted on a Bitbucket Server.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestBitbucketServerArgs>> bitbucketServer() {
        return Optional.ofNullable(this.bitbucketServer);
    }

    /**
     * Filters allow selecting which pull requests to generate for.
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestFilterArgs>> filters;

    /**
     * @return Filters allow selecting which pull requests to generate for.
     * 
     */
    public Optional<Output<List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Specify the repository from which to fetch the Gitea Pull requests.
     * 
     */
    @Import(name="gitea")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGiteaArgs> gitea;

    /**
     * @return Specify the repository from which to fetch the Gitea Pull requests.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGiteaArgs>> gitea() {
        return Optional.ofNullable(this.gitea);
    }

    /**
     * Specify the repository from which to fetch the GitHub Pull requests.
     * 
     */
    @Import(name="github")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGithubArgs> github;

    /**
     * @return Specify the repository from which to fetch the GitHub Pull requests.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGithubArgs>> github() {
        return Optional.ofNullable(this.github);
    }

    /**
     * Specify the project from which to fetch the GitLab merge requests.
     * 
     */
    @Import(name="gitlab")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGitlabArgs> gitlab;

    /**
     * @return Specify the project from which to fetch the GitLab merge requests.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGitlabArgs>> gitlab() {
        return Optional.ofNullable(this.gitlab);
    }

    /**
     * How often to check for changes (in seconds). Default: 30min.
     * 
     */
    @Import(name="requeueAfterSeconds")
    private @Nullable Output<String> requeueAfterSeconds;

    /**
     * @return How often to check for changes (in seconds). Default: 30min.
     * 
     */
    public Optional<Output<String>> requeueAfterSeconds() {
        return Optional.ofNullable(this.requeueAfterSeconds);
    }

    /**
     * Generator template. Used to override the values of the spec-level template.
     * 
     */
    @Import(name="template")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestTemplateArgs> template;

    /**
     * @return Generator template. Used to override the values of the spec-level template.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestTemplateArgs>> template() {
        return Optional.ofNullable(this.template);
    }

    private GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestArgs() {}

    private GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestArgs(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestArgs $) {
        this.bitbucketServer = $.bitbucketServer;
        this.filters = $.filters;
        this.gitea = $.gitea;
        this.github = $.github;
        this.gitlab = $.gitlab;
        this.requeueAfterSeconds = $.requeueAfterSeconds;
        this.template = $.template;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestArgs $;

        public Builder() {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestArgs();
        }

        public Builder(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestArgs defaults) {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bitbucketServer Fetch pull requests from a repo hosted on a Bitbucket Server.
         * 
         * @return builder
         * 
         */
        public Builder bitbucketServer(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestBitbucketServerArgs> bitbucketServer) {
            $.bitbucketServer = bitbucketServer;
            return this;
        }

        /**
         * @param bitbucketServer Fetch pull requests from a repo hosted on a Bitbucket Server.
         * 
         * @return builder
         * 
         */
        public Builder bitbucketServer(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestBitbucketServerArgs bitbucketServer) {
            return bitbucketServer(Output.of(bitbucketServer));
        }

        /**
         * @param filters Filters allow selecting which pull requests to generate for.
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters Filters allow selecting which pull requests to generate for.
         * 
         * @return builder
         * 
         */
        public Builder filters(List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters Filters allow selecting which pull requests to generate for.
         * 
         * @return builder
         * 
         */
        public Builder filters(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param gitea Specify the repository from which to fetch the Gitea Pull requests.
         * 
         * @return builder
         * 
         */
        public Builder gitea(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGiteaArgs> gitea) {
            $.gitea = gitea;
            return this;
        }

        /**
         * @param gitea Specify the repository from which to fetch the Gitea Pull requests.
         * 
         * @return builder
         * 
         */
        public Builder gitea(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGiteaArgs gitea) {
            return gitea(Output.of(gitea));
        }

        /**
         * @param github Specify the repository from which to fetch the GitHub Pull requests.
         * 
         * @return builder
         * 
         */
        public Builder github(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGithubArgs> github) {
            $.github = github;
            return this;
        }

        /**
         * @param github Specify the repository from which to fetch the GitHub Pull requests.
         * 
         * @return builder
         * 
         */
        public Builder github(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGithubArgs github) {
            return github(Output.of(github));
        }

        /**
         * @param gitlab Specify the project from which to fetch the GitLab merge requests.
         * 
         * @return builder
         * 
         */
        public Builder gitlab(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGitlabArgs> gitlab) {
            $.gitlab = gitlab;
            return this;
        }

        /**
         * @param gitlab Specify the project from which to fetch the GitLab merge requests.
         * 
         * @return builder
         * 
         */
        public Builder gitlab(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestGitlabArgs gitlab) {
            return gitlab(Output.of(gitlab));
        }

        /**
         * @param requeueAfterSeconds How often to check for changes (in seconds). Default: 30min.
         * 
         * @return builder
         * 
         */
        public Builder requeueAfterSeconds(@Nullable Output<String> requeueAfterSeconds) {
            $.requeueAfterSeconds = requeueAfterSeconds;
            return this;
        }

        /**
         * @param requeueAfterSeconds How often to check for changes (in seconds). Default: 30min.
         * 
         * @return builder
         * 
         */
        public Builder requeueAfterSeconds(String requeueAfterSeconds) {
            return requeueAfterSeconds(Output.of(requeueAfterSeconds));
        }

        /**
         * @param template Generator template. Used to override the values of the spec-level template.
         * 
         * @return builder
         * 
         */
        public Builder template(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestTemplateArgs> template) {
            $.template = template;
            return this;
        }

        /**
         * @param template Generator template. Used to override the values of the spec-level template.
         * 
         * @return builder
         * 
         */
        public Builder template(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestTemplateArgs template) {
            return template(Output.of(template));
        }

        public GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorPullRequestArgs build() {
            return $;
        }
    }

}
