// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetApplicationResult {
    /**
     * @return The application description
     * 
     */
    private @Nullable String description;
    /**
     * @return The id of the git sync connector
     * 
     */
    private @Nullable String gitSyncConnectorId;
    /**
     * @return True if git sync is enabled on this application
     * 
     */
    private @Nullable Boolean gitSyncEnabled;
    /**
     * @return Unique identifier of the application
     * 
     */
    private @Nullable String id;
    /**
     * @return When this is set to true, all manual triggers will require API Key authorization
     * 
     */
    private @Nullable Boolean isManualTriggerAuthorized;
    /**
     * @return The name of the application
     * 
     */
    private @Nullable String name;

    private GetApplicationResult() {}
    /**
     * @return The application description
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The id of the git sync connector
     * 
     */
    public Optional<String> gitSyncConnectorId() {
        return Optional.ofNullable(this.gitSyncConnectorId);
    }
    /**
     * @return True if git sync is enabled on this application
     * 
     */
    public Optional<Boolean> gitSyncEnabled() {
        return Optional.ofNullable(this.gitSyncEnabled);
    }
    /**
     * @return Unique identifier of the application
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return When this is set to true, all manual triggers will require API Key authorization
     * 
     */
    public Optional<Boolean> isManualTriggerAuthorized() {
        return Optional.ofNullable(this.isManualTriggerAuthorized);
    }
    /**
     * @return The name of the application
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String description;
        private @Nullable String gitSyncConnectorId;
        private @Nullable Boolean gitSyncEnabled;
        private @Nullable String id;
        private @Nullable Boolean isManualTriggerAuthorized;
        private @Nullable String name;
        public Builder() {}
        public Builder(GetApplicationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.gitSyncConnectorId = defaults.gitSyncConnectorId;
    	      this.gitSyncEnabled = defaults.gitSyncEnabled;
    	      this.id = defaults.id;
    	      this.isManualTriggerAuthorized = defaults.isManualTriggerAuthorized;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder gitSyncConnectorId(@Nullable String gitSyncConnectorId) {

            this.gitSyncConnectorId = gitSyncConnectorId;
            return this;
        }
        @CustomType.Setter
        public Builder gitSyncEnabled(@Nullable Boolean gitSyncEnabled) {

            this.gitSyncEnabled = gitSyncEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isManualTriggerAuthorized(@Nullable Boolean isManualTriggerAuthorized) {

            this.isManualTriggerAuthorized = isManualTriggerAuthorized;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        public GetApplicationResult build() {
            final var _resultValue = new GetApplicationResult();
            _resultValue.description = description;
            _resultValue.gitSyncConnectorId = gitSyncConnectorId;
            _resultValue.gitSyncEnabled = gitSyncEnabled;
            _resultValue.id = id;
            _resultValue.isManualTriggerAuthorized = isManualTriggerAuthorized;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
