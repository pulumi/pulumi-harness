// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.OverridesGitDetailsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OverridesState extends com.pulumi.resources.ResourceArgs {

    public static final OverridesState Empty = new OverridesState();

    /**
     * The cluster ID to which the overrides are associated.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The cluster ID to which the overrides are associated.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * The environment ID to which the overrides are associated.
     * 
     */
    @Import(name="envId")
    private @Nullable Output<String> envId;

    /**
     * @return The environment ID to which the overrides are associated.
     * 
     */
    public Optional<Output<String>> envId() {
        return Optional.ofNullable(this.envId);
    }

    /**
     * Contains parameters related to creating an Entity for Git Experience.
     * 
     */
    @Import(name="gitDetails")
    private @Nullable Output<OverridesGitDetailsArgs> gitDetails;

    /**
     * @return Contains parameters related to creating an Entity for Git Experience.
     * 
     */
    public Optional<Output<OverridesGitDetailsArgs>> gitDetails() {
        return Optional.ofNullable(this.gitDetails);
    }

    /**
     * The identifier of the override entity.
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return The identifier of the override entity.
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * import override from git
     * 
     */
    @Import(name="importFromGit")
    private @Nullable Output<Boolean> importFromGit;

    /**
     * @return import override from git
     * 
     */
    public Optional<Output<Boolean>> importFromGit() {
        return Optional.ofNullable(this.importFromGit);
    }

    /**
     * The infrastructure ID to which the overrides are associated.
     * 
     */
    @Import(name="infraId")
    private @Nullable Output<String> infraId;

    /**
     * @return The infrastructure ID to which the overrides are associated.
     * 
     */
    public Optional<Output<String>> infraId() {
        return Optional.ofNullable(this.infraId);
    }

    /**
     * force import override from remote even if same file path already exist
     * 
     */
    @Import(name="isForceImport")
    private @Nullable Output<Boolean> isForceImport;

    /**
     * @return force import override from remote even if same file path already exist
     * 
     */
    public Optional<Output<Boolean>> isForceImport() {
        return Optional.ofNullable(this.isForceImport);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The service ID to which the overrides applies.
     * 
     */
    @Import(name="serviceId")
    private @Nullable Output<String> serviceId;

    /**
     * @return The service ID to which the overrides applies.
     * 
     */
    public Optional<Output<String>> serviceId() {
        return Optional.ofNullable(this.serviceId);
    }

    /**
     * The type of the overrides.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the overrides.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The yaml of the override entity
     * 
     */
    @Import(name="yaml")
    private @Nullable Output<String> yaml;

    /**
     * @return The yaml of the override entity
     * 
     */
    public Optional<Output<String>> yaml() {
        return Optional.ofNullable(this.yaml);
    }

    private OverridesState() {}

    private OverridesState(OverridesState $) {
        this.clusterId = $.clusterId;
        this.envId = $.envId;
        this.gitDetails = $.gitDetails;
        this.identifier = $.identifier;
        this.importFromGit = $.importFromGit;
        this.infraId = $.infraId;
        this.isForceImport = $.isForceImport;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.serviceId = $.serviceId;
        this.type = $.type;
        this.yaml = $.yaml;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OverridesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OverridesState $;

        public Builder() {
            $ = new OverridesState();
        }

        public Builder(OverridesState defaults) {
            $ = new OverridesState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId The cluster ID to which the overrides are associated.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The cluster ID to which the overrides are associated.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param envId The environment ID to which the overrides are associated.
         * 
         * @return builder
         * 
         */
        public Builder envId(@Nullable Output<String> envId) {
            $.envId = envId;
            return this;
        }

        /**
         * @param envId The environment ID to which the overrides are associated.
         * 
         * @return builder
         * 
         */
        public Builder envId(String envId) {
            return envId(Output.of(envId));
        }

        /**
         * @param gitDetails Contains parameters related to creating an Entity for Git Experience.
         * 
         * @return builder
         * 
         */
        public Builder gitDetails(@Nullable Output<OverridesGitDetailsArgs> gitDetails) {
            $.gitDetails = gitDetails;
            return this;
        }

        /**
         * @param gitDetails Contains parameters related to creating an Entity for Git Experience.
         * 
         * @return builder
         * 
         */
        public Builder gitDetails(OverridesGitDetailsArgs gitDetails) {
            return gitDetails(Output.of(gitDetails));
        }

        /**
         * @param identifier The identifier of the override entity.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier The identifier of the override entity.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param importFromGit import override from git
         * 
         * @return builder
         * 
         */
        public Builder importFromGit(@Nullable Output<Boolean> importFromGit) {
            $.importFromGit = importFromGit;
            return this;
        }

        /**
         * @param importFromGit import override from git
         * 
         * @return builder
         * 
         */
        public Builder importFromGit(Boolean importFromGit) {
            return importFromGit(Output.of(importFromGit));
        }

        /**
         * @param infraId The infrastructure ID to which the overrides are associated.
         * 
         * @return builder
         * 
         */
        public Builder infraId(@Nullable Output<String> infraId) {
            $.infraId = infraId;
            return this;
        }

        /**
         * @param infraId The infrastructure ID to which the overrides are associated.
         * 
         * @return builder
         * 
         */
        public Builder infraId(String infraId) {
            return infraId(Output.of(infraId));
        }

        /**
         * @param isForceImport force import override from remote even if same file path already exist
         * 
         * @return builder
         * 
         */
        public Builder isForceImport(@Nullable Output<Boolean> isForceImport) {
            $.isForceImport = isForceImport;
            return this;
        }

        /**
         * @param isForceImport force import override from remote even if same file path already exist
         * 
         * @return builder
         * 
         */
        public Builder isForceImport(Boolean isForceImport) {
            return isForceImport(Output.of(isForceImport));
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param serviceId The service ID to which the overrides applies.
         * 
         * @return builder
         * 
         */
        public Builder serviceId(@Nullable Output<String> serviceId) {
            $.serviceId = serviceId;
            return this;
        }

        /**
         * @param serviceId The service ID to which the overrides applies.
         * 
         * @return builder
         * 
         */
        public Builder serviceId(String serviceId) {
            return serviceId(Output.of(serviceId));
        }

        /**
         * @param type The type of the overrides.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the overrides.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param yaml The yaml of the override entity
         * 
         * @return builder
         * 
         */
        public Builder yaml(@Nullable Output<String> yaml) {
            $.yaml = yaml;
            return this;
        }

        /**
         * @param yaml The yaml of the override entity
         * 
         * @return builder
         * 
         */
        public Builder yaml(String yaml) {
            return yaml(Output.of(yaml));
        }

        public OverridesState build() {
            return $;
        }
    }

}
