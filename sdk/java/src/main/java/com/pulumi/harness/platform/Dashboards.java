// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.DashboardsArgs;
import com.pulumi.harness.platform.inputs.DashboardsState;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for a Harness Custom Dashboard.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.platform.Dashboards;
 * import com.pulumi.harness.platform.DashboardsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var dashboard = new Dashboards("dashboard", DashboardsArgs.builder()
 *             .dashboardId("111")
 *             .description("dashboard_tag")
 *             .resourceIdentifier("999")
 *             .title("Dashboard Title")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="harness:platform/dashboards:Dashboards")
public class Dashboards extends com.pulumi.resources.CustomResource {
    /**
     * Created at timestamp of the Dashboard.
     * 
     */
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    /**
     * @return Created at timestamp of the Dashboard.
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * Unique identifier of the Template Dashboard to create from.
     * 
     */
    @Export(name="dashboardId", refs={String.class}, tree="[0]")
    private Output<String> dashboardId;

    /**
     * @return Unique identifier of the Template Dashboard to create from.
     * 
     */
    public Output<String> dashboardId() {
        return this.dashboardId;
    }
    /**
     * Data Sources within the Dashboard.
     * 
     */
    @Export(name="dataSources", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> dataSources;

    /**
     * @return Data Sources within the Dashboard.
     * 
     */
    public Output<List<String>> dataSources() {
        return this.dataSources;
    }
    /**
     * Description of the Dashboard.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the Dashboard.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Favorite count of the dashboard.
     * 
     */
    @Export(name="favoriteCount", refs={Integer.class}, tree="[0]")
    private Output<Integer> favoriteCount;

    /**
     * @return Favorite count of the dashboard.
     * 
     */
    public Output<Integer> favoriteCount() {
        return this.favoriteCount;
    }
    /**
     * The Folder ID that the Dashboard belongs to.
     * 
     */
    @Export(name="folderId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> folderId;

    /**
     * @return The Folder ID that the Dashboard belongs to.
     * 
     */
    public Output<Optional<String>> folderId() {
        return Codegen.optional(this.folderId);
    }
    /**
     * Last accessed at timestamp of the Dashboard.
     * 
     */
    @Export(name="lastAccessedAt", refs={String.class}, tree="[0]")
    private Output<String> lastAccessedAt;

    /**
     * @return Last accessed at timestamp of the Dashboard.
     * 
     */
    public Output<String> lastAccessedAt() {
        return this.lastAccessedAt;
    }
    /**
     * Data Models within the Dashboard.
     * 
     */
    @Export(name="models", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> models;

    /**
     * @return Data Models within the Dashboard.
     * 
     */
    public Output<List<String>> models() {
        return this.models;
    }
    /**
     * Name of the Dashboard.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the Dashboard.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The Folder ID that the Dashboard belongs to.
     * 
     */
    @Export(name="resourceIdentifier", refs={String.class}, tree="[0]")
    private Output<String> resourceIdentifier;

    /**
     * @return The Folder ID that the Dashboard belongs to.
     * 
     */
    public Output<String> resourceIdentifier() {
        return this.resourceIdentifier;
    }
    /**
     * Title of the Dashboard.
     * 
     */
    @Export(name="title", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> title;

    /**
     * @return Title of the Dashboard.
     * 
     */
    public Output<Optional<String>> title() {
        return Codegen.optional(this.title);
    }
    /**
     * Type of the dashboard.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Type of the dashboard.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * View count of the dashboard.
     * 
     */
    @Export(name="viewCount", refs={Integer.class}, tree="[0]")
    private Output<Integer> viewCount;

    /**
     * @return View count of the dashboard.
     * 
     */
    public Output<Integer> viewCount() {
        return this.viewCount;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Dashboards(java.lang.String name) {
        this(name, DashboardsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Dashboards(java.lang.String name, DashboardsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Dashboards(java.lang.String name, DashboardsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/dashboards:Dashboards", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Dashboards(java.lang.String name, Output<java.lang.String> id, @Nullable DashboardsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/dashboards:Dashboards", name, state, makeResourceOptions(options, id), false);
    }

    private static DashboardsArgs makeArgs(DashboardsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DashboardsArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Dashboards get(java.lang.String name, Output<java.lang.String> id, @Nullable DashboardsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Dashboards(name, id, state, options);
    }
}
