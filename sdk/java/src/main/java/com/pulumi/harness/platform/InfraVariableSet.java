// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.InfraVariableSetArgs;
import com.pulumi.harness.platform.inputs.InfraVariableSetState;
import com.pulumi.harness.platform.outputs.InfraVariableSetConnector;
import com.pulumi.harness.platform.outputs.InfraVariableSetEnvironmentVariable;
import com.pulumi.harness.platform.outputs.InfraVariableSetTerraformVariable;
import com.pulumi.harness.platform.outputs.InfraVariableSetTerraformVariableFile;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for managing Variable Sets
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.platform.InfraVariableSet;
 * import com.pulumi.harness.platform.InfraVariableSetArgs;
 * import com.pulumi.harness.platform.inputs.InfraVariableSetEnvironmentVariableArgs;
 * import com.pulumi.harness.platform.inputs.InfraVariableSetTerraformVariableArgs;
 * import com.pulumi.harness.platform.inputs.InfraVariableSetTerraformVariableFileArgs;
 * import com.pulumi.harness.platform.inputs.InfraVariableSetConnectorArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new InfraVariableSet("example", InfraVariableSetArgs.builder()
 *             .identifier("example")
 *             .name("example")
 *             .orgId(test.id())
 *             .projectId(testHarnessPlatformProject.id())
 *             .description("some description")
 *             .environmentVariables(            
 *                 InfraVariableSetEnvironmentVariableArgs.builder()
 *                     .key("key1")
 *                     .value("value1")
 *                     .valueType("string")
 *                     .build(),
 *                 InfraVariableSetEnvironmentVariableArgs.builder()
 *                     .key("key2")
 *                     .value("harness_platform_secret_text.test.id")
 *                     .valueType("secret")
 *                     .build())
 *             .terraformVariables(            
 *                 InfraVariableSetTerraformVariableArgs.builder()
 *                     .key("key1")
 *                     .value("1111")
 *                     .valueType("string")
 *                     .build(),
 *                 InfraVariableSetTerraformVariableArgs.builder()
 *                     .key("key2")
 *                     .value("1111u")
 *                     .valueType("string")
 *                     .build())
 *             .terraformVariableFiles(            
 *                 InfraVariableSetTerraformVariableFileArgs.builder()
 *                     .repository("https://github.com/org/repo")
 *                     .repositoryBranch("main")
 *                     .repositoryPath("tf/aws/basic")
 *                     .repositoryConnector("harness_platform_connector_github.test.id")
 *                     .build(),
 *                 InfraVariableSetTerraformVariableFileArgs.builder()
 *                     .repository("https://github.com/org/repo")
 *                     .repositoryBranch("br2")
 *                     .repositoryPath("tf/aws/basic")
 *                     .repositoryConnector("harness_platform_connector_github.test.id")
 *                     .build())
 *             .connectors(            
 *                 InfraVariableSetConnectorArgs.builder()
 *                     .connectorRef("harness_platform_connector_aws.test.id")
 *                     .type("aws")
 *                     .build(),
 *                 InfraVariableSetConnectorArgs.builder()
 *                     .connectorRef("harness_platform_connector_azure.test.id")
 *                     .type("azure")
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * The `pulumi import` command can be used, for example:
 * 
 * Import account level variable set
 * 
 * ```sh
 * $ pulumi import harness:platform/infraVariableSet:InfraVariableSet example &lt;variable_set_id&gt;
 * ```
 * 
 * Import org level variable set
 * 
 * ```sh
 * $ pulumi import harness:platform/infraVariableSet:InfraVariableSet example &lt;ord_id&gt;/&lt;variable_set_id&gt;
 * ```
 * 
 * Import project level variable set
 * 
 * ```sh
 * $ pulumi import harness:platform/infraVariableSet:InfraVariableSet example &lt;org_id&gt;/&lt;project_id&gt;/&lt;variable_set_id&gt;
 * ```
 * 
 */
@ResourceType(type="harness:platform/infraVariableSet:InfraVariableSet")
public class InfraVariableSet extends com.pulumi.resources.CustomResource {
    /**
     * Provider connectors configured on the Variable Set. Only one connector of a type is supported
     * 
     */
    @Export(name="connectors", refs={List.class,InfraVariableSetConnector.class}, tree="[0,1]")
    private Output</* @Nullable */ List<InfraVariableSetConnector>> connectors;

    /**
     * @return Provider connectors configured on the Variable Set. Only one connector of a type is supported
     * 
     */
    public Output<Optional<List<InfraVariableSetConnector>>> connectors() {
        return Codegen.optional(this.connectors);
    }
    /**
     * Description of the resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Environment variables configured on the Variable Set
     * 
     */
    @Export(name="environmentVariables", refs={List.class,InfraVariableSetEnvironmentVariable.class}, tree="[0,1]")
    private Output</* @Nullable */ List<InfraVariableSetEnvironmentVariable>> environmentVariables;

    /**
     * @return Environment variables configured on the Variable Set
     * 
     */
    public Output<Optional<List<InfraVariableSetEnvironmentVariable>>> environmentVariables() {
        return Codegen.optional(this.environmentVariables);
    }
    /**
     * Unique identifier of the resource.
     * 
     */
    @Export(name="identifier", refs={String.class}, tree="[0]")
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }
    /**
     * Name of the resource.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Unique identifier of the organization.
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Output<Optional<String>> orgId() {
        return Codegen.optional(this.orgId);
    }
    /**
     * Unique identifier of the project.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Output<Optional<String>> projectId() {
        return Codegen.optional(this.projectId);
    }
    /**
     * Tags to associate with the resource.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Tags to associate with the resource.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    @Export(name="terraformVariableFiles", refs={List.class,InfraVariableSetTerraformVariableFile.class}, tree="[0,1]")
    private Output</* @Nullable */ List<InfraVariableSetTerraformVariableFile>> terraformVariableFiles;

    public Output<Optional<List<InfraVariableSetTerraformVariableFile>>> terraformVariableFiles() {
        return Codegen.optional(this.terraformVariableFiles);
    }
    @Export(name="terraformVariables", refs={List.class,InfraVariableSetTerraformVariable.class}, tree="[0,1]")
    private Output</* @Nullable */ List<InfraVariableSetTerraformVariable>> terraformVariables;

    public Output<Optional<List<InfraVariableSetTerraformVariable>>> terraformVariables() {
        return Codegen.optional(this.terraformVariables);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public InfraVariableSet(java.lang.String name) {
        this(name, InfraVariableSetArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public InfraVariableSet(java.lang.String name, InfraVariableSetArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public InfraVariableSet(java.lang.String name, InfraVariableSetArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/infraVariableSet:InfraVariableSet", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private InfraVariableSet(java.lang.String name, Output<java.lang.String> id, @Nullable InfraVariableSetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/infraVariableSet:InfraVariableSet", name, state, makeResourceOptions(options, id), false);
    }

    private static InfraVariableSetArgs makeArgs(InfraVariableSetArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? InfraVariableSetArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static InfraVariableSet get(java.lang.String name, Output<java.lang.String> id, @Nullable InfraVariableSetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new InfraVariableSet(name, id, state, options);
    }
}
