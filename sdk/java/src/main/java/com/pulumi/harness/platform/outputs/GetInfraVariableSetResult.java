// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GetInfraVariableSetConnector;
import com.pulumi.harness.platform.outputs.GetInfraVariableSetEnvironmentVariable;
import com.pulumi.harness.platform.outputs.GetInfraVariableSetTerraformVariable;
import com.pulumi.harness.platform.outputs.GetInfraVariableSetTerraformVariableFile;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInfraVariableSetResult {
    /**
     * @return Provider connectors configured on the Variable Set. Only one connector of a type is supported
     * 
     */
    private List<GetInfraVariableSetConnector> connectors;
    /**
     * @return Description of the resource.
     * 
     */
    private String description;
    /**
     * @return Environment variables configured on the Variable Set
     * 
     */
    private List<GetInfraVariableSetEnvironmentVariable> environmentVariables;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Unique identifier of the resource.
     * 
     */
    private String identifier;
    /**
     * @return Name of the resource.
     * 
     */
    private @Nullable String name;
    /**
     * @return Unique identifier of the organization.
     * 
     */
    private @Nullable String orgId;
    /**
     * @return Unique identifier of the project.
     * 
     */
    private @Nullable String projectId;
    /**
     * @return Tags to associate with the resource.
     * 
     */
    private List<String> tags;
    private List<GetInfraVariableSetTerraformVariableFile> terraformVariableFiles;
    private List<GetInfraVariableSetTerraformVariable> terraformVariables;

    private GetInfraVariableSetResult() {}
    /**
     * @return Provider connectors configured on the Variable Set. Only one connector of a type is supported
     * 
     */
    public List<GetInfraVariableSetConnector> connectors() {
        return this.connectors;
    }
    /**
     * @return Description of the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Environment variables configured on the Variable Set
     * 
     */
    public List<GetInfraVariableSetEnvironmentVariable> environmentVariables() {
        return this.environmentVariables;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Unique identifier of the resource.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return Name of the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }
    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return Tags to associate with the resource.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    public List<GetInfraVariableSetTerraformVariableFile> terraformVariableFiles() {
        return this.terraformVariableFiles;
    }
    public List<GetInfraVariableSetTerraformVariable> terraformVariables() {
        return this.terraformVariables;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInfraVariableSetResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetInfraVariableSetConnector> connectors;
        private String description;
        private List<GetInfraVariableSetEnvironmentVariable> environmentVariables;
        private String id;
        private String identifier;
        private @Nullable String name;
        private @Nullable String orgId;
        private @Nullable String projectId;
        private List<String> tags;
        private List<GetInfraVariableSetTerraformVariableFile> terraformVariableFiles;
        private List<GetInfraVariableSetTerraformVariable> terraformVariables;
        public Builder() {}
        public Builder(GetInfraVariableSetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectors = defaults.connectors;
    	      this.description = defaults.description;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.projectId = defaults.projectId;
    	      this.tags = defaults.tags;
    	      this.terraformVariableFiles = defaults.terraformVariableFiles;
    	      this.terraformVariables = defaults.terraformVariables;
        }

        @CustomType.Setter
        public Builder connectors(List<GetInfraVariableSetConnector> connectors) {
            if (connectors == null) {
              throw new MissingRequiredPropertyException("GetInfraVariableSetResult", "connectors");
            }
            this.connectors = connectors;
            return this;
        }
        public Builder connectors(GetInfraVariableSetConnector... connectors) {
            return connectors(List.of(connectors));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetInfraVariableSetResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder environmentVariables(List<GetInfraVariableSetEnvironmentVariable> environmentVariables) {
            if (environmentVariables == null) {
              throw new MissingRequiredPropertyException("GetInfraVariableSetResult", "environmentVariables");
            }
            this.environmentVariables = environmentVariables;
            return this;
        }
        public Builder environmentVariables(GetInfraVariableSetEnvironmentVariable... environmentVariables) {
            return environmentVariables(List.of(environmentVariables));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInfraVariableSetResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            if (identifier == null) {
              throw new MissingRequiredPropertyException("GetInfraVariableSetResult", "identifier");
            }
            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(@Nullable String orgId) {

            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetInfraVariableSetResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder terraformVariableFiles(List<GetInfraVariableSetTerraformVariableFile> terraformVariableFiles) {
            if (terraformVariableFiles == null) {
              throw new MissingRequiredPropertyException("GetInfraVariableSetResult", "terraformVariableFiles");
            }
            this.terraformVariableFiles = terraformVariableFiles;
            return this;
        }
        public Builder terraformVariableFiles(GetInfraVariableSetTerraformVariableFile... terraformVariableFiles) {
            return terraformVariableFiles(List.of(terraformVariableFiles));
        }
        @CustomType.Setter
        public Builder terraformVariables(List<GetInfraVariableSetTerraformVariable> terraformVariables) {
            if (terraformVariables == null) {
              throw new MissingRequiredPropertyException("GetInfraVariableSetResult", "terraformVariables");
            }
            this.terraformVariables = terraformVariables;
            return this;
        }
        public Builder terraformVariables(GetInfraVariableSetTerraformVariable... terraformVariables) {
            return terraformVariables(List.of(terraformVariables));
        }
        public GetInfraVariableSetResult build() {
            final var _resultValue = new GetInfraVariableSetResult();
            _resultValue.connectors = connectors;
            _resultValue.description = description;
            _resultValue.environmentVariables = environmentVariables;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.name = name;
            _resultValue.orgId = orgId;
            _resultValue.projectId = projectId;
            _resultValue.tags = tags;
            _resultValue.terraformVariableFiles = terraformVariableFiles;
            _resultValue.terraformVariables = terraformVariables;
            return _resultValue;
        }
    }
}
