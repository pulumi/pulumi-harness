// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.ConnectorCustomhealthsourceHeaderArgs;
import com.pulumi.harness.platform.inputs.ConnectorCustomhealthsourceParamArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorCustomhealthsourceState extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorCustomhealthsourceState Empty = new ConnectorCustomhealthsourceState();

    /**
     * Tags to filter delegates for connection.
     * 
     */
    @Import(name="delegateSelectors")
    private @Nullable Output<List<String>> delegateSelectors;

    /**
     * @return Tags to filter delegates for connection.
     * 
     */
    public Optional<Output<List<String>>> delegateSelectors() {
        return Optional.ofNullable(this.delegateSelectors);
    }

    /**
     * Description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Headers.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<List<ConnectorCustomhealthsourceHeaderArgs>> headers;

    /**
     * @return Headers.
     * 
     */
    public Optional<Output<List<ConnectorCustomhealthsourceHeaderArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * HTTP Verb Method for the API Call
     * 
     */
    @Import(name="method")
    private @Nullable Output<String> method;

    /**
     * @return HTTP Verb Method for the API Call
     * 
     */
    public Optional<Output<String>> method() {
        return Optional.ofNullable(this.method);
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Parameters
     * 
     */
    @Import(name="params")
    private @Nullable Output<List<ConnectorCustomhealthsourceParamArgs>> params;

    /**
     * @return Parameters
     * 
     */
    public Optional<Output<List<ConnectorCustomhealthsourceParamArgs>>> params() {
        return Optional.ofNullable(this.params);
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Tags to associate with the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags to associate with the resource.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * URL of the Custom Healthsource controller.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return URL of the Custom Healthsource controller.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * Body to be sent with the API Call
     * 
     */
    @Import(name="validationBody")
    private @Nullable Output<String> validationBody;

    /**
     * @return Body to be sent with the API Call
     * 
     */
    public Optional<Output<String>> validationBody() {
        return Optional.ofNullable(this.validationBody);
    }

    /**
     * Path to be added to the base URL for the API Call
     * 
     */
    @Import(name="validationPath")
    private @Nullable Output<String> validationPath;

    /**
     * @return Path to be added to the base URL for the API Call
     * 
     */
    public Optional<Output<String>> validationPath() {
        return Optional.ofNullable(this.validationPath);
    }

    private ConnectorCustomhealthsourceState() {}

    private ConnectorCustomhealthsourceState(ConnectorCustomhealthsourceState $) {
        this.delegateSelectors = $.delegateSelectors;
        this.description = $.description;
        this.headers = $.headers;
        this.identifier = $.identifier;
        this.method = $.method;
        this.name = $.name;
        this.orgId = $.orgId;
        this.params = $.params;
        this.projectId = $.projectId;
        this.tags = $.tags;
        this.url = $.url;
        this.validationBody = $.validationBody;
        this.validationPath = $.validationPath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorCustomhealthsourceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorCustomhealthsourceState $;

        public Builder() {
            $ = new ConnectorCustomhealthsourceState();
        }

        public Builder(ConnectorCustomhealthsourceState defaults) {
            $ = new ConnectorCustomhealthsourceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param delegateSelectors Tags to filter delegates for connection.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(@Nullable Output<List<String>> delegateSelectors) {
            $.delegateSelectors = delegateSelectors;
            return this;
        }

        /**
         * @param delegateSelectors Tags to filter delegates for connection.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(List<String> delegateSelectors) {
            return delegateSelectors(Output.of(delegateSelectors));
        }

        /**
         * @param delegateSelectors Tags to filter delegates for connection.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(String... delegateSelectors) {
            return delegateSelectors(List.of(delegateSelectors));
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param headers Headers.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<List<ConnectorCustomhealthsourceHeaderArgs>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers Headers.
         * 
         * @return builder
         * 
         */
        public Builder headers(List<ConnectorCustomhealthsourceHeaderArgs> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param headers Headers.
         * 
         * @return builder
         * 
         */
        public Builder headers(ConnectorCustomhealthsourceHeaderArgs... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param method HTTP Verb Method for the API Call
         * 
         * @return builder
         * 
         */
        public Builder method(@Nullable Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method HTTP Verb Method for the API Call
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param params Parameters
         * 
         * @return builder
         * 
         */
        public Builder params(@Nullable Output<List<ConnectorCustomhealthsourceParamArgs>> params) {
            $.params = params;
            return this;
        }

        /**
         * @param params Parameters
         * 
         * @return builder
         * 
         */
        public Builder params(List<ConnectorCustomhealthsourceParamArgs> params) {
            return params(Output.of(params));
        }

        /**
         * @param params Parameters
         * 
         * @return builder
         * 
         */
        public Builder params(ConnectorCustomhealthsourceParamArgs... params) {
            return params(List.of(params));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param url URL of the Custom Healthsource controller.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url URL of the Custom Healthsource controller.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param validationBody Body to be sent with the API Call
         * 
         * @return builder
         * 
         */
        public Builder validationBody(@Nullable Output<String> validationBody) {
            $.validationBody = validationBody;
            return this;
        }

        /**
         * @param validationBody Body to be sent with the API Call
         * 
         * @return builder
         * 
         */
        public Builder validationBody(String validationBody) {
            return validationBody(Output.of(validationBody));
        }

        /**
         * @param validationPath Path to be added to the base URL for the API Call
         * 
         * @return builder
         * 
         */
        public Builder validationPath(@Nullable Output<String> validationPath) {
            $.validationPath = validationPath;
            return this;
        }

        /**
         * @param validationPath Path to be added to the base URL for the API Call
         * 
         * @return builder
         * 
         */
        public Builder validationPath(String validationPath) {
            return validationPath(Output.of(validationPath));
        }

        public ConnectorCustomhealthsourceState build() {
            return $;
        }
    }

}
