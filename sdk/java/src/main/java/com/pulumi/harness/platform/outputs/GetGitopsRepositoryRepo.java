// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetGitopsRepositoryRepo {
    /**
     * @return Identifies the authentication method used to connect to the repository. Possible values: &#34;HTTPS&#34; &#34;SSH&#34; &#34;GITHUB&#34; &#34;HTTPS_ANONYMOUS_CONNECTION_TYPE&#34;
     * 
     */
    private String connectionType;
    /**
     * @return Indicates if git-lfs support must be enabled for this repo. This is valid only for Git repositories.
     * 
     */
    private Boolean enableLfs;
    /**
     * @return Indicates if helm-oci support must be enabled for this repo.
     * 
     */
    private Boolean enableOci;
    /**
     * @return Base URL of GitHub Enterprise installation. If left empty, this defaults to https://api.github.com.
     * 
     */
    private String githubAppEnterpriseBaseUrl;
    /**
     * @return Id of the GitHub app used to access the repo.
     * 
     */
    private String githubAppId;
    /**
     * @return Installation id of the GitHub app used to access the repo.
     * 
     */
    private String githubAppInstallationId;
    /**
     * @return GitHub app private key PEM data.
     * 
     */
    private String githubAppPrivateKey;
    /**
     * @return Indicates if the credentials were inherited from a repository credential.
     * 
     */
    private Boolean inheritedCreds;
    /**
     * @return Indicates if the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
     * 
     */
    private Boolean insecure;
    /**
     * @return Indicates if InsecureIgnoreHostKey should be used. Insecure is favored used only for git repos. Deprecated.
     * 
     */
    private Boolean insecureIgnoreHostKey;
    /**
     * @return Name to be used for this repo. Only used with Helm repos.
     * 
     */
    private String name;
    /**
     * @return Password or PAT to be used for authenticating the remote repository.
     * 
     */
    private String password;
    /**
     * @return The ArgoCD project name corresponding to this GitOps repository. An empty string means that the GitOps repository belongs to the default project created by Harness.
     * 
     */
    private String project;
    /**
     * @return The HTTP/HTTPS proxy used to access the repo.
     * 
     */
    private String proxy;
    /**
     * @return URL to the remote repository.
     * 
     */
    private String repo;
    /**
     * @return SSH Key in PEM format for authenticating the repository. Used only for Git repository.
     * 
     */
    private String sshPrivateKey;
    /**
     * @return Certificate in PEM format for authenticating at the repo server. This is used for mTLS. The value should be base64 encoded.
     * 
     */
    private String tlsClientCertData;
    /**
     * @return Private key in PEM format for authenticating at the repo server. This is used for mTLS. The value should be base64 encoded.
     * 
     */
    private String tlsClientCertKey;
    /**
     * @return Type specifies the type of the repo. Can be either &#34;git&#34; or &#34;helm. &#34;git&#34; is assumed if empty or absent.
     * 
     */
    private String type_;
    /**
     * @return Username to be used for authenticating the remote repository.
     * 
     */
    private String username;

    private GetGitopsRepositoryRepo() {}
    /**
     * @return Identifies the authentication method used to connect to the repository. Possible values: &#34;HTTPS&#34; &#34;SSH&#34; &#34;GITHUB&#34; &#34;HTTPS_ANONYMOUS_CONNECTION_TYPE&#34;
     * 
     */
    public String connectionType() {
        return this.connectionType;
    }
    /**
     * @return Indicates if git-lfs support must be enabled for this repo. This is valid only for Git repositories.
     * 
     */
    public Boolean enableLfs() {
        return this.enableLfs;
    }
    /**
     * @return Indicates if helm-oci support must be enabled for this repo.
     * 
     */
    public Boolean enableOci() {
        return this.enableOci;
    }
    /**
     * @return Base URL of GitHub Enterprise installation. If left empty, this defaults to https://api.github.com.
     * 
     */
    public String githubAppEnterpriseBaseUrl() {
        return this.githubAppEnterpriseBaseUrl;
    }
    /**
     * @return Id of the GitHub app used to access the repo.
     * 
     */
    public String githubAppId() {
        return this.githubAppId;
    }
    /**
     * @return Installation id of the GitHub app used to access the repo.
     * 
     */
    public String githubAppInstallationId() {
        return this.githubAppInstallationId;
    }
    /**
     * @return GitHub app private key PEM data.
     * 
     */
    public String githubAppPrivateKey() {
        return this.githubAppPrivateKey;
    }
    /**
     * @return Indicates if the credentials were inherited from a repository credential.
     * 
     */
    public Boolean inheritedCreds() {
        return this.inheritedCreds;
    }
    /**
     * @return Indicates if the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
     * 
     */
    public Boolean insecure() {
        return this.insecure;
    }
    /**
     * @return Indicates if InsecureIgnoreHostKey should be used. Insecure is favored used only for git repos. Deprecated.
     * 
     */
    public Boolean insecureIgnoreHostKey() {
        return this.insecureIgnoreHostKey;
    }
    /**
     * @return Name to be used for this repo. Only used with Helm repos.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Password or PAT to be used for authenticating the remote repository.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return The ArgoCD project name corresponding to this GitOps repository. An empty string means that the GitOps repository belongs to the default project created by Harness.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return The HTTP/HTTPS proxy used to access the repo.
     * 
     */
    public String proxy() {
        return this.proxy;
    }
    /**
     * @return URL to the remote repository.
     * 
     */
    public String repo() {
        return this.repo;
    }
    /**
     * @return SSH Key in PEM format for authenticating the repository. Used only for Git repository.
     * 
     */
    public String sshPrivateKey() {
        return this.sshPrivateKey;
    }
    /**
     * @return Certificate in PEM format for authenticating at the repo server. This is used for mTLS. The value should be base64 encoded.
     * 
     */
    public String tlsClientCertData() {
        return this.tlsClientCertData;
    }
    /**
     * @return Private key in PEM format for authenticating at the repo server. This is used for mTLS. The value should be base64 encoded.
     * 
     */
    public String tlsClientCertKey() {
        return this.tlsClientCertKey;
    }
    /**
     * @return Type specifies the type of the repo. Can be either &#34;git&#34; or &#34;helm. &#34;git&#34; is assumed if empty or absent.
     * 
     */
    public String type_() {
        return this.type_;
    }
    /**
     * @return Username to be used for authenticating the remote repository.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGitopsRepositoryRepo defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String connectionType;
        private Boolean enableLfs;
        private Boolean enableOci;
        private String githubAppEnterpriseBaseUrl;
        private String githubAppId;
        private String githubAppInstallationId;
        private String githubAppPrivateKey;
        private Boolean inheritedCreds;
        private Boolean insecure;
        private Boolean insecureIgnoreHostKey;
        private String name;
        private String password;
        private String project;
        private String proxy;
        private String repo;
        private String sshPrivateKey;
        private String tlsClientCertData;
        private String tlsClientCertKey;
        private String type_;
        private String username;
        public Builder() {}
        public Builder(GetGitopsRepositoryRepo defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionType = defaults.connectionType;
    	      this.enableLfs = defaults.enableLfs;
    	      this.enableOci = defaults.enableOci;
    	      this.githubAppEnterpriseBaseUrl = defaults.githubAppEnterpriseBaseUrl;
    	      this.githubAppId = defaults.githubAppId;
    	      this.githubAppInstallationId = defaults.githubAppInstallationId;
    	      this.githubAppPrivateKey = defaults.githubAppPrivateKey;
    	      this.inheritedCreds = defaults.inheritedCreds;
    	      this.insecure = defaults.insecure;
    	      this.insecureIgnoreHostKey = defaults.insecureIgnoreHostKey;
    	      this.name = defaults.name;
    	      this.password = defaults.password;
    	      this.project = defaults.project;
    	      this.proxy = defaults.proxy;
    	      this.repo = defaults.repo;
    	      this.sshPrivateKey = defaults.sshPrivateKey;
    	      this.tlsClientCertData = defaults.tlsClientCertData;
    	      this.tlsClientCertKey = defaults.tlsClientCertKey;
    	      this.type_ = defaults.type_;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder connectionType(String connectionType) {
            if (connectionType == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryRepo", "connectionType");
            }
            this.connectionType = connectionType;
            return this;
        }
        @CustomType.Setter
        public Builder enableLfs(Boolean enableLfs) {
            if (enableLfs == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryRepo", "enableLfs");
            }
            this.enableLfs = enableLfs;
            return this;
        }
        @CustomType.Setter
        public Builder enableOci(Boolean enableOci) {
            if (enableOci == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryRepo", "enableOci");
            }
            this.enableOci = enableOci;
            return this;
        }
        @CustomType.Setter
        public Builder githubAppEnterpriseBaseUrl(String githubAppEnterpriseBaseUrl) {
            if (githubAppEnterpriseBaseUrl == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryRepo", "githubAppEnterpriseBaseUrl");
            }
            this.githubAppEnterpriseBaseUrl = githubAppEnterpriseBaseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder githubAppId(String githubAppId) {
            if (githubAppId == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryRepo", "githubAppId");
            }
            this.githubAppId = githubAppId;
            return this;
        }
        @CustomType.Setter
        public Builder githubAppInstallationId(String githubAppInstallationId) {
            if (githubAppInstallationId == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryRepo", "githubAppInstallationId");
            }
            this.githubAppInstallationId = githubAppInstallationId;
            return this;
        }
        @CustomType.Setter
        public Builder githubAppPrivateKey(String githubAppPrivateKey) {
            if (githubAppPrivateKey == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryRepo", "githubAppPrivateKey");
            }
            this.githubAppPrivateKey = githubAppPrivateKey;
            return this;
        }
        @CustomType.Setter
        public Builder inheritedCreds(Boolean inheritedCreds) {
            if (inheritedCreds == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryRepo", "inheritedCreds");
            }
            this.inheritedCreds = inheritedCreds;
            return this;
        }
        @CustomType.Setter
        public Builder insecure(Boolean insecure) {
            if (insecure == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryRepo", "insecure");
            }
            this.insecure = insecure;
            return this;
        }
        @CustomType.Setter
        public Builder insecureIgnoreHostKey(Boolean insecureIgnoreHostKey) {
            if (insecureIgnoreHostKey == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryRepo", "insecureIgnoreHostKey");
            }
            this.insecureIgnoreHostKey = insecureIgnoreHostKey;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryRepo", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryRepo", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryRepo", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder proxy(String proxy) {
            if (proxy == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryRepo", "proxy");
            }
            this.proxy = proxy;
            return this;
        }
        @CustomType.Setter
        public Builder repo(String repo) {
            if (repo == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryRepo", "repo");
            }
            this.repo = repo;
            return this;
        }
        @CustomType.Setter
        public Builder sshPrivateKey(String sshPrivateKey) {
            if (sshPrivateKey == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryRepo", "sshPrivateKey");
            }
            this.sshPrivateKey = sshPrivateKey;
            return this;
        }
        @CustomType.Setter
        public Builder tlsClientCertData(String tlsClientCertData) {
            if (tlsClientCertData == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryRepo", "tlsClientCertData");
            }
            this.tlsClientCertData = tlsClientCertData;
            return this;
        }
        @CustomType.Setter
        public Builder tlsClientCertKey(String tlsClientCertKey) {
            if (tlsClientCertKey == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryRepo", "tlsClientCertKey");
            }
            this.tlsClientCertKey = tlsClientCertKey;
            return this;
        }
        @CustomType.Setter
        public Builder type_(String type_) {
            if (type_ == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryRepo", "type_");
            }
            this.type_ = type_;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryRepo", "username");
            }
            this.username = username;
            return this;
        }
        public GetGitopsRepositoryRepo build() {
            final var _resultValue = new GetGitopsRepositoryRepo();
            _resultValue.connectionType = connectionType;
            _resultValue.enableLfs = enableLfs;
            _resultValue.enableOci = enableOci;
            _resultValue.githubAppEnterpriseBaseUrl = githubAppEnterpriseBaseUrl;
            _resultValue.githubAppId = githubAppId;
            _resultValue.githubAppInstallationId = githubAppInstallationId;
            _resultValue.githubAppPrivateKey = githubAppPrivateKey;
            _resultValue.inheritedCreds = inheritedCreds;
            _resultValue.insecure = insecure;
            _resultValue.insecureIgnoreHostKey = insecureIgnoreHostKey;
            _resultValue.name = name;
            _resultValue.password = password;
            _resultValue.project = project;
            _resultValue.proxy = proxy;
            _resultValue.repo = repo;
            _resultValue.sshPrivateKey = sshPrivateKey;
            _resultValue.tlsClientCertData = tlsClientCertData;
            _resultValue.tlsClientCertKey = tlsClientCertKey;
            _resultValue.type_ = type_;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
