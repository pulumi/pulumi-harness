// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepoSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepoSourceArgs Empty = new RepoSourceArgs();

    /**
     * The host URL for the import source.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return The host URL for the import source.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * The password for authentication when importing.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password for authentication when importing.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The full identifier of the repository on the SCM provider&#39;s platform.
     * 
     */
    @Import(name="repo")
    private @Nullable Output<String> repo;

    /**
     * @return The full identifier of the repository on the SCM provider&#39;s platform.
     * 
     */
    public Optional<Output<String>> repo() {
        return Optional.ofNullable(this.repo);
    }

    /**
     * The type of SCM provider (github, gitlab, bitbucket, stash, gitea, gogs) when importing.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of SCM provider (github, gitlab, bitbucket, stash, gitea, gogs) when importing.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The username for authentication when importing.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The username for authentication when importing.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private RepoSourceArgs() {}

    private RepoSourceArgs(RepoSourceArgs $) {
        this.host = $.host;
        this.password = $.password;
        this.repo = $.repo;
        this.type = $.type;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepoSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepoSourceArgs $;

        public Builder() {
            $ = new RepoSourceArgs();
        }

        public Builder(RepoSourceArgs defaults) {
            $ = new RepoSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param host The host URL for the import source.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The host URL for the import source.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param password The password for authentication when importing.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password for authentication when importing.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param repo The full identifier of the repository on the SCM provider&#39;s platform.
         * 
         * @return builder
         * 
         */
        public Builder repo(@Nullable Output<String> repo) {
            $.repo = repo;
            return this;
        }

        /**
         * @param repo The full identifier of the repository on the SCM provider&#39;s platform.
         * 
         * @return builder
         * 
         */
        public Builder repo(String repo) {
            return repo(Output.of(repo));
        }

        /**
         * @param type The type of SCM provider (github, gitlab, bitbucket, stash, gitea, gogs) when importing.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of SCM provider (github, gitlab, bitbucket, stash, gitea, gogs) when importing.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param username The username for authentication when importing.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username for authentication when importing.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public RepoSourceArgs build() {
            return $;
        }
    }

}
