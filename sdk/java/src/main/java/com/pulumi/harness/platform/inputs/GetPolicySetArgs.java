// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GetPolicySetPolicyArgs;
import com.pulumi.harness.platform.inputs.GetPolicySetPolicyReferenceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPolicySetArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPolicySetArgs Empty = new GetPolicySetArgs();

    /**
     * Action code for the policyset.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return Action code for the policyset.
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * Enabled for the policyset.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enabled for the policyset.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * List of policy identifiers / severity for the policyset. Deprecated: Use &#39;policy_references&#39; instead.
     * 
     * @deprecated
     * Use &#39;policy_references&#39; instead. This field will be removed in a future version.
     * 
     */
    @Deprecated /* Use 'policy_references' instead. This field will be removed in a future version. */
    @Import(name="policies")
    private @Nullable Output<List<GetPolicySetPolicyArgs>> policies;

    /**
     * @return List of policy identifiers / severity for the policyset. Deprecated: Use &#39;policy_references&#39; instead.
     * 
     * @deprecated
     * Use &#39;policy_references&#39; instead. This field will be removed in a future version.
     * 
     */
    @Deprecated /* Use 'policy_references' instead. This field will be removed in a future version. */
    public Optional<Output<List<GetPolicySetPolicyArgs>>> policies() {
        return Optional.ofNullable(this.policies);
    }

    /**
     * Set of policy identifiers / severity for the policyset. Order is not significant.
     * 
     */
    @Import(name="policyReferences")
    private @Nullable Output<List<GetPolicySetPolicyReferenceArgs>> policyReferences;

    /**
     * @return Set of policy identifiers / severity for the policyset. Order is not significant.
     * 
     */
    public Optional<Output<List<GetPolicySetPolicyReferenceArgs>>> policyReferences() {
        return Optional.ofNullable(this.policyReferences);
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Type of the policyset.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of the policyset.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private GetPolicySetArgs() {}

    private GetPolicySetArgs(GetPolicySetArgs $) {
        this.action = $.action;
        this.enabled = $.enabled;
        this.identifier = $.identifier;
        this.name = $.name;
        this.orgId = $.orgId;
        this.policies = $.policies;
        this.policyReferences = $.policyReferences;
        this.projectId = $.projectId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPolicySetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPolicySetArgs $;

        public Builder() {
            $ = new GetPolicySetArgs();
        }

        public Builder(GetPolicySetArgs defaults) {
            $ = new GetPolicySetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Action code for the policyset.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Action code for the policyset.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param enabled Enabled for the policyset.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enabled for the policyset.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param policies List of policy identifiers / severity for the policyset. Deprecated: Use &#39;policy_references&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Use &#39;policy_references&#39; instead. This field will be removed in a future version.
         * 
         */
        @Deprecated /* Use 'policy_references' instead. This field will be removed in a future version. */
        public Builder policies(@Nullable Output<List<GetPolicySetPolicyArgs>> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @param policies List of policy identifiers / severity for the policyset. Deprecated: Use &#39;policy_references&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Use &#39;policy_references&#39; instead. This field will be removed in a future version.
         * 
         */
        @Deprecated /* Use 'policy_references' instead. This field will be removed in a future version. */
        public Builder policies(List<GetPolicySetPolicyArgs> policies) {
            return policies(Output.of(policies));
        }

        /**
         * @param policies List of policy identifiers / severity for the policyset. Deprecated: Use &#39;policy_references&#39; instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Use &#39;policy_references&#39; instead. This field will be removed in a future version.
         * 
         */
        @Deprecated /* Use 'policy_references' instead. This field will be removed in a future version. */
        public Builder policies(GetPolicySetPolicyArgs... policies) {
            return policies(List.of(policies));
        }

        /**
         * @param policyReferences Set of policy identifiers / severity for the policyset. Order is not significant.
         * 
         * @return builder
         * 
         */
        public Builder policyReferences(@Nullable Output<List<GetPolicySetPolicyReferenceArgs>> policyReferences) {
            $.policyReferences = policyReferences;
            return this;
        }

        /**
         * @param policyReferences Set of policy identifiers / severity for the policyset. Order is not significant.
         * 
         * @return builder
         * 
         */
        public Builder policyReferences(List<GetPolicySetPolicyReferenceArgs> policyReferences) {
            return policyReferences(Output.of(policyReferences));
        }

        /**
         * @param policyReferences Set of policy identifiers / severity for the policyset. Order is not significant.
         * 
         * @return builder
         * 
         */
        public Builder policyReferences(GetPolicySetPolicyReferenceArgs... policyReferences) {
            return policyReferences(List.of(policyReferences));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param type Type of the policyset.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the policyset.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public GetPolicySetArgs build() {
            if ($.action == null) {
                throw new MissingRequiredPropertyException("GetPolicySetArgs", "action");
            }
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("GetPolicySetArgs", "identifier");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("GetPolicySetArgs", "type");
            }
            return $;
        }
    }

}
