// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.inputs.SshCredentialSshAuthenticationInlineSshArgs;
import com.pulumi.harness.inputs.SshCredentialSshAuthenticationServerPasswordArgs;
import com.pulumi.harness.inputs.SshCredentialSshAuthenticationSshKeyFileArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SshCredentialSshAuthenticationArgs extends com.pulumi.resources.ResourceArgs {

    public static final SshCredentialSshAuthenticationArgs Empty = new SshCredentialSshAuthenticationArgs();

    /**
     * Inline SSH authentication configuration. Only ond of `passphrase_secret_id` or `ssh_key_file_id` should be used
     * 
     */
    @Import(name="inlineSsh")
    private @Nullable Output<SshCredentialSshAuthenticationInlineSshArgs> inlineSsh;

    /**
     * @return Inline SSH authentication configuration. Only ond of `passphrase_secret_id` or `ssh_key_file_id` should be used
     * 
     */
    public Optional<Output<SshCredentialSshAuthenticationInlineSshArgs>> inlineSsh() {
        return Optional.ofNullable(this.inlineSsh);
    }

    /**
     * The port to connect to
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return The port to connect to
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * Server password authentication configuration
     * 
     */
    @Import(name="serverPassword")
    private @Nullable Output<SshCredentialSshAuthenticationServerPasswordArgs> serverPassword;

    /**
     * @return Server password authentication configuration
     * 
     */
    public Optional<Output<SshCredentialSshAuthenticationServerPasswordArgs>> serverPassword() {
        return Optional.ofNullable(this.serverPassword);
    }

    /**
     * Use ssh key file for authentication
     * 
     */
    @Import(name="sshKeyFile")
    private @Nullable Output<SshCredentialSshAuthenticationSshKeyFileArgs> sshKeyFile;

    /**
     * @return Use ssh key file for authentication
     * 
     */
    public Optional<Output<SshCredentialSshAuthenticationSshKeyFileArgs>> sshKeyFile() {
        return Optional.ofNullable(this.sshKeyFile);
    }

    /**
     * The username to use when connecting to ssh
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The username to use when connecting to ssh
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private SshCredentialSshAuthenticationArgs() {}

    private SshCredentialSshAuthenticationArgs(SshCredentialSshAuthenticationArgs $) {
        this.inlineSsh = $.inlineSsh;
        this.port = $.port;
        this.serverPassword = $.serverPassword;
        this.sshKeyFile = $.sshKeyFile;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SshCredentialSshAuthenticationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SshCredentialSshAuthenticationArgs $;

        public Builder() {
            $ = new SshCredentialSshAuthenticationArgs();
        }

        public Builder(SshCredentialSshAuthenticationArgs defaults) {
            $ = new SshCredentialSshAuthenticationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param inlineSsh Inline SSH authentication configuration. Only ond of `passphrase_secret_id` or `ssh_key_file_id` should be used
         * 
         * @return builder
         * 
         */
        public Builder inlineSsh(@Nullable Output<SshCredentialSshAuthenticationInlineSshArgs> inlineSsh) {
            $.inlineSsh = inlineSsh;
            return this;
        }

        /**
         * @param inlineSsh Inline SSH authentication configuration. Only ond of `passphrase_secret_id` or `ssh_key_file_id` should be used
         * 
         * @return builder
         * 
         */
        public Builder inlineSsh(SshCredentialSshAuthenticationInlineSshArgs inlineSsh) {
            return inlineSsh(Output.of(inlineSsh));
        }

        /**
         * @param port The port to connect to
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port to connect to
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param serverPassword Server password authentication configuration
         * 
         * @return builder
         * 
         */
        public Builder serverPassword(@Nullable Output<SshCredentialSshAuthenticationServerPasswordArgs> serverPassword) {
            $.serverPassword = serverPassword;
            return this;
        }

        /**
         * @param serverPassword Server password authentication configuration
         * 
         * @return builder
         * 
         */
        public Builder serverPassword(SshCredentialSshAuthenticationServerPasswordArgs serverPassword) {
            return serverPassword(Output.of(serverPassword));
        }

        /**
         * @param sshKeyFile Use ssh key file for authentication
         * 
         * @return builder
         * 
         */
        public Builder sshKeyFile(@Nullable Output<SshCredentialSshAuthenticationSshKeyFileArgs> sshKeyFile) {
            $.sshKeyFile = sshKeyFile;
            return this;
        }

        /**
         * @param sshKeyFile Use ssh key file for authentication
         * 
         * @return builder
         * 
         */
        public Builder sshKeyFile(SshCredentialSshAuthenticationSshKeyFileArgs sshKeyFile) {
            return sshKeyFile(Output.of(sshKeyFile));
        }

        /**
         * @param username The username to use when connecting to ssh
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username to use when connecting to ssh
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public SshCredentialSshAuthenticationArgs build() {
            if ($.port == null) {
                throw new MissingRequiredPropertyException("SshCredentialSshAuthenticationArgs", "port");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("SshCredentialSshAuthenticationArgs", "username");
            }
            return $;
        }
    }

}
