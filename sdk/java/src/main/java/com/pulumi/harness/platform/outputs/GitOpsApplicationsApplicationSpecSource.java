// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GitOpsApplicationsApplicationSpecSourceDirectory;
import com.pulumi.harness.platform.outputs.GitOpsApplicationsApplicationSpecSourceHelm;
import com.pulumi.harness.platform.outputs.GitOpsApplicationsApplicationSpecSourceKsonnet;
import com.pulumi.harness.platform.outputs.GitOpsApplicationsApplicationSpecSourceKustomize;
import com.pulumi.harness.platform.outputs.GitOpsApplicationsApplicationSpecSourcePlugin;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GitOpsApplicationsApplicationSpecSource {
    /**
     * @return Helm chart name, and must be specified for the GitOps applications sourced from a helm repo.
     * 
     */
    private @Nullable String chart;
    /**
     * @return Options for applications of type plain YAML or Jsonnet.
     * 
     */
    private @Nullable List<GitOpsApplicationsApplicationSpecSourceDirectory> directories;
    /**
     * @return Helm specific options.
     * 
     */
    private @Nullable List<GitOpsApplicationsApplicationSpecSourceHelm> helms;
    /**
     * @return Ksonnet specific options.
     * 
     */
    private @Nullable List<GitOpsApplicationsApplicationSpecSourceKsonnet> ksonnets;
    /**
     * @return Options specific to a GitOps application source specific to Kustomize.
     * 
     */
    private @Nullable List<GitOpsApplicationsApplicationSpecSourceKustomize> kustomizes;
    /**
     * @return Name is used to refer to a source and is displayed in the UI. It is used in multi-source Applications.
     * 
     */
    private @Nullable String name;
    /**
     * @return Directory path within the git repository, and is only valid for the GitOps applications sourced from git.
     * 
     */
    private @Nullable String path;
    /**
     * @return Options specific to config management plugins.
     * 
     */
    private @Nullable List<GitOpsApplicationsApplicationSpecSourcePlugin> plugins;
    /**
     * @return Reference name to be used in other source spec, used for multi-source applications.
     * 
     */
    private @Nullable String ref;
    /**
     * @return URL to the repository (git or helm) that contains the GitOps application manifests.
     * 
     */
    private String repoUrl;
    /**
     * @return Revision of the source to sync the GitOps application to. In case of git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag of the chart&#39;s version.
     * 
     */
    private String targetRevision;

    private GitOpsApplicationsApplicationSpecSource() {}
    /**
     * @return Helm chart name, and must be specified for the GitOps applications sourced from a helm repo.
     * 
     */
    public Optional<String> chart() {
        return Optional.ofNullable(this.chart);
    }
    /**
     * @return Options for applications of type plain YAML or Jsonnet.
     * 
     */
    public List<GitOpsApplicationsApplicationSpecSourceDirectory> directories() {
        return this.directories == null ? List.of() : this.directories;
    }
    /**
     * @return Helm specific options.
     * 
     */
    public List<GitOpsApplicationsApplicationSpecSourceHelm> helms() {
        return this.helms == null ? List.of() : this.helms;
    }
    /**
     * @return Ksonnet specific options.
     * 
     */
    public List<GitOpsApplicationsApplicationSpecSourceKsonnet> ksonnets() {
        return this.ksonnets == null ? List.of() : this.ksonnets;
    }
    /**
     * @return Options specific to a GitOps application source specific to Kustomize.
     * 
     */
    public List<GitOpsApplicationsApplicationSpecSourceKustomize> kustomizes() {
        return this.kustomizes == null ? List.of() : this.kustomizes;
    }
    /**
     * @return Name is used to refer to a source and is displayed in the UI. It is used in multi-source Applications.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Directory path within the git repository, and is only valid for the GitOps applications sourced from git.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return Options specific to config management plugins.
     * 
     */
    public List<GitOpsApplicationsApplicationSpecSourcePlugin> plugins() {
        return this.plugins == null ? List.of() : this.plugins;
    }
    /**
     * @return Reference name to be used in other source spec, used for multi-source applications.
     * 
     */
    public Optional<String> ref() {
        return Optional.ofNullable(this.ref);
    }
    /**
     * @return URL to the repository (git or helm) that contains the GitOps application manifests.
     * 
     */
    public String repoUrl() {
        return this.repoUrl;
    }
    /**
     * @return Revision of the source to sync the GitOps application to. In case of git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag of the chart&#39;s version.
     * 
     */
    public String targetRevision() {
        return this.targetRevision;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GitOpsApplicationsApplicationSpecSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String chart;
        private @Nullable List<GitOpsApplicationsApplicationSpecSourceDirectory> directories;
        private @Nullable List<GitOpsApplicationsApplicationSpecSourceHelm> helms;
        private @Nullable List<GitOpsApplicationsApplicationSpecSourceKsonnet> ksonnets;
        private @Nullable List<GitOpsApplicationsApplicationSpecSourceKustomize> kustomizes;
        private @Nullable String name;
        private @Nullable String path;
        private @Nullable List<GitOpsApplicationsApplicationSpecSourcePlugin> plugins;
        private @Nullable String ref;
        private String repoUrl;
        private String targetRevision;
        public Builder() {}
        public Builder(GitOpsApplicationsApplicationSpecSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chart = defaults.chart;
    	      this.directories = defaults.directories;
    	      this.helms = defaults.helms;
    	      this.ksonnets = defaults.ksonnets;
    	      this.kustomizes = defaults.kustomizes;
    	      this.name = defaults.name;
    	      this.path = defaults.path;
    	      this.plugins = defaults.plugins;
    	      this.ref = defaults.ref;
    	      this.repoUrl = defaults.repoUrl;
    	      this.targetRevision = defaults.targetRevision;
        }

        @CustomType.Setter
        public Builder chart(@Nullable String chart) {

            this.chart = chart;
            return this;
        }
        @CustomType.Setter
        public Builder directories(@Nullable List<GitOpsApplicationsApplicationSpecSourceDirectory> directories) {

            this.directories = directories;
            return this;
        }
        public Builder directories(GitOpsApplicationsApplicationSpecSourceDirectory... directories) {
            return directories(List.of(directories));
        }
        @CustomType.Setter
        public Builder helms(@Nullable List<GitOpsApplicationsApplicationSpecSourceHelm> helms) {

            this.helms = helms;
            return this;
        }
        public Builder helms(GitOpsApplicationsApplicationSpecSourceHelm... helms) {
            return helms(List.of(helms));
        }
        @CustomType.Setter
        public Builder ksonnets(@Nullable List<GitOpsApplicationsApplicationSpecSourceKsonnet> ksonnets) {

            this.ksonnets = ksonnets;
            return this;
        }
        public Builder ksonnets(GitOpsApplicationsApplicationSpecSourceKsonnet... ksonnets) {
            return ksonnets(List.of(ksonnets));
        }
        @CustomType.Setter
        public Builder kustomizes(@Nullable List<GitOpsApplicationsApplicationSpecSourceKustomize> kustomizes) {

            this.kustomizes = kustomizes;
            return this;
        }
        public Builder kustomizes(GitOpsApplicationsApplicationSpecSourceKustomize... kustomizes) {
            return kustomizes(List.of(kustomizes));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder plugins(@Nullable List<GitOpsApplicationsApplicationSpecSourcePlugin> plugins) {

            this.plugins = plugins;
            return this;
        }
        public Builder plugins(GitOpsApplicationsApplicationSpecSourcePlugin... plugins) {
            return plugins(List.of(plugins));
        }
        @CustomType.Setter
        public Builder ref(@Nullable String ref) {

            this.ref = ref;
            return this;
        }
        @CustomType.Setter
        public Builder repoUrl(String repoUrl) {
            if (repoUrl == null) {
              throw new MissingRequiredPropertyException("GitOpsApplicationsApplicationSpecSource", "repoUrl");
            }
            this.repoUrl = repoUrl;
            return this;
        }
        @CustomType.Setter
        public Builder targetRevision(String targetRevision) {
            if (targetRevision == null) {
              throw new MissingRequiredPropertyException("GitOpsApplicationsApplicationSpecSource", "targetRevision");
            }
            this.targetRevision = targetRevision;
            return this;
        }
        public GitOpsApplicationsApplicationSpecSource build() {
            final var _resultValue = new GitOpsApplicationsApplicationSpecSource();
            _resultValue.chart = chart;
            _resultValue.directories = directories;
            _resultValue.helms = helms;
            _resultValue.ksonnets = ksonnets;
            _resultValue.kustomizes = kustomizes;
            _resultValue.name = name;
            _resultValue.path = path;
            _resultValue.plugins = plugins;
            _resultValue.ref = ref;
            _resultValue.repoUrl = repoUrl;
            _resultValue.targetRevision = targetRevision;
            return _resultValue;
        }
    }
}
