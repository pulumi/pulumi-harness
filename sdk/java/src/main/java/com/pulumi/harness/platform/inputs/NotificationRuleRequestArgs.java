// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.NotificationRuleRequestConditionArgs;
import com.pulumi.harness.platform.inputs.NotificationRuleRequestNotificationMethodArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class NotificationRuleRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationRuleRequestArgs Empty = new NotificationRuleRequestArgs();

    /**
     * Notification Rule conditions specification.
     * 
     */
    @Import(name="conditions", required=true)
    private Output<List<NotificationRuleRequestConditionArgs>> conditions;

    /**
     * @return Notification Rule conditions specification.
     * 
     */
    public Output<List<NotificationRuleRequestConditionArgs>> conditions() {
        return this.conditions;
    }

    /**
     * Name for the Notification Rule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name for the Notification Rule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Notification Method specifications.
     * 
     */
    @Import(name="notificationMethod", required=true)
    private Output<NotificationRuleRequestNotificationMethodArgs> notificationMethod;

    /**
     * @return Notification Method specifications.
     * 
     */
    public Output<NotificationRuleRequestNotificationMethodArgs> notificationMethod() {
        return this.notificationMethod;
    }

    /**
     * Type of the Notification Rule.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of the Notification Rule.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private NotificationRuleRequestArgs() {}

    private NotificationRuleRequestArgs(NotificationRuleRequestArgs $) {
        this.conditions = $.conditions;
        this.name = $.name;
        this.notificationMethod = $.notificationMethod;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationRuleRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationRuleRequestArgs $;

        public Builder() {
            $ = new NotificationRuleRequestArgs();
        }

        public Builder(NotificationRuleRequestArgs defaults) {
            $ = new NotificationRuleRequestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditions Notification Rule conditions specification.
         * 
         * @return builder
         * 
         */
        public Builder conditions(Output<List<NotificationRuleRequestConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions Notification Rule conditions specification.
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<NotificationRuleRequestConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param conditions Notification Rule conditions specification.
         * 
         * @return builder
         * 
         */
        public Builder conditions(NotificationRuleRequestConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param name Name for the Notification Rule.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name for the Notification Rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notificationMethod Notification Method specifications.
         * 
         * @return builder
         * 
         */
        public Builder notificationMethod(Output<NotificationRuleRequestNotificationMethodArgs> notificationMethod) {
            $.notificationMethod = notificationMethod;
            return this;
        }

        /**
         * @param notificationMethod Notification Method specifications.
         * 
         * @return builder
         * 
         */
        public Builder notificationMethod(NotificationRuleRequestNotificationMethodArgs notificationMethod) {
            return notificationMethod(Output.of(notificationMethod));
        }

        /**
         * @param type Type of the Notification Rule.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the Notification Rule.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public NotificationRuleRequestArgs build() {
            if ($.conditions == null) {
                throw new MissingRequiredPropertyException("NotificationRuleRequestArgs", "conditions");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("NotificationRuleRequestArgs", "name");
            }
            if ($.notificationMethod == null) {
                throw new MissingRequiredPropertyException("NotificationRuleRequestArgs", "notificationMethod");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("NotificationRuleRequestArgs", "type");
            }
            return $;
        }
    }

}
