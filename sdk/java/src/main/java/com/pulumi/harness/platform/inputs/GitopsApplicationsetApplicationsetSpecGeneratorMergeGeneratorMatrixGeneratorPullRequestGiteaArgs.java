// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaTokenRefArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaArgs Empty = new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaArgs();

    /**
     * The Gitea API URL to talk to.
     * 
     */
    @Import(name="api", required=true)
    private Output<String> api;

    /**
     * @return The Gitea API URL to talk to.
     * 
     */
    public Output<String> api() {
        return this.api;
    }

    /**
     * Allow insecure tls, for self-signed certificates; default: false.
     * 
     */
    @Import(name="insecure")
    private @Nullable Output<Boolean> insecure;

    /**
     * @return Allow insecure tls, for self-signed certificates; default: false.
     * 
     */
    public Optional<Output<Boolean>> insecure() {
        return Optional.ofNullable(this.insecure);
    }

    /**
     * Gitea org or user to scan.
     * 
     */
    @Import(name="owner", required=true)
    private Output<String> owner;

    /**
     * @return Gitea org or user to scan.
     * 
     */
    public Output<String> owner() {
        return this.owner;
    }

    /**
     * Gitea repo name to scan.
     * 
     */
    @Import(name="repo", required=true)
    private Output<String> repo;

    /**
     * @return Gitea repo name to scan.
     * 
     */
    public Output<String> repo() {
        return this.repo;
    }

    /**
     * Authentication token reference.
     * 
     */
    @Import(name="tokenRef")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaTokenRefArgs> tokenRef;

    /**
     * @return Authentication token reference.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaTokenRefArgs>> tokenRef() {
        return Optional.ofNullable(this.tokenRef);
    }

    private GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaArgs() {}

    private GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaArgs(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaArgs $) {
        this.api = $.api;
        this.insecure = $.insecure;
        this.owner = $.owner;
        this.repo = $.repo;
        this.tokenRef = $.tokenRef;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaArgs $;

        public Builder() {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaArgs();
        }

        public Builder(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaArgs defaults) {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param api The Gitea API URL to talk to.
         * 
         * @return builder
         * 
         */
        public Builder api(Output<String> api) {
            $.api = api;
            return this;
        }

        /**
         * @param api The Gitea API URL to talk to.
         * 
         * @return builder
         * 
         */
        public Builder api(String api) {
            return api(Output.of(api));
        }

        /**
         * @param insecure Allow insecure tls, for self-signed certificates; default: false.
         * 
         * @return builder
         * 
         */
        public Builder insecure(@Nullable Output<Boolean> insecure) {
            $.insecure = insecure;
            return this;
        }

        /**
         * @param insecure Allow insecure tls, for self-signed certificates; default: false.
         * 
         * @return builder
         * 
         */
        public Builder insecure(Boolean insecure) {
            return insecure(Output.of(insecure));
        }

        /**
         * @param owner Gitea org or user to scan.
         * 
         * @return builder
         * 
         */
        public Builder owner(Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner Gitea org or user to scan.
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        /**
         * @param repo Gitea repo name to scan.
         * 
         * @return builder
         * 
         */
        public Builder repo(Output<String> repo) {
            $.repo = repo;
            return this;
        }

        /**
         * @param repo Gitea repo name to scan.
         * 
         * @return builder
         * 
         */
        public Builder repo(String repo) {
            return repo(Output.of(repo));
        }

        /**
         * @param tokenRef Authentication token reference.
         * 
         * @return builder
         * 
         */
        public Builder tokenRef(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaTokenRefArgs> tokenRef) {
            $.tokenRef = tokenRef;
            return this;
        }

        /**
         * @param tokenRef Authentication token reference.
         * 
         * @return builder
         * 
         */
        public Builder tokenRef(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaTokenRefArgs tokenRef) {
            return tokenRef(Output.of(tokenRef));
        }

        public GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaArgs build() {
            if ($.api == null) {
                throw new MissingRequiredPropertyException("GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaArgs", "api");
            }
            if ($.owner == null) {
                throw new MissingRequiredPropertyException("GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaArgs", "owner");
            }
            if ($.repo == null) {
                throw new MissingRequiredPropertyException("GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaArgs", "repo");
            }
            return $;
        }
    }

}
