// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GetWorkspaceConnector;
import com.pulumi.harness.platform.outputs.GetWorkspaceEnvironmentVariable;
import com.pulumi.harness.platform.outputs.GetWorkspaceTerraformVariable;
import com.pulumi.harness.platform.outputs.GetWorkspaceTerraformVariableFile;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetWorkspaceResult {
    /**
     * @return Provider connectors configured on the Workspace. Only one connector of a type is supported
     * 
     */
    private @Nullable List<GetWorkspaceConnector> connectors;
    /**
     * @return If enabled cost estimation operations will be performed in this workspace
     * 
     */
    private Boolean costEstimationEnabled;
    /**
     * @return Default pipelines associated with this workspace
     * 
     */
    private Map<String,String> defaultPipelines;
    /**
     * @return Description of the Workspace
     * 
     */
    private String description;
    /**
     * @return Environment variables configured on the workspace
     * 
     */
    private List<GetWorkspaceEnvironmentVariable> environmentVariables;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Identifier of the Workspace
     * 
     */
    private String identifier;
    /**
     * @return Name of the Workspace
     * 
     */
    private String name;
    /**
     * @return Organization Identifier
     * 
     */
    private String orgId;
    /**
     * @return Project Identifier
     * 
     */
    private String projectId;
    /**
     * @return Provider Connector is the reference to the connector for the infrastructure provider
     * 
     */
    private String providerConnector;
    /**
     * @return Provisioner type defines the provisioning tool to use.
     * 
     */
    private String provisionerType;
    /**
     * @return Provisioner Version defines the tool version to use
     * 
     */
    private String provisionerVersion;
    /**
     * @return Repository is the name of the repository to use
     * 
     */
    private String repository;
    /**
     * @return Repository Branch in which the code should be accessed
     * 
     */
    private String repositoryBranch;
    /**
     * @return Repository Tag in which the code should be accessed
     * 
     */
    private String repositoryCommit;
    /**
     * @return Repository Connector is the reference to the connector to use for this code
     * 
     */
    private String repositoryConnector;
    /**
     * @return Repository Path is the path in which the infra code resides
     * 
     */
    private String repositoryPath;
    /**
     * @return Repository Commit SHA in which the code should be accessed
     * 
     */
    private String repositorySha;
    /**
     * @return Tags to associate with the resource.
     * 
     */
    private @Nullable List<String> tags;
    private List<GetWorkspaceTerraformVariableFile> terraformVariableFiles;
    private List<GetWorkspaceTerraformVariable> terraformVariables;
    /**
     * @return Variable sets to use.
     * 
     */
    private List<String> variableSets;

    private GetWorkspaceResult() {}
    /**
     * @return Provider connectors configured on the Workspace. Only one connector of a type is supported
     * 
     */
    public List<GetWorkspaceConnector> connectors() {
        return this.connectors == null ? List.of() : this.connectors;
    }
    /**
     * @return If enabled cost estimation operations will be performed in this workspace
     * 
     */
    public Boolean costEstimationEnabled() {
        return this.costEstimationEnabled;
    }
    /**
     * @return Default pipelines associated with this workspace
     * 
     */
    public Map<String,String> defaultPipelines() {
        return this.defaultPipelines;
    }
    /**
     * @return Description of the Workspace
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Environment variables configured on the workspace
     * 
     */
    public List<GetWorkspaceEnvironmentVariable> environmentVariables() {
        return this.environmentVariables;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Identifier of the Workspace
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return Name of the Workspace
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Organization Identifier
     * 
     */
    public String orgId() {
        return this.orgId;
    }
    /**
     * @return Project Identifier
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Provider Connector is the reference to the connector for the infrastructure provider
     * 
     */
    public String providerConnector() {
        return this.providerConnector;
    }
    /**
     * @return Provisioner type defines the provisioning tool to use.
     * 
     */
    public String provisionerType() {
        return this.provisionerType;
    }
    /**
     * @return Provisioner Version defines the tool version to use
     * 
     */
    public String provisionerVersion() {
        return this.provisionerVersion;
    }
    /**
     * @return Repository is the name of the repository to use
     * 
     */
    public String repository() {
        return this.repository;
    }
    /**
     * @return Repository Branch in which the code should be accessed
     * 
     */
    public String repositoryBranch() {
        return this.repositoryBranch;
    }
    /**
     * @return Repository Tag in which the code should be accessed
     * 
     */
    public String repositoryCommit() {
        return this.repositoryCommit;
    }
    /**
     * @return Repository Connector is the reference to the connector to use for this code
     * 
     */
    public String repositoryConnector() {
        return this.repositoryConnector;
    }
    /**
     * @return Repository Path is the path in which the infra code resides
     * 
     */
    public String repositoryPath() {
        return this.repositoryPath;
    }
    /**
     * @return Repository Commit SHA in which the code should be accessed
     * 
     */
    public String repositorySha() {
        return this.repositorySha;
    }
    /**
     * @return Tags to associate with the resource.
     * 
     */
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    public List<GetWorkspaceTerraformVariableFile> terraformVariableFiles() {
        return this.terraformVariableFiles;
    }
    public List<GetWorkspaceTerraformVariable> terraformVariables() {
        return this.terraformVariables;
    }
    /**
     * @return Variable sets to use.
     * 
     */
    public List<String> variableSets() {
        return this.variableSets;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkspaceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetWorkspaceConnector> connectors;
        private Boolean costEstimationEnabled;
        private Map<String,String> defaultPipelines;
        private String description;
        private List<GetWorkspaceEnvironmentVariable> environmentVariables;
        private String id;
        private String identifier;
        private String name;
        private String orgId;
        private String projectId;
        private String providerConnector;
        private String provisionerType;
        private String provisionerVersion;
        private String repository;
        private String repositoryBranch;
        private String repositoryCommit;
        private String repositoryConnector;
        private String repositoryPath;
        private String repositorySha;
        private @Nullable List<String> tags;
        private List<GetWorkspaceTerraformVariableFile> terraformVariableFiles;
        private List<GetWorkspaceTerraformVariable> terraformVariables;
        private List<String> variableSets;
        public Builder() {}
        public Builder(GetWorkspaceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectors = defaults.connectors;
    	      this.costEstimationEnabled = defaults.costEstimationEnabled;
    	      this.defaultPipelines = defaults.defaultPipelines;
    	      this.description = defaults.description;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.projectId = defaults.projectId;
    	      this.providerConnector = defaults.providerConnector;
    	      this.provisionerType = defaults.provisionerType;
    	      this.provisionerVersion = defaults.provisionerVersion;
    	      this.repository = defaults.repository;
    	      this.repositoryBranch = defaults.repositoryBranch;
    	      this.repositoryCommit = defaults.repositoryCommit;
    	      this.repositoryConnector = defaults.repositoryConnector;
    	      this.repositoryPath = defaults.repositoryPath;
    	      this.repositorySha = defaults.repositorySha;
    	      this.tags = defaults.tags;
    	      this.terraformVariableFiles = defaults.terraformVariableFiles;
    	      this.terraformVariables = defaults.terraformVariables;
    	      this.variableSets = defaults.variableSets;
        }

        @CustomType.Setter
        public Builder connectors(@Nullable List<GetWorkspaceConnector> connectors) {

            this.connectors = connectors;
            return this;
        }
        public Builder connectors(GetWorkspaceConnector... connectors) {
            return connectors(List.of(connectors));
        }
        @CustomType.Setter
        public Builder costEstimationEnabled(Boolean costEstimationEnabled) {
            if (costEstimationEnabled == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "costEstimationEnabled");
            }
            this.costEstimationEnabled = costEstimationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder defaultPipelines(Map<String,String> defaultPipelines) {
            if (defaultPipelines == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "defaultPipelines");
            }
            this.defaultPipelines = defaultPipelines;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder environmentVariables(List<GetWorkspaceEnvironmentVariable> environmentVariables) {
            if (environmentVariables == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "environmentVariables");
            }
            this.environmentVariables = environmentVariables;
            return this;
        }
        public Builder environmentVariables(GetWorkspaceEnvironmentVariable... environmentVariables) {
            return environmentVariables(List.of(environmentVariables));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            if (identifier == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "identifier");
            }
            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(String orgId) {
            if (orgId == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "orgId");
            }
            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder providerConnector(String providerConnector) {
            if (providerConnector == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "providerConnector");
            }
            this.providerConnector = providerConnector;
            return this;
        }
        @CustomType.Setter
        public Builder provisionerType(String provisionerType) {
            if (provisionerType == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "provisionerType");
            }
            this.provisionerType = provisionerType;
            return this;
        }
        @CustomType.Setter
        public Builder provisionerVersion(String provisionerVersion) {
            if (provisionerVersion == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "provisionerVersion");
            }
            this.provisionerVersion = provisionerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder repository(String repository) {
            if (repository == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "repository");
            }
            this.repository = repository;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryBranch(String repositoryBranch) {
            if (repositoryBranch == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "repositoryBranch");
            }
            this.repositoryBranch = repositoryBranch;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryCommit(String repositoryCommit) {
            if (repositoryCommit == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "repositoryCommit");
            }
            this.repositoryCommit = repositoryCommit;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryConnector(String repositoryConnector) {
            if (repositoryConnector == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "repositoryConnector");
            }
            this.repositoryConnector = repositoryConnector;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryPath(String repositoryPath) {
            if (repositoryPath == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "repositoryPath");
            }
            this.repositoryPath = repositoryPath;
            return this;
        }
        @CustomType.Setter
        public Builder repositorySha(String repositorySha) {
            if (repositorySha == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "repositorySha");
            }
            this.repositorySha = repositorySha;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<String> tags) {

            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder terraformVariableFiles(List<GetWorkspaceTerraformVariableFile> terraformVariableFiles) {
            if (terraformVariableFiles == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "terraformVariableFiles");
            }
            this.terraformVariableFiles = terraformVariableFiles;
            return this;
        }
        public Builder terraformVariableFiles(GetWorkspaceTerraformVariableFile... terraformVariableFiles) {
            return terraformVariableFiles(List.of(terraformVariableFiles));
        }
        @CustomType.Setter
        public Builder terraformVariables(List<GetWorkspaceTerraformVariable> terraformVariables) {
            if (terraformVariables == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "terraformVariables");
            }
            this.terraformVariables = terraformVariables;
            return this;
        }
        public Builder terraformVariables(GetWorkspaceTerraformVariable... terraformVariables) {
            return terraformVariables(List.of(terraformVariables));
        }
        @CustomType.Setter
        public Builder variableSets(List<String> variableSets) {
            if (variableSets == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceResult", "variableSets");
            }
            this.variableSets = variableSets;
            return this;
        }
        public Builder variableSets(String... variableSets) {
            return variableSets(List.of(variableSets));
        }
        public GetWorkspaceResult build() {
            final var _resultValue = new GetWorkspaceResult();
            _resultValue.connectors = connectors;
            _resultValue.costEstimationEnabled = costEstimationEnabled;
            _resultValue.defaultPipelines = defaultPipelines;
            _resultValue.description = description;
            _resultValue.environmentVariables = environmentVariables;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.name = name;
            _resultValue.orgId = orgId;
            _resultValue.projectId = projectId;
            _resultValue.providerConnector = providerConnector;
            _resultValue.provisionerType = provisionerType;
            _resultValue.provisionerVersion = provisionerVersion;
            _resultValue.repository = repository;
            _resultValue.repositoryBranch = repositoryBranch;
            _resultValue.repositoryCommit = repositoryCommit;
            _resultValue.repositoryConnector = repositoryConnector;
            _resultValue.repositoryPath = repositoryPath;
            _resultValue.repositorySha = repositorySha;
            _resultValue.tags = tags;
            _resultValue.terraformVariableFiles = terraformVariableFiles;
            _resultValue.terraformVariables = terraformVariables;
            _resultValue.variableSets = variableSets;
            return _resultValue;
        }
    }
}
