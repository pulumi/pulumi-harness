// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDbInstanceResult {
    /**
     * @return The branch of changeSet repository
     * 
     */
    private String branch;
    /**
     * @return The connector to database
     * 
     */
    private String connector;
    /**
     * @return The liquibase context
     * 
     */
    private String context;
    /**
     * @return Description of the resource.
     * 
     */
    private String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Unique identifier of the resource.
     * 
     */
    private String identifier;
    private @Nullable Map<String,String> liquibaseSubstituteProperties;
    /**
     * @return Name of the resource.
     * 
     */
    private @Nullable String name;
    /**
     * @return Unique identifier of the organization.
     * 
     */
    private String orgId;
    /**
     * @return Unique identifier of the project.
     * 
     */
    private String projectId;
    /**
     * @return The identifier of the parent database schema
     * 
     */
    private String schema;
    /**
     * @return Tags to associate with the resource.
     * 
     */
    private List<String> tags;

    private GetDbInstanceResult() {}
    /**
     * @return The branch of changeSet repository
     * 
     */
    public String branch() {
        return this.branch;
    }
    /**
     * @return The connector to database
     * 
     */
    public String connector() {
        return this.connector;
    }
    /**
     * @return The liquibase context
     * 
     */
    public String context() {
        return this.context;
    }
    /**
     * @return Description of the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Unique identifier of the resource.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    public Map<String,String> liquibaseSubstituteProperties() {
        return this.liquibaseSubstituteProperties == null ? Map.of() : this.liquibaseSubstituteProperties;
    }
    /**
     * @return Name of the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Unique identifier of the organization.
     * 
     */
    public String orgId() {
        return this.orgId;
    }
    /**
     * @return Unique identifier of the project.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return The identifier of the parent database schema
     * 
     */
    public String schema() {
        return this.schema;
    }
    /**
     * @return Tags to associate with the resource.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String branch;
        private String connector;
        private String context;
        private String description;
        private String id;
        private String identifier;
        private @Nullable Map<String,String> liquibaseSubstituteProperties;
        private @Nullable String name;
        private String orgId;
        private String projectId;
        private String schema;
        private List<String> tags;
        public Builder() {}
        public Builder(GetDbInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branch = defaults.branch;
    	      this.connector = defaults.connector;
    	      this.context = defaults.context;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.liquibaseSubstituteProperties = defaults.liquibaseSubstituteProperties;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.projectId = defaults.projectId;
    	      this.schema = defaults.schema;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder branch(String branch) {
            if (branch == null) {
              throw new MissingRequiredPropertyException("GetDbInstanceResult", "branch");
            }
            this.branch = branch;
            return this;
        }
        @CustomType.Setter
        public Builder connector(String connector) {
            if (connector == null) {
              throw new MissingRequiredPropertyException("GetDbInstanceResult", "connector");
            }
            this.connector = connector;
            return this;
        }
        @CustomType.Setter
        public Builder context(String context) {
            if (context == null) {
              throw new MissingRequiredPropertyException("GetDbInstanceResult", "context");
            }
            this.context = context;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDbInstanceResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDbInstanceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            if (identifier == null) {
              throw new MissingRequiredPropertyException("GetDbInstanceResult", "identifier");
            }
            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder liquibaseSubstituteProperties(@Nullable Map<String,String> liquibaseSubstituteProperties) {

            this.liquibaseSubstituteProperties = liquibaseSubstituteProperties;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(String orgId) {
            if (orgId == null) {
              throw new MissingRequiredPropertyException("GetDbInstanceResult", "orgId");
            }
            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetDbInstanceResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder schema(String schema) {
            if (schema == null) {
              throw new MissingRequiredPropertyException("GetDbInstanceResult", "schema");
            }
            this.schema = schema;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetDbInstanceResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public GetDbInstanceResult build() {
            final var _resultValue = new GetDbInstanceResult();
            _resultValue.branch = branch;
            _resultValue.connector = connector;
            _resultValue.context = context;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.liquibaseSubstituteProperties = liquibaseSubstituteProperties;
            _resultValue.name = name;
            _resultValue.orgId = orgId;
            _resultValue.projectId = projectId;
            _resultValue.schema = schema;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
