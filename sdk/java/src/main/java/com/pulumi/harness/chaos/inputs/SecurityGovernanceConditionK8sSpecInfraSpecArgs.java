// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class SecurityGovernanceConditionK8sSpecInfraSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityGovernanceConditionK8sSpecInfraSpecArgs Empty = new SecurityGovernanceConditionK8sSpecInfraSpecArgs();

    /**
     * List of infrastructure IDs to apply the condition to
     * 
     */
    @Import(name="infraIds", required=true)
    private Output<List<String>> infraIds;

    /**
     * @return List of infrastructure IDs to apply the condition to
     * 
     */
    public Output<List<String>> infraIds() {
        return this.infraIds;
    }

    /**
     * Operator for comparing infrastructure IDs (EQUAL*TO or NOT*EQUAL_TO)
     * 
     */
    @Import(name="operator", required=true)
    private Output<String> operator;

    /**
     * @return Operator for comparing infrastructure IDs (EQUAL*TO or NOT*EQUAL_TO)
     * 
     */
    public Output<String> operator() {
        return this.operator;
    }

    private SecurityGovernanceConditionK8sSpecInfraSpecArgs() {}

    private SecurityGovernanceConditionK8sSpecInfraSpecArgs(SecurityGovernanceConditionK8sSpecInfraSpecArgs $) {
        this.infraIds = $.infraIds;
        this.operator = $.operator;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityGovernanceConditionK8sSpecInfraSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityGovernanceConditionK8sSpecInfraSpecArgs $;

        public Builder() {
            $ = new SecurityGovernanceConditionK8sSpecInfraSpecArgs();
        }

        public Builder(SecurityGovernanceConditionK8sSpecInfraSpecArgs defaults) {
            $ = new SecurityGovernanceConditionK8sSpecInfraSpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param infraIds List of infrastructure IDs to apply the condition to
         * 
         * @return builder
         * 
         */
        public Builder infraIds(Output<List<String>> infraIds) {
            $.infraIds = infraIds;
            return this;
        }

        /**
         * @param infraIds List of infrastructure IDs to apply the condition to
         * 
         * @return builder
         * 
         */
        public Builder infraIds(List<String> infraIds) {
            return infraIds(Output.of(infraIds));
        }

        /**
         * @param infraIds List of infrastructure IDs to apply the condition to
         * 
         * @return builder
         * 
         */
        public Builder infraIds(String... infraIds) {
            return infraIds(List.of(infraIds));
        }

        /**
         * @param operator Operator for comparing infrastructure IDs (EQUAL*TO or NOT*EQUAL_TO)
         * 
         * @return builder
         * 
         */
        public Builder operator(Output<String> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator Operator for comparing infrastructure IDs (EQUAL*TO or NOT*EQUAL_TO)
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        public SecurityGovernanceConditionK8sSpecInfraSpecArgs build() {
            if ($.infraIds == null) {
                throw new MissingRequiredPropertyException("SecurityGovernanceConditionK8sSpecInfraSpecArgs", "infraIds");
            }
            if ($.operator == null) {
                throw new MissingRequiredPropertyException("SecurityGovernanceConditionK8sSpecInfraSpecArgs", "operator");
            }
            return $;
        }
    }

}
