// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GetGcpSecretManagerConnectorOidcAuthentication;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGcpSecretManagerConnectorResult {
    /**
     * @return Reference to the secret containing credentials of IAM service account for Google Secret Manager. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    private String credentialsRef;
    /**
     * @return The delegates to inherit the credentials from.
     * 
     */
    private List<String> delegateSelectors;
    /**
     * @return Description of the resource.
     * 
     */
    private String description;
    /**
     * @return Execute on delegate or not.
     * 
     */
    private Boolean executeOnDelegate;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Unique identifier of the resource.
     * 
     */
    private String identifier;
    /**
     * @return Inherit configuration from delegate.
     * 
     */
    private Boolean inheritFromDelegate;
    /**
     * @return Set this flag to set this secret manager as default secret manager.
     * 
     */
    private Boolean isDefault;
    /**
     * @return Name of the resource.
     * 
     */
    private @Nullable String name;
    /**
     * @return Authentication using harness oidc.
     * 
     */
    private List<GetGcpSecretManagerConnectorOidcAuthentication> oidcAuthentications;
    /**
     * @return Unique identifier of the organization.
     * 
     */
    private @Nullable String orgId;
    /**
     * @return Unique identifier of the project.
     * 
     */
    private @Nullable String projectId;
    /**
     * @return Tags to associate with the resource.
     * 
     */
    private List<String> tags;

    private GetGcpSecretManagerConnectorResult() {}
    /**
     * @return Reference to the secret containing credentials of IAM service account for Google Secret Manager. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public String credentialsRef() {
        return this.credentialsRef;
    }
    /**
     * @return The delegates to inherit the credentials from.
     * 
     */
    public List<String> delegateSelectors() {
        return this.delegateSelectors;
    }
    /**
     * @return Description of the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Execute on delegate or not.
     * 
     */
    public Boolean executeOnDelegate() {
        return this.executeOnDelegate;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Unique identifier of the resource.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return Inherit configuration from delegate.
     * 
     */
    public Boolean inheritFromDelegate() {
        return this.inheritFromDelegate;
    }
    /**
     * @return Set this flag to set this secret manager as default secret manager.
     * 
     */
    public Boolean isDefault() {
        return this.isDefault;
    }
    /**
     * @return Name of the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Authentication using harness oidc.
     * 
     */
    public List<GetGcpSecretManagerConnectorOidcAuthentication> oidcAuthentications() {
        return this.oidcAuthentications;
    }
    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }
    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return Tags to associate with the resource.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGcpSecretManagerConnectorResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String credentialsRef;
        private List<String> delegateSelectors;
        private String description;
        private Boolean executeOnDelegate;
        private String id;
        private String identifier;
        private Boolean inheritFromDelegate;
        private Boolean isDefault;
        private @Nullable String name;
        private List<GetGcpSecretManagerConnectorOidcAuthentication> oidcAuthentications;
        private @Nullable String orgId;
        private @Nullable String projectId;
        private List<String> tags;
        public Builder() {}
        public Builder(GetGcpSecretManagerConnectorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credentialsRef = defaults.credentialsRef;
    	      this.delegateSelectors = defaults.delegateSelectors;
    	      this.description = defaults.description;
    	      this.executeOnDelegate = defaults.executeOnDelegate;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.inheritFromDelegate = defaults.inheritFromDelegate;
    	      this.isDefault = defaults.isDefault;
    	      this.name = defaults.name;
    	      this.oidcAuthentications = defaults.oidcAuthentications;
    	      this.orgId = defaults.orgId;
    	      this.projectId = defaults.projectId;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder credentialsRef(String credentialsRef) {
            if (credentialsRef == null) {
              throw new MissingRequiredPropertyException("GetGcpSecretManagerConnectorResult", "credentialsRef");
            }
            this.credentialsRef = credentialsRef;
            return this;
        }
        @CustomType.Setter
        public Builder delegateSelectors(List<String> delegateSelectors) {
            if (delegateSelectors == null) {
              throw new MissingRequiredPropertyException("GetGcpSecretManagerConnectorResult", "delegateSelectors");
            }
            this.delegateSelectors = delegateSelectors;
            return this;
        }
        public Builder delegateSelectors(String... delegateSelectors) {
            return delegateSelectors(List.of(delegateSelectors));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetGcpSecretManagerConnectorResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder executeOnDelegate(Boolean executeOnDelegate) {
            if (executeOnDelegate == null) {
              throw new MissingRequiredPropertyException("GetGcpSecretManagerConnectorResult", "executeOnDelegate");
            }
            this.executeOnDelegate = executeOnDelegate;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGcpSecretManagerConnectorResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            if (identifier == null) {
              throw new MissingRequiredPropertyException("GetGcpSecretManagerConnectorResult", "identifier");
            }
            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder inheritFromDelegate(Boolean inheritFromDelegate) {
            if (inheritFromDelegate == null) {
              throw new MissingRequiredPropertyException("GetGcpSecretManagerConnectorResult", "inheritFromDelegate");
            }
            this.inheritFromDelegate = inheritFromDelegate;
            return this;
        }
        @CustomType.Setter
        public Builder isDefault(Boolean isDefault) {
            if (isDefault == null) {
              throw new MissingRequiredPropertyException("GetGcpSecretManagerConnectorResult", "isDefault");
            }
            this.isDefault = isDefault;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder oidcAuthentications(List<GetGcpSecretManagerConnectorOidcAuthentication> oidcAuthentications) {
            if (oidcAuthentications == null) {
              throw new MissingRequiredPropertyException("GetGcpSecretManagerConnectorResult", "oidcAuthentications");
            }
            this.oidcAuthentications = oidcAuthentications;
            return this;
        }
        public Builder oidcAuthentications(GetGcpSecretManagerConnectorOidcAuthentication... oidcAuthentications) {
            return oidcAuthentications(List.of(oidcAuthentications));
        }
        @CustomType.Setter
        public Builder orgId(@Nullable String orgId) {

            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetGcpSecretManagerConnectorResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public GetGcpSecretManagerConnectorResult build() {
            final var _resultValue = new GetGcpSecretManagerConnectorResult();
            _resultValue.credentialsRef = credentialsRef;
            _resultValue.delegateSelectors = delegateSelectors;
            _resultValue.description = description;
            _resultValue.executeOnDelegate = executeOnDelegate;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.inheritFromDelegate = inheritFromDelegate;
            _resultValue.isDefault = isDefault;
            _resultValue.name = name;
            _resultValue.oidcAuthentications = oidcAuthentications;
            _resultValue.orgId = orgId;
            _resultValue.projectId = projectId;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
