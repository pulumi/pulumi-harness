// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetDbSchemaSchemaSource extends com.pulumi.resources.InvokeArgs {

    public static final GetDbSchemaSchemaSource Empty = new GetDbSchemaSchemaSource();

    /**
     * If connector type is artifactory, path to the archive file which contains the changeLog
     * 
     */
    @Import(name="archivePath", required=true)
    private String archivePath;

    /**
     * @return If connector type is artifactory, path to the archive file which contains the changeLog
     * 
     */
    public String archivePath() {
        return this.archivePath;
    }

    /**
     * Connector to repository at which to find details about the database schema
     * 
     */
    @Import(name="connector", required=true)
    private String connector;

    /**
     * @return Connector to repository at which to find details about the database schema
     * 
     */
    public String connector() {
        return this.connector;
    }

    /**
     * The path within the specified repository at which to find details about the database schema
     * 
     */
    @Import(name="location", required=true)
    private String location;

    /**
     * @return The path within the specified repository at which to find details about the database schema
     * 
     */
    public String location() {
        return this.location;
    }

    /**
     * If connector url is of account, which repository to connect to using the connector
     * 
     */
    @Import(name="repo", required=true)
    private String repo;

    /**
     * @return If connector url is of account, which repository to connect to using the connector
     * 
     */
    public String repo() {
        return this.repo;
    }

    private GetDbSchemaSchemaSource() {}

    private GetDbSchemaSchemaSource(GetDbSchemaSchemaSource $) {
        this.archivePath = $.archivePath;
        this.connector = $.connector;
        this.location = $.location;
        this.repo = $.repo;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDbSchemaSchemaSource defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDbSchemaSchemaSource $;

        public Builder() {
            $ = new GetDbSchemaSchemaSource();
        }

        public Builder(GetDbSchemaSchemaSource defaults) {
            $ = new GetDbSchemaSchemaSource(Objects.requireNonNull(defaults));
        }

        /**
         * @param archivePath If connector type is artifactory, path to the archive file which contains the changeLog
         * 
         * @return builder
         * 
         */
        public Builder archivePath(String archivePath) {
            $.archivePath = archivePath;
            return this;
        }

        /**
         * @param connector Connector to repository at which to find details about the database schema
         * 
         * @return builder
         * 
         */
        public Builder connector(String connector) {
            $.connector = connector;
            return this;
        }

        /**
         * @param location The path within the specified repository at which to find details about the database schema
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            $.location = location;
            return this;
        }

        /**
         * @param repo If connector url is of account, which repository to connect to using the connector
         * 
         * @return builder
         * 
         */
        public Builder repo(String repo) {
            $.repo = repo;
            return this;
        }

        public GetDbSchemaSchemaSource build() {
            if ($.archivePath == null) {
                throw new MissingRequiredPropertyException("GetDbSchemaSchemaSource", "archivePath");
            }
            if ($.connector == null) {
                throw new MissingRequiredPropertyException("GetDbSchemaSchemaSource", "connector");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("GetDbSchemaSchemaSource", "location");
            }
            if ($.repo == null) {
                throw new MissingRequiredPropertyException("GetDbSchemaSchemaSource", "repo");
            }
            return $;
        }
    }

}
