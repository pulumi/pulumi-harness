// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GithubConnectorApiAuthenticationGithubApp {
    /**
     * @return Enter the GitHub App ID from the GitHub App General tab.
     * 
     */
    private @Nullable String applicationId;
    /**
     * @return Reference to the secret containing application id To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    private @Nullable String applicationIdRef;
    /**
     * @return Enter the Installation ID located in the URL of the installed GitHub App.
     * 
     */
    private @Nullable String installationId;
    /**
     * @return Reference to the secret containing installation id. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    private @Nullable String installationIdRef;
    /**
     * @return Reference to the secret containing the private key. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    private String privateKeyRef;

    private GithubConnectorApiAuthenticationGithubApp() {}
    /**
     * @return Enter the GitHub App ID from the GitHub App General tab.
     * 
     */
    public Optional<String> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }
    /**
     * @return Reference to the secret containing application id To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public Optional<String> applicationIdRef() {
        return Optional.ofNullable(this.applicationIdRef);
    }
    /**
     * @return Enter the Installation ID located in the URL of the installed GitHub App.
     * 
     */
    public Optional<String> installationId() {
        return Optional.ofNullable(this.installationId);
    }
    /**
     * @return Reference to the secret containing installation id. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public Optional<String> installationIdRef() {
        return Optional.ofNullable(this.installationIdRef);
    }
    /**
     * @return Reference to the secret containing the private key. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public String privateKeyRef() {
        return this.privateKeyRef;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GithubConnectorApiAuthenticationGithubApp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String applicationId;
        private @Nullable String applicationIdRef;
        private @Nullable String installationId;
        private @Nullable String installationIdRef;
        private String privateKeyRef;
        public Builder() {}
        public Builder(GithubConnectorApiAuthenticationGithubApp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationId = defaults.applicationId;
    	      this.applicationIdRef = defaults.applicationIdRef;
    	      this.installationId = defaults.installationId;
    	      this.installationIdRef = defaults.installationIdRef;
    	      this.privateKeyRef = defaults.privateKeyRef;
        }

        @CustomType.Setter
        public Builder applicationId(@Nullable String applicationId) {

            this.applicationId = applicationId;
            return this;
        }
        @CustomType.Setter
        public Builder applicationIdRef(@Nullable String applicationIdRef) {

            this.applicationIdRef = applicationIdRef;
            return this;
        }
        @CustomType.Setter
        public Builder installationId(@Nullable String installationId) {

            this.installationId = installationId;
            return this;
        }
        @CustomType.Setter
        public Builder installationIdRef(@Nullable String installationIdRef) {

            this.installationIdRef = installationIdRef;
            return this;
        }
        @CustomType.Setter
        public Builder privateKeyRef(String privateKeyRef) {
            if (privateKeyRef == null) {
              throw new MissingRequiredPropertyException("GithubConnectorApiAuthenticationGithubApp", "privateKeyRef");
            }
            this.privateKeyRef = privateKeyRef;
            return this;
        }
        public GithubConnectorApiAuthenticationGithubApp build() {
            final var _resultValue = new GithubConnectorApiAuthenticationGithubApp();
            _resultValue.applicationId = applicationId;
            _resultValue.applicationIdRef = applicationIdRef;
            _resultValue.installationId = installationId;
            _resultValue.installationIdRef = installationIdRef;
            _resultValue.privateKeyRef = privateKeyRef;
            return _resultValue;
        }
    }
}
