// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GetCentralNotificationChannelChannel;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCentralNotificationChannelPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCentralNotificationChannelPlainArgs Empty = new GetCentralNotificationChannelPlainArgs();

    /**
     * Account identifier associated with this notification channel.
     * 
     */
    @Import(name="account")
    private @Nullable String account;

    /**
     * @return Account identifier associated with this notification channel.
     * 
     */
    public Optional<String> account() {
        return Optional.ofNullable(this.account);
    }

    /**
     * Configuration details of the notification channel.
     * 
     */
    @Import(name="channels")
    private @Nullable List<GetCentralNotificationChannelChannel> channels;

    /**
     * @return Configuration details of the notification channel.
     * 
     */
    public Optional<List<GetCentralNotificationChannelChannel>> channels() {
        return Optional.ofNullable(this.channels);
    }

    /**
     * Timestamp when the notification channel was created.
     * 
     */
    @Import(name="created")
    private @Nullable Integer created;

    /**
     * @return Timestamp when the notification channel was created.
     * 
     */
    public Optional<Integer> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * Unique identifier of the notification channel.
     * 
     */
    @Import(name="identifier", required=true)
    private String identifier;

    /**
     * @return Unique identifier of the notification channel.
     * 
     */
    public String identifier() {
        return this.identifier;
    }

    /**
     * Timestamp when the notification channel was last modified.
     * 
     */
    @Import(name="lastModified")
    private @Nullable Integer lastModified;

    /**
     * @return Timestamp when the notification channel was last modified.
     * 
     */
    public Optional<Integer> lastModified() {
        return Optional.ofNullable(this.lastModified);
    }

    /**
     * Name of the notification channel.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the notification channel.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Type of notification channel. One of: EMAIL, SLACK, PAGERDUTY, MSTeams, WEBHOOK, DATADOG.
     * 
     */
    @Import(name="notificationChannelType")
    private @Nullable String notificationChannelType;

    /**
     * @return Type of notification channel. One of: EMAIL, SLACK, PAGERDUTY, MSTeams, WEBHOOK, DATADOG.
     * 
     */
    public Optional<String> notificationChannelType() {
        return Optional.ofNullable(this.notificationChannelType);
    }

    /**
     * Identifier of the organization the notification channel is scoped to.
     * 
     */
    @Import(name="org")
    private @Nullable String org;

    /**
     * @return Identifier of the organization the notification channel is scoped to.
     * 
     */
    public Optional<String> org() {
        return Optional.ofNullable(this.org);
    }

    /**
     * Identifier of the project the notification channel is scoped to.
     * 
     */
    @Import(name="project")
    private @Nullable String project;

    /**
     * @return Identifier of the project the notification channel is scoped to.
     * 
     */
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Status of the notification channel. Possible values are ENABLED or DISABLED.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return Status of the notification channel. Possible values are ENABLED or DISABLED.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    private GetCentralNotificationChannelPlainArgs() {}

    private GetCentralNotificationChannelPlainArgs(GetCentralNotificationChannelPlainArgs $) {
        this.account = $.account;
        this.channels = $.channels;
        this.created = $.created;
        this.identifier = $.identifier;
        this.lastModified = $.lastModified;
        this.name = $.name;
        this.notificationChannelType = $.notificationChannelType;
        this.org = $.org;
        this.project = $.project;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCentralNotificationChannelPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCentralNotificationChannelPlainArgs $;

        public Builder() {
            $ = new GetCentralNotificationChannelPlainArgs();
        }

        public Builder(GetCentralNotificationChannelPlainArgs defaults) {
            $ = new GetCentralNotificationChannelPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param account Account identifier associated with this notification channel.
         * 
         * @return builder
         * 
         */
        public Builder account(@Nullable String account) {
            $.account = account;
            return this;
        }

        /**
         * @param channels Configuration details of the notification channel.
         * 
         * @return builder
         * 
         */
        public Builder channels(@Nullable List<GetCentralNotificationChannelChannel> channels) {
            $.channels = channels;
            return this;
        }

        /**
         * @param channels Configuration details of the notification channel.
         * 
         * @return builder
         * 
         */
        public Builder channels(GetCentralNotificationChannelChannel... channels) {
            return channels(List.of(channels));
        }

        /**
         * @param created Timestamp when the notification channel was created.
         * 
         * @return builder
         * 
         */
        public Builder created(@Nullable Integer created) {
            $.created = created;
            return this;
        }

        /**
         * @param identifier Unique identifier of the notification channel.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param lastModified Timestamp when the notification channel was last modified.
         * 
         * @return builder
         * 
         */
        public Builder lastModified(@Nullable Integer lastModified) {
            $.lastModified = lastModified;
            return this;
        }

        /**
         * @param name Name of the notification channel.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param notificationChannelType Type of notification channel. One of: EMAIL, SLACK, PAGERDUTY, MSTeams, WEBHOOK, DATADOG.
         * 
         * @return builder
         * 
         */
        public Builder notificationChannelType(@Nullable String notificationChannelType) {
            $.notificationChannelType = notificationChannelType;
            return this;
        }

        /**
         * @param org Identifier of the organization the notification channel is scoped to.
         * 
         * @return builder
         * 
         */
        public Builder org(@Nullable String org) {
            $.org = org;
            return this;
        }

        /**
         * @param project Identifier of the project the notification channel is scoped to.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable String project) {
            $.project = project;
            return this;
        }

        /**
         * @param status Status of the notification channel. Possible values are ENABLED or DISABLED.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        public GetCentralNotificationChannelPlainArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("GetCentralNotificationChannelPlainArgs", "identifier");
            }
            return $;
        }
    }

}
