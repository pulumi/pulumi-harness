// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.service.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.service.inputs.DiscoveryAgentConfigDataCronArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiscoveryAgentConfigDataArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiscoveryAgentConfigDataArgs Empty = new DiscoveryAgentConfigDataArgs();

    /**
     * List of namespaces to exclude from discovery.
     * 
     */
    @Import(name="blacklistedNamespaces")
    private @Nullable Output<List<String>> blacklistedNamespaces;

    /**
     * @return List of namespaces to exclude from discovery.
     * 
     */
    public Optional<Output<List<String>>> blacklistedNamespaces() {
        return Optional.ofNullable(this.blacklistedNamespaces);
    }

    /**
     * Collection window in minutes.
     * 
     */
    @Import(name="collectionWindowInMin")
    private @Nullable Output<Integer> collectionWindowInMin;

    /**
     * @return Collection window in minutes.
     * 
     */
    public Optional<Output<Integer>> collectionWindowInMin() {
        return Optional.ofNullable(this.collectionWindowInMin);
    }

    /**
     * Cron schedule for data collection.
     * 
     */
    @Import(name="crons")
    private @Nullable Output<List<DiscoveryAgentConfigDataCronArgs>> crons;

    /**
     * @return Cron schedule for data collection.
     * 
     */
    public Optional<Output<List<DiscoveryAgentConfigDataCronArgs>>> crons() {
        return Optional.ofNullable(this.crons);
    }

    /**
     * Whether to enable batch resources.
     * 
     */
    @Import(name="enableBatchResources")
    private @Nullable Output<Boolean> enableBatchResources;

    /**
     * @return Whether to enable batch resources.
     * 
     */
    public Optional<Output<Boolean>> enableBatchResources() {
        return Optional.ofNullable(this.enableBatchResources);
    }

    /**
     * Whether to enable node agent.
     * 
     */
    @Import(name="enableNodeAgent")
    private @Nullable Output<Boolean> enableNodeAgent;

    /**
     * @return Whether to enable node agent.
     * 
     */
    public Optional<Output<Boolean>> enableNodeAgent() {
        return Optional.ofNullable(this.enableNodeAgent);
    }

    /**
     * Whether to enable orphaned pod detection.
     * 
     */
    @Import(name="enableOrphanedPod")
    private @Nullable Output<Boolean> enableOrphanedPod;

    /**
     * @return Whether to enable orphaned pod detection.
     * 
     */
    public Optional<Output<Boolean>> enableOrphanedPod() {
        return Optional.ofNullable(this.enableOrphanedPod);
    }

    /**
     * Namespace selector for the agent.
     * 
     */
    @Import(name="namespaceSelector")
    private @Nullable Output<String> namespaceSelector;

    /**
     * @return Namespace selector for the agent.
     * 
     */
    public Optional<Output<String>> namespaceSelector() {
        return Optional.ofNullable(this.namespaceSelector);
    }

    /**
     * Node selector for the node agent.
     * 
     */
    @Import(name="nodeAgentSelector")
    private @Nullable Output<String> nodeAgentSelector;

    /**
     * @return Node selector for the node agent.
     * 
     */
    public Optional<Output<String>> nodeAgentSelector() {
        return Optional.ofNullable(this.nodeAgentSelector);
    }

    /**
     * List of namespaces to observe.
     * 
     */
    @Import(name="observedNamespaces")
    private @Nullable Output<List<String>> observedNamespaces;

    /**
     * @return List of namespaces to observe.
     * 
     */
    public Optional<Output<List<String>>> observedNamespaces() {
        return Optional.ofNullable(this.observedNamespaces);
    }

    private DiscoveryAgentConfigDataArgs() {}

    private DiscoveryAgentConfigDataArgs(DiscoveryAgentConfigDataArgs $) {
        this.blacklistedNamespaces = $.blacklistedNamespaces;
        this.collectionWindowInMin = $.collectionWindowInMin;
        this.crons = $.crons;
        this.enableBatchResources = $.enableBatchResources;
        this.enableNodeAgent = $.enableNodeAgent;
        this.enableOrphanedPod = $.enableOrphanedPod;
        this.namespaceSelector = $.namespaceSelector;
        this.nodeAgentSelector = $.nodeAgentSelector;
        this.observedNamespaces = $.observedNamespaces;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiscoveryAgentConfigDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiscoveryAgentConfigDataArgs $;

        public Builder() {
            $ = new DiscoveryAgentConfigDataArgs();
        }

        public Builder(DiscoveryAgentConfigDataArgs defaults) {
            $ = new DiscoveryAgentConfigDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blacklistedNamespaces List of namespaces to exclude from discovery.
         * 
         * @return builder
         * 
         */
        public Builder blacklistedNamespaces(@Nullable Output<List<String>> blacklistedNamespaces) {
            $.blacklistedNamespaces = blacklistedNamespaces;
            return this;
        }

        /**
         * @param blacklistedNamespaces List of namespaces to exclude from discovery.
         * 
         * @return builder
         * 
         */
        public Builder blacklistedNamespaces(List<String> blacklistedNamespaces) {
            return blacklistedNamespaces(Output.of(blacklistedNamespaces));
        }

        /**
         * @param blacklistedNamespaces List of namespaces to exclude from discovery.
         * 
         * @return builder
         * 
         */
        public Builder blacklistedNamespaces(String... blacklistedNamespaces) {
            return blacklistedNamespaces(List.of(blacklistedNamespaces));
        }

        /**
         * @param collectionWindowInMin Collection window in minutes.
         * 
         * @return builder
         * 
         */
        public Builder collectionWindowInMin(@Nullable Output<Integer> collectionWindowInMin) {
            $.collectionWindowInMin = collectionWindowInMin;
            return this;
        }

        /**
         * @param collectionWindowInMin Collection window in minutes.
         * 
         * @return builder
         * 
         */
        public Builder collectionWindowInMin(Integer collectionWindowInMin) {
            return collectionWindowInMin(Output.of(collectionWindowInMin));
        }

        /**
         * @param crons Cron schedule for data collection.
         * 
         * @return builder
         * 
         */
        public Builder crons(@Nullable Output<List<DiscoveryAgentConfigDataCronArgs>> crons) {
            $.crons = crons;
            return this;
        }

        /**
         * @param crons Cron schedule for data collection.
         * 
         * @return builder
         * 
         */
        public Builder crons(List<DiscoveryAgentConfigDataCronArgs> crons) {
            return crons(Output.of(crons));
        }

        /**
         * @param crons Cron schedule for data collection.
         * 
         * @return builder
         * 
         */
        public Builder crons(DiscoveryAgentConfigDataCronArgs... crons) {
            return crons(List.of(crons));
        }

        /**
         * @param enableBatchResources Whether to enable batch resources.
         * 
         * @return builder
         * 
         */
        public Builder enableBatchResources(@Nullable Output<Boolean> enableBatchResources) {
            $.enableBatchResources = enableBatchResources;
            return this;
        }

        /**
         * @param enableBatchResources Whether to enable batch resources.
         * 
         * @return builder
         * 
         */
        public Builder enableBatchResources(Boolean enableBatchResources) {
            return enableBatchResources(Output.of(enableBatchResources));
        }

        /**
         * @param enableNodeAgent Whether to enable node agent.
         * 
         * @return builder
         * 
         */
        public Builder enableNodeAgent(@Nullable Output<Boolean> enableNodeAgent) {
            $.enableNodeAgent = enableNodeAgent;
            return this;
        }

        /**
         * @param enableNodeAgent Whether to enable node agent.
         * 
         * @return builder
         * 
         */
        public Builder enableNodeAgent(Boolean enableNodeAgent) {
            return enableNodeAgent(Output.of(enableNodeAgent));
        }

        /**
         * @param enableOrphanedPod Whether to enable orphaned pod detection.
         * 
         * @return builder
         * 
         */
        public Builder enableOrphanedPod(@Nullable Output<Boolean> enableOrphanedPod) {
            $.enableOrphanedPod = enableOrphanedPod;
            return this;
        }

        /**
         * @param enableOrphanedPod Whether to enable orphaned pod detection.
         * 
         * @return builder
         * 
         */
        public Builder enableOrphanedPod(Boolean enableOrphanedPod) {
            return enableOrphanedPod(Output.of(enableOrphanedPod));
        }

        /**
         * @param namespaceSelector Namespace selector for the agent.
         * 
         * @return builder
         * 
         */
        public Builder namespaceSelector(@Nullable Output<String> namespaceSelector) {
            $.namespaceSelector = namespaceSelector;
            return this;
        }

        /**
         * @param namespaceSelector Namespace selector for the agent.
         * 
         * @return builder
         * 
         */
        public Builder namespaceSelector(String namespaceSelector) {
            return namespaceSelector(Output.of(namespaceSelector));
        }

        /**
         * @param nodeAgentSelector Node selector for the node agent.
         * 
         * @return builder
         * 
         */
        public Builder nodeAgentSelector(@Nullable Output<String> nodeAgentSelector) {
            $.nodeAgentSelector = nodeAgentSelector;
            return this;
        }

        /**
         * @param nodeAgentSelector Node selector for the node agent.
         * 
         * @return builder
         * 
         */
        public Builder nodeAgentSelector(String nodeAgentSelector) {
            return nodeAgentSelector(Output.of(nodeAgentSelector));
        }

        /**
         * @param observedNamespaces List of namespaces to observe.
         * 
         * @return builder
         * 
         */
        public Builder observedNamespaces(@Nullable Output<List<String>> observedNamespaces) {
            $.observedNamespaces = observedNamespaces;
            return this;
        }

        /**
         * @param observedNamespaces List of namespaces to observe.
         * 
         * @return builder
         * 
         */
        public Builder observedNamespaces(List<String> observedNamespaces) {
            return observedNamespaces(Output.of(observedNamespaces));
        }

        /**
         * @param observedNamespaces List of namespaces to observe.
         * 
         * @return builder
         * 
         */
        public Builder observedNamespaces(String... observedNamespaces) {
            return observedNamespaces(List.of(observedNamespaces));
        }

        public DiscoveryAgentConfigDataArgs build() {
            return $;
        }
    }

}
