// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.TemplateGitDetailsArgs;
import com.pulumi.harness.platform.inputs.TemplateGitImportDetailsArgs;
import com.pulumi.harness.platform.inputs.TemplateTemplateImportRequestArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final TemplateArgs Empty = new TemplateArgs();

    /**
     * Specify comment with respect to changes.
     * 
     */
    @Import(name="comments")
    private @Nullable Output<String> comments;

    /**
     * @return Specify comment with respect to changes.
     * 
     */
    public Optional<Output<String>> comments() {
        return Optional.ofNullable(this.comments);
    }

    /**
     * Description of the entity. Description field is deprecated
     * 
     * @deprecated
     * description field is deprecated
     * 
     */
    @Deprecated /* description field is deprecated */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the entity. Description field is deprecated
     * 
     * @deprecated
     * description field is deprecated
     * 
     */
    @Deprecated /* description field is deprecated */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other entities reference it
     * 
     */
    @Import(name="forceDelete")
    private @Nullable Output<Boolean> forceDelete;

    /**
     * @return Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other entities reference it
     * 
     */
    public Optional<Output<Boolean>> forceDelete() {
        return Optional.ofNullable(this.forceDelete);
    }

    /**
     * Contains parameters related to creating an Entity for Git Experience.
     * 
     */
    @Import(name="gitDetails")
    private @Nullable Output<TemplateGitDetailsArgs> gitDetails;

    /**
     * @return Contains parameters related to creating an Entity for Git Experience.
     * 
     */
    public Optional<Output<TemplateGitDetailsArgs>> gitDetails() {
        return Optional.ofNullable(this.gitDetails);
    }

    /**
     * Contains Git Information for importing entities from Git
     * 
     */
    @Import(name="gitImportDetails")
    private @Nullable Output<TemplateGitImportDetailsArgs> gitImportDetails;

    /**
     * @return Contains Git Information for importing entities from Git
     * 
     */
    public Optional<Output<TemplateGitImportDetailsArgs>> gitImportDetails() {
        return Optional.ofNullable(this.gitImportDetails);
    }

    /**
     * Unique identifier of the resource. Cannot be changed once the resource is created. Must match the identifier in the template_yaml.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource. Cannot be changed once the resource is created. Must match the identifier in the template_yaml.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * Flag to set if importing from Git
     * 
     */
    @Import(name="importFromGit")
    private @Nullable Output<Boolean> importFromGit;

    /**
     * @return Flag to set if importing from Git
     * 
     */
    public Optional<Output<Boolean>> importFromGit() {
        return Optional.ofNullable(this.importFromGit);
    }

    /**
     * True if given version for template to be set as stable.
     * 
     */
    @Import(name="isStable")
    private @Nullable Output<Boolean> isStable;

    /**
     * @return True if given version for template to be set as stable.
     * 
     */
    public Optional<Output<Boolean>> isStable() {
        return Optional.ofNullable(this.isStable);
    }

    /**
     * Name of the Variable
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Variable
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Organization Identifier for the Entity
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Organization Identifier for the Entity
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Project Identifier for the Entity
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Project Identifier for the Entity
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Tags to associate with the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags to associate with the resource.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Contains parameters for importing template.
     * 
     */
    @Import(name="templateImportRequest")
    private @Nullable Output<TemplateTemplateImportRequestArgs> templateImportRequest;

    /**
     * @return Contains parameters for importing template.
     * 
     */
    public Optional<Output<TemplateTemplateImportRequestArgs>> templateImportRequest() {
        return Optional.ofNullable(this.templateImportRequest);
    }

    /**
     * Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference an entity at the account scope, prefix &#39;account` to the expression: account.{identifier}. For eg, to reference a connector with identifier &#39;connectorId&#39; at the organization scope in a stage mention it as connectorRef: org.connectorId.
     * 
     */
    @Import(name="templateYaml")
    private @Nullable Output<String> templateYaml;

    /**
     * @return Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference an entity at the account scope, prefix &#39;account` to the expression: account.{identifier}. For eg, to reference a connector with identifier &#39;connectorId&#39; at the organization scope in a stage mention it as connectorRef: org.connectorId.
     * 
     */
    public Optional<Output<String>> templateYaml() {
        return Optional.ofNullable(this.templateYaml);
    }

    /**
     * Version Label for Template.
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    /**
     * @return Version Label for Template.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    private TemplateArgs() {}

    private TemplateArgs(TemplateArgs $) {
        this.comments = $.comments;
        this.description = $.description;
        this.forceDelete = $.forceDelete;
        this.gitDetails = $.gitDetails;
        this.gitImportDetails = $.gitImportDetails;
        this.identifier = $.identifier;
        this.importFromGit = $.importFromGit;
        this.isStable = $.isStable;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.tags = $.tags;
        this.templateImportRequest = $.templateImportRequest;
        this.templateYaml = $.templateYaml;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TemplateArgs $;

        public Builder() {
            $ = new TemplateArgs();
        }

        public Builder(TemplateArgs defaults) {
            $ = new TemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comments Specify comment with respect to changes.
         * 
         * @return builder
         * 
         */
        public Builder comments(@Nullable Output<String> comments) {
            $.comments = comments;
            return this;
        }

        /**
         * @param comments Specify comment with respect to changes.
         * 
         * @return builder
         * 
         */
        public Builder comments(String comments) {
            return comments(Output.of(comments));
        }

        /**
         * @param description Description of the entity. Description field is deprecated
         * 
         * @return builder
         * 
         * @deprecated
         * description field is deprecated
         * 
         */
        @Deprecated /* description field is deprecated */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the entity. Description field is deprecated
         * 
         * @return builder
         * 
         * @deprecated
         * description field is deprecated
         * 
         */
        @Deprecated /* description field is deprecated */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param forceDelete Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other entities reference it
         * 
         * @return builder
         * 
         */
        public Builder forceDelete(@Nullable Output<Boolean> forceDelete) {
            $.forceDelete = forceDelete;
            return this;
        }

        /**
         * @param forceDelete Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other entities reference it
         * 
         * @return builder
         * 
         */
        public Builder forceDelete(Boolean forceDelete) {
            return forceDelete(Output.of(forceDelete));
        }

        /**
         * @param gitDetails Contains parameters related to creating an Entity for Git Experience.
         * 
         * @return builder
         * 
         */
        public Builder gitDetails(@Nullable Output<TemplateGitDetailsArgs> gitDetails) {
            $.gitDetails = gitDetails;
            return this;
        }

        /**
         * @param gitDetails Contains parameters related to creating an Entity for Git Experience.
         * 
         * @return builder
         * 
         */
        public Builder gitDetails(TemplateGitDetailsArgs gitDetails) {
            return gitDetails(Output.of(gitDetails));
        }

        /**
         * @param gitImportDetails Contains Git Information for importing entities from Git
         * 
         * @return builder
         * 
         */
        public Builder gitImportDetails(@Nullable Output<TemplateGitImportDetailsArgs> gitImportDetails) {
            $.gitImportDetails = gitImportDetails;
            return this;
        }

        /**
         * @param gitImportDetails Contains Git Information for importing entities from Git
         * 
         * @return builder
         * 
         */
        public Builder gitImportDetails(TemplateGitImportDetailsArgs gitImportDetails) {
            return gitImportDetails(Output.of(gitImportDetails));
        }

        /**
         * @param identifier Unique identifier of the resource. Cannot be changed once the resource is created. Must match the identifier in the template_yaml.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource. Cannot be changed once the resource is created. Must match the identifier in the template_yaml.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param importFromGit Flag to set if importing from Git
         * 
         * @return builder
         * 
         */
        public Builder importFromGit(@Nullable Output<Boolean> importFromGit) {
            $.importFromGit = importFromGit;
            return this;
        }

        /**
         * @param importFromGit Flag to set if importing from Git
         * 
         * @return builder
         * 
         */
        public Builder importFromGit(Boolean importFromGit) {
            return importFromGit(Output.of(importFromGit));
        }

        /**
         * @param isStable True if given version for template to be set as stable.
         * 
         * @return builder
         * 
         */
        public Builder isStable(@Nullable Output<Boolean> isStable) {
            $.isStable = isStable;
            return this;
        }

        /**
         * @param isStable True if given version for template to be set as stable.
         * 
         * @return builder
         * 
         */
        public Builder isStable(Boolean isStable) {
            return isStable(Output.of(isStable));
        }

        /**
         * @param name Name of the Variable
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Variable
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId Organization Identifier for the Entity
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Organization Identifier for the Entity
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Project Identifier for the Entity
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project Identifier for the Entity
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param templateImportRequest Contains parameters for importing template.
         * 
         * @return builder
         * 
         */
        public Builder templateImportRequest(@Nullable Output<TemplateTemplateImportRequestArgs> templateImportRequest) {
            $.templateImportRequest = templateImportRequest;
            return this;
        }

        /**
         * @param templateImportRequest Contains parameters for importing template.
         * 
         * @return builder
         * 
         */
        public Builder templateImportRequest(TemplateTemplateImportRequestArgs templateImportRequest) {
            return templateImportRequest(Output.of(templateImportRequest));
        }

        /**
         * @param templateYaml Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference an entity at the account scope, prefix &#39;account` to the expression: account.{identifier}. For eg, to reference a connector with identifier &#39;connectorId&#39; at the organization scope in a stage mention it as connectorRef: org.connectorId.
         * 
         * @return builder
         * 
         */
        public Builder templateYaml(@Nullable Output<String> templateYaml) {
            $.templateYaml = templateYaml;
            return this;
        }

        /**
         * @param templateYaml Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference an entity at the account scope, prefix &#39;account` to the expression: account.{identifier}. For eg, to reference a connector with identifier &#39;connectorId&#39; at the organization scope in a stage mention it as connectorRef: org.connectorId.
         * 
         * @return builder
         * 
         */
        public Builder templateYaml(String templateYaml) {
            return templateYaml(Output.of(templateYaml));
        }

        /**
         * @param version Version Label for Template.
         * 
         * @return builder
         * 
         */
        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Version Label for Template.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public TemplateArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("TemplateArgs", "identifier");
            }
            if ($.version == null) {
                throw new MissingRequiredPropertyException("TemplateArgs", "version");
            }
            return $;
        }
    }

}
