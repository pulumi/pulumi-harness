// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.PipelineFiltersFilterPropertiesArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineFiltersState extends com.pulumi.resources.ResourceArgs {

    public static final PipelineFiltersState Empty = new PipelineFiltersState();

    /**
     * Properties of the filters entity defined in Harness.
     * 
     */
    @Import(name="filterProperties")
    private @Nullable Output<PipelineFiltersFilterPropertiesArgs> filterProperties;

    /**
     * @return Properties of the filters entity defined in Harness.
     * 
     */
    public Optional<Output<PipelineFiltersFilterPropertiesArgs>> filterProperties() {
        return Optional.ofNullable(this.filterProperties);
    }

    /**
     * This indicates visibility of filters. By default, everyone can view this filter.
     * 
     */
    @Import(name="filterVisibility")
    private @Nullable Output<String> filterVisibility;

    /**
     * @return This indicates visibility of filters. By default, everyone can view this filter.
     * 
     */
    public Optional<Output<String>> filterVisibility() {
        return Optional.ofNullable(this.filterVisibility);
    }

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * Name of the pipeline filters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the pipeline filters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Organization Identifier for the Entity.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Organization Identifier for the Entity.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Project Identifier for the Entity.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Project Identifier for the Entity.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Type of pipeline filters. Currently supported types are {PipelineSetup, PipelineExecution, Deployment, Template, EnvironmentGroup, Environment}
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of pipeline filters. Currently supported types are {PipelineSetup, PipelineExecution, Deployment, Template, EnvironmentGroup, Environment}
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private PipelineFiltersState() {}

    private PipelineFiltersState(PipelineFiltersState $) {
        this.filterProperties = $.filterProperties;
        this.filterVisibility = $.filterVisibility;
        this.identifier = $.identifier;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineFiltersState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineFiltersState $;

        public Builder() {
            $ = new PipelineFiltersState();
        }

        public Builder(PipelineFiltersState defaults) {
            $ = new PipelineFiltersState(Objects.requireNonNull(defaults));
        }

        /**
         * @param filterProperties Properties of the filters entity defined in Harness.
         * 
         * @return builder
         * 
         */
        public Builder filterProperties(@Nullable Output<PipelineFiltersFilterPropertiesArgs> filterProperties) {
            $.filterProperties = filterProperties;
            return this;
        }

        /**
         * @param filterProperties Properties of the filters entity defined in Harness.
         * 
         * @return builder
         * 
         */
        public Builder filterProperties(PipelineFiltersFilterPropertiesArgs filterProperties) {
            return filterProperties(Output.of(filterProperties));
        }

        /**
         * @param filterVisibility This indicates visibility of filters. By default, everyone can view this filter.
         * 
         * @return builder
         * 
         */
        public Builder filterVisibility(@Nullable Output<String> filterVisibility) {
            $.filterVisibility = filterVisibility;
            return this;
        }

        /**
         * @param filterVisibility This indicates visibility of filters. By default, everyone can view this filter.
         * 
         * @return builder
         * 
         */
        public Builder filterVisibility(String filterVisibility) {
            return filterVisibility(Output.of(filterVisibility));
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param name Name of the pipeline filters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the pipeline filters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId Organization Identifier for the Entity.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Organization Identifier for the Entity.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Project Identifier for the Entity.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project Identifier for the Entity.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param type Type of pipeline filters. Currently supported types are {PipelineSetup, PipelineExecution, Deployment, Template, EnvironmentGroup, Environment}
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of pipeline filters. Currently supported types are {PipelineSetup, PipelineExecution, Deployment, Template, EnvironmentGroup, Environment}
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public PipelineFiltersState build() {
            return $;
        }
    }

}
