// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetInfraModulePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetInfraModulePlainArgs Empty = new GetInfraModulePlainArgs();

    /**
     * Timestamp when the module was created
     * 
     */
    @Import(name="created")
    private @Nullable Integer created;

    /**
     * @return Timestamp when the module was created
     * 
     */
    public Optional<Integer> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * Description of the module
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Description of the module
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Identifier of the module
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return Identifier of the module
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * Name of the module
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Name of the module
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * For account connectors, the repository where the module is stored
     * 
     */
    @Import(name="repository")
    private @Nullable String repository;

    /**
     * @return For account connectors, the repository where the module is stored
     * 
     */
    public Optional<String> repository() {
        return Optional.ofNullable(this.repository);
    }

    /**
     * Repository Branch in which the module should be accessed
     * 
     */
    @Import(name="repositoryBranch")
    private @Nullable String repositoryBranch;

    /**
     * @return Repository Branch in which the module should be accessed
     * 
     */
    public Optional<String> repositoryBranch() {
        return Optional.ofNullable(this.repositoryBranch);
    }

    /**
     * Repository Commit in which the module should be accessed
     * 
     */
    @Import(name="repositoryCommit")
    private @Nullable String repositoryCommit;

    /**
     * @return Repository Commit in which the module should be accessed
     * 
     */
    public Optional<String> repositoryCommit() {
        return Optional.ofNullable(this.repositoryCommit);
    }

    /**
     * Repository Connector is the reference to the connector for the repository
     * 
     */
    @Import(name="repositoryConnector")
    private @Nullable String repositoryConnector;

    /**
     * @return Repository Connector is the reference to the connector for the repository
     * 
     */
    public Optional<String> repositoryConnector() {
        return Optional.ofNullable(this.repositoryConnector);
    }

    /**
     * Repository Path is the path in which the module resides
     * 
     */
    @Import(name="repositoryPath")
    private @Nullable String repositoryPath;

    /**
     * @return Repository Path is the path in which the module resides
     * 
     */
    public Optional<String> repositoryPath() {
        return Optional.ofNullable(this.repositoryPath);
    }

    /**
     * URL where the module is stored
     * 
     */
    @Import(name="repositoryUrl")
    private @Nullable String repositoryUrl;

    /**
     * @return URL where the module is stored
     * 
     */
    public Optional<String> repositoryUrl() {
        return Optional.ofNullable(this.repositoryUrl);
    }

    /**
     * Timestamp when the module was last synced
     * 
     */
    @Import(name="synced")
    private @Nullable Integer synced;

    /**
     * @return Timestamp when the module was last synced
     * 
     */
    public Optional<Integer> synced() {
        return Optional.ofNullable(this.synced);
    }

    /**
     * Provider of the module
     * 
     */
    @Import(name="system", required=true)
    private String system;

    /**
     * @return Provider of the module
     * 
     */
    public String system() {
        return this.system;
    }

    /**
     * Tags associated with the module
     * 
     */
    @Import(name="tags")
    private @Nullable String tags;

    /**
     * @return Tags associated with the module
     * 
     */
    public Optional<String> tags() {
        return Optional.ofNullable(this.tags);
    }

    private GetInfraModulePlainArgs() {}

    private GetInfraModulePlainArgs(GetInfraModulePlainArgs $) {
        this.created = $.created;
        this.description = $.description;
        this.id = $.id;
        this.name = $.name;
        this.repository = $.repository;
        this.repositoryBranch = $.repositoryBranch;
        this.repositoryCommit = $.repositoryCommit;
        this.repositoryConnector = $.repositoryConnector;
        this.repositoryPath = $.repositoryPath;
        this.repositoryUrl = $.repositoryUrl;
        this.synced = $.synced;
        this.system = $.system;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInfraModulePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInfraModulePlainArgs $;

        public Builder() {
            $ = new GetInfraModulePlainArgs();
        }

        public Builder(GetInfraModulePlainArgs defaults) {
            $ = new GetInfraModulePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param created Timestamp when the module was created
         * 
         * @return builder
         * 
         */
        public Builder created(@Nullable Integer created) {
            $.created = created;
            return this;
        }

        /**
         * @param description Description of the module
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param id Identifier of the module
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param name Name of the module
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param repository For account connectors, the repository where the module is stored
         * 
         * @return builder
         * 
         */
        public Builder repository(@Nullable String repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repositoryBranch Repository Branch in which the module should be accessed
         * 
         * @return builder
         * 
         */
        public Builder repositoryBranch(@Nullable String repositoryBranch) {
            $.repositoryBranch = repositoryBranch;
            return this;
        }

        /**
         * @param repositoryCommit Repository Commit in which the module should be accessed
         * 
         * @return builder
         * 
         */
        public Builder repositoryCommit(@Nullable String repositoryCommit) {
            $.repositoryCommit = repositoryCommit;
            return this;
        }

        /**
         * @param repositoryConnector Repository Connector is the reference to the connector for the repository
         * 
         * @return builder
         * 
         */
        public Builder repositoryConnector(@Nullable String repositoryConnector) {
            $.repositoryConnector = repositoryConnector;
            return this;
        }

        /**
         * @param repositoryPath Repository Path is the path in which the module resides
         * 
         * @return builder
         * 
         */
        public Builder repositoryPath(@Nullable String repositoryPath) {
            $.repositoryPath = repositoryPath;
            return this;
        }

        /**
         * @param repositoryUrl URL where the module is stored
         * 
         * @return builder
         * 
         */
        public Builder repositoryUrl(@Nullable String repositoryUrl) {
            $.repositoryUrl = repositoryUrl;
            return this;
        }

        /**
         * @param synced Timestamp when the module was last synced
         * 
         * @return builder
         * 
         */
        public Builder synced(@Nullable Integer synced) {
            $.synced = synced;
            return this;
        }

        /**
         * @param system Provider of the module
         * 
         * @return builder
         * 
         */
        public Builder system(String system) {
            $.system = system;
            return this;
        }

        /**
         * @param tags Tags associated with the module
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable String tags) {
            $.tags = tags;
            return this;
        }

        public GetInfraModulePlainArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetInfraModulePlainArgs", "id");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetInfraModulePlainArgs", "name");
            }
            if ($.system == null) {
                throw new MissingRequiredPropertyException("GetInfraModulePlainArgs", "system");
            }
            return $;
        }
    }

}
