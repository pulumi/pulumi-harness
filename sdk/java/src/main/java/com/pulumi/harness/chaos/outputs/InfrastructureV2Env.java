// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InfrastructureV2Env {
    /**
     * @return Variable name from a ConfigMap or Secret. Required when valueFrom is configMapKeyRef or secretKeyRef.
     * 
     */
    private @Nullable String key;
    /**
     * @return Name of the environment variable. Must be a C_IDENTIFIER.
     * 
     */
    private String name;
    /**
     * @return Variable references $(VAR*NAME) are expanded using the container&#39;s environment. If the variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to &#34;&#34;.
     * 
     */
    private @Nullable String value;
    /**
     * @return Source for the environment variable&#39;s value. Cannot be used if value is not empty.
     * 
     */
    private @Nullable String valueFrom;

    private InfrastructureV2Env() {}
    /**
     * @return Variable name from a ConfigMap or Secret. Required when valueFrom is configMapKeyRef or secretKeyRef.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return Name of the environment variable. Must be a C_IDENTIFIER.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Variable references $(VAR*NAME) are expanded using the container&#39;s environment. If the variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to &#34;&#34;.
     * 
     */
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }
    /**
     * @return Source for the environment variable&#39;s value. Cannot be used if value is not empty.
     * 
     */
    public Optional<String> valueFrom() {
        return Optional.ofNullable(this.valueFrom);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InfrastructureV2Env defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String key;
        private String name;
        private @Nullable String value;
        private @Nullable String valueFrom;
        public Builder() {}
        public Builder(InfrastructureV2Env defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.key = defaults.key;
    	      this.name = defaults.name;
    	      this.value = defaults.value;
    	      this.valueFrom = defaults.valueFrom;
        }

        @CustomType.Setter
        public Builder key(@Nullable String key) {

            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("InfrastructureV2Env", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder value(@Nullable String value) {

            this.value = value;
            return this;
        }
        @CustomType.Setter
        public Builder valueFrom(@Nullable String valueFrom) {

            this.valueFrom = valueFrom;
            return this;
        }
        public InfrastructureV2Env build() {
            final var _resultValue = new InfrastructureV2Env();
            _resultValue.key = key;
            _resultValue.name = name;
            _resultValue.value = value;
            _resultValue.valueFrom = valueFrom;
            return _resultValue;
        }
    }
}
