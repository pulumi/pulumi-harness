// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GetCentralNotificationChannelChannelHeader;
import com.pulumi.harness.platform.inputs.GetCentralNotificationChannelChannelUserGroup;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCentralNotificationChannelChannel extends com.pulumi.resources.InvokeArgs {

    public static final GetCentralNotificationChannelChannel Empty = new GetCentralNotificationChannelChannel();

    /**
     * API key for the webhook or integration.
     * 
     */
    @Import(name="apiKey")
    private @Nullable String apiKey;

    /**
     * @return API key for the webhook or integration.
     * 
     */
    public Optional<String> apiKey() {
        return Optional.ofNullable(this.apiKey);
    }

    /**
     * List of Datadog webhook URLs.
     * 
     */
    @Import(name="datadogUrls")
    private @Nullable List<String> datadogUrls;

    /**
     * @return List of Datadog webhook URLs.
     * 
     */
    public Optional<List<String>> datadogUrls() {
        return Optional.ofNullable(this.datadogUrls);
    }

    /**
     * List of delegate selectors to use for sending notifications.
     * 
     */
    @Import(name="delegateSelectors")
    private @Nullable List<String> delegateSelectors;

    /**
     * @return List of delegate selectors to use for sending notifications.
     * 
     */
    public Optional<List<String>> delegateSelectors() {
        return Optional.ofNullable(this.delegateSelectors);
    }

    /**
     * List of email addresses to notify.
     * 
     */
    @Import(name="emailIds")
    private @Nullable List<String> emailIds;

    /**
     * @return List of email addresses to notify.
     * 
     */
    public Optional<List<String>> emailIds() {
        return Optional.ofNullable(this.emailIds);
    }

    /**
     * Whether to execute the notification logic on delegate.
     * 
     */
    @Import(name="executeOnDelegate")
    private @Nullable Boolean executeOnDelegate;

    /**
     * @return Whether to execute the notification logic on delegate.
     * 
     */
    public Optional<Boolean> executeOnDelegate() {
        return Optional.ofNullable(this.executeOnDelegate);
    }

    /**
     * Custom HTTP headers to include in webhook requests.
     * 
     */
    @Import(name="headers", required=true)
    private List<GetCentralNotificationChannelChannelHeader> headers;

    /**
     * @return Custom HTTP headers to include in webhook requests.
     * 
     */
    public List<GetCentralNotificationChannelChannelHeader> headers() {
        return this.headers;
    }

    /**
     * List of Microsoft Teams integration keys.
     * 
     */
    @Import(name="msTeamKeys")
    private @Nullable List<String> msTeamKeys;

    /**
     * @return List of Microsoft Teams integration keys.
     * 
     */
    public Optional<List<String>> msTeamKeys() {
        return Optional.ofNullable(this.msTeamKeys);
    }

    /**
     * List of PagerDuty integration keys.
     * 
     */
    @Import(name="pagerDutyIntegrationKeys")
    private @Nullable List<String> pagerDutyIntegrationKeys;

    /**
     * @return List of PagerDuty integration keys.
     * 
     */
    public Optional<List<String>> pagerDutyIntegrationKeys() {
        return Optional.ofNullable(this.pagerDutyIntegrationKeys);
    }

    /**
     * List of Slack webhook URLs to send notifications to.
     * 
     */
    @Import(name="slackWebhookUrls")
    private @Nullable List<String> slackWebhookUrls;

    /**
     * @return List of Slack webhook URLs to send notifications to.
     * 
     */
    public Optional<List<String>> slackWebhookUrls() {
        return Optional.ofNullable(this.slackWebhookUrls);
    }

    /**
     * List of user groups to notify.
     * 
     */
    @Import(name="userGroups")
    private @Nullable List<GetCentralNotificationChannelChannelUserGroup> userGroups;

    /**
     * @return List of user groups to notify.
     * 
     */
    public Optional<List<GetCentralNotificationChannelChannelUserGroup>> userGroups() {
        return Optional.ofNullable(this.userGroups);
    }

    /**
     * List of generic webhook URLs.
     * 
     */
    @Import(name="webhookUrls")
    private @Nullable List<String> webhookUrls;

    /**
     * @return List of generic webhook URLs.
     * 
     */
    public Optional<List<String>> webhookUrls() {
        return Optional.ofNullable(this.webhookUrls);
    }

    private GetCentralNotificationChannelChannel() {}

    private GetCentralNotificationChannelChannel(GetCentralNotificationChannelChannel $) {
        this.apiKey = $.apiKey;
        this.datadogUrls = $.datadogUrls;
        this.delegateSelectors = $.delegateSelectors;
        this.emailIds = $.emailIds;
        this.executeOnDelegate = $.executeOnDelegate;
        this.headers = $.headers;
        this.msTeamKeys = $.msTeamKeys;
        this.pagerDutyIntegrationKeys = $.pagerDutyIntegrationKeys;
        this.slackWebhookUrls = $.slackWebhookUrls;
        this.userGroups = $.userGroups;
        this.webhookUrls = $.webhookUrls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCentralNotificationChannelChannel defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCentralNotificationChannelChannel $;

        public Builder() {
            $ = new GetCentralNotificationChannelChannel();
        }

        public Builder(GetCentralNotificationChannelChannel defaults) {
            $ = new GetCentralNotificationChannelChannel(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKey API key for the webhook or integration.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(@Nullable String apiKey) {
            $.apiKey = apiKey;
            return this;
        }

        /**
         * @param datadogUrls List of Datadog webhook URLs.
         * 
         * @return builder
         * 
         */
        public Builder datadogUrls(@Nullable List<String> datadogUrls) {
            $.datadogUrls = datadogUrls;
            return this;
        }

        /**
         * @param datadogUrls List of Datadog webhook URLs.
         * 
         * @return builder
         * 
         */
        public Builder datadogUrls(String... datadogUrls) {
            return datadogUrls(List.of(datadogUrls));
        }

        /**
         * @param delegateSelectors List of delegate selectors to use for sending notifications.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(@Nullable List<String> delegateSelectors) {
            $.delegateSelectors = delegateSelectors;
            return this;
        }

        /**
         * @param delegateSelectors List of delegate selectors to use for sending notifications.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(String... delegateSelectors) {
            return delegateSelectors(List.of(delegateSelectors));
        }

        /**
         * @param emailIds List of email addresses to notify.
         * 
         * @return builder
         * 
         */
        public Builder emailIds(@Nullable List<String> emailIds) {
            $.emailIds = emailIds;
            return this;
        }

        /**
         * @param emailIds List of email addresses to notify.
         * 
         * @return builder
         * 
         */
        public Builder emailIds(String... emailIds) {
            return emailIds(List.of(emailIds));
        }

        /**
         * @param executeOnDelegate Whether to execute the notification logic on delegate.
         * 
         * @return builder
         * 
         */
        public Builder executeOnDelegate(@Nullable Boolean executeOnDelegate) {
            $.executeOnDelegate = executeOnDelegate;
            return this;
        }

        /**
         * @param headers Custom HTTP headers to include in webhook requests.
         * 
         * @return builder
         * 
         */
        public Builder headers(List<GetCentralNotificationChannelChannelHeader> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers Custom HTTP headers to include in webhook requests.
         * 
         * @return builder
         * 
         */
        public Builder headers(GetCentralNotificationChannelChannelHeader... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param msTeamKeys List of Microsoft Teams integration keys.
         * 
         * @return builder
         * 
         */
        public Builder msTeamKeys(@Nullable List<String> msTeamKeys) {
            $.msTeamKeys = msTeamKeys;
            return this;
        }

        /**
         * @param msTeamKeys List of Microsoft Teams integration keys.
         * 
         * @return builder
         * 
         */
        public Builder msTeamKeys(String... msTeamKeys) {
            return msTeamKeys(List.of(msTeamKeys));
        }

        /**
         * @param pagerDutyIntegrationKeys List of PagerDuty integration keys.
         * 
         * @return builder
         * 
         */
        public Builder pagerDutyIntegrationKeys(@Nullable List<String> pagerDutyIntegrationKeys) {
            $.pagerDutyIntegrationKeys = pagerDutyIntegrationKeys;
            return this;
        }

        /**
         * @param pagerDutyIntegrationKeys List of PagerDuty integration keys.
         * 
         * @return builder
         * 
         */
        public Builder pagerDutyIntegrationKeys(String... pagerDutyIntegrationKeys) {
            return pagerDutyIntegrationKeys(List.of(pagerDutyIntegrationKeys));
        }

        /**
         * @param slackWebhookUrls List of Slack webhook URLs to send notifications to.
         * 
         * @return builder
         * 
         */
        public Builder slackWebhookUrls(@Nullable List<String> slackWebhookUrls) {
            $.slackWebhookUrls = slackWebhookUrls;
            return this;
        }

        /**
         * @param slackWebhookUrls List of Slack webhook URLs to send notifications to.
         * 
         * @return builder
         * 
         */
        public Builder slackWebhookUrls(String... slackWebhookUrls) {
            return slackWebhookUrls(List.of(slackWebhookUrls));
        }

        /**
         * @param userGroups List of user groups to notify.
         * 
         * @return builder
         * 
         */
        public Builder userGroups(@Nullable List<GetCentralNotificationChannelChannelUserGroup> userGroups) {
            $.userGroups = userGroups;
            return this;
        }

        /**
         * @param userGroups List of user groups to notify.
         * 
         * @return builder
         * 
         */
        public Builder userGroups(GetCentralNotificationChannelChannelUserGroup... userGroups) {
            return userGroups(List.of(userGroups));
        }

        /**
         * @param webhookUrls List of generic webhook URLs.
         * 
         * @return builder
         * 
         */
        public Builder webhookUrls(@Nullable List<String> webhookUrls) {
            $.webhookUrls = webhookUrls;
            return this;
        }

        /**
         * @param webhookUrls List of generic webhook URLs.
         * 
         * @return builder
         * 
         */
        public Builder webhookUrls(String... webhookUrls) {
            return webhookUrls(List.of(webhookUrls));
        }

        public GetCentralNotificationChannelChannel build() {
            if ($.headers == null) {
                throw new MissingRequiredPropertyException("GetCentralNotificationChannelChannel", "headers");
            }
            return $;
        }
    }

}
