// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.chaos.outputs.GetImageRegistryCustomImage;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetImageRegistryResult {
    /**
     * @return Whether to check if override is allowed
     * 
     */
    private @Nullable Boolean checkOverride;
    /**
     * @return Creation timestamp
     * 
     */
    private String createdAt;
    /**
     * @return Custom images configuration
     * 
     */
    private List<GetImageRegistryCustomImage> customImages;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The infrastructure ID to set up the image registry
     * 
     */
    private @Nullable String infraId;
    /**
     * @return Whether this is the default registry
     * 
     */
    private Boolean isDefault;
    /**
     * @return Whether override is allowed for this registry
     * 
     */
    private Boolean isOverrideAllowed;
    /**
     * @return Whether the registry is private
     * 
     */
    private Boolean isPrivate;
    /**
     * @return The organization ID of the image registry
     * 
     */
    private @Nullable String orgId;
    /**
     * @return Indicates if override is blocked by scope (only populated if check_override is true)
     * 
     */
    private String overrideBlockedByScope;
    /**
     * @return The project ID of the image registry
     * 
     */
    private @Nullable String projectId;
    /**
     * @return The registry account name
     * 
     */
    private String registryAccount;
    /**
     * @return The registry server URL
     * 
     */
    private String registryServer;
    /**
     * @return The name of the secret for authentication
     * 
     */
    private String secretName;
    /**
     * @return Last update timestamp
     * 
     */
    private String updatedAt;
    /**
     * @return Whether custom images are used
     * 
     */
    private Boolean useCustomImages;

    private GetImageRegistryResult() {}
    /**
     * @return Whether to check if override is allowed
     * 
     */
    public Optional<Boolean> checkOverride() {
        return Optional.ofNullable(this.checkOverride);
    }
    /**
     * @return Creation timestamp
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Custom images configuration
     * 
     */
    public List<GetImageRegistryCustomImage> customImages() {
        return this.customImages;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The infrastructure ID to set up the image registry
     * 
     */
    public Optional<String> infraId() {
        return Optional.ofNullable(this.infraId);
    }
    /**
     * @return Whether this is the default registry
     * 
     */
    public Boolean isDefault() {
        return this.isDefault;
    }
    /**
     * @return Whether override is allowed for this registry
     * 
     */
    public Boolean isOverrideAllowed() {
        return this.isOverrideAllowed;
    }
    /**
     * @return Whether the registry is private
     * 
     */
    public Boolean isPrivate() {
        return this.isPrivate;
    }
    /**
     * @return The organization ID of the image registry
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }
    /**
     * @return Indicates if override is blocked by scope (only populated if check_override is true)
     * 
     */
    public String overrideBlockedByScope() {
        return this.overrideBlockedByScope;
    }
    /**
     * @return The project ID of the image registry
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return The registry account name
     * 
     */
    public String registryAccount() {
        return this.registryAccount;
    }
    /**
     * @return The registry server URL
     * 
     */
    public String registryServer() {
        return this.registryServer;
    }
    /**
     * @return The name of the secret for authentication
     * 
     */
    public String secretName() {
        return this.secretName;
    }
    /**
     * @return Last update timestamp
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }
    /**
     * @return Whether custom images are used
     * 
     */
    public Boolean useCustomImages() {
        return this.useCustomImages;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImageRegistryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean checkOverride;
        private String createdAt;
        private List<GetImageRegistryCustomImage> customImages;
        private String id;
        private @Nullable String infraId;
        private Boolean isDefault;
        private Boolean isOverrideAllowed;
        private Boolean isPrivate;
        private @Nullable String orgId;
        private String overrideBlockedByScope;
        private @Nullable String projectId;
        private String registryAccount;
        private String registryServer;
        private String secretName;
        private String updatedAt;
        private Boolean useCustomImages;
        public Builder() {}
        public Builder(GetImageRegistryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.checkOverride = defaults.checkOverride;
    	      this.createdAt = defaults.createdAt;
    	      this.customImages = defaults.customImages;
    	      this.id = defaults.id;
    	      this.infraId = defaults.infraId;
    	      this.isDefault = defaults.isDefault;
    	      this.isOverrideAllowed = defaults.isOverrideAllowed;
    	      this.isPrivate = defaults.isPrivate;
    	      this.orgId = defaults.orgId;
    	      this.overrideBlockedByScope = defaults.overrideBlockedByScope;
    	      this.projectId = defaults.projectId;
    	      this.registryAccount = defaults.registryAccount;
    	      this.registryServer = defaults.registryServer;
    	      this.secretName = defaults.secretName;
    	      this.updatedAt = defaults.updatedAt;
    	      this.useCustomImages = defaults.useCustomImages;
        }

        @CustomType.Setter
        public Builder checkOverride(@Nullable Boolean checkOverride) {

            this.checkOverride = checkOverride;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetImageRegistryResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder customImages(List<GetImageRegistryCustomImage> customImages) {
            if (customImages == null) {
              throw new MissingRequiredPropertyException("GetImageRegistryResult", "customImages");
            }
            this.customImages = customImages;
            return this;
        }
        public Builder customImages(GetImageRegistryCustomImage... customImages) {
            return customImages(List.of(customImages));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetImageRegistryResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder infraId(@Nullable String infraId) {

            this.infraId = infraId;
            return this;
        }
        @CustomType.Setter
        public Builder isDefault(Boolean isDefault) {
            if (isDefault == null) {
              throw new MissingRequiredPropertyException("GetImageRegistryResult", "isDefault");
            }
            this.isDefault = isDefault;
            return this;
        }
        @CustomType.Setter
        public Builder isOverrideAllowed(Boolean isOverrideAllowed) {
            if (isOverrideAllowed == null) {
              throw new MissingRequiredPropertyException("GetImageRegistryResult", "isOverrideAllowed");
            }
            this.isOverrideAllowed = isOverrideAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder isPrivate(Boolean isPrivate) {
            if (isPrivate == null) {
              throw new MissingRequiredPropertyException("GetImageRegistryResult", "isPrivate");
            }
            this.isPrivate = isPrivate;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(@Nullable String orgId) {

            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder overrideBlockedByScope(String overrideBlockedByScope) {
            if (overrideBlockedByScope == null) {
              throw new MissingRequiredPropertyException("GetImageRegistryResult", "overrideBlockedByScope");
            }
            this.overrideBlockedByScope = overrideBlockedByScope;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder registryAccount(String registryAccount) {
            if (registryAccount == null) {
              throw new MissingRequiredPropertyException("GetImageRegistryResult", "registryAccount");
            }
            this.registryAccount = registryAccount;
            return this;
        }
        @CustomType.Setter
        public Builder registryServer(String registryServer) {
            if (registryServer == null) {
              throw new MissingRequiredPropertyException("GetImageRegistryResult", "registryServer");
            }
            this.registryServer = registryServer;
            return this;
        }
        @CustomType.Setter
        public Builder secretName(String secretName) {
            if (secretName == null) {
              throw new MissingRequiredPropertyException("GetImageRegistryResult", "secretName");
            }
            this.secretName = secretName;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetImageRegistryResult", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder useCustomImages(Boolean useCustomImages) {
            if (useCustomImages == null) {
              throw new MissingRequiredPropertyException("GetImageRegistryResult", "useCustomImages");
            }
            this.useCustomImages = useCustomImages;
            return this;
        }
        public GetImageRegistryResult build() {
            final var _resultValue = new GetImageRegistryResult();
            _resultValue.checkOverride = checkOverride;
            _resultValue.createdAt = createdAt;
            _resultValue.customImages = customImages;
            _resultValue.id = id;
            _resultValue.infraId = infraId;
            _resultValue.isDefault = isDefault;
            _resultValue.isOverrideAllowed = isOverrideAllowed;
            _resultValue.isPrivate = isPrivate;
            _resultValue.orgId = orgId;
            _resultValue.overrideBlockedByScope = overrideBlockedByScope;
            _resultValue.projectId = projectId;
            _resultValue.registryAccount = registryAccount;
            _resultValue.registryServer = registryServer;
            _resultValue.secretName = secretName;
            _resultValue.updatedAt = updatedAt;
            _resultValue.useCustomImages = useCustomImages;
            return _resultValue;
        }
    }
}
