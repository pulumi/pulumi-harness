// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GitOpsRepositoryEcrGenJwtAuthArgs;
import com.pulumi.harness.platform.inputs.GitOpsRepositoryEcrGenSecretRefArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitOpsRepositoryEcrGenArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitOpsRepositoryEcrGenArgs Empty = new GitOpsRepositoryEcrGenArgs();

    /**
     * JWT authentication specific configuration.
     * 
     */
    @Import(name="jwtAuth")
    private @Nullable Output<GitOpsRepositoryEcrGenJwtAuthArgs> jwtAuth;

    /**
     * @return JWT authentication specific configuration.
     * 
     */
    public Optional<Output<GitOpsRepositoryEcrGenJwtAuthArgs>> jwtAuth() {
        return Optional.ofNullable(this.jwtAuth);
    }

    /**
     * AWS region.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return AWS region.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Secret reference to the AWS credentials.
     * 
     */
    @Import(name="secretRef")
    private @Nullable Output<GitOpsRepositoryEcrGenSecretRefArgs> secretRef;

    /**
     * @return Secret reference to the AWS credentials.
     * 
     */
    public Optional<Output<GitOpsRepositoryEcrGenSecretRefArgs>> secretRef() {
        return Optional.ofNullable(this.secretRef);
    }

    private GitOpsRepositoryEcrGenArgs() {}

    private GitOpsRepositoryEcrGenArgs(GitOpsRepositoryEcrGenArgs $) {
        this.jwtAuth = $.jwtAuth;
        this.region = $.region;
        this.secretRef = $.secretRef;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitOpsRepositoryEcrGenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitOpsRepositoryEcrGenArgs $;

        public Builder() {
            $ = new GitOpsRepositoryEcrGenArgs();
        }

        public Builder(GitOpsRepositoryEcrGenArgs defaults) {
            $ = new GitOpsRepositoryEcrGenArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param jwtAuth JWT authentication specific configuration.
         * 
         * @return builder
         * 
         */
        public Builder jwtAuth(@Nullable Output<GitOpsRepositoryEcrGenJwtAuthArgs> jwtAuth) {
            $.jwtAuth = jwtAuth;
            return this;
        }

        /**
         * @param jwtAuth JWT authentication specific configuration.
         * 
         * @return builder
         * 
         */
        public Builder jwtAuth(GitOpsRepositoryEcrGenJwtAuthArgs jwtAuth) {
            return jwtAuth(Output.of(jwtAuth));
        }

        /**
         * @param region AWS region.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region AWS region.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param secretRef Secret reference to the AWS credentials.
         * 
         * @return builder
         * 
         */
        public Builder secretRef(@Nullable Output<GitOpsRepositoryEcrGenSecretRefArgs> secretRef) {
            $.secretRef = secretRef;
            return this;
        }

        /**
         * @param secretRef Secret reference to the AWS credentials.
         * 
         * @return builder
         * 
         */
        public Builder secretRef(GitOpsRepositoryEcrGenSecretRefArgs secretRef) {
            return secretRef(Output.of(secretRef));
        }

        public GitOpsRepositoryEcrGenArgs build() {
            return $;
        }
    }

}
