// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.GitopsFiltersArgs;
import com.pulumi.harness.platform.inputs.GitopsFiltersState;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for creating and managing Harness GitOps Filters.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.platform.GitopsFilters;
 * import com.pulumi.harness.platform.GitopsFiltersArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new GitopsFilters("example", GitopsFiltersArgs.builder()
 *             .name("example_filter")
 *             .orgId("your_org_id")
 *             .projectId("your_project_id")
 *             .identifier("example_filter")
 *             .type("APPLICATION")
 *             .filterProperties(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("agentIdentifiers", jsonArray("your_agent_identifier")),
 *                     jsonProperty("clusters", jsonArray("https://your-cluster-url")),
 *                     jsonProperty("healthStatus", jsonArray(
 *                         "Unknown", 
 *                         "Progressing", 
 *                         "Suspended", 
 *                         "Healthy", 
 *                         "Degraded", 
 *                         "Missing"
 *                     )),
 *                     jsonProperty("namespaces", jsonArray("your-namespace")),
 *                     jsonProperty("repositories", jsonArray("your-repo")),
 *                     jsonProperty("syncStatus", jsonArray(
 *                         "OutOfSync", 
 *                         "Synced", 
 *                         "Unknown"
 *                     ))
 *                 )))
 *             .filterVisibility("OnlyCreator")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Filter Properties Reference
 * 
 * The `filter_properties` field supports the following filter types:
 * 
 * &gt; **Note:** The following filter properties are only valid for filter type &#34;APPLICATION&#34;. Different filter types may support different properties.
 * 
 * * `agentIdentifiers` - Array of GitOps agent identifiers to filter by.
 * * `clusters` - Array of cluster URLs to filter by.
 * * `healthStatus` - Array of health status values to filter by. Valid values include: &#34;Unknown&#34;, &#34;Progressing&#34;, &#34;Suspended&#34;, &#34;Healthy&#34;, &#34;Degraded&#34;, &#34;Missing&#34;.
 * * `namespaces` - Array of Kubernetes namespaces to filter by.
 * * `repositories` - Array of Git repository URLs to filter by.
 * * `syncStatus` - Array of sync status values to filter by. Valid values include: &#34;OutOfSync&#34;, &#34;Synced&#34;, &#34;Unknown&#34;.
 * 
 * ## Schema Attributes Reference
 * 
 * * `id` - Identifier of the GitOps filter.
 * 
 * ## Import
 * 
 * GitOps filters can be imported using a composite ID formed of organization ID, project ID, filter ID, and filter type.
 * 
 * bash
 * 
 * Format: &lt;org_id&gt;/&lt;project_id&gt;/&lt;filter_id&gt;/&lt;filter_type&gt;
 * 
 * ```sh
 * $ pulumi import harness:platform/gitopsFilters:GitopsFilters example org_id/project_id/filter_id/APPLICATION
 * ```
 * 
 */
@ResourceType(type="harness:platform/gitopsFilters:GitopsFilters")
public class GitopsFilters extends com.pulumi.resources.CustomResource {
    /**
     * Properties of the filter entity defined in Harness as a JSON string. All values should be arrays of strings. Example: `jsonencode({&#34;healthStatus&#34;: [&#34;Healthy&#34;, &#34;Degraded&#34;], &#34;syncStatus&#34;: [&#34;Synced&#34;]})`.
     * 
     */
    @Export(name="filterProperties", refs={String.class}, tree="[0]")
    private Output<String> filterProperties;

    /**
     * @return Properties of the filter entity defined in Harness as a JSON string. All values should be arrays of strings. Example: `jsonencode({&#34;healthStatus&#34;: [&#34;Healthy&#34;, &#34;Degraded&#34;], &#34;syncStatus&#34;: [&#34;Synced&#34;]})`.
     * 
     */
    public Output<String> filterProperties() {
        return this.filterProperties;
    }
    /**
     * Visibility of the filter. Valid values are &#34;EveryOne&#34; and &#34;OnlyCreator&#34;. Default is &#34;EveryOne&#34;.
     * 
     */
    @Export(name="filterVisibility", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> filterVisibility;

    /**
     * @return Visibility of the filter. Valid values are &#34;EveryOne&#34; and &#34;OnlyCreator&#34;. Default is &#34;EveryOne&#34;.
     * 
     */
    public Output<Optional<String>> filterVisibility() {
        return Codegen.optional(this.filterVisibility);
    }
    /**
     * Unique identifier of the GitOps filter.
     * 
     */
    @Export(name="identifier", refs={String.class}, tree="[0]")
    private Output<String> identifier;

    /**
     * @return Unique identifier of the GitOps filter.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }
    /**
     * Name of the GitOps filter.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the GitOps filter.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Organization identifier for the GitOps filter.
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output<String> orgId;

    /**
     * @return Organization identifier for the GitOps filter.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }
    /**
     * Project identifier for the GitOps filter.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return Project identifier for the GitOps filter.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * Type of GitOps filter. Currently, only &#34;APPLICATION&#34; is supported.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Type of GitOps filter. Currently, only &#34;APPLICATION&#34; is supported.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GitopsFilters(java.lang.String name) {
        this(name, GitopsFiltersArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GitopsFilters(java.lang.String name, GitopsFiltersArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GitopsFilters(java.lang.String name, GitopsFiltersArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/gitopsFilters:GitopsFilters", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private GitopsFilters(java.lang.String name, Output<java.lang.String> id, @Nullable GitopsFiltersState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/gitopsFilters:GitopsFilters", name, state, makeResourceOptions(options, id), false);
    }

    private static GitopsFiltersArgs makeArgs(GitopsFiltersArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? GitopsFiltersArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GitopsFilters get(java.lang.String name, Output<java.lang.String> id, @Nullable GitopsFiltersState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GitopsFilters(name, id, state, options);
    }
}
