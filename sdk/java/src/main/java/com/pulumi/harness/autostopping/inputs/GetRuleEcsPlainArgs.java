// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.autostopping.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.autostopping.inputs.GetRuleEcsContainer;
import com.pulumi.harness.autostopping.inputs.GetRuleEcsDepend;
import com.pulumi.harness.autostopping.inputs.GetRuleEcsHttp;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRuleEcsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRuleEcsPlainArgs Empty = new GetRuleEcsPlainArgs();

    /**
     * Id of the cloud connector
     * 
     */
    @Import(name="cloudConnectorId", required=true)
    private String cloudConnectorId;

    /**
     * @return Id of the cloud connector
     * 
     */
    public String cloudConnectorId() {
        return this.cloudConnectorId;
    }

    @Import(name="container")
    private @Nullable GetRuleEcsContainer container;

    public Optional<GetRuleEcsContainer> container() {
        return Optional.ofNullable(this.container);
    }

    /**
     * Custom URLs used to access the instances
     * 
     */
    @Import(name="customDomains")
    private @Nullable List<String> customDomains;

    /**
     * @return Custom URLs used to access the instances
     * 
     */
    public Optional<List<String>> customDomains() {
        return Optional.ofNullable(this.customDomains);
    }

    /**
     * Dependent rules
     * 
     */
    @Import(name="depends")
    private @Nullable List<GetRuleEcsDepend> depends;

    /**
     * @return Dependent rules
     * 
     */
    public Optional<List<GetRuleEcsDepend>> depends() {
        return Optional.ofNullable(this.depends);
    }

    /**
     * Http routing configuration
     * 
     */
    @Import(name="https")
    private @Nullable List<GetRuleEcsHttp> https;

    /**
     * @return Http routing configuration
     * 
     */
    public Optional<List<GetRuleEcsHttp>> https() {
        return Optional.ofNullable(this.https);
    }

    /**
     * Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
     * 
     */
    @Import(name="idleTimeMins")
    private @Nullable Integer idleTimeMins;

    /**
     * @return Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
     * 
     */
    public Optional<Integer> idleTimeMins() {
        return Optional.ofNullable(this.idleTimeMins);
    }

    /**
     * Name of the rule
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Name of the rule
     * 
     */
    public String name() {
        return this.name;
    }

    private GetRuleEcsPlainArgs() {}

    private GetRuleEcsPlainArgs(GetRuleEcsPlainArgs $) {
        this.cloudConnectorId = $.cloudConnectorId;
        this.container = $.container;
        this.customDomains = $.customDomains;
        this.depends = $.depends;
        this.https = $.https;
        this.idleTimeMins = $.idleTimeMins;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRuleEcsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRuleEcsPlainArgs $;

        public Builder() {
            $ = new GetRuleEcsPlainArgs();
        }

        public Builder(GetRuleEcsPlainArgs defaults) {
            $ = new GetRuleEcsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudConnectorId Id of the cloud connector
         * 
         * @return builder
         * 
         */
        public Builder cloudConnectorId(String cloudConnectorId) {
            $.cloudConnectorId = cloudConnectorId;
            return this;
        }

        public Builder container(@Nullable GetRuleEcsContainer container) {
            $.container = container;
            return this;
        }

        /**
         * @param customDomains Custom URLs used to access the instances
         * 
         * @return builder
         * 
         */
        public Builder customDomains(@Nullable List<String> customDomains) {
            $.customDomains = customDomains;
            return this;
        }

        /**
         * @param customDomains Custom URLs used to access the instances
         * 
         * @return builder
         * 
         */
        public Builder customDomains(String... customDomains) {
            return customDomains(List.of(customDomains));
        }

        /**
         * @param depends Dependent rules
         * 
         * @return builder
         * 
         */
        public Builder depends(@Nullable List<GetRuleEcsDepend> depends) {
            $.depends = depends;
            return this;
        }

        /**
         * @param depends Dependent rules
         * 
         * @return builder
         * 
         */
        public Builder depends(GetRuleEcsDepend... depends) {
            return depends(List.of(depends));
        }

        /**
         * @param https Http routing configuration
         * 
         * @return builder
         * 
         */
        public Builder https(@Nullable List<GetRuleEcsHttp> https) {
            $.https = https;
            return this;
        }

        /**
         * @param https Http routing configuration
         * 
         * @return builder
         * 
         */
        public Builder https(GetRuleEcsHttp... https) {
            return https(List.of(https));
        }

        /**
         * @param idleTimeMins Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
         * 
         * @return builder
         * 
         */
        public Builder idleTimeMins(@Nullable Integer idleTimeMins) {
            $.idleTimeMins = idleTimeMins;
            return this;
        }

        /**
         * @param name Name of the rule
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public GetRuleEcsPlainArgs build() {
            if ($.cloudConnectorId == null) {
                throw new MissingRequiredPropertyException("GetRuleEcsPlainArgs", "cloudConnectorId");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetRuleEcsPlainArgs", "name");
            }
            return $;
        }
    }

}
