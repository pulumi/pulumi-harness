// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class FeatureFlagVariationArgs extends com.pulumi.resources.ResourceArgs {

    public static final FeatureFlagVariationArgs Empty = new FeatureFlagVariationArgs();

    /**
     * The description of the variation
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the variation
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The identifier of the variation
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return The identifier of the variation
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * The user friendly name of the variation
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The user friendly name of the variation
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The value of the variation
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return The value of the variation
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private FeatureFlagVariationArgs() {}

    private FeatureFlagVariationArgs(FeatureFlagVariationArgs $) {
        this.description = $.description;
        this.identifier = $.identifier;
        this.name = $.name;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FeatureFlagVariationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FeatureFlagVariationArgs $;

        public Builder() {
            $ = new FeatureFlagVariationArgs();
        }

        public Builder(FeatureFlagVariationArgs defaults) {
            $ = new FeatureFlagVariationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the variation
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the variation
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param identifier The identifier of the variation
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier The identifier of the variation
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param name The user friendly name of the variation
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The user friendly name of the variation
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param value The value of the variation
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The value of the variation
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public FeatureFlagVariationArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("FeatureFlagVariationArgs", "description");
            }
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("FeatureFlagVariationArgs", "identifier");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("FeatureFlagVariationArgs", "name");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("FeatureFlagVariationArgs", "value");
            }
            return $;
        }
    }

}
