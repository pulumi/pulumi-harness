// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.InputSetGitDetailsArgs;
import com.pulumi.harness.platform.inputs.InputSetGitImportInfoArgs;
import com.pulumi.harness.platform.inputs.InputSetInputSetImportRequestArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InputSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final InputSetArgs Empty = new InputSetArgs();

    /**
     * Description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Contains parameters related to creating an Entity for Git Experience.
     * 
     */
    @Import(name="gitDetails")
    private @Nullable Output<InputSetGitDetailsArgs> gitDetails;

    /**
     * @return Contains parameters related to creating an Entity for Git Experience.
     * 
     */
    public Optional<Output<InputSetGitDetailsArgs>> gitDetails() {
        return Optional.ofNullable(this.gitDetails);
    }

    /**
     * Contains Git Information for importing entities from Git
     * 
     */
    @Import(name="gitImportInfo")
    private @Nullable Output<InputSetGitImportInfoArgs> gitImportInfo;

    /**
     * @return Contains Git Information for importing entities from Git
     * 
     */
    public Optional<Output<InputSetGitImportInfoArgs>> gitImportInfo() {
        return Optional.ofNullable(this.gitImportInfo);
    }

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * Flag to set if importing from Git
     * 
     */
    @Import(name="importFromGit")
    private @Nullable Output<Boolean> importFromGit;

    /**
     * @return Flag to set if importing from Git
     * 
     */
    public Optional<Output<Boolean>> importFromGit() {
        return Optional.ofNullable(this.importFromGit);
    }

    /**
     * Contains parameters for importing a input set
     * 
     */
    @Import(name="inputSetImportRequest")
    private @Nullable Output<InputSetInputSetImportRequestArgs> inputSetImportRequest;

    /**
     * @return Contains parameters for importing a input set
     * 
     */
    public Optional<Output<InputSetInputSetImportRequestArgs>> inputSetImportRequest() {
        return Optional.ofNullable(this.inputSetImportRequest);
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId", required=true)
    private Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * Identifier of the pipeline
     * 
     */
    @Import(name="pipelineId", required=true)
    private Output<String> pipelineId;

    /**
     * @return Identifier of the pipeline
     * 
     */
    public Output<String> pipelineId() {
        return this.pipelineId;
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Tags to associate with the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags to associate with the resource.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Input Set YAML. In YAML, to reference an entity at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference an entity at the account scope, prefix &#39;account` to the expression: account.{identifier}. For eg, to reference a connector with identifier &#39;connectorId&#39; at the organization scope in a stage mention it as connectorRef: org.connectorId.
     * 
     */
    @Import(name="yaml")
    private @Nullable Output<String> yaml;

    /**
     * @return Input Set YAML. In YAML, to reference an entity at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference an entity at the account scope, prefix &#39;account` to the expression: account.{identifier}. For eg, to reference a connector with identifier &#39;connectorId&#39; at the organization scope in a stage mention it as connectorRef: org.connectorId.
     * 
     */
    public Optional<Output<String>> yaml() {
        return Optional.ofNullable(this.yaml);
    }

    private InputSetArgs() {}

    private InputSetArgs(InputSetArgs $) {
        this.description = $.description;
        this.gitDetails = $.gitDetails;
        this.gitImportInfo = $.gitImportInfo;
        this.identifier = $.identifier;
        this.importFromGit = $.importFromGit;
        this.inputSetImportRequest = $.inputSetImportRequest;
        this.name = $.name;
        this.orgId = $.orgId;
        this.pipelineId = $.pipelineId;
        this.projectId = $.projectId;
        this.tags = $.tags;
        this.yaml = $.yaml;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InputSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InputSetArgs $;

        public Builder() {
            $ = new InputSetArgs();
        }

        public Builder(InputSetArgs defaults) {
            $ = new InputSetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param gitDetails Contains parameters related to creating an Entity for Git Experience.
         * 
         * @return builder
         * 
         */
        public Builder gitDetails(@Nullable Output<InputSetGitDetailsArgs> gitDetails) {
            $.gitDetails = gitDetails;
            return this;
        }

        /**
         * @param gitDetails Contains parameters related to creating an Entity for Git Experience.
         * 
         * @return builder
         * 
         */
        public Builder gitDetails(InputSetGitDetailsArgs gitDetails) {
            return gitDetails(Output.of(gitDetails));
        }

        /**
         * @param gitImportInfo Contains Git Information for importing entities from Git
         * 
         * @return builder
         * 
         */
        public Builder gitImportInfo(@Nullable Output<InputSetGitImportInfoArgs> gitImportInfo) {
            $.gitImportInfo = gitImportInfo;
            return this;
        }

        /**
         * @param gitImportInfo Contains Git Information for importing entities from Git
         * 
         * @return builder
         * 
         */
        public Builder gitImportInfo(InputSetGitImportInfoArgs gitImportInfo) {
            return gitImportInfo(Output.of(gitImportInfo));
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param importFromGit Flag to set if importing from Git
         * 
         * @return builder
         * 
         */
        public Builder importFromGit(@Nullable Output<Boolean> importFromGit) {
            $.importFromGit = importFromGit;
            return this;
        }

        /**
         * @param importFromGit Flag to set if importing from Git
         * 
         * @return builder
         * 
         */
        public Builder importFromGit(Boolean importFromGit) {
            return importFromGit(Output.of(importFromGit));
        }

        /**
         * @param inputSetImportRequest Contains parameters for importing a input set
         * 
         * @return builder
         * 
         */
        public Builder inputSetImportRequest(@Nullable Output<InputSetInputSetImportRequestArgs> inputSetImportRequest) {
            $.inputSetImportRequest = inputSetImportRequest;
            return this;
        }

        /**
         * @param inputSetImportRequest Contains parameters for importing a input set
         * 
         * @return builder
         * 
         */
        public Builder inputSetImportRequest(InputSetInputSetImportRequestArgs inputSetImportRequest) {
            return inputSetImportRequest(Output.of(inputSetImportRequest));
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param pipelineId Identifier of the pipeline
         * 
         * @return builder
         * 
         */
        public Builder pipelineId(Output<String> pipelineId) {
            $.pipelineId = pipelineId;
            return this;
        }

        /**
         * @param pipelineId Identifier of the pipeline
         * 
         * @return builder
         * 
         */
        public Builder pipelineId(String pipelineId) {
            return pipelineId(Output.of(pipelineId));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param yaml Input Set YAML. In YAML, to reference an entity at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference an entity at the account scope, prefix &#39;account` to the expression: account.{identifier}. For eg, to reference a connector with identifier &#39;connectorId&#39; at the organization scope in a stage mention it as connectorRef: org.connectorId.
         * 
         * @return builder
         * 
         */
        public Builder yaml(@Nullable Output<String> yaml) {
            $.yaml = yaml;
            return this;
        }

        /**
         * @param yaml Input Set YAML. In YAML, to reference an entity at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference an entity at the account scope, prefix &#39;account` to the expression: account.{identifier}. For eg, to reference a connector with identifier &#39;connectorId&#39; at the organization scope in a stage mention it as connectorRef: org.connectorId.
         * 
         * @return builder
         * 
         */
        public Builder yaml(String yaml) {
            return yaml(Output.of(yaml));
        }

        public InputSetArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("InputSetArgs", "identifier");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("InputSetArgs", "orgId");
            }
            if ($.pipelineId == null) {
                throw new MissingRequiredPropertyException("InputSetArgs", "pipelineId");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("InputSetArgs", "projectId");
            }
            return $;
        }
    }

}
