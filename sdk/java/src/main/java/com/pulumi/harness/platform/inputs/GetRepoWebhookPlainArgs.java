// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRepoWebhookPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepoWebhookPlainArgs Empty = new GetRepoWebhookPlainArgs();

    /**
     * Description of the webhook.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Description of the webhook.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Webhook enabled.
     * 
     */
    @Import(name="enabled", required=true)
    private Boolean enabled;

    /**
     * @return Webhook enabled.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Identifier of the webhook.
     * 
     */
    @Import(name="identifier", required=true)
    private String identifier;

    /**
     * @return Identifier of the webhook.
     * 
     */
    public String identifier() {
        return this.identifier;
    }

    /**
     * Allow insecure connections for provided webhook URL.
     * 
     */
    @Import(name="insecure", required=true)
    private Boolean insecure;

    /**
     * @return Allow insecure connections for provided webhook URL.
     * 
     */
    public Boolean insecure() {
        return this.insecure;
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable String orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable String projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Identifier of the repository.
     * 
     */
    @Import(name="repoIdentifier", required=true)
    private String repoIdentifier;

    /**
     * @return Identifier of the repository.
     * 
     */
    public String repoIdentifier() {
        return this.repoIdentifier;
    }

    /**
     * Webhook secret which will be used to sign the webhook payload.
     * 
     */
    @Import(name="secret")
    private @Nullable String secret;

    /**
     * @return Webhook secret which will be used to sign the webhook payload.
     * 
     */
    public Optional<String> secret() {
        return Optional.ofNullable(this.secret);
    }

    /**
     * List of triggers of the webhook (keep empty for all triggers).
     * 
     */
    @Import(name="triggers")
    private @Nullable List<String> triggers;

    /**
     * @return List of triggers of the webhook (keep empty for all triggers).
     * 
     */
    public Optional<List<String>> triggers() {
        return Optional.ofNullable(this.triggers);
    }

    /**
     * URL that&#39;s called by the webhook.
     * 
     */
    @Import(name="url", required=true)
    private String url;

    /**
     * @return URL that&#39;s called by the webhook.
     * 
     */
    public String url() {
        return this.url;
    }

    private GetRepoWebhookPlainArgs() {}

    private GetRepoWebhookPlainArgs(GetRepoWebhookPlainArgs $) {
        this.description = $.description;
        this.enabled = $.enabled;
        this.identifier = $.identifier;
        this.insecure = $.insecure;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.repoIdentifier = $.repoIdentifier;
        this.secret = $.secret;
        this.triggers = $.triggers;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepoWebhookPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepoWebhookPlainArgs $;

        public Builder() {
            $ = new GetRepoWebhookPlainArgs();
        }

        public Builder(GetRepoWebhookPlainArgs defaults) {
            $ = new GetRepoWebhookPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the webhook.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param enabled Webhook enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param identifier Identifier of the webhook.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param insecure Allow insecure connections for provided webhook URL.
         * 
         * @return builder
         * 
         */
        public Builder insecure(Boolean insecure) {
            $.insecure = insecure;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable String orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable String projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param repoIdentifier Identifier of the repository.
         * 
         * @return builder
         * 
         */
        public Builder repoIdentifier(String repoIdentifier) {
            $.repoIdentifier = repoIdentifier;
            return this;
        }

        /**
         * @param secret Webhook secret which will be used to sign the webhook payload.
         * 
         * @return builder
         * 
         */
        public Builder secret(@Nullable String secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param triggers List of triggers of the webhook (keep empty for all triggers).
         * 
         * @return builder
         * 
         */
        public Builder triggers(@Nullable List<String> triggers) {
            $.triggers = triggers;
            return this;
        }

        /**
         * @param triggers List of triggers of the webhook (keep empty for all triggers).
         * 
         * @return builder
         * 
         */
        public Builder triggers(String... triggers) {
            return triggers(List.of(triggers));
        }

        /**
         * @param url URL that&#39;s called by the webhook.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            $.url = url;
            return this;
        }

        public GetRepoWebhookPlainArgs build() {
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("GetRepoWebhookPlainArgs", "enabled");
            }
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("GetRepoWebhookPlainArgs", "identifier");
            }
            if ($.insecure == null) {
                throw new MissingRequiredPropertyException("GetRepoWebhookPlainArgs", "insecure");
            }
            if ($.repoIdentifier == null) {
                throw new MissingRequiredPropertyException("GetRepoWebhookPlainArgs", "repoIdentifier");
            }
            if ($.url == null) {
                throw new MissingRequiredPropertyException("GetRepoWebhookPlainArgs", "url");
            }
            return $;
        }
    }

}
