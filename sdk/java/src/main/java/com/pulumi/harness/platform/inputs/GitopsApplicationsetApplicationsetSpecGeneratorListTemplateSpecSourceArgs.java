// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceDirectoryArgs;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceHelmArgs;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceKustomizeArgs;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourcePluginArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceArgs Empty = new GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceArgs();

    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     * 
     */
    @Import(name="chart")
    private @Nullable Output<String> chart;

    /**
     * @return Helm chart name. Must be specified for applications sourced from a Helm repo.
     * 
     */
    public Optional<Output<String>> chart() {
        return Optional.ofNullable(this.chart);
    }

    /**
     * Path/directory specific options.
     * 
     */
    @Import(name="directory")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceDirectoryArgs> directory;

    /**
     * @return Path/directory specific options.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceDirectoryArgs>> directory() {
        return Optional.ofNullable(this.directory);
    }

    /**
     * Helm specific options.
     * 
     */
    @Import(name="helm")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceHelmArgs> helm;

    /**
     * @return Helm specific options.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceHelmArgs>> helm() {
        return Optional.ofNullable(this.helm);
    }

    /**
     * Kustomize specific options.
     * 
     */
    @Import(name="kustomize")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceKustomizeArgs> kustomize;

    /**
     * @return Kustomize specific options.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceKustomizeArgs>> kustomize() {
        return Optional.ofNullable(this.kustomize);
    }

    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return Directory path within the repository. Only valid for applications sourced from Git.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Config management plugin specific options.
     * 
     */
    @Import(name="plugin")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourcePluginArgs> plugin;

    /**
     * @return Config management plugin specific options.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourcePluginArgs>> plugin() {
        return Optional.ofNullable(this.plugin);
    }

    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     * 
     */
    @Import(name="ref")
    private @Nullable Output<String> ref;

    /**
     * @return Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     * 
     */
    public Optional<Output<String>> ref() {
        return Optional.ofNullable(this.ref);
    }

    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     * 
     */
    @Import(name="repoUrl")
    private @Nullable Output<String> repoUrl;

    /**
     * @return URL to the repository (Git or Helm) that contains the application manifests.
     * 
     */
    public Optional<Output<String>> repoUrl() {
        return Optional.ofNullable(this.repoUrl);
    }

    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart&#39;s version.
     * 
     */
    @Import(name="targetRevision")
    private @Nullable Output<String> targetRevision;

    /**
     * @return Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart&#39;s version.
     * 
     */
    public Optional<Output<String>> targetRevision() {
        return Optional.ofNullable(this.targetRevision);
    }

    private GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceArgs() {}

    private GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceArgs(GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceArgs $) {
        this.chart = $.chart;
        this.directory = $.directory;
        this.helm = $.helm;
        this.kustomize = $.kustomize;
        this.path = $.path;
        this.plugin = $.plugin;
        this.ref = $.ref;
        this.repoUrl = $.repoUrl;
        this.targetRevision = $.targetRevision;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceArgs $;

        public Builder() {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceArgs();
        }

        public Builder(GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceArgs defaults) {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param chart Helm chart name. Must be specified for applications sourced from a Helm repo.
         * 
         * @return builder
         * 
         */
        public Builder chart(@Nullable Output<String> chart) {
            $.chart = chart;
            return this;
        }

        /**
         * @param chart Helm chart name. Must be specified for applications sourced from a Helm repo.
         * 
         * @return builder
         * 
         */
        public Builder chart(String chart) {
            return chart(Output.of(chart));
        }

        /**
         * @param directory Path/directory specific options.
         * 
         * @return builder
         * 
         */
        public Builder directory(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceDirectoryArgs> directory) {
            $.directory = directory;
            return this;
        }

        /**
         * @param directory Path/directory specific options.
         * 
         * @return builder
         * 
         */
        public Builder directory(GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceDirectoryArgs directory) {
            return directory(Output.of(directory));
        }

        /**
         * @param helm Helm specific options.
         * 
         * @return builder
         * 
         */
        public Builder helm(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceHelmArgs> helm) {
            $.helm = helm;
            return this;
        }

        /**
         * @param helm Helm specific options.
         * 
         * @return builder
         * 
         */
        public Builder helm(GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceHelmArgs helm) {
            return helm(Output.of(helm));
        }

        /**
         * @param kustomize Kustomize specific options.
         * 
         * @return builder
         * 
         */
        public Builder kustomize(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceKustomizeArgs> kustomize) {
            $.kustomize = kustomize;
            return this;
        }

        /**
         * @param kustomize Kustomize specific options.
         * 
         * @return builder
         * 
         */
        public Builder kustomize(GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceKustomizeArgs kustomize) {
            return kustomize(Output.of(kustomize));
        }

        /**
         * @param path Directory path within the repository. Only valid for applications sourced from Git.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Directory path within the repository. Only valid for applications sourced from Git.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param plugin Config management plugin specific options.
         * 
         * @return builder
         * 
         */
        public Builder plugin(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourcePluginArgs> plugin) {
            $.plugin = plugin;
            return this;
        }

        /**
         * @param plugin Config management plugin specific options.
         * 
         * @return builder
         * 
         */
        public Builder plugin(GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourcePluginArgs plugin) {
            return plugin(Output.of(plugin));
        }

        /**
         * @param ref Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
         * 
         * @return builder
         * 
         */
        public Builder ref(@Nullable Output<String> ref) {
            $.ref = ref;
            return this;
        }

        /**
         * @param ref Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
         * 
         * @return builder
         * 
         */
        public Builder ref(String ref) {
            return ref(Output.of(ref));
        }

        /**
         * @param repoUrl URL to the repository (Git or Helm) that contains the application manifests.
         * 
         * @return builder
         * 
         */
        public Builder repoUrl(@Nullable Output<String> repoUrl) {
            $.repoUrl = repoUrl;
            return this;
        }

        /**
         * @param repoUrl URL to the repository (Git or Helm) that contains the application manifests.
         * 
         * @return builder
         * 
         */
        public Builder repoUrl(String repoUrl) {
            return repoUrl(Output.of(repoUrl));
        }

        /**
         * @param targetRevision Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart&#39;s version.
         * 
         * @return builder
         * 
         */
        public Builder targetRevision(@Nullable Output<String> targetRevision) {
            $.targetRevision = targetRevision;
            return this;
        }

        /**
         * @param targetRevision Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart&#39;s version.
         * 
         * @return builder
         * 
         */
        public Builder targetRevision(String targetRevision) {
            return targetRevision(Output.of(targetRevision));
        }

        public GitopsApplicationsetApplicationsetSpecGeneratorListTemplateSpecSourceArgs build() {
            return $;
        }
    }

}
