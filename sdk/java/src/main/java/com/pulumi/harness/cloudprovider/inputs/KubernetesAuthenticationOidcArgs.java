// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cloudprovider.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KubernetesAuthenticationOidcArgs extends com.pulumi.resources.ResourceArgs {

    public static final KubernetesAuthenticationOidcArgs Empty = new KubernetesAuthenticationOidcArgs();

    /**
     * Name of the Harness secret containing the client ID for the cluster.
     * 
     */
    @Import(name="clientIdSecretName", required=true)
    private Output<String> clientIdSecretName;

    /**
     * @return Name of the Harness secret containing the client ID for the cluster.
     * 
     */
    public Output<String> clientIdSecretName() {
        return this.clientIdSecretName;
    }

    /**
     * Name of the Harness secret containing the client secret for the cluster.
     * 
     */
    @Import(name="clientSecretSecretName")
    private @Nullable Output<String> clientSecretSecretName;

    /**
     * @return Name of the Harness secret containing the client secret for the cluster.
     * 
     */
    public Optional<Output<String>> clientSecretSecretName() {
        return Optional.ofNullable(this.clientSecretSecretName);
    }

    /**
     * URL of the identity provider to use.
     * 
     */
    @Import(name="identityProviderUrl", required=true)
    private Output<String> identityProviderUrl;

    /**
     * @return URL of the identity provider to use.
     * 
     */
    public Output<String> identityProviderUrl() {
        return this.identityProviderUrl;
    }

    /**
     * URL of the Kubernetes master to connect to.
     * 
     */
    @Import(name="masterUrl", required=true)
    private Output<String> masterUrl;

    /**
     * @return URL of the Kubernetes master to connect to.
     * 
     */
    public Output<String> masterUrl() {
        return this.masterUrl;
    }

    /**
     * Name of the Harness secret containing the password for the cluster.
     * 
     */
    @Import(name="passwordSecretName", required=true)
    private Output<String> passwordSecretName;

    /**
     * @return Name of the Harness secret containing the password for the cluster.
     * 
     */
    public Output<String> passwordSecretName() {
        return this.passwordSecretName;
    }

    /**
     * Scopes to request from the identity provider.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return Scopes to request from the identity provider.
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * Username for authentication to the cluster. This can be the username itself or the ID of a harness secret.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return Username for authentication to the cluster. This can be the username itself or the ID of a harness secret.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private KubernetesAuthenticationOidcArgs() {}

    private KubernetesAuthenticationOidcArgs(KubernetesAuthenticationOidcArgs $) {
        this.clientIdSecretName = $.clientIdSecretName;
        this.clientSecretSecretName = $.clientSecretSecretName;
        this.identityProviderUrl = $.identityProviderUrl;
        this.masterUrl = $.masterUrl;
        this.passwordSecretName = $.passwordSecretName;
        this.scopes = $.scopes;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KubernetesAuthenticationOidcArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KubernetesAuthenticationOidcArgs $;

        public Builder() {
            $ = new KubernetesAuthenticationOidcArgs();
        }

        public Builder(KubernetesAuthenticationOidcArgs defaults) {
            $ = new KubernetesAuthenticationOidcArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientIdSecretName Name of the Harness secret containing the client ID for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clientIdSecretName(Output<String> clientIdSecretName) {
            $.clientIdSecretName = clientIdSecretName;
            return this;
        }

        /**
         * @param clientIdSecretName Name of the Harness secret containing the client ID for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clientIdSecretName(String clientIdSecretName) {
            return clientIdSecretName(Output.of(clientIdSecretName));
        }

        /**
         * @param clientSecretSecretName Name of the Harness secret containing the client secret for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clientSecretSecretName(@Nullable Output<String> clientSecretSecretName) {
            $.clientSecretSecretName = clientSecretSecretName;
            return this;
        }

        /**
         * @param clientSecretSecretName Name of the Harness secret containing the client secret for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clientSecretSecretName(String clientSecretSecretName) {
            return clientSecretSecretName(Output.of(clientSecretSecretName));
        }

        /**
         * @param identityProviderUrl URL of the identity provider to use.
         * 
         * @return builder
         * 
         */
        public Builder identityProviderUrl(Output<String> identityProviderUrl) {
            $.identityProviderUrl = identityProviderUrl;
            return this;
        }

        /**
         * @param identityProviderUrl URL of the identity provider to use.
         * 
         * @return builder
         * 
         */
        public Builder identityProviderUrl(String identityProviderUrl) {
            return identityProviderUrl(Output.of(identityProviderUrl));
        }

        /**
         * @param masterUrl URL of the Kubernetes master to connect to.
         * 
         * @return builder
         * 
         */
        public Builder masterUrl(Output<String> masterUrl) {
            $.masterUrl = masterUrl;
            return this;
        }

        /**
         * @param masterUrl URL of the Kubernetes master to connect to.
         * 
         * @return builder
         * 
         */
        public Builder masterUrl(String masterUrl) {
            return masterUrl(Output.of(masterUrl));
        }

        /**
         * @param passwordSecretName Name of the Harness secret containing the password for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretName(Output<String> passwordSecretName) {
            $.passwordSecretName = passwordSecretName;
            return this;
        }

        /**
         * @param passwordSecretName Name of the Harness secret containing the password for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretName(String passwordSecretName) {
            return passwordSecretName(Output.of(passwordSecretName));
        }

        /**
         * @param scopes Scopes to request from the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes Scopes to request from the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes Scopes to request from the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param username Username for authentication to the cluster. This can be the username itself or the ID of a harness secret.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username for authentication to the cluster. This can be the username itself or the ID of a harness secret.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public KubernetesAuthenticationOidcArgs build() {
            if ($.clientIdSecretName == null) {
                throw new MissingRequiredPropertyException("KubernetesAuthenticationOidcArgs", "clientIdSecretName");
            }
            if ($.identityProviderUrl == null) {
                throw new MissingRequiredPropertyException("KubernetesAuthenticationOidcArgs", "identityProviderUrl");
            }
            if ($.masterUrl == null) {
                throw new MissingRequiredPropertyException("KubernetesAuthenticationOidcArgs", "masterUrl");
            }
            if ($.passwordSecretName == null) {
                throw new MissingRequiredPropertyException("KubernetesAuthenticationOidcArgs", "passwordSecretName");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("KubernetesAuthenticationOidcArgs", "username");
            }
            return $;
        }
    }

}
