// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetHubArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetHubArgs Empty = new GetHubArgs();

    /**
     * Name of the chaos hub
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the chaos hub
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The organization ID of the chaos hub
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return The organization ID of the chaos hub
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * The project ID of the chaos hub
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The project ID of the chaos hub
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    private GetHubArgs() {}

    private GetHubArgs(GetHubArgs $) {
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetHubArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetHubArgs $;

        public Builder() {
            $ = new GetHubArgs();
        }

        public Builder(GetHubArgs defaults) {
            $ = new GetHubArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId The organization ID of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The organization ID of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId The project ID of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project ID of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public GetHubArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetHubArgs", "name");
            }
            return $;
        }
    }

}
