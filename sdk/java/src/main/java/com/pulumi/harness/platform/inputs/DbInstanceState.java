// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbInstanceState extends com.pulumi.resources.ResourceArgs {

    public static final DbInstanceState Empty = new DbInstanceState();

    /**
     * The branch of changeSet repository
     * 
     */
    @Import(name="branch")
    private @Nullable Output<String> branch;

    /**
     * @return The branch of changeSet repository
     * 
     */
    public Optional<Output<String>> branch() {
        return Optional.ofNullable(this.branch);
    }

    /**
     * The connector to database
     * 
     */
    @Import(name="connector")
    private @Nullable Output<String> connector;

    /**
     * @return The connector to database
     * 
     */
    public Optional<Output<String>> connector() {
        return Optional.ofNullable(this.connector);
    }

    /**
     * The liquibase context
     * 
     */
    @Import(name="context")
    private @Nullable Output<String> context;

    /**
     * @return The liquibase context
     * 
     */
    public Optional<Output<String>> context() {
        return Optional.ofNullable(this.context);
    }

    /**
     * Description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * The properties to substitute in liquibase changelog
     * 
     */
    @Import(name="liquibaseSubstituteProperties")
    private @Nullable Output<Map<String,String>> liquibaseSubstituteProperties;

    /**
     * @return The properties to substitute in liquibase changelog
     * 
     */
    public Optional<Output<Map<String,String>>> liquibaseSubstituteProperties() {
        return Optional.ofNullable(this.liquibaseSubstituteProperties);
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The identifier of the parent database schema
     * 
     */
    @Import(name="schema")
    private @Nullable Output<String> schema;

    /**
     * @return The identifier of the parent database schema
     * 
     */
    public Optional<Output<String>> schema() {
        return Optional.ofNullable(this.schema);
    }

    /**
     * Tags to associate with the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags to associate with the resource.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private DbInstanceState() {}

    private DbInstanceState(DbInstanceState $) {
        this.branch = $.branch;
        this.connector = $.connector;
        this.context = $.context;
        this.description = $.description;
        this.identifier = $.identifier;
        this.liquibaseSubstituteProperties = $.liquibaseSubstituteProperties;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.schema = $.schema;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbInstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbInstanceState $;

        public Builder() {
            $ = new DbInstanceState();
        }

        public Builder(DbInstanceState defaults) {
            $ = new DbInstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param branch The branch of changeSet repository
         * 
         * @return builder
         * 
         */
        public Builder branch(@Nullable Output<String> branch) {
            $.branch = branch;
            return this;
        }

        /**
         * @param branch The branch of changeSet repository
         * 
         * @return builder
         * 
         */
        public Builder branch(String branch) {
            return branch(Output.of(branch));
        }

        /**
         * @param connector The connector to database
         * 
         * @return builder
         * 
         */
        public Builder connector(@Nullable Output<String> connector) {
            $.connector = connector;
            return this;
        }

        /**
         * @param connector The connector to database
         * 
         * @return builder
         * 
         */
        public Builder connector(String connector) {
            return connector(Output.of(connector));
        }

        /**
         * @param context The liquibase context
         * 
         * @return builder
         * 
         */
        public Builder context(@Nullable Output<String> context) {
            $.context = context;
            return this;
        }

        /**
         * @param context The liquibase context
         * 
         * @return builder
         * 
         */
        public Builder context(String context) {
            return context(Output.of(context));
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param liquibaseSubstituteProperties The properties to substitute in liquibase changelog
         * 
         * @return builder
         * 
         */
        public Builder liquibaseSubstituteProperties(@Nullable Output<Map<String,String>> liquibaseSubstituteProperties) {
            $.liquibaseSubstituteProperties = liquibaseSubstituteProperties;
            return this;
        }

        /**
         * @param liquibaseSubstituteProperties The properties to substitute in liquibase changelog
         * 
         * @return builder
         * 
         */
        public Builder liquibaseSubstituteProperties(Map<String,String> liquibaseSubstituteProperties) {
            return liquibaseSubstituteProperties(Output.of(liquibaseSubstituteProperties));
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param schema The identifier of the parent database schema
         * 
         * @return builder
         * 
         */
        public Builder schema(@Nullable Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The identifier of the parent database schema
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public DbInstanceState build() {
            return $;
        }
    }

}
