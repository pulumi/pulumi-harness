// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.autostopping.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRuleVmHttpHealth {
    /**
     * @return API path to use for health check
     * 
     */
    private @Nullable String path;
    /**
     * @return Health check port on the VM
     * 
     */
    private Integer port;
    /**
     * @return Protocol can be http or https
     * 
     */
    private String protocol;
    /**
     * @return Lower limit for acceptable status code
     * 
     */
    private @Nullable Integer statusCodeFrom;
    /**
     * @return Upper limit for acceptable status code
     * 
     */
    private @Nullable Integer statusCodeTo;
    /**
     * @return Health check timeout
     * 
     */
    private @Nullable Integer timeout;

    private GetRuleVmHttpHealth() {}
    /**
     * @return API path to use for health check
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return Health check port on the VM
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return Protocol can be http or https
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Lower limit for acceptable status code
     * 
     */
    public Optional<Integer> statusCodeFrom() {
        return Optional.ofNullable(this.statusCodeFrom);
    }
    /**
     * @return Upper limit for acceptable status code
     * 
     */
    public Optional<Integer> statusCodeTo() {
        return Optional.ofNullable(this.statusCodeTo);
    }
    /**
     * @return Health check timeout
     * 
     */
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRuleVmHttpHealth defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String path;
        private Integer port;
        private String protocol;
        private @Nullable Integer statusCodeFrom;
        private @Nullable Integer statusCodeTo;
        private @Nullable Integer timeout;
        public Builder() {}
        public Builder(GetRuleVmHttpHealth defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.statusCodeFrom = defaults.statusCodeFrom;
    	      this.statusCodeTo = defaults.statusCodeTo;
    	      this.timeout = defaults.timeout;
        }

        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetRuleVmHttpHealth", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetRuleVmHttpHealth", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder statusCodeFrom(@Nullable Integer statusCodeFrom) {

            this.statusCodeFrom = statusCodeFrom;
            return this;
        }
        @CustomType.Setter
        public Builder statusCodeTo(@Nullable Integer statusCodeTo) {

            this.statusCodeTo = statusCodeTo;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Integer timeout) {

            this.timeout = timeout;
            return this;
        }
        public GetRuleVmHttpHealth build() {
            final var _resultValue = new GetRuleVmHttpHealth();
            _resultValue.path = path;
            _resultValue.port = port;
            _resultValue.protocol = protocol;
            _resultValue.statusCodeFrom = statusCodeFrom;
            _resultValue.statusCodeTo = statusCodeTo;
            _resultValue.timeout = timeout;
            return _resultValue;
        }
    }
}
