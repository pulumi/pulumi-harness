// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.InfraModuleArgs;
import com.pulumi.harness.platform.inputs.InfraModuleState;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.platform.InfraModule;
 * import com.pulumi.harness.platform.InfraModuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new InfraModule("example", InfraModuleArgs.builder()
 *             .description("example")
 *             .name("name")
 *             .system("provider")
 *             .repository("https://github.com/org/repo")
 *             .repositoryBranch("main")
 *             .repositoryPath("tf/aws/basic")
 *             .repositoryConnector(test.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * The `pulumi import` command can be used, for example:
 * 
 * ```sh
 * $ pulumi import harness:platform/infraModule:InfraModule example &lt;module_id&gt;
 * ```
 * 
 */
@ResourceType(type="harness:platform/infraModule:InfraModule")
public class InfraModule extends com.pulumi.resources.CustomResource {
    /**
     * Timestamp when the module was created.
     * 
     */
    @Export(name="created", refs={Integer.class}, tree="[0]")
    private Output<Integer> created;

    /**
     * @return Timestamp when the module was created.
     * 
     */
    public Output<Integer> created() {
        return this.created;
    }
    /**
     * Description of the module.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the module.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Name of the module.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the module.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * For account connectors, the repository where the module can be found
     * 
     */
    @Export(name="repository", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> repository;

    /**
     * @return For account connectors, the repository where the module can be found
     * 
     */
    public Output<Optional<String>> repository() {
        return Codegen.optional(this.repository);
    }
    /**
     * Name of the branch to fetch the code from. This cannot be set if repository commit is set.
     * 
     */
    @Export(name="repositoryBranch", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> repositoryBranch;

    /**
     * @return Name of the branch to fetch the code from. This cannot be set if repository commit is set.
     * 
     */
    public Output<Optional<String>> repositoryBranch() {
        return Codegen.optional(this.repositoryBranch);
    }
    /**
     * Tag to fetch the code from. This cannot be set if repository branch is set.
     * 
     */
    @Export(name="repositoryCommit", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> repositoryCommit;

    /**
     * @return Tag to fetch the code from. This cannot be set if repository branch is set.
     * 
     */
    public Output<Optional<String>> repositoryCommit() {
        return Codegen.optional(this.repositoryCommit);
    }
    /**
     * Reference to the connector to be used to fetch the code.
     * 
     */
    @Export(name="repositoryConnector", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> repositoryConnector;

    /**
     * @return Reference to the connector to be used to fetch the code.
     * 
     */
    public Output<Optional<String>> repositoryConnector() {
        return Codegen.optional(this.repositoryConnector);
    }
    /**
     * Path to the module within the repository.
     * 
     */
    @Export(name="repositoryPath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> repositoryPath;

    /**
     * @return Path to the module within the repository.
     * 
     */
    public Output<Optional<String>> repositoryPath() {
        return Codegen.optional(this.repositoryPath);
    }
    /**
     * URL of the repository where the module is stored.
     * 
     */
    @Export(name="repositoryUrl", refs={String.class}, tree="[0]")
    private Output<String> repositoryUrl;

    /**
     * @return URL of the repository where the module is stored.
     * 
     */
    public Output<String> repositoryUrl() {
        return this.repositoryUrl;
    }
    /**
     * Timestamp when the module was last synced.
     * 
     */
    @Export(name="synced", refs={Integer.class}, tree="[0]")
    private Output<Integer> synced;

    /**
     * @return Timestamp when the module was last synced.
     * 
     */
    public Output<Integer> synced() {
        return this.synced;
    }
    /**
     * Provider of the module.
     * 
     */
    @Export(name="system", refs={String.class}, tree="[0]")
    private Output<String> system;

    /**
     * @return Provider of the module.
     * 
     */
    public Output<String> system() {
        return this.system;
    }
    /**
     * Git tags associated with the module.
     * 
     */
    @Export(name="tags", refs={String.class}, tree="[0]")
    private Output<String> tags;

    /**
     * @return Git tags associated with the module.
     * 
     */
    public Output<String> tags() {
        return this.tags;
    }
    /**
     * List of versions of the module.
     * 
     */
    @Export(name="versions", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> versions;

    /**
     * @return List of versions of the module.
     * 
     */
    public Output<List<String>> versions() {
        return this.versions;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public InfraModule(java.lang.String name) {
        this(name, InfraModuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public InfraModule(java.lang.String name, InfraModuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public InfraModule(java.lang.String name, InfraModuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/infraModule:InfraModule", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private InfraModule(java.lang.String name, Output<java.lang.String> id, @Nullable InfraModuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/infraModule:InfraModule", name, state, makeResourceOptions(options, id), false);
    }

    private static InfraModuleArgs makeArgs(InfraModuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? InfraModuleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static InfraModule get(java.lang.String name, Output<java.lang.String> id, @Nullable InfraModuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new InfraModule(name, id, state, options);
    }
}
