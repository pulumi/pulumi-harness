// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.harness.platform.outputs.GitOpsClusterRequestClusterConfigExecProviderConfig;
import com.pulumi.harness.platform.outputs.GitOpsClusterRequestClusterConfigTlsClientConfig;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GitOpsClusterRequestClusterConfig {
    /**
     * @return AWS Cluster name. If set then AWS CLI EKS token command will be used to access cluster.
     * 
     */
    private @Nullable String awsClusterName;
    /**
     * @return Bearer authentication token the cluster.
     * 
     */
    private @Nullable String bearerToken;
    /**
     * @return Identifies the authentication method used to connect to the cluster.
     * 
     */
    private @Nullable String clusterConnectionType;
    /**
     * @return DisableCompression bypasses automatic GZip compression requests to to the cluster&#39;s API server. Corresponds to running kubectl with --disable-compression
     * 
     */
    private @Nullable Boolean disableCompression;
    /**
     * @return Configuration for an exec provider.
     * 
     */
    private @Nullable List<GitOpsClusterRequestClusterConfigExecProviderConfig> execProviderConfigs;
    /**
     * @return Password of the server of the cluster.
     * 
     */
    private @Nullable String password;
    /**
     * @return The URL to the proxy to be used for all requests send to the cluster&#39;s API server
     * 
     */
    private @Nullable String proxyUrl;
    /**
     * @return Optional role ARN. If set then used for AWS IAM Authenticator.
     * 
     */
    private @Nullable String roleARN;
    /**
     * @return Settings to enable transport layer security.
     * 
     */
    private @Nullable List<GitOpsClusterRequestClusterConfigTlsClientConfig> tlsClientConfigs;
    /**
     * @return Username of the server of the cluster.
     * 
     */
    private @Nullable String username;

    private GitOpsClusterRequestClusterConfig() {}
    /**
     * @return AWS Cluster name. If set then AWS CLI EKS token command will be used to access cluster.
     * 
     */
    public Optional<String> awsClusterName() {
        return Optional.ofNullable(this.awsClusterName);
    }
    /**
     * @return Bearer authentication token the cluster.
     * 
     */
    public Optional<String> bearerToken() {
        return Optional.ofNullable(this.bearerToken);
    }
    /**
     * @return Identifies the authentication method used to connect to the cluster.
     * 
     */
    public Optional<String> clusterConnectionType() {
        return Optional.ofNullable(this.clusterConnectionType);
    }
    /**
     * @return DisableCompression bypasses automatic GZip compression requests to to the cluster&#39;s API server. Corresponds to running kubectl with --disable-compression
     * 
     */
    public Optional<Boolean> disableCompression() {
        return Optional.ofNullable(this.disableCompression);
    }
    /**
     * @return Configuration for an exec provider.
     * 
     */
    public List<GitOpsClusterRequestClusterConfigExecProviderConfig> execProviderConfigs() {
        return this.execProviderConfigs == null ? List.of() : this.execProviderConfigs;
    }
    /**
     * @return Password of the server of the cluster.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return The URL to the proxy to be used for all requests send to the cluster&#39;s API server
     * 
     */
    public Optional<String> proxyUrl() {
        return Optional.ofNullable(this.proxyUrl);
    }
    /**
     * @return Optional role ARN. If set then used for AWS IAM Authenticator.
     * 
     */
    public Optional<String> roleARN() {
        return Optional.ofNullable(this.roleARN);
    }
    /**
     * @return Settings to enable transport layer security.
     * 
     */
    public List<GitOpsClusterRequestClusterConfigTlsClientConfig> tlsClientConfigs() {
        return this.tlsClientConfigs == null ? List.of() : this.tlsClientConfigs;
    }
    /**
     * @return Username of the server of the cluster.
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GitOpsClusterRequestClusterConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String awsClusterName;
        private @Nullable String bearerToken;
        private @Nullable String clusterConnectionType;
        private @Nullable Boolean disableCompression;
        private @Nullable List<GitOpsClusterRequestClusterConfigExecProviderConfig> execProviderConfigs;
        private @Nullable String password;
        private @Nullable String proxyUrl;
        private @Nullable String roleARN;
        private @Nullable List<GitOpsClusterRequestClusterConfigTlsClientConfig> tlsClientConfigs;
        private @Nullable String username;
        public Builder() {}
        public Builder(GitOpsClusterRequestClusterConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.awsClusterName = defaults.awsClusterName;
    	      this.bearerToken = defaults.bearerToken;
    	      this.clusterConnectionType = defaults.clusterConnectionType;
    	      this.disableCompression = defaults.disableCompression;
    	      this.execProviderConfigs = defaults.execProviderConfigs;
    	      this.password = defaults.password;
    	      this.proxyUrl = defaults.proxyUrl;
    	      this.roleARN = defaults.roleARN;
    	      this.tlsClientConfigs = defaults.tlsClientConfigs;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder awsClusterName(@Nullable String awsClusterName) {

            this.awsClusterName = awsClusterName;
            return this;
        }
        @CustomType.Setter
        public Builder bearerToken(@Nullable String bearerToken) {

            this.bearerToken = bearerToken;
            return this;
        }
        @CustomType.Setter
        public Builder clusterConnectionType(@Nullable String clusterConnectionType) {

            this.clusterConnectionType = clusterConnectionType;
            return this;
        }
        @CustomType.Setter
        public Builder disableCompression(@Nullable Boolean disableCompression) {

            this.disableCompression = disableCompression;
            return this;
        }
        @CustomType.Setter
        public Builder execProviderConfigs(@Nullable List<GitOpsClusterRequestClusterConfigExecProviderConfig> execProviderConfigs) {

            this.execProviderConfigs = execProviderConfigs;
            return this;
        }
        public Builder execProviderConfigs(GitOpsClusterRequestClusterConfigExecProviderConfig... execProviderConfigs) {
            return execProviderConfigs(List.of(execProviderConfigs));
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder proxyUrl(@Nullable String proxyUrl) {

            this.proxyUrl = proxyUrl;
            return this;
        }
        @CustomType.Setter
        public Builder roleARN(@Nullable String roleARN) {

            this.roleARN = roleARN;
            return this;
        }
        @CustomType.Setter
        public Builder tlsClientConfigs(@Nullable List<GitOpsClusterRequestClusterConfigTlsClientConfig> tlsClientConfigs) {

            this.tlsClientConfigs = tlsClientConfigs;
            return this;
        }
        public Builder tlsClientConfigs(GitOpsClusterRequestClusterConfigTlsClientConfig... tlsClientConfigs) {
            return tlsClientConfigs(List.of(tlsClientConfigs));
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {

            this.username = username;
            return this;
        }
        public GitOpsClusterRequestClusterConfig build() {
            final var _resultValue = new GitOpsClusterRequestClusterConfig();
            _resultValue.awsClusterName = awsClusterName;
            _resultValue.bearerToken = bearerToken;
            _resultValue.clusterConnectionType = clusterConnectionType;
            _resultValue.disableCompression = disableCompression;
            _resultValue.execProviderConfigs = execProviderConfigs;
            _resultValue.password = password;
            _resultValue.proxyUrl = proxyUrl;
            _resultValue.roleARN = roleARN;
            _resultValue.tlsClientConfigs = tlsClientConfigs;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
