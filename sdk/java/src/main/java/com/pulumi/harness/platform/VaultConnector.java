// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.VaultConnectorArgs;
import com.pulumi.harness.platform.inputs.VaultConnectorState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for creating a HashiCorp Vault Secret Manager connector.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.platform.VaultConnector;
 * import com.pulumi.harness.platform.VaultConnectorArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var awsAuth = new VaultConnector("awsAuth", VaultConnectorArgs.builder()
 *             .identifier("identifier")
 *             .name("name")
 *             .description("test")
 *             .tags("foo:bar")
 *             .awsRegion("aws_region")
 *             .basePath("base_path")
 *             .accessType("AWS_IAM")
 *             .default_(false)
 *             .xvaultAwsIamServerId(String.format("account.%s", test.id()))
 *             .readOnly(true)
 *             .renewalIntervalMinutes(60)
 *             .secretEngineManuallyConfigured(true)
 *             .secretEngineName("secret_engine_name")
 *             .secretEngineVersion(2)
 *             .vaultAwsIamRole("vault_aws_iam_role")
 *             .useAwsIam(true)
 *             .useK8sAuth(false)
 *             .useVaultAgent(false)
 *             .delegateSelectors("harness-delegate")
 *             .vaultUrl("https://vault_url.com")
 *             .useJwtAuth(false)
 *             .build());
 * 
 *         var appRole = new VaultConnector("appRole", VaultConnectorArgs.builder()
 *             .identifier("identifier")
 *             .name("name")
 *             .description("test")
 *             .tags("foo:bar")
 *             .appRoleId("app_role_id")
 *             .basePath("base_path")
 *             .accessType("APP_ROLE")
 *             .default_(false)
 *             .secretId(String.format("account.%s", test.id()))
 *             .readOnly(true)
 *             .renewalIntervalMinutes(60)
 *             .secretEngineManuallyConfigured(true)
 *             .secretEngineName("secret_engine_name")
 *             .secretEngineVersion(2)
 *             .useAwsIam(false)
 *             .useK8sAuth(false)
 *             .useVaultAgent(false)
 *             .renewAppRoleToken(true)
 *             .delegateSelectors("harness-delegate")
 *             .vaultUrl("https://vault_url.com")
 *             .useJwtAuth(false)
 *             .build());
 * 
 *         var k8sAuth = new VaultConnector("k8sAuth", VaultConnectorArgs.builder()
 *             .identifier("identifier")
 *             .name("name")
 *             .description("test")
 *             .tags("foo:bar")
 *             .authToken(String.format("account.%s", test.id()))
 *             .basePath("base_path")
 *             .accessType("K8s_AUTH")
 *             .default_(false)
 *             .k8sAuthEndpoint("k8s_auth_endpoint")
 *             .namespace("namespace")
 *             .readOnly(true)
 *             .renewalIntervalMinutes(10)
 *             .secretEngineManuallyConfigured(true)
 *             .secretEngineName("secret_engine_name")
 *             .secretEngineVersion(2)
 *             .serviceAccountTokenPath("service_account_token_path")
 *             .useAwsIam(false)
 *             .useK8sAuth(true)
 *             .useVaultAgent(false)
 *             .vaultK8sAuthRole("vault_k8s_auth_role")
 *             .vaultAwsIamRole("vault_aws_iam_role")
 *             .delegateSelectors("harness-delegate")
 *             .vaultUrl("https://vault_url.com")
 *             .useJwtAuth(false)
 *             .build());
 * 
 *         var vaultAgent = new VaultConnector("vaultAgent", VaultConnectorArgs.builder()
 *             .identifier("identifier")
 *             .name("name")
 *             .description("test")
 *             .tags("foo:bar")
 *             .authToken(String.format("account.%s", test.id()))
 *             .basePath("base_path")
 *             .accessType("VAULT_AGENT")
 *             .default_(false)
 *             .namespace("namespace")
 *             .readOnly(true)
 *             .renewalIntervalMinutes(10)
 *             .secretEngineManuallyConfigured(true)
 *             .secretEngineName("secret_engine_name")
 *             .secretEngineVersion(2)
 *             .useAwsIam(false)
 *             .useK8sAuth(false)
 *             .useVaultAgent(true)
 *             .sinkPath("sink_path")
 *             .delegateSelectors("harness-delegate")
 *             .vaultUrl("https://vault_url.com")
 *             .useJwtAuth(false)
 *             .build());
 * 
 *         var token = new VaultConnector("token", VaultConnectorArgs.builder()
 *             .identifier("identifier")
 *             .name("name")
 *             .description("test")
 *             .tags("foo:bar")
 *             .authToken(String.format("account.%s", test.id()))
 *             .basePath("base_path")
 *             .accessType("TOKEN")
 *             .default_(false)
 *             .namespace("namespace")
 *             .readOnly(true)
 *             .renewalIntervalMinutes(10)
 *             .secretEngineManuallyConfigured(true)
 *             .secretEngineName("secret_engine_name")
 *             .secretEngineVersion(2)
 *             .useAwsIam(false)
 *             .useK8sAuth(false)
 *             .vaultUrl("https://vault_url.com")
 *             .useJwtAuth(false)
 *             .build());
 * 
 *         var jwt = new VaultConnector("jwt", VaultConnectorArgs.builder()
 *             .identifier("identifier")
 *             .name("name")
 *             .description("test")
 *             .tags("foo:bar")
 *             .basePath("base_path")
 *             .accessType("JWT")
 *             .default_(false)
 *             .readOnly(true)
 *             .renewalIntervalMinutes(60)
 *             .secretEngineManuallyConfigured(true)
 *             .secretEngineName("secret_engine_name")
 *             .secretEngineVersion(2)
 *             .useAwsIam(false)
 *             .useK8sAuth(false)
 *             .useVaultAgent(false)
 *             .renewAppRoleToken(false)
 *             .delegateSelectors("harness-delegate")
 *             .vaultUrl("https://vault_url.com")
 *             .useJwtAuth(true)
 *             .vaultJwtAuthRole("vault_jwt_auth_role")
 *             .vaultJwtAuthPath("vault_jwt_auth_path")
 *             .executeOnDelegate(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * The `pulumi import` command can be used, for example:
 * 
 * Import account level vault connector
 * 
 * ```sh
 * $ pulumi import harness:platform/vaultConnector:VaultConnector example &lt;connector_id&gt;
 * ```
 * 
 * Import org level vault connector
 * 
 * ```sh
 * $ pulumi import harness:platform/vaultConnector:VaultConnector example &lt;ord_id&gt;/&lt;connector_id&gt;
 * ```
 * 
 * Import project level vault connector
 * 
 * ```sh
 * $ pulumi import harness:platform/vaultConnector:VaultConnector example &lt;org_id&gt;/&lt;project_id&gt;/&lt;connector_id&gt;
 * ```
 * 
 */
@ResourceType(type="harness:platform/vaultConnector:VaultConnector")
public class VaultConnector extends com.pulumi.resources.CustomResource {
    /**
     * Access type.
     * 
     */
    @Export(name="accessType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> accessType;

    /**
     * @return Access type.
     * 
     */
    public Output<Optional<String>> accessType() {
        return Codegen.optional(this.accessType);
    }
    /**
     * ID of App Role.
     * 
     */
    @Export(name="appRoleId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> appRoleId;

    /**
     * @return ID of App Role.
     * 
     */
    public Output<Optional<String>> appRoleId() {
        return Codegen.optional(this.appRoleId);
    }
    /**
     * Authentication token for Vault.
     * 
     */
    @Export(name="authToken", refs={String.class}, tree="[0]")
    private Output<String> authToken;

    /**
     * @return Authentication token for Vault.
     * 
     */
    public Output<String> authToken() {
        return this.authToken;
    }
    /**
     * AWS region where the AWS IAM authentication will happen.
     * 
     */
    @Export(name="awsRegion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> awsRegion;

    /**
     * @return AWS region where the AWS IAM authentication will happen.
     * 
     */
    public Output<Optional<String>> awsRegion() {
        return Codegen.optional(this.awsRegion);
    }
    /**
     * Location of the Vault directory where the secret will be stored.
     * 
     */
    @Export(name="basePath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> basePath;

    /**
     * @return Location of the Vault directory where the secret will be stored.
     * 
     */
    public Output<Optional<String>> basePath() {
        return Codegen.optional(this.basePath);
    }
    /**
     * Is default or not.
     * 
     */
    @Export(name="default", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> default_;

    /**
     * @return Is default or not.
     * 
     */
    public Output<Optional<Boolean>> default_() {
        return Codegen.optional(this.default_);
    }
    /**
     * List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.
     * 
     */
    @Export(name="delegateSelectors", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> delegateSelectors;

    /**
     * @return List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.
     * 
     */
    public Output<Optional<List<String>>> delegateSelectors() {
        return Codegen.optional(this.delegateSelectors);
    }
    /**
     * Description of the resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Execute on delegate or not.
     * 
     */
    @Export(name="executeOnDelegate", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> executeOnDelegate;

    /**
     * @return Execute on delegate or not.
     * 
     */
    public Output<Optional<Boolean>> executeOnDelegate() {
        return Codegen.optional(this.executeOnDelegate);
    }
    /**
     * Unique identifier of the resource.
     * 
     */
    @Export(name="identifier", refs={String.class}, tree="[0]")
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }
    /**
     * Is default or not.
     * 
     */
    @Export(name="isDefault", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isDefault;

    /**
     * @return Is default or not.
     * 
     */
    public Output<Optional<Boolean>> isDefault() {
        return Codegen.optional(this.isDefault);
    }
    /**
     * Read only or not.
     * 
     */
    @Export(name="isReadOnly", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isReadOnly;

    /**
     * @return Read only or not.
     * 
     */
    public Output<Optional<Boolean>> isReadOnly() {
        return Codegen.optional(this.isReadOnly);
    }
    /**
     * The path where Kubernetes Auth is enabled in Vault.
     * 
     */
    @Export(name="k8sAuthEndpoint", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> k8sAuthEndpoint;

    /**
     * @return The path where Kubernetes Auth is enabled in Vault.
     * 
     */
    public Output<Optional<String>> k8sAuthEndpoint() {
        return Codegen.optional(this.k8sAuthEndpoint);
    }
    /**
     * Name of the resource.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Vault namespace where the Secret will be created.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> namespace;

    /**
     * @return Vault namespace where the Secret will be created.
     * 
     */
    public Output<Optional<String>> namespace() {
        return Codegen.optional(this.namespace);
    }
    /**
     * Unique identifier of the organization.
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Output<Optional<String>> orgId() {
        return Codegen.optional(this.orgId);
    }
    /**
     * Unique identifier of the project.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Output<Optional<String>> projectId() {
        return Codegen.optional(this.projectId);
    }
    /**
     * Read only.
     * 
     */
    @Export(name="readOnly", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> readOnly;

    /**
     * @return Read only.
     * 
     */
    public Output<Optional<Boolean>> readOnly() {
        return Codegen.optional(this.readOnly);
    }
    /**
     * Boolean value to indicate if AppRole token renewal is enabled or not.
     * 
     */
    @Export(name="renewAppRoleToken", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> renewAppRoleToken;

    /**
     * @return Boolean value to indicate if AppRole token renewal is enabled or not.
     * 
     */
    public Output<Boolean> renewAppRoleToken() {
        return this.renewAppRoleToken;
    }
    /**
     * The time interval for the token renewal.
     * 
     */
    @Export(name="renewalIntervalMinutes", refs={Integer.class}, tree="[0]")
    private Output<Integer> renewalIntervalMinutes;

    /**
     * @return The time interval for the token renewal.
     * 
     */
    public Output<Integer> renewalIntervalMinutes() {
        return this.renewalIntervalMinutes;
    }
    /**
     * Manually entered Secret Engine.
     * 
     */
    @Export(name="secretEngineManuallyConfigured", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> secretEngineManuallyConfigured;

    /**
     * @return Manually entered Secret Engine.
     * 
     */
    public Output<Optional<Boolean>> secretEngineManuallyConfigured() {
        return Codegen.optional(this.secretEngineManuallyConfigured);
    }
    /**
     * Name of the Secret Engine.
     * 
     */
    @Export(name="secretEngineName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> secretEngineName;

    /**
     * @return Name of the Secret Engine.
     * 
     */
    public Output<Optional<String>> secretEngineName() {
        return Codegen.optional(this.secretEngineName);
    }
    /**
     * Version of Secret Engine.
     * 
     */
    @Export(name="secretEngineVersion", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> secretEngineVersion;

    /**
     * @return Version of Secret Engine.
     * 
     */
    public Output<Optional<Integer>> secretEngineVersion() {
        return Codegen.optional(this.secretEngineVersion);
    }
    /**
     * ID of the Secret.
     * 
     */
    @Export(name="secretId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> secretId;

    /**
     * @return ID of the Secret.
     * 
     */
    public Output<Optional<String>> secretId() {
        return Codegen.optional(this.secretId);
    }
    /**
     * The Service Account token path in the K8s pod where the token is mounted.
     * 
     */
    @Export(name="serviceAccountTokenPath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> serviceAccountTokenPath;

    /**
     * @return The Service Account token path in the K8s pod where the token is mounted.
     * 
     */
    public Output<Optional<String>> serviceAccountTokenPath() {
        return Codegen.optional(this.serviceAccountTokenPath);
    }
    /**
     * The location from which the authentication token should be read.
     * 
     */
    @Export(name="sinkPath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sinkPath;

    /**
     * @return The location from which the authentication token should be read.
     * 
     */
    public Output<Optional<String>> sinkPath() {
        return Codegen.optional(this.sinkPath);
    }
    /**
     * Tags to associate with the resource.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Tags to associate with the resource.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Boolean value to indicate if AWS IAM is used for authentication.
     * 
     */
    @Export(name="useAwsIam", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> useAwsIam;

    /**
     * @return Boolean value to indicate if AWS IAM is used for authentication.
     * 
     */
    public Output<Optional<Boolean>> useAwsIam() {
        return Codegen.optional(this.useAwsIam);
    }
    /**
     * Boolean value to indicate if JWT is used for authentication.
     * 
     */
    @Export(name="useJwtAuth", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> useJwtAuth;

    /**
     * @return Boolean value to indicate if JWT is used for authentication.
     * 
     */
    public Output<Optional<Boolean>> useJwtAuth() {
        return Codegen.optional(this.useJwtAuth);
    }
    /**
     * Boolean value to indicate if K8s Auth is used for authentication.
     * 
     */
    @Export(name="useK8sAuth", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> useK8sAuth;

    /**
     * @return Boolean value to indicate if K8s Auth is used for authentication.
     * 
     */
    public Output<Optional<Boolean>> useK8sAuth() {
        return Codegen.optional(this.useK8sAuth);
    }
    /**
     * Boolean value to indicate if Vault Agent is used for authentication.
     * 
     */
    @Export(name="useVaultAgent", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> useVaultAgent;

    /**
     * @return Boolean value to indicate if Vault Agent is used for authentication.
     * 
     */
    public Output<Optional<Boolean>> useVaultAgent() {
        return Codegen.optional(this.useVaultAgent);
    }
    /**
     * The Vault role defined to bind to aws iam account/role being accessed.
     * 
     */
    @Export(name="vaultAwsIamRole", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> vaultAwsIamRole;

    /**
     * @return The Vault role defined to bind to aws iam account/role being accessed.
     * 
     */
    public Output<Optional<String>> vaultAwsIamRole() {
        return Codegen.optional(this.vaultAwsIamRole);
    }
    /**
     * Custom path at with JWT auth in enabled for Vault
     * 
     */
    @Export(name="vaultJwtAuthPath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> vaultJwtAuthPath;

    /**
     * @return Custom path at with JWT auth in enabled for Vault
     * 
     */
    public Output<Optional<String>> vaultJwtAuthPath() {
        return Codegen.optional(this.vaultJwtAuthPath);
    }
    /**
     * The Vault role defined with JWT auth type for accessing Vault as per policies binded.
     * 
     */
    @Export(name="vaultJwtAuthRole", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> vaultJwtAuthRole;

    /**
     * @return The Vault role defined with JWT auth type for accessing Vault as per policies binded.
     * 
     */
    public Output<Optional<String>> vaultJwtAuthRole() {
        return Codegen.optional(this.vaultJwtAuthRole);
    }
    /**
     * The role where K8s Auth will happen.
     * 
     */
    @Export(name="vaultK8sAuthRole", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> vaultK8sAuthRole;

    /**
     * @return The role where K8s Auth will happen.
     * 
     */
    public Output<Optional<String>> vaultK8sAuthRole() {
        return Codegen.optional(this.vaultK8sAuthRole);
    }
    /**
     * URL of the HashiCorp Vault.
     * 
     */
    @Export(name="vaultUrl", refs={String.class}, tree="[0]")
    private Output<String> vaultUrl;

    /**
     * @return URL of the HashiCorp Vault.
     * 
     */
    public Output<String> vaultUrl() {
        return this.vaultUrl;
    }
    /**
     * The AWS IAM Header Server ID that has been configured for this AWS IAM instance.
     * 
     */
    @Export(name="xvaultAwsIamServerId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> xvaultAwsIamServerId;

    /**
     * @return The AWS IAM Header Server ID that has been configured for this AWS IAM instance.
     * 
     */
    public Output<Optional<String>> xvaultAwsIamServerId() {
        return Codegen.optional(this.xvaultAwsIamServerId);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VaultConnector(java.lang.String name) {
        this(name, VaultConnectorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VaultConnector(java.lang.String name, VaultConnectorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VaultConnector(java.lang.String name, VaultConnectorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/vaultConnector:VaultConnector", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private VaultConnector(java.lang.String name, Output<java.lang.String> id, @Nullable VaultConnectorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/vaultConnector:VaultConnector", name, state, makeResourceOptions(options, id), false);
    }

    private static VaultConnectorArgs makeArgs(VaultConnectorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? VaultConnectorArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VaultConnector get(java.lang.String name, Output<java.lang.String> id, @Nullable VaultConnectorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new VaultConnector(name, id, state, options);
    }
}
