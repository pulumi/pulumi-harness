// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class UserGroupNotificationSettings {
    /**
     * @return The email addresses of the user group.
     * 
     */
    private @Nullable List<String> groupEmailAddresses;
    /**
     * @return The Microsoft Teams webhook URL of the user group.
     * 
     */
    private @Nullable String microsoftTeamsWebhookUrl;
    /**
     * @return Indicates whether an email is sent when a new user is added to the group.
     * 
     */
    private @Nullable Boolean sendMailToNewMembers;
    /**
     * @return Enable this setting to have notifications sent to the members of this group.
     * 
     */
    private @Nullable Boolean sendNotificationsToMembers;
    /**
     * @return The Slack channel to send notifications to.
     * 
     */
    private @Nullable String slackChannel;
    /**
     * @return The Slack webhook URL to send notifications to.
     * 
     */
    private @Nullable String slackWebhookUrl;

    private UserGroupNotificationSettings() {}
    /**
     * @return The email addresses of the user group.
     * 
     */
    public List<String> groupEmailAddresses() {
        return this.groupEmailAddresses == null ? List.of() : this.groupEmailAddresses;
    }
    /**
     * @return The Microsoft Teams webhook URL of the user group.
     * 
     */
    public Optional<String> microsoftTeamsWebhookUrl() {
        return Optional.ofNullable(this.microsoftTeamsWebhookUrl);
    }
    /**
     * @return Indicates whether an email is sent when a new user is added to the group.
     * 
     */
    public Optional<Boolean> sendMailToNewMembers() {
        return Optional.ofNullable(this.sendMailToNewMembers);
    }
    /**
     * @return Enable this setting to have notifications sent to the members of this group.
     * 
     */
    public Optional<Boolean> sendNotificationsToMembers() {
        return Optional.ofNullable(this.sendNotificationsToMembers);
    }
    /**
     * @return The Slack channel to send notifications to.
     * 
     */
    public Optional<String> slackChannel() {
        return Optional.ofNullable(this.slackChannel);
    }
    /**
     * @return The Slack webhook URL to send notifications to.
     * 
     */
    public Optional<String> slackWebhookUrl() {
        return Optional.ofNullable(this.slackWebhookUrl);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserGroupNotificationSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> groupEmailAddresses;
        private @Nullable String microsoftTeamsWebhookUrl;
        private @Nullable Boolean sendMailToNewMembers;
        private @Nullable Boolean sendNotificationsToMembers;
        private @Nullable String slackChannel;
        private @Nullable String slackWebhookUrl;
        public Builder() {}
        public Builder(UserGroupNotificationSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.groupEmailAddresses = defaults.groupEmailAddresses;
    	      this.microsoftTeamsWebhookUrl = defaults.microsoftTeamsWebhookUrl;
    	      this.sendMailToNewMembers = defaults.sendMailToNewMembers;
    	      this.sendNotificationsToMembers = defaults.sendNotificationsToMembers;
    	      this.slackChannel = defaults.slackChannel;
    	      this.slackWebhookUrl = defaults.slackWebhookUrl;
        }

        @CustomType.Setter
        public Builder groupEmailAddresses(@Nullable List<String> groupEmailAddresses) {

            this.groupEmailAddresses = groupEmailAddresses;
            return this;
        }
        public Builder groupEmailAddresses(String... groupEmailAddresses) {
            return groupEmailAddresses(List.of(groupEmailAddresses));
        }
        @CustomType.Setter
        public Builder microsoftTeamsWebhookUrl(@Nullable String microsoftTeamsWebhookUrl) {

            this.microsoftTeamsWebhookUrl = microsoftTeamsWebhookUrl;
            return this;
        }
        @CustomType.Setter
        public Builder sendMailToNewMembers(@Nullable Boolean sendMailToNewMembers) {

            this.sendMailToNewMembers = sendMailToNewMembers;
            return this;
        }
        @CustomType.Setter
        public Builder sendNotificationsToMembers(@Nullable Boolean sendNotificationsToMembers) {

            this.sendNotificationsToMembers = sendNotificationsToMembers;
            return this;
        }
        @CustomType.Setter
        public Builder slackChannel(@Nullable String slackChannel) {

            this.slackChannel = slackChannel;
            return this;
        }
        @CustomType.Setter
        public Builder slackWebhookUrl(@Nullable String slackWebhookUrl) {

            this.slackWebhookUrl = slackWebhookUrl;
            return this;
        }
        public UserGroupNotificationSettings build() {
            final var _resultValue = new UserGroupNotificationSettings();
            _resultValue.groupEmailAddresses = groupEmailAddresses;
            _resultValue.microsoftTeamsWebhookUrl = microsoftTeamsWebhookUrl;
            _resultValue.sendMailToNewMembers = sendMailToNewMembers;
            _resultValue.sendNotificationsToMembers = sendNotificationsToMembers;
            _resultValue.slackChannel = slackChannel;
            _resultValue.slackWebhookUrl = slackWebhookUrl;
            return _resultValue;
        }
    }
}
