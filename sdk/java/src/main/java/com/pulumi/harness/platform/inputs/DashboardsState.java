// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardsState extends com.pulumi.resources.ResourceArgs {

    public static final DashboardsState Empty = new DashboardsState();

    /**
     * Created at timestamp of the Dashboard.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Created at timestamp of the Dashboard.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Unique identifier of the Template Dashboard to create from.
     * 
     */
    @Import(name="dashboardId")
    private @Nullable Output<String> dashboardId;

    /**
     * @return Unique identifier of the Template Dashboard to create from.
     * 
     */
    public Optional<Output<String>> dashboardId() {
        return Optional.ofNullable(this.dashboardId);
    }

    /**
     * Data Sources within the Dashboard.
     * 
     */
    @Import(name="dataSources")
    private @Nullable Output<List<String>> dataSources;

    /**
     * @return Data Sources within the Dashboard.
     * 
     */
    public Optional<Output<List<String>>> dataSources() {
        return Optional.ofNullable(this.dataSources);
    }

    /**
     * Description of the Dashboard.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the Dashboard.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Favorite count of the dashboard.
     * 
     */
    @Import(name="favoriteCount")
    private @Nullable Output<Integer> favoriteCount;

    /**
     * @return Favorite count of the dashboard.
     * 
     */
    public Optional<Output<Integer>> favoriteCount() {
        return Optional.ofNullable(this.favoriteCount);
    }

    /**
     * The Folder ID that the Dashboard belongs to.
     * 
     */
    @Import(name="folderId")
    private @Nullable Output<String> folderId;

    /**
     * @return The Folder ID that the Dashboard belongs to.
     * 
     */
    public Optional<Output<String>> folderId() {
        return Optional.ofNullable(this.folderId);
    }

    /**
     * Last accessed at timestamp of the Dashboard.
     * 
     */
    @Import(name="lastAccessedAt")
    private @Nullable Output<String> lastAccessedAt;

    /**
     * @return Last accessed at timestamp of the Dashboard.
     * 
     */
    public Optional<Output<String>> lastAccessedAt() {
        return Optional.ofNullable(this.lastAccessedAt);
    }

    /**
     * Data Models within the Dashboard.
     * 
     */
    @Import(name="models")
    private @Nullable Output<List<String>> models;

    /**
     * @return Data Models within the Dashboard.
     * 
     */
    public Optional<Output<List<String>>> models() {
        return Optional.ofNullable(this.models);
    }

    /**
     * Name of the Dashboard.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Dashboard.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Folder ID that the Dashboard belongs to.
     * 
     */
    @Import(name="resourceIdentifier")
    private @Nullable Output<String> resourceIdentifier;

    /**
     * @return The Folder ID that the Dashboard belongs to.
     * 
     */
    public Optional<Output<String>> resourceIdentifier() {
        return Optional.ofNullable(this.resourceIdentifier);
    }

    /**
     * Title of the Dashboard.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return Title of the Dashboard.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * Type of the dashboard.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of the dashboard.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * View count of the dashboard.
     * 
     */
    @Import(name="viewCount")
    private @Nullable Output<Integer> viewCount;

    /**
     * @return View count of the dashboard.
     * 
     */
    public Optional<Output<Integer>> viewCount() {
        return Optional.ofNullable(this.viewCount);
    }

    private DashboardsState() {}

    private DashboardsState(DashboardsState $) {
        this.createdAt = $.createdAt;
        this.dashboardId = $.dashboardId;
        this.dataSources = $.dataSources;
        this.description = $.description;
        this.favoriteCount = $.favoriteCount;
        this.folderId = $.folderId;
        this.lastAccessedAt = $.lastAccessedAt;
        this.models = $.models;
        this.name = $.name;
        this.resourceIdentifier = $.resourceIdentifier;
        this.title = $.title;
        this.type = $.type;
        this.viewCount = $.viewCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardsState $;

        public Builder() {
            $ = new DashboardsState();
        }

        public Builder(DashboardsState defaults) {
            $ = new DashboardsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt Created at timestamp of the Dashboard.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Created at timestamp of the Dashboard.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param dashboardId Unique identifier of the Template Dashboard to create from.
         * 
         * @return builder
         * 
         */
        public Builder dashboardId(@Nullable Output<String> dashboardId) {
            $.dashboardId = dashboardId;
            return this;
        }

        /**
         * @param dashboardId Unique identifier of the Template Dashboard to create from.
         * 
         * @return builder
         * 
         */
        public Builder dashboardId(String dashboardId) {
            return dashboardId(Output.of(dashboardId));
        }

        /**
         * @param dataSources Data Sources within the Dashboard.
         * 
         * @return builder
         * 
         */
        public Builder dataSources(@Nullable Output<List<String>> dataSources) {
            $.dataSources = dataSources;
            return this;
        }

        /**
         * @param dataSources Data Sources within the Dashboard.
         * 
         * @return builder
         * 
         */
        public Builder dataSources(List<String> dataSources) {
            return dataSources(Output.of(dataSources));
        }

        /**
         * @param dataSources Data Sources within the Dashboard.
         * 
         * @return builder
         * 
         */
        public Builder dataSources(String... dataSources) {
            return dataSources(List.of(dataSources));
        }

        /**
         * @param description Description of the Dashboard.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the Dashboard.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param favoriteCount Favorite count of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder favoriteCount(@Nullable Output<Integer> favoriteCount) {
            $.favoriteCount = favoriteCount;
            return this;
        }

        /**
         * @param favoriteCount Favorite count of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder favoriteCount(Integer favoriteCount) {
            return favoriteCount(Output.of(favoriteCount));
        }

        /**
         * @param folderId The Folder ID that the Dashboard belongs to.
         * 
         * @return builder
         * 
         */
        public Builder folderId(@Nullable Output<String> folderId) {
            $.folderId = folderId;
            return this;
        }

        /**
         * @param folderId The Folder ID that the Dashboard belongs to.
         * 
         * @return builder
         * 
         */
        public Builder folderId(String folderId) {
            return folderId(Output.of(folderId));
        }

        /**
         * @param lastAccessedAt Last accessed at timestamp of the Dashboard.
         * 
         * @return builder
         * 
         */
        public Builder lastAccessedAt(@Nullable Output<String> lastAccessedAt) {
            $.lastAccessedAt = lastAccessedAt;
            return this;
        }

        /**
         * @param lastAccessedAt Last accessed at timestamp of the Dashboard.
         * 
         * @return builder
         * 
         */
        public Builder lastAccessedAt(String lastAccessedAt) {
            return lastAccessedAt(Output.of(lastAccessedAt));
        }

        /**
         * @param models Data Models within the Dashboard.
         * 
         * @return builder
         * 
         */
        public Builder models(@Nullable Output<List<String>> models) {
            $.models = models;
            return this;
        }

        /**
         * @param models Data Models within the Dashboard.
         * 
         * @return builder
         * 
         */
        public Builder models(List<String> models) {
            return models(Output.of(models));
        }

        /**
         * @param models Data Models within the Dashboard.
         * 
         * @return builder
         * 
         */
        public Builder models(String... models) {
            return models(List.of(models));
        }

        /**
         * @param name Name of the Dashboard.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Dashboard.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceIdentifier The Folder ID that the Dashboard belongs to.
         * 
         * @return builder
         * 
         */
        public Builder resourceIdentifier(@Nullable Output<String> resourceIdentifier) {
            $.resourceIdentifier = resourceIdentifier;
            return this;
        }

        /**
         * @param resourceIdentifier The Folder ID that the Dashboard belongs to.
         * 
         * @return builder
         * 
         */
        public Builder resourceIdentifier(String resourceIdentifier) {
            return resourceIdentifier(Output.of(resourceIdentifier));
        }

        /**
         * @param title Title of the Dashboard.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Title of the Dashboard.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param type Type of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param viewCount View count of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder viewCount(@Nullable Output<Integer> viewCount) {
            $.viewCount = viewCount;
            return this;
        }

        /**
         * @param viewCount View count of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder viewCount(Integer viewCount) {
            return viewCount(Output.of(viewCount));
        }

        public DashboardsState build() {
            return $;
        }
    }

}
