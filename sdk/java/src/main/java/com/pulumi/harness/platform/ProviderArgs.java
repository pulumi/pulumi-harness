// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.ProviderSpecArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * The description of the provider entity.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the provider entity.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The identifier of the provider entity.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return The identifier of the provider entity.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * The name of the provider entity.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the provider entity.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Contains parameters related to the provider entity.
     * 
     */
    @Import(name="spec", required=true)
    private Output<ProviderSpecArgs> spec;

    /**
     * @return Contains parameters related to the provider entity.
     * 
     */
    public Output<ProviderSpecArgs> spec() {
        return this.spec;
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.description = $.description;
        this.identifier = $.identifier;
        this.name = $.name;
        this.spec = $.spec;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the provider entity.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the provider entity.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param identifier The identifier of the provider entity.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier The identifier of the provider entity.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param name The name of the provider entity.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the provider entity.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param spec Contains parameters related to the provider entity.
         * 
         * @return builder
         * 
         */
        public Builder spec(Output<ProviderSpecArgs> spec) {
            $.spec = spec;
            return this;
        }

        /**
         * @param spec Contains parameters related to the provider entity.
         * 
         * @return builder
         * 
         */
        public Builder spec(ProviderSpecArgs spec) {
            return spec(Output.of(spec));
        }

        public ProviderArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("ProviderArgs", "identifier");
            }
            if ($.spec == null) {
                throw new MissingRequiredPropertyException("ProviderArgs", "spec");
            }
            return $;
        }
    }

}
