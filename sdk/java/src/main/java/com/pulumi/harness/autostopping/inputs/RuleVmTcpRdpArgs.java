// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.autostopping.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuleVmTcpRdpArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuleVmTcpRdpArgs Empty = new RuleVmTcpRdpArgs();

    /**
     * Port to listen on the proxy
     * 
     */
    @Import(name="connectOn")
    private @Nullable Output<Integer> connectOn;

    /**
     * @return Port to listen on the proxy
     * 
     */
    public Optional<Output<Integer>> connectOn() {
        return Optional.ofNullable(this.connectOn);
    }

    /**
     * Port to listen on the vm
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Port to listen on the vm
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    private RuleVmTcpRdpArgs() {}

    private RuleVmTcpRdpArgs(RuleVmTcpRdpArgs $) {
        this.connectOn = $.connectOn;
        this.port = $.port;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleVmTcpRdpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleVmTcpRdpArgs $;

        public Builder() {
            $ = new RuleVmTcpRdpArgs();
        }

        public Builder(RuleVmTcpRdpArgs defaults) {
            $ = new RuleVmTcpRdpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectOn Port to listen on the proxy
         * 
         * @return builder
         * 
         */
        public Builder connectOn(@Nullable Output<Integer> connectOn) {
            $.connectOn = connectOn;
            return this;
        }

        /**
         * @param connectOn Port to listen on the proxy
         * 
         * @return builder
         * 
         */
        public Builder connectOn(Integer connectOn) {
            return connectOn(Output.of(connectOn));
        }

        /**
         * @param port Port to listen on the vm
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port to listen on the vm
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public RuleVmTcpRdpArgs build() {
            return $;
        }
    }

}
