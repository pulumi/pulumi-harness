// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderGiteaTokenRefArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderGiteaArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderGiteaArgs Empty = new GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderGiteaArgs();

    /**
     * Scan all branches instead of just the default branch.
     * 
     */
    @Import(name="allBranches")
    private @Nullable Output<Boolean> allBranches;

    /**
     * @return Scan all branches instead of just the default branch.
     * 
     */
    public Optional<Output<Boolean>> allBranches() {
        return Optional.ofNullable(this.allBranches);
    }

    /**
     * The Gitea URL to talk to. For example https://gitea.mydomain.com/.
     * 
     */
    @Import(name="api")
    private @Nullable Output<String> api;

    /**
     * @return The Gitea URL to talk to. For example https://gitea.mydomain.com/.
     * 
     */
    public Optional<Output<String>> api() {
        return Optional.ofNullable(this.api);
    }

    /**
     * Allow self-signed TLS / Certificates.
     * 
     */
    @Import(name="insecure")
    private @Nullable Output<Boolean> insecure;

    /**
     * @return Allow self-signed TLS / Certificates.
     * 
     */
    public Optional<Output<Boolean>> insecure() {
        return Optional.ofNullable(this.insecure);
    }

    /**
     * Gitea organization or user to scan.
     * 
     */
    @Import(name="owner", required=true)
    private Output<String> owner;

    /**
     * @return Gitea organization or user to scan.
     * 
     */
    public Output<String> owner() {
        return this.owner;
    }

    /**
     * Authentication token reference.
     * 
     */
    @Import(name="tokenRef")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderGiteaTokenRefArgs> tokenRef;

    /**
     * @return Authentication token reference.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderGiteaTokenRefArgs>> tokenRef() {
        return Optional.ofNullable(this.tokenRef);
    }

    private GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderGiteaArgs() {}

    private GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderGiteaArgs(GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderGiteaArgs $) {
        this.allBranches = $.allBranches;
        this.api = $.api;
        this.insecure = $.insecure;
        this.owner = $.owner;
        this.tokenRef = $.tokenRef;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderGiteaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderGiteaArgs $;

        public Builder() {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderGiteaArgs();
        }

        public Builder(GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderGiteaArgs defaults) {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderGiteaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allBranches Scan all branches instead of just the default branch.
         * 
         * @return builder
         * 
         */
        public Builder allBranches(@Nullable Output<Boolean> allBranches) {
            $.allBranches = allBranches;
            return this;
        }

        /**
         * @param allBranches Scan all branches instead of just the default branch.
         * 
         * @return builder
         * 
         */
        public Builder allBranches(Boolean allBranches) {
            return allBranches(Output.of(allBranches));
        }

        /**
         * @param api The Gitea URL to talk to. For example https://gitea.mydomain.com/.
         * 
         * @return builder
         * 
         */
        public Builder api(@Nullable Output<String> api) {
            $.api = api;
            return this;
        }

        /**
         * @param api The Gitea URL to talk to. For example https://gitea.mydomain.com/.
         * 
         * @return builder
         * 
         */
        public Builder api(String api) {
            return api(Output.of(api));
        }

        /**
         * @param insecure Allow self-signed TLS / Certificates.
         * 
         * @return builder
         * 
         */
        public Builder insecure(@Nullable Output<Boolean> insecure) {
            $.insecure = insecure;
            return this;
        }

        /**
         * @param insecure Allow self-signed TLS / Certificates.
         * 
         * @return builder
         * 
         */
        public Builder insecure(Boolean insecure) {
            return insecure(Output.of(insecure));
        }

        /**
         * @param owner Gitea organization or user to scan.
         * 
         * @return builder
         * 
         */
        public Builder owner(Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner Gitea organization or user to scan.
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        /**
         * @param tokenRef Authentication token reference.
         * 
         * @return builder
         * 
         */
        public Builder tokenRef(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderGiteaTokenRefArgs> tokenRef) {
            $.tokenRef = tokenRef;
            return this;
        }

        /**
         * @param tokenRef Authentication token reference.
         * 
         * @return builder
         * 
         */
        public Builder tokenRef(GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderGiteaTokenRefArgs tokenRef) {
            return tokenRef(Output.of(tokenRef));
        }

        public GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderGiteaArgs build() {
            if ($.owner == null) {
                throw new MissingRequiredPropertyException("GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorScmProviderGiteaArgs", "owner");
            }
            return $;
        }
    }

}
