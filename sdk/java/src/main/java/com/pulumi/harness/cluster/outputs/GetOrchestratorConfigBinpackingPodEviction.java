// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cluster.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.cluster.outputs.GetOrchestratorConfigBinpackingPodEvictionThreshold;
import java.util.Objects;

@CustomType
public final class GetOrchestratorConfigBinpackingPodEviction {
    /**
     * @return Minimum Threshold for considering a node as underutilized
     * 
     */
    private GetOrchestratorConfigBinpackingPodEvictionThreshold threshold;

    private GetOrchestratorConfigBinpackingPodEviction() {}
    /**
     * @return Minimum Threshold for considering a node as underutilized
     * 
     */
    public GetOrchestratorConfigBinpackingPodEvictionThreshold threshold() {
        return this.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOrchestratorConfigBinpackingPodEviction defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetOrchestratorConfigBinpackingPodEvictionThreshold threshold;
        public Builder() {}
        public Builder(GetOrchestratorConfigBinpackingPodEviction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.threshold = defaults.threshold;
        }

        @CustomType.Setter
        public Builder threshold(GetOrchestratorConfigBinpackingPodEvictionThreshold threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("GetOrchestratorConfigBinpackingPodEviction", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        public GetOrchestratorConfigBinpackingPodEviction build() {
            final var _resultValue = new GetOrchestratorConfigBinpackingPodEviction();
            _resultValue.threshold = threshold;
            return _resultValue;
        }
    }
}
