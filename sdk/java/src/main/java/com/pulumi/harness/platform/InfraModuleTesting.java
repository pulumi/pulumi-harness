// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.InfraModuleTestingArgs;
import com.pulumi.harness.platform.inputs.InfraModuleTestingState;
import com.pulumi.harness.platform.outputs.InfraModuleTestingTestingMetadata;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * ## Import
 * 
 * The `pulumi import` command can be used, for example:
 * 
 * ```sh
 * $ pulumi import harness:platform/infraModuleTesting:InfraModuleTesting example &lt;module_id&gt;
 * ```
 * 
 */
@ResourceType(type="harness:platform/infraModuleTesting:InfraModuleTesting")
public class InfraModuleTesting extends com.pulumi.resources.CustomResource {
    /**
     * Account that owns the module
     * 
     */
    @Export(name="account", refs={String.class}, tree="[0]")
    private Output<String> account;

    /**
     * @return Account that owns the module
     * 
     */
    public Output<String> account() {
        return this.account;
    }
    /**
     * Timestamp when the module was created
     * 
     */
    @Export(name="created", refs={Integer.class}, tree="[0]")
    private Output<Integer> created;

    /**
     * @return Timestamp when the module was created
     * 
     */
    public Output<Integer> created() {
        return this.created;
    }
    /**
     * Description of the module
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return Description of the module
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Git Tag Style
     * 
     */
    @Export(name="gitTagStyle", refs={String.class}, tree="[0]")
    private Output<String> gitTagStyle;

    /**
     * @return Git Tag Style
     * 
     */
    public Output<String> gitTagStyle() {
        return this.gitTagStyle;
    }
    /**
     * Error while retrieving the module
     * 
     */
    @Export(name="moduleError", refs={String.class}, tree="[0]")
    private Output<String> moduleError;

    /**
     * @return Error while retrieving the module
     * 
     */
    public Output<String> moduleError() {
        return this.moduleError;
    }
    /**
     * Identifier of the module to enable testing for
     * 
     */
    @Export(name="moduleId", refs={String.class}, tree="[0]")
    private Output<String> moduleId;

    /**
     * @return Identifier of the module to enable testing for
     * 
     */
    public Output<String> moduleId() {
        return this.moduleId;
    }
    /**
     * Name of the module
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the module
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Organization identifier
     * 
     */
    @Export(name="org", refs={String.class}, tree="[0]")
    private Output<String> org;

    /**
     * @return Organization identifier
     * 
     */
    public Output<String> org() {
        return this.org;
    }
    /**
     * List of pipeline IDs to create webhooks for triggering test executions
     * 
     */
    @Export(name="pipelines", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> pipelines;

    /**
     * @return List of pipeline IDs to create webhooks for triggering test executions
     * 
     */
    public Output<List<String>> pipelines() {
        return this.pipelines;
    }
    /**
     * Project identifier
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return Project identifier
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Provider connector for testing purposes
     * 
     */
    @Export(name="providerConnector", refs={String.class}, tree="[0]")
    private Output<String> providerConnector;

    /**
     * @return Provider connector for testing purposes
     * 
     */
    public Output<String> providerConnector() {
        return this.providerConnector;
    }
    @Export(name="provisionerType", refs={String.class}, tree="[0]")
    private Output<String> provisionerType;

    public Output<String> provisionerType() {
        return this.provisionerType;
    }
    /**
     * Provisioner version for testing purposes
     * 
     */
    @Export(name="provisionerVersion", refs={String.class}, tree="[0]")
    private Output<String> provisionerVersion;

    /**
     * @return Provisioner version for testing purposes
     * 
     */
    public Output<String> provisionerVersion() {
        return this.provisionerVersion;
    }
    /**
     * Pipeline ID to create webhooks for releases
     * 
     */
    @Export(name="releasePipeline", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> releasePipeline;

    /**
     * @return Pipeline ID to create webhooks for releases
     * 
     */
    public Output<Optional<String>> releasePipeline() {
        return Codegen.optional(this.releasePipeline);
    }
    /**
     * For account connectors, the repository where the module is stored
     * 
     */
    @Export(name="repository", refs={String.class}, tree="[0]")
    private Output<String> repository;

    /**
     * @return For account connectors, the repository where the module is stored
     * 
     */
    public Output<String> repository() {
        return this.repository;
    }
    /**
     * Repository Branch in which the module should be accessed
     * 
     */
    @Export(name="repositoryBranch", refs={String.class}, tree="[0]")
    private Output<String> repositoryBranch;

    /**
     * @return Repository Branch in which the module should be accessed
     * 
     */
    public Output<String> repositoryBranch() {
        return this.repositoryBranch;
    }
    /**
     * Repository Commit in which the module should be accessed
     * 
     */
    @Export(name="repositoryCommit", refs={String.class}, tree="[0]")
    private Output<String> repositoryCommit;

    /**
     * @return Repository Commit in which the module should be accessed
     * 
     */
    public Output<String> repositoryCommit() {
        return this.repositoryCommit;
    }
    /**
     * Repository Connector is the reference to the connector for the repository
     * 
     */
    @Export(name="repositoryConnector", refs={String.class}, tree="[0]")
    private Output<String> repositoryConnector;

    /**
     * @return Repository Connector is the reference to the connector for the repository
     * 
     */
    public Output<String> repositoryConnector() {
        return this.repositoryConnector;
    }
    /**
     * Repository Path is the path in which the module resides
     * 
     */
    @Export(name="repositoryPath", refs={String.class}, tree="[0]")
    private Output<String> repositoryPath;

    /**
     * @return Repository Path is the path in which the module resides
     * 
     */
    public Output<String> repositoryPath() {
        return this.repositoryPath;
    }
    /**
     * URL where the module is stored
     * 
     */
    @Export(name="repositoryUrl", refs={String.class}, tree="[0]")
    private Output<String> repositoryUrl;

    /**
     * @return URL where the module is stored
     * 
     */
    public Output<String> repositoryUrl() {
        return this.repositoryUrl;
    }
    /**
     * Timestamp when the module was last synced
     * 
     */
    @Export(name="synced", refs={Integer.class}, tree="[0]")
    private Output<Integer> synced;

    /**
     * @return Timestamp when the module was last synced
     * 
     */
    public Output<Integer> synced() {
        return this.synced;
    }
    /**
     * Provider of the module
     * 
     */
    @Export(name="system", refs={String.class}, tree="[0]")
    private Output<String> system;

    /**
     * @return Provider of the module
     * 
     */
    public Output<String> system() {
        return this.system;
    }
    /**
     * Tags associated with the module
     * 
     */
    @Export(name="tags", refs={String.class}, tree="[0]")
    private Output<String> tags;

    /**
     * @return Tags associated with the module
     * 
     */
    public Output<String> tags() {
        return this.tags;
    }
    /**
     * Whether testing is enabled for the module
     * 
     */
    @Export(name="testingEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> testingEnabled;

    /**
     * @return Whether testing is enabled for the module
     * 
     */
    public Output<Boolean> testingEnabled() {
        return this.testingEnabled;
    }
    /**
     * Testing metadata for the module
     * 
     */
    @Export(name="testingMetadata", refs={InfraModuleTestingTestingMetadata.class}, tree="[0]")
    private Output<InfraModuleTestingTestingMetadata> testingMetadata;

    /**
     * @return Testing metadata for the module
     * 
     */
    public Output<InfraModuleTestingTestingMetadata> testingMetadata() {
        return this.testingMetadata;
    }
    /**
     * Timestamp when the module was last modified
     * 
     */
    @Export(name="updated", refs={Integer.class}, tree="[0]")
    private Output<Integer> updated;

    /**
     * @return Timestamp when the module was last modified
     * 
     */
    public Output<Integer> updated() {
        return this.updated;
    }
    /**
     * Versions of the module
     * 
     */
    @Export(name="versions", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> versions;

    /**
     * @return Versions of the module
     * 
     */
    public Output<List<String>> versions() {
        return this.versions;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public InfraModuleTesting(java.lang.String name) {
        this(name, InfraModuleTestingArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public InfraModuleTesting(java.lang.String name, InfraModuleTestingArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public InfraModuleTesting(java.lang.String name, InfraModuleTestingArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/infraModuleTesting:InfraModuleTesting", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private InfraModuleTesting(java.lang.String name, Output<java.lang.String> id, @Nullable InfraModuleTestingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/infraModuleTesting:InfraModuleTesting", name, state, makeResourceOptions(options, id), false);
    }

    private static InfraModuleTestingArgs makeArgs(InfraModuleTestingArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? InfraModuleTestingArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static InfraModuleTesting get(java.lang.String name, Output<java.lang.String> id, @Nullable InfraModuleTestingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new InfraModuleTesting(name, id, state, options);
    }
}
