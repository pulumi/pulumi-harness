// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSecurityGovernanceRuleArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSecurityGovernanceRuleArgs Empty = new GetSecurityGovernanceRuleArgs();

    /**
     * The ID of the rule.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The ID of the rule.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name of the rule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the rule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The organization identifier.
     * 
     */
    @Import(name="orgId", required=true)
    private Output<String> orgId;

    /**
     * @return The organization identifier.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * The project identifier.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The project identifier.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    private GetSecurityGovernanceRuleArgs() {}

    private GetSecurityGovernanceRuleArgs(GetSecurityGovernanceRuleArgs $) {
        this.id = $.id;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSecurityGovernanceRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSecurityGovernanceRuleArgs $;

        public Builder() {
            $ = new GetSecurityGovernanceRuleArgs();
        }

        public Builder(GetSecurityGovernanceRuleArgs defaults) {
            $ = new GetSecurityGovernanceRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id The ID of the rule.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the rule.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name The name of the rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId The organization identifier.
         * 
         * @return builder
         * 
         */
        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The organization identifier.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId The project identifier.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project identifier.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public GetSecurityGovernanceRuleArgs build() {
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("GetSecurityGovernanceRuleArgs", "orgId");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("GetSecurityGovernanceRuleArgs", "projectId");
            }
            return $;
        }
    }

}
