// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cluster.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.cluster.inputs.GetOrchestratorConfigBinpackingDisruptionBudgetSchedule;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetOrchestratorConfigBinpackingDisruptionBudget extends com.pulumi.resources.InvokeArgs {

    public static final GetOrchestratorConfigBinpackingDisruptionBudget Empty = new GetOrchestratorConfigBinpackingDisruptionBudget();

    /**
     * Number or percentage of Nodes to consider for disruption
     * 
     */
    @Import(name="nodes", required=true)
    private String nodes;

    /**
     * @return Number or percentage of Nodes to consider for disruption
     * 
     */
    public String nodes() {
        return this.nodes;
    }

    /**
     * Reasons for disruption
     * 
     */
    @Import(name="reasons")
    private @Nullable List<String> reasons;

    /**
     * @return Reasons for disruption
     * 
     */
    public Optional<List<String>> reasons() {
        return Optional.ofNullable(this.reasons);
    }

    /**
     * Schedule for disruption budget
     * 
     */
    @Import(name="schedule")
    private @Nullable GetOrchestratorConfigBinpackingDisruptionBudgetSchedule schedule;

    /**
     * @return Schedule for disruption budget
     * 
     */
    public Optional<GetOrchestratorConfigBinpackingDisruptionBudgetSchedule> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    private GetOrchestratorConfigBinpackingDisruptionBudget() {}

    private GetOrchestratorConfigBinpackingDisruptionBudget(GetOrchestratorConfigBinpackingDisruptionBudget $) {
        this.nodes = $.nodes;
        this.reasons = $.reasons;
        this.schedule = $.schedule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetOrchestratorConfigBinpackingDisruptionBudget defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetOrchestratorConfigBinpackingDisruptionBudget $;

        public Builder() {
            $ = new GetOrchestratorConfigBinpackingDisruptionBudget();
        }

        public Builder(GetOrchestratorConfigBinpackingDisruptionBudget defaults) {
            $ = new GetOrchestratorConfigBinpackingDisruptionBudget(Objects.requireNonNull(defaults));
        }

        /**
         * @param nodes Number or percentage of Nodes to consider for disruption
         * 
         * @return builder
         * 
         */
        public Builder nodes(String nodes) {
            $.nodes = nodes;
            return this;
        }

        /**
         * @param reasons Reasons for disruption
         * 
         * @return builder
         * 
         */
        public Builder reasons(@Nullable List<String> reasons) {
            $.reasons = reasons;
            return this;
        }

        /**
         * @param reasons Reasons for disruption
         * 
         * @return builder
         * 
         */
        public Builder reasons(String... reasons) {
            return reasons(List.of(reasons));
        }

        /**
         * @param schedule Schedule for disruption budget
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable GetOrchestratorConfigBinpackingDisruptionBudgetSchedule schedule) {
            $.schedule = schedule;
            return this;
        }

        public GetOrchestratorConfigBinpackingDisruptionBudget build() {
            if ($.nodes == null) {
                throw new MissingRequiredPropertyException("GetOrchestratorConfigBinpackingDisruptionBudget", "nodes");
            }
            return $;
        }
    }

}
