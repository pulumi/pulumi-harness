// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class GetServiceOverridesV2GitDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetServiceOverridesV2GitDetailsArgs Empty = new GetServiceOverridesV2GitDetailsArgs();

    /**
     * Name of the branch.
     * 
     */
    @Import(name="branch", required=true)
    private Output<String> branch;

    /**
     * @return Name of the branch.
     * 
     */
    public Output<String> branch() {
        return this.branch;
    }

    /**
     * Load service yaml from fallback branch
     * 
     */
    @Import(name="loadFromCache", required=true)
    private Output<Boolean> loadFromCache;

    /**
     * @return Load service yaml from fallback branch
     * 
     */
    public Output<Boolean> loadFromCache() {
        return this.loadFromCache;
    }

    /**
     * Load service yaml from fallback branch
     * 
     */
    @Import(name="loadFromFallbackBranch", required=true)
    private Output<Boolean> loadFromFallbackBranch;

    /**
     * @return Load service yaml from fallback branch
     * 
     */
    public Output<Boolean> loadFromFallbackBranch() {
        return this.loadFromFallbackBranch;
    }

    /**
     * Repo name of remote service override
     * 
     */
    @Import(name="repoName", required=true)
    private Output<String> repoName;

    /**
     * @return Repo name of remote service override
     * 
     */
    public Output<String> repoName() {
        return this.repoName;
    }

    private GetServiceOverridesV2GitDetailsArgs() {}

    private GetServiceOverridesV2GitDetailsArgs(GetServiceOverridesV2GitDetailsArgs $) {
        this.branch = $.branch;
        this.loadFromCache = $.loadFromCache;
        this.loadFromFallbackBranch = $.loadFromFallbackBranch;
        this.repoName = $.repoName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetServiceOverridesV2GitDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetServiceOverridesV2GitDetailsArgs $;

        public Builder() {
            $ = new GetServiceOverridesV2GitDetailsArgs();
        }

        public Builder(GetServiceOverridesV2GitDetailsArgs defaults) {
            $ = new GetServiceOverridesV2GitDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branch Name of the branch.
         * 
         * @return builder
         * 
         */
        public Builder branch(Output<String> branch) {
            $.branch = branch;
            return this;
        }

        /**
         * @param branch Name of the branch.
         * 
         * @return builder
         * 
         */
        public Builder branch(String branch) {
            return branch(Output.of(branch));
        }

        /**
         * @param loadFromCache Load service yaml from fallback branch
         * 
         * @return builder
         * 
         */
        public Builder loadFromCache(Output<Boolean> loadFromCache) {
            $.loadFromCache = loadFromCache;
            return this;
        }

        /**
         * @param loadFromCache Load service yaml from fallback branch
         * 
         * @return builder
         * 
         */
        public Builder loadFromCache(Boolean loadFromCache) {
            return loadFromCache(Output.of(loadFromCache));
        }

        /**
         * @param loadFromFallbackBranch Load service yaml from fallback branch
         * 
         * @return builder
         * 
         */
        public Builder loadFromFallbackBranch(Output<Boolean> loadFromFallbackBranch) {
            $.loadFromFallbackBranch = loadFromFallbackBranch;
            return this;
        }

        /**
         * @param loadFromFallbackBranch Load service yaml from fallback branch
         * 
         * @return builder
         * 
         */
        public Builder loadFromFallbackBranch(Boolean loadFromFallbackBranch) {
            return loadFromFallbackBranch(Output.of(loadFromFallbackBranch));
        }

        /**
         * @param repoName Repo name of remote service override
         * 
         * @return builder
         * 
         */
        public Builder repoName(Output<String> repoName) {
            $.repoName = repoName;
            return this;
        }

        /**
         * @param repoName Repo name of remote service override
         * 
         * @return builder
         * 
         */
        public Builder repoName(String repoName) {
            return repoName(Output.of(repoName));
        }

        public GetServiceOverridesV2GitDetailsArgs build() {
            if ($.branch == null) {
                throw new MissingRequiredPropertyException("GetServiceOverridesV2GitDetailsArgs", "branch");
            }
            if ($.loadFromCache == null) {
                throw new MissingRequiredPropertyException("GetServiceOverridesV2GitDetailsArgs", "loadFromCache");
            }
            if ($.loadFromFallbackBranch == null) {
                throw new MissingRequiredPropertyException("GetServiceOverridesV2GitDetailsArgs", "loadFromFallbackBranch");
            }
            if ($.repoName == null) {
                throw new MissingRequiredPropertyException("GetServiceOverridesV2GitDetailsArgs", "repoName");
            }
            return $;
        }
    }

}
