// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTemplateGitDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetTemplateGitDetailsArgs Empty = new GetTemplateGitDetailsArgs();

    /**
     * Name of the branch.
     * 
     */
    @Import(name="branchName")
    private @Nullable Output<String> branchName;

    /**
     * @return Name of the branch.
     * 
     */
    public Optional<Output<String>> branchName() {
        return Optional.ofNullable(this.branchName);
    }

    /**
     * File path of the Entity in the repository.
     * 
     */
    @Import(name="filePath")
    private @Nullable Output<String> filePath;

    /**
     * @return File path of the Entity in the repository.
     * 
     */
    public Optional<Output<String>> filePath() {
        return Optional.ofNullable(this.filePath);
    }

    /**
     * File url of the Entity in the repository.
     * 
     */
    @Import(name="fileUrl")
    private @Nullable Output<String> fileUrl;

    /**
     * @return File url of the Entity in the repository.
     * 
     */
    public Optional<Output<String>> fileUrl() {
        return Optional.ofNullable(this.fileUrl);
    }

    /**
     * Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
     * 
     */
    @Import(name="lastCommitId", required=true)
    private Output<String> lastCommitId;

    /**
     * @return Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
     * 
     */
    public Output<String> lastCommitId() {
        return this.lastCommitId;
    }

    /**
     * Last object identifier (for Github). To be provided only when updating Pipeline.
     * 
     */
    @Import(name="lastObjectId", required=true)
    private Output<String> lastObjectId;

    /**
     * @return Last object identifier (for Github). To be provided only when updating Pipeline.
     * 
     */
    public Output<String> lastObjectId() {
        return this.lastObjectId;
    }

    /**
     * Name of the repository.
     * 
     */
    @Import(name="repoName")
    private @Nullable Output<String> repoName;

    /**
     * @return Name of the repository.
     * 
     */
    public Optional<Output<String>> repoName() {
        return Optional.ofNullable(this.repoName);
    }

    /**
     * Repo url of the Entity in the repository.
     * 
     */
    @Import(name="repoUrl")
    private @Nullable Output<String> repoUrl;

    /**
     * @return Repo url of the Entity in the repository.
     * 
     */
    public Optional<Output<String>> repoUrl() {
        return Optional.ofNullable(this.repoUrl);
    }

    private GetTemplateGitDetailsArgs() {}

    private GetTemplateGitDetailsArgs(GetTemplateGitDetailsArgs $) {
        this.branchName = $.branchName;
        this.filePath = $.filePath;
        this.fileUrl = $.fileUrl;
        this.lastCommitId = $.lastCommitId;
        this.lastObjectId = $.lastObjectId;
        this.repoName = $.repoName;
        this.repoUrl = $.repoUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTemplateGitDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTemplateGitDetailsArgs $;

        public Builder() {
            $ = new GetTemplateGitDetailsArgs();
        }

        public Builder(GetTemplateGitDetailsArgs defaults) {
            $ = new GetTemplateGitDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branchName Name of the branch.
         * 
         * @return builder
         * 
         */
        public Builder branchName(@Nullable Output<String> branchName) {
            $.branchName = branchName;
            return this;
        }

        /**
         * @param branchName Name of the branch.
         * 
         * @return builder
         * 
         */
        public Builder branchName(String branchName) {
            return branchName(Output.of(branchName));
        }

        /**
         * @param filePath File path of the Entity in the repository.
         * 
         * @return builder
         * 
         */
        public Builder filePath(@Nullable Output<String> filePath) {
            $.filePath = filePath;
            return this;
        }

        /**
         * @param filePath File path of the Entity in the repository.
         * 
         * @return builder
         * 
         */
        public Builder filePath(String filePath) {
            return filePath(Output.of(filePath));
        }

        /**
         * @param fileUrl File url of the Entity in the repository.
         * 
         * @return builder
         * 
         */
        public Builder fileUrl(@Nullable Output<String> fileUrl) {
            $.fileUrl = fileUrl;
            return this;
        }

        /**
         * @param fileUrl File url of the Entity in the repository.
         * 
         * @return builder
         * 
         */
        public Builder fileUrl(String fileUrl) {
            return fileUrl(Output.of(fileUrl));
        }

        /**
         * @param lastCommitId Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder lastCommitId(Output<String> lastCommitId) {
            $.lastCommitId = lastCommitId;
            return this;
        }

        /**
         * @param lastCommitId Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder lastCommitId(String lastCommitId) {
            return lastCommitId(Output.of(lastCommitId));
        }

        /**
         * @param lastObjectId Last object identifier (for Github). To be provided only when updating Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder lastObjectId(Output<String> lastObjectId) {
            $.lastObjectId = lastObjectId;
            return this;
        }

        /**
         * @param lastObjectId Last object identifier (for Github). To be provided only when updating Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder lastObjectId(String lastObjectId) {
            return lastObjectId(Output.of(lastObjectId));
        }

        /**
         * @param repoName Name of the repository.
         * 
         * @return builder
         * 
         */
        public Builder repoName(@Nullable Output<String> repoName) {
            $.repoName = repoName;
            return this;
        }

        /**
         * @param repoName Name of the repository.
         * 
         * @return builder
         * 
         */
        public Builder repoName(String repoName) {
            return repoName(Output.of(repoName));
        }

        /**
         * @param repoUrl Repo url of the Entity in the repository.
         * 
         * @return builder
         * 
         */
        public Builder repoUrl(@Nullable Output<String> repoUrl) {
            $.repoUrl = repoUrl;
            return this;
        }

        /**
         * @param repoUrl Repo url of the Entity in the repository.
         * 
         * @return builder
         * 
         */
        public Builder repoUrl(String repoUrl) {
            return repoUrl(Output.of(repoUrl));
        }

        public GetTemplateGitDetailsArgs build() {
            if ($.lastCommitId == null) {
                throw new MissingRequiredPropertyException("GetTemplateGitDetailsArgs", "lastCommitId");
            }
            if ($.lastObjectId == null) {
                throw new MissingRequiredPropertyException("GetTemplateGitDetailsArgs", "lastObjectId");
            }
            return $;
        }
    }

}
