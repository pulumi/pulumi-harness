// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.autostopping.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRuleVmHttpHealth extends com.pulumi.resources.InvokeArgs {

    public static final GetRuleVmHttpHealth Empty = new GetRuleVmHttpHealth();

    /**
     * API path to use for health check
     * 
     */
    @Import(name="path")
    private @Nullable String path;

    /**
     * @return API path to use for health check
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Health check port on the VM
     * 
     */
    @Import(name="port", required=true)
    private Integer port;

    /**
     * @return Health check port on the VM
     * 
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Protocol can be http or https
     * 
     */
    @Import(name="protocol", required=true)
    private String protocol;

    /**
     * @return Protocol can be http or https
     * 
     */
    public String protocol() {
        return this.protocol;
    }

    /**
     * Lower limit for acceptable status code
     * 
     */
    @Import(name="statusCodeFrom")
    private @Nullable Integer statusCodeFrom;

    /**
     * @return Lower limit for acceptable status code
     * 
     */
    public Optional<Integer> statusCodeFrom() {
        return Optional.ofNullable(this.statusCodeFrom);
    }

    /**
     * Upper limit for acceptable status code
     * 
     */
    @Import(name="statusCodeTo")
    private @Nullable Integer statusCodeTo;

    /**
     * @return Upper limit for acceptable status code
     * 
     */
    public Optional<Integer> statusCodeTo() {
        return Optional.ofNullable(this.statusCodeTo);
    }

    /**
     * Health check timeout
     * 
     */
    @Import(name="timeout")
    private @Nullable Integer timeout;

    /**
     * @return Health check timeout
     * 
     */
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    private GetRuleVmHttpHealth() {}

    private GetRuleVmHttpHealth(GetRuleVmHttpHealth $) {
        this.path = $.path;
        this.port = $.port;
        this.protocol = $.protocol;
        this.statusCodeFrom = $.statusCodeFrom;
        this.statusCodeTo = $.statusCodeTo;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRuleVmHttpHealth defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRuleVmHttpHealth $;

        public Builder() {
            $ = new GetRuleVmHttpHealth();
        }

        public Builder(GetRuleVmHttpHealth defaults) {
            $ = new GetRuleVmHttpHealth(Objects.requireNonNull(defaults));
        }

        /**
         * @param path API path to use for health check
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable String path) {
            $.path = path;
            return this;
        }

        /**
         * @param port Health check port on the VM
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            $.port = port;
            return this;
        }

        /**
         * @param protocol Protocol can be http or https
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param statusCodeFrom Lower limit for acceptable status code
         * 
         * @return builder
         * 
         */
        public Builder statusCodeFrom(@Nullable Integer statusCodeFrom) {
            $.statusCodeFrom = statusCodeFrom;
            return this;
        }

        /**
         * @param statusCodeTo Upper limit for acceptable status code
         * 
         * @return builder
         * 
         */
        public Builder statusCodeTo(@Nullable Integer statusCodeTo) {
            $.statusCodeTo = statusCodeTo;
            return this;
        }

        /**
         * @param timeout Health check timeout
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Integer timeout) {
            $.timeout = timeout;
            return this;
        }

        public GetRuleVmHttpHealth build() {
            if ($.port == null) {
                throw new MissingRequiredPropertyException("GetRuleVmHttpHealth", "port");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("GetRuleVmHttpHealth", "protocol");
            }
            return $;
        }
    }

}
