// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitoredServiceRequestHealthSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitoredServiceRequestHealthSourceArgs Empty = new MonitoredServiceRequestHealthSourceArgs();

    /**
     * Identifier of the health source.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return Identifier of the health source.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * Name of the health source.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the health source.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Specification of the health source. Depends on the type of the health source.
     * 
     */
    @Import(name="spec", required=true)
    private Output<String> spec;

    /**
     * @return Specification of the health source. Depends on the type of the health source.
     * 
     */
    public Output<String> spec() {
        return this.spec;
    }

    /**
     * Type of the health source.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of the health source.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Version of the health source.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return Version of the health source.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private MonitoredServiceRequestHealthSourceArgs() {}

    private MonitoredServiceRequestHealthSourceArgs(MonitoredServiceRequestHealthSourceArgs $) {
        this.identifier = $.identifier;
        this.name = $.name;
        this.spec = $.spec;
        this.type = $.type;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitoredServiceRequestHealthSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitoredServiceRequestHealthSourceArgs $;

        public Builder() {
            $ = new MonitoredServiceRequestHealthSourceArgs();
        }

        public Builder(MonitoredServiceRequestHealthSourceArgs defaults) {
            $ = new MonitoredServiceRequestHealthSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identifier Identifier of the health source.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Identifier of the health source.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param name Name of the health source.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the health source.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param spec Specification of the health source. Depends on the type of the health source.
         * 
         * @return builder
         * 
         */
        public Builder spec(Output<String> spec) {
            $.spec = spec;
            return this;
        }

        /**
         * @param spec Specification of the health source. Depends on the type of the health source.
         * 
         * @return builder
         * 
         */
        public Builder spec(String spec) {
            return spec(Output.of(spec));
        }

        /**
         * @param type Type of the health source.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the health source.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param version Version of the health source.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Version of the health source.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public MonitoredServiceRequestHealthSourceArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("MonitoredServiceRequestHealthSourceArgs", "identifier");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("MonitoredServiceRequestHealthSourceArgs", "name");
            }
            if ($.spec == null) {
                throw new MissingRequiredPropertyException("MonitoredServiceRequestHealthSourceArgs", "spec");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("MonitoredServiceRequestHealthSourceArgs", "type");
            }
            return $;
        }
    }

}
