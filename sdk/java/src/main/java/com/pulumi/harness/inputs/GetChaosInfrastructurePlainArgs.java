// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetChaosInfrastructurePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetChaosInfrastructurePlainArgs Empty = new GetChaosInfrastructurePlainArgs();

    /**
     * Environment identifier of the chaos infrastructure.
     * 
     */
    @Import(name="environmentId", required=true)
    private String environmentId;

    /**
     * @return Environment identifier of the chaos infrastructure.
     * 
     */
    public String environmentId() {
        return this.environmentId;
    }

    /**
     * Identifier of the chaos infrastructure.
     * 
     */
    @Import(name="identifier", required=true)
    private String identifier;

    /**
     * @return Identifier of the chaos infrastructure.
     * 
     */
    public String identifier() {
        return this.identifier;
    }

    /**
     * Identifier of the organization in which the chaos infrastructure is configured.
     * 
     */
    @Import(name="orgId", required=true)
    private String orgId;

    /**
     * @return Identifier of the organization in which the chaos infrastructure is configured.
     * 
     */
    public String orgId() {
        return this.orgId;
    }

    /**
     * Identifier of the project in which the chaos infrastructure is configured.
     * 
     */
    @Import(name="projectId", required=true)
    private String projectId;

    /**
     * @return Identifier of the project in which the chaos infrastructure is configured.
     * 
     */
    public String projectId() {
        return this.projectId;
    }

    private GetChaosInfrastructurePlainArgs() {}

    private GetChaosInfrastructurePlainArgs(GetChaosInfrastructurePlainArgs $) {
        this.environmentId = $.environmentId;
        this.identifier = $.identifier;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetChaosInfrastructurePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetChaosInfrastructurePlainArgs $;

        public Builder() {
            $ = new GetChaosInfrastructurePlainArgs();
        }

        public Builder(GetChaosInfrastructurePlainArgs defaults) {
            $ = new GetChaosInfrastructurePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param environmentId Environment identifier of the chaos infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(String environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        /**
         * @param identifier Identifier of the chaos infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param orgId Identifier of the organization in which the chaos infrastructure is configured.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param projectId Identifier of the project in which the chaos infrastructure is configured.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            $.projectId = projectId;
            return this;
        }

        public GetChaosInfrastructurePlainArgs build() {
            if ($.environmentId == null) {
                throw new MissingRequiredPropertyException("GetChaosInfrastructurePlainArgs", "environmentId");
            }
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("GetChaosInfrastructurePlainArgs", "identifier");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("GetChaosInfrastructurePlainArgs", "orgId");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("GetChaosInfrastructurePlainArgs", "projectId");
            }
            return $;
        }
    }

}
