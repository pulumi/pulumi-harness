// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDbInstancePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDbInstancePlainArgs Empty = new GetDbInstancePlainArgs();

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier", required=true)
    private String identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public String identifier() {
        return this.identifier;
    }

    /**
     * The properties to substitute in liquibase changelog
     * 
     */
    @Import(name="liquibaseSubstituteProperties")
    private @Nullable Map<String,String> liquibaseSubstituteProperties;

    /**
     * @return The properties to substitute in liquibase changelog
     * 
     */
    public Optional<Map<String,String>> liquibaseSubstituteProperties() {
        return Optional.ofNullable(this.liquibaseSubstituteProperties);
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId", required=true)
    private String orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public String orgId() {
        return this.orgId;
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId", required=true)
    private String projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public String projectId() {
        return this.projectId;
    }

    /**
     * The identifier of the parent database schema
     * 
     */
    @Import(name="schema", required=true)
    private String schema;

    /**
     * @return The identifier of the parent database schema
     * 
     */
    public String schema() {
        return this.schema;
    }

    private GetDbInstancePlainArgs() {}

    private GetDbInstancePlainArgs(GetDbInstancePlainArgs $) {
        this.identifier = $.identifier;
        this.liquibaseSubstituteProperties = $.liquibaseSubstituteProperties;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.schema = $.schema;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDbInstancePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDbInstancePlainArgs $;

        public Builder() {
            $ = new GetDbInstancePlainArgs();
        }

        public Builder(GetDbInstancePlainArgs defaults) {
            $ = new GetDbInstancePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param liquibaseSubstituteProperties The properties to substitute in liquibase changelog
         * 
         * @return builder
         * 
         */
        public Builder liquibaseSubstituteProperties(@Nullable Map<String,String> liquibaseSubstituteProperties) {
            $.liquibaseSubstituteProperties = liquibaseSubstituteProperties;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param schema The identifier of the parent database schema
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            $.schema = schema;
            return this;
        }

        public GetDbInstancePlainArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("GetDbInstancePlainArgs", "identifier");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("GetDbInstancePlainArgs", "orgId");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("GetDbInstancePlainArgs", "projectId");
            }
            if ($.schema == null) {
                throw new MissingRequiredPropertyException("GetDbInstancePlainArgs", "schema");
            }
            return $;
        }
    }

}
