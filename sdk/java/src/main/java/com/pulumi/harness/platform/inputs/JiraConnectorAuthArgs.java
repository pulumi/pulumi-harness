// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.JiraConnectorAuthPersonalAccessTokenArgs;
import com.pulumi.harness.platform.inputs.JiraConnectorAuthUsernamePasswordArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JiraConnectorAuthArgs extends com.pulumi.resources.ResourceArgs {

    public static final JiraConnectorAuthArgs Empty = new JiraConnectorAuthArgs();

    /**
     * Authentication types for Jira connector
     * 
     */
    @Import(name="authType", required=true)
    private Output<String> authType;

    /**
     * @return Authentication types for Jira connector
     * 
     */
    public Output<String> authType() {
        return this.authType;
    }

    /**
     * Authenticate using personal access token.
     * 
     */
    @Import(name="personalAccessToken")
    private @Nullable Output<JiraConnectorAuthPersonalAccessTokenArgs> personalAccessToken;

    /**
     * @return Authenticate using personal access token.
     * 
     */
    public Optional<Output<JiraConnectorAuthPersonalAccessTokenArgs>> personalAccessToken() {
        return Optional.ofNullable(this.personalAccessToken);
    }

    /**
     * Authenticate using username password.
     * 
     */
    @Import(name="usernamePassword")
    private @Nullable Output<JiraConnectorAuthUsernamePasswordArgs> usernamePassword;

    /**
     * @return Authenticate using username password.
     * 
     */
    public Optional<Output<JiraConnectorAuthUsernamePasswordArgs>> usernamePassword() {
        return Optional.ofNullable(this.usernamePassword);
    }

    private JiraConnectorAuthArgs() {}

    private JiraConnectorAuthArgs(JiraConnectorAuthArgs $) {
        this.authType = $.authType;
        this.personalAccessToken = $.personalAccessToken;
        this.usernamePassword = $.usernamePassword;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JiraConnectorAuthArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JiraConnectorAuthArgs $;

        public Builder() {
            $ = new JiraConnectorAuthArgs();
        }

        public Builder(JiraConnectorAuthArgs defaults) {
            $ = new JiraConnectorAuthArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authType Authentication types for Jira connector
         * 
         * @return builder
         * 
         */
        public Builder authType(Output<String> authType) {
            $.authType = authType;
            return this;
        }

        /**
         * @param authType Authentication types for Jira connector
         * 
         * @return builder
         * 
         */
        public Builder authType(String authType) {
            return authType(Output.of(authType));
        }

        /**
         * @param personalAccessToken Authenticate using personal access token.
         * 
         * @return builder
         * 
         */
        public Builder personalAccessToken(@Nullable Output<JiraConnectorAuthPersonalAccessTokenArgs> personalAccessToken) {
            $.personalAccessToken = personalAccessToken;
            return this;
        }

        /**
         * @param personalAccessToken Authenticate using personal access token.
         * 
         * @return builder
         * 
         */
        public Builder personalAccessToken(JiraConnectorAuthPersonalAccessTokenArgs personalAccessToken) {
            return personalAccessToken(Output.of(personalAccessToken));
        }

        /**
         * @param usernamePassword Authenticate using username password.
         * 
         * @return builder
         * 
         */
        public Builder usernamePassword(@Nullable Output<JiraConnectorAuthUsernamePasswordArgs> usernamePassword) {
            $.usernamePassword = usernamePassword;
            return this;
        }

        /**
         * @param usernamePassword Authenticate using username password.
         * 
         * @return builder
         * 
         */
        public Builder usernamePassword(JiraConnectorAuthUsernamePasswordArgs usernamePassword) {
            return usernamePassword(Output.of(usernamePassword));
        }

        public JiraConnectorAuthArgs build() {
            if ($.authType == null) {
                throw new MissingRequiredPropertyException("JiraConnectorAuthArgs", "authType");
            }
            return $;
        }
    }

}
