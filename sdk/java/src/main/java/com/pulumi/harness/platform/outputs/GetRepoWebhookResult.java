// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRepoWebhookResult {
    /**
     * @return Timestamp when the webhook was created.
     * 
     */
    private Integer created;
    /**
     * @return ID of the user who created the webhook.
     * 
     */
    private Integer createdBy;
    /**
     * @return Description of the webhook.
     * 
     */
    private @Nullable String description;
    /**
     * @return Webhook enabled.
     * 
     */
    private Boolean enabled;
    /**
     * @return Created webhook has secret encoding.
     * 
     */
    private Boolean hasSecret;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Identifier of the webhook.
     * 
     */
    private String identifier;
    /**
     * @return Allow insecure connections for provided webhook URL.
     * 
     */
    private Boolean insecure;
    /**
     * @return Unique identifier of the organization.
     * 
     */
    private @Nullable String orgId;
    /**
     * @return Unique identifier of the project.
     * 
     */
    private @Nullable String projectId;
    /**
     * @return Identifier of the repository.
     * 
     */
    private String repoIdentifier;
    /**
     * @return Webhook secret which will be used to sign the webhook payload.
     * 
     */
    private @Nullable String secret;
    /**
     * @return List of triggers of the webhook (keep empty for all triggers).
     * 
     */
    private @Nullable List<String> triggers;
    /**
     * @return URL that&#39;s called by the webhook.
     * 
     */
    private String url;

    private GetRepoWebhookResult() {}
    /**
     * @return Timestamp when the webhook was created.
     * 
     */
    public Integer created() {
        return this.created;
    }
    /**
     * @return ID of the user who created the webhook.
     * 
     */
    public Integer createdBy() {
        return this.createdBy;
    }
    /**
     * @return Description of the webhook.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Webhook enabled.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Created webhook has secret encoding.
     * 
     */
    public Boolean hasSecret() {
        return this.hasSecret;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Identifier of the webhook.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return Allow insecure connections for provided webhook URL.
     * 
     */
    public Boolean insecure() {
        return this.insecure;
    }
    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }
    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return Identifier of the repository.
     * 
     */
    public String repoIdentifier() {
        return this.repoIdentifier;
    }
    /**
     * @return Webhook secret which will be used to sign the webhook payload.
     * 
     */
    public Optional<String> secret() {
        return Optional.ofNullable(this.secret);
    }
    /**
     * @return List of triggers of the webhook (keep empty for all triggers).
     * 
     */
    public List<String> triggers() {
        return this.triggers == null ? List.of() : this.triggers;
    }
    /**
     * @return URL that&#39;s called by the webhook.
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepoWebhookResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer created;
        private Integer createdBy;
        private @Nullable String description;
        private Boolean enabled;
        private Boolean hasSecret;
        private String id;
        private String identifier;
        private Boolean insecure;
        private @Nullable String orgId;
        private @Nullable String projectId;
        private String repoIdentifier;
        private @Nullable String secret;
        private @Nullable List<String> triggers;
        private String url;
        public Builder() {}
        public Builder(GetRepoWebhookResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.created = defaults.created;
    	      this.createdBy = defaults.createdBy;
    	      this.description = defaults.description;
    	      this.enabled = defaults.enabled;
    	      this.hasSecret = defaults.hasSecret;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.insecure = defaults.insecure;
    	      this.orgId = defaults.orgId;
    	      this.projectId = defaults.projectId;
    	      this.repoIdentifier = defaults.repoIdentifier;
    	      this.secret = defaults.secret;
    	      this.triggers = defaults.triggers;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder created(Integer created) {
            if (created == null) {
              throw new MissingRequiredPropertyException("GetRepoWebhookResult", "created");
            }
            this.created = created;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(Integer createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetRepoWebhookResult", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetRepoWebhookResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder hasSecret(Boolean hasSecret) {
            if (hasSecret == null) {
              throw new MissingRequiredPropertyException("GetRepoWebhookResult", "hasSecret");
            }
            this.hasSecret = hasSecret;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRepoWebhookResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            if (identifier == null) {
              throw new MissingRequiredPropertyException("GetRepoWebhookResult", "identifier");
            }
            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder insecure(Boolean insecure) {
            if (insecure == null) {
              throw new MissingRequiredPropertyException("GetRepoWebhookResult", "insecure");
            }
            this.insecure = insecure;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(@Nullable String orgId) {

            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder repoIdentifier(String repoIdentifier) {
            if (repoIdentifier == null) {
              throw new MissingRequiredPropertyException("GetRepoWebhookResult", "repoIdentifier");
            }
            this.repoIdentifier = repoIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder secret(@Nullable String secret) {

            this.secret = secret;
            return this;
        }
        @CustomType.Setter
        public Builder triggers(@Nullable List<String> triggers) {

            this.triggers = triggers;
            return this;
        }
        public Builder triggers(String... triggers) {
            return triggers(List.of(triggers));
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetRepoWebhookResult", "url");
            }
            this.url = url;
            return this;
        }
        public GetRepoWebhookResult build() {
            final var _resultValue = new GetRepoWebhookResult();
            _resultValue.created = created;
            _resultValue.createdBy = createdBy;
            _resultValue.description = description;
            _resultValue.enabled = enabled;
            _resultValue.hasSecret = hasSecret;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.insecure = insecure;
            _resultValue.orgId = orgId;
            _resultValue.projectId = projectId;
            _resultValue.repoIdentifier = repoIdentifier;
            _resultValue.secret = secret;
            _resultValue.triggers = triggers;
            _resultValue.url = url;
            return _resultValue;
        }
    }
}
