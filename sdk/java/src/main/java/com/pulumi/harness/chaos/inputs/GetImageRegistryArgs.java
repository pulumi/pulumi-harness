// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImageRegistryArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetImageRegistryArgs Empty = new GetImageRegistryArgs();

    /**
     * Whether to check if override is allowed
     * 
     */
    @Import(name="checkOverride")
    private @Nullable Output<Boolean> checkOverride;

    /**
     * @return Whether to check if override is allowed
     * 
     */
    public Optional<Output<Boolean>> checkOverride() {
        return Optional.ofNullable(this.checkOverride);
    }

    /**
     * The infrastructure ID to set up the image registry
     * 
     */
    @Import(name="infraId")
    private @Nullable Output<String> infraId;

    /**
     * @return The infrastructure ID to set up the image registry
     * 
     */
    public Optional<Output<String>> infraId() {
        return Optional.ofNullable(this.infraId);
    }

    /**
     * The organization ID of the image registry
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return The organization ID of the image registry
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * The project ID of the image registry
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The project ID of the image registry
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    private GetImageRegistryArgs() {}

    private GetImageRegistryArgs(GetImageRegistryArgs $) {
        this.checkOverride = $.checkOverride;
        this.infraId = $.infraId;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImageRegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImageRegistryArgs $;

        public Builder() {
            $ = new GetImageRegistryArgs();
        }

        public Builder(GetImageRegistryArgs defaults) {
            $ = new GetImageRegistryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkOverride Whether to check if override is allowed
         * 
         * @return builder
         * 
         */
        public Builder checkOverride(@Nullable Output<Boolean> checkOverride) {
            $.checkOverride = checkOverride;
            return this;
        }

        /**
         * @param checkOverride Whether to check if override is allowed
         * 
         * @return builder
         * 
         */
        public Builder checkOverride(Boolean checkOverride) {
            return checkOverride(Output.of(checkOverride));
        }

        /**
         * @param infraId The infrastructure ID to set up the image registry
         * 
         * @return builder
         * 
         */
        public Builder infraId(@Nullable Output<String> infraId) {
            $.infraId = infraId;
            return this;
        }

        /**
         * @param infraId The infrastructure ID to set up the image registry
         * 
         * @return builder
         * 
         */
        public Builder infraId(String infraId) {
            return infraId(Output.of(infraId));
        }

        /**
         * @param orgId The organization ID of the image registry
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The organization ID of the image registry
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId The project ID of the image registry
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project ID of the image registry
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public GetImageRegistryArgs build() {
            return $;
        }
    }

}
