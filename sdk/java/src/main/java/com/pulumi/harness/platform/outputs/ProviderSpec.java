// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProviderSpec {
    /**
     * @return Client Id of the OAuth app to connect
     * 
     */
    private @Nullable String clientId;
    /**
     * @return Client Secret Ref of the OAuth app to connect
     * 
     */
    private @Nullable String clientSecretRef;
    /**
     * @return Delegate selectors to fetch the access token
     * 
     */
    private @Nullable List<String> delegateSelectors;
    /**
     * @return Host domain of the provider.
     * 
     */
    private @Nullable String domain;
    /**
     * @return Secret Manager Ref to store the access/refresh tokens
     * 
     */
    private @Nullable String secretManagerRef;
    /**
     * @return The type of the provider entity.
     * 
     */
    private String type;

    private ProviderSpec() {}
    /**
     * @return Client Id of the OAuth app to connect
     * 
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }
    /**
     * @return Client Secret Ref of the OAuth app to connect
     * 
     */
    public Optional<String> clientSecretRef() {
        return Optional.ofNullable(this.clientSecretRef);
    }
    /**
     * @return Delegate selectors to fetch the access token
     * 
     */
    public List<String> delegateSelectors() {
        return this.delegateSelectors == null ? List.of() : this.delegateSelectors;
    }
    /**
     * @return Host domain of the provider.
     * 
     */
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }
    /**
     * @return Secret Manager Ref to store the access/refresh tokens
     * 
     */
    public Optional<String> secretManagerRef() {
        return Optional.ofNullable(this.secretManagerRef);
    }
    /**
     * @return The type of the provider entity.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProviderSpec defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String clientId;
        private @Nullable String clientSecretRef;
        private @Nullable List<String> delegateSelectors;
        private @Nullable String domain;
        private @Nullable String secretManagerRef;
        private String type;
        public Builder() {}
        public Builder(ProviderSpec defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientId = defaults.clientId;
    	      this.clientSecretRef = defaults.clientSecretRef;
    	      this.delegateSelectors = defaults.delegateSelectors;
    	      this.domain = defaults.domain;
    	      this.secretManagerRef = defaults.secretManagerRef;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder clientId(@Nullable String clientId) {

            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecretRef(@Nullable String clientSecretRef) {

            this.clientSecretRef = clientSecretRef;
            return this;
        }
        @CustomType.Setter
        public Builder delegateSelectors(@Nullable List<String> delegateSelectors) {

            this.delegateSelectors = delegateSelectors;
            return this;
        }
        public Builder delegateSelectors(String... delegateSelectors) {
            return delegateSelectors(List.of(delegateSelectors));
        }
        @CustomType.Setter
        public Builder domain(@Nullable String domain) {

            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder secretManagerRef(@Nullable String secretManagerRef) {

            this.secretManagerRef = secretManagerRef;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("ProviderSpec", "type");
            }
            this.type = type;
            return this;
        }
        public ProviderSpec build() {
            final var _resultValue = new ProviderSpec();
            _resultValue.clientId = clientId;
            _resultValue.clientSecretRef = clientSecretRef;
            _resultValue.delegateSelectors = delegateSelectors;
            _resultValue.domain = domain;
            _resultValue.secretManagerRef = secretManagerRef;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
