// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.service.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.service.outputs.GetDiscoveryAgentConfig;
import com.pulumi.harness.service.outputs.GetDiscoveryAgentInstallationDetail;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDiscoveryAgentResult {
    /**
     * @return Configuration for the agent.
     * 
     */
    private List<GetDiscoveryAgentConfig> configs;
    /**
     * @return Correlation ID for the agent.
     * 
     */
    private String correlationId;
    /**
     * @return Timestamp when the agent was created.
     * 
     */
    private String createdAt;
    /**
     * @return User who created the agent.
     * 
     */
    private String createdBy;
    /**
     * @return Description of the agent.
     * 
     */
    private String description;
    /**
     * @return The environment identifier of the agent. This is a required field.
     * 
     */
    private String environmentIdentifier;
    /**
     * @return The unique identifier of the agent.
     * 
     */
    private String id;
    /**
     * @return The unique identity of the agent. Either this or &#39;name&#39; must be provided.
     * 
     */
    private @Nullable String identity;
    /**
     * @return Installation details of the agent.
     * 
     */
    private List<GetDiscoveryAgentInstallationDetail> installationDetails;
    /**
     * @return Type of installation for the agent.
     * 
     */
    private String installationType;
    /**
     * @return The name of the agent. Either this or &#39;identity&#39; must be provided.
     * 
     */
    private @Nullable String name;
    /**
     * @return Number of network maps associated with this agent.
     * 
     */
    private Integer networkMapCount;
    /**
     * @return The organization identifier of the agent (optional). Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     * 
     */
    private @Nullable String orgIdentifier;
    /**
     * @return Whether this is a permanent installation.
     * 
     */
    private Boolean permanentInstallation;
    /**
     * @return The project identifier of the agent (optional). Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     * 
     */
    private @Nullable String projectIdentifier;
    /**
     * @return Whether the agent has been removed.
     * 
     */
    private Boolean removed;
    /**
     * @return Timestamp when the agent was removed.
     * 
     */
    private String removedAt;
    /**
     * @return Number of services managed by this agent.
     * 
     */
    private Integer serviceCount;
    /**
     * @return Key-value list of resource tags for the agent.
     * 
     */
    private List<String> tags;
    /**
     * @return Timestamp when the agent was last updated.
     * 
     */
    private String updatedAt;
    /**
     * @return User who last updated the agent.
     * 
     */
    private String updatedBy;
    /**
     * @return Webhook URL for the agent.
     * 
     */
    private String webhookUrl;

    private GetDiscoveryAgentResult() {}
    /**
     * @return Configuration for the agent.
     * 
     */
    public List<GetDiscoveryAgentConfig> configs() {
        return this.configs;
    }
    /**
     * @return Correlation ID for the agent.
     * 
     */
    public String correlationId() {
        return this.correlationId;
    }
    /**
     * @return Timestamp when the agent was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return User who created the agent.
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return Description of the agent.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The environment identifier of the agent. This is a required field.
     * 
     */
    public String environmentIdentifier() {
        return this.environmentIdentifier;
    }
    /**
     * @return The unique identifier of the agent.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The unique identity of the agent. Either this or &#39;name&#39; must be provided.
     * 
     */
    public Optional<String> identity() {
        return Optional.ofNullable(this.identity);
    }
    /**
     * @return Installation details of the agent.
     * 
     */
    public List<GetDiscoveryAgentInstallationDetail> installationDetails() {
        return this.installationDetails;
    }
    /**
     * @return Type of installation for the agent.
     * 
     */
    public String installationType() {
        return this.installationType;
    }
    /**
     * @return The name of the agent. Either this or &#39;identity&#39; must be provided.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Number of network maps associated with this agent.
     * 
     */
    public Integer networkMapCount() {
        return this.networkMapCount;
    }
    /**
     * @return The organization identifier of the agent (optional). Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     * 
     */
    public Optional<String> orgIdentifier() {
        return Optional.ofNullable(this.orgIdentifier);
    }
    /**
     * @return Whether this is a permanent installation.
     * 
     */
    public Boolean permanentInstallation() {
        return this.permanentInstallation;
    }
    /**
     * @return The project identifier of the agent (optional). Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     * 
     */
    public Optional<String> projectIdentifier() {
        return Optional.ofNullable(this.projectIdentifier);
    }
    /**
     * @return Whether the agent has been removed.
     * 
     */
    public Boolean removed() {
        return this.removed;
    }
    /**
     * @return Timestamp when the agent was removed.
     * 
     */
    public String removedAt() {
        return this.removedAt;
    }
    /**
     * @return Number of services managed by this agent.
     * 
     */
    public Integer serviceCount() {
        return this.serviceCount;
    }
    /**
     * @return Key-value list of resource tags for the agent.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return Timestamp when the agent was last updated.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }
    /**
     * @return User who last updated the agent.
     * 
     */
    public String updatedBy() {
        return this.updatedBy;
    }
    /**
     * @return Webhook URL for the agent.
     * 
     */
    public String webhookUrl() {
        return this.webhookUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDiscoveryAgentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetDiscoveryAgentConfig> configs;
        private String correlationId;
        private String createdAt;
        private String createdBy;
        private String description;
        private String environmentIdentifier;
        private String id;
        private @Nullable String identity;
        private List<GetDiscoveryAgentInstallationDetail> installationDetails;
        private String installationType;
        private @Nullable String name;
        private Integer networkMapCount;
        private @Nullable String orgIdentifier;
        private Boolean permanentInstallation;
        private @Nullable String projectIdentifier;
        private Boolean removed;
        private String removedAt;
        private Integer serviceCount;
        private List<String> tags;
        private String updatedAt;
        private String updatedBy;
        private String webhookUrl;
        public Builder() {}
        public Builder(GetDiscoveryAgentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configs = defaults.configs;
    	      this.correlationId = defaults.correlationId;
    	      this.createdAt = defaults.createdAt;
    	      this.createdBy = defaults.createdBy;
    	      this.description = defaults.description;
    	      this.environmentIdentifier = defaults.environmentIdentifier;
    	      this.id = defaults.id;
    	      this.identity = defaults.identity;
    	      this.installationDetails = defaults.installationDetails;
    	      this.installationType = defaults.installationType;
    	      this.name = defaults.name;
    	      this.networkMapCount = defaults.networkMapCount;
    	      this.orgIdentifier = defaults.orgIdentifier;
    	      this.permanentInstallation = defaults.permanentInstallation;
    	      this.projectIdentifier = defaults.projectIdentifier;
    	      this.removed = defaults.removed;
    	      this.removedAt = defaults.removedAt;
    	      this.serviceCount = defaults.serviceCount;
    	      this.tags = defaults.tags;
    	      this.updatedAt = defaults.updatedAt;
    	      this.updatedBy = defaults.updatedBy;
    	      this.webhookUrl = defaults.webhookUrl;
        }

        @CustomType.Setter
        public Builder configs(List<GetDiscoveryAgentConfig> configs) {
            if (configs == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentResult", "configs");
            }
            this.configs = configs;
            return this;
        }
        public Builder configs(GetDiscoveryAgentConfig... configs) {
            return configs(List.of(configs));
        }
        @CustomType.Setter
        public Builder correlationId(String correlationId) {
            if (correlationId == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentResult", "correlationId");
            }
            this.correlationId = correlationId;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentResult", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder environmentIdentifier(String environmentIdentifier) {
            if (environmentIdentifier == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentResult", "environmentIdentifier");
            }
            this.environmentIdentifier = environmentIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identity(@Nullable String identity) {

            this.identity = identity;
            return this;
        }
        @CustomType.Setter
        public Builder installationDetails(List<GetDiscoveryAgentInstallationDetail> installationDetails) {
            if (installationDetails == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentResult", "installationDetails");
            }
            this.installationDetails = installationDetails;
            return this;
        }
        public Builder installationDetails(GetDiscoveryAgentInstallationDetail... installationDetails) {
            return installationDetails(List.of(installationDetails));
        }
        @CustomType.Setter
        public Builder installationType(String installationType) {
            if (installationType == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentResult", "installationType");
            }
            this.installationType = installationType;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkMapCount(Integer networkMapCount) {
            if (networkMapCount == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentResult", "networkMapCount");
            }
            this.networkMapCount = networkMapCount;
            return this;
        }
        @CustomType.Setter
        public Builder orgIdentifier(@Nullable String orgIdentifier) {

            this.orgIdentifier = orgIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder permanentInstallation(Boolean permanentInstallation) {
            if (permanentInstallation == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentResult", "permanentInstallation");
            }
            this.permanentInstallation = permanentInstallation;
            return this;
        }
        @CustomType.Setter
        public Builder projectIdentifier(@Nullable String projectIdentifier) {

            this.projectIdentifier = projectIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder removed(Boolean removed) {
            if (removed == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentResult", "removed");
            }
            this.removed = removed;
            return this;
        }
        @CustomType.Setter
        public Builder removedAt(String removedAt) {
            if (removedAt == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentResult", "removedAt");
            }
            this.removedAt = removedAt;
            return this;
        }
        @CustomType.Setter
        public Builder serviceCount(Integer serviceCount) {
            if (serviceCount == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentResult", "serviceCount");
            }
            this.serviceCount = serviceCount;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentResult", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder updatedBy(String updatedBy) {
            if (updatedBy == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentResult", "updatedBy");
            }
            this.updatedBy = updatedBy;
            return this;
        }
        @CustomType.Setter
        public Builder webhookUrl(String webhookUrl) {
            if (webhookUrl == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentResult", "webhookUrl");
            }
            this.webhookUrl = webhookUrl;
            return this;
        }
        public GetDiscoveryAgentResult build() {
            final var _resultValue = new GetDiscoveryAgentResult();
            _resultValue.configs = configs;
            _resultValue.correlationId = correlationId;
            _resultValue.createdAt = createdAt;
            _resultValue.createdBy = createdBy;
            _resultValue.description = description;
            _resultValue.environmentIdentifier = environmentIdentifier;
            _resultValue.id = id;
            _resultValue.identity = identity;
            _resultValue.installationDetails = installationDetails;
            _resultValue.installationType = installationType;
            _resultValue.name = name;
            _resultValue.networkMapCount = networkMapCount;
            _resultValue.orgIdentifier = orgIdentifier;
            _resultValue.permanentInstallation = permanentInstallation;
            _resultValue.projectIdentifier = projectIdentifier;
            _resultValue.removed = removed;
            _resultValue.removedAt = removedAt;
            _resultValue.serviceCount = serviceCount;
            _resultValue.tags = tags;
            _resultValue.updatedAt = updatedAt;
            _resultValue.updatedBy = updatedBy;
            _resultValue.webhookUrl = webhookUrl;
            return _resultValue;
        }
    }
}
