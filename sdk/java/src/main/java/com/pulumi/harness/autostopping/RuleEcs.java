// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.autostopping;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.autostopping.RuleEcsArgs;
import com.pulumi.harness.autostopping.inputs.RuleEcsState;
import com.pulumi.harness.autostopping.outputs.RuleEcsContainer;
import com.pulumi.harness.autostopping.outputs.RuleEcsDepend;
import com.pulumi.harness.autostopping.outputs.RuleEcsHttp;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for creating a Harness Variables.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.autostopping.RuleEcs;
 * import com.pulumi.harness.autostopping.RuleEcsArgs;
 * import com.pulumi.harness.autostopping.inputs.RuleEcsContainerArgs;
 * import com.pulumi.harness.autostopping.inputs.RuleEcsDependArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new RuleEcs("test", RuleEcsArgs.builder()
 *             .name("name")
 *             .cloudConnectorId("cloud_connector_id")
 *             .idleTimeMins(10)
 *             .dryRun(true)
 *             .container(RuleEcsContainerArgs.builder()
 *                 .cluster("cluster")
 *                 .service("service")
 *                 .region("us-east-1")
 *                 .taskCount(1)
 *                 .build())
 *             .tcp(List.of(Map.ofEntries(
 *                 Map.entry("proxyId", "proxy_id"),
 *                 Map.entry("forwardRule", List.of(Map.of("port", 2233)))
 *             )))
 *             .depends(RuleEcsDependArgs.builder()
 *                 .ruleId(24576)
 *                 .delayInSec(5)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 */
@ResourceType(type="harness:autostopping/ruleEcs:RuleEcs")
public class RuleEcs extends com.pulumi.resources.CustomResource {
    /**
     * Id of the cloud connector
     * 
     */
    @Export(name="cloudConnectorId", refs={String.class}, tree="[0]")
    private Output<String> cloudConnectorId;

    /**
     * @return Id of the cloud connector
     * 
     */
    public Output<String> cloudConnectorId() {
        return this.cloudConnectorId;
    }
    @Export(name="container", refs={RuleEcsContainer.class}, tree="[0]")
    private Output</* @Nullable */ RuleEcsContainer> container;

    public Output<Optional<RuleEcsContainer>> container() {
        return Codegen.optional(this.container);
    }
    /**
     * Custom URLs used to access the instances
     * 
     */
    @Export(name="customDomains", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> customDomains;

    /**
     * @return Custom URLs used to access the instances
     * 
     */
    public Output<Optional<List<String>>> customDomains() {
        return Codegen.optional(this.customDomains);
    }
    /**
     * Dependent rules
     * 
     */
    @Export(name="depends", refs={List.class,RuleEcsDepend.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RuleEcsDepend>> depends;

    /**
     * @return Dependent rules
     * 
     */
    public Output<Optional<List<RuleEcsDepend>>> depends() {
        return Codegen.optional(this.depends);
    }
    /**
     * Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
     * 
     */
    @Export(name="dryRun", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> dryRun;

    /**
     * @return Boolean that indicates whether the AutoStopping rule should be created in DryRun mode
     * 
     */
    public Output<Optional<Boolean>> dryRun() {
        return Codegen.optional(this.dryRun);
    }
    /**
     * Http routing configuration
     * 
     */
    @Export(name="https", refs={List.class,RuleEcsHttp.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RuleEcsHttp>> https;

    /**
     * @return Http routing configuration
     * 
     */
    public Output<Optional<List<RuleEcsHttp>>> https() {
        return Codegen.optional(this.https);
    }
    /**
     * Unique identifier of the resource
     * 
     */
    @Export(name="identifier", refs={Double.class}, tree="[0]")
    private Output<Double> identifier;

    /**
     * @return Unique identifier of the resource
     * 
     */
    public Output<Double> identifier() {
        return this.identifier;
    }
    /**
     * Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
     * 
     */
    @Export(name="idleTimeMins", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> idleTimeMins;

    /**
     * @return Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
     * 
     */
    public Output<Optional<Integer>> idleTimeMins() {
        return Codegen.optional(this.idleTimeMins);
    }
    /**
     * Name of the rule
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the rule
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RuleEcs(java.lang.String name) {
        this(name, RuleEcsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RuleEcs(java.lang.String name, RuleEcsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RuleEcs(java.lang.String name, RuleEcsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:autostopping/ruleEcs:RuleEcs", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private RuleEcs(java.lang.String name, Output<java.lang.String> id, @Nullable RuleEcsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:autostopping/ruleEcs:RuleEcs", name, state, makeResourceOptions(options, id), false);
    }

    private static RuleEcsArgs makeArgs(RuleEcsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RuleEcsArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RuleEcs get(java.lang.String name, Output<java.lang.String> id, @Nullable RuleEcsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RuleEcs(name, id, state, options);
    }
}
