// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GitopsAppProjectProjectSpecClusterResourceBlacklistArgs;
import com.pulumi.harness.platform.inputs.GitopsAppProjectProjectSpecClusterResourceWhitelistArgs;
import com.pulumi.harness.platform.inputs.GitopsAppProjectProjectSpecDestinationArgs;
import com.pulumi.harness.platform.inputs.GitopsAppProjectProjectSpecNamespaceResourceBlacklistArgs;
import com.pulumi.harness.platform.inputs.GitopsAppProjectProjectSpecNamespaceResourceWhitelistArgs;
import com.pulumi.harness.platform.inputs.GitopsAppProjectProjectSpecOrphanedResourceArgs;
import com.pulumi.harness.platform.inputs.GitopsAppProjectProjectSpecRoleArgs;
import com.pulumi.harness.platform.inputs.GitopsAppProjectProjectSpecSignatureKeyArgs;
import com.pulumi.harness.platform.inputs.GitopsAppProjectProjectSpecSyncWindowArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsAppProjectProjectSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsAppProjectProjectSpecArgs Empty = new GitopsAppProjectProjectSpecArgs();

    /**
     * Cluster resource blacklist for the GitOps project.
     * 
     */
    @Import(name="clusterResourceBlacklists")
    private @Nullable Output<List<GitopsAppProjectProjectSpecClusterResourceBlacklistArgs>> clusterResourceBlacklists;

    /**
     * @return Cluster resource blacklist for the GitOps project.
     * 
     */
    public Optional<Output<List<GitopsAppProjectProjectSpecClusterResourceBlacklistArgs>>> clusterResourceBlacklists() {
        return Optional.ofNullable(this.clusterResourceBlacklists);
    }

    /**
     * Cluster resource whitelist for the Argo project.
     * 
     */
    @Import(name="clusterResourceWhitelists")
    private @Nullable Output<List<GitopsAppProjectProjectSpecClusterResourceWhitelistArgs>> clusterResourceWhitelists;

    /**
     * @return Cluster resource whitelist for the Argo project.
     * 
     */
    public Optional<Output<List<GitopsAppProjectProjectSpecClusterResourceWhitelistArgs>>> clusterResourceWhitelists() {
        return Optional.ofNullable(this.clusterResourceWhitelists);
    }

    /**
     * Description of the Argo project.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the Argo project.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Allowed destinations for applications in this Argo project.
     * 
     */
    @Import(name="destinations")
    private @Nullable Output<List<GitopsAppProjectProjectSpecDestinationArgs>> destinations;

    /**
     * @return Allowed destinations for applications in this Argo project.
     * 
     */
    public Optional<Output<List<GitopsAppProjectProjectSpecDestinationArgs>>> destinations() {
        return Optional.ofNullable(this.destinations);
    }

    /**
     * Namespace resource blacklist for the Argo project.
     * 
     */
    @Import(name="namespaceResourceBlacklists")
    private @Nullable Output<List<GitopsAppProjectProjectSpecNamespaceResourceBlacklistArgs>> namespaceResourceBlacklists;

    /**
     * @return Namespace resource blacklist for the Argo project.
     * 
     */
    public Optional<Output<List<GitopsAppProjectProjectSpecNamespaceResourceBlacklistArgs>>> namespaceResourceBlacklists() {
        return Optional.ofNullable(this.namespaceResourceBlacklists);
    }

    /**
     * Namespace resource whitelist for the GitOps project.
     * 
     */
    @Import(name="namespaceResourceWhitelists")
    private @Nullable Output<List<GitopsAppProjectProjectSpecNamespaceResourceWhitelistArgs>> namespaceResourceWhitelists;

    /**
     * @return Namespace resource whitelist for the GitOps project.
     * 
     */
    public Optional<Output<List<GitopsAppProjectProjectSpecNamespaceResourceWhitelistArgs>>> namespaceResourceWhitelists() {
        return Optional.ofNullable(this.namespaceResourceWhitelists);
    }

    /**
     * OrphanedResources specifies if agent should monitor orphaned resources of apps in this project
     * 
     */
    @Import(name="orphanedResources")
    private @Nullable Output<List<GitopsAppProjectProjectSpecOrphanedResourceArgs>> orphanedResources;

    /**
     * @return OrphanedResources specifies if agent should monitor orphaned resources of apps in this project
     * 
     */
    public Optional<Output<List<GitopsAppProjectProjectSpecOrphanedResourceArgs>>> orphanedResources() {
        return Optional.ofNullable(this.orphanedResources);
    }

    /**
     * This option determines whether destinations can only reference clusters which are argo project-scoped
     * 
     */
    @Import(name="permitOnlyProjectScopedClusters")
    private @Nullable Output<Boolean> permitOnlyProjectScopedClusters;

    /**
     * @return This option determines whether destinations can only reference clusters which are argo project-scoped
     * 
     */
    public Optional<Output<Boolean>> permitOnlyProjectScopedClusters() {
        return Optional.ofNullable(this.permitOnlyProjectScopedClusters);
    }

    /**
     * Roles associated with the Argo project.
     * 
     */
    @Import(name="roles")
    private @Nullable Output<List<GitopsAppProjectProjectSpecRoleArgs>> roles;

    /**
     * @return Roles associated with the Argo project.
     * 
     */
    public Optional<Output<List<GitopsAppProjectProjectSpecRoleArgs>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    /**
     * Signature keys for the GitOps project.
     * 
     */
    @Import(name="signatureKeys")
    private @Nullable Output<List<GitopsAppProjectProjectSpecSignatureKeyArgs>> signatureKeys;

    /**
     * @return Signature keys for the GitOps project.
     * 
     */
    public Optional<Output<List<GitopsAppProjectProjectSpecSignatureKeyArgs>>> signatureKeys() {
        return Optional.ofNullable(this.signatureKeys);
    }

    /**
     * Source namespaces defines the namespaces application resources are allowed to be created in.
     * 
     */
    @Import(name="sourceNamespaces")
    private @Nullable Output<List<String>> sourceNamespaces;

    /**
     * @return Source namespaces defines the namespaces application resources are allowed to be created in.
     * 
     */
    public Optional<Output<List<String>>> sourceNamespaces() {
        return Optional.ofNullable(this.sourceNamespaces);
    }

    /**
     * Allowed Source repositories for the Argo project.
     * 
     */
    @Import(name="sourceRepos")
    private @Nullable Output<List<String>> sourceRepos;

    /**
     * @return Allowed Source repositories for the Argo project.
     * 
     */
    public Optional<Output<List<String>>> sourceRepos() {
        return Optional.ofNullable(this.sourceRepos);
    }

    /**
     * Synchronization windows for the GitOps project.
     * 
     */
    @Import(name="syncWindows")
    private @Nullable Output<List<GitopsAppProjectProjectSpecSyncWindowArgs>> syncWindows;

    /**
     * @return Synchronization windows for the GitOps project.
     * 
     */
    public Optional<Output<List<GitopsAppProjectProjectSpecSyncWindowArgs>>> syncWindows() {
        return Optional.ofNullable(this.syncWindows);
    }

    private GitopsAppProjectProjectSpecArgs() {}

    private GitopsAppProjectProjectSpecArgs(GitopsAppProjectProjectSpecArgs $) {
        this.clusterResourceBlacklists = $.clusterResourceBlacklists;
        this.clusterResourceWhitelists = $.clusterResourceWhitelists;
        this.description = $.description;
        this.destinations = $.destinations;
        this.namespaceResourceBlacklists = $.namespaceResourceBlacklists;
        this.namespaceResourceWhitelists = $.namespaceResourceWhitelists;
        this.orphanedResources = $.orphanedResources;
        this.permitOnlyProjectScopedClusters = $.permitOnlyProjectScopedClusters;
        this.roles = $.roles;
        this.signatureKeys = $.signatureKeys;
        this.sourceNamespaces = $.sourceNamespaces;
        this.sourceRepos = $.sourceRepos;
        this.syncWindows = $.syncWindows;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsAppProjectProjectSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsAppProjectProjectSpecArgs $;

        public Builder() {
            $ = new GitopsAppProjectProjectSpecArgs();
        }

        public Builder(GitopsAppProjectProjectSpecArgs defaults) {
            $ = new GitopsAppProjectProjectSpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterResourceBlacklists Cluster resource blacklist for the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceBlacklists(@Nullable Output<List<GitopsAppProjectProjectSpecClusterResourceBlacklistArgs>> clusterResourceBlacklists) {
            $.clusterResourceBlacklists = clusterResourceBlacklists;
            return this;
        }

        /**
         * @param clusterResourceBlacklists Cluster resource blacklist for the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceBlacklists(List<GitopsAppProjectProjectSpecClusterResourceBlacklistArgs> clusterResourceBlacklists) {
            return clusterResourceBlacklists(Output.of(clusterResourceBlacklists));
        }

        /**
         * @param clusterResourceBlacklists Cluster resource blacklist for the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceBlacklists(GitopsAppProjectProjectSpecClusterResourceBlacklistArgs... clusterResourceBlacklists) {
            return clusterResourceBlacklists(List.of(clusterResourceBlacklists));
        }

        /**
         * @param clusterResourceWhitelists Cluster resource whitelist for the Argo project.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceWhitelists(@Nullable Output<List<GitopsAppProjectProjectSpecClusterResourceWhitelistArgs>> clusterResourceWhitelists) {
            $.clusterResourceWhitelists = clusterResourceWhitelists;
            return this;
        }

        /**
         * @param clusterResourceWhitelists Cluster resource whitelist for the Argo project.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceWhitelists(List<GitopsAppProjectProjectSpecClusterResourceWhitelistArgs> clusterResourceWhitelists) {
            return clusterResourceWhitelists(Output.of(clusterResourceWhitelists));
        }

        /**
         * @param clusterResourceWhitelists Cluster resource whitelist for the Argo project.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceWhitelists(GitopsAppProjectProjectSpecClusterResourceWhitelistArgs... clusterResourceWhitelists) {
            return clusterResourceWhitelists(List.of(clusterResourceWhitelists));
        }

        /**
         * @param description Description of the Argo project.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the Argo project.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destinations Allowed destinations for applications in this Argo project.
         * 
         * @return builder
         * 
         */
        public Builder destinations(@Nullable Output<List<GitopsAppProjectProjectSpecDestinationArgs>> destinations) {
            $.destinations = destinations;
            return this;
        }

        /**
         * @param destinations Allowed destinations for applications in this Argo project.
         * 
         * @return builder
         * 
         */
        public Builder destinations(List<GitopsAppProjectProjectSpecDestinationArgs> destinations) {
            return destinations(Output.of(destinations));
        }

        /**
         * @param destinations Allowed destinations for applications in this Argo project.
         * 
         * @return builder
         * 
         */
        public Builder destinations(GitopsAppProjectProjectSpecDestinationArgs... destinations) {
            return destinations(List.of(destinations));
        }

        /**
         * @param namespaceResourceBlacklists Namespace resource blacklist for the Argo project.
         * 
         * @return builder
         * 
         */
        public Builder namespaceResourceBlacklists(@Nullable Output<List<GitopsAppProjectProjectSpecNamespaceResourceBlacklistArgs>> namespaceResourceBlacklists) {
            $.namespaceResourceBlacklists = namespaceResourceBlacklists;
            return this;
        }

        /**
         * @param namespaceResourceBlacklists Namespace resource blacklist for the Argo project.
         * 
         * @return builder
         * 
         */
        public Builder namespaceResourceBlacklists(List<GitopsAppProjectProjectSpecNamespaceResourceBlacklistArgs> namespaceResourceBlacklists) {
            return namespaceResourceBlacklists(Output.of(namespaceResourceBlacklists));
        }

        /**
         * @param namespaceResourceBlacklists Namespace resource blacklist for the Argo project.
         * 
         * @return builder
         * 
         */
        public Builder namespaceResourceBlacklists(GitopsAppProjectProjectSpecNamespaceResourceBlacklistArgs... namespaceResourceBlacklists) {
            return namespaceResourceBlacklists(List.of(namespaceResourceBlacklists));
        }

        /**
         * @param namespaceResourceWhitelists Namespace resource whitelist for the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder namespaceResourceWhitelists(@Nullable Output<List<GitopsAppProjectProjectSpecNamespaceResourceWhitelistArgs>> namespaceResourceWhitelists) {
            $.namespaceResourceWhitelists = namespaceResourceWhitelists;
            return this;
        }

        /**
         * @param namespaceResourceWhitelists Namespace resource whitelist for the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder namespaceResourceWhitelists(List<GitopsAppProjectProjectSpecNamespaceResourceWhitelistArgs> namespaceResourceWhitelists) {
            return namespaceResourceWhitelists(Output.of(namespaceResourceWhitelists));
        }

        /**
         * @param namespaceResourceWhitelists Namespace resource whitelist for the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder namespaceResourceWhitelists(GitopsAppProjectProjectSpecNamespaceResourceWhitelistArgs... namespaceResourceWhitelists) {
            return namespaceResourceWhitelists(List.of(namespaceResourceWhitelists));
        }

        /**
         * @param orphanedResources OrphanedResources specifies if agent should monitor orphaned resources of apps in this project
         * 
         * @return builder
         * 
         */
        public Builder orphanedResources(@Nullable Output<List<GitopsAppProjectProjectSpecOrphanedResourceArgs>> orphanedResources) {
            $.orphanedResources = orphanedResources;
            return this;
        }

        /**
         * @param orphanedResources OrphanedResources specifies if agent should monitor orphaned resources of apps in this project
         * 
         * @return builder
         * 
         */
        public Builder orphanedResources(List<GitopsAppProjectProjectSpecOrphanedResourceArgs> orphanedResources) {
            return orphanedResources(Output.of(orphanedResources));
        }

        /**
         * @param orphanedResources OrphanedResources specifies if agent should monitor orphaned resources of apps in this project
         * 
         * @return builder
         * 
         */
        public Builder orphanedResources(GitopsAppProjectProjectSpecOrphanedResourceArgs... orphanedResources) {
            return orphanedResources(List.of(orphanedResources));
        }

        /**
         * @param permitOnlyProjectScopedClusters This option determines whether destinations can only reference clusters which are argo project-scoped
         * 
         * @return builder
         * 
         */
        public Builder permitOnlyProjectScopedClusters(@Nullable Output<Boolean> permitOnlyProjectScopedClusters) {
            $.permitOnlyProjectScopedClusters = permitOnlyProjectScopedClusters;
            return this;
        }

        /**
         * @param permitOnlyProjectScopedClusters This option determines whether destinations can only reference clusters which are argo project-scoped
         * 
         * @return builder
         * 
         */
        public Builder permitOnlyProjectScopedClusters(Boolean permitOnlyProjectScopedClusters) {
            return permitOnlyProjectScopedClusters(Output.of(permitOnlyProjectScopedClusters));
        }

        /**
         * @param roles Roles associated with the Argo project.
         * 
         * @return builder
         * 
         */
        public Builder roles(@Nullable Output<List<GitopsAppProjectProjectSpecRoleArgs>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles Roles associated with the Argo project.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<GitopsAppProjectProjectSpecRoleArgs> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles Roles associated with the Argo project.
         * 
         * @return builder
         * 
         */
        public Builder roles(GitopsAppProjectProjectSpecRoleArgs... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param signatureKeys Signature keys for the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder signatureKeys(@Nullable Output<List<GitopsAppProjectProjectSpecSignatureKeyArgs>> signatureKeys) {
            $.signatureKeys = signatureKeys;
            return this;
        }

        /**
         * @param signatureKeys Signature keys for the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder signatureKeys(List<GitopsAppProjectProjectSpecSignatureKeyArgs> signatureKeys) {
            return signatureKeys(Output.of(signatureKeys));
        }

        /**
         * @param signatureKeys Signature keys for the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder signatureKeys(GitopsAppProjectProjectSpecSignatureKeyArgs... signatureKeys) {
            return signatureKeys(List.of(signatureKeys));
        }

        /**
         * @param sourceNamespaces Source namespaces defines the namespaces application resources are allowed to be created in.
         * 
         * @return builder
         * 
         */
        public Builder sourceNamespaces(@Nullable Output<List<String>> sourceNamespaces) {
            $.sourceNamespaces = sourceNamespaces;
            return this;
        }

        /**
         * @param sourceNamespaces Source namespaces defines the namespaces application resources are allowed to be created in.
         * 
         * @return builder
         * 
         */
        public Builder sourceNamespaces(List<String> sourceNamespaces) {
            return sourceNamespaces(Output.of(sourceNamespaces));
        }

        /**
         * @param sourceNamespaces Source namespaces defines the namespaces application resources are allowed to be created in.
         * 
         * @return builder
         * 
         */
        public Builder sourceNamespaces(String... sourceNamespaces) {
            return sourceNamespaces(List.of(sourceNamespaces));
        }

        /**
         * @param sourceRepos Allowed Source repositories for the Argo project.
         * 
         * @return builder
         * 
         */
        public Builder sourceRepos(@Nullable Output<List<String>> sourceRepos) {
            $.sourceRepos = sourceRepos;
            return this;
        }

        /**
         * @param sourceRepos Allowed Source repositories for the Argo project.
         * 
         * @return builder
         * 
         */
        public Builder sourceRepos(List<String> sourceRepos) {
            return sourceRepos(Output.of(sourceRepos));
        }

        /**
         * @param sourceRepos Allowed Source repositories for the Argo project.
         * 
         * @return builder
         * 
         */
        public Builder sourceRepos(String... sourceRepos) {
            return sourceRepos(List.of(sourceRepos));
        }

        /**
         * @param syncWindows Synchronization windows for the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder syncWindows(@Nullable Output<List<GitopsAppProjectProjectSpecSyncWindowArgs>> syncWindows) {
            $.syncWindows = syncWindows;
            return this;
        }

        /**
         * @param syncWindows Synchronization windows for the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder syncWindows(List<GitopsAppProjectProjectSpecSyncWindowArgs> syncWindows) {
            return syncWindows(Output.of(syncWindows));
        }

        /**
         * @param syncWindows Synchronization windows for the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder syncWindows(GitopsAppProjectProjectSpecSyncWindowArgs... syncWindows) {
            return syncWindows(List.of(syncWindows));
        }

        public GitopsAppProjectProjectSpecArgs build() {
            return $;
        }
    }

}
