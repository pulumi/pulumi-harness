// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GetTemplateGitDetails;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTemplateResult {
    /**
     * @return Version Label for Template.
     * 
     */
    private @Nullable String branchName;
    /**
     * @return Defines child template type.
     * 
     */
    private @Nullable String childType;
    /**
     * @return Identifier of the Harness Connector used for CRUD operations on the Entity.
     * 
     */
    private String connectorRef;
    /**
     * @return Description of the resource.
     * 
     */
    private String description;
    /**
     * @return Contains parameters related to creating an Entity for Git Experience.
     * 
     */
    private @Nullable GetTemplateGitDetails gitDetails;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Unique identifier of the resource.
     * 
     */
    private @Nullable String identifier;
    /**
     * @return True if given version for template to be set as stable.
     * 
     */
    private @Nullable Boolean isStable;
    /**
     * @return Name of the resource.
     * 
     */
    private @Nullable String name;
    /**
     * @return Unique identifier of the organization.
     * 
     */
    private @Nullable String orgId;
    /**
     * @return Unique identifier of the project.
     * 
     */
    private @Nullable String projectId;
    /**
     * @return Scope of template.
     * 
     */
    private @Nullable String scope;
    /**
     * @return Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
     * 
     */
    private String storeType;
    /**
     * @return Tags to associate with the resource.
     * 
     */
    private List<String> tags;
    /**
     * @return Yaml for creating new Template.
     * 
     */
    private String templateYaml;
    /**
     * @return Version Label for Template.
     * 
     */
    private @Nullable String version;

    private GetTemplateResult() {}
    /**
     * @return Version Label for Template.
     * 
     */
    public Optional<String> branchName() {
        return Optional.ofNullable(this.branchName);
    }
    /**
     * @return Defines child template type.
     * 
     */
    public Optional<String> childType() {
        return Optional.ofNullable(this.childType);
    }
    /**
     * @return Identifier of the Harness Connector used for CRUD operations on the Entity.
     * 
     */
    public String connectorRef() {
        return this.connectorRef;
    }
    /**
     * @return Description of the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Contains parameters related to creating an Entity for Git Experience.
     * 
     */
    public Optional<GetTemplateGitDetails> gitDetails() {
        return Optional.ofNullable(this.gitDetails);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Optional<String> identifier() {
        return Optional.ofNullable(this.identifier);
    }
    /**
     * @return True if given version for template to be set as stable.
     * 
     */
    public Optional<Boolean> isStable() {
        return Optional.ofNullable(this.isStable);
    }
    /**
     * @return Name of the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }
    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return Scope of template.
     * 
     */
    public Optional<String> scope() {
        return Optional.ofNullable(this.scope);
    }
    /**
     * @return Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
     * 
     */
    public String storeType() {
        return this.storeType;
    }
    /**
     * @return Tags to associate with the resource.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return Yaml for creating new Template.
     * 
     */
    public String templateYaml() {
        return this.templateYaml;
    }
    /**
     * @return Version Label for Template.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String branchName;
        private @Nullable String childType;
        private String connectorRef;
        private String description;
        private @Nullable GetTemplateGitDetails gitDetails;
        private String id;
        private @Nullable String identifier;
        private @Nullable Boolean isStable;
        private @Nullable String name;
        private @Nullable String orgId;
        private @Nullable String projectId;
        private @Nullable String scope;
        private String storeType;
        private List<String> tags;
        private String templateYaml;
        private @Nullable String version;
        public Builder() {}
        public Builder(GetTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branchName = defaults.branchName;
    	      this.childType = defaults.childType;
    	      this.connectorRef = defaults.connectorRef;
    	      this.description = defaults.description;
    	      this.gitDetails = defaults.gitDetails;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.isStable = defaults.isStable;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.projectId = defaults.projectId;
    	      this.scope = defaults.scope;
    	      this.storeType = defaults.storeType;
    	      this.tags = defaults.tags;
    	      this.templateYaml = defaults.templateYaml;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder branchName(@Nullable String branchName) {

            this.branchName = branchName;
            return this;
        }
        @CustomType.Setter
        public Builder childType(@Nullable String childType) {

            this.childType = childType;
            return this;
        }
        @CustomType.Setter
        public Builder connectorRef(String connectorRef) {
            if (connectorRef == null) {
              throw new MissingRequiredPropertyException("GetTemplateResult", "connectorRef");
            }
            this.connectorRef = connectorRef;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetTemplateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder gitDetails(@Nullable GetTemplateGitDetails gitDetails) {

            this.gitDetails = gitDetails;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTemplateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(@Nullable String identifier) {

            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder isStable(@Nullable Boolean isStable) {

            this.isStable = isStable;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(@Nullable String orgId) {

            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder scope(@Nullable String scope) {

            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder storeType(String storeType) {
            if (storeType == null) {
              throw new MissingRequiredPropertyException("GetTemplateResult", "storeType");
            }
            this.storeType = storeType;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetTemplateResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder templateYaml(String templateYaml) {
            if (templateYaml == null) {
              throw new MissingRequiredPropertyException("GetTemplateResult", "templateYaml");
            }
            this.templateYaml = templateYaml;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {

            this.version = version;
            return this;
        }
        public GetTemplateResult build() {
            final var _resultValue = new GetTemplateResult();
            _resultValue.branchName = branchName;
            _resultValue.childType = childType;
            _resultValue.connectorRef = connectorRef;
            _resultValue.description = description;
            _resultValue.gitDetails = gitDetails;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.isStable = isStable;
            _resultValue.name = name;
            _resultValue.orgId = orgId;
            _resultValue.projectId = projectId;
            _resultValue.scope = scope;
            _resultValue.storeType = storeType;
            _resultValue.tags = tags;
            _resultValue.templateYaml = templateYaml;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
