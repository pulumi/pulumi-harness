// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.SloRequestNotificationRuleRefArgs;
import com.pulumi.harness.platform.inputs.SloRequestSloTargetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SloRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final SloRequestArgs Empty = new SloRequestArgs();

    /**
     * Description for the SLO.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description for the SLO.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name for the SLO.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name for the SLO.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Notification rule references for the SLO.
     * 
     */
    @Import(name="notificationRuleRefs")
    private @Nullable Output<List<SloRequestNotificationRuleRefArgs>> notificationRuleRefs;

    /**
     * @return Notification rule references for the SLO.
     * 
     */
    public Optional<Output<List<SloRequestNotificationRuleRefArgs>>> notificationRuleRefs() {
        return Optional.ofNullable(this.notificationRuleRefs);
    }

    /**
     * SLO Target specification.
     * 
     */
    @Import(name="sloTarget", required=true)
    private Output<SloRequestSloTargetArgs> sloTarget;

    /**
     * @return SLO Target specification.
     * 
     */
    public Output<SloRequestSloTargetArgs> sloTarget() {
        return this.sloTarget;
    }

    /**
     * Specification of the SLO.
     * 
     */
    @Import(name="spec", required=true)
    private Output<String> spec;

    /**
     * @return Specification of the SLO.
     * 
     */
    public Output<String> spec() {
        return this.spec;
    }

    /**
     * Tags for the SLO. comma-separated key value string pairs.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags for the SLO. comma-separated key value string pairs.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Type of the SLO.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of the SLO.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * User journey reference list for the SLO.
     * 
     */
    @Import(name="userJourneyRefs", required=true)
    private Output<List<String>> userJourneyRefs;

    /**
     * @return User journey reference list for the SLO.
     * 
     */
    public Output<List<String>> userJourneyRefs() {
        return this.userJourneyRefs;
    }

    private SloRequestArgs() {}

    private SloRequestArgs(SloRequestArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.notificationRuleRefs = $.notificationRuleRefs;
        this.sloTarget = $.sloTarget;
        this.spec = $.spec;
        this.tags = $.tags;
        this.type = $.type;
        this.userJourneyRefs = $.userJourneyRefs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SloRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SloRequestArgs $;

        public Builder() {
            $ = new SloRequestArgs();
        }

        public Builder(SloRequestArgs defaults) {
            $ = new SloRequestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description for the SLO.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description for the SLO.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name for the SLO.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name for the SLO.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notificationRuleRefs Notification rule references for the SLO.
         * 
         * @return builder
         * 
         */
        public Builder notificationRuleRefs(@Nullable Output<List<SloRequestNotificationRuleRefArgs>> notificationRuleRefs) {
            $.notificationRuleRefs = notificationRuleRefs;
            return this;
        }

        /**
         * @param notificationRuleRefs Notification rule references for the SLO.
         * 
         * @return builder
         * 
         */
        public Builder notificationRuleRefs(List<SloRequestNotificationRuleRefArgs> notificationRuleRefs) {
            return notificationRuleRefs(Output.of(notificationRuleRefs));
        }

        /**
         * @param notificationRuleRefs Notification rule references for the SLO.
         * 
         * @return builder
         * 
         */
        public Builder notificationRuleRefs(SloRequestNotificationRuleRefArgs... notificationRuleRefs) {
            return notificationRuleRefs(List.of(notificationRuleRefs));
        }

        /**
         * @param sloTarget SLO Target specification.
         * 
         * @return builder
         * 
         */
        public Builder sloTarget(Output<SloRequestSloTargetArgs> sloTarget) {
            $.sloTarget = sloTarget;
            return this;
        }

        /**
         * @param sloTarget SLO Target specification.
         * 
         * @return builder
         * 
         */
        public Builder sloTarget(SloRequestSloTargetArgs sloTarget) {
            return sloTarget(Output.of(sloTarget));
        }

        /**
         * @param spec Specification of the SLO.
         * 
         * @return builder
         * 
         */
        public Builder spec(Output<String> spec) {
            $.spec = spec;
            return this;
        }

        /**
         * @param spec Specification of the SLO.
         * 
         * @return builder
         * 
         */
        public Builder spec(String spec) {
            return spec(Output.of(spec));
        }

        /**
         * @param tags Tags for the SLO. comma-separated key value string pairs.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags for the SLO. comma-separated key value string pairs.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags for the SLO. comma-separated key value string pairs.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type Type of the SLO.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the SLO.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param userJourneyRefs User journey reference list for the SLO.
         * 
         * @return builder
         * 
         */
        public Builder userJourneyRefs(Output<List<String>> userJourneyRefs) {
            $.userJourneyRefs = userJourneyRefs;
            return this;
        }

        /**
         * @param userJourneyRefs User journey reference list for the SLO.
         * 
         * @return builder
         * 
         */
        public Builder userJourneyRefs(List<String> userJourneyRefs) {
            return userJourneyRefs(Output.of(userJourneyRefs));
        }

        /**
         * @param userJourneyRefs User journey reference list for the SLO.
         * 
         * @return builder
         * 
         */
        public Builder userJourneyRefs(String... userJourneyRefs) {
            return userJourneyRefs(List.of(userJourneyRefs));
        }

        public SloRequestArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("SloRequestArgs", "name");
            }
            if ($.sloTarget == null) {
                throw new MissingRequiredPropertyException("SloRequestArgs", "sloTarget");
            }
            if ($.spec == null) {
                throw new MissingRequiredPropertyException("SloRequestArgs", "spec");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("SloRequestArgs", "type");
            }
            if ($.userJourneyRefs == null) {
                throw new MissingRequiredPropertyException("SloRequestArgs", "userJourneyRefs");
            }
            return $;
        }
    }

}
