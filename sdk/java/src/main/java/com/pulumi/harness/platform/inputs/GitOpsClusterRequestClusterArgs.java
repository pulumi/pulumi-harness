// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GitOpsClusterRequestClusterConfigArgs;
import com.pulumi.harness.platform.inputs.GitOpsClusterRequestClusterInfoArgs;
import com.pulumi.harness.platform.inputs.GitOpsClusterRequestClusterRefreshRequestedAtArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitOpsClusterRequestClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitOpsClusterRequestClusterArgs Empty = new GitOpsClusterRequestClusterArgs();

    /**
     * Annotations for cluster secret metadata.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Annotations for cluster secret metadata.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Indicates if cluster level resources should be managed. This setting is used only if cluster is connected in a namespaced mode.
     * 
     */
    @Import(name="clusterResources")
    private @Nullable Output<Boolean> clusterResources;

    /**
     * @return Indicates if cluster level resources should be managed. This setting is used only if cluster is connected in a namespaced mode.
     * 
     */
    public Optional<Output<Boolean>> clusterResources() {
        return Optional.ofNullable(this.clusterResources);
    }

    /**
     * GitOps cluster config.
     * 
     */
    @Import(name="configs", required=true)
    private Output<List<GitOpsClusterRequestClusterConfigArgs>> configs;

    /**
     * @return GitOps cluster config.
     * 
     */
    public Output<List<GitOpsClusterRequestClusterConfigArgs>> configs() {
        return this.configs;
    }

    /**
     * Information about cluster cache and state.
     * 
     */
    @Import(name="infos")
    private @Nullable Output<List<GitOpsClusterRequestClusterInfoArgs>> infos;

    /**
     * @return Information about cluster cache and state.
     * 
     */
    public Optional<Output<List<GitOpsClusterRequestClusterInfoArgs>>> infos() {
        return Optional.ofNullable(this.infos);
    }

    /**
     * Labels for cluster secret metadata.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels for cluster secret metadata.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Name of the cluster. If omitted, the server address will be used.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the cluster. If omitted, the server address will be used.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of namespaces which are accessible in that cluster. Cluster level resources will be ignored if namespace list is not empty.
     * 
     */
    @Import(name="namespaces")
    private @Nullable Output<List<String>> namespaces;

    /**
     * @return List of namespaces which are accessible in that cluster. Cluster level resources will be ignored if namespace list is not empty.
     * 
     */
    public Optional<Output<List<String>>> namespaces() {
        return Optional.ofNullable(this.namespaces);
    }

    /**
     * The ArgoCD project name corresponding to this GitOps cluster. An empty string means that the GitOps cluster belongs to the default project created by Harness.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ArgoCD project name corresponding to this GitOps cluster. An empty string means that the GitOps cluster belongs to the default project created by Harness.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Time when cluster cache refresh has been requested.
     * 
     */
    @Import(name="refreshRequestedAts")
    private @Nullable Output<List<GitOpsClusterRequestClusterRefreshRequestedAtArgs>> refreshRequestedAts;

    /**
     * @return Time when cluster cache refresh has been requested.
     * 
     */
    public Optional<Output<List<GitOpsClusterRequestClusterRefreshRequestedAtArgs>>> refreshRequestedAts() {
        return Optional.ofNullable(this.refreshRequestedAts);
    }

    /**
     * API server URL of the kubernetes cluster.
     * 
     */
    @Import(name="server", required=true)
    private Output<String> server;

    /**
     * @return API server URL of the kubernetes cluster.
     * 
     */
    public Output<String> server() {
        return this.server;
    }

    /**
     * Shard number to be managed by a specific application controller pod. Calculated on the fly by the application controller if not specified.
     * 
     */
    @Import(name="shard")
    private @Nullable Output<String> shard;

    /**
     * @return Shard number to be managed by a specific application controller pod. Calculated on the fly by the application controller if not specified.
     * 
     */
    public Optional<Output<String>> shard() {
        return Optional.ofNullable(this.shard);
    }

    private GitOpsClusterRequestClusterArgs() {}

    private GitOpsClusterRequestClusterArgs(GitOpsClusterRequestClusterArgs $) {
        this.annotations = $.annotations;
        this.clusterResources = $.clusterResources;
        this.configs = $.configs;
        this.infos = $.infos;
        this.labels = $.labels;
        this.name = $.name;
        this.namespaces = $.namespaces;
        this.project = $.project;
        this.refreshRequestedAts = $.refreshRequestedAts;
        this.server = $.server;
        this.shard = $.shard;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitOpsClusterRequestClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitOpsClusterRequestClusterArgs $;

        public Builder() {
            $ = new GitOpsClusterRequestClusterArgs();
        }

        public Builder(GitOpsClusterRequestClusterArgs defaults) {
            $ = new GitOpsClusterRequestClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Annotations for cluster secret metadata.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Annotations for cluster secret metadata.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param clusterResources Indicates if cluster level resources should be managed. This setting is used only if cluster is connected in a namespaced mode.
         * 
         * @return builder
         * 
         */
        public Builder clusterResources(@Nullable Output<Boolean> clusterResources) {
            $.clusterResources = clusterResources;
            return this;
        }

        /**
         * @param clusterResources Indicates if cluster level resources should be managed. This setting is used only if cluster is connected in a namespaced mode.
         * 
         * @return builder
         * 
         */
        public Builder clusterResources(Boolean clusterResources) {
            return clusterResources(Output.of(clusterResources));
        }

        /**
         * @param configs GitOps cluster config.
         * 
         * @return builder
         * 
         */
        public Builder configs(Output<List<GitOpsClusterRequestClusterConfigArgs>> configs) {
            $.configs = configs;
            return this;
        }

        /**
         * @param configs GitOps cluster config.
         * 
         * @return builder
         * 
         */
        public Builder configs(List<GitOpsClusterRequestClusterConfigArgs> configs) {
            return configs(Output.of(configs));
        }

        /**
         * @param configs GitOps cluster config.
         * 
         * @return builder
         * 
         */
        public Builder configs(GitOpsClusterRequestClusterConfigArgs... configs) {
            return configs(List.of(configs));
        }

        /**
         * @param infos Information about cluster cache and state.
         * 
         * @return builder
         * 
         */
        public Builder infos(@Nullable Output<List<GitOpsClusterRequestClusterInfoArgs>> infos) {
            $.infos = infos;
            return this;
        }

        /**
         * @param infos Information about cluster cache and state.
         * 
         * @return builder
         * 
         */
        public Builder infos(List<GitOpsClusterRequestClusterInfoArgs> infos) {
            return infos(Output.of(infos));
        }

        /**
         * @param infos Information about cluster cache and state.
         * 
         * @return builder
         * 
         */
        public Builder infos(GitOpsClusterRequestClusterInfoArgs... infos) {
            return infos(List.of(infos));
        }

        /**
         * @param labels Labels for cluster secret metadata.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels for cluster secret metadata.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name Name of the cluster. If omitted, the server address will be used.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the cluster. If omitted, the server address will be used.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespaces List of namespaces which are accessible in that cluster. Cluster level resources will be ignored if namespace list is not empty.
         * 
         * @return builder
         * 
         */
        public Builder namespaces(@Nullable Output<List<String>> namespaces) {
            $.namespaces = namespaces;
            return this;
        }

        /**
         * @param namespaces List of namespaces which are accessible in that cluster. Cluster level resources will be ignored if namespace list is not empty.
         * 
         * @return builder
         * 
         */
        public Builder namespaces(List<String> namespaces) {
            return namespaces(Output.of(namespaces));
        }

        /**
         * @param namespaces List of namespaces which are accessible in that cluster. Cluster level resources will be ignored if namespace list is not empty.
         * 
         * @return builder
         * 
         */
        public Builder namespaces(String... namespaces) {
            return namespaces(List.of(namespaces));
        }

        /**
         * @param project The ArgoCD project name corresponding to this GitOps cluster. An empty string means that the GitOps cluster belongs to the default project created by Harness.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ArgoCD project name corresponding to this GitOps cluster. An empty string means that the GitOps cluster belongs to the default project created by Harness.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param refreshRequestedAts Time when cluster cache refresh has been requested.
         * 
         * @return builder
         * 
         */
        public Builder refreshRequestedAts(@Nullable Output<List<GitOpsClusterRequestClusterRefreshRequestedAtArgs>> refreshRequestedAts) {
            $.refreshRequestedAts = refreshRequestedAts;
            return this;
        }

        /**
         * @param refreshRequestedAts Time when cluster cache refresh has been requested.
         * 
         * @return builder
         * 
         */
        public Builder refreshRequestedAts(List<GitOpsClusterRequestClusterRefreshRequestedAtArgs> refreshRequestedAts) {
            return refreshRequestedAts(Output.of(refreshRequestedAts));
        }

        /**
         * @param refreshRequestedAts Time when cluster cache refresh has been requested.
         * 
         * @return builder
         * 
         */
        public Builder refreshRequestedAts(GitOpsClusterRequestClusterRefreshRequestedAtArgs... refreshRequestedAts) {
            return refreshRequestedAts(List.of(refreshRequestedAts));
        }

        /**
         * @param server API server URL of the kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder server(Output<String> server) {
            $.server = server;
            return this;
        }

        /**
         * @param server API server URL of the kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder server(String server) {
            return server(Output.of(server));
        }

        /**
         * @param shard Shard number to be managed by a specific application controller pod. Calculated on the fly by the application controller if not specified.
         * 
         * @return builder
         * 
         */
        public Builder shard(@Nullable Output<String> shard) {
            $.shard = shard;
            return this;
        }

        /**
         * @param shard Shard number to be managed by a specific application controller pod. Calculated on the fly by the application controller if not specified.
         * 
         * @return builder
         * 
         */
        public Builder shard(String shard) {
            return shard(Output.of(shard));
        }

        public GitOpsClusterRequestClusterArgs build() {
            if ($.configs == null) {
                throw new MissingRequiredPropertyException("GitOpsClusterRequestClusterArgs", "configs");
            }
            if ($.server == null) {
                throw new MissingRequiredPropertyException("GitOpsClusterRequestClusterArgs", "server");
            }
            return $;
        }
    }

}
