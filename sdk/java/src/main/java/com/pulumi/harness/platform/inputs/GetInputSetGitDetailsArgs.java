// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetInputSetGitDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetInputSetGitDetailsArgs Empty = new GetInputSetGitDetailsArgs();

    /**
     * Name of the default branch (this checks out a new branch titled by branch_name).
     * 
     */
    @Import(name="baseBranch", required=true)
    private Output<String> baseBranch;

    /**
     * @return Name of the default branch (this checks out a new branch titled by branch_name).
     * 
     */
    public Output<String> baseBranch() {
        return this.baseBranch;
    }

    /**
     * Name of the branch.
     * 
     */
    @Import(name="branchName", required=true)
    private Output<String> branchName;

    /**
     * @return Name of the branch.
     * 
     */
    public Output<String> branchName() {
        return this.branchName;
    }

    /**
     * Commit message used for the merge commit.
     * 
     */
    @Import(name="commitMessage", required=true)
    private Output<String> commitMessage;

    /**
     * @return Commit message used for the merge commit.
     * 
     */
    public Output<String> commitMessage() {
        return this.commitMessage;
    }

    /**
     * Identifier of the Harness Connector used for CRUD operations on the Entity.
     * 
     */
    @Import(name="connectorRef", required=true)
    private Output<String> connectorRef;

    /**
     * @return Identifier of the Harness Connector used for CRUD operations on the Entity.
     * 
     */
    public Output<String> connectorRef() {
        return this.connectorRef;
    }

    /**
     * File path of the Entity in the repository.
     * 
     */
    @Import(name="filePath", required=true)
    private Output<String> filePath;

    /**
     * @return File path of the Entity in the repository.
     * 
     */
    public Output<String> filePath() {
        return this.filePath;
    }

    /**
     * Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
     * 
     */
    @Import(name="lastCommitId", required=true)
    private Output<String> lastCommitId;

    /**
     * @return Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
     * 
     */
    public Output<String> lastCommitId() {
        return this.lastCommitId;
    }

    /**
     * Last object identifier (for Github). To be provided only when updating Pipeline.
     * 
     */
    @Import(name="lastObjectId", required=true)
    private Output<String> lastObjectId;

    /**
     * @return Last object identifier (for Github). To be provided only when updating Pipeline.
     * 
     */
    public Output<String> lastObjectId() {
        return this.lastObjectId;
    }

    /**
     * Connector reference for Parent Entity (Pipeline).
     * 
     */
    @Import(name="parentEntityConnectorRef", required=true)
    private Output<String> parentEntityConnectorRef;

    /**
     * @return Connector reference for Parent Entity (Pipeline).
     * 
     */
    public Output<String> parentEntityConnectorRef() {
        return this.parentEntityConnectorRef;
    }

    /**
     * Repository name for Parent Entity (Pipeline).
     * 
     */
    @Import(name="parentEntityRepoName", required=true)
    private Output<String> parentEntityRepoName;

    /**
     * @return Repository name for Parent Entity (Pipeline).
     * 
     */
    public Output<String> parentEntityRepoName() {
        return this.parentEntityRepoName;
    }

    /**
     * Name of the repository.
     * 
     */
    @Import(name="repoName", required=true)
    private Output<String> repoName;

    /**
     * @return Name of the repository.
     * 
     */
    public Output<String> repoName() {
        return this.repoName;
    }

    /**
     * Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
     * 
     */
    @Import(name="storeType", required=true)
    private Output<String> storeType;

    /**
     * @return Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
     * 
     */
    public Output<String> storeType() {
        return this.storeType;
    }

    private GetInputSetGitDetailsArgs() {}

    private GetInputSetGitDetailsArgs(GetInputSetGitDetailsArgs $) {
        this.baseBranch = $.baseBranch;
        this.branchName = $.branchName;
        this.commitMessage = $.commitMessage;
        this.connectorRef = $.connectorRef;
        this.filePath = $.filePath;
        this.lastCommitId = $.lastCommitId;
        this.lastObjectId = $.lastObjectId;
        this.parentEntityConnectorRef = $.parentEntityConnectorRef;
        this.parentEntityRepoName = $.parentEntityRepoName;
        this.repoName = $.repoName;
        this.storeType = $.storeType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInputSetGitDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInputSetGitDetailsArgs $;

        public Builder() {
            $ = new GetInputSetGitDetailsArgs();
        }

        public Builder(GetInputSetGitDetailsArgs defaults) {
            $ = new GetInputSetGitDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param baseBranch Name of the default branch (this checks out a new branch titled by branch_name).
         * 
         * @return builder
         * 
         */
        public Builder baseBranch(Output<String> baseBranch) {
            $.baseBranch = baseBranch;
            return this;
        }

        /**
         * @param baseBranch Name of the default branch (this checks out a new branch titled by branch_name).
         * 
         * @return builder
         * 
         */
        public Builder baseBranch(String baseBranch) {
            return baseBranch(Output.of(baseBranch));
        }

        /**
         * @param branchName Name of the branch.
         * 
         * @return builder
         * 
         */
        public Builder branchName(Output<String> branchName) {
            $.branchName = branchName;
            return this;
        }

        /**
         * @param branchName Name of the branch.
         * 
         * @return builder
         * 
         */
        public Builder branchName(String branchName) {
            return branchName(Output.of(branchName));
        }

        /**
         * @param commitMessage Commit message used for the merge commit.
         * 
         * @return builder
         * 
         */
        public Builder commitMessage(Output<String> commitMessage) {
            $.commitMessage = commitMessage;
            return this;
        }

        /**
         * @param commitMessage Commit message used for the merge commit.
         * 
         * @return builder
         * 
         */
        public Builder commitMessage(String commitMessage) {
            return commitMessage(Output.of(commitMessage));
        }

        /**
         * @param connectorRef Identifier of the Harness Connector used for CRUD operations on the Entity.
         * 
         * @return builder
         * 
         */
        public Builder connectorRef(Output<String> connectorRef) {
            $.connectorRef = connectorRef;
            return this;
        }

        /**
         * @param connectorRef Identifier of the Harness Connector used for CRUD operations on the Entity.
         * 
         * @return builder
         * 
         */
        public Builder connectorRef(String connectorRef) {
            return connectorRef(Output.of(connectorRef));
        }

        /**
         * @param filePath File path of the Entity in the repository.
         * 
         * @return builder
         * 
         */
        public Builder filePath(Output<String> filePath) {
            $.filePath = filePath;
            return this;
        }

        /**
         * @param filePath File path of the Entity in the repository.
         * 
         * @return builder
         * 
         */
        public Builder filePath(String filePath) {
            return filePath(Output.of(filePath));
        }

        /**
         * @param lastCommitId Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder lastCommitId(Output<String> lastCommitId) {
            $.lastCommitId = lastCommitId;
            return this;
        }

        /**
         * @param lastCommitId Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder lastCommitId(String lastCommitId) {
            return lastCommitId(Output.of(lastCommitId));
        }

        /**
         * @param lastObjectId Last object identifier (for Github). To be provided only when updating Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder lastObjectId(Output<String> lastObjectId) {
            $.lastObjectId = lastObjectId;
            return this;
        }

        /**
         * @param lastObjectId Last object identifier (for Github). To be provided only when updating Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder lastObjectId(String lastObjectId) {
            return lastObjectId(Output.of(lastObjectId));
        }

        /**
         * @param parentEntityConnectorRef Connector reference for Parent Entity (Pipeline).
         * 
         * @return builder
         * 
         */
        public Builder parentEntityConnectorRef(Output<String> parentEntityConnectorRef) {
            $.parentEntityConnectorRef = parentEntityConnectorRef;
            return this;
        }

        /**
         * @param parentEntityConnectorRef Connector reference for Parent Entity (Pipeline).
         * 
         * @return builder
         * 
         */
        public Builder parentEntityConnectorRef(String parentEntityConnectorRef) {
            return parentEntityConnectorRef(Output.of(parentEntityConnectorRef));
        }

        /**
         * @param parentEntityRepoName Repository name for Parent Entity (Pipeline).
         * 
         * @return builder
         * 
         */
        public Builder parentEntityRepoName(Output<String> parentEntityRepoName) {
            $.parentEntityRepoName = parentEntityRepoName;
            return this;
        }

        /**
         * @param parentEntityRepoName Repository name for Parent Entity (Pipeline).
         * 
         * @return builder
         * 
         */
        public Builder parentEntityRepoName(String parentEntityRepoName) {
            return parentEntityRepoName(Output.of(parentEntityRepoName));
        }

        /**
         * @param repoName Name of the repository.
         * 
         * @return builder
         * 
         */
        public Builder repoName(Output<String> repoName) {
            $.repoName = repoName;
            return this;
        }

        /**
         * @param repoName Name of the repository.
         * 
         * @return builder
         * 
         */
        public Builder repoName(String repoName) {
            return repoName(Output.of(repoName));
        }

        /**
         * @param storeType Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
         * 
         * @return builder
         * 
         */
        public Builder storeType(Output<String> storeType) {
            $.storeType = storeType;
            return this;
        }

        /**
         * @param storeType Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
         * 
         * @return builder
         * 
         */
        public Builder storeType(String storeType) {
            return storeType(Output.of(storeType));
        }

        public GetInputSetGitDetailsArgs build() {
            if ($.baseBranch == null) {
                throw new MissingRequiredPropertyException("GetInputSetGitDetailsArgs", "baseBranch");
            }
            if ($.branchName == null) {
                throw new MissingRequiredPropertyException("GetInputSetGitDetailsArgs", "branchName");
            }
            if ($.commitMessage == null) {
                throw new MissingRequiredPropertyException("GetInputSetGitDetailsArgs", "commitMessage");
            }
            if ($.connectorRef == null) {
                throw new MissingRequiredPropertyException("GetInputSetGitDetailsArgs", "connectorRef");
            }
            if ($.filePath == null) {
                throw new MissingRequiredPropertyException("GetInputSetGitDetailsArgs", "filePath");
            }
            if ($.lastCommitId == null) {
                throw new MissingRequiredPropertyException("GetInputSetGitDetailsArgs", "lastCommitId");
            }
            if ($.lastObjectId == null) {
                throw new MissingRequiredPropertyException("GetInputSetGitDetailsArgs", "lastObjectId");
            }
            if ($.parentEntityConnectorRef == null) {
                throw new MissingRequiredPropertyException("GetInputSetGitDetailsArgs", "parentEntityConnectorRef");
            }
            if ($.parentEntityRepoName == null) {
                throw new MissingRequiredPropertyException("GetInputSetGitDetailsArgs", "parentEntityRepoName");
            }
            if ($.repoName == null) {
                throw new MissingRequiredPropertyException("GetInputSetGitDetailsArgs", "repoName");
            }
            if ($.storeType == null) {
                throw new MissingRequiredPropertyException("GetInputSetGitDetailsArgs", "storeType");
            }
            return $;
        }
    }

}
