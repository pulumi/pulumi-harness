// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cluster.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.cluster.inputs.GetOrchestratorConfigReplacementScheduleAppliesTo;
import com.pulumi.harness.cluster.inputs.GetOrchestratorConfigReplacementScheduleWindowDetails;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetOrchestratorConfigReplacementSchedule extends com.pulumi.resources.InvokeArgs {

    public static final GetOrchestratorConfigReplacementSchedule Empty = new GetOrchestratorConfigReplacementSchedule();

    /**
     * Defines the scope of the replacement schedule
     * 
     */
    @Import(name="appliesTo", required=true)
    private GetOrchestratorConfigReplacementScheduleAppliesTo appliesTo;

    /**
     * @return Defines the scope of the replacement schedule
     * 
     */
    public GetOrchestratorConfigReplacementScheduleAppliesTo appliesTo() {
        return this.appliesTo;
    }

    @Import(name="windowDetails")
    private @Nullable GetOrchestratorConfigReplacementScheduleWindowDetails windowDetails;

    public Optional<GetOrchestratorConfigReplacementScheduleWindowDetails> windowDetails() {
        return Optional.ofNullable(this.windowDetails);
    }

    /**
     * Window type for replacement schedule
     * 
     */
    @Import(name="windowType", required=true)
    private String windowType;

    /**
     * @return Window type for replacement schedule
     * 
     */
    public String windowType() {
        return this.windowType;
    }

    private GetOrchestratorConfigReplacementSchedule() {}

    private GetOrchestratorConfigReplacementSchedule(GetOrchestratorConfigReplacementSchedule $) {
        this.appliesTo = $.appliesTo;
        this.windowDetails = $.windowDetails;
        this.windowType = $.windowType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetOrchestratorConfigReplacementSchedule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetOrchestratorConfigReplacementSchedule $;

        public Builder() {
            $ = new GetOrchestratorConfigReplacementSchedule();
        }

        public Builder(GetOrchestratorConfigReplacementSchedule defaults) {
            $ = new GetOrchestratorConfigReplacementSchedule(Objects.requireNonNull(defaults));
        }

        /**
         * @param appliesTo Defines the scope of the replacement schedule
         * 
         * @return builder
         * 
         */
        public Builder appliesTo(GetOrchestratorConfigReplacementScheduleAppliesTo appliesTo) {
            $.appliesTo = appliesTo;
            return this;
        }

        public Builder windowDetails(@Nullable GetOrchestratorConfigReplacementScheduleWindowDetails windowDetails) {
            $.windowDetails = windowDetails;
            return this;
        }

        /**
         * @param windowType Window type for replacement schedule
         * 
         * @return builder
         * 
         */
        public Builder windowType(String windowType) {
            $.windowType = windowType;
            return this;
        }

        public GetOrchestratorConfigReplacementSchedule build() {
            if ($.appliesTo == null) {
                throw new MissingRequiredPropertyException("GetOrchestratorConfigReplacementSchedule", "appliesTo");
            }
            if ($.windowType == null) {
                throw new MissingRequiredPropertyException("GetOrchestratorConfigReplacementSchedule", "windowType");
            }
            return $;
        }
    }

}
