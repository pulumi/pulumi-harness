// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetIacmDefaultPipelineArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetIacmDefaultPipelineArgs Empty = new GetIacmDefaultPipelineArgs();

    /**
     * The operation associated with this default.
     * 
     */
    @Import(name="operation", required=true)
    private Output<String> operation;

    /**
     * @return The operation associated with this default.
     * 
     */
    public Output<String> operation() {
        return this.operation;
    }

    /**
     * Organization identifier of the organization the default pipelines resides in.
     * 
     */
    @Import(name="orgId", required=true)
    private Output<String> orgId;

    /**
     * @return Organization identifier of the organization the default pipelines resides in.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * Project identifier of the project the default pipelines resides in.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return Project identifier of the project the default pipelines resides in.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * The provisioner associated with this default.
     * 
     */
    @Import(name="provisionerType", required=true)
    private Output<String> provisionerType;

    /**
     * @return The provisioner associated with this default.
     * 
     */
    public Output<String> provisionerType() {
        return this.provisionerType;
    }

    private GetIacmDefaultPipelineArgs() {}

    private GetIacmDefaultPipelineArgs(GetIacmDefaultPipelineArgs $) {
        this.operation = $.operation;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.provisionerType = $.provisionerType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetIacmDefaultPipelineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetIacmDefaultPipelineArgs $;

        public Builder() {
            $ = new GetIacmDefaultPipelineArgs();
        }

        public Builder(GetIacmDefaultPipelineArgs defaults) {
            $ = new GetIacmDefaultPipelineArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param operation The operation associated with this default.
         * 
         * @return builder
         * 
         */
        public Builder operation(Output<String> operation) {
            $.operation = operation;
            return this;
        }

        /**
         * @param operation The operation associated with this default.
         * 
         * @return builder
         * 
         */
        public Builder operation(String operation) {
            return operation(Output.of(operation));
        }

        /**
         * @param orgId Organization identifier of the organization the default pipelines resides in.
         * 
         * @return builder
         * 
         */
        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Organization identifier of the organization the default pipelines resides in.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Project identifier of the project the default pipelines resides in.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project identifier of the project the default pipelines resides in.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param provisionerType The provisioner associated with this default.
         * 
         * @return builder
         * 
         */
        public Builder provisionerType(Output<String> provisionerType) {
            $.provisionerType = provisionerType;
            return this;
        }

        /**
         * @param provisionerType The provisioner associated with this default.
         * 
         * @return builder
         * 
         */
        public Builder provisionerType(String provisionerType) {
            return provisionerType(Output.of(provisionerType));
        }

        public GetIacmDefaultPipelineArgs build() {
            if ($.operation == null) {
                throw new MissingRequiredPropertyException("GetIacmDefaultPipelineArgs", "operation");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("GetIacmDefaultPipelineArgs", "orgId");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("GetIacmDefaultPipelineArgs", "projectId");
            }
            if ($.provisionerType == null) {
                throw new MissingRequiredPropertyException("GetIacmDefaultPipelineArgs", "provisionerType");
            }
            return $;
        }
    }

}
