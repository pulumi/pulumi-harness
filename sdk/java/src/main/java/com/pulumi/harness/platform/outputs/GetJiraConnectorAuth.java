// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GetJiraConnectorAuthPersonalAccessToken;
import com.pulumi.harness.platform.outputs.GetJiraConnectorAuthUsernamePassword;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetJiraConnectorAuth {
    /**
     * @return Authentication types for Jira connector
     * 
     */
    private String authType;
    /**
     * @return Authenticate using personal access token.
     * 
     */
    private List<GetJiraConnectorAuthPersonalAccessToken> personalAccessTokens;
    /**
     * @return Authenticate using username password.
     * 
     */
    private List<GetJiraConnectorAuthUsernamePassword> usernamePasswords;

    private GetJiraConnectorAuth() {}
    /**
     * @return Authentication types for Jira connector
     * 
     */
    public String authType() {
        return this.authType;
    }
    /**
     * @return Authenticate using personal access token.
     * 
     */
    public List<GetJiraConnectorAuthPersonalAccessToken> personalAccessTokens() {
        return this.personalAccessTokens;
    }
    /**
     * @return Authenticate using username password.
     * 
     */
    public List<GetJiraConnectorAuthUsernamePassword> usernamePasswords() {
        return this.usernamePasswords;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetJiraConnectorAuth defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authType;
        private List<GetJiraConnectorAuthPersonalAccessToken> personalAccessTokens;
        private List<GetJiraConnectorAuthUsernamePassword> usernamePasswords;
        public Builder() {}
        public Builder(GetJiraConnectorAuth defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authType = defaults.authType;
    	      this.personalAccessTokens = defaults.personalAccessTokens;
    	      this.usernamePasswords = defaults.usernamePasswords;
        }

        @CustomType.Setter
        public Builder authType(String authType) {
            if (authType == null) {
              throw new MissingRequiredPropertyException("GetJiraConnectorAuth", "authType");
            }
            this.authType = authType;
            return this;
        }
        @CustomType.Setter
        public Builder personalAccessTokens(List<GetJiraConnectorAuthPersonalAccessToken> personalAccessTokens) {
            if (personalAccessTokens == null) {
              throw new MissingRequiredPropertyException("GetJiraConnectorAuth", "personalAccessTokens");
            }
            this.personalAccessTokens = personalAccessTokens;
            return this;
        }
        public Builder personalAccessTokens(GetJiraConnectorAuthPersonalAccessToken... personalAccessTokens) {
            return personalAccessTokens(List.of(personalAccessTokens));
        }
        @CustomType.Setter
        public Builder usernamePasswords(List<GetJiraConnectorAuthUsernamePassword> usernamePasswords) {
            if (usernamePasswords == null) {
              throw new MissingRequiredPropertyException("GetJiraConnectorAuth", "usernamePasswords");
            }
            this.usernamePasswords = usernamePasswords;
            return this;
        }
        public Builder usernamePasswords(GetJiraConnectorAuthUsernamePassword... usernamePasswords) {
            return usernamePasswords(List.of(usernamePasswords));
        }
        public GetJiraConnectorAuth build() {
            final var _resultValue = new GetJiraConnectorAuth();
            _resultValue.authType = authType;
            _resultValue.personalAccessTokens = personalAccessTokens;
            _resultValue.usernamePasswords = usernamePasswords;
            return _resultValue;
        }
    }
}
