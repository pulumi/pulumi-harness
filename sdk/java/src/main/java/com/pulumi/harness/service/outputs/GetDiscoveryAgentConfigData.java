// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.service.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.service.outputs.GetDiscoveryAgentConfigDataCron;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDiscoveryAgentConfigData {
    /**
     * @return List of namespaces to exclude from discovery.
     * 
     */
    private List<String> blacklistedNamespaces;
    /**
     * @return Collection window in minutes.
     * 
     */
    private Integer collectionWindowInMin;
    /**
     * @return Cron schedule for data collection.
     * 
     */
    private List<GetDiscoveryAgentConfigDataCron> crons;
    /**
     * @return Whether to enable batch resources.
     * 
     */
    private Boolean enableBatchResources;
    /**
     * @return Whether to enable node agent.
     * 
     */
    private Boolean enableNodeAgent;
    /**
     * @return Whether to enable orphaned pod detection.
     * 
     */
    private Boolean enableOrphanedPod;
    /**
     * @return Namespace selector for the agent.
     * 
     */
    private String namespaceSelector;
    /**
     * @return Node selector for the node agent.
     * 
     */
    private String nodeAgentSelector;
    /**
     * @return List of namespaces to observe.
     * 
     */
    private List<String> observedNamespaces;

    private GetDiscoveryAgentConfigData() {}
    /**
     * @return List of namespaces to exclude from discovery.
     * 
     */
    public List<String> blacklistedNamespaces() {
        return this.blacklistedNamespaces;
    }
    /**
     * @return Collection window in minutes.
     * 
     */
    public Integer collectionWindowInMin() {
        return this.collectionWindowInMin;
    }
    /**
     * @return Cron schedule for data collection.
     * 
     */
    public List<GetDiscoveryAgentConfigDataCron> crons() {
        return this.crons;
    }
    /**
     * @return Whether to enable batch resources.
     * 
     */
    public Boolean enableBatchResources() {
        return this.enableBatchResources;
    }
    /**
     * @return Whether to enable node agent.
     * 
     */
    public Boolean enableNodeAgent() {
        return this.enableNodeAgent;
    }
    /**
     * @return Whether to enable orphaned pod detection.
     * 
     */
    public Boolean enableOrphanedPod() {
        return this.enableOrphanedPod;
    }
    /**
     * @return Namespace selector for the agent.
     * 
     */
    public String namespaceSelector() {
        return this.namespaceSelector;
    }
    /**
     * @return Node selector for the node agent.
     * 
     */
    public String nodeAgentSelector() {
        return this.nodeAgentSelector;
    }
    /**
     * @return List of namespaces to observe.
     * 
     */
    public List<String> observedNamespaces() {
        return this.observedNamespaces;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDiscoveryAgentConfigData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> blacklistedNamespaces;
        private Integer collectionWindowInMin;
        private List<GetDiscoveryAgentConfigDataCron> crons;
        private Boolean enableBatchResources;
        private Boolean enableNodeAgent;
        private Boolean enableOrphanedPod;
        private String namespaceSelector;
        private String nodeAgentSelector;
        private List<String> observedNamespaces;
        public Builder() {}
        public Builder(GetDiscoveryAgentConfigData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blacklistedNamespaces = defaults.blacklistedNamespaces;
    	      this.collectionWindowInMin = defaults.collectionWindowInMin;
    	      this.crons = defaults.crons;
    	      this.enableBatchResources = defaults.enableBatchResources;
    	      this.enableNodeAgent = defaults.enableNodeAgent;
    	      this.enableOrphanedPod = defaults.enableOrphanedPod;
    	      this.namespaceSelector = defaults.namespaceSelector;
    	      this.nodeAgentSelector = defaults.nodeAgentSelector;
    	      this.observedNamespaces = defaults.observedNamespaces;
        }

        @CustomType.Setter
        public Builder blacklistedNamespaces(List<String> blacklistedNamespaces) {
            if (blacklistedNamespaces == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentConfigData", "blacklistedNamespaces");
            }
            this.blacklistedNamespaces = blacklistedNamespaces;
            return this;
        }
        public Builder blacklistedNamespaces(String... blacklistedNamespaces) {
            return blacklistedNamespaces(List.of(blacklistedNamespaces));
        }
        @CustomType.Setter
        public Builder collectionWindowInMin(Integer collectionWindowInMin) {
            if (collectionWindowInMin == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentConfigData", "collectionWindowInMin");
            }
            this.collectionWindowInMin = collectionWindowInMin;
            return this;
        }
        @CustomType.Setter
        public Builder crons(List<GetDiscoveryAgentConfigDataCron> crons) {
            if (crons == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentConfigData", "crons");
            }
            this.crons = crons;
            return this;
        }
        public Builder crons(GetDiscoveryAgentConfigDataCron... crons) {
            return crons(List.of(crons));
        }
        @CustomType.Setter
        public Builder enableBatchResources(Boolean enableBatchResources) {
            if (enableBatchResources == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentConfigData", "enableBatchResources");
            }
            this.enableBatchResources = enableBatchResources;
            return this;
        }
        @CustomType.Setter
        public Builder enableNodeAgent(Boolean enableNodeAgent) {
            if (enableNodeAgent == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentConfigData", "enableNodeAgent");
            }
            this.enableNodeAgent = enableNodeAgent;
            return this;
        }
        @CustomType.Setter
        public Builder enableOrphanedPod(Boolean enableOrphanedPod) {
            if (enableOrphanedPod == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentConfigData", "enableOrphanedPod");
            }
            this.enableOrphanedPod = enableOrphanedPod;
            return this;
        }
        @CustomType.Setter
        public Builder namespaceSelector(String namespaceSelector) {
            if (namespaceSelector == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentConfigData", "namespaceSelector");
            }
            this.namespaceSelector = namespaceSelector;
            return this;
        }
        @CustomType.Setter
        public Builder nodeAgentSelector(String nodeAgentSelector) {
            if (nodeAgentSelector == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentConfigData", "nodeAgentSelector");
            }
            this.nodeAgentSelector = nodeAgentSelector;
            return this;
        }
        @CustomType.Setter
        public Builder observedNamespaces(List<String> observedNamespaces) {
            if (observedNamespaces == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentConfigData", "observedNamespaces");
            }
            this.observedNamespaces = observedNamespaces;
            return this;
        }
        public Builder observedNamespaces(String... observedNamespaces) {
            return observedNamespaces(List.of(observedNamespaces));
        }
        public GetDiscoveryAgentConfigData build() {
            final var _resultValue = new GetDiscoveryAgentConfigData();
            _resultValue.blacklistedNamespaces = blacklistedNamespaces;
            _resultValue.collectionWindowInMin = collectionWindowInMin;
            _resultValue.crons = crons;
            _resultValue.enableBatchResources = enableBatchResources;
            _resultValue.enableNodeAgent = enableNodeAgent;
            _resultValue.enableOrphanedPod = enableOrphanedPod;
            _resultValue.namespaceSelector = namespaceSelector;
            _resultValue.nodeAgentSelector = nodeAgentSelector;
            _resultValue.observedNamespaces = observedNamespaces;
            return _resultValue;
        }
    }
}
