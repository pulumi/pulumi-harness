// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GitOpsRepoCertRequestCertificateArgs;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitOpsRepoCertRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitOpsRepoCertRequestArgs Empty = new GitOpsRepoCertRequestArgs();

    /**
     * certificates details.
     * 
     */
    @Import(name="certificates")
    private @Nullable Output<List<GitOpsRepoCertRequestCertificateArgs>> certificates;

    /**
     * @return certificates details.
     * 
     */
    public Optional<Output<List<GitOpsRepoCertRequestCertificateArgs>>> certificates() {
        return Optional.ofNullable(this.certificates);
    }

    /**
     * Indicates if the GitOps repository certificate should be updated if existing and inserted if not.
     * 
     */
    @Import(name="upsert")
    private @Nullable Output<Boolean> upsert;

    /**
     * @return Indicates if the GitOps repository certificate should be updated if existing and inserted if not.
     * 
     */
    public Optional<Output<Boolean>> upsert() {
        return Optional.ofNullable(this.upsert);
    }

    private GitOpsRepoCertRequestArgs() {}

    private GitOpsRepoCertRequestArgs(GitOpsRepoCertRequestArgs $) {
        this.certificates = $.certificates;
        this.upsert = $.upsert;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitOpsRepoCertRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitOpsRepoCertRequestArgs $;

        public Builder() {
            $ = new GitOpsRepoCertRequestArgs();
        }

        public Builder(GitOpsRepoCertRequestArgs defaults) {
            $ = new GitOpsRepoCertRequestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificates certificates details.
         * 
         * @return builder
         * 
         */
        public Builder certificates(@Nullable Output<List<GitOpsRepoCertRequestCertificateArgs>> certificates) {
            $.certificates = certificates;
            return this;
        }

        /**
         * @param certificates certificates details.
         * 
         * @return builder
         * 
         */
        public Builder certificates(List<GitOpsRepoCertRequestCertificateArgs> certificates) {
            return certificates(Output.of(certificates));
        }

        /**
         * @param certificates certificates details.
         * 
         * @return builder
         * 
         */
        public Builder certificates(GitOpsRepoCertRequestCertificateArgs... certificates) {
            return certificates(List.of(certificates));
        }

        /**
         * @param upsert Indicates if the GitOps repository certificate should be updated if existing and inserted if not.
         * 
         * @return builder
         * 
         */
        public Builder upsert(@Nullable Output<Boolean> upsert) {
            $.upsert = upsert;
            return this;
        }

        /**
         * @param upsert Indicates if the GitOps repository certificate should be updated if existing and inserted if not.
         * 
         * @return builder
         * 
         */
        public Builder upsert(Boolean upsert) {
            return upsert(Output.of(upsert));
        }

        public GitOpsRepoCertRequestArgs build() {
            return $;
        }
    }

}
