// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.service.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.service.outputs.GetDiscoveryAgentConfigKuberneteResource;
import com.pulumi.harness.service.outputs.GetDiscoveryAgentConfigKuberneteToleration;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDiscoveryAgentConfigKubernete {
    /**
     * @return Annotations to add to all resources.
     * 
     */
    private Map<String,String> annotations;
    /**
     * @return Whether to disable namespace creation.
     * 
     */
    private Boolean disableNamespaceCreation;
    /**
     * @return The image pull policy.
     * 
     */
    private String imagePullPolicy;
    /**
     * @return Labels to add to all resources.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return Kubernetes namespace to use
     * 
     */
    private String namespace;
    /**
     * @return Whether the agent is namespaced.
     * 
     */
    private Boolean namespaced;
    /**
     * @return Node selector labels.
     * 
     */
    private Map<String,String> nodeSelector;
    /**
     * @return Compute resource requirements for the agent container.
     * 
     */
    private List<GetDiscoveryAgentConfigKuberneteResource> resources;
    /**
     * @return The group ID to run as.
     * 
     */
    private Integer runAsGroup;
    /**
     * @return The user ID to run as.
     * 
     */
    private Integer runAsUser;
    /**
     * @return Service account to use
     * 
     */
    private String serviceAccount;
    /**
     * @return Tolerations for pod assignment.
     * 
     */
    private List<GetDiscoveryAgentConfigKuberneteToleration> tolerations;

    private GetDiscoveryAgentConfigKubernete() {}
    /**
     * @return Annotations to add to all resources.
     * 
     */
    public Map<String,String> annotations() {
        return this.annotations;
    }
    /**
     * @return Whether to disable namespace creation.
     * 
     */
    public Boolean disableNamespaceCreation() {
        return this.disableNamespaceCreation;
    }
    /**
     * @return The image pull policy.
     * 
     */
    public String imagePullPolicy() {
        return this.imagePullPolicy;
    }
    /**
     * @return Labels to add to all resources.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return Kubernetes namespace to use
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return Whether the agent is namespaced.
     * 
     */
    public Boolean namespaced() {
        return this.namespaced;
    }
    /**
     * @return Node selector labels.
     * 
     */
    public Map<String,String> nodeSelector() {
        return this.nodeSelector;
    }
    /**
     * @return Compute resource requirements for the agent container.
     * 
     */
    public List<GetDiscoveryAgentConfigKuberneteResource> resources() {
        return this.resources;
    }
    /**
     * @return The group ID to run as.
     * 
     */
    public Integer runAsGroup() {
        return this.runAsGroup;
    }
    /**
     * @return The user ID to run as.
     * 
     */
    public Integer runAsUser() {
        return this.runAsUser;
    }
    /**
     * @return Service account to use
     * 
     */
    public String serviceAccount() {
        return this.serviceAccount;
    }
    /**
     * @return Tolerations for pod assignment.
     * 
     */
    public List<GetDiscoveryAgentConfigKuberneteToleration> tolerations() {
        return this.tolerations;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDiscoveryAgentConfigKubernete defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> annotations;
        private Boolean disableNamespaceCreation;
        private String imagePullPolicy;
        private Map<String,String> labels;
        private String namespace;
        private Boolean namespaced;
        private Map<String,String> nodeSelector;
        private List<GetDiscoveryAgentConfigKuberneteResource> resources;
        private Integer runAsGroup;
        private Integer runAsUser;
        private String serviceAccount;
        private List<GetDiscoveryAgentConfigKuberneteToleration> tolerations;
        public Builder() {}
        public Builder(GetDiscoveryAgentConfigKubernete defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.disableNamespaceCreation = defaults.disableNamespaceCreation;
    	      this.imagePullPolicy = defaults.imagePullPolicy;
    	      this.labels = defaults.labels;
    	      this.namespace = defaults.namespace;
    	      this.namespaced = defaults.namespaced;
    	      this.nodeSelector = defaults.nodeSelector;
    	      this.resources = defaults.resources;
    	      this.runAsGroup = defaults.runAsGroup;
    	      this.runAsUser = defaults.runAsUser;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.tolerations = defaults.tolerations;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,String> annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentConfigKubernete", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder disableNamespaceCreation(Boolean disableNamespaceCreation) {
            if (disableNamespaceCreation == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentConfigKubernete", "disableNamespaceCreation");
            }
            this.disableNamespaceCreation = disableNamespaceCreation;
            return this;
        }
        @CustomType.Setter
        public Builder imagePullPolicy(String imagePullPolicy) {
            if (imagePullPolicy == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentConfigKubernete", "imagePullPolicy");
            }
            this.imagePullPolicy = imagePullPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentConfigKubernete", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentConfigKubernete", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder namespaced(Boolean namespaced) {
            if (namespaced == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentConfigKubernete", "namespaced");
            }
            this.namespaced = namespaced;
            return this;
        }
        @CustomType.Setter
        public Builder nodeSelector(Map<String,String> nodeSelector) {
            if (nodeSelector == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentConfigKubernete", "nodeSelector");
            }
            this.nodeSelector = nodeSelector;
            return this;
        }
        @CustomType.Setter
        public Builder resources(List<GetDiscoveryAgentConfigKuberneteResource> resources) {
            if (resources == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentConfigKubernete", "resources");
            }
            this.resources = resources;
            return this;
        }
        public Builder resources(GetDiscoveryAgentConfigKuberneteResource... resources) {
            return resources(List.of(resources));
        }
        @CustomType.Setter
        public Builder runAsGroup(Integer runAsGroup) {
            if (runAsGroup == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentConfigKubernete", "runAsGroup");
            }
            this.runAsGroup = runAsGroup;
            return this;
        }
        @CustomType.Setter
        public Builder runAsUser(Integer runAsUser) {
            if (runAsUser == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentConfigKubernete", "runAsUser");
            }
            this.runAsUser = runAsUser;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccount(String serviceAccount) {
            if (serviceAccount == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentConfigKubernete", "serviceAccount");
            }
            this.serviceAccount = serviceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder tolerations(List<GetDiscoveryAgentConfigKuberneteToleration> tolerations) {
            if (tolerations == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentConfigKubernete", "tolerations");
            }
            this.tolerations = tolerations;
            return this;
        }
        public Builder tolerations(GetDiscoveryAgentConfigKuberneteToleration... tolerations) {
            return tolerations(List.of(tolerations));
        }
        public GetDiscoveryAgentConfigKubernete build() {
            final var _resultValue = new GetDiscoveryAgentConfigKubernete();
            _resultValue.annotations = annotations;
            _resultValue.disableNamespaceCreation = disableNamespaceCreation;
            _resultValue.imagePullPolicy = imagePullPolicy;
            _resultValue.labels = labels;
            _resultValue.namespace = namespace;
            _resultValue.namespaced = namespaced;
            _resultValue.nodeSelector = nodeSelector;
            _resultValue.resources = resources;
            _resultValue.runAsGroup = runAsGroup;
            _resultValue.runAsUser = runAsUser;
            _resultValue.serviceAccount = serviceAccount;
            _resultValue.tolerations = tolerations;
            return _resultValue;
        }
    }
}
