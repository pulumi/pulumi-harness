// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.EnvironmentArgs;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.inputs.EnvironmentState;
import com.pulumi.harness.outputs.EnvironmentVariableOverride;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for creating an environment
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.Application;
 * import com.pulumi.harness.ApplicationArgs;
 * import com.pulumi.harness.service.Kubernetes;
 * import com.pulumi.harness.service.KubernetesArgs;
 * import com.pulumi.harness.service.inputs.KubernetesVariableArgs;
 * import com.pulumi.harness.Environment;
 * import com.pulumi.harness.EnvironmentArgs;
 * import com.pulumi.harness.inputs.EnvironmentVariableOverrideArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new Application("test", ApplicationArgs.builder()
 *             .name("%[1]s")
 *             .build());
 * 
 *         var testKubernetes = new Kubernetes("testKubernetes", KubernetesArgs.builder()
 *             .appId(test.id())
 *             .name("%[1]s")
 *             .helmVersion("V2")
 *             .description("description")
 *             .variables(            
 *                 KubernetesVariableArgs.builder()
 *                     .name("test")
 *                     .value("test_value")
 *                     .type("TEXT")
 *                     .build(),
 *                 KubernetesVariableArgs.builder()
 *                     .name("test2")
 *                     .value("test_value2")
 *                     .type("TEXT")
 *                     .build())
 *             .build());
 * 
 *         var testEnvironment = new Environment("testEnvironment", EnvironmentArgs.builder()
 *             .appId(test.id())
 *             .name("%[1]s")
 *             .type("%[2]s")
 *             .variableOverrides(            
 *                 EnvironmentVariableOverrideArgs.builder()
 *                     .serviceName(testKubernetes.name())
 *                     .name("test")
 *                     .value("override")
 *                     .type("TEXT")
 *                     .build(),
 *                 EnvironmentVariableOverrideArgs.builder()
 *                     .serviceName(testKubernetes.name())
 *                     .name("test2")
 *                     .value("override2")
 *                     .type("TEXT")
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * The `pulumi import` command can be used, for example:
 * 
 * Import using the Harness application id and environment id.
 * 
 * ```sh
 * $ pulumi import harness:index/environment:Environment dev &lt;application_id&gt;/&lt;environment_id&gt;
 * ```
 * 
 */
@ResourceType(type="harness:index/environment:Environment")
public class Environment extends com.pulumi.resources.CustomResource {
    /**
     * The id of the application.
     * 
     */
    @Export(name="appId", refs={String.class}, tree="[0]")
    private Output<String> appId;

    /**
     * @return The id of the application.
     * 
     */
    public Output<String> appId() {
        return this.appId;
    }
    /**
     * The description of the environment.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the environment.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The name of the environment.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the environment.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The type of the environment. Valid values are `PROD` and `NON_PROD`
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The type of the environment. Valid values are `PROD` and `NON_PROD`
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Override for a service variable
     * 
     */
    @Export(name="variableOverrides", refs={List.class,EnvironmentVariableOverride.class}, tree="[0,1]")
    private Output</* @Nullable */ List<EnvironmentVariableOverride>> variableOverrides;

    /**
     * @return Override for a service variable
     * 
     */
    public Output<Optional<List<EnvironmentVariableOverride>>> variableOverrides() {
        return Codegen.optional(this.variableOverrides);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Environment(java.lang.String name) {
        this(name, EnvironmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Environment(java.lang.String name, EnvironmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Environment(java.lang.String name, EnvironmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:index/environment:Environment", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Environment(java.lang.String name, Output<java.lang.String> id, @Nullable EnvironmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:index/environment:Environment", name, state, makeResourceOptions(options, id), false);
    }

    private static EnvironmentArgs makeArgs(EnvironmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? EnvironmentArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Environment get(java.lang.String name, Output<java.lang.String> id, @Nullable EnvironmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Environment(name, id, state, options);
    }
}
