// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.chaos.SecurityGovernanceConditionArgs;
import com.pulumi.harness.chaos.inputs.SecurityGovernanceConditionState;
import com.pulumi.harness.chaos.outputs.SecurityGovernanceConditionFaultSpec;
import com.pulumi.harness.chaos.outputs.SecurityGovernanceConditionK8sSpec;
import com.pulumi.harness.chaos.outputs.SecurityGovernanceConditionMachineSpec;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for managing a Harness Chaos Security Governance Condition
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.chaos.SecurityGovernanceCondition;
 * import com.pulumi.harness.chaos.SecurityGovernanceConditionArgs;
 * import com.pulumi.harness.chaos.inputs.SecurityGovernanceConditionFaultSpecArgs;
 * import com.pulumi.harness.chaos.inputs.SecurityGovernanceConditionK8sSpecArgs;
 * import com.pulumi.harness.chaos.inputs.SecurityGovernanceConditionK8sSpecInfraSpecArgs;
 * import com.pulumi.harness.chaos.inputs.SecurityGovernanceConditionK8sSpecApplicationSpecArgs;
 * import com.pulumi.harness.chaos.inputs.SecurityGovernanceConditionK8sSpecChaosServiceAccountSpecArgs;
 * import com.pulumi.harness.chaos.inputs.SecurityGovernanceConditionMachineSpecArgs;
 * import com.pulumi.harness.chaos.inputs.SecurityGovernanceConditionMachineSpecInfraSpecArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Example of a Kubernetes Security Governance Condition
 *         var k8sCondition = new SecurityGovernanceCondition("k8sCondition", SecurityGovernanceConditionArgs.builder()
 *             .orgId(orgId)
 *             .projectId(projectId)
 *             .name("k8s-security-condition")
 *             .description("Security governance condition for Kubernetes workloads")
 *             .infraType("KubernetesV2")
 *             .faultSpec(SecurityGovernanceConditionFaultSpecArgs.builder()
 *                 .operator("NOT_EQUAL_TO")
 *                 .faults(                
 *                     SecurityGovernanceConditionFaultSpecFaultArgs.builder()
 *                         .faultType("FAULT")
 *                         .name("pod-delete")
 *                         .build(),
 *                     SecurityGovernanceConditionFaultSpecFaultArgs.builder()
 *                         .faultType("FAULT")
 *                         .name("pod-dns")
 *                         .build())
 *                 .build())
 *             .k8sSpec(SecurityGovernanceConditionK8sSpecArgs.builder()
 *                 .infraSpec(SecurityGovernanceConditionK8sSpecInfraSpecArgs.builder()
 *                     .operator("EQUAL_TO")
 *                     .infraIds(k8sInfraId)
 *                     .build())
 *                 .applicationSpec(SecurityGovernanceConditionK8sSpecApplicationSpecArgs.builder()
 *                     .operator("EQUAL_TO")
 *                     .workloads(SecurityGovernanceConditionK8sSpecApplicationSpecWorkloadArgs.builder()
 *                         .namespace("default")
 *                         .kind("deployment")
 *                         .label("app=nginx")
 *                         .services("nginx-service")
 *                         .applicationMapId("nginx-app")
 *                         .build())
 *                     .build())
 *                 .chaosServiceAccountSpec(SecurityGovernanceConditionK8sSpecChaosServiceAccountSpecArgs.builder()
 *                     .operator("EQUAL_TO")
 *                     .serviceAccounts(                    
 *                         "default",
 *                         "chaos-service-account")
 *                     .build())
 *                 .build())
 *             .tags(            
 *                 "env:prod",
 *                 "team:security",
 *                 "platform:k8s")
 *             .build());
 * 
 *         // Example of a Windows Security Governance Condition
 *         var windowsCondition = new SecurityGovernanceCondition("windowsCondition", SecurityGovernanceConditionArgs.builder()
 *             .orgId(orgId)
 *             .projectId(projectId)
 *             .name("windows-security-condition")
 *             .description("Security governance condition for Windows hosts")
 *             .infraType("Windows")
 *             .faultSpec(SecurityGovernanceConditionFaultSpecArgs.builder()
 *                 .operator("NOT_EQUAL_TO")
 *                 .faults(                
 *                     SecurityGovernanceConditionFaultSpecFaultArgs.builder()
 *                         .faultType("FAULT")
 *                         .name("process-kill")
 *                         .build(),
 *                     SecurityGovernanceConditionFaultSpecFaultArgs.builder()
 *                         .faultType("FAULT")
 *                         .name("cpu-hog")
 *                         .build())
 *                 .build())
 *             .machineSpec(SecurityGovernanceConditionMachineSpecArgs.builder()
 *                 .infraSpec(SecurityGovernanceConditionMachineSpecInfraSpecArgs.builder()
 *                     .operator("EQUAL_TO")
 *                     .infraIds(windowsInfraId)
 *                     .build())
 *                 .build())
 *             .tags(            
 *                 "env:prod",
 *                 "team:security",
 *                 "platform:windows")
 *             .build());
 * 
 *         // Example of a Linux Security Governance Condition
 *         var linuxCondition = new SecurityGovernanceCondition("linuxCondition", SecurityGovernanceConditionArgs.builder()
 *             .orgId(orgId)
 *             .projectId(projectId)
 *             .name("linux-security-condition")
 *             .description("Security governance condition for Linux hosts")
 *             .infraType("Linux")
 *             .faultSpec(SecurityGovernanceConditionFaultSpecArgs.builder()
 *                 .operator("NOT_EQUAL_TO")
 *                 .faults(                
 *                     SecurityGovernanceConditionFaultSpecFaultArgs.builder()
 *                         .faultType("FAULT")
 *                         .name("process-kill")
 *                         .build(),
 *                     SecurityGovernanceConditionFaultSpecFaultArgs.builder()
 *                         .faultType("FAULT")
 *                         .name("memory-hog")
 *                         .build())
 *                 .build())
 *             .machineSpec(SecurityGovernanceConditionMachineSpecArgs.builder()
 *                 .infraSpec(SecurityGovernanceConditionMachineSpecInfraSpecArgs.builder()
 *                     .operator("EQUAL_TO")
 *                     .infraIds(linuxInfraId)
 *                     .build())
 *                 .build())
 *             .tags(            
 *                 "env:prod",
 *                 "team:security",
 *                 "platform:linux")
 *             .build());
 * 
 *         ctx.export("k8sConditionId", k8sCondition.id());
 *         ctx.export("windowsConditionId", windowsCondition.id());
 *         ctx.export("linuxConditionId", linuxCondition.id());
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * The `pulumi import` command can be used, for example:
 * 
 * Import Project level Chaos Security Governance Condition
 * 
 * ```sh
 * $ pulumi import harness:chaos/securityGovernanceCondition:SecurityGovernanceCondition example org_id/project_id/condition_id
 * ```
 * 
 */
@ResourceType(type="harness:chaos/securityGovernanceCondition:SecurityGovernanceCondition")
public class SecurityGovernanceCondition extends com.pulumi.resources.CustomResource {
    /**
     * Description of the security governance condition
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the security governance condition
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Specification for faults to be included in the condition
     * 
     */
    @Export(name="faultSpec", refs={SecurityGovernanceConditionFaultSpec.class}, tree="[0]")
    private Output<SecurityGovernanceConditionFaultSpec> faultSpec;

    /**
     * @return Specification for faults to be included in the condition
     * 
     */
    public Output<SecurityGovernanceConditionFaultSpec> faultSpec() {
        return this.faultSpec;
    }
    /**
     * Type of infrastructure (Kubernetes, KubernetesV2, Linux, Windows, CloudFoundry, Container)
     * 
     */
    @Export(name="infraType", refs={String.class}, tree="[0]")
    private Output<String> infraType;

    /**
     * @return Type of infrastructure (Kubernetes, KubernetesV2, Linux, Windows, CloudFoundry, Container)
     * 
     */
    public Output<String> infraType() {
        return this.infraType;
    }
    /**
     * Kubernetes specific configuration (required when infra*type is KUBERNETES or KUBERNETESV2)
     * 
     */
    @Export(name="k8sSpec", refs={SecurityGovernanceConditionK8sSpec.class}, tree="[0]")
    private Output</* @Nullable */ SecurityGovernanceConditionK8sSpec> k8sSpec;

    /**
     * @return Kubernetes specific configuration (required when infra*type is KUBERNETES or KUBERNETESV2)
     * 
     */
    public Output<Optional<SecurityGovernanceConditionK8sSpec>> k8sSpec() {
        return Codegen.optional(this.k8sSpec);
    }
    /**
     * Machine specific configuration (required when infra*type is LINUX or WINDOWS)
     * 
     */
    @Export(name="machineSpec", refs={SecurityGovernanceConditionMachineSpec.class}, tree="[0]")
    private Output</* @Nullable */ SecurityGovernanceConditionMachineSpec> machineSpec;

    /**
     * @return Machine specific configuration (required when infra*type is LINUX or WINDOWS)
     * 
     */
    public Output<Optional<SecurityGovernanceConditionMachineSpec>> machineSpec() {
        return Codegen.optional(this.machineSpec);
    }
    /**
     * Name of the security governance condition
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the security governance condition
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The organization ID of the security governance condition
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output<String> orgId;

    /**
     * @return The organization ID of the security governance condition
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }
    /**
     * The project ID of the security governance condition
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return The project ID of the security governance condition
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * Tags for the security governance condition
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Tags for the security governance condition
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SecurityGovernanceCondition(java.lang.String name) {
        this(name, SecurityGovernanceConditionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SecurityGovernanceCondition(java.lang.String name, SecurityGovernanceConditionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SecurityGovernanceCondition(java.lang.String name, SecurityGovernanceConditionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:chaos/securityGovernanceCondition:SecurityGovernanceCondition", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private SecurityGovernanceCondition(java.lang.String name, Output<java.lang.String> id, @Nullable SecurityGovernanceConditionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:chaos/securityGovernanceCondition:SecurityGovernanceCondition", name, state, makeResourceOptions(options, id), false);
    }

    private static SecurityGovernanceConditionArgs makeArgs(SecurityGovernanceConditionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SecurityGovernanceConditionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SecurityGovernanceCondition get(java.lang.String name, Output<java.lang.String> id, @Nullable SecurityGovernanceConditionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SecurityGovernanceCondition(name, id, state, options);
    }
}
