// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.harness.platform.outputs.GitOpsApplicationsApplicationSpecSourceHelmFileParameter;
import com.pulumi.harness.platform.outputs.GitOpsApplicationsApplicationSpecSourceHelmParameter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GitOpsApplicationsApplicationSpecSourceHelm {
    /**
     * @return File parameters to the helm template.
     * 
     */
    private @Nullable List<GitOpsApplicationsApplicationSpecSourceHelmFileParameter> fileParameters;
    /**
     * @return Prevents &#39;helm template&#39; from failing when valueFiles do not exist locally.
     * 
     */
    private @Nullable Boolean ignoreMissingValueFiles;
    /**
     * @return List of helm parameters which are passed to the helm template command upon manifest generation.
     * 
     */
    private @Nullable List<GitOpsApplicationsApplicationSpecSourceHelmParameter> parameters;
    /**
     * @return Indicates if to pass credentials to all domains (helm&#39;s --pass-credentials)
     * 
     */
    private @Nullable Boolean passCredentials;
    /**
     * @return Helm release name to use. If omitted it will use the GitOps application name.
     * 
     */
    private @Nullable String releaseName;
    /**
     * @return Indicates if to skip CRDs during helm template. Corresponds to helm --skip-crds
     * 
     */
    private @Nullable Boolean skipCrds;
    /**
     * @return Indicates if to skip schema validation during helm template. Corresponds to helm --skip-schema-validation
     * 
     */
    private @Nullable Boolean skipSchemaValidation;
    /**
     * @return Indicates if to skip tests during helm template. Corresponds to helm --skip-tests
     * 
     */
    private @Nullable Boolean skipTests;
    /**
     * @return List of helm value files to use when generating a template.
     * 
     */
    private @Nullable List<String> valueFiles;
    /**
     * @return Helm values to be passed to helm template, typically defined as a block.
     * 
     */
    private @Nullable String values;
    /**
     * @return Helm version to use for templating (either &#34;2&#34; or &#34;3&#34;)
     * 
     */
    private @Nullable String version;

    private GitOpsApplicationsApplicationSpecSourceHelm() {}
    /**
     * @return File parameters to the helm template.
     * 
     */
    public List<GitOpsApplicationsApplicationSpecSourceHelmFileParameter> fileParameters() {
        return this.fileParameters == null ? List.of() : this.fileParameters;
    }
    /**
     * @return Prevents &#39;helm template&#39; from failing when valueFiles do not exist locally.
     * 
     */
    public Optional<Boolean> ignoreMissingValueFiles() {
        return Optional.ofNullable(this.ignoreMissingValueFiles);
    }
    /**
     * @return List of helm parameters which are passed to the helm template command upon manifest generation.
     * 
     */
    public List<GitOpsApplicationsApplicationSpecSourceHelmParameter> parameters() {
        return this.parameters == null ? List.of() : this.parameters;
    }
    /**
     * @return Indicates if to pass credentials to all domains (helm&#39;s --pass-credentials)
     * 
     */
    public Optional<Boolean> passCredentials() {
        return Optional.ofNullable(this.passCredentials);
    }
    /**
     * @return Helm release name to use. If omitted it will use the GitOps application name.
     * 
     */
    public Optional<String> releaseName() {
        return Optional.ofNullable(this.releaseName);
    }
    /**
     * @return Indicates if to skip CRDs during helm template. Corresponds to helm --skip-crds
     * 
     */
    public Optional<Boolean> skipCrds() {
        return Optional.ofNullable(this.skipCrds);
    }
    /**
     * @return Indicates if to skip schema validation during helm template. Corresponds to helm --skip-schema-validation
     * 
     */
    public Optional<Boolean> skipSchemaValidation() {
        return Optional.ofNullable(this.skipSchemaValidation);
    }
    /**
     * @return Indicates if to skip tests during helm template. Corresponds to helm --skip-tests
     * 
     */
    public Optional<Boolean> skipTests() {
        return Optional.ofNullable(this.skipTests);
    }
    /**
     * @return List of helm value files to use when generating a template.
     * 
     */
    public List<String> valueFiles() {
        return this.valueFiles == null ? List.of() : this.valueFiles;
    }
    /**
     * @return Helm values to be passed to helm template, typically defined as a block.
     * 
     */
    public Optional<String> values() {
        return Optional.ofNullable(this.values);
    }
    /**
     * @return Helm version to use for templating (either &#34;2&#34; or &#34;3&#34;)
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GitOpsApplicationsApplicationSpecSourceHelm defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GitOpsApplicationsApplicationSpecSourceHelmFileParameter> fileParameters;
        private @Nullable Boolean ignoreMissingValueFiles;
        private @Nullable List<GitOpsApplicationsApplicationSpecSourceHelmParameter> parameters;
        private @Nullable Boolean passCredentials;
        private @Nullable String releaseName;
        private @Nullable Boolean skipCrds;
        private @Nullable Boolean skipSchemaValidation;
        private @Nullable Boolean skipTests;
        private @Nullable List<String> valueFiles;
        private @Nullable String values;
        private @Nullable String version;
        public Builder() {}
        public Builder(GitOpsApplicationsApplicationSpecSourceHelm defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fileParameters = defaults.fileParameters;
    	      this.ignoreMissingValueFiles = defaults.ignoreMissingValueFiles;
    	      this.parameters = defaults.parameters;
    	      this.passCredentials = defaults.passCredentials;
    	      this.releaseName = defaults.releaseName;
    	      this.skipCrds = defaults.skipCrds;
    	      this.skipSchemaValidation = defaults.skipSchemaValidation;
    	      this.skipTests = defaults.skipTests;
    	      this.valueFiles = defaults.valueFiles;
    	      this.values = defaults.values;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder fileParameters(@Nullable List<GitOpsApplicationsApplicationSpecSourceHelmFileParameter> fileParameters) {

            this.fileParameters = fileParameters;
            return this;
        }
        public Builder fileParameters(GitOpsApplicationsApplicationSpecSourceHelmFileParameter... fileParameters) {
            return fileParameters(List.of(fileParameters));
        }
        @CustomType.Setter
        public Builder ignoreMissingValueFiles(@Nullable Boolean ignoreMissingValueFiles) {

            this.ignoreMissingValueFiles = ignoreMissingValueFiles;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(@Nullable List<GitOpsApplicationsApplicationSpecSourceHelmParameter> parameters) {

            this.parameters = parameters;
            return this;
        }
        public Builder parameters(GitOpsApplicationsApplicationSpecSourceHelmParameter... parameters) {
            return parameters(List.of(parameters));
        }
        @CustomType.Setter
        public Builder passCredentials(@Nullable Boolean passCredentials) {

            this.passCredentials = passCredentials;
            return this;
        }
        @CustomType.Setter
        public Builder releaseName(@Nullable String releaseName) {

            this.releaseName = releaseName;
            return this;
        }
        @CustomType.Setter
        public Builder skipCrds(@Nullable Boolean skipCrds) {

            this.skipCrds = skipCrds;
            return this;
        }
        @CustomType.Setter
        public Builder skipSchemaValidation(@Nullable Boolean skipSchemaValidation) {

            this.skipSchemaValidation = skipSchemaValidation;
            return this;
        }
        @CustomType.Setter
        public Builder skipTests(@Nullable Boolean skipTests) {

            this.skipTests = skipTests;
            return this;
        }
        @CustomType.Setter
        public Builder valueFiles(@Nullable List<String> valueFiles) {

            this.valueFiles = valueFiles;
            return this;
        }
        public Builder valueFiles(String... valueFiles) {
            return valueFiles(List.of(valueFiles));
        }
        @CustomType.Setter
        public Builder values(@Nullable String values) {

            this.values = values;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {

            this.version = version;
            return this;
        }
        public GitOpsApplicationsApplicationSpecSourceHelm build() {
            final var _resultValue = new GitOpsApplicationsApplicationSpecSourceHelm();
            _resultValue.fileParameters = fileParameters;
            _resultValue.ignoreMissingValueFiles = ignoreMissingValueFiles;
            _resultValue.parameters = parameters;
            _resultValue.passCredentials = passCredentials;
            _resultValue.releaseName = releaseName;
            _resultValue.skipCrds = skipCrds;
            _resultValue.skipSchemaValidation = skipSchemaValidation;
            _resultValue.skipTests = skipTests;
            _resultValue.valueFiles = valueFiles;
            _resultValue.values = values;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
