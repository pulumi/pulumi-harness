// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DbSchemaSchemaSource {
    /**
     * @return If connector type is artifactory, path to the archive file which contains the changeLog
     * 
     */
    private @Nullable String archivePath;
    /**
     * @return Connector to repository at which to find details about the database schema
     * 
     */
    private String connector;
    /**
     * @return The path within the specified repository at which to find details about the database schema
     * 
     */
    private String location;
    /**
     * @return If connector url is of account, which repository to connect to using the connector
     * 
     */
    private @Nullable String repo;

    private DbSchemaSchemaSource() {}
    /**
     * @return If connector type is artifactory, path to the archive file which contains the changeLog
     * 
     */
    public Optional<String> archivePath() {
        return Optional.ofNullable(this.archivePath);
    }
    /**
     * @return Connector to repository at which to find details about the database schema
     * 
     */
    public String connector() {
        return this.connector;
    }
    /**
     * @return The path within the specified repository at which to find details about the database schema
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return If connector url is of account, which repository to connect to using the connector
     * 
     */
    public Optional<String> repo() {
        return Optional.ofNullable(this.repo);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DbSchemaSchemaSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String archivePath;
        private String connector;
        private String location;
        private @Nullable String repo;
        public Builder() {}
        public Builder(DbSchemaSchemaSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archivePath = defaults.archivePath;
    	      this.connector = defaults.connector;
    	      this.location = defaults.location;
    	      this.repo = defaults.repo;
        }

        @CustomType.Setter
        public Builder archivePath(@Nullable String archivePath) {

            this.archivePath = archivePath;
            return this;
        }
        @CustomType.Setter
        public Builder connector(String connector) {
            if (connector == null) {
              throw new MissingRequiredPropertyException("DbSchemaSchemaSource", "connector");
            }
            this.connector = connector;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("DbSchemaSchemaSource", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder repo(@Nullable String repo) {

            this.repo = repo;
            return this;
        }
        public DbSchemaSchemaSource build() {
            final var _resultValue = new DbSchemaSchemaSource();
            _resultValue.archivePath = archivePath;
            _resultValue.connector = connector;
            _resultValue.location = location;
            _resultValue.repo = repo;
            return _resultValue;
        }
    }
}
