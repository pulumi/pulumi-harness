// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.service.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.service.inputs.DiscoveryAgentConfigArgs;
import com.pulumi.harness.service.inputs.DiscoveryAgentInstallationDetailArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiscoveryAgentState extends com.pulumi.resources.ResourceArgs {

    public static final DiscoveryAgentState Empty = new DiscoveryAgentState();

    /**
     * Configuration for the agent. This is a required field.
     * 
     */
    @Import(name="configs")
    private @Nullable Output<List<DiscoveryAgentConfigArgs>> configs;

    /**
     * @return Configuration for the agent. This is a required field.
     * 
     */
    public Optional<Output<List<DiscoveryAgentConfigArgs>>> configs() {
        return Optional.ofNullable(this.configs);
    }

    /**
     * Correlation ID for the agent.
     * 
     */
    @Import(name="correlationId")
    private @Nullable Output<String> correlationId;

    /**
     * @return Correlation ID for the agent.
     * 
     */
    public Optional<Output<String>> correlationId() {
        return Optional.ofNullable(this.correlationId);
    }

    /**
     * Timestamp when the agent was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Timestamp when the agent was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * User who created the agent.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return User who created the agent.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * Description of the agent.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the agent.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The environment identifier of the agent. This is a required field.
     * 
     */
    @Import(name="environmentIdentifier")
    private @Nullable Output<String> environmentIdentifier;

    /**
     * @return The environment identifier of the agent. This is a required field.
     * 
     */
    public Optional<Output<String>> environmentIdentifier() {
        return Optional.ofNullable(this.environmentIdentifier);
    }

    /**
     * The unique identity of the agent.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<String> identity;

    /**
     * @return The unique identity of the agent.
     * 
     */
    public Optional<Output<String>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * The infrastructure identifier of the agent. This is a required field.
     * 
     */
    @Import(name="infraIdentifier")
    private @Nullable Output<String> infraIdentifier;

    /**
     * @return The infrastructure identifier of the agent. This is a required field.
     * 
     */
    public Optional<Output<String>> infraIdentifier() {
        return Optional.ofNullable(this.infraIdentifier);
    }

    /**
     * Installation details of the agent.
     * 
     */
    @Import(name="installationDetails")
    private @Nullable Output<List<DiscoveryAgentInstallationDetailArgs>> installationDetails;

    /**
     * @return Installation details of the agent.
     * 
     */
    public Optional<Output<List<DiscoveryAgentInstallationDetailArgs>>> installationDetails() {
        return Optional.ofNullable(this.installationDetails);
    }

    /**
     * Type of installation for the agent.
     * 
     */
    @Import(name="installationType")
    private @Nullable Output<String> installationType;

    /**
     * @return Type of installation for the agent.
     * 
     */
    public Optional<Output<String>> installationType() {
        return Optional.ofNullable(this.installationType);
    }

    /**
     * The name of the agent. This is a required field.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the agent. This is a required field.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Number of network maps associated with this agent.
     * 
     */
    @Import(name="networkMapCount")
    private @Nullable Output<Integer> networkMapCount;

    /**
     * @return Number of network maps associated with this agent.
     * 
     */
    public Optional<Output<Integer>> networkMapCount() {
        return Optional.ofNullable(this.networkMapCount);
    }

    /**
     * The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     * 
     */
    @Import(name="orgIdentifier")
    private @Nullable Output<String> orgIdentifier;

    /**
     * @return The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     * 
     */
    public Optional<Output<String>> orgIdentifier() {
        return Optional.ofNullable(this.orgIdentifier);
    }

    /**
     * Whether this is a permanent installation.
     * 
     */
    @Import(name="permanentInstallation")
    private @Nullable Output<Boolean> permanentInstallation;

    /**
     * @return Whether this is a permanent installation.
     * 
     */
    public Optional<Output<Boolean>> permanentInstallation() {
        return Optional.ofNullable(this.permanentInstallation);
    }

    /**
     * The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     * 
     */
    @Import(name="projectIdentifier")
    private @Nullable Output<String> projectIdentifier;

    /**
     * @return The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     * 
     */
    public Optional<Output<String>> projectIdentifier() {
        return Optional.ofNullable(this.projectIdentifier);
    }

    /**
     * Whether the agent has been removed.
     * 
     */
    @Import(name="removed")
    private @Nullable Output<Boolean> removed;

    /**
     * @return Whether the agent has been removed.
     * 
     */
    public Optional<Output<Boolean>> removed() {
        return Optional.ofNullable(this.removed);
    }

    /**
     * Timestamp when the agent was removed.
     * 
     */
    @Import(name="removedAt")
    private @Nullable Output<String> removedAt;

    /**
     * @return Timestamp when the agent was removed.
     * 
     */
    public Optional<Output<String>> removedAt() {
        return Optional.ofNullable(this.removedAt);
    }

    /**
     * Number of services managed by this agent.
     * 
     */
    @Import(name="serviceCount")
    private @Nullable Output<Integer> serviceCount;

    /**
     * @return Number of services managed by this agent.
     * 
     */
    public Optional<Output<Integer>> serviceCount() {
        return Optional.ofNullable(this.serviceCount);
    }

    /**
     * List of resource tags for the agent.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return List of resource tags for the agent.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Timestamp when the agent was last updated.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return Timestamp when the agent was last updated.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * User who last updated the agent.
     * 
     */
    @Import(name="updatedBy")
    private @Nullable Output<String> updatedBy;

    /**
     * @return User who last updated the agent.
     * 
     */
    public Optional<Output<String>> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }

    /**
     * Webhook URL for the agent.
     * 
     */
    @Import(name="webhookUrl")
    private @Nullable Output<String> webhookUrl;

    /**
     * @return Webhook URL for the agent.
     * 
     */
    public Optional<Output<String>> webhookUrl() {
        return Optional.ofNullable(this.webhookUrl);
    }

    private DiscoveryAgentState() {}

    private DiscoveryAgentState(DiscoveryAgentState $) {
        this.configs = $.configs;
        this.correlationId = $.correlationId;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.description = $.description;
        this.environmentIdentifier = $.environmentIdentifier;
        this.identity = $.identity;
        this.infraIdentifier = $.infraIdentifier;
        this.installationDetails = $.installationDetails;
        this.installationType = $.installationType;
        this.name = $.name;
        this.networkMapCount = $.networkMapCount;
        this.orgIdentifier = $.orgIdentifier;
        this.permanentInstallation = $.permanentInstallation;
        this.projectIdentifier = $.projectIdentifier;
        this.removed = $.removed;
        this.removedAt = $.removedAt;
        this.serviceCount = $.serviceCount;
        this.tags = $.tags;
        this.updatedAt = $.updatedAt;
        this.updatedBy = $.updatedBy;
        this.webhookUrl = $.webhookUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiscoveryAgentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiscoveryAgentState $;

        public Builder() {
            $ = new DiscoveryAgentState();
        }

        public Builder(DiscoveryAgentState defaults) {
            $ = new DiscoveryAgentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param configs Configuration for the agent. This is a required field.
         * 
         * @return builder
         * 
         */
        public Builder configs(@Nullable Output<List<DiscoveryAgentConfigArgs>> configs) {
            $.configs = configs;
            return this;
        }

        /**
         * @param configs Configuration for the agent. This is a required field.
         * 
         * @return builder
         * 
         */
        public Builder configs(List<DiscoveryAgentConfigArgs> configs) {
            return configs(Output.of(configs));
        }

        /**
         * @param configs Configuration for the agent. This is a required field.
         * 
         * @return builder
         * 
         */
        public Builder configs(DiscoveryAgentConfigArgs... configs) {
            return configs(List.of(configs));
        }

        /**
         * @param correlationId Correlation ID for the agent.
         * 
         * @return builder
         * 
         */
        public Builder correlationId(@Nullable Output<String> correlationId) {
            $.correlationId = correlationId;
            return this;
        }

        /**
         * @param correlationId Correlation ID for the agent.
         * 
         * @return builder
         * 
         */
        public Builder correlationId(String correlationId) {
            return correlationId(Output.of(correlationId));
        }

        /**
         * @param createdAt Timestamp when the agent was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Timestamp when the agent was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param createdBy User who created the agent.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy User who created the agent.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param description Description of the agent.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the agent.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param environmentIdentifier The environment identifier of the agent. This is a required field.
         * 
         * @return builder
         * 
         */
        public Builder environmentIdentifier(@Nullable Output<String> environmentIdentifier) {
            $.environmentIdentifier = environmentIdentifier;
            return this;
        }

        /**
         * @param environmentIdentifier The environment identifier of the agent. This is a required field.
         * 
         * @return builder
         * 
         */
        public Builder environmentIdentifier(String environmentIdentifier) {
            return environmentIdentifier(Output.of(environmentIdentifier));
        }

        /**
         * @param identity The unique identity of the agent.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<String> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity The unique identity of the agent.
         * 
         * @return builder
         * 
         */
        public Builder identity(String identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param infraIdentifier The infrastructure identifier of the agent. This is a required field.
         * 
         * @return builder
         * 
         */
        public Builder infraIdentifier(@Nullable Output<String> infraIdentifier) {
            $.infraIdentifier = infraIdentifier;
            return this;
        }

        /**
         * @param infraIdentifier The infrastructure identifier of the agent. This is a required field.
         * 
         * @return builder
         * 
         */
        public Builder infraIdentifier(String infraIdentifier) {
            return infraIdentifier(Output.of(infraIdentifier));
        }

        /**
         * @param installationDetails Installation details of the agent.
         * 
         * @return builder
         * 
         */
        public Builder installationDetails(@Nullable Output<List<DiscoveryAgentInstallationDetailArgs>> installationDetails) {
            $.installationDetails = installationDetails;
            return this;
        }

        /**
         * @param installationDetails Installation details of the agent.
         * 
         * @return builder
         * 
         */
        public Builder installationDetails(List<DiscoveryAgentInstallationDetailArgs> installationDetails) {
            return installationDetails(Output.of(installationDetails));
        }

        /**
         * @param installationDetails Installation details of the agent.
         * 
         * @return builder
         * 
         */
        public Builder installationDetails(DiscoveryAgentInstallationDetailArgs... installationDetails) {
            return installationDetails(List.of(installationDetails));
        }

        /**
         * @param installationType Type of installation for the agent.
         * 
         * @return builder
         * 
         */
        public Builder installationType(@Nullable Output<String> installationType) {
            $.installationType = installationType;
            return this;
        }

        /**
         * @param installationType Type of installation for the agent.
         * 
         * @return builder
         * 
         */
        public Builder installationType(String installationType) {
            return installationType(Output.of(installationType));
        }

        /**
         * @param name The name of the agent. This is a required field.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the agent. This is a required field.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkMapCount Number of network maps associated with this agent.
         * 
         * @return builder
         * 
         */
        public Builder networkMapCount(@Nullable Output<Integer> networkMapCount) {
            $.networkMapCount = networkMapCount;
            return this;
        }

        /**
         * @param networkMapCount Number of network maps associated with this agent.
         * 
         * @return builder
         * 
         */
        public Builder networkMapCount(Integer networkMapCount) {
            return networkMapCount(Output.of(networkMapCount));
        }

        /**
         * @param orgIdentifier The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
         * 
         * @return builder
         * 
         */
        public Builder orgIdentifier(@Nullable Output<String> orgIdentifier) {
            $.orgIdentifier = orgIdentifier;
            return this;
        }

        /**
         * @param orgIdentifier The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
         * 
         * @return builder
         * 
         */
        public Builder orgIdentifier(String orgIdentifier) {
            return orgIdentifier(Output.of(orgIdentifier));
        }

        /**
         * @param permanentInstallation Whether this is a permanent installation.
         * 
         * @return builder
         * 
         */
        public Builder permanentInstallation(@Nullable Output<Boolean> permanentInstallation) {
            $.permanentInstallation = permanentInstallation;
            return this;
        }

        /**
         * @param permanentInstallation Whether this is a permanent installation.
         * 
         * @return builder
         * 
         */
        public Builder permanentInstallation(Boolean permanentInstallation) {
            return permanentInstallation(Output.of(permanentInstallation));
        }

        /**
         * @param projectIdentifier The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
         * 
         * @return builder
         * 
         */
        public Builder projectIdentifier(@Nullable Output<String> projectIdentifier) {
            $.projectIdentifier = projectIdentifier;
            return this;
        }

        /**
         * @param projectIdentifier The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
         * 
         * @return builder
         * 
         */
        public Builder projectIdentifier(String projectIdentifier) {
            return projectIdentifier(Output.of(projectIdentifier));
        }

        /**
         * @param removed Whether the agent has been removed.
         * 
         * @return builder
         * 
         */
        public Builder removed(@Nullable Output<Boolean> removed) {
            $.removed = removed;
            return this;
        }

        /**
         * @param removed Whether the agent has been removed.
         * 
         * @return builder
         * 
         */
        public Builder removed(Boolean removed) {
            return removed(Output.of(removed));
        }

        /**
         * @param removedAt Timestamp when the agent was removed.
         * 
         * @return builder
         * 
         */
        public Builder removedAt(@Nullable Output<String> removedAt) {
            $.removedAt = removedAt;
            return this;
        }

        /**
         * @param removedAt Timestamp when the agent was removed.
         * 
         * @return builder
         * 
         */
        public Builder removedAt(String removedAt) {
            return removedAt(Output.of(removedAt));
        }

        /**
         * @param serviceCount Number of services managed by this agent.
         * 
         * @return builder
         * 
         */
        public Builder serviceCount(@Nullable Output<Integer> serviceCount) {
            $.serviceCount = serviceCount;
            return this;
        }

        /**
         * @param serviceCount Number of services managed by this agent.
         * 
         * @return builder
         * 
         */
        public Builder serviceCount(Integer serviceCount) {
            return serviceCount(Output.of(serviceCount));
        }

        /**
         * @param tags List of resource tags for the agent.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags List of resource tags for the agent.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags List of resource tags for the agent.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param updatedAt Timestamp when the agent was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt Timestamp when the agent was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param updatedBy User who last updated the agent.
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(@Nullable Output<String> updatedBy) {
            $.updatedBy = updatedBy;
            return this;
        }

        /**
         * @param updatedBy User who last updated the agent.
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(String updatedBy) {
            return updatedBy(Output.of(updatedBy));
        }

        /**
         * @param webhookUrl Webhook URL for the agent.
         * 
         * @return builder
         * 
         */
        public Builder webhookUrl(@Nullable Output<String> webhookUrl) {
            $.webhookUrl = webhookUrl;
            return this;
        }

        /**
         * @param webhookUrl Webhook URL for the agent.
         * 
         * @return builder
         * 
         */
        public Builder webhookUrl(String webhookUrl) {
            return webhookUrl(Output.of(webhookUrl));
        }

        public DiscoveryAgentState build() {
            return $;
        }
    }

}
