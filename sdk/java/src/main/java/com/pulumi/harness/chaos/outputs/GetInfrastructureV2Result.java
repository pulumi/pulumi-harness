// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.chaos.outputs.GetInfrastructureV2ImageRegistry;
import com.pulumi.harness.chaos.outputs.GetInfrastructureV2Mtls;
import com.pulumi.harness.chaos.outputs.GetInfrastructureV2Proxy;
import com.pulumi.harness.chaos.outputs.GetInfrastructureV2Toleration;
import com.pulumi.harness.chaos.outputs.GetInfrastructureV2Volume;
import com.pulumi.harness.chaos.outputs.GetInfrastructureV2VolumeMount;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInfrastructureV2Result {
    private Map<String,String> annotation;
    /**
     * @return List of containers in the infrastructure.
     * 
     */
    private String containers;
    /**
     * @return Created at of the infrastructure.
     * 
     */
    private String createdAt;
    /**
     * @return Created by of the infrastructure.
     * 
     */
    private String createdBy;
    /**
     * @return Description of the infrastructure.
     * 
     */
    private String description;
    /**
     * @return The ID of the environment.
     * 
     */
    private String environmentId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Identifier of the infrastructure.
     * 
     */
    private String identifier;
    /**
     * @return Identity of the infrastructure.
     * 
     */
    private String identity;
    /**
     * @return Configuration for the container image registry.
     * 
     */
    private List<GetInfrastructureV2ImageRegistry> imageRegistries;
    /**
     * @return The ID of the infrastructure.
     * 
     */
    private String infraId;
    /**
     * @return Scope of the infrastructure.
     * 
     */
    private String infraScope;
    /**
     * @return Type of the infrastructure.
     * 
     */
    private String infraType;
    private Boolean insecureSkipVerify;
    private Boolean isAiEnabled;
    private Boolean isChaosEnabled;
    private Map<String,String> label;
    /**
     * @return Last heartbeat of the infrastructure.
     * 
     */
    private Integer lastHeartbeat;
    /**
     * @return Last workflow timestamp of the infrastructure.
     * 
     */
    private String lastWorkflowTimestamp;
    /**
     * @return mTLS configuration for the infrastructure.
     * 
     */
    private @Nullable GetInfrastructureV2Mtls mtls;
    /**
     * @return Name of the infrastructure.
     * 
     */
    private String name;
    /**
     * @return Kubernetes namespace for the infrastructure.
     * 
     */
    private String namespace;
    /**
     * @return Number of schedules for the infrastructure.
     * 
     */
    private Integer noOfSchedules;
    /**
     * @return Number of workflows for the infrastructure.
     * 
     */
    private Integer noOfWorkflows;
    private Map<String,String> nodeSelector;
    /**
     * @return The ID of the organization.
     * 
     */
    private String orgId;
    /**
     * @return The ID of the project.
     * 
     */
    private String projectId;
    /**
     * @return Proxy configuration for the infrastructure.
     * 
     */
    private @Nullable GetInfrastructureV2Proxy proxy;
    private Integer runAsGroup;
    private Integer runAsUser;
    /**
     * @return Service account used by the infrastructure.
     * 
     */
    private String serviceAccount;
    /**
     * @return Status of the infrastructure.
     * 
     */
    private String status;
    /**
     * @return Tags of the infrastructure.
     * 
     */
    private List<String> tags;
    /**
     * @return If specified, the pod&#39;s tolerations.
     * 
     */
    private @Nullable List<GetInfrastructureV2Toleration> tolerations;
    /**
     * @return Update status of the infrastructure.
     * 
     */
    private String updateStatus;
    /**
     * @return Updated at of the infrastructure.
     * 
     */
    private String updatedAt;
    /**
     * @return Updated by of the infrastructure.
     * 
     */
    private String updatedBy;
    /**
     * @return Volume mounts for the container.
     * 
     */
    private @Nullable List<GetInfrastructureV2VolumeMount> volumeMounts;
    /**
     * @return Volumes to be created in the infrastructure.
     * 
     */
    private @Nullable List<GetInfrastructureV2Volume> volumes;

    private GetInfrastructureV2Result() {}
    public Map<String,String> annotation() {
        return this.annotation;
    }
    /**
     * @return List of containers in the infrastructure.
     * 
     */
    public String containers() {
        return this.containers;
    }
    /**
     * @return Created at of the infrastructure.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Created by of the infrastructure.
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return Description of the infrastructure.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The ID of the environment.
     * 
     */
    public String environmentId() {
        return this.environmentId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Identifier of the infrastructure.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return Identity of the infrastructure.
     * 
     */
    public String identity() {
        return this.identity;
    }
    /**
     * @return Configuration for the container image registry.
     * 
     */
    public List<GetInfrastructureV2ImageRegistry> imageRegistries() {
        return this.imageRegistries;
    }
    /**
     * @return The ID of the infrastructure.
     * 
     */
    public String infraId() {
        return this.infraId;
    }
    /**
     * @return Scope of the infrastructure.
     * 
     */
    public String infraScope() {
        return this.infraScope;
    }
    /**
     * @return Type of the infrastructure.
     * 
     */
    public String infraType() {
        return this.infraType;
    }
    public Boolean insecureSkipVerify() {
        return this.insecureSkipVerify;
    }
    public Boolean isAiEnabled() {
        return this.isAiEnabled;
    }
    public Boolean isChaosEnabled() {
        return this.isChaosEnabled;
    }
    public Map<String,String> label() {
        return this.label;
    }
    /**
     * @return Last heartbeat of the infrastructure.
     * 
     */
    public Integer lastHeartbeat() {
        return this.lastHeartbeat;
    }
    /**
     * @return Last workflow timestamp of the infrastructure.
     * 
     */
    public String lastWorkflowTimestamp() {
        return this.lastWorkflowTimestamp;
    }
    /**
     * @return mTLS configuration for the infrastructure.
     * 
     */
    public Optional<GetInfrastructureV2Mtls> mtls() {
        return Optional.ofNullable(this.mtls);
    }
    /**
     * @return Name of the infrastructure.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Kubernetes namespace for the infrastructure.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return Number of schedules for the infrastructure.
     * 
     */
    public Integer noOfSchedules() {
        return this.noOfSchedules;
    }
    /**
     * @return Number of workflows for the infrastructure.
     * 
     */
    public Integer noOfWorkflows() {
        return this.noOfWorkflows;
    }
    public Map<String,String> nodeSelector() {
        return this.nodeSelector;
    }
    /**
     * @return The ID of the organization.
     * 
     */
    public String orgId() {
        return this.orgId;
    }
    /**
     * @return The ID of the project.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Proxy configuration for the infrastructure.
     * 
     */
    public Optional<GetInfrastructureV2Proxy> proxy() {
        return Optional.ofNullable(this.proxy);
    }
    public Integer runAsGroup() {
        return this.runAsGroup;
    }
    public Integer runAsUser() {
        return this.runAsUser;
    }
    /**
     * @return Service account used by the infrastructure.
     * 
     */
    public String serviceAccount() {
        return this.serviceAccount;
    }
    /**
     * @return Status of the infrastructure.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Tags of the infrastructure.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return If specified, the pod&#39;s tolerations.
     * 
     */
    public List<GetInfrastructureV2Toleration> tolerations() {
        return this.tolerations == null ? List.of() : this.tolerations;
    }
    /**
     * @return Update status of the infrastructure.
     * 
     */
    public String updateStatus() {
        return this.updateStatus;
    }
    /**
     * @return Updated at of the infrastructure.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }
    /**
     * @return Updated by of the infrastructure.
     * 
     */
    public String updatedBy() {
        return this.updatedBy;
    }
    /**
     * @return Volume mounts for the container.
     * 
     */
    public List<GetInfrastructureV2VolumeMount> volumeMounts() {
        return this.volumeMounts == null ? List.of() : this.volumeMounts;
    }
    /**
     * @return Volumes to be created in the infrastructure.
     * 
     */
    public List<GetInfrastructureV2Volume> volumes() {
        return this.volumes == null ? List.of() : this.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInfrastructureV2Result defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> annotation;
        private String containers;
        private String createdAt;
        private String createdBy;
        private String description;
        private String environmentId;
        private String id;
        private String identifier;
        private String identity;
        private List<GetInfrastructureV2ImageRegistry> imageRegistries;
        private String infraId;
        private String infraScope;
        private String infraType;
        private Boolean insecureSkipVerify;
        private Boolean isAiEnabled;
        private Boolean isChaosEnabled;
        private Map<String,String> label;
        private Integer lastHeartbeat;
        private String lastWorkflowTimestamp;
        private @Nullable GetInfrastructureV2Mtls mtls;
        private String name;
        private String namespace;
        private Integer noOfSchedules;
        private Integer noOfWorkflows;
        private Map<String,String> nodeSelector;
        private String orgId;
        private String projectId;
        private @Nullable GetInfrastructureV2Proxy proxy;
        private Integer runAsGroup;
        private Integer runAsUser;
        private String serviceAccount;
        private String status;
        private List<String> tags;
        private @Nullable List<GetInfrastructureV2Toleration> tolerations;
        private String updateStatus;
        private String updatedAt;
        private String updatedBy;
        private @Nullable List<GetInfrastructureV2VolumeMount> volumeMounts;
        private @Nullable List<GetInfrastructureV2Volume> volumes;
        public Builder() {}
        public Builder(GetInfrastructureV2Result defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotation = defaults.annotation;
    	      this.containers = defaults.containers;
    	      this.createdAt = defaults.createdAt;
    	      this.createdBy = defaults.createdBy;
    	      this.description = defaults.description;
    	      this.environmentId = defaults.environmentId;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.identity = defaults.identity;
    	      this.imageRegistries = defaults.imageRegistries;
    	      this.infraId = defaults.infraId;
    	      this.infraScope = defaults.infraScope;
    	      this.infraType = defaults.infraType;
    	      this.insecureSkipVerify = defaults.insecureSkipVerify;
    	      this.isAiEnabled = defaults.isAiEnabled;
    	      this.isChaosEnabled = defaults.isChaosEnabled;
    	      this.label = defaults.label;
    	      this.lastHeartbeat = defaults.lastHeartbeat;
    	      this.lastWorkflowTimestamp = defaults.lastWorkflowTimestamp;
    	      this.mtls = defaults.mtls;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.noOfSchedules = defaults.noOfSchedules;
    	      this.noOfWorkflows = defaults.noOfWorkflows;
    	      this.nodeSelector = defaults.nodeSelector;
    	      this.orgId = defaults.orgId;
    	      this.projectId = defaults.projectId;
    	      this.proxy = defaults.proxy;
    	      this.runAsGroup = defaults.runAsGroup;
    	      this.runAsUser = defaults.runAsUser;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.tolerations = defaults.tolerations;
    	      this.updateStatus = defaults.updateStatus;
    	      this.updatedAt = defaults.updatedAt;
    	      this.updatedBy = defaults.updatedBy;
    	      this.volumeMounts = defaults.volumeMounts;
    	      this.volumes = defaults.volumes;
        }

        @CustomType.Setter
        public Builder annotation(Map<String,String> annotation) {
            if (annotation == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "annotation");
            }
            this.annotation = annotation;
            return this;
        }
        @CustomType.Setter
        public Builder containers(String containers) {
            if (containers == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "containers");
            }
            this.containers = containers;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder environmentId(String environmentId) {
            if (environmentId == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "environmentId");
            }
            this.environmentId = environmentId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            if (identifier == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "identifier");
            }
            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder identity(String identity) {
            if (identity == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "identity");
            }
            this.identity = identity;
            return this;
        }
        @CustomType.Setter
        public Builder imageRegistries(List<GetInfrastructureV2ImageRegistry> imageRegistries) {
            if (imageRegistries == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "imageRegistries");
            }
            this.imageRegistries = imageRegistries;
            return this;
        }
        public Builder imageRegistries(GetInfrastructureV2ImageRegistry... imageRegistries) {
            return imageRegistries(List.of(imageRegistries));
        }
        @CustomType.Setter
        public Builder infraId(String infraId) {
            if (infraId == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "infraId");
            }
            this.infraId = infraId;
            return this;
        }
        @CustomType.Setter
        public Builder infraScope(String infraScope) {
            if (infraScope == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "infraScope");
            }
            this.infraScope = infraScope;
            return this;
        }
        @CustomType.Setter
        public Builder infraType(String infraType) {
            if (infraType == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "infraType");
            }
            this.infraType = infraType;
            return this;
        }
        @CustomType.Setter
        public Builder insecureSkipVerify(Boolean insecureSkipVerify) {
            if (insecureSkipVerify == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "insecureSkipVerify");
            }
            this.insecureSkipVerify = insecureSkipVerify;
            return this;
        }
        @CustomType.Setter
        public Builder isAiEnabled(Boolean isAiEnabled) {
            if (isAiEnabled == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "isAiEnabled");
            }
            this.isAiEnabled = isAiEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isChaosEnabled(Boolean isChaosEnabled) {
            if (isChaosEnabled == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "isChaosEnabled");
            }
            this.isChaosEnabled = isChaosEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder label(Map<String,String> label) {
            if (label == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "label");
            }
            this.label = label;
            return this;
        }
        @CustomType.Setter
        public Builder lastHeartbeat(Integer lastHeartbeat) {
            if (lastHeartbeat == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "lastHeartbeat");
            }
            this.lastHeartbeat = lastHeartbeat;
            return this;
        }
        @CustomType.Setter
        public Builder lastWorkflowTimestamp(String lastWorkflowTimestamp) {
            if (lastWorkflowTimestamp == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "lastWorkflowTimestamp");
            }
            this.lastWorkflowTimestamp = lastWorkflowTimestamp;
            return this;
        }
        @CustomType.Setter
        public Builder mtls(@Nullable GetInfrastructureV2Mtls mtls) {

            this.mtls = mtls;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder noOfSchedules(Integer noOfSchedules) {
            if (noOfSchedules == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "noOfSchedules");
            }
            this.noOfSchedules = noOfSchedules;
            return this;
        }
        @CustomType.Setter
        public Builder noOfWorkflows(Integer noOfWorkflows) {
            if (noOfWorkflows == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "noOfWorkflows");
            }
            this.noOfWorkflows = noOfWorkflows;
            return this;
        }
        @CustomType.Setter
        public Builder nodeSelector(Map<String,String> nodeSelector) {
            if (nodeSelector == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "nodeSelector");
            }
            this.nodeSelector = nodeSelector;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(String orgId) {
            if (orgId == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "orgId");
            }
            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder proxy(@Nullable GetInfrastructureV2Proxy proxy) {

            this.proxy = proxy;
            return this;
        }
        @CustomType.Setter
        public Builder runAsGroup(Integer runAsGroup) {
            if (runAsGroup == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "runAsGroup");
            }
            this.runAsGroup = runAsGroup;
            return this;
        }
        @CustomType.Setter
        public Builder runAsUser(Integer runAsUser) {
            if (runAsUser == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "runAsUser");
            }
            this.runAsUser = runAsUser;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccount(String serviceAccount) {
            if (serviceAccount == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "serviceAccount");
            }
            this.serviceAccount = serviceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tolerations(@Nullable List<GetInfrastructureV2Toleration> tolerations) {

            this.tolerations = tolerations;
            return this;
        }
        public Builder tolerations(GetInfrastructureV2Toleration... tolerations) {
            return tolerations(List.of(tolerations));
        }
        @CustomType.Setter
        public Builder updateStatus(String updateStatus) {
            if (updateStatus == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "updateStatus");
            }
            this.updateStatus = updateStatus;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder updatedBy(String updatedBy) {
            if (updatedBy == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Result", "updatedBy");
            }
            this.updatedBy = updatedBy;
            return this;
        }
        @CustomType.Setter
        public Builder volumeMounts(@Nullable List<GetInfrastructureV2VolumeMount> volumeMounts) {

            this.volumeMounts = volumeMounts;
            return this;
        }
        public Builder volumeMounts(GetInfrastructureV2VolumeMount... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }
        @CustomType.Setter
        public Builder volumes(@Nullable List<GetInfrastructureV2Volume> volumes) {

            this.volumes = volumes;
            return this;
        }
        public Builder volumes(GetInfrastructureV2Volume... volumes) {
            return volumes(List.of(volumes));
        }
        public GetInfrastructureV2Result build() {
            final var _resultValue = new GetInfrastructureV2Result();
            _resultValue.annotation = annotation;
            _resultValue.containers = containers;
            _resultValue.createdAt = createdAt;
            _resultValue.createdBy = createdBy;
            _resultValue.description = description;
            _resultValue.environmentId = environmentId;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.identity = identity;
            _resultValue.imageRegistries = imageRegistries;
            _resultValue.infraId = infraId;
            _resultValue.infraScope = infraScope;
            _resultValue.infraType = infraType;
            _resultValue.insecureSkipVerify = insecureSkipVerify;
            _resultValue.isAiEnabled = isAiEnabled;
            _resultValue.isChaosEnabled = isChaosEnabled;
            _resultValue.label = label;
            _resultValue.lastHeartbeat = lastHeartbeat;
            _resultValue.lastWorkflowTimestamp = lastWorkflowTimestamp;
            _resultValue.mtls = mtls;
            _resultValue.name = name;
            _resultValue.namespace = namespace;
            _resultValue.noOfSchedules = noOfSchedules;
            _resultValue.noOfWorkflows = noOfWorkflows;
            _resultValue.nodeSelector = nodeSelector;
            _resultValue.orgId = orgId;
            _resultValue.projectId = projectId;
            _resultValue.proxy = proxy;
            _resultValue.runAsGroup = runAsGroup;
            _resultValue.runAsUser = runAsUser;
            _resultValue.serviceAccount = serviceAccount;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.tolerations = tolerations;
            _resultValue.updateStatus = updateStatus;
            _resultValue.updatedAt = updatedAt;
            _resultValue.updatedBy = updatedBy;
            _resultValue.volumeMounts = volumeMounts;
            _resultValue.volumes = volumes;
            return _resultValue;
        }
    }
}
