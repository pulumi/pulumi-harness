// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineFiltersFilterPropertiesModulePropertiesCdArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineFiltersFilterPropertiesModulePropertiesCdArgs Empty = new PipelineFiltersFilterPropertiesModulePropertiesCdArgs();

    /**
     * Artifact display names of the CD pipeline.
     * 
     */
    @Import(name="artifactDisplayNames")
    private @Nullable Output<List<String>> artifactDisplayNames;

    /**
     * @return Artifact display names of the CD pipeline.
     * 
     */
    public Optional<Output<List<String>>> artifactDisplayNames() {
        return Optional.ofNullable(this.artifactDisplayNames);
    }

    /**
     * Deployment type of the CD pipeline, eg. Kubernetes
     * 
     */
    @Import(name="deploymentTypes")
    private @Nullable Output<String> deploymentTypes;

    /**
     * @return Deployment type of the CD pipeline, eg. Kubernetes
     * 
     */
    public Optional<Output<String>> deploymentTypes() {
        return Optional.ofNullable(this.deploymentTypes);
    }

    /**
     * Environment identifier of the CD pipeline.
     * 
     */
    @Import(name="environmentIdentifiers")
    private @Nullable Output<List<String>> environmentIdentifiers;

    /**
     * @return Environment identifier of the CD pipeline.
     * 
     */
    public Optional<Output<List<String>>> environmentIdentifiers() {
        return Optional.ofNullable(this.environmentIdentifiers);
    }

    /**
     * Environment names of the CD pipeline.
     * 
     */
    @Import(name="environmentNames")
    private @Nullable Output<List<String>> environmentNames;

    /**
     * @return Environment names of the CD pipeline.
     * 
     */
    public Optional<Output<List<String>>> environmentNames() {
        return Optional.ofNullable(this.environmentNames);
    }

    /**
     * Deployment type of the CD pipeline, eg. Kubernetes
     * 
     */
    @Import(name="serviceDefinitionTypes")
    private @Nullable Output<String> serviceDefinitionTypes;

    /**
     * @return Deployment type of the CD pipeline, eg. Kubernetes
     * 
     */
    public Optional<Output<String>> serviceDefinitionTypes() {
        return Optional.ofNullable(this.serviceDefinitionTypes);
    }

    /**
     * Service identifiers of the CD pipeline.
     * 
     */
    @Import(name="serviceIdentifiers")
    private @Nullable Output<List<String>> serviceIdentifiers;

    /**
     * @return Service identifiers of the CD pipeline.
     * 
     */
    public Optional<Output<List<String>>> serviceIdentifiers() {
        return Optional.ofNullable(this.serviceIdentifiers);
    }

    /**
     * Service names of the CD pipeline.
     * 
     */
    @Import(name="serviceNames")
    private @Nullable Output<List<String>> serviceNames;

    /**
     * @return Service names of the CD pipeline.
     * 
     */
    public Optional<Output<List<String>>> serviceNames() {
        return Optional.ofNullable(this.serviceNames);
    }

    private PipelineFiltersFilterPropertiesModulePropertiesCdArgs() {}

    private PipelineFiltersFilterPropertiesModulePropertiesCdArgs(PipelineFiltersFilterPropertiesModulePropertiesCdArgs $) {
        this.artifactDisplayNames = $.artifactDisplayNames;
        this.deploymentTypes = $.deploymentTypes;
        this.environmentIdentifiers = $.environmentIdentifiers;
        this.environmentNames = $.environmentNames;
        this.serviceDefinitionTypes = $.serviceDefinitionTypes;
        this.serviceIdentifiers = $.serviceIdentifiers;
        this.serviceNames = $.serviceNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineFiltersFilterPropertiesModulePropertiesCdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineFiltersFilterPropertiesModulePropertiesCdArgs $;

        public Builder() {
            $ = new PipelineFiltersFilterPropertiesModulePropertiesCdArgs();
        }

        public Builder(PipelineFiltersFilterPropertiesModulePropertiesCdArgs defaults) {
            $ = new PipelineFiltersFilterPropertiesModulePropertiesCdArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param artifactDisplayNames Artifact display names of the CD pipeline.
         * 
         * @return builder
         * 
         */
        public Builder artifactDisplayNames(@Nullable Output<List<String>> artifactDisplayNames) {
            $.artifactDisplayNames = artifactDisplayNames;
            return this;
        }

        /**
         * @param artifactDisplayNames Artifact display names of the CD pipeline.
         * 
         * @return builder
         * 
         */
        public Builder artifactDisplayNames(List<String> artifactDisplayNames) {
            return artifactDisplayNames(Output.of(artifactDisplayNames));
        }

        /**
         * @param artifactDisplayNames Artifact display names of the CD pipeline.
         * 
         * @return builder
         * 
         */
        public Builder artifactDisplayNames(String... artifactDisplayNames) {
            return artifactDisplayNames(List.of(artifactDisplayNames));
        }

        /**
         * @param deploymentTypes Deployment type of the CD pipeline, eg. Kubernetes
         * 
         * @return builder
         * 
         */
        public Builder deploymentTypes(@Nullable Output<String> deploymentTypes) {
            $.deploymentTypes = deploymentTypes;
            return this;
        }

        /**
         * @param deploymentTypes Deployment type of the CD pipeline, eg. Kubernetes
         * 
         * @return builder
         * 
         */
        public Builder deploymentTypes(String deploymentTypes) {
            return deploymentTypes(Output.of(deploymentTypes));
        }

        /**
         * @param environmentIdentifiers Environment identifier of the CD pipeline.
         * 
         * @return builder
         * 
         */
        public Builder environmentIdentifiers(@Nullable Output<List<String>> environmentIdentifiers) {
            $.environmentIdentifiers = environmentIdentifiers;
            return this;
        }

        /**
         * @param environmentIdentifiers Environment identifier of the CD pipeline.
         * 
         * @return builder
         * 
         */
        public Builder environmentIdentifiers(List<String> environmentIdentifiers) {
            return environmentIdentifiers(Output.of(environmentIdentifiers));
        }

        /**
         * @param environmentIdentifiers Environment identifier of the CD pipeline.
         * 
         * @return builder
         * 
         */
        public Builder environmentIdentifiers(String... environmentIdentifiers) {
            return environmentIdentifiers(List.of(environmentIdentifiers));
        }

        /**
         * @param environmentNames Environment names of the CD pipeline.
         * 
         * @return builder
         * 
         */
        public Builder environmentNames(@Nullable Output<List<String>> environmentNames) {
            $.environmentNames = environmentNames;
            return this;
        }

        /**
         * @param environmentNames Environment names of the CD pipeline.
         * 
         * @return builder
         * 
         */
        public Builder environmentNames(List<String> environmentNames) {
            return environmentNames(Output.of(environmentNames));
        }

        /**
         * @param environmentNames Environment names of the CD pipeline.
         * 
         * @return builder
         * 
         */
        public Builder environmentNames(String... environmentNames) {
            return environmentNames(List.of(environmentNames));
        }

        /**
         * @param serviceDefinitionTypes Deployment type of the CD pipeline, eg. Kubernetes
         * 
         * @return builder
         * 
         */
        public Builder serviceDefinitionTypes(@Nullable Output<String> serviceDefinitionTypes) {
            $.serviceDefinitionTypes = serviceDefinitionTypes;
            return this;
        }

        /**
         * @param serviceDefinitionTypes Deployment type of the CD pipeline, eg. Kubernetes
         * 
         * @return builder
         * 
         */
        public Builder serviceDefinitionTypes(String serviceDefinitionTypes) {
            return serviceDefinitionTypes(Output.of(serviceDefinitionTypes));
        }

        /**
         * @param serviceIdentifiers Service identifiers of the CD pipeline.
         * 
         * @return builder
         * 
         */
        public Builder serviceIdentifiers(@Nullable Output<List<String>> serviceIdentifiers) {
            $.serviceIdentifiers = serviceIdentifiers;
            return this;
        }

        /**
         * @param serviceIdentifiers Service identifiers of the CD pipeline.
         * 
         * @return builder
         * 
         */
        public Builder serviceIdentifiers(List<String> serviceIdentifiers) {
            return serviceIdentifiers(Output.of(serviceIdentifiers));
        }

        /**
         * @param serviceIdentifiers Service identifiers of the CD pipeline.
         * 
         * @return builder
         * 
         */
        public Builder serviceIdentifiers(String... serviceIdentifiers) {
            return serviceIdentifiers(List.of(serviceIdentifiers));
        }

        /**
         * @param serviceNames Service names of the CD pipeline.
         * 
         * @return builder
         * 
         */
        public Builder serviceNames(@Nullable Output<List<String>> serviceNames) {
            $.serviceNames = serviceNames;
            return this;
        }

        /**
         * @param serviceNames Service names of the CD pipeline.
         * 
         * @return builder
         * 
         */
        public Builder serviceNames(List<String> serviceNames) {
            return serviceNames(Output.of(serviceNames));
        }

        /**
         * @param serviceNames Service names of the CD pipeline.
         * 
         * @return builder
         * 
         */
        public Builder serviceNames(String... serviceNames) {
            return serviceNames(List.of(serviceNames));
        }

        public PipelineFiltersFilterPropertiesModulePropertiesCdArgs build() {
            return $;
        }
    }

}
