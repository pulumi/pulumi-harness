// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.chaos.inputs.SecurityGovernanceRuleTimeWindowArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityGovernanceRuleState extends com.pulumi.resources.ResourceArgs {

    public static final SecurityGovernanceRuleState Empty = new SecurityGovernanceRuleState();

    /**
     * List of condition IDs associated with this rule
     * 
     */
    @Import(name="conditionIds")
    private @Nullable Output<List<String>> conditionIds;

    /**
     * @return List of condition IDs associated with this rule
     * 
     */
    public Optional<Output<List<String>>> conditionIds() {
        return Optional.ofNullable(this.conditionIds);
    }

    /**
     * Description of the security governance rule
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the security governance rule
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the rule is enabled
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    /**
     * @return Whether the rule is enabled
     * 
     */
    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * Name of the security governance rule
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the security governance rule
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The organization ID of the security governance rule
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return The organization ID of the security governance rule
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * The project ID of the security governance rule
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The project ID of the security governance rule
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Tags for the security governance rule
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags for the security governance rule
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="timeWindows")
    private @Nullable Output<List<SecurityGovernanceRuleTimeWindowArgs>> timeWindows;

    public Optional<Output<List<SecurityGovernanceRuleTimeWindowArgs>>> timeWindows() {
        return Optional.ofNullable(this.timeWindows);
    }

    /**
     * List of user group IDs associated with this rule
     * 
     */
    @Import(name="userGroupIds")
    private @Nullable Output<List<String>> userGroupIds;

    /**
     * @return List of user group IDs associated with this rule
     * 
     */
    public Optional<Output<List<String>>> userGroupIds() {
        return Optional.ofNullable(this.userGroupIds);
    }

    private SecurityGovernanceRuleState() {}

    private SecurityGovernanceRuleState(SecurityGovernanceRuleState $) {
        this.conditionIds = $.conditionIds;
        this.description = $.description;
        this.isEnabled = $.isEnabled;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.tags = $.tags;
        this.timeWindows = $.timeWindows;
        this.userGroupIds = $.userGroupIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityGovernanceRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityGovernanceRuleState $;

        public Builder() {
            $ = new SecurityGovernanceRuleState();
        }

        public Builder(SecurityGovernanceRuleState defaults) {
            $ = new SecurityGovernanceRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditionIds List of condition IDs associated with this rule
         * 
         * @return builder
         * 
         */
        public Builder conditionIds(@Nullable Output<List<String>> conditionIds) {
            $.conditionIds = conditionIds;
            return this;
        }

        /**
         * @param conditionIds List of condition IDs associated with this rule
         * 
         * @return builder
         * 
         */
        public Builder conditionIds(List<String> conditionIds) {
            return conditionIds(Output.of(conditionIds));
        }

        /**
         * @param conditionIds List of condition IDs associated with this rule
         * 
         * @return builder
         * 
         */
        public Builder conditionIds(String... conditionIds) {
            return conditionIds(List.of(conditionIds));
        }

        /**
         * @param description Description of the security governance rule
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the security governance rule
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param isEnabled Whether the rule is enabled
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled Whether the rule is enabled
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param name Name of the security governance rule
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the security governance rule
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId The organization ID of the security governance rule
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The organization ID of the security governance rule
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId The project ID of the security governance rule
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project ID of the security governance rule
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param tags Tags for the security governance rule
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags for the security governance rule
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags for the security governance rule
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public Builder timeWindows(@Nullable Output<List<SecurityGovernanceRuleTimeWindowArgs>> timeWindows) {
            $.timeWindows = timeWindows;
            return this;
        }

        public Builder timeWindows(List<SecurityGovernanceRuleTimeWindowArgs> timeWindows) {
            return timeWindows(Output.of(timeWindows));
        }

        public Builder timeWindows(SecurityGovernanceRuleTimeWindowArgs... timeWindows) {
            return timeWindows(List.of(timeWindows));
        }

        /**
         * @param userGroupIds List of user group IDs associated with this rule
         * 
         * @return builder
         * 
         */
        public Builder userGroupIds(@Nullable Output<List<String>> userGroupIds) {
            $.userGroupIds = userGroupIds;
            return this;
        }

        /**
         * @param userGroupIds List of user group IDs associated with this rule
         * 
         * @return builder
         * 
         */
        public Builder userGroupIds(List<String> userGroupIds) {
            return userGroupIds(Output.of(userGroupIds));
        }

        /**
         * @param userGroupIds List of user group IDs associated with this rule
         * 
         * @return builder
         * 
         */
        public Builder userGroupIds(String... userGroupIds) {
            return userGroupIds(List.of(userGroupIds));
        }

        public SecurityGovernanceRuleState build() {
            return $;
        }
    }

}
