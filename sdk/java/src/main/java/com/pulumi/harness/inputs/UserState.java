// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserState extends com.pulumi.resources.ResourceArgs {

    public static final UserState Empty = new UserState();

    /**
     * The email of the user.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return The email of the user.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * The groups the user belongs to. This is only used during the creation of the user. The groups are not updated after the user is created. When using this option you should also set `lifecycle = { ignore_changes = [&#34;group_ids&#34;] }`.
     * 
     */
    @Import(name="groupIds")
    private @Nullable Output<List<String>> groupIds;

    /**
     * @return The groups the user belongs to. This is only used during the creation of the user. The groups are not updated after the user is created. When using this option you should also set `lifecycle = { ignore_changes = [&#34;group_ids&#34;] }`.
     * 
     */
    public Optional<Output<List<String>>> groupIds() {
        return Optional.ofNullable(this.groupIds);
    }

    /**
     * Flag indicating whether or not the users email has been verified.
     * 
     */
    @Import(name="isEmailVerified")
    private @Nullable Output<Boolean> isEmailVerified;

    /**
     * @return Flag indicating whether or not the users email has been verified.
     * 
     */
    public Optional<Output<Boolean>> isEmailVerified() {
        return Optional.ofNullable(this.isEmailVerified);
    }

    /**
     * Flag indicating whether or not the user was imported from an identity provider.
     * 
     */
    @Import(name="isImportedFromIdentityProvider")
    private @Nullable Output<Boolean> isImportedFromIdentityProvider;

    /**
     * @return Flag indicating whether or not the user was imported from an identity provider.
     * 
     */
    public Optional<Output<Boolean>> isImportedFromIdentityProvider() {
        return Optional.ofNullable(this.isImportedFromIdentityProvider);
    }

    /**
     * Flag indicating whether or not the users password has expired.
     * 
     */
    @Import(name="isPasswordExpired")
    private @Nullable Output<Boolean> isPasswordExpired;

    /**
     * @return Flag indicating whether or not the users password has expired.
     * 
     */
    public Optional<Output<Boolean>> isPasswordExpired() {
        return Optional.ofNullable(this.isPasswordExpired);
    }

    /**
     * Flag indicating whether or not two-factor authentication is enabled for the user.
     * 
     */
    @Import(name="isTwoFactorAuthEnabled")
    private @Nullable Output<Boolean> isTwoFactorAuthEnabled;

    /**
     * @return Flag indicating whether or not two-factor authentication is enabled for the user.
     * 
     */
    public Optional<Output<Boolean>> isTwoFactorAuthEnabled() {
        return Optional.ofNullable(this.isTwoFactorAuthEnabled);
    }

    /**
     * Flag indicating whether or not the user is locked out.
     * 
     */
    @Import(name="isUserLocked")
    private @Nullable Output<Boolean> isUserLocked;

    /**
     * @return Flag indicating whether or not the user is locked out.
     * 
     */
    public Optional<Output<Boolean>> isUserLocked() {
        return Optional.ofNullable(this.isUserLocked);
    }

    /**
     * The name of the user.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the user.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private UserState() {}

    private UserState(UserState $) {
        this.email = $.email;
        this.groupIds = $.groupIds;
        this.isEmailVerified = $.isEmailVerified;
        this.isImportedFromIdentityProvider = $.isImportedFromIdentityProvider;
        this.isPasswordExpired = $.isPasswordExpired;
        this.isTwoFactorAuthEnabled = $.isTwoFactorAuthEnabled;
        this.isUserLocked = $.isUserLocked;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserState $;

        public Builder() {
            $ = new UserState();
        }

        public Builder(UserState defaults) {
            $ = new UserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param email The email of the user.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email The email of the user.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param groupIds The groups the user belongs to. This is only used during the creation of the user. The groups are not updated after the user is created. When using this option you should also set `lifecycle = { ignore_changes = [&#34;group_ids&#34;] }`.
         * 
         * @return builder
         * 
         */
        public Builder groupIds(@Nullable Output<List<String>> groupIds) {
            $.groupIds = groupIds;
            return this;
        }

        /**
         * @param groupIds The groups the user belongs to. This is only used during the creation of the user. The groups are not updated after the user is created. When using this option you should also set `lifecycle = { ignore_changes = [&#34;group_ids&#34;] }`.
         * 
         * @return builder
         * 
         */
        public Builder groupIds(List<String> groupIds) {
            return groupIds(Output.of(groupIds));
        }

        /**
         * @param groupIds The groups the user belongs to. This is only used during the creation of the user. The groups are not updated after the user is created. When using this option you should also set `lifecycle = { ignore_changes = [&#34;group_ids&#34;] }`.
         * 
         * @return builder
         * 
         */
        public Builder groupIds(String... groupIds) {
            return groupIds(List.of(groupIds));
        }

        /**
         * @param isEmailVerified Flag indicating whether or not the users email has been verified.
         * 
         * @return builder
         * 
         */
        public Builder isEmailVerified(@Nullable Output<Boolean> isEmailVerified) {
            $.isEmailVerified = isEmailVerified;
            return this;
        }

        /**
         * @param isEmailVerified Flag indicating whether or not the users email has been verified.
         * 
         * @return builder
         * 
         */
        public Builder isEmailVerified(Boolean isEmailVerified) {
            return isEmailVerified(Output.of(isEmailVerified));
        }

        /**
         * @param isImportedFromIdentityProvider Flag indicating whether or not the user was imported from an identity provider.
         * 
         * @return builder
         * 
         */
        public Builder isImportedFromIdentityProvider(@Nullable Output<Boolean> isImportedFromIdentityProvider) {
            $.isImportedFromIdentityProvider = isImportedFromIdentityProvider;
            return this;
        }

        /**
         * @param isImportedFromIdentityProvider Flag indicating whether or not the user was imported from an identity provider.
         * 
         * @return builder
         * 
         */
        public Builder isImportedFromIdentityProvider(Boolean isImportedFromIdentityProvider) {
            return isImportedFromIdentityProvider(Output.of(isImportedFromIdentityProvider));
        }

        /**
         * @param isPasswordExpired Flag indicating whether or not the users password has expired.
         * 
         * @return builder
         * 
         */
        public Builder isPasswordExpired(@Nullable Output<Boolean> isPasswordExpired) {
            $.isPasswordExpired = isPasswordExpired;
            return this;
        }

        /**
         * @param isPasswordExpired Flag indicating whether or not the users password has expired.
         * 
         * @return builder
         * 
         */
        public Builder isPasswordExpired(Boolean isPasswordExpired) {
            return isPasswordExpired(Output.of(isPasswordExpired));
        }

        /**
         * @param isTwoFactorAuthEnabled Flag indicating whether or not two-factor authentication is enabled for the user.
         * 
         * @return builder
         * 
         */
        public Builder isTwoFactorAuthEnabled(@Nullable Output<Boolean> isTwoFactorAuthEnabled) {
            $.isTwoFactorAuthEnabled = isTwoFactorAuthEnabled;
            return this;
        }

        /**
         * @param isTwoFactorAuthEnabled Flag indicating whether or not two-factor authentication is enabled for the user.
         * 
         * @return builder
         * 
         */
        public Builder isTwoFactorAuthEnabled(Boolean isTwoFactorAuthEnabled) {
            return isTwoFactorAuthEnabled(Output.of(isTwoFactorAuthEnabled));
        }

        /**
         * @param isUserLocked Flag indicating whether or not the user is locked out.
         * 
         * @return builder
         * 
         */
        public Builder isUserLocked(@Nullable Output<Boolean> isUserLocked) {
            $.isUserLocked = isUserLocked;
            return this;
        }

        /**
         * @param isUserLocked Flag indicating whether or not the user is locked out.
         * 
         * @return builder
         * 
         */
        public Builder isUserLocked(Boolean isUserLocked) {
            return isUserLocked(Output.of(isUserLocked));
        }

        /**
         * @param name The name of the user.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the user.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public UserState build() {
            return $;
        }
    }

}
