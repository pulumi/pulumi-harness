// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServiceNowConnectorAuthRefreshToken {
    /**
     * @return Reference to a secret containing the client id to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    private String clientIdRef;
    /**
     * @return Reference to a secret containing the client secret to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    private String clientSecretRef;
    /**
     * @return Reference to a secret containing the refresh token to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    private String refreshTokenRef;
    /**
     * @return Scope string to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    private String scope;
    /**
     * @return Token url to use for authentication.
     * 
     */
    private String tokenUrl;

    private GetServiceNowConnectorAuthRefreshToken() {}
    /**
     * @return Reference to a secret containing the client id to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public String clientIdRef() {
        return this.clientIdRef;
    }
    /**
     * @return Reference to a secret containing the client secret to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public String clientSecretRef() {
        return this.clientSecretRef;
    }
    /**
     * @return Reference to a secret containing the refresh token to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public String refreshTokenRef() {
        return this.refreshTokenRef;
    }
    /**
     * @return Scope string to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public String scope() {
        return this.scope;
    }
    /**
     * @return Token url to use for authentication.
     * 
     */
    public String tokenUrl() {
        return this.tokenUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceNowConnectorAuthRefreshToken defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clientIdRef;
        private String clientSecretRef;
        private String refreshTokenRef;
        private String scope;
        private String tokenUrl;
        public Builder() {}
        public Builder(GetServiceNowConnectorAuthRefreshToken defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientIdRef = defaults.clientIdRef;
    	      this.clientSecretRef = defaults.clientSecretRef;
    	      this.refreshTokenRef = defaults.refreshTokenRef;
    	      this.scope = defaults.scope;
    	      this.tokenUrl = defaults.tokenUrl;
        }

        @CustomType.Setter
        public Builder clientIdRef(String clientIdRef) {
            if (clientIdRef == null) {
              throw new MissingRequiredPropertyException("GetServiceNowConnectorAuthRefreshToken", "clientIdRef");
            }
            this.clientIdRef = clientIdRef;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecretRef(String clientSecretRef) {
            if (clientSecretRef == null) {
              throw new MissingRequiredPropertyException("GetServiceNowConnectorAuthRefreshToken", "clientSecretRef");
            }
            this.clientSecretRef = clientSecretRef;
            return this;
        }
        @CustomType.Setter
        public Builder refreshTokenRef(String refreshTokenRef) {
            if (refreshTokenRef == null) {
              throw new MissingRequiredPropertyException("GetServiceNowConnectorAuthRefreshToken", "refreshTokenRef");
            }
            this.refreshTokenRef = refreshTokenRef;
            return this;
        }
        @CustomType.Setter
        public Builder scope(String scope) {
            if (scope == null) {
              throw new MissingRequiredPropertyException("GetServiceNowConnectorAuthRefreshToken", "scope");
            }
            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder tokenUrl(String tokenUrl) {
            if (tokenUrl == null) {
              throw new MissingRequiredPropertyException("GetServiceNowConnectorAuthRefreshToken", "tokenUrl");
            }
            this.tokenUrl = tokenUrl;
            return this;
        }
        public GetServiceNowConnectorAuthRefreshToken build() {
            final var _resultValue = new GetServiceNowConnectorAuthRefreshToken();
            _resultValue.clientIdRef = clientIdRef;
            _resultValue.clientSecretRef = clientSecretRef;
            _resultValue.refreshTokenRef = refreshTokenRef;
            _resultValue.scope = scope;
            _resultValue.tokenUrl = tokenUrl;
            return _resultValue;
        }
    }
}
