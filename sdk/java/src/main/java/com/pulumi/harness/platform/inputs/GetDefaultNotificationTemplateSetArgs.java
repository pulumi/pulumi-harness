// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GetDefaultNotificationTemplateSetEventTemplateConfigurationSetArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDefaultNotificationTemplateSetArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDefaultNotificationTemplateSetArgs Empty = new GetDefaultNotificationTemplateSetArgs();

    /**
     * Description for Default Notification Template Set
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description for Default Notification Template Set
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Set of event-template configurations
     * 
     */
    @Import(name="eventTemplateConfigurationSets", required=true)
    private Output<List<GetDefaultNotificationTemplateSetEventTemplateConfigurationSetArgs>> eventTemplateConfigurationSets;

    /**
     * @return Set of event-template configurations
     * 
     */
    public Output<List<GetDefaultNotificationTemplateSetEventTemplateConfigurationSetArgs>> eventTemplateConfigurationSets() {
        return this.eventTemplateConfigurationSets;
    }

    /**
     * Identifier of Default Notification Template Set
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return Identifier of Default Notification Template Set
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * Name of Default Notification Template Set
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of Default Notification Template Set
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Type of channel (e.g. SLACK, EMAIL, etc.)
     * 
     */
    @Import(name="notificationChannelType", required=true)
    private Output<String> notificationChannelType;

    /**
     * @return Type of channel (e.g. SLACK, EMAIL, etc.)
     * 
     */
    public Output<String> notificationChannelType() {
        return this.notificationChannelType;
    }

    /**
     * Type of the entity (e.g. PIPELINE, SERVICE, etc.)
     * 
     */
    @Import(name="notificationEntity", required=true)
    private Output<String> notificationEntity;

    /**
     * @return Type of the entity (e.g. PIPELINE, SERVICE, etc.)
     * 
     */
    public Output<String> notificationEntity() {
        return this.notificationEntity;
    }

    /**
     * Key-value tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key-value tags
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private GetDefaultNotificationTemplateSetArgs() {}

    private GetDefaultNotificationTemplateSetArgs(GetDefaultNotificationTemplateSetArgs $) {
        this.description = $.description;
        this.eventTemplateConfigurationSets = $.eventTemplateConfigurationSets;
        this.identifier = $.identifier;
        this.name = $.name;
        this.notificationChannelType = $.notificationChannelType;
        this.notificationEntity = $.notificationEntity;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDefaultNotificationTemplateSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDefaultNotificationTemplateSetArgs $;

        public Builder() {
            $ = new GetDefaultNotificationTemplateSetArgs();
        }

        public Builder(GetDefaultNotificationTemplateSetArgs defaults) {
            $ = new GetDefaultNotificationTemplateSetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description for Default Notification Template Set
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description for Default Notification Template Set
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param eventTemplateConfigurationSets Set of event-template configurations
         * 
         * @return builder
         * 
         */
        public Builder eventTemplateConfigurationSets(Output<List<GetDefaultNotificationTemplateSetEventTemplateConfigurationSetArgs>> eventTemplateConfigurationSets) {
            $.eventTemplateConfigurationSets = eventTemplateConfigurationSets;
            return this;
        }

        /**
         * @param eventTemplateConfigurationSets Set of event-template configurations
         * 
         * @return builder
         * 
         */
        public Builder eventTemplateConfigurationSets(List<GetDefaultNotificationTemplateSetEventTemplateConfigurationSetArgs> eventTemplateConfigurationSets) {
            return eventTemplateConfigurationSets(Output.of(eventTemplateConfigurationSets));
        }

        /**
         * @param eventTemplateConfigurationSets Set of event-template configurations
         * 
         * @return builder
         * 
         */
        public Builder eventTemplateConfigurationSets(GetDefaultNotificationTemplateSetEventTemplateConfigurationSetArgs... eventTemplateConfigurationSets) {
            return eventTemplateConfigurationSets(List.of(eventTemplateConfigurationSets));
        }

        /**
         * @param identifier Identifier of Default Notification Template Set
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Identifier of Default Notification Template Set
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param name Name of Default Notification Template Set
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of Default Notification Template Set
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notificationChannelType Type of channel (e.g. SLACK, EMAIL, etc.)
         * 
         * @return builder
         * 
         */
        public Builder notificationChannelType(Output<String> notificationChannelType) {
            $.notificationChannelType = notificationChannelType;
            return this;
        }

        /**
         * @param notificationChannelType Type of channel (e.g. SLACK, EMAIL, etc.)
         * 
         * @return builder
         * 
         */
        public Builder notificationChannelType(String notificationChannelType) {
            return notificationChannelType(Output.of(notificationChannelType));
        }

        /**
         * @param notificationEntity Type of the entity (e.g. PIPELINE, SERVICE, etc.)
         * 
         * @return builder
         * 
         */
        public Builder notificationEntity(Output<String> notificationEntity) {
            $.notificationEntity = notificationEntity;
            return this;
        }

        /**
         * @param notificationEntity Type of the entity (e.g. PIPELINE, SERVICE, etc.)
         * 
         * @return builder
         * 
         */
        public Builder notificationEntity(String notificationEntity) {
            return notificationEntity(Output.of(notificationEntity));
        }

        /**
         * @param tags Key-value tags
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key-value tags
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public GetDefaultNotificationTemplateSetArgs build() {
            if ($.eventTemplateConfigurationSets == null) {
                throw new MissingRequiredPropertyException("GetDefaultNotificationTemplateSetArgs", "eventTemplateConfigurationSets");
            }
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("GetDefaultNotificationTemplateSetArgs", "identifier");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetDefaultNotificationTemplateSetArgs", "name");
            }
            if ($.notificationChannelType == null) {
                throw new MissingRequiredPropertyException("GetDefaultNotificationTemplateSetArgs", "notificationChannelType");
            }
            if ($.notificationEntity == null) {
                throw new MissingRequiredPropertyException("GetDefaultNotificationTemplateSetArgs", "notificationEntity");
            }
            return $;
        }
    }

}
