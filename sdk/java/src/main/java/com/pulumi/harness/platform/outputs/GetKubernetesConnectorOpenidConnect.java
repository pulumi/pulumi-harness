// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetKubernetesConnectorOpenidConnect {
    /**
     * @return Reference to the secret containing the client ID for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    private String clientIdRef;
    /**
     * @return The URL of the OpenID Connect issuer.
     * 
     */
    private String issuerUrl;
    /**
     * @return The URL of the Kubernetes cluster.
     * 
     */
    private String masterUrl;
    /**
     * @return Reference to the secret containing the password for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    private String passwordRef;
    /**
     * @return Scopes to request for the connector.
     * 
     */
    private List<String> scopes;
    /**
     * @return Reference to the secret containing the client secret for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    private String secretRef;
    /**
     * @return Username for the connector.
     * 
     */
    private String username;
    /**
     * @return Reference to the secret containing the username for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    private String usernameRef;

    private GetKubernetesConnectorOpenidConnect() {}
    /**
     * @return Reference to the secret containing the client ID for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public String clientIdRef() {
        return this.clientIdRef;
    }
    /**
     * @return The URL of the OpenID Connect issuer.
     * 
     */
    public String issuerUrl() {
        return this.issuerUrl;
    }
    /**
     * @return The URL of the Kubernetes cluster.
     * 
     */
    public String masterUrl() {
        return this.masterUrl;
    }
    /**
     * @return Reference to the secret containing the password for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public String passwordRef() {
        return this.passwordRef;
    }
    /**
     * @return Scopes to request for the connector.
     * 
     */
    public List<String> scopes() {
        return this.scopes;
    }
    /**
     * @return Reference to the secret containing the client secret for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public String secretRef() {
        return this.secretRef;
    }
    /**
     * @return Username for the connector.
     * 
     */
    public String username() {
        return this.username;
    }
    /**
     * @return Reference to the secret containing the username for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public String usernameRef() {
        return this.usernameRef;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKubernetesConnectorOpenidConnect defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clientIdRef;
        private String issuerUrl;
        private String masterUrl;
        private String passwordRef;
        private List<String> scopes;
        private String secretRef;
        private String username;
        private String usernameRef;
        public Builder() {}
        public Builder(GetKubernetesConnectorOpenidConnect defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientIdRef = defaults.clientIdRef;
    	      this.issuerUrl = defaults.issuerUrl;
    	      this.masterUrl = defaults.masterUrl;
    	      this.passwordRef = defaults.passwordRef;
    	      this.scopes = defaults.scopes;
    	      this.secretRef = defaults.secretRef;
    	      this.username = defaults.username;
    	      this.usernameRef = defaults.usernameRef;
        }

        @CustomType.Setter
        public Builder clientIdRef(String clientIdRef) {
            if (clientIdRef == null) {
              throw new MissingRequiredPropertyException("GetKubernetesConnectorOpenidConnect", "clientIdRef");
            }
            this.clientIdRef = clientIdRef;
            return this;
        }
        @CustomType.Setter
        public Builder issuerUrl(String issuerUrl) {
            if (issuerUrl == null) {
              throw new MissingRequiredPropertyException("GetKubernetesConnectorOpenidConnect", "issuerUrl");
            }
            this.issuerUrl = issuerUrl;
            return this;
        }
        @CustomType.Setter
        public Builder masterUrl(String masterUrl) {
            if (masterUrl == null) {
              throw new MissingRequiredPropertyException("GetKubernetesConnectorOpenidConnect", "masterUrl");
            }
            this.masterUrl = masterUrl;
            return this;
        }
        @CustomType.Setter
        public Builder passwordRef(String passwordRef) {
            if (passwordRef == null) {
              throw new MissingRequiredPropertyException("GetKubernetesConnectorOpenidConnect", "passwordRef");
            }
            this.passwordRef = passwordRef;
            return this;
        }
        @CustomType.Setter
        public Builder scopes(List<String> scopes) {
            if (scopes == null) {
              throw new MissingRequiredPropertyException("GetKubernetesConnectorOpenidConnect", "scopes");
            }
            this.scopes = scopes;
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder secretRef(String secretRef) {
            if (secretRef == null) {
              throw new MissingRequiredPropertyException("GetKubernetesConnectorOpenidConnect", "secretRef");
            }
            this.secretRef = secretRef;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetKubernetesConnectorOpenidConnect", "username");
            }
            this.username = username;
            return this;
        }
        @CustomType.Setter
        public Builder usernameRef(String usernameRef) {
            if (usernameRef == null) {
              throw new MissingRequiredPropertyException("GetKubernetesConnectorOpenidConnect", "usernameRef");
            }
            this.usernameRef = usernameRef;
            return this;
        }
        public GetKubernetesConnectorOpenidConnect build() {
            final var _resultValue = new GetKubernetesConnectorOpenidConnect();
            _resultValue.clientIdRef = clientIdRef;
            _resultValue.issuerUrl = issuerUrl;
            _resultValue.masterUrl = masterUrl;
            _resultValue.passwordRef = passwordRef;
            _resultValue.scopes = scopes;
            _resultValue.secretRef = secretRef;
            _resultValue.username = username;
            _resultValue.usernameRef = usernameRef;
            return _resultValue;
        }
    }
}
