// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.service;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.service.DiscoveryAgentArgs;
import com.pulumi.harness.service.inputs.DiscoveryAgentState;
import com.pulumi.harness.service.outputs.DiscoveryAgentConfig;
import com.pulumi.harness.service.outputs.DiscoveryAgentInstallationDetail;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for managing a Harness Service Discovery Agent.
 * 
 * This resource allows you to create, read, update, and delete a Service Discovery Agent in Harness.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.service.DiscoveryAgent;
 * import com.pulumi.harness.service.DiscoveryAgentArgs;
 * import com.pulumi.harness.service.inputs.DiscoveryAgentConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new DiscoveryAgent("example", DiscoveryAgentArgs.builder()
 *             .name("ExampleAgent")
 *             .orgIdentifier("your_org_id")
 *             .projectIdentifier("your_project_id")
 *             .environmentIdentifier("your_environment_id")
 *             .infraIdentifier("your_infra_id")
 *             .configs(DiscoveryAgentConfigArgs.builder()
 *                 .collectorImage("harness/service-discovery-collector:main-latest")
 *                 .logWatcherImage("harness/chaos-log-watcher:main-latest")
 *                 .kubernetes(DiscoveryAgentConfigKuberneteArgs.builder()
 *                     .namespace("harness-sd")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Additional Examples
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.service.DiscoveryAgent;
 * import com.pulumi.harness.service.DiscoveryAgentArgs;
 * import com.pulumi.harness.service.inputs.DiscoveryAgentConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Create a new service discovery agent with minimal configuration
 *         var example = new DiscoveryAgent("example", DiscoveryAgentArgs.builder()
 *             .name("example-agent")
 *             .orgIdentifier(orgIdentifier)
 *             .projectIdentifier(projectIdentifier)
 *             .environmentIdentifier(environmentIdentifier)
 *             .infraIdentifier("example-infra")
 *             .configs(DiscoveryAgentConfigArgs.builder()
 *                 .kubernetes(DiscoveryAgentConfigKuberneteArgs.builder()
 *                     .namespace("harness-sd")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         // Create a new service discovery agent with node agent enabled
 *         var nodeAgent = new DiscoveryAgent("nodeAgent", DiscoveryAgentArgs.builder()
 *             .name("node-agent-example")
 *             .orgIdentifier(orgIdentifier)
 *             .projectIdentifier(projectIdentifier)
 *             .environmentIdentifier(environmentIdentifier)
 *             .infraIdentifier("node-agent-example")
 *             .configs(DiscoveryAgentConfigArgs.builder()
 *                 .kubernetes(DiscoveryAgentConfigKuberneteArgs.builder()
 *                     .namespace("harness-sd")
 *                     .build())
 *                 .datas(DiscoveryAgentConfigDataArgs.builder()
 *                     .enableNodeAgent(true)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         // Create a new service discovery agent with full configuration
 *         var fullConfig = new DiscoveryAgent("fullConfig", DiscoveryAgentArgs.builder()
 *             .name("full-config-example")
 *             .orgIdentifier(orgIdentifier)
 *             .projectIdentifier(projectIdentifier)
 *             .environmentIdentifier(environmentIdentifier)
 *             .infraIdentifier("full-config-example")
 *             .permanentInstallation(false)
 *             .correlationId("full-config-correlation-123")
 *             .configs(DiscoveryAgentConfigArgs.builder()
 *                 .collectorImage("harness/service-discovery-collector:main-latest")
 *                 .logWatcherImage("harness/chaos-log-watcher:main-latest")
 *                 .skipSecureVerify(false)
 *                 .kubernetes(DiscoveryAgentConfigKuberneteArgs.builder()
 *                     .namespace("harness-sd")
 *                     .serviceAccount("harness-sd-sa")
 *                     .imagePullPolicy("IfNotPresent")
 *                     .runAsUser(2000)
 *                     .runAsGroup(2000)
 *                     .labels(Map.ofEntries(
 *                         Map.entry("app", "service-discovery"),
 *                         Map.entry("env", "dev")
 *                     ))
 *                     .annotations(Map.of("example.com/annotation", "value"))
 *                     .nodeSelector(Map.of("kubernetes.io/os", "linux"))
 *                     .resources(DiscoveryAgentConfigKuberneteResourceArgs.builder()
 *                         .limits(DiscoveryAgentConfigKuberneteResourceLimitArgs.builder()
 *                             .cpu("500m")
 *                             .memory("512Mi")
 *                             .build())
 *                         .requests(DiscoveryAgentConfigKuberneteResourceRequestArgs.builder()
 *                             .cpu("250m")
 *                             .memory("256Mi")
 *                             .build())
 *                         .build())
 *                     .tolerations(DiscoveryAgentConfigKuberneteTolerationArgs.builder()
 *                         .key("key1")
 *                         .operator("Equal")
 *                         .value("value1")
 *                         .effect("NoSchedule")
 *                         .build())
 *                     .build())
 *                 .datas(DiscoveryAgentConfigDataArgs.builder()
 *                     .enableNodeAgent(true)
 *                     .nodeAgentSelector("node-role.kubernetes.io/worker=")
 *                     .enableBatchResources(true)
 *                     .enableOrphanedPod(true)
 *                     .namespaceSelector("environment=dev")
 *                     .collectionWindowInMin(15)
 *                     .blacklistedNamespaces(                    
 *                         "kube-system",
 *                         "kube-public")
 *                     .observedNamespaces(                    
 *                         "default",
 *                         "harness")
 *                     .crons(DiscoveryAgentConfigDataCronArgs.builder()
 *                         .expression("0/10 * * * *")
 *                         .build())
 *                     .build())
 *                 .mtls(DiscoveryAgentConfigMtlArgs.builder()
 *                     .certPath("/etc/certs/tls.crt")
 *                     .keyPath("/etc/certs/tls.key")
 *                     .secretName("mtls-secret")
 *                     .url("https://mtls.example.com:8443")
 *                     .build())
 *                 .proxies(DiscoveryAgentConfigProxyArgs.builder()
 *                     .httpProxy("http://proxy.example.com:8080")
 *                     .httpsProxy("https://proxy.example.com:8080")
 *                     .noProxy("localhost,127.0.0.1,.svc,.cluster.local")
 *                     .url("https://proxy.example.com")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * The `pulumi import` command can be used, for example:
 * 
 * Import Project level Service Discovery Agent
 * 
 * Account and Org level agents are not supported yet
 * 
 * ```sh
 * $ pulumi import harness:service/discoveryAgent:DiscoveryAgent example &lt;org_identifier&gt;/&lt;project_identifier&gt;/&lt;environment_identifier&gt;/&lt;infra_identifier&gt;
 * ```
 * 
 */
@ResourceType(type="harness:service/discoveryAgent:DiscoveryAgent")
public class DiscoveryAgent extends com.pulumi.resources.CustomResource {
    /**
     * Configuration for the agent. This is a required field.
     * 
     */
    @Export(name="configs", refs={List.class,DiscoveryAgentConfig.class}, tree="[0,1]")
    private Output<List<DiscoveryAgentConfig>> configs;

    /**
     * @return Configuration for the agent. This is a required field.
     * 
     */
    public Output<List<DiscoveryAgentConfig>> configs() {
        return this.configs;
    }
    /**
     * Correlation ID for the agent.
     * 
     */
    @Export(name="correlationId", refs={String.class}, tree="[0]")
    private Output<String> correlationId;

    /**
     * @return Correlation ID for the agent.
     * 
     */
    public Output<String> correlationId() {
        return this.correlationId;
    }
    /**
     * Timestamp when the agent was created.
     * 
     */
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    /**
     * @return Timestamp when the agent was created.
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * User who created the agent.
     * 
     */
    @Export(name="createdBy", refs={String.class}, tree="[0]")
    private Output<String> createdBy;

    /**
     * @return User who created the agent.
     * 
     */
    public Output<String> createdBy() {
        return this.createdBy;
    }
    /**
     * Description of the agent.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return Description of the agent.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * The environment identifier of the agent. This is a required field.
     * 
     */
    @Export(name="environmentIdentifier", refs={String.class}, tree="[0]")
    private Output<String> environmentIdentifier;

    /**
     * @return The environment identifier of the agent. This is a required field.
     * 
     */
    public Output<String> environmentIdentifier() {
        return this.environmentIdentifier;
    }
    /**
     * The unique identity of the agent.
     * 
     */
    @Export(name="identity", refs={String.class}, tree="[0]")
    private Output<String> identity;

    /**
     * @return The unique identity of the agent.
     * 
     */
    public Output<String> identity() {
        return this.identity;
    }
    /**
     * The infrastructure identifier of the agent. This is a required field.
     * 
     */
    @Export(name="infraIdentifier", refs={String.class}, tree="[0]")
    private Output<String> infraIdentifier;

    /**
     * @return The infrastructure identifier of the agent. This is a required field.
     * 
     */
    public Output<String> infraIdentifier() {
        return this.infraIdentifier;
    }
    /**
     * Installation details of the agent.
     * 
     */
    @Export(name="installationDetails", refs={List.class,DiscoveryAgentInstallationDetail.class}, tree="[0,1]")
    private Output<List<DiscoveryAgentInstallationDetail>> installationDetails;

    /**
     * @return Installation details of the agent.
     * 
     */
    public Output<List<DiscoveryAgentInstallationDetail>> installationDetails() {
        return this.installationDetails;
    }
    /**
     * Type of installation for the agent.
     * 
     */
    @Export(name="installationType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> installationType;

    /**
     * @return Type of installation for the agent.
     * 
     */
    public Output<Optional<String>> installationType() {
        return Codegen.optional(this.installationType);
    }
    /**
     * The name of the agent. This is a required field.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the agent. This is a required field.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Number of network maps associated with this agent.
     * 
     */
    @Export(name="networkMapCount", refs={Integer.class}, tree="[0]")
    private Output<Integer> networkMapCount;

    /**
     * @return Number of network maps associated with this agent.
     * 
     */
    public Output<Integer> networkMapCount() {
        return this.networkMapCount;
    }
    /**
     * The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     * 
     */
    @Export(name="orgIdentifier", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> orgIdentifier;

    /**
     * @return The organization identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     * 
     */
    public Output<Optional<String>> orgIdentifier() {
        return Codegen.optional(this.orgIdentifier);
    }
    /**
     * Whether this is a permanent installation.
     * 
     */
    @Export(name="permanentInstallation", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> permanentInstallation;

    /**
     * @return Whether this is a permanent installation.
     * 
     */
    public Output<Optional<Boolean>> permanentInstallation() {
        return Codegen.optional(this.permanentInstallation);
    }
    /**
     * The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     * 
     */
    @Export(name="projectIdentifier", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> projectIdentifier;

    /**
     * @return The project identifier of the agent. Must be 1-64 characters and contain only alphanumeric characters, hyphens, or underscores.
     * 
     */
    public Output<Optional<String>> projectIdentifier() {
        return Codegen.optional(this.projectIdentifier);
    }
    /**
     * Whether the agent has been removed.
     * 
     */
    @Export(name="removed", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> removed;

    /**
     * @return Whether the agent has been removed.
     * 
     */
    public Output<Boolean> removed() {
        return this.removed;
    }
    /**
     * Timestamp when the agent was removed.
     * 
     */
    @Export(name="removedAt", refs={String.class}, tree="[0]")
    private Output<String> removedAt;

    /**
     * @return Timestamp when the agent was removed.
     * 
     */
    public Output<String> removedAt() {
        return this.removedAt;
    }
    /**
     * Number of services managed by this agent.
     * 
     */
    @Export(name="serviceCount", refs={Integer.class}, tree="[0]")
    private Output<Integer> serviceCount;

    /**
     * @return Number of services managed by this agent.
     * 
     */
    public Output<Integer> serviceCount() {
        return this.serviceCount;
    }
    /**
     * List of resource tags for the agent.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> tags;

    /**
     * @return List of resource tags for the agent.
     * 
     */
    public Output<List<String>> tags() {
        return this.tags;
    }
    /**
     * Timestamp when the agent was last updated.
     * 
     */
    @Export(name="updatedAt", refs={String.class}, tree="[0]")
    private Output<String> updatedAt;

    /**
     * @return Timestamp when the agent was last updated.
     * 
     */
    public Output<String> updatedAt() {
        return this.updatedAt;
    }
    /**
     * User who last updated the agent.
     * 
     */
    @Export(name="updatedBy", refs={String.class}, tree="[0]")
    private Output<String> updatedBy;

    /**
     * @return User who last updated the agent.
     * 
     */
    public Output<String> updatedBy() {
        return this.updatedBy;
    }
    /**
     * Webhook URL for the agent.
     * 
     */
    @Export(name="webhookUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> webhookUrl;

    /**
     * @return Webhook URL for the agent.
     * 
     */
    public Output<Optional<String>> webhookUrl() {
        return Codegen.optional(this.webhookUrl);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DiscoveryAgent(java.lang.String name) {
        this(name, DiscoveryAgentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DiscoveryAgent(java.lang.String name, DiscoveryAgentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DiscoveryAgent(java.lang.String name, DiscoveryAgentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:service/discoveryAgent:DiscoveryAgent", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DiscoveryAgent(java.lang.String name, Output<java.lang.String> id, @Nullable DiscoveryAgentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:service/discoveryAgent:DiscoveryAgent", name, state, makeResourceOptions(options, id), false);
    }

    private static DiscoveryAgentArgs makeArgs(DiscoveryAgentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DiscoveryAgentArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DiscoveryAgent get(java.lang.String name, Output<java.lang.String> id, @Nullable DiscoveryAgentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DiscoveryAgent(name, id, state, options);
    }
}
