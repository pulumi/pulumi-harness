// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.WorkspaceArgs;
import com.pulumi.harness.platform.inputs.WorkspaceState;
import com.pulumi.harness.platform.outputs.WorkspaceConnector;
import com.pulumi.harness.platform.outputs.WorkspaceEnvironmentVariable;
import com.pulumi.harness.platform.outputs.WorkspaceTerraformVariable;
import com.pulumi.harness.platform.outputs.WorkspaceTerraformVariableFile;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for managing Workspaces
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.platform.Workspace;
 * import com.pulumi.harness.platform.WorkspaceArgs;
 * import com.pulumi.harness.platform.inputs.WorkspaceTerraformVariableArgs;
 * import com.pulumi.harness.platform.inputs.WorkspaceEnvironmentVariableArgs;
 * import com.pulumi.harness.platform.inputs.WorkspaceTerraformVariableFileArgs;
 * import com.pulumi.harness.platform.inputs.WorkspaceConnectorArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Workspace("example", WorkspaceArgs.builder()
 *             .name("example")
 *             .identifier("example")
 *             .orgId(testHarnessPlatformOrganization.id())
 *             .projectId(testHarnessPlatformProject.id())
 *             .provisionerType("terraform")
 *             .provisionerVersion("1.5.6")
 *             .repository("https://github.com/org/repo")
 *             .repositoryBranch("main")
 *             .repositoryPath("tf/aws/basic")
 *             .costEstimationEnabled(true)
 *             .providerConnector(test.id())
 *             .repositoryConnector(test.id())
 *             .tags(            
 *                 "tag1",
 *                 "tag2")
 *             .terraformVariables(            
 *                 WorkspaceTerraformVariableArgs.builder()
 *                     .key("key1")
 *                     .value("val1")
 *                     .valueType("string")
 *                     .build(),
 *                 WorkspaceTerraformVariableArgs.builder()
 *                     .key("key2")
 *                     .value("val2")
 *                     .valueType("string")
 *                     .build())
 *             .environmentVariables(            
 *                 WorkspaceEnvironmentVariableArgs.builder()
 *                     .key("key1")
 *                     .value("val1")
 *                     .valueType("string")
 *                     .build(),
 *                 WorkspaceEnvironmentVariableArgs.builder()
 *                     .key("key2")
 *                     .value("val2")
 *                     .valueType("string")
 *                     .build())
 *             .terraformVariableFiles(            
 *                 WorkspaceTerraformVariableFileArgs.builder()
 *                     .repository("https://github.com/org/repo")
 *                     .repositoryBranch("main")
 *                     .repositoryPath("tf/gcp/basic")
 *                     .repositoryConnector(test.id())
 *                     .build(),
 *                 WorkspaceTerraformVariableFileArgs.builder()
 *                     .repository("https://github.com/org/repo")
 *                     .repositoryCommit("v1.0.0")
 *                     .repositoryPath("tf/aws/basic")
 *                     .repositoryConnector(test.id())
 *                     .build(),
 *                 WorkspaceTerraformVariableFileArgs.builder()
 *                     .repository("https://github.com/org/repo")
 *                     .repositorySha("349d90bb9c90f4a3482981c259080de31609e6f6")
 *                     .repositoryPath("tf/aws/basic")
 *                     .repositoryConnector(test.id())
 *                     .build())
 *             .variableSets(testHarnessPlatformInfraVariableSet.id())
 *             .defaultPipelines(Map.ofEntries(
 *                 Map.entry("destroy", "destroy_pipeline_id"),
 *                 Map.entry("drift", "drift_pipeline_id"),
 *                 Map.entry("plan", "plan_pipeline_id"),
 *                 Map.entry("apply", "apply_pipeline_id")
 *             ))
 *             .connectors(            
 *                 WorkspaceConnectorArgs.builder()
 *                     .connectorRef("awsconnector")
 *                     .type("aws")
 *                     .build(),
 *                 WorkspaceConnectorArgs.builder()
 *                     .connectorRef("gcpconnector")
 *                     .type("gcp")
 *                     .build(),
 *                 WorkspaceConnectorArgs.builder()
 *                     .connectorRef("azureconnector")
 *                     .type("azure")
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * The `pulumi import` command can be used, for example:
 * 
 * ```sh
 * $ pulumi import harness:platform/workspace:Workspace example &lt;org_id&gt;/&lt;project_id&gt;/&lt;workspace_id&gt;
 * ```
 * 
 */
@ResourceType(type="harness:platform/workspace:Workspace")
public class Workspace extends com.pulumi.resources.CustomResource {
    /**
     * Provider connectors configured on the Workspace. Only one connector of a type is supported
     * 
     */
    @Export(name="connectors", refs={List.class,WorkspaceConnector.class}, tree="[0,1]")
    private Output</* @Nullable */ List<WorkspaceConnector>> connectors;

    /**
     * @return Provider connectors configured on the Workspace. Only one connector of a type is supported
     * 
     */
    public Output<Optional<List<WorkspaceConnector>>> connectors() {
        return Codegen.optional(this.connectors);
    }
    /**
     * Cost estimation enabled determines if cost estimation operations are performed.
     * 
     */
    @Export(name="costEstimationEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> costEstimationEnabled;

    /**
     * @return Cost estimation enabled determines if cost estimation operations are performed.
     * 
     */
    public Output<Boolean> costEstimationEnabled() {
        return this.costEstimationEnabled;
    }
    /**
     * Default pipelines associated with this workspace
     * 
     */
    @Export(name="defaultPipelines", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> defaultPipelines;

    /**
     * @return Default pipelines associated with this workspace
     * 
     */
    public Output<Optional<Map<String,String>>> defaultPipelines() {
        return Codegen.optional(this.defaultPipelines);
    }
    /**
     * Description of the resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Environment variables configured on the workspace
     * 
     */
    @Export(name="environmentVariables", refs={List.class,WorkspaceEnvironmentVariable.class}, tree="[0,1]")
    private Output</* @Nullable */ List<WorkspaceEnvironmentVariable>> environmentVariables;

    /**
     * @return Environment variables configured on the workspace
     * 
     */
    public Output<Optional<List<WorkspaceEnvironmentVariable>>> environmentVariables() {
        return Codegen.optional(this.environmentVariables);
    }
    /**
     * Unique identifier of the resource.
     * 
     */
    @Export(name="identifier", refs={String.class}, tree="[0]")
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }
    /**
     * Name of the resource.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Unique identifier of the organization.
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }
    /**
     * Unique identifier of the project.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * Provider connector is the reference to the connector for the infrastructure provider - this way of defining connector will be deprecated in the coming releases, use connector as block set.
     * 
     */
    @Export(name="providerConnector", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> providerConnector;

    /**
     * @return Provider connector is the reference to the connector for the infrastructure provider - this way of defining connector will be deprecated in the coming releases, use connector as block set.
     * 
     */
    public Output<Optional<String>> providerConnector() {
        return Codegen.optional(this.providerConnector);
    }
    @Export(name="provisionerType", refs={String.class}, tree="[0]")
    private Output<String> provisionerType;

    public Output<String> provisionerType() {
        return this.provisionerType;
    }
    @Export(name="provisionerVersion", refs={String.class}, tree="[0]")
    private Output<String> provisionerVersion;

    public Output<String> provisionerVersion() {
        return this.provisionerVersion;
    }
    /**
     * Repository is the name of the repository to fetch the code from.
     * 
     */
    @Export(name="repository", refs={String.class}, tree="[0]")
    private Output<String> repository;

    /**
     * @return Repository is the name of the repository to fetch the code from.
     * 
     */
    public Output<String> repository() {
        return this.repository;
    }
    /**
     * Repository branch is the name of the branch to fetch the code from. This cannot be set if repository commit or sha is set.
     * 
     */
    @Export(name="repositoryBranch", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> repositoryBranch;

    /**
     * @return Repository branch is the name of the branch to fetch the code from. This cannot be set if repository commit or sha is set.
     * 
     */
    public Output<Optional<String>> repositoryBranch() {
        return Codegen.optional(this.repositoryBranch);
    }
    /**
     * Repository commit is tag to fetch the code from. This cannot be set if repository branch or sha is set.
     * 
     */
    @Export(name="repositoryCommit", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> repositoryCommit;

    /**
     * @return Repository commit is tag to fetch the code from. This cannot be set if repository branch or sha is set.
     * 
     */
    public Output<Optional<String>> repositoryCommit() {
        return Codegen.optional(this.repositoryCommit);
    }
    /**
     * Repository connector is the reference to the connector used to fetch the code.
     * 
     */
    @Export(name="repositoryConnector", refs={String.class}, tree="[0]")
    private Output<String> repositoryConnector;

    /**
     * @return Repository connector is the reference to the connector used to fetch the code.
     * 
     */
    public Output<String> repositoryConnector() {
        return this.repositoryConnector;
    }
    /**
     * Repository path is the path in which the code resides.
     * 
     */
    @Export(name="repositoryPath", refs={String.class}, tree="[0]")
    private Output<String> repositoryPath;

    /**
     * @return Repository path is the path in which the code resides.
     * 
     */
    public Output<String> repositoryPath() {
        return this.repositoryPath;
    }
    /**
     * Repository commit is commit SHA to fetch the code from. This cannot be set if repository branch or commit is set.
     * 
     */
    @Export(name="repositorySha", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> repositorySha;

    /**
     * @return Repository commit is commit SHA to fetch the code from. This cannot be set if repository branch or commit is set.
     * 
     */
    public Output<Optional<String>> repositorySha() {
        return Codegen.optional(this.repositorySha);
    }
    /**
     * Tags to associate with the resource.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Tags to associate with the resource.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    @Export(name="terraformVariableFiles", refs={List.class,WorkspaceTerraformVariableFile.class}, tree="[0,1]")
    private Output</* @Nullable */ List<WorkspaceTerraformVariableFile>> terraformVariableFiles;

    public Output<Optional<List<WorkspaceTerraformVariableFile>>> terraformVariableFiles() {
        return Codegen.optional(this.terraformVariableFiles);
    }
    @Export(name="terraformVariables", refs={List.class,WorkspaceTerraformVariable.class}, tree="[0,1]")
    private Output</* @Nullable */ List<WorkspaceTerraformVariable>> terraformVariables;

    public Output<Optional<List<WorkspaceTerraformVariable>>> terraformVariables() {
        return Codegen.optional(this.terraformVariables);
    }
    /**
     * Variable sets to use.
     * 
     */
    @Export(name="variableSets", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> variableSets;

    /**
     * @return Variable sets to use.
     * 
     */
    public Output<Optional<List<String>>> variableSets() {
        return Codegen.optional(this.variableSets);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Workspace(java.lang.String name) {
        this(name, WorkspaceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Workspace(java.lang.String name, WorkspaceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Workspace(java.lang.String name, WorkspaceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/workspace:Workspace", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Workspace(java.lang.String name, Output<java.lang.String> id, @Nullable WorkspaceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/workspace:Workspace", name, state, makeResourceOptions(options, id), false);
    }

    private static WorkspaceArgs makeArgs(WorkspaceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? WorkspaceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Workspace get(java.lang.String name, Output<java.lang.String> id, @Nullable WorkspaceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Workspace(name, id, state, options);
    }
}
