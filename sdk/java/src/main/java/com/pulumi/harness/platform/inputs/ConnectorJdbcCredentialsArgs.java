// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.ConnectorJdbcCredentialsServiceAccountArgs;
import com.pulumi.harness.platform.inputs.ConnectorJdbcCredentialsUsernamePasswordArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorJdbcCredentialsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorJdbcCredentialsArgs Empty = new ConnectorJdbcCredentialsArgs();

    /**
     * Authentication types for JDBC connector
     * 
     */
    @Import(name="authType")
    private @Nullable Output<String> authType;

    /**
     * @return Authentication types for JDBC connector
     * 
     */
    public Optional<Output<String>> authType() {
        return Optional.ofNullable(this.authType);
    }

    /**
     * The reference to the Harness secret containing the password to use for the database server. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    @Import(name="passwordRef")
    private @Nullable Output<String> passwordRef;

    /**
     * @return The reference to the Harness secret containing the password to use for the database server. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public Optional<Output<String>> passwordRef() {
        return Optional.ofNullable(this.passwordRef);
    }

    /**
     * Authenticate using service account.
     * 
     */
    @Import(name="serviceAccount")
    private @Nullable Output<ConnectorJdbcCredentialsServiceAccountArgs> serviceAccount;

    /**
     * @return Authenticate using service account.
     * 
     */
    public Optional<Output<ConnectorJdbcCredentialsServiceAccountArgs>> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    /**
     * The username to use for the database server.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The username to use for the database server.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * Authenticate using username password.
     * 
     */
    @Import(name="usernamePassword")
    private @Nullable Output<ConnectorJdbcCredentialsUsernamePasswordArgs> usernamePassword;

    /**
     * @return Authenticate using username password.
     * 
     */
    public Optional<Output<ConnectorJdbcCredentialsUsernamePasswordArgs>> usernamePassword() {
        return Optional.ofNullable(this.usernamePassword);
    }

    /**
     * The reference to the Harness secret containing the username to use for the database server. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    @Import(name="usernameRef")
    private @Nullable Output<String> usernameRef;

    /**
     * @return The reference to the Harness secret containing the username to use for the database server. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public Optional<Output<String>> usernameRef() {
        return Optional.ofNullable(this.usernameRef);
    }

    private ConnectorJdbcCredentialsArgs() {}

    private ConnectorJdbcCredentialsArgs(ConnectorJdbcCredentialsArgs $) {
        this.authType = $.authType;
        this.passwordRef = $.passwordRef;
        this.serviceAccount = $.serviceAccount;
        this.username = $.username;
        this.usernamePassword = $.usernamePassword;
        this.usernameRef = $.usernameRef;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorJdbcCredentialsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorJdbcCredentialsArgs $;

        public Builder() {
            $ = new ConnectorJdbcCredentialsArgs();
        }

        public Builder(ConnectorJdbcCredentialsArgs defaults) {
            $ = new ConnectorJdbcCredentialsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authType Authentication types for JDBC connector
         * 
         * @return builder
         * 
         */
        public Builder authType(@Nullable Output<String> authType) {
            $.authType = authType;
            return this;
        }

        /**
         * @param authType Authentication types for JDBC connector
         * 
         * @return builder
         * 
         */
        public Builder authType(String authType) {
            return authType(Output.of(authType));
        }

        /**
         * @param passwordRef The reference to the Harness secret containing the password to use for the database server. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder passwordRef(@Nullable Output<String> passwordRef) {
            $.passwordRef = passwordRef;
            return this;
        }

        /**
         * @param passwordRef The reference to the Harness secret containing the password to use for the database server. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder passwordRef(String passwordRef) {
            return passwordRef(Output.of(passwordRef));
        }

        /**
         * @param serviceAccount Authenticate using service account.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(@Nullable Output<ConnectorJdbcCredentialsServiceAccountArgs> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param serviceAccount Authenticate using service account.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(ConnectorJdbcCredentialsServiceAccountArgs serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        /**
         * @param username The username to use for the database server.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username to use for the database server.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param usernamePassword Authenticate using username password.
         * 
         * @return builder
         * 
         */
        public Builder usernamePassword(@Nullable Output<ConnectorJdbcCredentialsUsernamePasswordArgs> usernamePassword) {
            $.usernamePassword = usernamePassword;
            return this;
        }

        /**
         * @param usernamePassword Authenticate using username password.
         * 
         * @return builder
         * 
         */
        public Builder usernamePassword(ConnectorJdbcCredentialsUsernamePasswordArgs usernamePassword) {
            return usernamePassword(Output.of(usernamePassword));
        }

        /**
         * @param usernameRef The reference to the Harness secret containing the username to use for the database server. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder usernameRef(@Nullable Output<String> usernameRef) {
            $.usernameRef = usernameRef;
            return this;
        }

        /**
         * @param usernameRef The reference to the Harness secret containing the username to use for the database server. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder usernameRef(String usernameRef) {
            return usernameRef(Output.of(usernameRef));
        }

        public ConnectorJdbcCredentialsArgs build() {
            return $;
        }
    }

}
