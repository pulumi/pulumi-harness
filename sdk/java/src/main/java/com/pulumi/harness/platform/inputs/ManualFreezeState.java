// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.ManualFreezeCurrentOrUpcomingWindowArgs;
import com.pulumi.harness.platform.inputs.ManualFreezeFreezeWindowArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManualFreezeState extends com.pulumi.resources.ResourceArgs {

    public static final ManualFreezeState Empty = new ManualFreezeState();

    /**
     * Account Identifier of the freeze
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Account Identifier of the freeze
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Current or upcoming windows
     * 
     */
    @Import(name="currentOrUpcomingWindows")
    private @Nullable Output<List<ManualFreezeCurrentOrUpcomingWindowArgs>> currentOrUpcomingWindows;

    /**
     * @return Current or upcoming windows
     * 
     */
    public Optional<Output<List<ManualFreezeCurrentOrUpcomingWindowArgs>>> currentOrUpcomingWindows() {
        return Optional.ofNullable(this.currentOrUpcomingWindows);
    }

    /**
     * Description of the freeze
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the freeze
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Freeze windows in the freeze response
     * 
     */
    @Import(name="freezeWindows")
    private @Nullable Output<List<ManualFreezeFreezeWindowArgs>> freezeWindows;

    /**
     * @return Freeze windows in the freeze response
     * 
     */
    public Optional<Output<List<ManualFreezeFreezeWindowArgs>>> freezeWindows() {
        return Optional.ofNullable(this.freezeWindows);
    }

    /**
     * Identifier of the freeze
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return Identifier of the freeze
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * Name of the freeze
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the freeze
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Organization identifier of the freeze
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Organization identifier of the freeze
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Project identifier of the freeze
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Project identifier of the freeze
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Scope of the freeze
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return Scope of the freeze
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Status of the freeze
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the freeze
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Tags associated with the freeze
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags associated with the freeze
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Type of freeze
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of freeze
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Yaml of the freeze
     * 
     */
    @Import(name="yaml")
    private @Nullable Output<String> yaml;

    /**
     * @return Yaml of the freeze
     * 
     */
    public Optional<Output<String>> yaml() {
        return Optional.ofNullable(this.yaml);
    }

    private ManualFreezeState() {}

    private ManualFreezeState(ManualFreezeState $) {
        this.accountId = $.accountId;
        this.currentOrUpcomingWindows = $.currentOrUpcomingWindows;
        this.description = $.description;
        this.freezeWindows = $.freezeWindows;
        this.identifier = $.identifier;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.scope = $.scope;
        this.status = $.status;
        this.tags = $.tags;
        this.type = $.type;
        this.yaml = $.yaml;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManualFreezeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManualFreezeState $;

        public Builder() {
            $ = new ManualFreezeState();
        }

        public Builder(ManualFreezeState defaults) {
            $ = new ManualFreezeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account Identifier of the freeze
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account Identifier of the freeze
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param currentOrUpcomingWindows Current or upcoming windows
         * 
         * @return builder
         * 
         */
        public Builder currentOrUpcomingWindows(@Nullable Output<List<ManualFreezeCurrentOrUpcomingWindowArgs>> currentOrUpcomingWindows) {
            $.currentOrUpcomingWindows = currentOrUpcomingWindows;
            return this;
        }

        /**
         * @param currentOrUpcomingWindows Current or upcoming windows
         * 
         * @return builder
         * 
         */
        public Builder currentOrUpcomingWindows(List<ManualFreezeCurrentOrUpcomingWindowArgs> currentOrUpcomingWindows) {
            return currentOrUpcomingWindows(Output.of(currentOrUpcomingWindows));
        }

        /**
         * @param currentOrUpcomingWindows Current or upcoming windows
         * 
         * @return builder
         * 
         */
        public Builder currentOrUpcomingWindows(ManualFreezeCurrentOrUpcomingWindowArgs... currentOrUpcomingWindows) {
            return currentOrUpcomingWindows(List.of(currentOrUpcomingWindows));
        }

        /**
         * @param description Description of the freeze
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the freeze
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param freezeWindows Freeze windows in the freeze response
         * 
         * @return builder
         * 
         */
        public Builder freezeWindows(@Nullable Output<List<ManualFreezeFreezeWindowArgs>> freezeWindows) {
            $.freezeWindows = freezeWindows;
            return this;
        }

        /**
         * @param freezeWindows Freeze windows in the freeze response
         * 
         * @return builder
         * 
         */
        public Builder freezeWindows(List<ManualFreezeFreezeWindowArgs> freezeWindows) {
            return freezeWindows(Output.of(freezeWindows));
        }

        /**
         * @param freezeWindows Freeze windows in the freeze response
         * 
         * @return builder
         * 
         */
        public Builder freezeWindows(ManualFreezeFreezeWindowArgs... freezeWindows) {
            return freezeWindows(List.of(freezeWindows));
        }

        /**
         * @param identifier Identifier of the freeze
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Identifier of the freeze
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param name Name of the freeze
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the freeze
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId Organization identifier of the freeze
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Organization identifier of the freeze
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Project identifier of the freeze
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project identifier of the freeze
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param scope Scope of the freeze
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Scope of the freeze
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param status Status of the freeze
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the freeze
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags Tags associated with the freeze
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags associated with the freeze
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags associated with the freeze
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type Type of freeze
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of freeze
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param yaml Yaml of the freeze
         * 
         * @return builder
         * 
         */
        public Builder yaml(@Nullable Output<String> yaml) {
            $.yaml = yaml;
            return this;
        }

        /**
         * @param yaml Yaml of the freeze
         * 
         * @return builder
         * 
         */
        public Builder yaml(String yaml) {
            return yaml(Output.of(yaml));
        }

        public ManualFreezeState build() {
            return $;
        }
    }

}
