// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cluster;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.cluster.inputs.OrchestratorConfigBinpackingArgs;
import com.pulumi.harness.cluster.inputs.OrchestratorConfigCommitmentIntegrationArgs;
import com.pulumi.harness.cluster.inputs.OrchestratorConfigDistributionArgs;
import com.pulumi.harness.cluster.inputs.OrchestratorConfigNodePreferencesArgs;
import com.pulumi.harness.cluster.inputs.OrchestratorConfigReplacementScheduleArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrchestratorConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrchestratorConfigArgs Empty = new OrchestratorConfigArgs();

    /**
     * Binpacking preferences for Cluster Orchestrator
     * 
     */
    @Import(name="binpacking")
    private @Nullable Output<OrchestratorConfigBinpackingArgs> binpacking;

    /**
     * @return Binpacking preferences for Cluster Orchestrator
     * 
     */
    public Optional<Output<OrchestratorConfigBinpackingArgs>> binpacking() {
        return Optional.ofNullable(this.binpacking);
    }

    /**
     * Commitment integration configuration for Cluster Orchestrator
     * 
     */
    @Import(name="commitmentIntegration")
    private @Nullable Output<OrchestratorConfigCommitmentIntegrationArgs> commitmentIntegration;

    /**
     * @return Commitment integration configuration for Cluster Orchestrator
     * 
     */
    public Optional<Output<OrchestratorConfigCommitmentIntegrationArgs>> commitmentIntegration() {
        return Optional.ofNullable(this.commitmentIntegration);
    }

    /**
     * Spot and Ondemand Distribution Preferences for workload replicas
     * 
     */
    @Import(name="distribution", required=true)
    private Output<OrchestratorConfigDistributionArgs> distribution;

    /**
     * @return Spot and Ondemand Distribution Preferences for workload replicas
     * 
     */
    public Output<OrchestratorConfigDistributionArgs> distribution() {
        return this.distribution;
    }

    /**
     * Node preferences for Cluster Orchestrator
     * 
     */
    @Import(name="nodePreferences")
    private @Nullable Output<OrchestratorConfigNodePreferencesArgs> nodePreferences;

    /**
     * @return Node preferences for Cluster Orchestrator
     * 
     */
    public Optional<Output<OrchestratorConfigNodePreferencesArgs>> nodePreferences() {
        return Optional.ofNullable(this.nodePreferences);
    }

    /**
     * ID of the Cluster Orchestrator Object
     * 
     */
    @Import(name="orchestratorId", required=true)
    private Output<String> orchestratorId;

    /**
     * @return ID of the Cluster Orchestrator Object
     * 
     */
    public Output<String> orchestratorId() {
        return this.orchestratorId;
    }

    /**
     * Replacement schedule for Cluster Orchestrator
     * 
     */
    @Import(name="replacementSchedule")
    private @Nullable Output<OrchestratorConfigReplacementScheduleArgs> replacementSchedule;

    /**
     * @return Replacement schedule for Cluster Orchestrator
     * 
     */
    public Optional<Output<OrchestratorConfigReplacementScheduleArgs>> replacementSchedule() {
        return Optional.ofNullable(this.replacementSchedule);
    }

    private OrchestratorConfigArgs() {}

    private OrchestratorConfigArgs(OrchestratorConfigArgs $) {
        this.binpacking = $.binpacking;
        this.commitmentIntegration = $.commitmentIntegration;
        this.distribution = $.distribution;
        this.nodePreferences = $.nodePreferences;
        this.orchestratorId = $.orchestratorId;
        this.replacementSchedule = $.replacementSchedule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrchestratorConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrchestratorConfigArgs $;

        public Builder() {
            $ = new OrchestratorConfigArgs();
        }

        public Builder(OrchestratorConfigArgs defaults) {
            $ = new OrchestratorConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param binpacking Binpacking preferences for Cluster Orchestrator
         * 
         * @return builder
         * 
         */
        public Builder binpacking(@Nullable Output<OrchestratorConfigBinpackingArgs> binpacking) {
            $.binpacking = binpacking;
            return this;
        }

        /**
         * @param binpacking Binpacking preferences for Cluster Orchestrator
         * 
         * @return builder
         * 
         */
        public Builder binpacking(OrchestratorConfigBinpackingArgs binpacking) {
            return binpacking(Output.of(binpacking));
        }

        /**
         * @param commitmentIntegration Commitment integration configuration for Cluster Orchestrator
         * 
         * @return builder
         * 
         */
        public Builder commitmentIntegration(@Nullable Output<OrchestratorConfigCommitmentIntegrationArgs> commitmentIntegration) {
            $.commitmentIntegration = commitmentIntegration;
            return this;
        }

        /**
         * @param commitmentIntegration Commitment integration configuration for Cluster Orchestrator
         * 
         * @return builder
         * 
         */
        public Builder commitmentIntegration(OrchestratorConfigCommitmentIntegrationArgs commitmentIntegration) {
            return commitmentIntegration(Output.of(commitmentIntegration));
        }

        /**
         * @param distribution Spot and Ondemand Distribution Preferences for workload replicas
         * 
         * @return builder
         * 
         */
        public Builder distribution(Output<OrchestratorConfigDistributionArgs> distribution) {
            $.distribution = distribution;
            return this;
        }

        /**
         * @param distribution Spot and Ondemand Distribution Preferences for workload replicas
         * 
         * @return builder
         * 
         */
        public Builder distribution(OrchestratorConfigDistributionArgs distribution) {
            return distribution(Output.of(distribution));
        }

        /**
         * @param nodePreferences Node preferences for Cluster Orchestrator
         * 
         * @return builder
         * 
         */
        public Builder nodePreferences(@Nullable Output<OrchestratorConfigNodePreferencesArgs> nodePreferences) {
            $.nodePreferences = nodePreferences;
            return this;
        }

        /**
         * @param nodePreferences Node preferences for Cluster Orchestrator
         * 
         * @return builder
         * 
         */
        public Builder nodePreferences(OrchestratorConfigNodePreferencesArgs nodePreferences) {
            return nodePreferences(Output.of(nodePreferences));
        }

        /**
         * @param orchestratorId ID of the Cluster Orchestrator Object
         * 
         * @return builder
         * 
         */
        public Builder orchestratorId(Output<String> orchestratorId) {
            $.orchestratorId = orchestratorId;
            return this;
        }

        /**
         * @param orchestratorId ID of the Cluster Orchestrator Object
         * 
         * @return builder
         * 
         */
        public Builder orchestratorId(String orchestratorId) {
            return orchestratorId(Output.of(orchestratorId));
        }

        /**
         * @param replacementSchedule Replacement schedule for Cluster Orchestrator
         * 
         * @return builder
         * 
         */
        public Builder replacementSchedule(@Nullable Output<OrchestratorConfigReplacementScheduleArgs> replacementSchedule) {
            $.replacementSchedule = replacementSchedule;
            return this;
        }

        /**
         * @param replacementSchedule Replacement schedule for Cluster Orchestrator
         * 
         * @return builder
         * 
         */
        public Builder replacementSchedule(OrchestratorConfigReplacementScheduleArgs replacementSchedule) {
            return replacementSchedule(Output.of(replacementSchedule));
        }

        public OrchestratorConfigArgs build() {
            if ($.distribution == null) {
                throw new MissingRequiredPropertyException("OrchestratorConfigArgs", "distribution");
            }
            if ($.orchestratorId == null) {
                throw new MissingRequiredPropertyException("OrchestratorConfigArgs", "orchestratorId");
            }
            return $;
        }
    }

}
