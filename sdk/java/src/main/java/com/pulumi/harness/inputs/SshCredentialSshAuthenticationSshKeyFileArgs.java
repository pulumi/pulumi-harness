// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SshCredentialSshAuthenticationSshKeyFileArgs extends com.pulumi.resources.ResourceArgs {

    public static final SshCredentialSshAuthenticationSshKeyFileArgs Empty = new SshCredentialSshAuthenticationSshKeyFileArgs();

    /**
     * The id of the secret containing the password to use for the ssh key
     * 
     */
    @Import(name="passphraseSecretId")
    private @Nullable Output<String> passphraseSecretId;

    /**
     * @return The id of the secret containing the password to use for the ssh key
     * 
     */
    public Optional<Output<String>> passphraseSecretId() {
        return Optional.ofNullable(this.passphraseSecretId);
    }

    /**
     * The path to the key file on the delegate
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The path to the key file on the delegate
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    private SshCredentialSshAuthenticationSshKeyFileArgs() {}

    private SshCredentialSshAuthenticationSshKeyFileArgs(SshCredentialSshAuthenticationSshKeyFileArgs $) {
        this.passphraseSecretId = $.passphraseSecretId;
        this.path = $.path;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SshCredentialSshAuthenticationSshKeyFileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SshCredentialSshAuthenticationSshKeyFileArgs $;

        public Builder() {
            $ = new SshCredentialSshAuthenticationSshKeyFileArgs();
        }

        public Builder(SshCredentialSshAuthenticationSshKeyFileArgs defaults) {
            $ = new SshCredentialSshAuthenticationSshKeyFileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param passphraseSecretId The id of the secret containing the password to use for the ssh key
         * 
         * @return builder
         * 
         */
        public Builder passphraseSecretId(@Nullable Output<String> passphraseSecretId) {
            $.passphraseSecretId = passphraseSecretId;
            return this;
        }

        /**
         * @param passphraseSecretId The id of the secret containing the password to use for the ssh key
         * 
         * @return builder
         * 
         */
        public Builder passphraseSecretId(String passphraseSecretId) {
            return passphraseSecretId(Output.of(passphraseSecretId));
        }

        /**
         * @param path The path to the key file on the delegate
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path to the key file on the delegate
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        public SshCredentialSshAuthenticationSshKeyFileArgs build() {
            if ($.path == null) {
                throw new MissingRequiredPropertyException("SshCredentialSshAuthenticationSshKeyFileArgs", "path");
            }
            return $;
        }
    }

}
