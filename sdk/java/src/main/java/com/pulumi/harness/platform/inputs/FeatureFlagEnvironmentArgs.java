// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.FeatureFlagEnvironmentAddTargetRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FeatureFlagEnvironmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final FeatureFlagEnvironmentArgs Empty = new FeatureFlagEnvironmentArgs();

    /**
     * The targeting rules for the flag
     * 
     */
    @Import(name="addTargetRules")
    private @Nullable Output<List<FeatureFlagEnvironmentAddTargetRuleArgs>> addTargetRules;

    /**
     * @return The targeting rules for the flag
     * 
     */
    public Optional<Output<List<FeatureFlagEnvironmentAddTargetRuleArgs>>> addTargetRules() {
        return Optional.ofNullable(this.addTargetRules);
    }

    /**
     * Default variation to be served when flag is &#39;off&#39;
     * 
     */
    @Import(name="defaultOffVariation")
    private @Nullable Output<String> defaultOffVariation;

    /**
     * @return Default variation to be served when flag is &#39;off&#39;
     * 
     */
    public Optional<Output<String>> defaultOffVariation() {
        return Optional.ofNullable(this.defaultOffVariation);
    }

    /**
     * Default variation to be served when flag is &#39;on&#39;
     * 
     */
    @Import(name="defaultOnVariation")
    private @Nullable Output<String> defaultOnVariation;

    /**
     * @return Default variation to be served when flag is &#39;on&#39;
     * 
     */
    public Optional<Output<String>> defaultOnVariation() {
        return Optional.ofNullable(this.defaultOnVariation);
    }

    /**
     * Identifier of the Environment
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return Identifier of the Environment
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * State of the flag in this environment. Possible values are &#39;on&#39; and &#39;off&#39;
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of the flag in this environment. Possible values are &#39;on&#39; and &#39;off&#39;
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private FeatureFlagEnvironmentArgs() {}

    private FeatureFlagEnvironmentArgs(FeatureFlagEnvironmentArgs $) {
        this.addTargetRules = $.addTargetRules;
        this.defaultOffVariation = $.defaultOffVariation;
        this.defaultOnVariation = $.defaultOnVariation;
        this.identifier = $.identifier;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FeatureFlagEnvironmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FeatureFlagEnvironmentArgs $;

        public Builder() {
            $ = new FeatureFlagEnvironmentArgs();
        }

        public Builder(FeatureFlagEnvironmentArgs defaults) {
            $ = new FeatureFlagEnvironmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addTargetRules The targeting rules for the flag
         * 
         * @return builder
         * 
         */
        public Builder addTargetRules(@Nullable Output<List<FeatureFlagEnvironmentAddTargetRuleArgs>> addTargetRules) {
            $.addTargetRules = addTargetRules;
            return this;
        }

        /**
         * @param addTargetRules The targeting rules for the flag
         * 
         * @return builder
         * 
         */
        public Builder addTargetRules(List<FeatureFlagEnvironmentAddTargetRuleArgs> addTargetRules) {
            return addTargetRules(Output.of(addTargetRules));
        }

        /**
         * @param addTargetRules The targeting rules for the flag
         * 
         * @return builder
         * 
         */
        public Builder addTargetRules(FeatureFlagEnvironmentAddTargetRuleArgs... addTargetRules) {
            return addTargetRules(List.of(addTargetRules));
        }

        /**
         * @param defaultOffVariation Default variation to be served when flag is &#39;off&#39;
         * 
         * @return builder
         * 
         */
        public Builder defaultOffVariation(@Nullable Output<String> defaultOffVariation) {
            $.defaultOffVariation = defaultOffVariation;
            return this;
        }

        /**
         * @param defaultOffVariation Default variation to be served when flag is &#39;off&#39;
         * 
         * @return builder
         * 
         */
        public Builder defaultOffVariation(String defaultOffVariation) {
            return defaultOffVariation(Output.of(defaultOffVariation));
        }

        /**
         * @param defaultOnVariation Default variation to be served when flag is &#39;on&#39;
         * 
         * @return builder
         * 
         */
        public Builder defaultOnVariation(@Nullable Output<String> defaultOnVariation) {
            $.defaultOnVariation = defaultOnVariation;
            return this;
        }

        /**
         * @param defaultOnVariation Default variation to be served when flag is &#39;on&#39;
         * 
         * @return builder
         * 
         */
        public Builder defaultOnVariation(String defaultOnVariation) {
            return defaultOnVariation(Output.of(defaultOnVariation));
        }

        /**
         * @param identifier Identifier of the Environment
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Identifier of the Environment
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param state State of the flag in this environment. Possible values are &#39;on&#39; and &#39;off&#39;
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of the flag in this environment. Possible values are &#39;on&#39; and &#39;off&#39;
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public FeatureFlagEnvironmentArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("FeatureFlagEnvironmentArgs", "identifier");
            }
            return $;
        }
    }

}
