// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cluster;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.cluster.OrchestratorConfigArgs;
import com.pulumi.harness.cluster.inputs.OrchestratorConfigState;
import com.pulumi.harness.cluster.outputs.OrchestratorConfigBinpacking;
import com.pulumi.harness.cluster.outputs.OrchestratorConfigCommitmentIntegration;
import com.pulumi.harness.cluster.outputs.OrchestratorConfigDistribution;
import com.pulumi.harness.cluster.outputs.OrchestratorConfigNodePreferences;
import com.pulumi.harness.cluster.outputs.OrchestratorConfigReplacementSchedule;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for ClusterOrchestrator Config.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.cluster.OrchestratorConfig;
 * import com.pulumi.harness.cluster.OrchestratorConfigArgs;
 * import com.pulumi.harness.cluster.inputs.OrchestratorConfigDistributionArgs;
 * import com.pulumi.harness.cluster.inputs.OrchestratorConfigBinpackingArgs;
 * import com.pulumi.harness.cluster.inputs.OrchestratorConfigBinpackingPodEvictionArgs;
 * import com.pulumi.harness.cluster.inputs.OrchestratorConfigBinpackingPodEvictionThresholdArgs;
 * import com.pulumi.harness.cluster.inputs.OrchestratorConfigBinpackingDisruptionArgs;
 * import com.pulumi.harness.cluster.inputs.OrchestratorConfigNodePreferencesArgs;
 * import com.pulumi.harness.cluster.inputs.OrchestratorConfigCommitmentIntegrationArgs;
 * import com.pulumi.harness.cluster.inputs.OrchestratorConfigReplacementScheduleArgs;
 * import com.pulumi.harness.cluster.inputs.OrchestratorConfigReplacementScheduleAppliesToArgs;
 * import com.pulumi.harness.cluster.inputs.OrchestratorConfigReplacementScheduleWindowDetailsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var example = new OrchestratorConfig("example", OrchestratorConfigArgs.builder()
 *             .orchestratorId("orch-cvifpfl9rbg8neldj97g")
 *             .disabled(false)
 *             .distribution(OrchestratorConfigDistributionArgs.builder()
 *                 .baseOndemandCapacity(2)
 *                 .ondemandReplicaPercentage(50.0)
 *                 .selector("ALL")
 *                 .strategy("CostOptimized")
 *                 .build())
 *             .binpacking(OrchestratorConfigBinpackingArgs.builder()
 *                 .podEviction(OrchestratorConfigBinpackingPodEvictionArgs.builder()
 *                     .threshold(OrchestratorConfigBinpackingPodEvictionThresholdArgs.builder()
 *                         .cpu(60.0)
 *                         .memory(80.0)
 *                         .build())
 *                     .build())
 *                 .disruption(OrchestratorConfigBinpackingDisruptionArgs.builder()
 *                     .criteria("WhenEmpty")
 *                     .delay("10m")
 *                     .budgets(                    
 *                         OrchestratorConfigBinpackingDisruptionBudgetArgs.builder()
 *                             .reasons(                            
 *                                 "Drifted",
 *                                 "Underutilized",
 *                                 "Empty")
 *                             .nodes("20")
 *                             .build(),
 *                         OrchestratorConfigBinpackingDisruptionBudgetArgs.builder()
 *                             .reasons(                            
 *                                 "Drifted",
 *                                 "Empty")
 *                             .nodes("1")
 *                             .schedule(OrchestratorConfigBinpackingDisruptionBudgetScheduleArgs.builder()
 *                                 .frequency("}{@literal @}{@code monthly")
 *                                 .duration("10m")
 *                                 .build())
 *                             .build())
 *                     .build())
 *                 .build())
 *             .nodePreferences(OrchestratorConfigNodePreferencesArgs.builder()
 *                 .ttl("Never")
 *                 .reverseFallbackInterval("6h")
 *                 .build())
 *             .commitmentIntegration(OrchestratorConfigCommitmentIntegrationArgs.builder()
 *                 .enabled(true)
 *                 .masterAccountId("dummyAccountId")
 *                 .build())
 *             .replacementSchedule(OrchestratorConfigReplacementScheduleArgs.builder()
 *                 .windowType("Custom")
 *                 .appliesTo(OrchestratorConfigReplacementScheduleAppliesToArgs.builder()
 *                     .consolidation(true)
 *                     .harnessPodEviction(true)
 *                     .reverseFallback(true)
 *                     .build())
 *                 .windowDetails(OrchestratorConfigReplacementScheduleWindowDetailsArgs.builder()
 *                     .days(                    
 *                         "SUN",
 *                         "WED",
 *                         "SAT")
 *                     .timeZone("Asia/Calcutta")
 *                     .allDay(false)
 *                     .startTime("10:30")
 *                     .endTime("11:30")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * 
 */
@ResourceType(type="harness:cluster/orchestratorConfig:OrchestratorConfig")
public class OrchestratorConfig extends com.pulumi.resources.CustomResource {
    /**
     * Binpacking preferences for Cluster Orchestrator
     * 
     */
    @Export(name="binpacking", refs={OrchestratorConfigBinpacking.class}, tree="[0]")
    private Output</* @Nullable */ OrchestratorConfigBinpacking> binpacking;

    /**
     * @return Binpacking preferences for Cluster Orchestrator
     * 
     */
    public Output<Optional<OrchestratorConfigBinpacking>> binpacking() {
        return Codegen.optional(this.binpacking);
    }
    /**
     * Commitment integration configuration for Cluster Orchestrator
     * 
     */
    @Export(name="commitmentIntegration", refs={OrchestratorConfigCommitmentIntegration.class}, tree="[0]")
    private Output</* @Nullable */ OrchestratorConfigCommitmentIntegration> commitmentIntegration;

    /**
     * @return Commitment integration configuration for Cluster Orchestrator
     * 
     */
    public Output<Optional<OrchestratorConfigCommitmentIntegration>> commitmentIntegration() {
        return Codegen.optional(this.commitmentIntegration);
    }
    /**
     * Whether the cluster orchestrator is disabled
     * 
     */
    @Export(name="disabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disabled;

    /**
     * @return Whether the cluster orchestrator is disabled
     * 
     */
    public Output<Optional<Boolean>> disabled() {
        return Codegen.optional(this.disabled);
    }
    /**
     * Spot and Ondemand Distribution Preferences for workload replicas
     * 
     */
    @Export(name="distribution", refs={OrchestratorConfigDistribution.class}, tree="[0]")
    private Output<OrchestratorConfigDistribution> distribution;

    /**
     * @return Spot and Ondemand Distribution Preferences for workload replicas
     * 
     */
    public Output<OrchestratorConfigDistribution> distribution() {
        return this.distribution;
    }
    /**
     * Node preferences for Cluster Orchestrator
     * 
     */
    @Export(name="nodePreferences", refs={OrchestratorConfigNodePreferences.class}, tree="[0]")
    private Output</* @Nullable */ OrchestratorConfigNodePreferences> nodePreferences;

    /**
     * @return Node preferences for Cluster Orchestrator
     * 
     */
    public Output<Optional<OrchestratorConfigNodePreferences>> nodePreferences() {
        return Codegen.optional(this.nodePreferences);
    }
    /**
     * ID of the Cluster Orchestrator Object
     * 
     */
    @Export(name="orchestratorId", refs={String.class}, tree="[0]")
    private Output<String> orchestratorId;

    /**
     * @return ID of the Cluster Orchestrator Object
     * 
     */
    public Output<String> orchestratorId() {
        return this.orchestratorId;
    }
    /**
     * Replacement schedule for Cluster Orchestrator
     * 
     */
    @Export(name="replacementSchedule", refs={OrchestratorConfigReplacementSchedule.class}, tree="[0]")
    private Output</* @Nullable */ OrchestratorConfigReplacementSchedule> replacementSchedule;

    /**
     * @return Replacement schedule for Cluster Orchestrator
     * 
     */
    public Output<Optional<OrchestratorConfigReplacementSchedule>> replacementSchedule() {
        return Codegen.optional(this.replacementSchedule);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public OrchestratorConfig(java.lang.String name) {
        this(name, OrchestratorConfigArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public OrchestratorConfig(java.lang.String name, OrchestratorConfigArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public OrchestratorConfig(java.lang.String name, OrchestratorConfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:cluster/orchestratorConfig:OrchestratorConfig", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private OrchestratorConfig(java.lang.String name, Output<java.lang.String> id, @Nullable OrchestratorConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:cluster/orchestratorConfig:OrchestratorConfig", name, state, makeResourceOptions(options, id), false);
    }

    private static OrchestratorConfigArgs makeArgs(OrchestratorConfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? OrchestratorConfigArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static OrchestratorConfig get(java.lang.String name, Output<java.lang.String> id, @Nullable OrchestratorConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new OrchestratorConfig(name, id, state, options);
    }
}
