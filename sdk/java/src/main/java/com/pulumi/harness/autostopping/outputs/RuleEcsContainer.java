// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.autostopping.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RuleEcsContainer {
    /**
     * @return Name of cluster in which service belong to
     * 
     */
    private String cluster;
    /**
     * @return Region of cluster
     * 
     */
    private String region;
    /**
     * @return Name of service to be onboarded
     * 
     */
    private String service;
    /**
     * @return Desired number of tasks on warming up a rule
     * 
     */
    private @Nullable Integer taskCount;

    private RuleEcsContainer() {}
    /**
     * @return Name of cluster in which service belong to
     * 
     */
    public String cluster() {
        return this.cluster;
    }
    /**
     * @return Region of cluster
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return Name of service to be onboarded
     * 
     */
    public String service() {
        return this.service;
    }
    /**
     * @return Desired number of tasks on warming up a rule
     * 
     */
    public Optional<Integer> taskCount() {
        return Optional.ofNullable(this.taskCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuleEcsContainer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cluster;
        private String region;
        private String service;
        private @Nullable Integer taskCount;
        public Builder() {}
        public Builder(RuleEcsContainer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cluster = defaults.cluster;
    	      this.region = defaults.region;
    	      this.service = defaults.service;
    	      this.taskCount = defaults.taskCount;
        }

        @CustomType.Setter
        public Builder cluster(String cluster) {
            if (cluster == null) {
              throw new MissingRequiredPropertyException("RuleEcsContainer", "cluster");
            }
            this.cluster = cluster;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("RuleEcsContainer", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder service(String service) {
            if (service == null) {
              throw new MissingRequiredPropertyException("RuleEcsContainer", "service");
            }
            this.service = service;
            return this;
        }
        @CustomType.Setter
        public Builder taskCount(@Nullable Integer taskCount) {

            this.taskCount = taskCount;
            return this;
        }
        public RuleEcsContainer build() {
            final var _resultValue = new RuleEcsContainer();
            _resultValue.cluster = cluster;
            _resultValue.region = region;
            _resultValue.service = service;
            _resultValue.taskCount = taskCount;
            return _resultValue;
        }
    }
}
