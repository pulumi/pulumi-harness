// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InfraModuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final InfraModuleArgs Empty = new InfraModuleArgs();

    /**
     * Timestamp when the module was created.
     * 
     */
    @Import(name="created")
    private @Nullable Output<Integer> created;

    /**
     * @return Timestamp when the module was created.
     * 
     */
    public Optional<Output<Integer>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * Description of the module.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the module.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the module.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the module.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * For account connectors, the repository where the module can be found
     * 
     */
    @Import(name="repository")
    private @Nullable Output<String> repository;

    /**
     * @return For account connectors, the repository where the module can be found
     * 
     */
    public Optional<Output<String>> repository() {
        return Optional.ofNullable(this.repository);
    }

    /**
     * Name of the branch to fetch the code from. This cannot be set if repository commit is set.
     * 
     */
    @Import(name="repositoryBranch")
    private @Nullable Output<String> repositoryBranch;

    /**
     * @return Name of the branch to fetch the code from. This cannot be set if repository commit is set.
     * 
     */
    public Optional<Output<String>> repositoryBranch() {
        return Optional.ofNullable(this.repositoryBranch);
    }

    /**
     * Tag to fetch the code from. This cannot be set if repository branch is set.
     * 
     */
    @Import(name="repositoryCommit")
    private @Nullable Output<String> repositoryCommit;

    /**
     * @return Tag to fetch the code from. This cannot be set if repository branch is set.
     * 
     */
    public Optional<Output<String>> repositoryCommit() {
        return Optional.ofNullable(this.repositoryCommit);
    }

    /**
     * Reference to the connector to be used to fetch the code.
     * 
     */
    @Import(name="repositoryConnector")
    private @Nullable Output<String> repositoryConnector;

    /**
     * @return Reference to the connector to be used to fetch the code.
     * 
     */
    public Optional<Output<String>> repositoryConnector() {
        return Optional.ofNullable(this.repositoryConnector);
    }

    /**
     * Path to the module within the repository.
     * 
     */
    @Import(name="repositoryPath")
    private @Nullable Output<String> repositoryPath;

    /**
     * @return Path to the module within the repository.
     * 
     */
    public Optional<Output<String>> repositoryPath() {
        return Optional.ofNullable(this.repositoryPath);
    }

    /**
     * URL of the repository where the module is stored.
     * 
     */
    @Import(name="repositoryUrl")
    private @Nullable Output<String> repositoryUrl;

    /**
     * @return URL of the repository where the module is stored.
     * 
     */
    public Optional<Output<String>> repositoryUrl() {
        return Optional.ofNullable(this.repositoryUrl);
    }

    /**
     * Timestamp when the module was last synced.
     * 
     */
    @Import(name="synced")
    private @Nullable Output<Integer> synced;

    /**
     * @return Timestamp when the module was last synced.
     * 
     */
    public Optional<Output<Integer>> synced() {
        return Optional.ofNullable(this.synced);
    }

    /**
     * Provider of the module.
     * 
     */
    @Import(name="system", required=true)
    private Output<String> system;

    /**
     * @return Provider of the module.
     * 
     */
    public Output<String> system() {
        return this.system;
    }

    /**
     * Git tags associated with the module.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<String> tags;

    /**
     * @return Git tags associated with the module.
     * 
     */
    public Optional<Output<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * List of versions of the module.
     * 
     */
    @Import(name="versions")
    private @Nullable Output<List<String>> versions;

    /**
     * @return List of versions of the module.
     * 
     */
    public Optional<Output<List<String>>> versions() {
        return Optional.ofNullable(this.versions);
    }

    private InfraModuleArgs() {}

    private InfraModuleArgs(InfraModuleArgs $) {
        this.created = $.created;
        this.description = $.description;
        this.name = $.name;
        this.repository = $.repository;
        this.repositoryBranch = $.repositoryBranch;
        this.repositoryCommit = $.repositoryCommit;
        this.repositoryConnector = $.repositoryConnector;
        this.repositoryPath = $.repositoryPath;
        this.repositoryUrl = $.repositoryUrl;
        this.synced = $.synced;
        this.system = $.system;
        this.tags = $.tags;
        this.versions = $.versions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InfraModuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InfraModuleArgs $;

        public Builder() {
            $ = new InfraModuleArgs();
        }

        public Builder(InfraModuleArgs defaults) {
            $ = new InfraModuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param created Timestamp when the module was created.
         * 
         * @return builder
         * 
         */
        public Builder created(@Nullable Output<Integer> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created Timestamp when the module was created.
         * 
         * @return builder
         * 
         */
        public Builder created(Integer created) {
            return created(Output.of(created));
        }

        /**
         * @param description Description of the module.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the module.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name of the module.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the module.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param repository For account connectors, the repository where the module can be found
         * 
         * @return builder
         * 
         */
        public Builder repository(@Nullable Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository For account connectors, the repository where the module can be found
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        /**
         * @param repositoryBranch Name of the branch to fetch the code from. This cannot be set if repository commit is set.
         * 
         * @return builder
         * 
         */
        public Builder repositoryBranch(@Nullable Output<String> repositoryBranch) {
            $.repositoryBranch = repositoryBranch;
            return this;
        }

        /**
         * @param repositoryBranch Name of the branch to fetch the code from. This cannot be set if repository commit is set.
         * 
         * @return builder
         * 
         */
        public Builder repositoryBranch(String repositoryBranch) {
            return repositoryBranch(Output.of(repositoryBranch));
        }

        /**
         * @param repositoryCommit Tag to fetch the code from. This cannot be set if repository branch is set.
         * 
         * @return builder
         * 
         */
        public Builder repositoryCommit(@Nullable Output<String> repositoryCommit) {
            $.repositoryCommit = repositoryCommit;
            return this;
        }

        /**
         * @param repositoryCommit Tag to fetch the code from. This cannot be set if repository branch is set.
         * 
         * @return builder
         * 
         */
        public Builder repositoryCommit(String repositoryCommit) {
            return repositoryCommit(Output.of(repositoryCommit));
        }

        /**
         * @param repositoryConnector Reference to the connector to be used to fetch the code.
         * 
         * @return builder
         * 
         */
        public Builder repositoryConnector(@Nullable Output<String> repositoryConnector) {
            $.repositoryConnector = repositoryConnector;
            return this;
        }

        /**
         * @param repositoryConnector Reference to the connector to be used to fetch the code.
         * 
         * @return builder
         * 
         */
        public Builder repositoryConnector(String repositoryConnector) {
            return repositoryConnector(Output.of(repositoryConnector));
        }

        /**
         * @param repositoryPath Path to the module within the repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryPath(@Nullable Output<String> repositoryPath) {
            $.repositoryPath = repositoryPath;
            return this;
        }

        /**
         * @param repositoryPath Path to the module within the repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryPath(String repositoryPath) {
            return repositoryPath(Output.of(repositoryPath));
        }

        /**
         * @param repositoryUrl URL of the repository where the module is stored.
         * 
         * @return builder
         * 
         */
        public Builder repositoryUrl(@Nullable Output<String> repositoryUrl) {
            $.repositoryUrl = repositoryUrl;
            return this;
        }

        /**
         * @param repositoryUrl URL of the repository where the module is stored.
         * 
         * @return builder
         * 
         */
        public Builder repositoryUrl(String repositoryUrl) {
            return repositoryUrl(Output.of(repositoryUrl));
        }

        /**
         * @param synced Timestamp when the module was last synced.
         * 
         * @return builder
         * 
         */
        public Builder synced(@Nullable Output<Integer> synced) {
            $.synced = synced;
            return this;
        }

        /**
         * @param synced Timestamp when the module was last synced.
         * 
         * @return builder
         * 
         */
        public Builder synced(Integer synced) {
            return synced(Output.of(synced));
        }

        /**
         * @param system Provider of the module.
         * 
         * @return builder
         * 
         */
        public Builder system(Output<String> system) {
            $.system = system;
            return this;
        }

        /**
         * @param system Provider of the module.
         * 
         * @return builder
         * 
         */
        public Builder system(String system) {
            return system(Output.of(system));
        }

        /**
         * @param tags Git tags associated with the module.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Git tags associated with the module.
         * 
         * @return builder
         * 
         */
        public Builder tags(String tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param versions List of versions of the module.
         * 
         * @return builder
         * 
         */
        public Builder versions(@Nullable Output<List<String>> versions) {
            $.versions = versions;
            return this;
        }

        /**
         * @param versions List of versions of the module.
         * 
         * @return builder
         * 
         */
        public Builder versions(List<String> versions) {
            return versions(Output.of(versions));
        }

        /**
         * @param versions List of versions of the module.
         * 
         * @return builder
         * 
         */
        public Builder versions(String... versions) {
            return versions(List.of(versions));
        }

        public InfraModuleArgs build() {
            if ($.system == null) {
                throw new MissingRequiredPropertyException("InfraModuleArgs", "system");
            }
            return $;
        }
    }

}
