// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cloudprovider.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TanzuState extends com.pulumi.resources.ResourceArgs {

    public static final TanzuState Empty = new TanzuState();

    /**
     * The url of the Tanzu platform.
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    /**
     * @return The url of the Tanzu platform.
     * 
     */
    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * The name of the cloud provider.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the cloud provider.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the Harness secret containing the password to use to authenticate to Tanzu.
     * 
     */
    @Import(name="passwordSecretName")
    private @Nullable Output<String> passwordSecretName;

    /**
     * @return The name of the Harness secret containing the password to use to authenticate to Tanzu.
     * 
     */
    public Optional<Output<String>> passwordSecretName() {
        return Optional.ofNullable(this.passwordSecretName);
    }

    /**
     * Skip validation of Tanzu configuration.
     * 
     */
    @Import(name="skipValidation")
    private @Nullable Output<Boolean> skipValidation;

    /**
     * @return Skip validation of Tanzu configuration.
     * 
     */
    public Optional<Output<Boolean>> skipValidation() {
        return Optional.ofNullable(this.skipValidation);
    }

    /**
     * The username to use to authenticate to Tanzu.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The username to use to authenticate to Tanzu.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * The name of the Harness secret containing the username to authenticate to Tanzu with.
     * 
     */
    @Import(name="usernameSecretName")
    private @Nullable Output<String> usernameSecretName;

    /**
     * @return The name of the Harness secret containing the username to authenticate to Tanzu with.
     * 
     */
    public Optional<Output<String>> usernameSecretName() {
        return Optional.ofNullable(this.usernameSecretName);
    }

    private TanzuState() {}

    private TanzuState(TanzuState $) {
        this.endpoint = $.endpoint;
        this.name = $.name;
        this.passwordSecretName = $.passwordSecretName;
        this.skipValidation = $.skipValidation;
        this.username = $.username;
        this.usernameSecretName = $.usernameSecretName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TanzuState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TanzuState $;

        public Builder() {
            $ = new TanzuState();
        }

        public Builder(TanzuState defaults) {
            $ = new TanzuState(Objects.requireNonNull(defaults));
        }

        /**
         * @param endpoint The url of the Tanzu platform.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint The url of the Tanzu platform.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param name The name of the cloud provider.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the cloud provider.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param passwordSecretName The name of the Harness secret containing the password to use to authenticate to Tanzu.
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretName(@Nullable Output<String> passwordSecretName) {
            $.passwordSecretName = passwordSecretName;
            return this;
        }

        /**
         * @param passwordSecretName The name of the Harness secret containing the password to use to authenticate to Tanzu.
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretName(String passwordSecretName) {
            return passwordSecretName(Output.of(passwordSecretName));
        }

        /**
         * @param skipValidation Skip validation of Tanzu configuration.
         * 
         * @return builder
         * 
         */
        public Builder skipValidation(@Nullable Output<Boolean> skipValidation) {
            $.skipValidation = skipValidation;
            return this;
        }

        /**
         * @param skipValidation Skip validation of Tanzu configuration.
         * 
         * @return builder
         * 
         */
        public Builder skipValidation(Boolean skipValidation) {
            return skipValidation(Output.of(skipValidation));
        }

        /**
         * @param username The username to use to authenticate to Tanzu.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username to use to authenticate to Tanzu.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param usernameSecretName The name of the Harness secret containing the username to authenticate to Tanzu with.
         * 
         * @return builder
         * 
         */
        public Builder usernameSecretName(@Nullable Output<String> usernameSecretName) {
            $.usernameSecretName = usernameSecretName;
            return this;
        }

        /**
         * @param usernameSecretName The name of the Harness secret containing the username to authenticate to Tanzu with.
         * 
         * @return builder
         * 
         */
        public Builder usernameSecretName(String usernameSecretName) {
            return usernameSecretName(Output.of(usernameSecretName));
        }

        public TanzuState build() {
            return $;
        }
    }

}
