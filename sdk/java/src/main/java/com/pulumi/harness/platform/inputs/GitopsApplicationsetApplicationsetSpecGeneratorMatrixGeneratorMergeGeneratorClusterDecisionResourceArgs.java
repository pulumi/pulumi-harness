// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorArgs;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceArgs Empty = new GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceArgs();

    /**
     * ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
     * 
     */
    @Import(name="configMapRef", required=true)
    private Output<String> configMapRef;

    /**
     * @return ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
     * 
     */
    public Output<String> configMapRef() {
        return this.configMapRef;
    }

    /**
     * Label selector used to find the resource defined in the `configMapRef`. Alternative to `name`.
     * 
     */
    @Import(name="labelSelector")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorArgs> labelSelector;

    /**
     * @return Label selector used to find the resource defined in the `configMapRef`. Alternative to `name`.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorArgs>> labelSelector() {
        return Optional.ofNullable(this.labelSelector);
    }

    /**
     * Resource name of the kind, group and version, defined in the `configMapRef`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Resource name of the kind, group and version, defined in the `configMapRef`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * How often to check for changes (in seconds). Default: 3min.
     * 
     */
    @Import(name="requeueAfterSeconds")
    private @Nullable Output<String> requeueAfterSeconds;

    /**
     * @return How often to check for changes (in seconds). Default: 3min.
     * 
     */
    public Optional<Output<String>> requeueAfterSeconds() {
        return Optional.ofNullable(this.requeueAfterSeconds);
    }

    /**
     * Generator template. Used to override the values of the spec-level template.
     * 
     */
    @Import(name="template")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateArgs> template;

    /**
     * @return Generator template. Used to override the values of the spec-level template.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateArgs>> template() {
        return Optional.ofNullable(this.template);
    }

    /**
     * Arbitrary string key-value pairs which are passed directly as parameters to the template.
     * 
     */
    @Import(name="values")
    private @Nullable Output<Map<String,String>> values;

    /**
     * @return Arbitrary string key-value pairs which are passed directly as parameters to the template.
     * 
     */
    public Optional<Output<Map<String,String>>> values() {
        return Optional.ofNullable(this.values);
    }

    private GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceArgs() {}

    private GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceArgs(GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceArgs $) {
        this.configMapRef = $.configMapRef;
        this.labelSelector = $.labelSelector;
        this.name = $.name;
        this.requeueAfterSeconds = $.requeueAfterSeconds;
        this.template = $.template;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceArgs $;

        public Builder() {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceArgs();
        }

        public Builder(GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceArgs defaults) {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configMapRef ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
         * 
         * @return builder
         * 
         */
        public Builder configMapRef(Output<String> configMapRef) {
            $.configMapRef = configMapRef;
            return this;
        }

        /**
         * @param configMapRef ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
         * 
         * @return builder
         * 
         */
        public Builder configMapRef(String configMapRef) {
            return configMapRef(Output.of(configMapRef));
        }

        /**
         * @param labelSelector Label selector used to find the resource defined in the `configMapRef`. Alternative to `name`.
         * 
         * @return builder
         * 
         */
        public Builder labelSelector(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorArgs> labelSelector) {
            $.labelSelector = labelSelector;
            return this;
        }

        /**
         * @param labelSelector Label selector used to find the resource defined in the `configMapRef`. Alternative to `name`.
         * 
         * @return builder
         * 
         */
        public Builder labelSelector(GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorArgs labelSelector) {
            return labelSelector(Output.of(labelSelector));
        }

        /**
         * @param name Resource name of the kind, group and version, defined in the `configMapRef`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Resource name of the kind, group and version, defined in the `configMapRef`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param requeueAfterSeconds How often to check for changes (in seconds). Default: 3min.
         * 
         * @return builder
         * 
         */
        public Builder requeueAfterSeconds(@Nullable Output<String> requeueAfterSeconds) {
            $.requeueAfterSeconds = requeueAfterSeconds;
            return this;
        }

        /**
         * @param requeueAfterSeconds How often to check for changes (in seconds). Default: 3min.
         * 
         * @return builder
         * 
         */
        public Builder requeueAfterSeconds(String requeueAfterSeconds) {
            return requeueAfterSeconds(Output.of(requeueAfterSeconds));
        }

        /**
         * @param template Generator template. Used to override the values of the spec-level template.
         * 
         * @return builder
         * 
         */
        public Builder template(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateArgs> template) {
            $.template = template;
            return this;
        }

        /**
         * @param template Generator template. Used to override the values of the spec-level template.
         * 
         * @return builder
         * 
         */
        public Builder template(GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateArgs template) {
            return template(Output.of(template));
        }

        /**
         * @param values Arbitrary string key-value pairs which are passed directly as parameters to the template.
         * 
         * @return builder
         * 
         */
        public Builder values(@Nullable Output<Map<String,String>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values Arbitrary string key-value pairs which are passed directly as parameters to the template.
         * 
         * @return builder
         * 
         */
        public Builder values(Map<String,String> values) {
            return values(Output.of(values));
        }

        public GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceArgs build() {
            if ($.configMapRef == null) {
                throw new MissingRequiredPropertyException("GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceArgs", "configMapRef");
            }
            return $;
        }
    }

}
