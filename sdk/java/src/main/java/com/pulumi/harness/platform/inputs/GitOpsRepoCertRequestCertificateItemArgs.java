// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitOpsRepoCertRequestCertificateItemArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitOpsRepoCertRequestCertificateItemArgs Empty = new GitOpsRepoCertRequestCertificateItemArgs();

    /**
     * CertData contains the actual certificate data, dependent on the certificate type. The value should be base64 encoded
     * 
     */
    @Import(name="certData")
    private @Nullable Output<String> certData;

    /**
     * @return CertData contains the actual certificate data, dependent on the certificate type. The value should be base64 encoded
     * 
     */
    public Optional<Output<String>> certData() {
        return Optional.ofNullable(this.certData);
    }

    /**
     * CertInfo will hold additional certificate info, dependent on the certificate type .
     * 
     */
    @Import(name="certInfo")
    private @Nullable Output<String> certInfo;

    /**
     * @return CertInfo will hold additional certificate info, dependent on the certificate type .
     * 
     */
    public Optional<Output<String>> certInfo() {
        return Optional.ofNullable(this.certInfo);
    }

    /**
     * CertSubType specifies the sub type of the cert, i.e. ssh-rsa.
     * 
     */
    @Import(name="certSubType")
    private @Nullable Output<String> certSubType;

    /**
     * @return CertSubType specifies the sub type of the cert, i.e. ssh-rsa.
     * 
     */
    public Optional<Output<String>> certSubType() {
        return Optional.ofNullable(this.certSubType);
    }

    /**
     * CertType specifies the type of the certificate - currently one of https or ssh.
     * 
     */
    @Import(name="certType")
    private @Nullable Output<String> certType;

    /**
     * @return CertType specifies the type of the certificate - currently one of https or ssh.
     * 
     */
    public Optional<Output<String>> certType() {
        return Optional.ofNullable(this.certType);
    }

    /**
     * ServerName specifies the DNS name of the server this certificate is intended.
     * 
     */
    @Import(name="serverName")
    private @Nullable Output<String> serverName;

    /**
     * @return ServerName specifies the DNS name of the server this certificate is intended.
     * 
     */
    public Optional<Output<String>> serverName() {
        return Optional.ofNullable(this.serverName);
    }

    private GitOpsRepoCertRequestCertificateItemArgs() {}

    private GitOpsRepoCertRequestCertificateItemArgs(GitOpsRepoCertRequestCertificateItemArgs $) {
        this.certData = $.certData;
        this.certInfo = $.certInfo;
        this.certSubType = $.certSubType;
        this.certType = $.certType;
        this.serverName = $.serverName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitOpsRepoCertRequestCertificateItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitOpsRepoCertRequestCertificateItemArgs $;

        public Builder() {
            $ = new GitOpsRepoCertRequestCertificateItemArgs();
        }

        public Builder(GitOpsRepoCertRequestCertificateItemArgs defaults) {
            $ = new GitOpsRepoCertRequestCertificateItemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certData CertData contains the actual certificate data, dependent on the certificate type. The value should be base64 encoded
         * 
         * @return builder
         * 
         */
        public Builder certData(@Nullable Output<String> certData) {
            $.certData = certData;
            return this;
        }

        /**
         * @param certData CertData contains the actual certificate data, dependent on the certificate type. The value should be base64 encoded
         * 
         * @return builder
         * 
         */
        public Builder certData(String certData) {
            return certData(Output.of(certData));
        }

        /**
         * @param certInfo CertInfo will hold additional certificate info, dependent on the certificate type .
         * 
         * @return builder
         * 
         */
        public Builder certInfo(@Nullable Output<String> certInfo) {
            $.certInfo = certInfo;
            return this;
        }

        /**
         * @param certInfo CertInfo will hold additional certificate info, dependent on the certificate type .
         * 
         * @return builder
         * 
         */
        public Builder certInfo(String certInfo) {
            return certInfo(Output.of(certInfo));
        }

        /**
         * @param certSubType CertSubType specifies the sub type of the cert, i.e. ssh-rsa.
         * 
         * @return builder
         * 
         */
        public Builder certSubType(@Nullable Output<String> certSubType) {
            $.certSubType = certSubType;
            return this;
        }

        /**
         * @param certSubType CertSubType specifies the sub type of the cert, i.e. ssh-rsa.
         * 
         * @return builder
         * 
         */
        public Builder certSubType(String certSubType) {
            return certSubType(Output.of(certSubType));
        }

        /**
         * @param certType CertType specifies the type of the certificate - currently one of https or ssh.
         * 
         * @return builder
         * 
         */
        public Builder certType(@Nullable Output<String> certType) {
            $.certType = certType;
            return this;
        }

        /**
         * @param certType CertType specifies the type of the certificate - currently one of https or ssh.
         * 
         * @return builder
         * 
         */
        public Builder certType(String certType) {
            return certType(Output.of(certType));
        }

        /**
         * @param serverName ServerName specifies the DNS name of the server this certificate is intended.
         * 
         * @return builder
         * 
         */
        public Builder serverName(@Nullable Output<String> serverName) {
            $.serverName = serverName;
            return this;
        }

        /**
         * @param serverName ServerName specifies the DNS name of the server this certificate is intended.
         * 
         * @return builder
         * 
         */
        public Builder serverName(String serverName) {
            return serverName(Output.of(serverName));
        }

        public GitOpsRepoCertRequestCertificateItemArgs build() {
            return $;
        }
    }

}
