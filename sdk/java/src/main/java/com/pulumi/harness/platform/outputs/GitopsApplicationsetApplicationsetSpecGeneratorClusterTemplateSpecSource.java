// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.harness.platform.outputs.GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSourceDirectory;
import com.pulumi.harness.platform.outputs.GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSourceHelm;
import com.pulumi.harness.platform.outputs.GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSourceKustomize;
import com.pulumi.harness.platform.outputs.GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSourcePlugin;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSource {
    /**
     * @return Helm chart name. Must be specified for applications sourced from a Helm repo.
     * 
     */
    private @Nullable String chart;
    /**
     * @return Path/directory specific options.
     * 
     */
    private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSourceDirectory directory;
    /**
     * @return Helm specific options.
     * 
     */
    private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSourceHelm helm;
    /**
     * @return Kustomize specific options.
     * 
     */
    private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSourceKustomize kustomize;
    /**
     * @return Directory path within the repository. Only valid for applications sourced from Git.
     * 
     */
    private @Nullable String path;
    /**
     * @return Config management plugin specific options.
     * 
     */
    private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSourcePlugin plugin;
    /**
     * @return Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     * 
     */
    private @Nullable String ref;
    /**
     * @return URL to the repository (Git or Helm) that contains the application manifests.
     * 
     */
    private @Nullable String repoUrl;
    /**
     * @return Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart&#39;s version.
     * 
     */
    private @Nullable String targetRevision;

    private GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSource() {}
    /**
     * @return Helm chart name. Must be specified for applications sourced from a Helm repo.
     * 
     */
    public Optional<String> chart() {
        return Optional.ofNullable(this.chart);
    }
    /**
     * @return Path/directory specific options.
     * 
     */
    public Optional<GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSourceDirectory> directory() {
        return Optional.ofNullable(this.directory);
    }
    /**
     * @return Helm specific options.
     * 
     */
    public Optional<GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSourceHelm> helm() {
        return Optional.ofNullable(this.helm);
    }
    /**
     * @return Kustomize specific options.
     * 
     */
    public Optional<GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSourceKustomize> kustomize() {
        return Optional.ofNullable(this.kustomize);
    }
    /**
     * @return Directory path within the repository. Only valid for applications sourced from Git.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return Config management plugin specific options.
     * 
     */
    public Optional<GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSourcePlugin> plugin() {
        return Optional.ofNullable(this.plugin);
    }
    /**
     * @return Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     * 
     */
    public Optional<String> ref() {
        return Optional.ofNullable(this.ref);
    }
    /**
     * @return URL to the repository (Git or Helm) that contains the application manifests.
     * 
     */
    public Optional<String> repoUrl() {
        return Optional.ofNullable(this.repoUrl);
    }
    /**
     * @return Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart&#39;s version.
     * 
     */
    public Optional<String> targetRevision() {
        return Optional.ofNullable(this.targetRevision);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String chart;
        private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSourceDirectory directory;
        private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSourceHelm helm;
        private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSourceKustomize kustomize;
        private @Nullable String path;
        private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSourcePlugin plugin;
        private @Nullable String ref;
        private @Nullable String repoUrl;
        private @Nullable String targetRevision;
        public Builder() {}
        public Builder(GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chart = defaults.chart;
    	      this.directory = defaults.directory;
    	      this.helm = defaults.helm;
    	      this.kustomize = defaults.kustomize;
    	      this.path = defaults.path;
    	      this.plugin = defaults.plugin;
    	      this.ref = defaults.ref;
    	      this.repoUrl = defaults.repoUrl;
    	      this.targetRevision = defaults.targetRevision;
        }

        @CustomType.Setter
        public Builder chart(@Nullable String chart) {

            this.chart = chart;
            return this;
        }
        @CustomType.Setter
        public Builder directory(@Nullable GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSourceDirectory directory) {

            this.directory = directory;
            return this;
        }
        @CustomType.Setter
        public Builder helm(@Nullable GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSourceHelm helm) {

            this.helm = helm;
            return this;
        }
        @CustomType.Setter
        public Builder kustomize(@Nullable GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSourceKustomize kustomize) {

            this.kustomize = kustomize;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder plugin(@Nullable GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSourcePlugin plugin) {

            this.plugin = plugin;
            return this;
        }
        @CustomType.Setter
        public Builder ref(@Nullable String ref) {

            this.ref = ref;
            return this;
        }
        @CustomType.Setter
        public Builder repoUrl(@Nullable String repoUrl) {

            this.repoUrl = repoUrl;
            return this;
        }
        @CustomType.Setter
        public Builder targetRevision(@Nullable String targetRevision) {

            this.targetRevision = targetRevision;
            return this;
        }
        public GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSource build() {
            final var _resultValue = new GitopsApplicationsetApplicationsetSpecGeneratorClusterTemplateSpecSource();
            _resultValue.chart = chart;
            _resultValue.directory = directory;
            _resultValue.helm = helm;
            _resultValue.kustomize = kustomize;
            _resultValue.path = path;
            _resultValue.plugin = plugin;
            _resultValue.ref = ref;
            _resultValue.repoUrl = repoUrl;
            _resultValue.targetRevision = targetRevision;
            return _resultValue;
        }
    }
}
