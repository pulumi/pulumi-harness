// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.ServiceGitDetailsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceArgs Empty = new ServiceArgs();

    /**
     * Description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * to fetch resoled service yaml
     * 
     */
    @Import(name="fetchResolvedYaml")
    private @Nullable Output<Boolean> fetchResolvedYaml;

    /**
     * @return to fetch resoled service yaml
     * 
     */
    public Optional<Output<Boolean>> fetchResolvedYaml() {
        return Optional.ofNullable(this.fetchResolvedYaml);
    }

    /**
     * Enable this flag for force deletion of service
     * 
     */
    @Import(name="forceDelete")
    private @Nullable Output<Boolean> forceDelete;

    /**
     * @return Enable this flag for force deletion of service
     * 
     */
    public Optional<Output<Boolean>> forceDelete() {
        return Optional.ofNullable(this.forceDelete);
    }

    /**
     * Contains parameters related to Git Experience for remote entities
     * 
     */
    @Import(name="gitDetails")
    private @Nullable Output<ServiceGitDetailsArgs> gitDetails;

    /**
     * @return Contains parameters related to Git Experience for remote entities
     * 
     */
    public Optional<Output<ServiceGitDetailsArgs>> gitDetails() {
        return Optional.ofNullable(this.gitDetails);
    }

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * import service from git
     * 
     */
    @Import(name="importFromGit")
    private @Nullable Output<Boolean> importFromGit;

    /**
     * @return import service from git
     * 
     */
    public Optional<Output<Boolean>> importFromGit() {
        return Optional.ofNullable(this.importFromGit);
    }

    /**
     * force import service from remote even if same file path already exist
     * 
     */
    @Import(name="isForceImport")
    private @Nullable Output<Boolean> isForceImport;

    /**
     * @return force import service from remote even if same file path already exist
     * 
     */
    public Optional<Output<Boolean>> isForceImport() {
        return Optional.ofNullable(this.isForceImport);
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Tags to associate with the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags to associate with the resource.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Service YAML. In YAML, to reference an entity at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference an entity at the account scope, prefix &#39;account` to the expression: account.{identifier}. For eg, to reference a connector with identifier &#39;connectorId&#39; at the organization scope in a stage mention it as connectorRef: org.connectorId.
     * 
     */
    @Import(name="yaml")
    private @Nullable Output<String> yaml;

    /**
     * @return Service YAML. In YAML, to reference an entity at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference an entity at the account scope, prefix &#39;account` to the expression: account.{identifier}. For eg, to reference a connector with identifier &#39;connectorId&#39; at the organization scope in a stage mention it as connectorRef: org.connectorId.
     * 
     */
    public Optional<Output<String>> yaml() {
        return Optional.ofNullable(this.yaml);
    }

    private ServiceArgs() {}

    private ServiceArgs(ServiceArgs $) {
        this.description = $.description;
        this.fetchResolvedYaml = $.fetchResolvedYaml;
        this.forceDelete = $.forceDelete;
        this.gitDetails = $.gitDetails;
        this.identifier = $.identifier;
        this.importFromGit = $.importFromGit;
        this.isForceImport = $.isForceImport;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.tags = $.tags;
        this.yaml = $.yaml;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceArgs $;

        public Builder() {
            $ = new ServiceArgs();
        }

        public Builder(ServiceArgs defaults) {
            $ = new ServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param fetchResolvedYaml to fetch resoled service yaml
         * 
         * @return builder
         * 
         */
        public Builder fetchResolvedYaml(@Nullable Output<Boolean> fetchResolvedYaml) {
            $.fetchResolvedYaml = fetchResolvedYaml;
            return this;
        }

        /**
         * @param fetchResolvedYaml to fetch resoled service yaml
         * 
         * @return builder
         * 
         */
        public Builder fetchResolvedYaml(Boolean fetchResolvedYaml) {
            return fetchResolvedYaml(Output.of(fetchResolvedYaml));
        }

        /**
         * @param forceDelete Enable this flag for force deletion of service
         * 
         * @return builder
         * 
         */
        public Builder forceDelete(@Nullable Output<Boolean> forceDelete) {
            $.forceDelete = forceDelete;
            return this;
        }

        /**
         * @param forceDelete Enable this flag for force deletion of service
         * 
         * @return builder
         * 
         */
        public Builder forceDelete(Boolean forceDelete) {
            return forceDelete(Output.of(forceDelete));
        }

        /**
         * @param gitDetails Contains parameters related to Git Experience for remote entities
         * 
         * @return builder
         * 
         */
        public Builder gitDetails(@Nullable Output<ServiceGitDetailsArgs> gitDetails) {
            $.gitDetails = gitDetails;
            return this;
        }

        /**
         * @param gitDetails Contains parameters related to Git Experience for remote entities
         * 
         * @return builder
         * 
         */
        public Builder gitDetails(ServiceGitDetailsArgs gitDetails) {
            return gitDetails(Output.of(gitDetails));
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param importFromGit import service from git
         * 
         * @return builder
         * 
         */
        public Builder importFromGit(@Nullable Output<Boolean> importFromGit) {
            $.importFromGit = importFromGit;
            return this;
        }

        /**
         * @param importFromGit import service from git
         * 
         * @return builder
         * 
         */
        public Builder importFromGit(Boolean importFromGit) {
            return importFromGit(Output.of(importFromGit));
        }

        /**
         * @param isForceImport force import service from remote even if same file path already exist
         * 
         * @return builder
         * 
         */
        public Builder isForceImport(@Nullable Output<Boolean> isForceImport) {
            $.isForceImport = isForceImport;
            return this;
        }

        /**
         * @param isForceImport force import service from remote even if same file path already exist
         * 
         * @return builder
         * 
         */
        public Builder isForceImport(Boolean isForceImport) {
            return isForceImport(Output.of(isForceImport));
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param yaml Service YAML. In YAML, to reference an entity at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference an entity at the account scope, prefix &#39;account` to the expression: account.{identifier}. For eg, to reference a connector with identifier &#39;connectorId&#39; at the organization scope in a stage mention it as connectorRef: org.connectorId.
         * 
         * @return builder
         * 
         */
        public Builder yaml(@Nullable Output<String> yaml) {
            $.yaml = yaml;
            return this;
        }

        /**
         * @param yaml Service YAML. In YAML, to reference an entity at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference an entity at the account scope, prefix &#39;account` to the expression: account.{identifier}. For eg, to reference a connector with identifier &#39;connectorId&#39; at the organization scope in a stage mention it as connectorRef: org.connectorId.
         * 
         * @return builder
         * 
         */
        public Builder yaml(String yaml) {
            return yaml(Output.of(yaml));
        }

        public ServiceArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("ServiceArgs", "identifier");
            }
            return $;
        }
    }

}
