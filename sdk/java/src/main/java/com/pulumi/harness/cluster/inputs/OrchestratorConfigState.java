// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cluster.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.cluster.inputs.OrchestratorConfigBinpackingArgs;
import com.pulumi.harness.cluster.inputs.OrchestratorConfigDistributionArgs;
import com.pulumi.harness.cluster.inputs.OrchestratorConfigNodePreferencesArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrchestratorConfigState extends com.pulumi.resources.ResourceArgs {

    public static final OrchestratorConfigState Empty = new OrchestratorConfigState();

    /**
     * Binpacking preferences for Cluster Orchestrator
     * 
     */
    @Import(name="binpacking")
    private @Nullable Output<OrchestratorConfigBinpackingArgs> binpacking;

    /**
     * @return Binpacking preferences for Cluster Orchestrator
     * 
     */
    public Optional<Output<OrchestratorConfigBinpackingArgs>> binpacking() {
        return Optional.ofNullable(this.binpacking);
    }

    /**
     * Spot and Ondemand Distribution Preferences for workload replicas
     * 
     */
    @Import(name="distribution")
    private @Nullable Output<OrchestratorConfigDistributionArgs> distribution;

    /**
     * @return Spot and Ondemand Distribution Preferences for workload replicas
     * 
     */
    public Optional<Output<OrchestratorConfigDistributionArgs>> distribution() {
        return Optional.ofNullable(this.distribution);
    }

    /**
     * Node preferences for Cluster Orchestrator
     * 
     */
    @Import(name="nodePreferences")
    private @Nullable Output<OrchestratorConfigNodePreferencesArgs> nodePreferences;

    /**
     * @return Node preferences for Cluster Orchestrator
     * 
     */
    public Optional<Output<OrchestratorConfigNodePreferencesArgs>> nodePreferences() {
        return Optional.ofNullable(this.nodePreferences);
    }

    /**
     * ID of the Cluster Orchestrator Object
     * 
     */
    @Import(name="orchestratorId")
    private @Nullable Output<String> orchestratorId;

    /**
     * @return ID of the Cluster Orchestrator Object
     * 
     */
    public Optional<Output<String>> orchestratorId() {
        return Optional.ofNullable(this.orchestratorId);
    }

    private OrchestratorConfigState() {}

    private OrchestratorConfigState(OrchestratorConfigState $) {
        this.binpacking = $.binpacking;
        this.distribution = $.distribution;
        this.nodePreferences = $.nodePreferences;
        this.orchestratorId = $.orchestratorId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrchestratorConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrchestratorConfigState $;

        public Builder() {
            $ = new OrchestratorConfigState();
        }

        public Builder(OrchestratorConfigState defaults) {
            $ = new OrchestratorConfigState(Objects.requireNonNull(defaults));
        }

        /**
         * @param binpacking Binpacking preferences for Cluster Orchestrator
         * 
         * @return builder
         * 
         */
        public Builder binpacking(@Nullable Output<OrchestratorConfigBinpackingArgs> binpacking) {
            $.binpacking = binpacking;
            return this;
        }

        /**
         * @param binpacking Binpacking preferences for Cluster Orchestrator
         * 
         * @return builder
         * 
         */
        public Builder binpacking(OrchestratorConfigBinpackingArgs binpacking) {
            return binpacking(Output.of(binpacking));
        }

        /**
         * @param distribution Spot and Ondemand Distribution Preferences for workload replicas
         * 
         * @return builder
         * 
         */
        public Builder distribution(@Nullable Output<OrchestratorConfigDistributionArgs> distribution) {
            $.distribution = distribution;
            return this;
        }

        /**
         * @param distribution Spot and Ondemand Distribution Preferences for workload replicas
         * 
         * @return builder
         * 
         */
        public Builder distribution(OrchestratorConfigDistributionArgs distribution) {
            return distribution(Output.of(distribution));
        }

        /**
         * @param nodePreferences Node preferences for Cluster Orchestrator
         * 
         * @return builder
         * 
         */
        public Builder nodePreferences(@Nullable Output<OrchestratorConfigNodePreferencesArgs> nodePreferences) {
            $.nodePreferences = nodePreferences;
            return this;
        }

        /**
         * @param nodePreferences Node preferences for Cluster Orchestrator
         * 
         * @return builder
         * 
         */
        public Builder nodePreferences(OrchestratorConfigNodePreferencesArgs nodePreferences) {
            return nodePreferences(Output.of(nodePreferences));
        }

        /**
         * @param orchestratorId ID of the Cluster Orchestrator Object
         * 
         * @return builder
         * 
         */
        public Builder orchestratorId(@Nullable Output<String> orchestratorId) {
            $.orchestratorId = orchestratorId;
            return this;
        }

        /**
         * @param orchestratorId ID of the Cluster Orchestrator Object
         * 
         * @return builder
         * 
         */
        public Builder orchestratorId(String orchestratorId) {
            return orchestratorId(Output.of(orchestratorId));
        }

        public OrchestratorConfigState build() {
            return $;
        }
    }

}
