// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InfrastructureV2TolerationArgs extends com.pulumi.resources.ResourceArgs {

    public static final InfrastructureV2TolerationArgs Empty = new InfrastructureV2TolerationArgs();

    /**
     * Effect indicates the taint effect to match. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     * 
     */
    @Import(name="effect", required=true)
    private Output<String> effect;

    /**
     * @return Effect indicates the taint effect to match. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     * 
     */
    public Output<String> effect() {
        return this.effect;
    }

    /**
     * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * Operator represents a key&#39;s relationship to the value. Valid operators are Exists and Equal. Defaults to Equal.
     * 
     */
    @Import(name="operator", required=true)
    private Output<String> operator;

    /**
     * @return Operator represents a key&#39;s relationship to the value. Valid operators are Exists and Equal. Defaults to Equal.
     * 
     */
    public Output<String> operator() {
        return this.operator;
    }

    /**
     * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     * 
     */
    @Import(name="tolerationSeconds")
    private @Nullable Output<Integer> tolerationSeconds;

    /**
     * @return TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     * 
     */
    public Optional<Output<Integer>> tolerationSeconds() {
        return Optional.ofNullable(this.tolerationSeconds);
    }

    /**
     * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private InfrastructureV2TolerationArgs() {}

    private InfrastructureV2TolerationArgs(InfrastructureV2TolerationArgs $) {
        this.effect = $.effect;
        this.key = $.key;
        this.operator = $.operator;
        this.tolerationSeconds = $.tolerationSeconds;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InfrastructureV2TolerationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InfrastructureV2TolerationArgs $;

        public Builder() {
            $ = new InfrastructureV2TolerationArgs();
        }

        public Builder(InfrastructureV2TolerationArgs defaults) {
            $ = new InfrastructureV2TolerationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param effect Effect indicates the taint effect to match. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
         * 
         * @return builder
         * 
         */
        public Builder effect(Output<String> effect) {
            $.effect = effect;
            return this;
        }

        /**
         * @param effect Effect indicates the taint effect to match. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
         * 
         * @return builder
         * 
         */
        public Builder effect(String effect) {
            return effect(Output.of(effect));
        }

        /**
         * @param key Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param operator Operator represents a key&#39;s relationship to the value. Valid operators are Exists and Equal. Defaults to Equal.
         * 
         * @return builder
         * 
         */
        public Builder operator(Output<String> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator Operator represents a key&#39;s relationship to the value. Valid operators are Exists and Equal. Defaults to Equal.
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        /**
         * @param tolerationSeconds TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
         * 
         * @return builder
         * 
         */
        public Builder tolerationSeconds(@Nullable Output<Integer> tolerationSeconds) {
            $.tolerationSeconds = tolerationSeconds;
            return this;
        }

        /**
         * @param tolerationSeconds TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
         * 
         * @return builder
         * 
         */
        public Builder tolerationSeconds(Integer tolerationSeconds) {
            return tolerationSeconds(Output.of(tolerationSeconds));
        }

        /**
         * @param value Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public InfrastructureV2TolerationArgs build() {
            if ($.effect == null) {
                throw new MissingRequiredPropertyException("InfrastructureV2TolerationArgs", "effect");
            }
            if ($.key == null) {
                throw new MissingRequiredPropertyException("InfrastructureV2TolerationArgs", "key");
            }
            if ($.operator == null) {
                throw new MissingRequiredPropertyException("InfrastructureV2TolerationArgs", "operator");
            }
            return $;
        }
    }

}
