// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.SecretSshkeySshSshPasswordCredentialArgs;
import com.pulumi.harness.platform.inputs.SecretSshkeySshSshkeyPathCredentialArgs;
import com.pulumi.harness.platform.inputs.SecretSshkeySshSshkeyReferenceCredentialArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretSshkeySshArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretSshkeySshArgs Empty = new SecretSshkeySshArgs();

    /**
     * This specifies SSH credential type as Password, KeyPath or KeyReference
     * 
     */
    @Import(name="credentialType", required=true)
    private Output<String> credentialType;

    /**
     * @return This specifies SSH credential type as Password, KeyPath or KeyReference
     * 
     */
    public Output<String> credentialType() {
        return this.credentialType;
    }

    /**
     * SSH credential of type keyReference
     * 
     */
    @Import(name="sshPasswordCredential")
    private @Nullable Output<SecretSshkeySshSshPasswordCredentialArgs> sshPasswordCredential;

    /**
     * @return SSH credential of type keyReference
     * 
     */
    public Optional<Output<SecretSshkeySshSshPasswordCredentialArgs>> sshPasswordCredential() {
        return Optional.ofNullable(this.sshPasswordCredential);
    }

    /**
     * SSH credential of type keyPath
     * 
     */
    @Import(name="sshkeyPathCredential")
    private @Nullable Output<SecretSshkeySshSshkeyPathCredentialArgs> sshkeyPathCredential;

    /**
     * @return SSH credential of type keyPath
     * 
     */
    public Optional<Output<SecretSshkeySshSshkeyPathCredentialArgs>> sshkeyPathCredential() {
        return Optional.ofNullable(this.sshkeyPathCredential);
    }

    /**
     * SSH credential of type keyReference
     * 
     */
    @Import(name="sshkeyReferenceCredential")
    private @Nullable Output<SecretSshkeySshSshkeyReferenceCredentialArgs> sshkeyReferenceCredential;

    /**
     * @return SSH credential of type keyReference
     * 
     */
    public Optional<Output<SecretSshkeySshSshkeyReferenceCredentialArgs>> sshkeyReferenceCredential() {
        return Optional.ofNullable(this.sshkeyReferenceCredential);
    }

    private SecretSshkeySshArgs() {}

    private SecretSshkeySshArgs(SecretSshkeySshArgs $) {
        this.credentialType = $.credentialType;
        this.sshPasswordCredential = $.sshPasswordCredential;
        this.sshkeyPathCredential = $.sshkeyPathCredential;
        this.sshkeyReferenceCredential = $.sshkeyReferenceCredential;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretSshkeySshArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretSshkeySshArgs $;

        public Builder() {
            $ = new SecretSshkeySshArgs();
        }

        public Builder(SecretSshkeySshArgs defaults) {
            $ = new SecretSshkeySshArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param credentialType This specifies SSH credential type as Password, KeyPath or KeyReference
         * 
         * @return builder
         * 
         */
        public Builder credentialType(Output<String> credentialType) {
            $.credentialType = credentialType;
            return this;
        }

        /**
         * @param credentialType This specifies SSH credential type as Password, KeyPath or KeyReference
         * 
         * @return builder
         * 
         */
        public Builder credentialType(String credentialType) {
            return credentialType(Output.of(credentialType));
        }

        /**
         * @param sshPasswordCredential SSH credential of type keyReference
         * 
         * @return builder
         * 
         */
        public Builder sshPasswordCredential(@Nullable Output<SecretSshkeySshSshPasswordCredentialArgs> sshPasswordCredential) {
            $.sshPasswordCredential = sshPasswordCredential;
            return this;
        }

        /**
         * @param sshPasswordCredential SSH credential of type keyReference
         * 
         * @return builder
         * 
         */
        public Builder sshPasswordCredential(SecretSshkeySshSshPasswordCredentialArgs sshPasswordCredential) {
            return sshPasswordCredential(Output.of(sshPasswordCredential));
        }

        /**
         * @param sshkeyPathCredential SSH credential of type keyPath
         * 
         * @return builder
         * 
         */
        public Builder sshkeyPathCredential(@Nullable Output<SecretSshkeySshSshkeyPathCredentialArgs> sshkeyPathCredential) {
            $.sshkeyPathCredential = sshkeyPathCredential;
            return this;
        }

        /**
         * @param sshkeyPathCredential SSH credential of type keyPath
         * 
         * @return builder
         * 
         */
        public Builder sshkeyPathCredential(SecretSshkeySshSshkeyPathCredentialArgs sshkeyPathCredential) {
            return sshkeyPathCredential(Output.of(sshkeyPathCredential));
        }

        /**
         * @param sshkeyReferenceCredential SSH credential of type keyReference
         * 
         * @return builder
         * 
         */
        public Builder sshkeyReferenceCredential(@Nullable Output<SecretSshkeySshSshkeyReferenceCredentialArgs> sshkeyReferenceCredential) {
            $.sshkeyReferenceCredential = sshkeyReferenceCredential;
            return this;
        }

        /**
         * @param sshkeyReferenceCredential SSH credential of type keyReference
         * 
         * @return builder
         * 
         */
        public Builder sshkeyReferenceCredential(SecretSshkeySshSshkeyReferenceCredentialArgs sshkeyReferenceCredential) {
            return sshkeyReferenceCredential(Output.of(sshkeyReferenceCredential));
        }

        public SecretSshkeySshArgs build() {
            if ($.credentialType == null) {
                throw new MissingRequiredPropertyException("SecretSshkeySshArgs", "credentialType");
            }
            return $;
        }
    }

}
