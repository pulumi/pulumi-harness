// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.chaos.inputs.GetHubArgs;
import com.pulumi.harness.chaos.inputs.GetHubPlainArgs;
import com.pulumi.harness.chaos.inputs.GetImageRegistryArgs;
import com.pulumi.harness.chaos.inputs.GetImageRegistryPlainArgs;
import com.pulumi.harness.chaos.inputs.GetInfrastructureV2Args;
import com.pulumi.harness.chaos.inputs.GetInfrastructureV2PlainArgs;
import com.pulumi.harness.chaos.inputs.GetSecurityGovernanceConditionArgs;
import com.pulumi.harness.chaos.inputs.GetSecurityGovernanceConditionPlainArgs;
import com.pulumi.harness.chaos.inputs.GetSecurityGovernanceRuleArgs;
import com.pulumi.harness.chaos.inputs.GetSecurityGovernanceRulePlainArgs;
import com.pulumi.harness.chaos.outputs.GetHubResult;
import com.pulumi.harness.chaos.outputs.GetImageRegistryResult;
import com.pulumi.harness.chaos.outputs.GetInfrastructureV2Result;
import com.pulumi.harness.chaos.outputs.GetSecurityGovernanceConditionResult;
import com.pulumi.harness.chaos.outputs.GetSecurityGovernanceRuleResult;
import java.util.concurrent.CompletableFuture;

public final class ChaosFunctions {
    /**
     * Data source for retrieving a Harness Chaos Hub
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetHubArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ChaosFunctions.getHub(GetHubArgs.builder()
     *             .name("<name>")
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetHubResult> getHub(GetHubArgs args) {
        return getHub(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Chaos Hub
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetHubArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ChaosFunctions.getHub(GetHubArgs.builder()
     *             .name("<name>")
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetHubResult> getHubPlain(GetHubPlainArgs args) {
        return getHubPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Chaos Hub
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetHubArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ChaosFunctions.getHub(GetHubArgs.builder()
     *             .name("<name>")
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetHubResult> getHub(GetHubArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:chaos/getHub:getHub", TypeShape.of(GetHubResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Chaos Hub
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetHubArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ChaosFunctions.getHub(GetHubArgs.builder()
     *             .name("<name>")
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetHubResult> getHub(GetHubArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:chaos/getHub:getHub", TypeShape.of(GetHubResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Chaos Hub
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetHubArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ChaosFunctions.getHub(GetHubArgs.builder()
     *             .name("<name>")
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetHubResult> getHubPlain(GetHubPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:chaos/getHub:getHub", TypeShape.of(GetHubResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Chaos Image Registry and checking override status
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetImageRegistryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Data source to verify the registry
     *         final var example = ChaosFunctions.getImageRegistry(GetImageRegistryArgs.builder()
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *         // Example of checking override status
     *         final var overrideCheck = ChaosFunctions.getImageRegistry(GetImageRegistryArgs.builder()
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .checkOverride(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetImageRegistryResult> getImageRegistry() {
        return getImageRegistry(GetImageRegistryArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Chaos Image Registry and checking override status
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetImageRegistryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Data source to verify the registry
     *         final var example = ChaosFunctions.getImageRegistry(GetImageRegistryArgs.builder()
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *         // Example of checking override status
     *         final var overrideCheck = ChaosFunctions.getImageRegistry(GetImageRegistryArgs.builder()
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .checkOverride(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetImageRegistryResult> getImageRegistryPlain() {
        return getImageRegistryPlain(GetImageRegistryPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Chaos Image Registry and checking override status
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetImageRegistryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Data source to verify the registry
     *         final var example = ChaosFunctions.getImageRegistry(GetImageRegistryArgs.builder()
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *         // Example of checking override status
     *         final var overrideCheck = ChaosFunctions.getImageRegistry(GetImageRegistryArgs.builder()
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .checkOverride(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetImageRegistryResult> getImageRegistry(GetImageRegistryArgs args) {
        return getImageRegistry(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Chaos Image Registry and checking override status
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetImageRegistryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Data source to verify the registry
     *         final var example = ChaosFunctions.getImageRegistry(GetImageRegistryArgs.builder()
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *         // Example of checking override status
     *         final var overrideCheck = ChaosFunctions.getImageRegistry(GetImageRegistryArgs.builder()
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .checkOverride(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetImageRegistryResult> getImageRegistryPlain(GetImageRegistryPlainArgs args) {
        return getImageRegistryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Chaos Image Registry and checking override status
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetImageRegistryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Data source to verify the registry
     *         final var example = ChaosFunctions.getImageRegistry(GetImageRegistryArgs.builder()
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *         // Example of checking override status
     *         final var overrideCheck = ChaosFunctions.getImageRegistry(GetImageRegistryArgs.builder()
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .checkOverride(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetImageRegistryResult> getImageRegistry(GetImageRegistryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:chaos/getImageRegistry:getImageRegistry", TypeShape.of(GetImageRegistryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Chaos Image Registry and checking override status
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetImageRegistryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Data source to verify the registry
     *         final var example = ChaosFunctions.getImageRegistry(GetImageRegistryArgs.builder()
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *         // Example of checking override status
     *         final var overrideCheck = ChaosFunctions.getImageRegistry(GetImageRegistryArgs.builder()
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .checkOverride(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetImageRegistryResult> getImageRegistry(GetImageRegistryArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:chaos/getImageRegistry:getImageRegistry", TypeShape.of(GetImageRegistryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Chaos Image Registry and checking override status
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetImageRegistryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Data source to verify the registry
     *         final var example = ChaosFunctions.getImageRegistry(GetImageRegistryArgs.builder()
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *         // Example of checking override status
     *         final var overrideCheck = ChaosFunctions.getImageRegistry(GetImageRegistryArgs.builder()
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .checkOverride(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetImageRegistryResult> getImageRegistryPlain(GetImageRegistryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:chaos/getImageRegistry:getImageRegistry", TypeShape.of(GetImageRegistryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Chaos Infrastructure V2.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.service.ServiceFunctions;
     * import com.pulumi.harness.service.inputs.GetDiscoveryAgentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Data source to fetch a specific agent by name
     *         final var byName = ServiceFunctions.getDiscoveryAgent(GetDiscoveryAgentArgs.builder()
     *             .name("example-agent")
     *             .orgIdentifier(orgIdentifier)
     *             .projectIdentifier(projectIdentifier)
     *             .environmentIdentifier(environmentIdentifier)
     *             .build());
     * 
     *         ctx.export("agentDetailsByName", byName);
     *         // Data source to fetch a specific agent by identity
     *         final var byIdentity = ServiceFunctions.getDiscoveryAgent(GetDiscoveryAgentArgs.builder()
     *             .identity("example-infra")
     *             .orgIdentifier(orgIdentifier)
     *             .projectIdentifier(projectIdentifier)
     *             .environmentIdentifier(environmentIdentifier)
     *             .build());
     * 
     *         ctx.export("agentDetailsByIdentity", byIdentity);
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInfrastructureV2Result> getInfrastructureV2(GetInfrastructureV2Args args) {
        return getInfrastructureV2(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Chaos Infrastructure V2.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.service.ServiceFunctions;
     * import com.pulumi.harness.service.inputs.GetDiscoveryAgentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Data source to fetch a specific agent by name
     *         final var byName = ServiceFunctions.getDiscoveryAgent(GetDiscoveryAgentArgs.builder()
     *             .name("example-agent")
     *             .orgIdentifier(orgIdentifier)
     *             .projectIdentifier(projectIdentifier)
     *             .environmentIdentifier(environmentIdentifier)
     *             .build());
     * 
     *         ctx.export("agentDetailsByName", byName);
     *         // Data source to fetch a specific agent by identity
     *         final var byIdentity = ServiceFunctions.getDiscoveryAgent(GetDiscoveryAgentArgs.builder()
     *             .identity("example-infra")
     *             .orgIdentifier(orgIdentifier)
     *             .projectIdentifier(projectIdentifier)
     *             .environmentIdentifier(environmentIdentifier)
     *             .build());
     * 
     *         ctx.export("agentDetailsByIdentity", byIdentity);
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetInfrastructureV2Result> getInfrastructureV2Plain(GetInfrastructureV2PlainArgs args) {
        return getInfrastructureV2Plain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Chaos Infrastructure V2.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.service.ServiceFunctions;
     * import com.pulumi.harness.service.inputs.GetDiscoveryAgentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Data source to fetch a specific agent by name
     *         final var byName = ServiceFunctions.getDiscoveryAgent(GetDiscoveryAgentArgs.builder()
     *             .name("example-agent")
     *             .orgIdentifier(orgIdentifier)
     *             .projectIdentifier(projectIdentifier)
     *             .environmentIdentifier(environmentIdentifier)
     *             .build());
     * 
     *         ctx.export("agentDetailsByName", byName);
     *         // Data source to fetch a specific agent by identity
     *         final var byIdentity = ServiceFunctions.getDiscoveryAgent(GetDiscoveryAgentArgs.builder()
     *             .identity("example-infra")
     *             .orgIdentifier(orgIdentifier)
     *             .projectIdentifier(projectIdentifier)
     *             .environmentIdentifier(environmentIdentifier)
     *             .build());
     * 
     *         ctx.export("agentDetailsByIdentity", byIdentity);
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInfrastructureV2Result> getInfrastructureV2(GetInfrastructureV2Args args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:chaos/getInfrastructureV2:getInfrastructureV2", TypeShape.of(GetInfrastructureV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Chaos Infrastructure V2.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.service.ServiceFunctions;
     * import com.pulumi.harness.service.inputs.GetDiscoveryAgentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Data source to fetch a specific agent by name
     *         final var byName = ServiceFunctions.getDiscoveryAgent(GetDiscoveryAgentArgs.builder()
     *             .name("example-agent")
     *             .orgIdentifier(orgIdentifier)
     *             .projectIdentifier(projectIdentifier)
     *             .environmentIdentifier(environmentIdentifier)
     *             .build());
     * 
     *         ctx.export("agentDetailsByName", byName);
     *         // Data source to fetch a specific agent by identity
     *         final var byIdentity = ServiceFunctions.getDiscoveryAgent(GetDiscoveryAgentArgs.builder()
     *             .identity("example-infra")
     *             .orgIdentifier(orgIdentifier)
     *             .projectIdentifier(projectIdentifier)
     *             .environmentIdentifier(environmentIdentifier)
     *             .build());
     * 
     *         ctx.export("agentDetailsByIdentity", byIdentity);
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInfrastructureV2Result> getInfrastructureV2(GetInfrastructureV2Args args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:chaos/getInfrastructureV2:getInfrastructureV2", TypeShape.of(GetInfrastructureV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Chaos Infrastructure V2.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.service.ServiceFunctions;
     * import com.pulumi.harness.service.inputs.GetDiscoveryAgentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Data source to fetch a specific agent by name
     *         final var byName = ServiceFunctions.getDiscoveryAgent(GetDiscoveryAgentArgs.builder()
     *             .name("example-agent")
     *             .orgIdentifier(orgIdentifier)
     *             .projectIdentifier(projectIdentifier)
     *             .environmentIdentifier(environmentIdentifier)
     *             .build());
     * 
     *         ctx.export("agentDetailsByName", byName);
     *         // Data source to fetch a specific agent by identity
     *         final var byIdentity = ServiceFunctions.getDiscoveryAgent(GetDiscoveryAgentArgs.builder()
     *             .identity("example-infra")
     *             .orgIdentifier(orgIdentifier)
     *             .projectIdentifier(projectIdentifier)
     *             .environmentIdentifier(environmentIdentifier)
     *             .build());
     * 
     *         ctx.export("agentDetailsByIdentity", byIdentity);
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetInfrastructureV2Result> getInfrastructureV2Plain(GetInfrastructureV2PlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:chaos/getInfrastructureV2:getInfrastructureV2", TypeShape.of(GetInfrastructureV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Chaos Security Governance Condition
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetSecurityGovernanceConditionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Example of looking up a security governance condition by name
     *         final var byName = ChaosFunctions.getSecurityGovernanceCondition(GetSecurityGovernanceConditionArgs.builder()
     *             .orgId(orgId)
     *             .projectId(projectId)
     *             .name("k8s-security-condition")
     *             .build());
     * 
     *         // Example of looking up a security governance condition by ID
     *         final var byId = ChaosFunctions.getSecurityGovernanceCondition(GetSecurityGovernanceConditionArgs.builder()
     *             .orgId(orgId)
     *             .projectId(projectId)
     *             .id("<condition_id>")
     *             .build());
     * 
     *         ctx.export("securityGovernanceConditionByName", byName);
     *         ctx.export("securityGovernanceConditionById", byId);
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecurityGovernanceConditionResult> getSecurityGovernanceCondition() {
        return getSecurityGovernanceCondition(GetSecurityGovernanceConditionArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Chaos Security Governance Condition
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetSecurityGovernanceConditionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Example of looking up a security governance condition by name
     *         final var byName = ChaosFunctions.getSecurityGovernanceCondition(GetSecurityGovernanceConditionArgs.builder()
     *             .orgId(orgId)
     *             .projectId(projectId)
     *             .name("k8s-security-condition")
     *             .build());
     * 
     *         // Example of looking up a security governance condition by ID
     *         final var byId = ChaosFunctions.getSecurityGovernanceCondition(GetSecurityGovernanceConditionArgs.builder()
     *             .orgId(orgId)
     *             .projectId(projectId)
     *             .id("<condition_id>")
     *             .build());
     * 
     *         ctx.export("securityGovernanceConditionByName", byName);
     *         ctx.export("securityGovernanceConditionById", byId);
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSecurityGovernanceConditionResult> getSecurityGovernanceConditionPlain() {
        return getSecurityGovernanceConditionPlain(GetSecurityGovernanceConditionPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Chaos Security Governance Condition
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetSecurityGovernanceConditionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Example of looking up a security governance condition by name
     *         final var byName = ChaosFunctions.getSecurityGovernanceCondition(GetSecurityGovernanceConditionArgs.builder()
     *             .orgId(orgId)
     *             .projectId(projectId)
     *             .name("k8s-security-condition")
     *             .build());
     * 
     *         // Example of looking up a security governance condition by ID
     *         final var byId = ChaosFunctions.getSecurityGovernanceCondition(GetSecurityGovernanceConditionArgs.builder()
     *             .orgId(orgId)
     *             .projectId(projectId)
     *             .id("<condition_id>")
     *             .build());
     * 
     *         ctx.export("securityGovernanceConditionByName", byName);
     *         ctx.export("securityGovernanceConditionById", byId);
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecurityGovernanceConditionResult> getSecurityGovernanceCondition(GetSecurityGovernanceConditionArgs args) {
        return getSecurityGovernanceCondition(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Chaos Security Governance Condition
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetSecurityGovernanceConditionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Example of looking up a security governance condition by name
     *         final var byName = ChaosFunctions.getSecurityGovernanceCondition(GetSecurityGovernanceConditionArgs.builder()
     *             .orgId(orgId)
     *             .projectId(projectId)
     *             .name("k8s-security-condition")
     *             .build());
     * 
     *         // Example of looking up a security governance condition by ID
     *         final var byId = ChaosFunctions.getSecurityGovernanceCondition(GetSecurityGovernanceConditionArgs.builder()
     *             .orgId(orgId)
     *             .projectId(projectId)
     *             .id("<condition_id>")
     *             .build());
     * 
     *         ctx.export("securityGovernanceConditionByName", byName);
     *         ctx.export("securityGovernanceConditionById", byId);
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSecurityGovernanceConditionResult> getSecurityGovernanceConditionPlain(GetSecurityGovernanceConditionPlainArgs args) {
        return getSecurityGovernanceConditionPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Chaos Security Governance Condition
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetSecurityGovernanceConditionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Example of looking up a security governance condition by name
     *         final var byName = ChaosFunctions.getSecurityGovernanceCondition(GetSecurityGovernanceConditionArgs.builder()
     *             .orgId(orgId)
     *             .projectId(projectId)
     *             .name("k8s-security-condition")
     *             .build());
     * 
     *         // Example of looking up a security governance condition by ID
     *         final var byId = ChaosFunctions.getSecurityGovernanceCondition(GetSecurityGovernanceConditionArgs.builder()
     *             .orgId(orgId)
     *             .projectId(projectId)
     *             .id("<condition_id>")
     *             .build());
     * 
     *         ctx.export("securityGovernanceConditionByName", byName);
     *         ctx.export("securityGovernanceConditionById", byId);
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecurityGovernanceConditionResult> getSecurityGovernanceCondition(GetSecurityGovernanceConditionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:chaos/getSecurityGovernanceCondition:getSecurityGovernanceCondition", TypeShape.of(GetSecurityGovernanceConditionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Chaos Security Governance Condition
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetSecurityGovernanceConditionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Example of looking up a security governance condition by name
     *         final var byName = ChaosFunctions.getSecurityGovernanceCondition(GetSecurityGovernanceConditionArgs.builder()
     *             .orgId(orgId)
     *             .projectId(projectId)
     *             .name("k8s-security-condition")
     *             .build());
     * 
     *         // Example of looking up a security governance condition by ID
     *         final var byId = ChaosFunctions.getSecurityGovernanceCondition(GetSecurityGovernanceConditionArgs.builder()
     *             .orgId(orgId)
     *             .projectId(projectId)
     *             .id("<condition_id>")
     *             .build());
     * 
     *         ctx.export("securityGovernanceConditionByName", byName);
     *         ctx.export("securityGovernanceConditionById", byId);
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecurityGovernanceConditionResult> getSecurityGovernanceCondition(GetSecurityGovernanceConditionArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:chaos/getSecurityGovernanceCondition:getSecurityGovernanceCondition", TypeShape.of(GetSecurityGovernanceConditionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Chaos Security Governance Condition
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetSecurityGovernanceConditionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Example of looking up a security governance condition by name
     *         final var byName = ChaosFunctions.getSecurityGovernanceCondition(GetSecurityGovernanceConditionArgs.builder()
     *             .orgId(orgId)
     *             .projectId(projectId)
     *             .name("k8s-security-condition")
     *             .build());
     * 
     *         // Example of looking up a security governance condition by ID
     *         final var byId = ChaosFunctions.getSecurityGovernanceCondition(GetSecurityGovernanceConditionArgs.builder()
     *             .orgId(orgId)
     *             .projectId(projectId)
     *             .id("<condition_id>")
     *             .build());
     * 
     *         ctx.export("securityGovernanceConditionByName", byName);
     *         ctx.export("securityGovernanceConditionById", byId);
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSecurityGovernanceConditionResult> getSecurityGovernanceConditionPlain(GetSecurityGovernanceConditionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:chaos/getSecurityGovernanceCondition:getSecurityGovernanceCondition", TypeShape.of(GetSecurityGovernanceConditionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Chaos Security Governance Rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetSecurityGovernanceRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Data sources to verify the rules
     *         final var example = ChaosFunctions.getSecurityGovernanceRule(GetSecurityGovernanceRuleArgs.builder()
     *             .id("<rule_id>")
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *         final var exampleLinux = ChaosFunctions.getSecurityGovernanceRule(GetSecurityGovernanceRuleArgs.builder()
     *             .id("<rule_id>")
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *         final var exampleWindows = ChaosFunctions.getSecurityGovernanceRule(GetSecurityGovernanceRuleArgs.builder()
     *             .id("<rule_id>")
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecurityGovernanceRuleResult> getSecurityGovernanceRule(GetSecurityGovernanceRuleArgs args) {
        return getSecurityGovernanceRule(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Chaos Security Governance Rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetSecurityGovernanceRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Data sources to verify the rules
     *         final var example = ChaosFunctions.getSecurityGovernanceRule(GetSecurityGovernanceRuleArgs.builder()
     *             .id("<rule_id>")
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *         final var exampleLinux = ChaosFunctions.getSecurityGovernanceRule(GetSecurityGovernanceRuleArgs.builder()
     *             .id("<rule_id>")
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *         final var exampleWindows = ChaosFunctions.getSecurityGovernanceRule(GetSecurityGovernanceRuleArgs.builder()
     *             .id("<rule_id>")
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSecurityGovernanceRuleResult> getSecurityGovernanceRulePlain(GetSecurityGovernanceRulePlainArgs args) {
        return getSecurityGovernanceRulePlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Chaos Security Governance Rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetSecurityGovernanceRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Data sources to verify the rules
     *         final var example = ChaosFunctions.getSecurityGovernanceRule(GetSecurityGovernanceRuleArgs.builder()
     *             .id("<rule_id>")
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *         final var exampleLinux = ChaosFunctions.getSecurityGovernanceRule(GetSecurityGovernanceRuleArgs.builder()
     *             .id("<rule_id>")
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *         final var exampleWindows = ChaosFunctions.getSecurityGovernanceRule(GetSecurityGovernanceRuleArgs.builder()
     *             .id("<rule_id>")
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecurityGovernanceRuleResult> getSecurityGovernanceRule(GetSecurityGovernanceRuleArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:chaos/getSecurityGovernanceRule:getSecurityGovernanceRule", TypeShape.of(GetSecurityGovernanceRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Chaos Security Governance Rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetSecurityGovernanceRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Data sources to verify the rules
     *         final var example = ChaosFunctions.getSecurityGovernanceRule(GetSecurityGovernanceRuleArgs.builder()
     *             .id("<rule_id>")
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *         final var exampleLinux = ChaosFunctions.getSecurityGovernanceRule(GetSecurityGovernanceRuleArgs.builder()
     *             .id("<rule_id>")
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *         final var exampleWindows = ChaosFunctions.getSecurityGovernanceRule(GetSecurityGovernanceRuleArgs.builder()
     *             .id("<rule_id>")
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecurityGovernanceRuleResult> getSecurityGovernanceRule(GetSecurityGovernanceRuleArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:chaos/getSecurityGovernanceRule:getSecurityGovernanceRule", TypeShape.of(GetSecurityGovernanceRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Chaos Security Governance Rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.chaos.ChaosFunctions;
     * import com.pulumi.harness.chaos.inputs.GetSecurityGovernanceRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Data sources to verify the rules
     *         final var example = ChaosFunctions.getSecurityGovernanceRule(GetSecurityGovernanceRuleArgs.builder()
     *             .id("<rule_id>")
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *         final var exampleLinux = ChaosFunctions.getSecurityGovernanceRule(GetSecurityGovernanceRuleArgs.builder()
     *             .id("<rule_id>")
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *         final var exampleWindows = ChaosFunctions.getSecurityGovernanceRule(GetSecurityGovernanceRuleArgs.builder()
     *             .id("<rule_id>")
     *             .orgId("<org_id>")
     *             .projectId("<project_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSecurityGovernanceRuleResult> getSecurityGovernanceRulePlain(GetSecurityGovernanceRulePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:chaos/getSecurityGovernanceRule:getSecurityGovernanceRule", TypeShape.of(GetSecurityGovernanceRuleResult.class), args, Utilities.withVersion(options));
    }
}
