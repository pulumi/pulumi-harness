// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImageRegistryPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetImageRegistryPlainArgs Empty = new GetImageRegistryPlainArgs();

    /**
     * Whether to check if override is allowed
     * 
     */
    @Import(name="checkOverride")
    private @Nullable Boolean checkOverride;

    /**
     * @return Whether to check if override is allowed
     * 
     */
    public Optional<Boolean> checkOverride() {
        return Optional.ofNullable(this.checkOverride);
    }

    /**
     * The infrastructure ID to set up the image registry
     * 
     */
    @Import(name="infraId")
    private @Nullable String infraId;

    /**
     * @return The infrastructure ID to set up the image registry
     * 
     */
    public Optional<String> infraId() {
        return Optional.ofNullable(this.infraId);
    }

    /**
     * The organization ID of the image registry
     * 
     */
    @Import(name="orgId")
    private @Nullable String orgId;

    /**
     * @return The organization ID of the image registry
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * The project ID of the image registry
     * 
     */
    @Import(name="projectId")
    private @Nullable String projectId;

    /**
     * @return The project ID of the image registry
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    private GetImageRegistryPlainArgs() {}

    private GetImageRegistryPlainArgs(GetImageRegistryPlainArgs $) {
        this.checkOverride = $.checkOverride;
        this.infraId = $.infraId;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImageRegistryPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImageRegistryPlainArgs $;

        public Builder() {
            $ = new GetImageRegistryPlainArgs();
        }

        public Builder(GetImageRegistryPlainArgs defaults) {
            $ = new GetImageRegistryPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkOverride Whether to check if override is allowed
         * 
         * @return builder
         * 
         */
        public Builder checkOverride(@Nullable Boolean checkOverride) {
            $.checkOverride = checkOverride;
            return this;
        }

        /**
         * @param infraId The infrastructure ID to set up the image registry
         * 
         * @return builder
         * 
         */
        public Builder infraId(@Nullable String infraId) {
            $.infraId = infraId;
            return this;
        }

        /**
         * @param orgId The organization ID of the image registry
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable String orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param projectId The project ID of the image registry
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable String projectId) {
            $.projectId = projectId;
            return this;
        }

        public GetImageRegistryPlainArgs build() {
            return $;
        }
    }

}
