// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsAppProjectProjectMetadataManagedFieldArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsAppProjectProjectMetadataManagedFieldArgs Empty = new GitopsAppProjectProjectMetadataManagedFieldArgs();

    /**
     * API version of the operation performed.
     * 
     */
    @Import(name="apiVersion")
    private @Nullable Output<String> apiVersion;

    /**
     * @return API version of the operation performed.
     * 
     */
    public Optional<Output<String>> apiVersion() {
        return Optional.ofNullable(this.apiVersion);
    }

    /**
     * Type of the fields in the GitOps project.
     * 
     */
    @Import(name="fieldsType")
    private @Nullable Output<String> fieldsType;

    /**
     * @return Type of the fields in the GitOps project.
     * 
     */
    public Optional<Output<String>> fieldsType() {
        return Optional.ofNullable(this.fieldsType);
    }

    /**
     * Raw fields associated with the GitOps project.
     * 
     */
    @Import(name="fieldsV1")
    private @Nullable Output<Map<String,String>> fieldsV1;

    /**
     * @return Raw fields associated with the GitOps project.
     * 
     */
    public Optional<Output<Map<String,String>>> fieldsV1() {
        return Optional.ofNullable(this.fieldsV1);
    }

    /**
     * Manager responsible for the operation.
     * 
     */
    @Import(name="manager")
    private @Nullable Output<String> manager;

    /**
     * @return Manager responsible for the operation.
     * 
     */
    public Optional<Output<String>> manager() {
        return Optional.ofNullable(this.manager);
    }

    /**
     * Operation type performed on the GitOps project.
     * 
     */
    @Import(name="operation")
    private @Nullable Output<String> operation;

    /**
     * @return Operation type performed on the GitOps project.
     * 
     */
    public Optional<Output<String>> operation() {
        return Optional.ofNullable(this.operation);
    }

    /**
     * Subresource associated with the GitOps project.
     * 
     */
    @Import(name="subresource")
    private @Nullable Output<String> subresource;

    /**
     * @return Subresource associated with the GitOps project.
     * 
     */
    public Optional<Output<String>> subresource() {
        return Optional.ofNullable(this.subresource);
    }

    /**
     * Timestamp of the operation.
     * 
     */
    @Import(name="time")
    private @Nullable Output<Map<String,String>> time;

    /**
     * @return Timestamp of the operation.
     * 
     */
    public Optional<Output<Map<String,String>>> time() {
        return Optional.ofNullable(this.time);
    }

    private GitopsAppProjectProjectMetadataManagedFieldArgs() {}

    private GitopsAppProjectProjectMetadataManagedFieldArgs(GitopsAppProjectProjectMetadataManagedFieldArgs $) {
        this.apiVersion = $.apiVersion;
        this.fieldsType = $.fieldsType;
        this.fieldsV1 = $.fieldsV1;
        this.manager = $.manager;
        this.operation = $.operation;
        this.subresource = $.subresource;
        this.time = $.time;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsAppProjectProjectMetadataManagedFieldArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsAppProjectProjectMetadataManagedFieldArgs $;

        public Builder() {
            $ = new GitopsAppProjectProjectMetadataManagedFieldArgs();
        }

        public Builder(GitopsAppProjectProjectMetadataManagedFieldArgs defaults) {
            $ = new GitopsAppProjectProjectMetadataManagedFieldArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiVersion API version of the operation performed.
         * 
         * @return builder
         * 
         */
        public Builder apiVersion(@Nullable Output<String> apiVersion) {
            $.apiVersion = apiVersion;
            return this;
        }

        /**
         * @param apiVersion API version of the operation performed.
         * 
         * @return builder
         * 
         */
        public Builder apiVersion(String apiVersion) {
            return apiVersion(Output.of(apiVersion));
        }

        /**
         * @param fieldsType Type of the fields in the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder fieldsType(@Nullable Output<String> fieldsType) {
            $.fieldsType = fieldsType;
            return this;
        }

        /**
         * @param fieldsType Type of the fields in the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder fieldsType(String fieldsType) {
            return fieldsType(Output.of(fieldsType));
        }

        /**
         * @param fieldsV1 Raw fields associated with the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder fieldsV1(@Nullable Output<Map<String,String>> fieldsV1) {
            $.fieldsV1 = fieldsV1;
            return this;
        }

        /**
         * @param fieldsV1 Raw fields associated with the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder fieldsV1(Map<String,String> fieldsV1) {
            return fieldsV1(Output.of(fieldsV1));
        }

        /**
         * @param manager Manager responsible for the operation.
         * 
         * @return builder
         * 
         */
        public Builder manager(@Nullable Output<String> manager) {
            $.manager = manager;
            return this;
        }

        /**
         * @param manager Manager responsible for the operation.
         * 
         * @return builder
         * 
         */
        public Builder manager(String manager) {
            return manager(Output.of(manager));
        }

        /**
         * @param operation Operation type performed on the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder operation(@Nullable Output<String> operation) {
            $.operation = operation;
            return this;
        }

        /**
         * @param operation Operation type performed on the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder operation(String operation) {
            return operation(Output.of(operation));
        }

        /**
         * @param subresource Subresource associated with the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder subresource(@Nullable Output<String> subresource) {
            $.subresource = subresource;
            return this;
        }

        /**
         * @param subresource Subresource associated with the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder subresource(String subresource) {
            return subresource(Output.of(subresource));
        }

        /**
         * @param time Timestamp of the operation.
         * 
         * @return builder
         * 
         */
        public Builder time(@Nullable Output<Map<String,String>> time) {
            $.time = time;
            return this;
        }

        /**
         * @param time Timestamp of the operation.
         * 
         * @return builder
         * 
         */
        public Builder time(Map<String,String> time) {
            return time(Output.of(time));
        }

        public GitopsAppProjectProjectMetadataManagedFieldArgs build() {
            return $;
        }
    }

}
