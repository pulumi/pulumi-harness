// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.governance;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.governance.inputs.GetRuleArgs;
import com.pulumi.harness.governance.inputs.GetRuleEnforcementArgs;
import com.pulumi.harness.governance.inputs.GetRuleEnforcementPlainArgs;
import com.pulumi.harness.governance.inputs.GetRulePlainArgs;
import com.pulumi.harness.governance.inputs.GetRuleSetArgs;
import com.pulumi.harness.governance.inputs.GetRuleSetPlainArgs;
import com.pulumi.harness.governance.outputs.GetRuleEnforcementResult;
import com.pulumi.harness.governance.outputs.GetRuleResult;
import com.pulumi.harness.governance.outputs.GetRuleSetResult;
import java.util.concurrent.CompletableFuture;

public final class GovernanceFunctions {
    /**
     * Datasource for looking up a rule.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.governance.GovernanceFunctions;
     * import com.pulumi.harness.governance.inputs.GetRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GovernanceFunctions.getRule(GetRuleArgs.builder()
     *             .ruleId("rule_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetRuleResult> getRule(GetRuleArgs args) {
        return getRule(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a rule.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.governance.GovernanceFunctions;
     * import com.pulumi.harness.governance.inputs.GetRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GovernanceFunctions.getRule(GetRuleArgs.builder()
     *             .ruleId("rule_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetRuleResult> getRulePlain(GetRulePlainArgs args) {
        return getRulePlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a rule.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.governance.GovernanceFunctions;
     * import com.pulumi.harness.governance.inputs.GetRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GovernanceFunctions.getRule(GetRuleArgs.builder()
     *             .ruleId("rule_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetRuleResult> getRule(GetRuleArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:governance/getRule:getRule", TypeShape.of(GetRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a rule.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.governance.GovernanceFunctions;
     * import com.pulumi.harness.governance.inputs.GetRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GovernanceFunctions.getRule(GetRuleArgs.builder()
     *             .ruleId("rule_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetRuleResult> getRule(GetRuleArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:governance/getRule:getRule", TypeShape.of(GetRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a rule.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.governance.GovernanceFunctions;
     * import com.pulumi.harness.governance.inputs.GetRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GovernanceFunctions.getRule(GetRuleArgs.builder()
     *             .ruleId("rule_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetRuleResult> getRulePlain(GetRulePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:governance/getRule:getRule", TypeShape.of(GetRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a rule enforcement.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.governance.GovernanceFunctions;
     * import com.pulumi.harness.governance.inputs.GetRuleEnforcementArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GovernanceFunctions.getRuleEnforcement(GetRuleEnforcementArgs.builder()
     *             .enforcementId("enforcement_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetRuleEnforcementResult> getRuleEnforcement(GetRuleEnforcementArgs args) {
        return getRuleEnforcement(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a rule enforcement.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.governance.GovernanceFunctions;
     * import com.pulumi.harness.governance.inputs.GetRuleEnforcementArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GovernanceFunctions.getRuleEnforcement(GetRuleEnforcementArgs.builder()
     *             .enforcementId("enforcement_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetRuleEnforcementResult> getRuleEnforcementPlain(GetRuleEnforcementPlainArgs args) {
        return getRuleEnforcementPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a rule enforcement.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.governance.GovernanceFunctions;
     * import com.pulumi.harness.governance.inputs.GetRuleEnforcementArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GovernanceFunctions.getRuleEnforcement(GetRuleEnforcementArgs.builder()
     *             .enforcementId("enforcement_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetRuleEnforcementResult> getRuleEnforcement(GetRuleEnforcementArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:governance/getRuleEnforcement:getRuleEnforcement", TypeShape.of(GetRuleEnforcementResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a rule enforcement.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.governance.GovernanceFunctions;
     * import com.pulumi.harness.governance.inputs.GetRuleEnforcementArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GovernanceFunctions.getRuleEnforcement(GetRuleEnforcementArgs.builder()
     *             .enforcementId("enforcement_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetRuleEnforcementResult> getRuleEnforcement(GetRuleEnforcementArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:governance/getRuleEnforcement:getRuleEnforcement", TypeShape.of(GetRuleEnforcementResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a rule enforcement.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.governance.GovernanceFunctions;
     * import com.pulumi.harness.governance.inputs.GetRuleEnforcementArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GovernanceFunctions.getRuleEnforcement(GetRuleEnforcementArgs.builder()
     *             .enforcementId("enforcement_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetRuleEnforcementResult> getRuleEnforcementPlain(GetRuleEnforcementPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:governance/getRuleEnforcement:getRuleEnforcement", TypeShape.of(GetRuleEnforcementResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a rule.
     * 
     */
    public static Output<GetRuleSetResult> getRuleSet(GetRuleSetArgs args) {
        return getRuleSet(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a rule.
     * 
     */
    public static CompletableFuture<GetRuleSetResult> getRuleSetPlain(GetRuleSetPlainArgs args) {
        return getRuleSetPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a rule.
     * 
     */
    public static Output<GetRuleSetResult> getRuleSet(GetRuleSetArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:governance/getRuleSet:getRuleSet", TypeShape.of(GetRuleSetResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a rule.
     * 
     */
    public static Output<GetRuleSetResult> getRuleSet(GetRuleSetArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:governance/getRuleSet:getRuleSet", TypeShape.of(GetRuleSetResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a rule.
     * 
     */
    public static CompletableFuture<GetRuleSetResult> getRuleSetPlain(GetRuleSetPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:governance/getRuleSet:getRuleSet", TypeShape.of(GetRuleSetResult.class), args, Utilities.withVersion(options));
    }
}
