// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GetTemplateGitDetails;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTemplatePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTemplatePlainArgs Empty = new GetTemplatePlainArgs();

    /**
     * Version Label for Template.
     * 
     */
    @Import(name="branchName")
    private @Nullable String branchName;

    /**
     * @return Version Label for Template.
     * 
     */
    public Optional<String> branchName() {
        return Optional.ofNullable(this.branchName);
    }

    /**
     * Defines child template type.
     * 
     */
    @Import(name="childType")
    private @Nullable String childType;

    /**
     * @return Defines child template type.
     * 
     */
    public Optional<String> childType() {
        return Optional.ofNullable(this.childType);
    }

    /**
     * Contains parameters related to creating an Entity for Git Experience.
     * 
     */
    @Import(name="gitDetails")
    private @Nullable GetTemplateGitDetails gitDetails;

    /**
     * @return Contains parameters related to creating an Entity for Git Experience.
     * 
     */
    public Optional<GetTemplateGitDetails> gitDetails() {
        return Optional.ofNullable(this.gitDetails);
    }

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier")
    private @Nullable String identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Optional<String> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * True if given version for template to be set as stable.
     * 
     */
    @Import(name="isStable")
    private @Nullable Boolean isStable;

    /**
     * @return True if given version for template to be set as stable.
     * 
     */
    public Optional<Boolean> isStable() {
        return Optional.ofNullable(this.isStable);
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable String orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable String projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Scope of template.
     * 
     */
    @Import(name="scope")
    private @Nullable String scope;

    /**
     * @return Scope of template.
     * 
     */
    public Optional<String> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Version Label for Template.
     * 
     */
    @Import(name="version")
    private @Nullable String version;

    /**
     * @return Version Label for Template.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    private GetTemplatePlainArgs() {}

    private GetTemplatePlainArgs(GetTemplatePlainArgs $) {
        this.branchName = $.branchName;
        this.childType = $.childType;
        this.gitDetails = $.gitDetails;
        this.identifier = $.identifier;
        this.isStable = $.isStable;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.scope = $.scope;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTemplatePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTemplatePlainArgs $;

        public Builder() {
            $ = new GetTemplatePlainArgs();
        }

        public Builder(GetTemplatePlainArgs defaults) {
            $ = new GetTemplatePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branchName Version Label for Template.
         * 
         * @return builder
         * 
         */
        public Builder branchName(@Nullable String branchName) {
            $.branchName = branchName;
            return this;
        }

        /**
         * @param childType Defines child template type.
         * 
         * @return builder
         * 
         */
        public Builder childType(@Nullable String childType) {
            $.childType = childType;
            return this;
        }

        /**
         * @param gitDetails Contains parameters related to creating an Entity for Git Experience.
         * 
         * @return builder
         * 
         */
        public Builder gitDetails(@Nullable GetTemplateGitDetails gitDetails) {
            $.gitDetails = gitDetails;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable String identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param isStable True if given version for template to be set as stable.
         * 
         * @return builder
         * 
         */
        public Builder isStable(@Nullable Boolean isStable) {
            $.isStable = isStable;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable String orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable String projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param scope Scope of template.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable String scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param version Version Label for Template.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable String version) {
            $.version = version;
            return this;
        }

        public GetTemplatePlainArgs build() {
            return $;
        }
    }

}
