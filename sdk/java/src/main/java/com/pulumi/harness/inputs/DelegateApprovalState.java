// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DelegateApprovalState extends com.pulumi.resources.ResourceArgs {

    public static final DelegateApprovalState Empty = new DelegateApprovalState();

    /**
     * Whether or not to approve the delegate.
     * 
     */
    @Import(name="approve")
    private @Nullable Output<Boolean> approve;

    /**
     * @return Whether or not to approve the delegate.
     * 
     */
    public Optional<Output<Boolean>> approve() {
        return Optional.ofNullable(this.approve);
    }

    /**
     * The id of the delegate.
     * 
     */
    @Import(name="delegateId")
    private @Nullable Output<String> delegateId;

    /**
     * @return The id of the delegate.
     * 
     */
    public Optional<Output<String>> delegateId() {
        return Optional.ofNullable(this.delegateId);
    }

    /**
     * The status of the delegate.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the delegate.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private DelegateApprovalState() {}

    private DelegateApprovalState(DelegateApprovalState $) {
        this.approve = $.approve;
        this.delegateId = $.delegateId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DelegateApprovalState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DelegateApprovalState $;

        public Builder() {
            $ = new DelegateApprovalState();
        }

        public Builder(DelegateApprovalState defaults) {
            $ = new DelegateApprovalState(Objects.requireNonNull(defaults));
        }

        /**
         * @param approve Whether or not to approve the delegate.
         * 
         * @return builder
         * 
         */
        public Builder approve(@Nullable Output<Boolean> approve) {
            $.approve = approve;
            return this;
        }

        /**
         * @param approve Whether or not to approve the delegate.
         * 
         * @return builder
         * 
         */
        public Builder approve(Boolean approve) {
            return approve(Output.of(approve));
        }

        /**
         * @param delegateId The id of the delegate.
         * 
         * @return builder
         * 
         */
        public Builder delegateId(@Nullable Output<String> delegateId) {
            $.delegateId = delegateId;
            return this;
        }

        /**
         * @param delegateId The id of the delegate.
         * 
         * @return builder
         * 
         */
        public Builder delegateId(String delegateId) {
            return delegateId(Output.of(delegateId));
        }

        /**
         * @param status The status of the delegate.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the delegate.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public DelegateApprovalState build() {
            return $;
        }
    }

}
