// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderSpecArgs Empty = new ProviderSpecArgs();

    /**
     * Client Id of the OAuth app to connect
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return Client Id of the OAuth app to connect
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * Client Secret Ref of the OAuth app to connect
     * 
     */
    @Import(name="clientSecretRef")
    private @Nullable Output<String> clientSecretRef;

    /**
     * @return Client Secret Ref of the OAuth app to connect
     * 
     */
    public Optional<Output<String>> clientSecretRef() {
        return Optional.ofNullable(this.clientSecretRef);
    }

    /**
     * Delegate selectors to fetch the access token
     * 
     */
    @Import(name="delegateSelectors")
    private @Nullable Output<List<String>> delegateSelectors;

    /**
     * @return Delegate selectors to fetch the access token
     * 
     */
    public Optional<Output<List<String>>> delegateSelectors() {
        return Optional.ofNullable(this.delegateSelectors);
    }

    /**
     * Host domain of the provider.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return Host domain of the provider.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * Secret Manager Ref to store the access/refresh tokens
     * 
     */
    @Import(name="secretManagerRef")
    private @Nullable Output<String> secretManagerRef;

    /**
     * @return Secret Manager Ref to store the access/refresh tokens
     * 
     */
    public Optional<Output<String>> secretManagerRef() {
        return Optional.ofNullable(this.secretManagerRef);
    }

    /**
     * The type of the provider entity.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the provider entity.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private ProviderSpecArgs() {}

    private ProviderSpecArgs(ProviderSpecArgs $) {
        this.clientId = $.clientId;
        this.clientSecretRef = $.clientSecretRef;
        this.delegateSelectors = $.delegateSelectors;
        this.domain = $.domain;
        this.secretManagerRef = $.secretManagerRef;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderSpecArgs $;

        public Builder() {
            $ = new ProviderSpecArgs();
        }

        public Builder(ProviderSpecArgs defaults) {
            $ = new ProviderSpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId Client Id of the OAuth app to connect
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId Client Id of the OAuth app to connect
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecretRef Client Secret Ref of the OAuth app to connect
         * 
         * @return builder
         * 
         */
        public Builder clientSecretRef(@Nullable Output<String> clientSecretRef) {
            $.clientSecretRef = clientSecretRef;
            return this;
        }

        /**
         * @param clientSecretRef Client Secret Ref of the OAuth app to connect
         * 
         * @return builder
         * 
         */
        public Builder clientSecretRef(String clientSecretRef) {
            return clientSecretRef(Output.of(clientSecretRef));
        }

        /**
         * @param delegateSelectors Delegate selectors to fetch the access token
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(@Nullable Output<List<String>> delegateSelectors) {
            $.delegateSelectors = delegateSelectors;
            return this;
        }

        /**
         * @param delegateSelectors Delegate selectors to fetch the access token
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(List<String> delegateSelectors) {
            return delegateSelectors(Output.of(delegateSelectors));
        }

        /**
         * @param delegateSelectors Delegate selectors to fetch the access token
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(String... delegateSelectors) {
            return delegateSelectors(List.of(delegateSelectors));
        }

        /**
         * @param domain Host domain of the provider.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain Host domain of the provider.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param secretManagerRef Secret Manager Ref to store the access/refresh tokens
         * 
         * @return builder
         * 
         */
        public Builder secretManagerRef(@Nullable Output<String> secretManagerRef) {
            $.secretManagerRef = secretManagerRef;
            return this;
        }

        /**
         * @param secretManagerRef Secret Manager Ref to store the access/refresh tokens
         * 
         * @return builder
         * 
         */
        public Builder secretManagerRef(String secretManagerRef) {
            return secretManagerRef(Output.of(secretManagerRef));
        }

        /**
         * @param type The type of the provider entity.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the provider entity.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ProviderSpecArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("ProviderSpecArgs", "type");
            }
            return $;
        }
    }

}
