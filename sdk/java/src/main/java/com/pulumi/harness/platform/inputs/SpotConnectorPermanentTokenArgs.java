// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SpotConnectorPermanentTokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final SpotConnectorPermanentTokenArgs Empty = new SpotConnectorPermanentTokenArgs();

    /**
     * Reference to the Harness secret containing the permanent api token. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    @Import(name="apiTokenRef", required=true)
    private Output<String> apiTokenRef;

    /**
     * @return Reference to the Harness secret containing the permanent api token. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public Output<String> apiTokenRef() {
        return this.apiTokenRef;
    }

    /**
     * Connect only using delegates with these tags.
     * 
     */
    @Import(name="delegateSelectors")
    private @Nullable Output<List<String>> delegateSelectors;

    /**
     * @return Connect only using delegates with these tags.
     * 
     */
    public Optional<Output<List<String>>> delegateSelectors() {
        return Optional.ofNullable(this.delegateSelectors);
    }

    /**
     * Execute on delegate or not.
     * 
     */
    @Import(name="executeOnDelegate")
    private @Nullable Output<Boolean> executeOnDelegate;

    /**
     * @return Execute on delegate or not.
     * 
     */
    public Optional<Output<Boolean>> executeOnDelegate() {
        return Optional.ofNullable(this.executeOnDelegate);
    }

    /**
     * Spot account id.
     * 
     */
    @Import(name="spotAccountId")
    private @Nullable Output<String> spotAccountId;

    /**
     * @return Spot account id.
     * 
     */
    public Optional<Output<String>> spotAccountId() {
        return Optional.ofNullable(this.spotAccountId);
    }

    /**
     * Reference to the Harness secret containing the spot account id. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    @Import(name="spotAccountIdRef")
    private @Nullable Output<String> spotAccountIdRef;

    /**
     * @return Reference to the Harness secret containing the spot account id. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public Optional<Output<String>> spotAccountIdRef() {
        return Optional.ofNullable(this.spotAccountIdRef);
    }

    private SpotConnectorPermanentTokenArgs() {}

    private SpotConnectorPermanentTokenArgs(SpotConnectorPermanentTokenArgs $) {
        this.apiTokenRef = $.apiTokenRef;
        this.delegateSelectors = $.delegateSelectors;
        this.executeOnDelegate = $.executeOnDelegate;
        this.spotAccountId = $.spotAccountId;
        this.spotAccountIdRef = $.spotAccountIdRef;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpotConnectorPermanentTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpotConnectorPermanentTokenArgs $;

        public Builder() {
            $ = new SpotConnectorPermanentTokenArgs();
        }

        public Builder(SpotConnectorPermanentTokenArgs defaults) {
            $ = new SpotConnectorPermanentTokenArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiTokenRef Reference to the Harness secret containing the permanent api token. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder apiTokenRef(Output<String> apiTokenRef) {
            $.apiTokenRef = apiTokenRef;
            return this;
        }

        /**
         * @param apiTokenRef Reference to the Harness secret containing the permanent api token. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder apiTokenRef(String apiTokenRef) {
            return apiTokenRef(Output.of(apiTokenRef));
        }

        /**
         * @param delegateSelectors Connect only using delegates with these tags.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(@Nullable Output<List<String>> delegateSelectors) {
            $.delegateSelectors = delegateSelectors;
            return this;
        }

        /**
         * @param delegateSelectors Connect only using delegates with these tags.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(List<String> delegateSelectors) {
            return delegateSelectors(Output.of(delegateSelectors));
        }

        /**
         * @param delegateSelectors Connect only using delegates with these tags.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(String... delegateSelectors) {
            return delegateSelectors(List.of(delegateSelectors));
        }

        /**
         * @param executeOnDelegate Execute on delegate or not.
         * 
         * @return builder
         * 
         */
        public Builder executeOnDelegate(@Nullable Output<Boolean> executeOnDelegate) {
            $.executeOnDelegate = executeOnDelegate;
            return this;
        }

        /**
         * @param executeOnDelegate Execute on delegate or not.
         * 
         * @return builder
         * 
         */
        public Builder executeOnDelegate(Boolean executeOnDelegate) {
            return executeOnDelegate(Output.of(executeOnDelegate));
        }

        /**
         * @param spotAccountId Spot account id.
         * 
         * @return builder
         * 
         */
        public Builder spotAccountId(@Nullable Output<String> spotAccountId) {
            $.spotAccountId = spotAccountId;
            return this;
        }

        /**
         * @param spotAccountId Spot account id.
         * 
         * @return builder
         * 
         */
        public Builder spotAccountId(String spotAccountId) {
            return spotAccountId(Output.of(spotAccountId));
        }

        /**
         * @param spotAccountIdRef Reference to the Harness secret containing the spot account id. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder spotAccountIdRef(@Nullable Output<String> spotAccountIdRef) {
            $.spotAccountIdRef = spotAccountIdRef;
            return this;
        }

        /**
         * @param spotAccountIdRef Reference to the Harness secret containing the spot account id. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder spotAccountIdRef(String spotAccountIdRef) {
            return spotAccountIdRef(Output.of(spotAccountIdRef));
        }

        public SpotConnectorPermanentTokenArgs build() {
            if ($.apiTokenRef == null) {
                throw new MissingRequiredPropertyException("SpotConnectorPermanentTokenArgs", "apiTokenRef");
            }
            return $;
        }
    }

}
