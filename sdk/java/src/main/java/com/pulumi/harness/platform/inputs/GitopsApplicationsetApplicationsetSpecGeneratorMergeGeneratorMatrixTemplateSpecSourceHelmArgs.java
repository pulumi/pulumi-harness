// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmFileParameterArgs;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmParameterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmArgs Empty = new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmArgs();

    /**
     * File parameters for the helm template.
     * 
     */
    @Import(name="fileParameters")
    private @Nullable Output<List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmFileParameterArgs>> fileParameters;

    /**
     * @return File parameters for the helm template.
     * 
     */
    public Optional<Output<List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmFileParameterArgs>>> fileParameters() {
        return Optional.ofNullable(this.fileParameters);
    }

    /**
     * Prevents &#39;helm template&#39; from failing when `valueFiles` do not exist locally by not appending them to &#39;helm template --values&#39;.
     * 
     */
    @Import(name="ignoreMissingValueFiles")
    private @Nullable Output<Boolean> ignoreMissingValueFiles;

    /**
     * @return Prevents &#39;helm template&#39; from failing when `valueFiles` do not exist locally by not appending them to &#39;helm template --values&#39;.
     * 
     */
    public Optional<Output<Boolean>> ignoreMissingValueFiles() {
        return Optional.ofNullable(this.ignoreMissingValueFiles);
    }

    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmParameterArgs>> parameters;

    /**
     * @return Helm parameters which are passed to the helm template command upon manifest generation.
     * 
     */
    public Optional<Output<List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmParameterArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * If true then adds &#39;--pass-credentials&#39; to Helm commands to pass credentials to all domains.
     * 
     */
    @Import(name="passCredentials")
    private @Nullable Output<Boolean> passCredentials;

    /**
     * @return If true then adds &#39;--pass-credentials&#39; to Helm commands to pass credentials to all domains.
     * 
     */
    public Optional<Output<Boolean>> passCredentials() {
        return Optional.ofNullable(this.passCredentials);
    }

    /**
     * Helm release name. If omitted it will use the application name.
     * 
     */
    @Import(name="releaseName")
    private @Nullable Output<String> releaseName;

    /**
     * @return Helm release name. If omitted it will use the application name.
     * 
     */
    public Optional<Output<String>> releaseName() {
        return Optional.ofNullable(this.releaseName);
    }

    /**
     * Whether to skip custom resource definition installation step (Helm&#39;s [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     * 
     */
    @Import(name="skipCrds")
    private @Nullable Output<Boolean> skipCrds;

    /**
     * @return Whether to skip custom resource definition installation step (Helm&#39;s [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     * 
     */
    public Optional<Output<Boolean>> skipCrds() {
        return Optional.ofNullable(this.skipCrds);
    }

    /**
     * Indicates if to skip schema validation during helm template. Corresponds to helm --skip-schema-validation
     * 
     */
    @Import(name="skipSchemaValidation")
    private @Nullable Output<Boolean> skipSchemaValidation;

    /**
     * @return Indicates if to skip schema validation during helm template. Corresponds to helm --skip-schema-validation
     * 
     */
    public Optional<Output<Boolean>> skipSchemaValidation() {
        return Optional.ofNullable(this.skipSchemaValidation);
    }

    /**
     * Indicates if to skip tests during helm template. Corresponds to helm --skip-tests
     * 
     */
    @Import(name="skipTests")
    private @Nullable Output<Boolean> skipTests;

    /**
     * @return Indicates if to skip tests during helm template. Corresponds to helm --skip-tests
     * 
     */
    public Optional<Output<Boolean>> skipTests() {
        return Optional.ofNullable(this.skipTests);
    }

    /**
     * List of Helm value files to use when generating a template.
     * 
     */
    @Import(name="valueFiles")
    private @Nullable Output<List<String>> valueFiles;

    /**
     * @return List of Helm value files to use when generating a template.
     * 
     */
    public Optional<Output<List<String>>> valueFiles() {
        return Optional.ofNullable(this.valueFiles);
    }

    /**
     * Helm values to be passed to &#39;helm template&#39;, typically defined as a block.
     * 
     */
    @Import(name="values")
    private @Nullable Output<String> values;

    /**
     * @return Helm values to be passed to &#39;helm template&#39;, typically defined as a block.
     * 
     */
    public Optional<Output<String>> values() {
        return Optional.ofNullable(this.values);
    }

    /**
     * Helm values to be passed to &#39;helm template&#39;, typically defined as a block.
     * 
     */
    @Import(name="valuesObject")
    private @Nullable Output<Map<String,String>> valuesObject;

    /**
     * @return Helm values to be passed to &#39;helm template&#39;, typically defined as a block.
     * 
     */
    public Optional<Output<Map<String,String>>> valuesObject() {
        return Optional.ofNullable(this.valuesObject);
    }

    /**
     * Helm version to use for templating (either &#34;2&#34; or &#34;3&#34;).
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return Helm version to use for templating (either &#34;2&#34; or &#34;3&#34;).
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmArgs() {}

    private GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmArgs(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmArgs $) {
        this.fileParameters = $.fileParameters;
        this.ignoreMissingValueFiles = $.ignoreMissingValueFiles;
        this.parameters = $.parameters;
        this.passCredentials = $.passCredentials;
        this.releaseName = $.releaseName;
        this.skipCrds = $.skipCrds;
        this.skipSchemaValidation = $.skipSchemaValidation;
        this.skipTests = $.skipTests;
        this.valueFiles = $.valueFiles;
        this.values = $.values;
        this.valuesObject = $.valuesObject;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmArgs $;

        public Builder() {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmArgs();
        }

        public Builder(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmArgs defaults) {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fileParameters File parameters for the helm template.
         * 
         * @return builder
         * 
         */
        public Builder fileParameters(@Nullable Output<List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmFileParameterArgs>> fileParameters) {
            $.fileParameters = fileParameters;
            return this;
        }

        /**
         * @param fileParameters File parameters for the helm template.
         * 
         * @return builder
         * 
         */
        public Builder fileParameters(List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmFileParameterArgs> fileParameters) {
            return fileParameters(Output.of(fileParameters));
        }

        /**
         * @param fileParameters File parameters for the helm template.
         * 
         * @return builder
         * 
         */
        public Builder fileParameters(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmFileParameterArgs... fileParameters) {
            return fileParameters(List.of(fileParameters));
        }

        /**
         * @param ignoreMissingValueFiles Prevents &#39;helm template&#39; from failing when `valueFiles` do not exist locally by not appending them to &#39;helm template --values&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ignoreMissingValueFiles(@Nullable Output<Boolean> ignoreMissingValueFiles) {
            $.ignoreMissingValueFiles = ignoreMissingValueFiles;
            return this;
        }

        /**
         * @param ignoreMissingValueFiles Prevents &#39;helm template&#39; from failing when `valueFiles` do not exist locally by not appending them to &#39;helm template --values&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ignoreMissingValueFiles(Boolean ignoreMissingValueFiles) {
            return ignoreMissingValueFiles(Output.of(ignoreMissingValueFiles));
        }

        /**
         * @param parameters Helm parameters which are passed to the helm template command upon manifest generation.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmParameterArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters Helm parameters which are passed to the helm template command upon manifest generation.
         * 
         * @return builder
         * 
         */
        public Builder parameters(List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmParameterArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param parameters Helm parameters which are passed to the helm template command upon manifest generation.
         * 
         * @return builder
         * 
         */
        public Builder parameters(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmParameterArgs... parameters) {
            return parameters(List.of(parameters));
        }

        /**
         * @param passCredentials If true then adds &#39;--pass-credentials&#39; to Helm commands to pass credentials to all domains.
         * 
         * @return builder
         * 
         */
        public Builder passCredentials(@Nullable Output<Boolean> passCredentials) {
            $.passCredentials = passCredentials;
            return this;
        }

        /**
         * @param passCredentials If true then adds &#39;--pass-credentials&#39; to Helm commands to pass credentials to all domains.
         * 
         * @return builder
         * 
         */
        public Builder passCredentials(Boolean passCredentials) {
            return passCredentials(Output.of(passCredentials));
        }

        /**
         * @param releaseName Helm release name. If omitted it will use the application name.
         * 
         * @return builder
         * 
         */
        public Builder releaseName(@Nullable Output<String> releaseName) {
            $.releaseName = releaseName;
            return this;
        }

        /**
         * @param releaseName Helm release name. If omitted it will use the application name.
         * 
         * @return builder
         * 
         */
        public Builder releaseName(String releaseName) {
            return releaseName(Output.of(releaseName));
        }

        /**
         * @param skipCrds Whether to skip custom resource definition installation step (Helm&#39;s [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
         * 
         * @return builder
         * 
         */
        public Builder skipCrds(@Nullable Output<Boolean> skipCrds) {
            $.skipCrds = skipCrds;
            return this;
        }

        /**
         * @param skipCrds Whether to skip custom resource definition installation step (Helm&#39;s [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
         * 
         * @return builder
         * 
         */
        public Builder skipCrds(Boolean skipCrds) {
            return skipCrds(Output.of(skipCrds));
        }

        /**
         * @param skipSchemaValidation Indicates if to skip schema validation during helm template. Corresponds to helm --skip-schema-validation
         * 
         * @return builder
         * 
         */
        public Builder skipSchemaValidation(@Nullable Output<Boolean> skipSchemaValidation) {
            $.skipSchemaValidation = skipSchemaValidation;
            return this;
        }

        /**
         * @param skipSchemaValidation Indicates if to skip schema validation during helm template. Corresponds to helm --skip-schema-validation
         * 
         * @return builder
         * 
         */
        public Builder skipSchemaValidation(Boolean skipSchemaValidation) {
            return skipSchemaValidation(Output.of(skipSchemaValidation));
        }

        /**
         * @param skipTests Indicates if to skip tests during helm template. Corresponds to helm --skip-tests
         * 
         * @return builder
         * 
         */
        public Builder skipTests(@Nullable Output<Boolean> skipTests) {
            $.skipTests = skipTests;
            return this;
        }

        /**
         * @param skipTests Indicates if to skip tests during helm template. Corresponds to helm --skip-tests
         * 
         * @return builder
         * 
         */
        public Builder skipTests(Boolean skipTests) {
            return skipTests(Output.of(skipTests));
        }

        /**
         * @param valueFiles List of Helm value files to use when generating a template.
         * 
         * @return builder
         * 
         */
        public Builder valueFiles(@Nullable Output<List<String>> valueFiles) {
            $.valueFiles = valueFiles;
            return this;
        }

        /**
         * @param valueFiles List of Helm value files to use when generating a template.
         * 
         * @return builder
         * 
         */
        public Builder valueFiles(List<String> valueFiles) {
            return valueFiles(Output.of(valueFiles));
        }

        /**
         * @param valueFiles List of Helm value files to use when generating a template.
         * 
         * @return builder
         * 
         */
        public Builder valueFiles(String... valueFiles) {
            return valueFiles(List.of(valueFiles));
        }

        /**
         * @param values Helm values to be passed to &#39;helm template&#39;, typically defined as a block.
         * 
         * @return builder
         * 
         */
        public Builder values(@Nullable Output<String> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values Helm values to be passed to &#39;helm template&#39;, typically defined as a block.
         * 
         * @return builder
         * 
         */
        public Builder values(String values) {
            return values(Output.of(values));
        }

        /**
         * @param valuesObject Helm values to be passed to &#39;helm template&#39;, typically defined as a block.
         * 
         * @return builder
         * 
         */
        public Builder valuesObject(@Nullable Output<Map<String,String>> valuesObject) {
            $.valuesObject = valuesObject;
            return this;
        }

        /**
         * @param valuesObject Helm values to be passed to &#39;helm template&#39;, typically defined as a block.
         * 
         * @return builder
         * 
         */
        public Builder valuesObject(Map<String,String> valuesObject) {
            return valuesObject(Output.of(valuesObject));
        }

        /**
         * @param version Helm version to use for templating (either &#34;2&#34; or &#34;3&#34;).
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Helm version to use for templating (either &#34;2&#34; or &#34;3&#34;).
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmArgs build() {
            return $;
        }
    }

}
