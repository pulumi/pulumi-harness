// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitoredServiceRequestDependencyArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitoredServiceRequestDependencyArgs Empty = new MonitoredServiceRequestDependencyArgs();

    /**
     * Dependency metadata for the monitored service.
     * 
     */
    @Import(name="dependencyMetadata")
    private @Nullable Output<String> dependencyMetadata;

    /**
     * @return Dependency metadata for the monitored service.
     * 
     */
    public Optional<Output<String>> dependencyMetadata() {
        return Optional.ofNullable(this.dependencyMetadata);
    }

    /**
     * Monitored service identifier of the dependency.
     * 
     */
    @Import(name="monitoredServiceIdentifier", required=true)
    private Output<String> monitoredServiceIdentifier;

    /**
     * @return Monitored service identifier of the dependency.
     * 
     */
    public Output<String> monitoredServiceIdentifier() {
        return this.monitoredServiceIdentifier;
    }

    /**
     * Type of the service dependency.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of the service dependency.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private MonitoredServiceRequestDependencyArgs() {}

    private MonitoredServiceRequestDependencyArgs(MonitoredServiceRequestDependencyArgs $) {
        this.dependencyMetadata = $.dependencyMetadata;
        this.monitoredServiceIdentifier = $.monitoredServiceIdentifier;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitoredServiceRequestDependencyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitoredServiceRequestDependencyArgs $;

        public Builder() {
            $ = new MonitoredServiceRequestDependencyArgs();
        }

        public Builder(MonitoredServiceRequestDependencyArgs defaults) {
            $ = new MonitoredServiceRequestDependencyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dependencyMetadata Dependency metadata for the monitored service.
         * 
         * @return builder
         * 
         */
        public Builder dependencyMetadata(@Nullable Output<String> dependencyMetadata) {
            $.dependencyMetadata = dependencyMetadata;
            return this;
        }

        /**
         * @param dependencyMetadata Dependency metadata for the monitored service.
         * 
         * @return builder
         * 
         */
        public Builder dependencyMetadata(String dependencyMetadata) {
            return dependencyMetadata(Output.of(dependencyMetadata));
        }

        /**
         * @param monitoredServiceIdentifier Monitored service identifier of the dependency.
         * 
         * @return builder
         * 
         */
        public Builder monitoredServiceIdentifier(Output<String> monitoredServiceIdentifier) {
            $.monitoredServiceIdentifier = monitoredServiceIdentifier;
            return this;
        }

        /**
         * @param monitoredServiceIdentifier Monitored service identifier of the dependency.
         * 
         * @return builder
         * 
         */
        public Builder monitoredServiceIdentifier(String monitoredServiceIdentifier) {
            return monitoredServiceIdentifier(Output.of(monitoredServiceIdentifier));
        }

        /**
         * @param type Type of the service dependency.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the service dependency.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public MonitoredServiceRequestDependencyArgs build() {
            if ($.monitoredServiceIdentifier == null) {
                throw new MissingRequiredPropertyException("MonitoredServiceRequestDependencyArgs", "monitoredServiceIdentifier");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("MonitoredServiceRequestDependencyArgs", "type");
            }
            return $;
        }
    }

}
