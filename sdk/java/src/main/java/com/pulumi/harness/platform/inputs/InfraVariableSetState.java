// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.InfraVariableSetConnectorArgs;
import com.pulumi.harness.platform.inputs.InfraVariableSetEnvironmentVariableArgs;
import com.pulumi.harness.platform.inputs.InfraVariableSetTerraformVariableArgs;
import com.pulumi.harness.platform.inputs.InfraVariableSetTerraformVariableFileArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InfraVariableSetState extends com.pulumi.resources.ResourceArgs {

    public static final InfraVariableSetState Empty = new InfraVariableSetState();

    /**
     * Provider connector configured on the variable set
     * 
     */
    @Import(name="connectors")
    private @Nullable Output<List<InfraVariableSetConnectorArgs>> connectors;

    /**
     * @return Provider connector configured on the variable set
     * 
     */
    public Optional<Output<List<InfraVariableSetConnectorArgs>>> connectors() {
        return Optional.ofNullable(this.connectors);
    }

    /**
     * Description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Environment variables configured on the variable set
     * 
     */
    @Import(name="environmentVariables")
    private @Nullable Output<List<InfraVariableSetEnvironmentVariableArgs>> environmentVariables;

    /**
     * @return Environment variables configured on the variable set
     * 
     */
    public Optional<Output<List<InfraVariableSetEnvironmentVariableArgs>>> environmentVariables() {
        return Optional.ofNullable(this.environmentVariables);
    }

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Tags to associate with the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags to associate with the resource.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="terraformVariableFiles")
    private @Nullable Output<List<InfraVariableSetTerraformVariableFileArgs>> terraformVariableFiles;

    public Optional<Output<List<InfraVariableSetTerraformVariableFileArgs>>> terraformVariableFiles() {
        return Optional.ofNullable(this.terraformVariableFiles);
    }

    @Import(name="terraformVariables")
    private @Nullable Output<List<InfraVariableSetTerraformVariableArgs>> terraformVariables;

    public Optional<Output<List<InfraVariableSetTerraformVariableArgs>>> terraformVariables() {
        return Optional.ofNullable(this.terraformVariables);
    }

    private InfraVariableSetState() {}

    private InfraVariableSetState(InfraVariableSetState $) {
        this.connectors = $.connectors;
        this.description = $.description;
        this.environmentVariables = $.environmentVariables;
        this.identifier = $.identifier;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.tags = $.tags;
        this.terraformVariableFiles = $.terraformVariableFiles;
        this.terraformVariables = $.terraformVariables;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InfraVariableSetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InfraVariableSetState $;

        public Builder() {
            $ = new InfraVariableSetState();
        }

        public Builder(InfraVariableSetState defaults) {
            $ = new InfraVariableSetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectors Provider connector configured on the variable set
         * 
         * @return builder
         * 
         */
        public Builder connectors(@Nullable Output<List<InfraVariableSetConnectorArgs>> connectors) {
            $.connectors = connectors;
            return this;
        }

        /**
         * @param connectors Provider connector configured on the variable set
         * 
         * @return builder
         * 
         */
        public Builder connectors(List<InfraVariableSetConnectorArgs> connectors) {
            return connectors(Output.of(connectors));
        }

        /**
         * @param connectors Provider connector configured on the variable set
         * 
         * @return builder
         * 
         */
        public Builder connectors(InfraVariableSetConnectorArgs... connectors) {
            return connectors(List.of(connectors));
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param environmentVariables Environment variables configured on the variable set
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(@Nullable Output<List<InfraVariableSetEnvironmentVariableArgs>> environmentVariables) {
            $.environmentVariables = environmentVariables;
            return this;
        }

        /**
         * @param environmentVariables Environment variables configured on the variable set
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(List<InfraVariableSetEnvironmentVariableArgs> environmentVariables) {
            return environmentVariables(Output.of(environmentVariables));
        }

        /**
         * @param environmentVariables Environment variables configured on the variable set
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(InfraVariableSetEnvironmentVariableArgs... environmentVariables) {
            return environmentVariables(List.of(environmentVariables));
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public Builder terraformVariableFiles(@Nullable Output<List<InfraVariableSetTerraformVariableFileArgs>> terraformVariableFiles) {
            $.terraformVariableFiles = terraformVariableFiles;
            return this;
        }

        public Builder terraformVariableFiles(List<InfraVariableSetTerraformVariableFileArgs> terraformVariableFiles) {
            return terraformVariableFiles(Output.of(terraformVariableFiles));
        }

        public Builder terraformVariableFiles(InfraVariableSetTerraformVariableFileArgs... terraformVariableFiles) {
            return terraformVariableFiles(List.of(terraformVariableFiles));
        }

        public Builder terraformVariables(@Nullable Output<List<InfraVariableSetTerraformVariableArgs>> terraformVariables) {
            $.terraformVariables = terraformVariables;
            return this;
        }

        public Builder terraformVariables(List<InfraVariableSetTerraformVariableArgs> terraformVariables) {
            return terraformVariables(Output.of(terraformVariables));
        }

        public Builder terraformVariables(InfraVariableSetTerraformVariableArgs... terraformVariables) {
            return terraformVariables(List.of(terraformVariables));
        }

        public InfraVariableSetState build() {
            return $;
        }
    }

}
