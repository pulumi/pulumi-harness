// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.MonitoredServiceRequestArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitoredServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitoredServiceArgs Empty = new MonitoredServiceArgs();

    /**
     * Identifier of the monitored service.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return Identifier of the monitored service.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * Identifier of the organization in which the monitored service is configured.
     * 
     */
    @Import(name="orgId", required=true)
    private Output<String> orgId;

    /**
     * @return Identifier of the organization in which the monitored service is configured.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * Identifier of the project in which the monitored service is configured.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return Identifier of the project in which the monitored service is configured.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Request for creating or updating a monitored service.
     * 
     */
    @Import(name="request")
    private @Nullable Output<MonitoredServiceRequestArgs> request;

    /**
     * @return Request for creating or updating a monitored service.
     * 
     */
    public Optional<Output<MonitoredServiceRequestArgs>> request() {
        return Optional.ofNullable(this.request);
    }

    private MonitoredServiceArgs() {}

    private MonitoredServiceArgs(MonitoredServiceArgs $) {
        this.identifier = $.identifier;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.request = $.request;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitoredServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitoredServiceArgs $;

        public Builder() {
            $ = new MonitoredServiceArgs();
        }

        public Builder(MonitoredServiceArgs defaults) {
            $ = new MonitoredServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identifier Identifier of the monitored service.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Identifier of the monitored service.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param orgId Identifier of the organization in which the monitored service is configured.
         * 
         * @return builder
         * 
         */
        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Identifier of the organization in which the monitored service is configured.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Identifier of the project in which the monitored service is configured.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Identifier of the project in which the monitored service is configured.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param request Request for creating or updating a monitored service.
         * 
         * @return builder
         * 
         */
        public Builder request(@Nullable Output<MonitoredServiceRequestArgs> request) {
            $.request = request;
            return this;
        }

        /**
         * @param request Request for creating or updating a monitored service.
         * 
         * @return builder
         * 
         */
        public Builder request(MonitoredServiceRequestArgs request) {
            return request(Output.of(request));
        }

        public MonitoredServiceArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("MonitoredServiceArgs", "identifier");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("MonitoredServiceArgs", "orgId");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("MonitoredServiceArgs", "projectId");
            }
            return $;
        }
    }

}
