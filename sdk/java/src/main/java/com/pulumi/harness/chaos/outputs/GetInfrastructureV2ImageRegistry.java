// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.chaos.outputs.GetInfrastructureV2ImageRegistryCustomImage;
import com.pulumi.harness.chaos.outputs.GetInfrastructureV2ImageRegistryIdentifier;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInfrastructureV2ImageRegistry {
    /**
     * @return Timestamp when the registry was created.
     * 
     */
    private String createdAt;
    /**
     * @return Custom image configurations. Required when use*custom*images is true.
     * 
     */
    private List<GetInfrastructureV2ImageRegistryCustomImage> customImages;
    /**
     * @return Scoped identifiers for the registry.
     * 
     */
    private List<GetInfrastructureV2ImageRegistryIdentifier> identifiers;
    /**
     * @return ID of the infrastructure.
     * 
     */
    private String infraId;
    /**
     * @return Whether this is the default registry.
     * 
     */
    private Boolean isDefault;
    /**
     * @return Whether override is allowed for this registry.
     * 
     */
    private Boolean isOverrideAllowed;
    /**
     * @return Whether the registry is private.
     * 
     */
    private Boolean isPrivate;
    /**
     * @return The account name for the container registry.
     * 
     */
    private String registryAccount;
    /**
     * @return The container image registry server URL (e.g., docker.io, gcr.io).
     * 
     */
    private String registryServer;
    /**
     * @return Name of the Kubernetes secret containing registry credentials.
     * 
     */
    private @Nullable String secretName;
    /**
     * @return Timestamp when the registry was last updated.
     * 
     */
    private String updatedAt;
    /**
     * @return Whether to use custom images instead of default ones.
     * 
     */
    private Boolean useCustomImages;

    private GetInfrastructureV2ImageRegistry() {}
    /**
     * @return Timestamp when the registry was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Custom image configurations. Required when use*custom*images is true.
     * 
     */
    public List<GetInfrastructureV2ImageRegistryCustomImage> customImages() {
        return this.customImages;
    }
    /**
     * @return Scoped identifiers for the registry.
     * 
     */
    public List<GetInfrastructureV2ImageRegistryIdentifier> identifiers() {
        return this.identifiers;
    }
    /**
     * @return ID of the infrastructure.
     * 
     */
    public String infraId() {
        return this.infraId;
    }
    /**
     * @return Whether this is the default registry.
     * 
     */
    public Boolean isDefault() {
        return this.isDefault;
    }
    /**
     * @return Whether override is allowed for this registry.
     * 
     */
    public Boolean isOverrideAllowed() {
        return this.isOverrideAllowed;
    }
    /**
     * @return Whether the registry is private.
     * 
     */
    public Boolean isPrivate() {
        return this.isPrivate;
    }
    /**
     * @return The account name for the container registry.
     * 
     */
    public String registryAccount() {
        return this.registryAccount;
    }
    /**
     * @return The container image registry server URL (e.g., docker.io, gcr.io).
     * 
     */
    public String registryServer() {
        return this.registryServer;
    }
    /**
     * @return Name of the Kubernetes secret containing registry credentials.
     * 
     */
    public Optional<String> secretName() {
        return Optional.ofNullable(this.secretName);
    }
    /**
     * @return Timestamp when the registry was last updated.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }
    /**
     * @return Whether to use custom images instead of default ones.
     * 
     */
    public Boolean useCustomImages() {
        return this.useCustomImages;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInfrastructureV2ImageRegistry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdAt;
        private List<GetInfrastructureV2ImageRegistryCustomImage> customImages;
        private List<GetInfrastructureV2ImageRegistryIdentifier> identifiers;
        private String infraId;
        private Boolean isDefault;
        private Boolean isOverrideAllowed;
        private Boolean isPrivate;
        private String registryAccount;
        private String registryServer;
        private @Nullable String secretName;
        private String updatedAt;
        private Boolean useCustomImages;
        public Builder() {}
        public Builder(GetInfrastructureV2ImageRegistry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdAt = defaults.createdAt;
    	      this.customImages = defaults.customImages;
    	      this.identifiers = defaults.identifiers;
    	      this.infraId = defaults.infraId;
    	      this.isDefault = defaults.isDefault;
    	      this.isOverrideAllowed = defaults.isOverrideAllowed;
    	      this.isPrivate = defaults.isPrivate;
    	      this.registryAccount = defaults.registryAccount;
    	      this.registryServer = defaults.registryServer;
    	      this.secretName = defaults.secretName;
    	      this.updatedAt = defaults.updatedAt;
    	      this.useCustomImages = defaults.useCustomImages;
        }

        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder customImages(List<GetInfrastructureV2ImageRegistryCustomImage> customImages) {
            if (customImages == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "customImages");
            }
            this.customImages = customImages;
            return this;
        }
        public Builder customImages(GetInfrastructureV2ImageRegistryCustomImage... customImages) {
            return customImages(List.of(customImages));
        }
        @CustomType.Setter
        public Builder identifiers(List<GetInfrastructureV2ImageRegistryIdentifier> identifiers) {
            if (identifiers == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "identifiers");
            }
            this.identifiers = identifiers;
            return this;
        }
        public Builder identifiers(GetInfrastructureV2ImageRegistryIdentifier... identifiers) {
            return identifiers(List.of(identifiers));
        }
        @CustomType.Setter
        public Builder infraId(String infraId) {
            if (infraId == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "infraId");
            }
            this.infraId = infraId;
            return this;
        }
        @CustomType.Setter
        public Builder isDefault(Boolean isDefault) {
            if (isDefault == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "isDefault");
            }
            this.isDefault = isDefault;
            return this;
        }
        @CustomType.Setter
        public Builder isOverrideAllowed(Boolean isOverrideAllowed) {
            if (isOverrideAllowed == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "isOverrideAllowed");
            }
            this.isOverrideAllowed = isOverrideAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder isPrivate(Boolean isPrivate) {
            if (isPrivate == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "isPrivate");
            }
            this.isPrivate = isPrivate;
            return this;
        }
        @CustomType.Setter
        public Builder registryAccount(String registryAccount) {
            if (registryAccount == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "registryAccount");
            }
            this.registryAccount = registryAccount;
            return this;
        }
        @CustomType.Setter
        public Builder registryServer(String registryServer) {
            if (registryServer == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "registryServer");
            }
            this.registryServer = registryServer;
            return this;
        }
        @CustomType.Setter
        public Builder secretName(@Nullable String secretName) {

            this.secretName = secretName;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder useCustomImages(Boolean useCustomImages) {
            if (useCustomImages == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2ImageRegistry", "useCustomImages");
            }
            this.useCustomImages = useCustomImages;
            return this;
        }
        public GetInfrastructureV2ImageRegistry build() {
            final var _resultValue = new GetInfrastructureV2ImageRegistry();
            _resultValue.createdAt = createdAt;
            _resultValue.customImages = customImages;
            _resultValue.identifiers = identifiers;
            _resultValue.infraId = infraId;
            _resultValue.isDefault = isDefault;
            _resultValue.isOverrideAllowed = isOverrideAllowed;
            _resultValue.isPrivate = isPrivate;
            _resultValue.registryAccount = registryAccount;
            _resultValue.registryServer = registryServer;
            _resultValue.secretName = secretName;
            _resultValue.updatedAt = updatedAt;
            _resultValue.useCustomImages = useCustomImages;
            return _resultValue;
        }
    }
}
