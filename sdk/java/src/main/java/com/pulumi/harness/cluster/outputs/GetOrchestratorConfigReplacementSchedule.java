// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cluster.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.cluster.outputs.GetOrchestratorConfigReplacementScheduleAppliesTo;
import com.pulumi.harness.cluster.outputs.GetOrchestratorConfigReplacementScheduleWindowDetails;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetOrchestratorConfigReplacementSchedule {
    /**
     * @return Defines the scope of the replacement schedule
     * 
     */
    private GetOrchestratorConfigReplacementScheduleAppliesTo appliesTo;
    private @Nullable GetOrchestratorConfigReplacementScheduleWindowDetails windowDetails;
    /**
     * @return Window type for replacement schedule
     * 
     */
    private String windowType;

    private GetOrchestratorConfigReplacementSchedule() {}
    /**
     * @return Defines the scope of the replacement schedule
     * 
     */
    public GetOrchestratorConfigReplacementScheduleAppliesTo appliesTo() {
        return this.appliesTo;
    }
    public Optional<GetOrchestratorConfigReplacementScheduleWindowDetails> windowDetails() {
        return Optional.ofNullable(this.windowDetails);
    }
    /**
     * @return Window type for replacement schedule
     * 
     */
    public String windowType() {
        return this.windowType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOrchestratorConfigReplacementSchedule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetOrchestratorConfigReplacementScheduleAppliesTo appliesTo;
        private @Nullable GetOrchestratorConfigReplacementScheduleWindowDetails windowDetails;
        private String windowType;
        public Builder() {}
        public Builder(GetOrchestratorConfigReplacementSchedule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appliesTo = defaults.appliesTo;
    	      this.windowDetails = defaults.windowDetails;
    	      this.windowType = defaults.windowType;
        }

        @CustomType.Setter
        public Builder appliesTo(GetOrchestratorConfigReplacementScheduleAppliesTo appliesTo) {
            if (appliesTo == null) {
              throw new MissingRequiredPropertyException("GetOrchestratorConfigReplacementSchedule", "appliesTo");
            }
            this.appliesTo = appliesTo;
            return this;
        }
        @CustomType.Setter
        public Builder windowDetails(@Nullable GetOrchestratorConfigReplacementScheduleWindowDetails windowDetails) {

            this.windowDetails = windowDetails;
            return this;
        }
        @CustomType.Setter
        public Builder windowType(String windowType) {
            if (windowType == null) {
              throw new MissingRequiredPropertyException("GetOrchestratorConfigReplacementSchedule", "windowType");
            }
            this.windowType = windowType;
            return this;
        }
        public GetOrchestratorConfigReplacementSchedule build() {
            final var _resultValue = new GetOrchestratorConfigReplacementSchedule();
            _resultValue.appliesTo = appliesTo;
            _resultValue.windowDetails = windowDetails;
            _resultValue.windowType = windowType;
            return _resultValue;
        }
    }
}
