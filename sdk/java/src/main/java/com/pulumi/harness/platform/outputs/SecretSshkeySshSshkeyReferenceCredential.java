// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecretSshkeySshSshkeyReferenceCredential {
    /**
     * @return Encrypted Passphrase. To reference a encryptedPassphrase at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a encryptedPassPhrase at the account scope, prefix &#39;account` to the expression: account.{identifier}
     * 
     */
    private @Nullable String encryptedPassphrase;
    /**
     * @return SSH key. To reference a key at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a key at the account scope, prefix &#39;account` to the expression: account.{identifier}
     * 
     */
    private String key;
    /**
     * @return SSH Username.
     * 
     */
    private String userName;

    private SecretSshkeySshSshkeyReferenceCredential() {}
    /**
     * @return Encrypted Passphrase. To reference a encryptedPassphrase at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a encryptedPassPhrase at the account scope, prefix &#39;account` to the expression: account.{identifier}
     * 
     */
    public Optional<String> encryptedPassphrase() {
        return Optional.ofNullable(this.encryptedPassphrase);
    }
    /**
     * @return SSH key. To reference a key at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a key at the account scope, prefix &#39;account` to the expression: account.{identifier}
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return SSH Username.
     * 
     */
    public String userName() {
        return this.userName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecretSshkeySshSshkeyReferenceCredential defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String encryptedPassphrase;
        private String key;
        private String userName;
        public Builder() {}
        public Builder(SecretSshkeySshSshkeyReferenceCredential defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.encryptedPassphrase = defaults.encryptedPassphrase;
    	      this.key = defaults.key;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder encryptedPassphrase(@Nullable String encryptedPassphrase) {

            this.encryptedPassphrase = encryptedPassphrase;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("SecretSshkeySshSshkeyReferenceCredential", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder userName(String userName) {
            if (userName == null) {
              throw new MissingRequiredPropertyException("SecretSshkeySshSshkeyReferenceCredential", "userName");
            }
            this.userName = userName;
            return this;
        }
        public SecretSshkeySshSshkeyReferenceCredential build() {
            final var _resultValue = new SecretSshkeySshSshkeyReferenceCredential();
            _resultValue.encryptedPassphrase = encryptedPassphrase;
            _resultValue.key = key;
            _resultValue.userName = userName;
            return _resultValue;
        }
    }
}
