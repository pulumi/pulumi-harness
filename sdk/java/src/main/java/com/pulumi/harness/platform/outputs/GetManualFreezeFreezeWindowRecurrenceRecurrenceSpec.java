// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManualFreezeFreezeWindowRecurrenceRecurrenceSpec {
    /**
     * @return Time till which freeze window recurrs
     * 
     */
    private String until;
    /**
     * @return Every n months recurrence
     * 
     */
    private Integer value;

    private GetManualFreezeFreezeWindowRecurrenceRecurrenceSpec() {}
    /**
     * @return Time till which freeze window recurrs
     * 
     */
    public String until() {
        return this.until;
    }
    /**
     * @return Every n months recurrence
     * 
     */
    public Integer value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManualFreezeFreezeWindowRecurrenceRecurrenceSpec defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String until;
        private Integer value;
        public Builder() {}
        public Builder(GetManualFreezeFreezeWindowRecurrenceRecurrenceSpec defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.until = defaults.until;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder until(String until) {
            if (until == null) {
              throw new MissingRequiredPropertyException("GetManualFreezeFreezeWindowRecurrenceRecurrenceSpec", "until");
            }
            this.until = until;
            return this;
        }
        @CustomType.Setter
        public Builder value(Integer value) {
            if (value == null) {
              throw new MissingRequiredPropertyException("GetManualFreezeFreezeWindowRecurrenceRecurrenceSpec", "value");
            }
            this.value = value;
            return this;
        }
        public GetManualFreezeFreezeWindowRecurrenceRecurrenceSpec build() {
            final var _resultValue = new GetManualFreezeFreezeWindowRecurrenceRecurrenceSpec();
            _resultValue.until = until;
            _resultValue.value = value;
            return _resultValue;
        }
    }
}
