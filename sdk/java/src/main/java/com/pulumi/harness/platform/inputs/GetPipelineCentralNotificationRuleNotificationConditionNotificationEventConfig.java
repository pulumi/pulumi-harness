// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GetPipelineCentralNotificationRuleNotificationConditionNotificationEventConfigNotificationEventData;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPipelineCentralNotificationRuleNotificationConditionNotificationEventConfig extends com.pulumi.resources.InvokeArgs {

    public static final GetPipelineCentralNotificationRuleNotificationConditionNotificationEventConfig Empty = new GetPipelineCentralNotificationRuleNotificationConditionNotificationEventConfig();

    @Import(name="notificationEntity", required=true)
    private String notificationEntity;

    public String notificationEntity() {
        return this.notificationEntity;
    }

    @Import(name="notificationEvent", required=true)
    private String notificationEvent;

    public String notificationEvent() {
        return this.notificationEvent;
    }

    @Import(name="notificationEventDatas")
    private @Nullable List<GetPipelineCentralNotificationRuleNotificationConditionNotificationEventConfigNotificationEventData> notificationEventDatas;

    public Optional<List<GetPipelineCentralNotificationRuleNotificationConditionNotificationEventConfigNotificationEventData>> notificationEventDatas() {
        return Optional.ofNullable(this.notificationEventDatas);
    }

    private GetPipelineCentralNotificationRuleNotificationConditionNotificationEventConfig() {}

    private GetPipelineCentralNotificationRuleNotificationConditionNotificationEventConfig(GetPipelineCentralNotificationRuleNotificationConditionNotificationEventConfig $) {
        this.notificationEntity = $.notificationEntity;
        this.notificationEvent = $.notificationEvent;
        this.notificationEventDatas = $.notificationEventDatas;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPipelineCentralNotificationRuleNotificationConditionNotificationEventConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPipelineCentralNotificationRuleNotificationConditionNotificationEventConfig $;

        public Builder() {
            $ = new GetPipelineCentralNotificationRuleNotificationConditionNotificationEventConfig();
        }

        public Builder(GetPipelineCentralNotificationRuleNotificationConditionNotificationEventConfig defaults) {
            $ = new GetPipelineCentralNotificationRuleNotificationConditionNotificationEventConfig(Objects.requireNonNull(defaults));
        }

        public Builder notificationEntity(String notificationEntity) {
            $.notificationEntity = notificationEntity;
            return this;
        }

        public Builder notificationEvent(String notificationEvent) {
            $.notificationEvent = notificationEvent;
            return this;
        }

        public Builder notificationEventDatas(@Nullable List<GetPipelineCentralNotificationRuleNotificationConditionNotificationEventConfigNotificationEventData> notificationEventDatas) {
            $.notificationEventDatas = notificationEventDatas;
            return this;
        }

        public Builder notificationEventDatas(GetPipelineCentralNotificationRuleNotificationConditionNotificationEventConfigNotificationEventData... notificationEventDatas) {
            return notificationEventDatas(List.of(notificationEventDatas));
        }

        public GetPipelineCentralNotificationRuleNotificationConditionNotificationEventConfig build() {
            if ($.notificationEntity == null) {
                throw new MissingRequiredPropertyException("GetPipelineCentralNotificationRuleNotificationConditionNotificationEventConfig", "notificationEntity");
            }
            if ($.notificationEvent == null) {
                throw new MissingRequiredPropertyException("GetPipelineCentralNotificationRuleNotificationConditionNotificationEventConfig", "notificationEvent");
            }
            return $;
        }
    }

}
