// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorScmProviderAzureDevopsArgs;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorScmProviderBitbucketCloudArgs;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorScmProviderBitbucketServerArgs;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorScmProviderFilterArgs;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorScmProviderGiteaArgs;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorScmProviderGithubArgs;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorScmProviderGitlabArgs;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorScmProviderTemplateArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsApplicationsetApplicationsetSpecGeneratorScmProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsApplicationsetApplicationsetSpecGeneratorScmProviderArgs Empty = new GitopsApplicationsetApplicationsetSpecGeneratorScmProviderArgs();

    /**
     * Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
     * 
     */
    @Import(name="azureDevops")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderAzureDevopsArgs> azureDevops;

    /**
     * @return Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderAzureDevopsArgs>> azureDevops() {
        return Optional.ofNullable(this.azureDevops);
    }

    /**
     * Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
     * 
     */
    @Import(name="bitbucketCloud")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderBitbucketCloudArgs> bitbucketCloud;

    /**
     * @return Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderBitbucketCloudArgs>> bitbucketCloud() {
        return Optional.ofNullable(this.bitbucketCloud);
    }

    /**
     * Use the Bitbucket Server API (1.0) to scan repos in a project.
     * 
     */
    @Import(name="bitbucketServer")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderBitbucketServerArgs> bitbucketServer;

    /**
     * @return Use the Bitbucket Server API (1.0) to scan repos in a project.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderBitbucketServerArgs>> bitbucketServer() {
        return Optional.ofNullable(this.bitbucketServer);
    }

    /**
     * Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
     * 
     */
    @Import(name="cloneProtocol")
    private @Nullable Output<String> cloneProtocol;

    /**
     * @return Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
     * 
     */
    public Optional<Output<String>> cloneProtocol() {
        return Optional.ofNullable(this.cloneProtocol);
    }

    /**
     * Filters for which repos should be considered.
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderFilterArgs>> filters;

    /**
     * @return Filters for which repos should be considered.
     * 
     */
    public Optional<Output<List<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Gitea mode uses the Gitea API to scan organizations in your instance.
     * 
     */
    @Import(name="gitea")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderGiteaArgs> gitea;

    /**
     * @return Gitea mode uses the Gitea API to scan organizations in your instance.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderGiteaArgs>> gitea() {
        return Optional.ofNullable(this.gitea);
    }

    /**
     * Uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.
     * 
     */
    @Import(name="github")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderGithubArgs> github;

    /**
     * @return Uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderGithubArgs>> github() {
        return Optional.ofNullable(this.github);
    }

    /**
     * Uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.
     * 
     */
    @Import(name="gitlab")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderGitlabArgs> gitlab;

    /**
     * @return Uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderGitlabArgs>> gitlab() {
        return Optional.ofNullable(this.gitlab);
    }

    /**
     * How often to check for changes (in seconds). Default: 3min.
     * 
     */
    @Import(name="requeueAfterSeconds")
    private @Nullable Output<String> requeueAfterSeconds;

    /**
     * @return How often to check for changes (in seconds). Default: 3min.
     * 
     */
    public Optional<Output<String>> requeueAfterSeconds() {
        return Optional.ofNullable(this.requeueAfterSeconds);
    }

    /**
     * Generator template. Used to override the values of the spec-level template.
     * 
     */
    @Import(name="template")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderTemplateArgs> template;

    /**
     * @return Generator template. Used to override the values of the spec-level template.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderTemplateArgs>> template() {
        return Optional.ofNullable(this.template);
    }

    private GitopsApplicationsetApplicationsetSpecGeneratorScmProviderArgs() {}

    private GitopsApplicationsetApplicationsetSpecGeneratorScmProviderArgs(GitopsApplicationsetApplicationsetSpecGeneratorScmProviderArgs $) {
        this.azureDevops = $.azureDevops;
        this.bitbucketCloud = $.bitbucketCloud;
        this.bitbucketServer = $.bitbucketServer;
        this.cloneProtocol = $.cloneProtocol;
        this.filters = $.filters;
        this.gitea = $.gitea;
        this.github = $.github;
        this.gitlab = $.gitlab;
        this.requeueAfterSeconds = $.requeueAfterSeconds;
        this.template = $.template;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsApplicationsetApplicationsetSpecGeneratorScmProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsApplicationsetApplicationsetSpecGeneratorScmProviderArgs $;

        public Builder() {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorScmProviderArgs();
        }

        public Builder(GitopsApplicationsetApplicationsetSpecGeneratorScmProviderArgs defaults) {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorScmProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param azureDevops Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
         * 
         * @return builder
         * 
         */
        public Builder azureDevops(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderAzureDevopsArgs> azureDevops) {
            $.azureDevops = azureDevops;
            return this;
        }

        /**
         * @param azureDevops Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
         * 
         * @return builder
         * 
         */
        public Builder azureDevops(GitopsApplicationsetApplicationsetSpecGeneratorScmProviderAzureDevopsArgs azureDevops) {
            return azureDevops(Output.of(azureDevops));
        }

        /**
         * @param bitbucketCloud Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
         * 
         * @return builder
         * 
         */
        public Builder bitbucketCloud(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderBitbucketCloudArgs> bitbucketCloud) {
            $.bitbucketCloud = bitbucketCloud;
            return this;
        }

        /**
         * @param bitbucketCloud Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
         * 
         * @return builder
         * 
         */
        public Builder bitbucketCloud(GitopsApplicationsetApplicationsetSpecGeneratorScmProviderBitbucketCloudArgs bitbucketCloud) {
            return bitbucketCloud(Output.of(bitbucketCloud));
        }

        /**
         * @param bitbucketServer Use the Bitbucket Server API (1.0) to scan repos in a project.
         * 
         * @return builder
         * 
         */
        public Builder bitbucketServer(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderBitbucketServerArgs> bitbucketServer) {
            $.bitbucketServer = bitbucketServer;
            return this;
        }

        /**
         * @param bitbucketServer Use the Bitbucket Server API (1.0) to scan repos in a project.
         * 
         * @return builder
         * 
         */
        public Builder bitbucketServer(GitopsApplicationsetApplicationsetSpecGeneratorScmProviderBitbucketServerArgs bitbucketServer) {
            return bitbucketServer(Output.of(bitbucketServer));
        }

        /**
         * @param cloneProtocol Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
         * 
         * @return builder
         * 
         */
        public Builder cloneProtocol(@Nullable Output<String> cloneProtocol) {
            $.cloneProtocol = cloneProtocol;
            return this;
        }

        /**
         * @param cloneProtocol Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
         * 
         * @return builder
         * 
         */
        public Builder cloneProtocol(String cloneProtocol) {
            return cloneProtocol(Output.of(cloneProtocol));
        }

        /**
         * @param filters Filters for which repos should be considered.
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters Filters for which repos should be considered.
         * 
         * @return builder
         * 
         */
        public Builder filters(List<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters Filters for which repos should be considered.
         * 
         * @return builder
         * 
         */
        public Builder filters(GitopsApplicationsetApplicationsetSpecGeneratorScmProviderFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param gitea Gitea mode uses the Gitea API to scan organizations in your instance.
         * 
         * @return builder
         * 
         */
        public Builder gitea(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderGiteaArgs> gitea) {
            $.gitea = gitea;
            return this;
        }

        /**
         * @param gitea Gitea mode uses the Gitea API to scan organizations in your instance.
         * 
         * @return builder
         * 
         */
        public Builder gitea(GitopsApplicationsetApplicationsetSpecGeneratorScmProviderGiteaArgs gitea) {
            return gitea(Output.of(gitea));
        }

        /**
         * @param github Uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.
         * 
         * @return builder
         * 
         */
        public Builder github(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderGithubArgs> github) {
            $.github = github;
            return this;
        }

        /**
         * @param github Uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.
         * 
         * @return builder
         * 
         */
        public Builder github(GitopsApplicationsetApplicationsetSpecGeneratorScmProviderGithubArgs github) {
            return github(Output.of(github));
        }

        /**
         * @param gitlab Uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.
         * 
         * @return builder
         * 
         */
        public Builder gitlab(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderGitlabArgs> gitlab) {
            $.gitlab = gitlab;
            return this;
        }

        /**
         * @param gitlab Uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.
         * 
         * @return builder
         * 
         */
        public Builder gitlab(GitopsApplicationsetApplicationsetSpecGeneratorScmProviderGitlabArgs gitlab) {
            return gitlab(Output.of(gitlab));
        }

        /**
         * @param requeueAfterSeconds How often to check for changes (in seconds). Default: 3min.
         * 
         * @return builder
         * 
         */
        public Builder requeueAfterSeconds(@Nullable Output<String> requeueAfterSeconds) {
            $.requeueAfterSeconds = requeueAfterSeconds;
            return this;
        }

        /**
         * @param requeueAfterSeconds How often to check for changes (in seconds). Default: 3min.
         * 
         * @return builder
         * 
         */
        public Builder requeueAfterSeconds(String requeueAfterSeconds) {
            return requeueAfterSeconds(Output.of(requeueAfterSeconds));
        }

        /**
         * @param template Generator template. Used to override the values of the spec-level template.
         * 
         * @return builder
         * 
         */
        public Builder template(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorScmProviderTemplateArgs> template) {
            $.template = template;
            return this;
        }

        /**
         * @param template Generator template. Used to override the values of the spec-level template.
         * 
         * @return builder
         * 
         */
        public Builder template(GitopsApplicationsetApplicationsetSpecGeneratorScmProviderTemplateArgs template) {
            return template(Output.of(template));
        }

        public GitopsApplicationsetApplicationsetSpecGeneratorScmProviderArgs build() {
            return $;
        }
    }

}
