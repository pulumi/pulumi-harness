// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GetRepoSource;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRepoPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepoPlainArgs Empty = new GetRepoPlainArgs();

    /**
     * Default branch of the repository (Applicate only for create).
     * 
     */
    @Import(name="defaultBranch")
    private @Nullable String defaultBranch;

    /**
     * @return Default branch of the repository (Applicate only for create).
     * 
     */
    public Optional<String> defaultBranch() {
        return Optional.ofNullable(this.defaultBranch);
    }

    /**
     * Description of the repository.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Description of the repository.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Repository should be created with specified predefined gitignore file.
     * 
     */
    @Import(name="gitIgnore")
    private @Nullable String gitIgnore;

    /**
     * @return Repository should be created with specified predefined gitignore file.
     * 
     */
    public Optional<String> gitIgnore() {
        return Optional.ofNullable(this.gitIgnore);
    }

    /**
     * Identifier of the repository.
     * 
     */
    @Import(name="identifier", required=true)
    private String identifier;

    /**
     * @return Identifier of the repository.
     * 
     */
    public String identifier() {
        return this.identifier;
    }

    /**
     * Repository should be created with specified predefined license file.
     * 
     */
    @Import(name="license")
    private @Nullable String license;

    /**
     * @return Repository should be created with specified predefined license file.
     * 
     */
    public Optional<String> license() {
        return Optional.ofNullable(this.license);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable String orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable String projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Repository should be created with readme file.
     * 
     */
    @Import(name="readme")
    private @Nullable Boolean readme;

    /**
     * @return Repository should be created with readme file.
     * 
     */
    public Optional<Boolean> readme() {
        return Optional.ofNullable(this.readme);
    }

    /**
     * Configuration for importing an existing repository from SCM provider.
     * 
     */
    @Import(name="sources")
    private @Nullable List<GetRepoSource> sources;

    /**
     * @return Configuration for importing an existing repository from SCM provider.
     * 
     */
    public Optional<List<GetRepoSource>> sources() {
        return Optional.ofNullable(this.sources);
    }

    private GetRepoPlainArgs() {}

    private GetRepoPlainArgs(GetRepoPlainArgs $) {
        this.defaultBranch = $.defaultBranch;
        this.description = $.description;
        this.gitIgnore = $.gitIgnore;
        this.identifier = $.identifier;
        this.license = $.license;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.readme = $.readme;
        this.sources = $.sources;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepoPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepoPlainArgs $;

        public Builder() {
            $ = new GetRepoPlainArgs();
        }

        public Builder(GetRepoPlainArgs defaults) {
            $ = new GetRepoPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultBranch Default branch of the repository (Applicate only for create).
         * 
         * @return builder
         * 
         */
        public Builder defaultBranch(@Nullable String defaultBranch) {
            $.defaultBranch = defaultBranch;
            return this;
        }

        /**
         * @param description Description of the repository.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param gitIgnore Repository should be created with specified predefined gitignore file.
         * 
         * @return builder
         * 
         */
        public Builder gitIgnore(@Nullable String gitIgnore) {
            $.gitIgnore = gitIgnore;
            return this;
        }

        /**
         * @param identifier Identifier of the repository.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param license Repository should be created with specified predefined license file.
         * 
         * @return builder
         * 
         */
        public Builder license(@Nullable String license) {
            $.license = license;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable String orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable String projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param readme Repository should be created with readme file.
         * 
         * @return builder
         * 
         */
        public Builder readme(@Nullable Boolean readme) {
            $.readme = readme;
            return this;
        }

        /**
         * @param sources Configuration for importing an existing repository from SCM provider.
         * 
         * @return builder
         * 
         */
        public Builder sources(@Nullable List<GetRepoSource> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources Configuration for importing an existing repository from SCM provider.
         * 
         * @return builder
         * 
         */
        public Builder sources(GetRepoSource... sources) {
            return sources(List.of(sources));
        }

        public GetRepoPlainArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("GetRepoPlainArgs", "identifier");
            }
            return $;
        }
    }

}
