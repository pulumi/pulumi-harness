// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GetBitbucketConnectorCredentialHttp;
import com.pulumi.harness.platform.outputs.GetBitbucketConnectorCredentialSsh;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBitbucketConnectorCredential {
    /**
     * @return Authenticate using Username and password over http(s) for the connection.
     * 
     */
    private List<GetBitbucketConnectorCredentialHttp> https;
    /**
     * @return Authenticate using SSH for the connection.
     * 
     */
    private List<GetBitbucketConnectorCredentialSsh> sshes;

    private GetBitbucketConnectorCredential() {}
    /**
     * @return Authenticate using Username and password over http(s) for the connection.
     * 
     */
    public List<GetBitbucketConnectorCredentialHttp> https() {
        return this.https;
    }
    /**
     * @return Authenticate using SSH for the connection.
     * 
     */
    public List<GetBitbucketConnectorCredentialSsh> sshes() {
        return this.sshes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBitbucketConnectorCredential defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetBitbucketConnectorCredentialHttp> https;
        private List<GetBitbucketConnectorCredentialSsh> sshes;
        public Builder() {}
        public Builder(GetBitbucketConnectorCredential defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.https = defaults.https;
    	      this.sshes = defaults.sshes;
        }

        @CustomType.Setter
        public Builder https(List<GetBitbucketConnectorCredentialHttp> https) {
            if (https == null) {
              throw new MissingRequiredPropertyException("GetBitbucketConnectorCredential", "https");
            }
            this.https = https;
            return this;
        }
        public Builder https(GetBitbucketConnectorCredentialHttp... https) {
            return https(List.of(https));
        }
        @CustomType.Setter
        public Builder sshes(List<GetBitbucketConnectorCredentialSsh> sshes) {
            if (sshes == null) {
              throw new MissingRequiredPropertyException("GetBitbucketConnectorCredential", "sshes");
            }
            this.sshes = sshes;
            return this;
        }
        public Builder sshes(GetBitbucketConnectorCredentialSsh... sshes) {
            return sshes(List.of(sshes));
        }
        public GetBitbucketConnectorCredential build() {
            final var _resultValue = new GetBitbucketConnectorCredential();
            _resultValue.https = https;
            _resultValue.sshes = sshes;
            return _resultValue;
        }
    }
}
