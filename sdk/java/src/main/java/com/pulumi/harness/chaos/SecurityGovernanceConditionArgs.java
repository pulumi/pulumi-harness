// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.chaos.inputs.SecurityGovernanceConditionFaultSpecArgs;
import com.pulumi.harness.chaos.inputs.SecurityGovernanceConditionK8sSpecArgs;
import com.pulumi.harness.chaos.inputs.SecurityGovernanceConditionMachineSpecArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityGovernanceConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityGovernanceConditionArgs Empty = new SecurityGovernanceConditionArgs();

    /**
     * Description of the security governance condition
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the security governance condition
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specification for faults to be included in the condition
     * 
     */
    @Import(name="faultSpec", required=true)
    private Output<SecurityGovernanceConditionFaultSpecArgs> faultSpec;

    /**
     * @return Specification for faults to be included in the condition
     * 
     */
    public Output<SecurityGovernanceConditionFaultSpecArgs> faultSpec() {
        return this.faultSpec;
    }

    /**
     * Type of infrastructure (Kubernetes, KubernetesV2, Linux, Windows, CloudFoundry, Container)
     * 
     */
    @Import(name="infraType", required=true)
    private Output<String> infraType;

    /**
     * @return Type of infrastructure (Kubernetes, KubernetesV2, Linux, Windows, CloudFoundry, Container)
     * 
     */
    public Output<String> infraType() {
        return this.infraType;
    }

    /**
     * Kubernetes specific configuration (required when infra*type is KUBERNETES or KUBERNETESV2)
     * 
     */
    @Import(name="k8sSpec")
    private @Nullable Output<SecurityGovernanceConditionK8sSpecArgs> k8sSpec;

    /**
     * @return Kubernetes specific configuration (required when infra*type is KUBERNETES or KUBERNETESV2)
     * 
     */
    public Optional<Output<SecurityGovernanceConditionK8sSpecArgs>> k8sSpec() {
        return Optional.ofNullable(this.k8sSpec);
    }

    /**
     * Machine specific configuration (required when infra*type is LINUX or WINDOWS)
     * 
     */
    @Import(name="machineSpec")
    private @Nullable Output<SecurityGovernanceConditionMachineSpecArgs> machineSpec;

    /**
     * @return Machine specific configuration (required when infra*type is LINUX or WINDOWS)
     * 
     */
    public Optional<Output<SecurityGovernanceConditionMachineSpecArgs>> machineSpec() {
        return Optional.ofNullable(this.machineSpec);
    }

    /**
     * Name of the security governance condition
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the security governance condition
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The organization ID of the security governance condition
     * 
     */
    @Import(name="orgId", required=true)
    private Output<String> orgId;

    /**
     * @return The organization ID of the security governance condition
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * The project ID of the security governance condition
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The project ID of the security governance condition
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Tags for the security governance condition
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags for the security governance condition
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private SecurityGovernanceConditionArgs() {}

    private SecurityGovernanceConditionArgs(SecurityGovernanceConditionArgs $) {
        this.description = $.description;
        this.faultSpec = $.faultSpec;
        this.infraType = $.infraType;
        this.k8sSpec = $.k8sSpec;
        this.machineSpec = $.machineSpec;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityGovernanceConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityGovernanceConditionArgs $;

        public Builder() {
            $ = new SecurityGovernanceConditionArgs();
        }

        public Builder(SecurityGovernanceConditionArgs defaults) {
            $ = new SecurityGovernanceConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the security governance condition
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the security governance condition
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param faultSpec Specification for faults to be included in the condition
         * 
         * @return builder
         * 
         */
        public Builder faultSpec(Output<SecurityGovernanceConditionFaultSpecArgs> faultSpec) {
            $.faultSpec = faultSpec;
            return this;
        }

        /**
         * @param faultSpec Specification for faults to be included in the condition
         * 
         * @return builder
         * 
         */
        public Builder faultSpec(SecurityGovernanceConditionFaultSpecArgs faultSpec) {
            return faultSpec(Output.of(faultSpec));
        }

        /**
         * @param infraType Type of infrastructure (Kubernetes, KubernetesV2, Linux, Windows, CloudFoundry, Container)
         * 
         * @return builder
         * 
         */
        public Builder infraType(Output<String> infraType) {
            $.infraType = infraType;
            return this;
        }

        /**
         * @param infraType Type of infrastructure (Kubernetes, KubernetesV2, Linux, Windows, CloudFoundry, Container)
         * 
         * @return builder
         * 
         */
        public Builder infraType(String infraType) {
            return infraType(Output.of(infraType));
        }

        /**
         * @param k8sSpec Kubernetes specific configuration (required when infra*type is KUBERNETES or KUBERNETESV2)
         * 
         * @return builder
         * 
         */
        public Builder k8sSpec(@Nullable Output<SecurityGovernanceConditionK8sSpecArgs> k8sSpec) {
            $.k8sSpec = k8sSpec;
            return this;
        }

        /**
         * @param k8sSpec Kubernetes specific configuration (required when infra*type is KUBERNETES or KUBERNETESV2)
         * 
         * @return builder
         * 
         */
        public Builder k8sSpec(SecurityGovernanceConditionK8sSpecArgs k8sSpec) {
            return k8sSpec(Output.of(k8sSpec));
        }

        /**
         * @param machineSpec Machine specific configuration (required when infra*type is LINUX or WINDOWS)
         * 
         * @return builder
         * 
         */
        public Builder machineSpec(@Nullable Output<SecurityGovernanceConditionMachineSpecArgs> machineSpec) {
            $.machineSpec = machineSpec;
            return this;
        }

        /**
         * @param machineSpec Machine specific configuration (required when infra*type is LINUX or WINDOWS)
         * 
         * @return builder
         * 
         */
        public Builder machineSpec(SecurityGovernanceConditionMachineSpecArgs machineSpec) {
            return machineSpec(Output.of(machineSpec));
        }

        /**
         * @param name Name of the security governance condition
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the security governance condition
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId The organization ID of the security governance condition
         * 
         * @return builder
         * 
         */
        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The organization ID of the security governance condition
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId The project ID of the security governance condition
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project ID of the security governance condition
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param tags Tags for the security governance condition
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags for the security governance condition
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags for the security governance condition
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public SecurityGovernanceConditionArgs build() {
            if ($.faultSpec == null) {
                throw new MissingRequiredPropertyException("SecurityGovernanceConditionArgs", "faultSpec");
            }
            if ($.infraType == null) {
                throw new MissingRequiredPropertyException("SecurityGovernanceConditionArgs", "infraType");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("SecurityGovernanceConditionArgs", "orgId");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("SecurityGovernanceConditionArgs", "projectId");
            }
            return $;
        }
    }

}
