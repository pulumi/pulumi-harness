// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GetInfraModuleTestingTestingMetadata;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetInfraModuleTestingPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetInfraModuleTestingPlainArgs Empty = new GetInfraModuleTestingPlainArgs();

    /**
     * Identifier of the module to enable testing for
     * 
     */
    @Import(name="moduleId", required=true)
    private String moduleId;

    /**
     * @return Identifier of the module to enable testing for
     * 
     */
    public String moduleId() {
        return this.moduleId;
    }

    /**
     * Organization identifier
     * 
     */
    @Import(name="org", required=true)
    private String org;

    /**
     * @return Organization identifier
     * 
     */
    public String org() {
        return this.org;
    }

    /**
     * List of pipeline IDs to create webhooks for triggering test executions
     * 
     */
    @Import(name="pipelines", required=true)
    private List<String> pipelines;

    /**
     * @return List of pipeline IDs to create webhooks for triggering test executions
     * 
     */
    public List<String> pipelines() {
        return this.pipelines;
    }

    /**
     * Project identifier
     * 
     */
    @Import(name="project", required=true)
    private String project;

    /**
     * @return Project identifier
     * 
     */
    public String project() {
        return this.project;
    }

    /**
     * Provider connector for testing purposes
     * 
     */
    @Import(name="providerConnector", required=true)
    private String providerConnector;

    /**
     * @return Provider connector for testing purposes
     * 
     */
    public String providerConnector() {
        return this.providerConnector;
    }

    @Import(name="provisionerType", required=true)
    private String provisionerType;

    public String provisionerType() {
        return this.provisionerType;
    }

    /**
     * Provisioner version for testing purposes
     * 
     */
    @Import(name="provisionerVersion", required=true)
    private String provisionerVersion;

    /**
     * @return Provisioner version for testing purposes
     * 
     */
    public String provisionerVersion() {
        return this.provisionerVersion;
    }

    /**
     * Pipeline ID to create webhooks for releases
     * 
     */
    @Import(name="releasePipeline")
    private @Nullable String releasePipeline;

    /**
     * @return Pipeline ID to create webhooks for releases
     * 
     */
    public Optional<String> releasePipeline() {
        return Optional.ofNullable(this.releasePipeline);
    }

    /**
     * Whether testing is enabled for the module
     * 
     */
    @Import(name="testingEnabled")
    private @Nullable Boolean testingEnabled;

    /**
     * @return Whether testing is enabled for the module
     * 
     */
    public Optional<Boolean> testingEnabled() {
        return Optional.ofNullable(this.testingEnabled);
    }

    /**
     * Testing metadata for the module
     * 
     */
    @Import(name="testingMetadata")
    private @Nullable GetInfraModuleTestingTestingMetadata testingMetadata;

    /**
     * @return Testing metadata for the module
     * 
     */
    public Optional<GetInfraModuleTestingTestingMetadata> testingMetadata() {
        return Optional.ofNullable(this.testingMetadata);
    }

    /**
     * Timestamp when the module was last modified
     * 
     */
    @Import(name="updated")
    private @Nullable Integer updated;

    /**
     * @return Timestamp when the module was last modified
     * 
     */
    public Optional<Integer> updated() {
        return Optional.ofNullable(this.updated);
    }

    /**
     * Versions of the module
     * 
     */
    @Import(name="versions")
    private @Nullable List<String> versions;

    /**
     * @return Versions of the module
     * 
     */
    public Optional<List<String>> versions() {
        return Optional.ofNullable(this.versions);
    }

    private GetInfraModuleTestingPlainArgs() {}

    private GetInfraModuleTestingPlainArgs(GetInfraModuleTestingPlainArgs $) {
        this.moduleId = $.moduleId;
        this.org = $.org;
        this.pipelines = $.pipelines;
        this.project = $.project;
        this.providerConnector = $.providerConnector;
        this.provisionerType = $.provisionerType;
        this.provisionerVersion = $.provisionerVersion;
        this.releasePipeline = $.releasePipeline;
        this.testingEnabled = $.testingEnabled;
        this.testingMetadata = $.testingMetadata;
        this.updated = $.updated;
        this.versions = $.versions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInfraModuleTestingPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInfraModuleTestingPlainArgs $;

        public Builder() {
            $ = new GetInfraModuleTestingPlainArgs();
        }

        public Builder(GetInfraModuleTestingPlainArgs defaults) {
            $ = new GetInfraModuleTestingPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param moduleId Identifier of the module to enable testing for
         * 
         * @return builder
         * 
         */
        public Builder moduleId(String moduleId) {
            $.moduleId = moduleId;
            return this;
        }

        /**
         * @param org Organization identifier
         * 
         * @return builder
         * 
         */
        public Builder org(String org) {
            $.org = org;
            return this;
        }

        /**
         * @param pipelines List of pipeline IDs to create webhooks for triggering test executions
         * 
         * @return builder
         * 
         */
        public Builder pipelines(List<String> pipelines) {
            $.pipelines = pipelines;
            return this;
        }

        /**
         * @param pipelines List of pipeline IDs to create webhooks for triggering test executions
         * 
         * @return builder
         * 
         */
        public Builder pipelines(String... pipelines) {
            return pipelines(List.of(pipelines));
        }

        /**
         * @param project Project identifier
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            $.project = project;
            return this;
        }

        /**
         * @param providerConnector Provider connector for testing purposes
         * 
         * @return builder
         * 
         */
        public Builder providerConnector(String providerConnector) {
            $.providerConnector = providerConnector;
            return this;
        }

        public Builder provisionerType(String provisionerType) {
            $.provisionerType = provisionerType;
            return this;
        }

        /**
         * @param provisionerVersion Provisioner version for testing purposes
         * 
         * @return builder
         * 
         */
        public Builder provisionerVersion(String provisionerVersion) {
            $.provisionerVersion = provisionerVersion;
            return this;
        }

        /**
         * @param releasePipeline Pipeline ID to create webhooks for releases
         * 
         * @return builder
         * 
         */
        public Builder releasePipeline(@Nullable String releasePipeline) {
            $.releasePipeline = releasePipeline;
            return this;
        }

        /**
         * @param testingEnabled Whether testing is enabled for the module
         * 
         * @return builder
         * 
         */
        public Builder testingEnabled(@Nullable Boolean testingEnabled) {
            $.testingEnabled = testingEnabled;
            return this;
        }

        /**
         * @param testingMetadata Testing metadata for the module
         * 
         * @return builder
         * 
         */
        public Builder testingMetadata(@Nullable GetInfraModuleTestingTestingMetadata testingMetadata) {
            $.testingMetadata = testingMetadata;
            return this;
        }

        /**
         * @param updated Timestamp when the module was last modified
         * 
         * @return builder
         * 
         */
        public Builder updated(@Nullable Integer updated) {
            $.updated = updated;
            return this;
        }

        /**
         * @param versions Versions of the module
         * 
         * @return builder
         * 
         */
        public Builder versions(@Nullable List<String> versions) {
            $.versions = versions;
            return this;
        }

        /**
         * @param versions Versions of the module
         * 
         * @return builder
         * 
         */
        public Builder versions(String... versions) {
            return versions(List.of(versions));
        }

        public GetInfraModuleTestingPlainArgs build() {
            if ($.moduleId == null) {
                throw new MissingRequiredPropertyException("GetInfraModuleTestingPlainArgs", "moduleId");
            }
            if ($.org == null) {
                throw new MissingRequiredPropertyException("GetInfraModuleTestingPlainArgs", "org");
            }
            if ($.pipelines == null) {
                throw new MissingRequiredPropertyException("GetInfraModuleTestingPlainArgs", "pipelines");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("GetInfraModuleTestingPlainArgs", "project");
            }
            if ($.providerConnector == null) {
                throw new MissingRequiredPropertyException("GetInfraModuleTestingPlainArgs", "providerConnector");
            }
            if ($.provisionerType == null) {
                throw new MissingRequiredPropertyException("GetInfraModuleTestingPlainArgs", "provisionerType");
            }
            if ($.provisionerVersion == null) {
                throw new MissingRequiredPropertyException("GetInfraModuleTestingPlainArgs", "provisionerVersion");
            }
            return $;
        }
    }

}
