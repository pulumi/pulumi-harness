// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPipelineFiltersFilterPropertyModulePropertiesCd {
    /**
     * @return Artifact display names of the CD pipeline.
     * 
     */
    private List<String> artifactDisplayNames;
    /**
     * @return Deployment type of the CD pipeline, eg. Kubernetes
     * 
     */
    private String deploymentTypes;
    /**
     * @return Environment names of the CD pipeline.
     * 
     */
    private List<String> environmentNames;
    /**
     * @return Service identifiers of the CD pipeline.
     * 
     */
    private List<String> serviceIdentifiers;
    /**
     * @return Service names of the CD pipeline.
     * 
     */
    private List<String> serviceNames;

    private GetPipelineFiltersFilterPropertyModulePropertiesCd() {}
    /**
     * @return Artifact display names of the CD pipeline.
     * 
     */
    public List<String> artifactDisplayNames() {
        return this.artifactDisplayNames;
    }
    /**
     * @return Deployment type of the CD pipeline, eg. Kubernetes
     * 
     */
    public String deploymentTypes() {
        return this.deploymentTypes;
    }
    /**
     * @return Environment names of the CD pipeline.
     * 
     */
    public List<String> environmentNames() {
        return this.environmentNames;
    }
    /**
     * @return Service identifiers of the CD pipeline.
     * 
     */
    public List<String> serviceIdentifiers() {
        return this.serviceIdentifiers;
    }
    /**
     * @return Service names of the CD pipeline.
     * 
     */
    public List<String> serviceNames() {
        return this.serviceNames;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPipelineFiltersFilterPropertyModulePropertiesCd defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> artifactDisplayNames;
        private String deploymentTypes;
        private List<String> environmentNames;
        private List<String> serviceIdentifiers;
        private List<String> serviceNames;
        public Builder() {}
        public Builder(GetPipelineFiltersFilterPropertyModulePropertiesCd defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifactDisplayNames = defaults.artifactDisplayNames;
    	      this.deploymentTypes = defaults.deploymentTypes;
    	      this.environmentNames = defaults.environmentNames;
    	      this.serviceIdentifiers = defaults.serviceIdentifiers;
    	      this.serviceNames = defaults.serviceNames;
        }

        @CustomType.Setter
        public Builder artifactDisplayNames(List<String> artifactDisplayNames) {
            if (artifactDisplayNames == null) {
              throw new MissingRequiredPropertyException("GetPipelineFiltersFilterPropertyModulePropertiesCd", "artifactDisplayNames");
            }
            this.artifactDisplayNames = artifactDisplayNames;
            return this;
        }
        public Builder artifactDisplayNames(String... artifactDisplayNames) {
            return artifactDisplayNames(List.of(artifactDisplayNames));
        }
        @CustomType.Setter
        public Builder deploymentTypes(String deploymentTypes) {
            if (deploymentTypes == null) {
              throw new MissingRequiredPropertyException("GetPipelineFiltersFilterPropertyModulePropertiesCd", "deploymentTypes");
            }
            this.deploymentTypes = deploymentTypes;
            return this;
        }
        @CustomType.Setter
        public Builder environmentNames(List<String> environmentNames) {
            if (environmentNames == null) {
              throw new MissingRequiredPropertyException("GetPipelineFiltersFilterPropertyModulePropertiesCd", "environmentNames");
            }
            this.environmentNames = environmentNames;
            return this;
        }
        public Builder environmentNames(String... environmentNames) {
            return environmentNames(List.of(environmentNames));
        }
        @CustomType.Setter
        public Builder serviceIdentifiers(List<String> serviceIdentifiers) {
            if (serviceIdentifiers == null) {
              throw new MissingRequiredPropertyException("GetPipelineFiltersFilterPropertyModulePropertiesCd", "serviceIdentifiers");
            }
            this.serviceIdentifiers = serviceIdentifiers;
            return this;
        }
        public Builder serviceIdentifiers(String... serviceIdentifiers) {
            return serviceIdentifiers(List.of(serviceIdentifiers));
        }
        @CustomType.Setter
        public Builder serviceNames(List<String> serviceNames) {
            if (serviceNames == null) {
              throw new MissingRequiredPropertyException("GetPipelineFiltersFilterPropertyModulePropertiesCd", "serviceNames");
            }
            this.serviceNames = serviceNames;
            return this;
        }
        public Builder serviceNames(String... serviceNames) {
            return serviceNames(List.of(serviceNames));
        }
        public GetPipelineFiltersFilterPropertyModulePropertiesCd build() {
            final var _resultValue = new GetPipelineFiltersFilterPropertyModulePropertiesCd();
            _resultValue.artifactDisplayNames = artifactDisplayNames;
            _resultValue.deploymentTypes = deploymentTypes;
            _resultValue.environmentNames = environmentNames;
            _resultValue.serviceIdentifiers = serviceIdentifiers;
            _resultValue.serviceNames = serviceNames;
            return _resultValue;
        }
    }
}
