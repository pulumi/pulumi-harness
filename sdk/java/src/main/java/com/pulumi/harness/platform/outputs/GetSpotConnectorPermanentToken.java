// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSpotConnectorPermanentToken {
    /**
     * @return Reference to the Harness secret containing the permanent api token. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    private String apiTokenRef;
    /**
     * @return Connect only using delegates with these tags.
     * 
     */
    private List<String> delegateSelectors;
    /**
     * @return Execute on delegate or not.
     * 
     */
    private Boolean executeOnDelegate;
    /**
     * @return Spot account id.
     * 
     */
    private String spotAccountId;
    /**
     * @return Reference to the Harness secret containing the spot account id. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    private String spotAccountIdRef;

    private GetSpotConnectorPermanentToken() {}
    /**
     * @return Reference to the Harness secret containing the permanent api token. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public String apiTokenRef() {
        return this.apiTokenRef;
    }
    /**
     * @return Connect only using delegates with these tags.
     * 
     */
    public List<String> delegateSelectors() {
        return this.delegateSelectors;
    }
    /**
     * @return Execute on delegate or not.
     * 
     */
    public Boolean executeOnDelegate() {
        return this.executeOnDelegate;
    }
    /**
     * @return Spot account id.
     * 
     */
    public String spotAccountId() {
        return this.spotAccountId;
    }
    /**
     * @return Reference to the Harness secret containing the spot account id. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public String spotAccountIdRef() {
        return this.spotAccountIdRef;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSpotConnectorPermanentToken defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apiTokenRef;
        private List<String> delegateSelectors;
        private Boolean executeOnDelegate;
        private String spotAccountId;
        private String spotAccountIdRef;
        public Builder() {}
        public Builder(GetSpotConnectorPermanentToken defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiTokenRef = defaults.apiTokenRef;
    	      this.delegateSelectors = defaults.delegateSelectors;
    	      this.executeOnDelegate = defaults.executeOnDelegate;
    	      this.spotAccountId = defaults.spotAccountId;
    	      this.spotAccountIdRef = defaults.spotAccountIdRef;
        }

        @CustomType.Setter
        public Builder apiTokenRef(String apiTokenRef) {
            if (apiTokenRef == null) {
              throw new MissingRequiredPropertyException("GetSpotConnectorPermanentToken", "apiTokenRef");
            }
            this.apiTokenRef = apiTokenRef;
            return this;
        }
        @CustomType.Setter
        public Builder delegateSelectors(List<String> delegateSelectors) {
            if (delegateSelectors == null) {
              throw new MissingRequiredPropertyException("GetSpotConnectorPermanentToken", "delegateSelectors");
            }
            this.delegateSelectors = delegateSelectors;
            return this;
        }
        public Builder delegateSelectors(String... delegateSelectors) {
            return delegateSelectors(List.of(delegateSelectors));
        }
        @CustomType.Setter
        public Builder executeOnDelegate(Boolean executeOnDelegate) {
            if (executeOnDelegate == null) {
              throw new MissingRequiredPropertyException("GetSpotConnectorPermanentToken", "executeOnDelegate");
            }
            this.executeOnDelegate = executeOnDelegate;
            return this;
        }
        @CustomType.Setter
        public Builder spotAccountId(String spotAccountId) {
            if (spotAccountId == null) {
              throw new MissingRequiredPropertyException("GetSpotConnectorPermanentToken", "spotAccountId");
            }
            this.spotAccountId = spotAccountId;
            return this;
        }
        @CustomType.Setter
        public Builder spotAccountIdRef(String spotAccountIdRef) {
            if (spotAccountIdRef == null) {
              throw new MissingRequiredPropertyException("GetSpotConnectorPermanentToken", "spotAccountIdRef");
            }
            this.spotAccountIdRef = spotAccountIdRef;
            return this;
        }
        public GetSpotConnectorPermanentToken build() {
            final var _resultValue = new GetSpotConnectorPermanentToken();
            _resultValue.apiTokenRef = apiTokenRef;
            _resultValue.delegateSelectors = delegateSelectors;
            _resultValue.executeOnDelegate = executeOnDelegate;
            _resultValue.spotAccountId = spotAccountId;
            _resultValue.spotAccountIdRef = spotAccountIdRef;
            return _resultValue;
        }
    }
}
