// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class SecretSshkeySshSshPasswordCredential {
    /**
     * @return SSH Password. To reference a password at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a password at the account scope, prefix &#39;account` to the expression: account.{identifier}
     * 
     */
    private String password;
    /**
     * @return SSH Username.
     * 
     */
    private String userName;

    private SecretSshkeySshSshPasswordCredential() {}
    /**
     * @return SSH Password. To reference a password at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a password at the account scope, prefix &#39;account` to the expression: account.{identifier}
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return SSH Username.
     * 
     */
    public String userName() {
        return this.userName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecretSshkeySshSshPasswordCredential defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String password;
        private String userName;
        public Builder() {}
        public Builder(SecretSshkeySshSshPasswordCredential defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.password = defaults.password;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("SecretSshkeySshSshPasswordCredential", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder userName(String userName) {
            if (userName == null) {
              throw new MissingRequiredPropertyException("SecretSshkeySshSshPasswordCredential", "userName");
            }
            this.userName = userName;
            return this;
        }
        public SecretSshkeySshSshPasswordCredential build() {
            final var _resultValue = new SecretSshkeySshSshPasswordCredential();
            _resultValue.password = password;
            _resultValue.userName = userName;
            return _resultValue;
        }
    }
}
