// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.PipelineCentralNotificationRuleCustomNotificationTemplateRefArgs;
import com.pulumi.harness.platform.inputs.PipelineCentralNotificationRuleNotificationConditionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineCentralNotificationRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineCentralNotificationRuleArgs Empty = new PipelineCentralNotificationRuleArgs();

    @Import(name="customNotificationTemplateRef")
    private @Nullable Output<PipelineCentralNotificationRuleCustomNotificationTemplateRefArgs> customNotificationTemplateRef;

    public Optional<Output<PipelineCentralNotificationRuleCustomNotificationTemplateRefArgs>> customNotificationTemplateRef() {
        return Optional.ofNullable(this.customNotificationTemplateRef);
    }

    @Import(name="identifier", required=true)
    private Output<String> identifier;

    public Output<String> identifier() {
        return this.identifier;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="notificationChannelRefs", required=true)
    private Output<List<String>> notificationChannelRefs;

    public Output<List<String>> notificationChannelRefs() {
        return this.notificationChannelRefs;
    }

    @Import(name="notificationConditions", required=true)
    private Output<List<PipelineCentralNotificationRuleNotificationConditionArgs>> notificationConditions;

    public Output<List<PipelineCentralNotificationRuleNotificationConditionArgs>> notificationConditions() {
        return this.notificationConditions;
    }

    @Import(name="org")
    private @Nullable Output<String> org;

    public Optional<Output<String>> org() {
        return Optional.ofNullable(this.org);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private PipelineCentralNotificationRuleArgs() {}

    private PipelineCentralNotificationRuleArgs(PipelineCentralNotificationRuleArgs $) {
        this.customNotificationTemplateRef = $.customNotificationTemplateRef;
        this.identifier = $.identifier;
        this.name = $.name;
        this.notificationChannelRefs = $.notificationChannelRefs;
        this.notificationConditions = $.notificationConditions;
        this.org = $.org;
        this.project = $.project;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineCentralNotificationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineCentralNotificationRuleArgs $;

        public Builder() {
            $ = new PipelineCentralNotificationRuleArgs();
        }

        public Builder(PipelineCentralNotificationRuleArgs defaults) {
            $ = new PipelineCentralNotificationRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder customNotificationTemplateRef(@Nullable Output<PipelineCentralNotificationRuleCustomNotificationTemplateRefArgs> customNotificationTemplateRef) {
            $.customNotificationTemplateRef = customNotificationTemplateRef;
            return this;
        }

        public Builder customNotificationTemplateRef(PipelineCentralNotificationRuleCustomNotificationTemplateRefArgs customNotificationTemplateRef) {
            return customNotificationTemplateRef(Output.of(customNotificationTemplateRef));
        }

        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder notificationChannelRefs(Output<List<String>> notificationChannelRefs) {
            $.notificationChannelRefs = notificationChannelRefs;
            return this;
        }

        public Builder notificationChannelRefs(List<String> notificationChannelRefs) {
            return notificationChannelRefs(Output.of(notificationChannelRefs));
        }

        public Builder notificationChannelRefs(String... notificationChannelRefs) {
            return notificationChannelRefs(List.of(notificationChannelRefs));
        }

        public Builder notificationConditions(Output<List<PipelineCentralNotificationRuleNotificationConditionArgs>> notificationConditions) {
            $.notificationConditions = notificationConditions;
            return this;
        }

        public Builder notificationConditions(List<PipelineCentralNotificationRuleNotificationConditionArgs> notificationConditions) {
            return notificationConditions(Output.of(notificationConditions));
        }

        public Builder notificationConditions(PipelineCentralNotificationRuleNotificationConditionArgs... notificationConditions) {
            return notificationConditions(List.of(notificationConditions));
        }

        public Builder org(@Nullable Output<String> org) {
            $.org = org;
            return this;
        }

        public Builder org(String org) {
            return org(Output.of(org));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public PipelineCentralNotificationRuleArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("PipelineCentralNotificationRuleArgs", "identifier");
            }
            if ($.notificationChannelRefs == null) {
                throw new MissingRequiredPropertyException("PipelineCentralNotificationRuleArgs", "notificationChannelRefs");
            }
            if ($.notificationConditions == null) {
                throw new MissingRequiredPropertyException("PipelineCentralNotificationRuleArgs", "notificationConditions");
            }
            return $;
        }
    }

}
