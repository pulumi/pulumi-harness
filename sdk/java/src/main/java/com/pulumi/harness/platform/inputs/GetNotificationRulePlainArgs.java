// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetNotificationRulePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNotificationRulePlainArgs Empty = new GetNotificationRulePlainArgs();

    /**
     * Identifier of the Notification Rule.
     * 
     */
    @Import(name="identifier", required=true)
    private String identifier;

    /**
     * @return Identifier of the Notification Rule.
     * 
     */
    public String identifier() {
        return this.identifier;
    }

    /**
     * Identifier of the organization in which the Notification Rule is configured.
     * 
     */
    @Import(name="orgId", required=true)
    private String orgId;

    /**
     * @return Identifier of the organization in which the Notification Rule is configured.
     * 
     */
    public String orgId() {
        return this.orgId;
    }

    /**
     * Identifier of the project in which the Notification Rule is configured.
     * 
     */
    @Import(name="projectId", required=true)
    private String projectId;

    /**
     * @return Identifier of the project in which the Notification Rule is configured.
     * 
     */
    public String projectId() {
        return this.projectId;
    }

    private GetNotificationRulePlainArgs() {}

    private GetNotificationRulePlainArgs(GetNotificationRulePlainArgs $) {
        this.identifier = $.identifier;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNotificationRulePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNotificationRulePlainArgs $;

        public Builder() {
            $ = new GetNotificationRulePlainArgs();
        }

        public Builder(GetNotificationRulePlainArgs defaults) {
            $ = new GetNotificationRulePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identifier Identifier of the Notification Rule.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param orgId Identifier of the organization in which the Notification Rule is configured.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param projectId Identifier of the project in which the Notification Rule is configured.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            $.projectId = projectId;
            return this;
        }

        public GetNotificationRulePlainArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("GetNotificationRulePlainArgs", "identifier");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("GetNotificationRulePlainArgs", "orgId");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("GetNotificationRulePlainArgs", "projectId");
            }
            return $;
        }
    }

}
