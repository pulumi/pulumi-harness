// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GetSecretTextAdditionalMetadata;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecretTextResult {
    /**
     * @return Additional Metadata for the Secret
     * 
     */
    private @Nullable List<GetSecretTextAdditionalMetadata> additionalMetadatas;
    /**
     * @return Description of the resource.
     * 
     */
    private String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Unique identifier of the resource.
     * 
     */
    private String identifier;
    /**
     * @return Name of the resource.
     * 
     */
    private @Nullable String name;
    /**
     * @return Unique identifier of the organization.
     * 
     */
    private @Nullable String orgId;
    /**
     * @return Unique identifier of the project.
     * 
     */
    private @Nullable String projectId;
    /**
     * @return Identifier of the Secret Manager used to manage the secret.
     * 
     */
    private String secretManagerIdentifier;
    /**
     * @return Tags to associate with the resource.
     * 
     */
    private List<String> tags;
    /**
     * @return Value of the Secret
     * 
     */
    private String value;
    /**
     * @return This has details to specify if the secret value is Inline or Reference.
     * 
     */
    private String valueType;

    private GetSecretTextResult() {}
    /**
     * @return Additional Metadata for the Secret
     * 
     */
    public List<GetSecretTextAdditionalMetadata> additionalMetadatas() {
        return this.additionalMetadatas == null ? List.of() : this.additionalMetadatas;
    }
    /**
     * @return Description of the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Unique identifier of the resource.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return Name of the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }
    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return Identifier of the Secret Manager used to manage the secret.
     * 
     */
    public String secretManagerIdentifier() {
        return this.secretManagerIdentifier;
    }
    /**
     * @return Tags to associate with the resource.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return Value of the Secret
     * 
     */
    public String value() {
        return this.value;
    }
    /**
     * @return This has details to specify if the secret value is Inline or Reference.
     * 
     */
    public String valueType() {
        return this.valueType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecretTextResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetSecretTextAdditionalMetadata> additionalMetadatas;
        private String description;
        private String id;
        private String identifier;
        private @Nullable String name;
        private @Nullable String orgId;
        private @Nullable String projectId;
        private String secretManagerIdentifier;
        private List<String> tags;
        private String value;
        private String valueType;
        public Builder() {}
        public Builder(GetSecretTextResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalMetadatas = defaults.additionalMetadatas;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.projectId = defaults.projectId;
    	      this.secretManagerIdentifier = defaults.secretManagerIdentifier;
    	      this.tags = defaults.tags;
    	      this.value = defaults.value;
    	      this.valueType = defaults.valueType;
        }

        @CustomType.Setter
        public Builder additionalMetadatas(@Nullable List<GetSecretTextAdditionalMetadata> additionalMetadatas) {

            this.additionalMetadatas = additionalMetadatas;
            return this;
        }
        public Builder additionalMetadatas(GetSecretTextAdditionalMetadata... additionalMetadatas) {
            return additionalMetadatas(List.of(additionalMetadatas));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSecretTextResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecretTextResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            if (identifier == null) {
              throw new MissingRequiredPropertyException("GetSecretTextResult", "identifier");
            }
            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(@Nullable String orgId) {

            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder secretManagerIdentifier(String secretManagerIdentifier) {
            if (secretManagerIdentifier == null) {
              throw new MissingRequiredPropertyException("GetSecretTextResult", "secretManagerIdentifier");
            }
            this.secretManagerIdentifier = secretManagerIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetSecretTextResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder value(String value) {
            if (value == null) {
              throw new MissingRequiredPropertyException("GetSecretTextResult", "value");
            }
            this.value = value;
            return this;
        }
        @CustomType.Setter
        public Builder valueType(String valueType) {
            if (valueType == null) {
              throw new MissingRequiredPropertyException("GetSecretTextResult", "valueType");
            }
            this.valueType = valueType;
            return this;
        }
        public GetSecretTextResult build() {
            final var _resultValue = new GetSecretTextResult();
            _resultValue.additionalMetadatas = additionalMetadatas;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.name = name;
            _resultValue.orgId = orgId;
            _resultValue.projectId = projectId;
            _resultValue.secretManagerIdentifier = secretManagerIdentifier;
            _resultValue.tags = tags;
            _resultValue.value = value;
            _resultValue.valueType = valueType;
            return _resultValue;
        }
    }
}
