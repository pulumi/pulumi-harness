// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cluster.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.cluster.inputs.GetOrchestratorConfigBinpackingPodEvictionThresholdArgs;
import java.util.Objects;


public final class GetOrchestratorConfigBinpackingPodEvictionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetOrchestratorConfigBinpackingPodEvictionArgs Empty = new GetOrchestratorConfigBinpackingPodEvictionArgs();

    /**
     * Minimum Threshold for considering a node as underutilized
     * 
     */
    @Import(name="threshold", required=true)
    private Output<GetOrchestratorConfigBinpackingPodEvictionThresholdArgs> threshold;

    /**
     * @return Minimum Threshold for considering a node as underutilized
     * 
     */
    public Output<GetOrchestratorConfigBinpackingPodEvictionThresholdArgs> threshold() {
        return this.threshold;
    }

    private GetOrchestratorConfigBinpackingPodEvictionArgs() {}

    private GetOrchestratorConfigBinpackingPodEvictionArgs(GetOrchestratorConfigBinpackingPodEvictionArgs $) {
        this.threshold = $.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetOrchestratorConfigBinpackingPodEvictionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetOrchestratorConfigBinpackingPodEvictionArgs $;

        public Builder() {
            $ = new GetOrchestratorConfigBinpackingPodEvictionArgs();
        }

        public Builder(GetOrchestratorConfigBinpackingPodEvictionArgs defaults) {
            $ = new GetOrchestratorConfigBinpackingPodEvictionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param threshold Minimum Threshold for considering a node as underutilized
         * 
         * @return builder
         * 
         */
        public Builder threshold(Output<GetOrchestratorConfigBinpackingPodEvictionThresholdArgs> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold Minimum Threshold for considering a node as underutilized
         * 
         * @return builder
         * 
         */
        public Builder threshold(GetOrchestratorConfigBinpackingPodEvictionThresholdArgs threshold) {
            return threshold(Output.of(threshold));
        }

        public GetOrchestratorConfigBinpackingPodEvictionArgs build() {
            if ($.threshold == null) {
                throw new MissingRequiredPropertyException("GetOrchestratorConfigBinpackingPodEvictionArgs", "threshold");
            }
            return $;
        }
    }

}
