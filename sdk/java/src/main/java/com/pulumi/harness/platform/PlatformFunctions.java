// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.inputs.GetApiKeyArgs;
import com.pulumi.harness.platform.inputs.GetApiKeyPlainArgs;
import com.pulumi.harness.platform.inputs.GetAppDynamicsConnectorArgs;
import com.pulumi.harness.platform.inputs.GetAppDynamicsConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetArtifactoryConnectorArgs;
import com.pulumi.harness.platform.inputs.GetArtifactoryConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetAwsCCConnectorArgs;
import com.pulumi.harness.platform.inputs.GetAwsCCConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetAwsConnectorArgs;
import com.pulumi.harness.platform.inputs.GetAwsConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetAwsKmsConnectorArgs;
import com.pulumi.harness.platform.inputs.GetAwsKmsConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetAwsSecretManagerConnectorArgs;
import com.pulumi.harness.platform.inputs.GetAwsSecretManagerConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetAzureCloudCostConnectorArgs;
import com.pulumi.harness.platform.inputs.GetAzureCloudCostConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetAzureCloudProviderConnectorArgs;
import com.pulumi.harness.platform.inputs.GetAzureCloudProviderConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetAzureKeyVaultConnectorArgs;
import com.pulumi.harness.platform.inputs.GetAzureKeyVaultConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetBitbucketConnectorArgs;
import com.pulumi.harness.platform.inputs.GetBitbucketConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetCcmFiltersArgs;
import com.pulumi.harness.platform.inputs.GetCcmFiltersPlainArgs;
import com.pulumi.harness.platform.inputs.GetCentralNotificationChannelArgs;
import com.pulumi.harness.platform.inputs.GetCentralNotificationChannelPlainArgs;
import com.pulumi.harness.platform.inputs.GetConnectorAzureRepoArgs;
import com.pulumi.harness.platform.inputs.GetConnectorAzureRepoPlainArgs;
import com.pulumi.harness.platform.inputs.GetConnectorCustomSecretManagerArgs;
import com.pulumi.harness.platform.inputs.GetConnectorCustomSecretManagerPlainArgs;
import com.pulumi.harness.platform.inputs.GetConnectorCustomhealthsourceArgs;
import com.pulumi.harness.platform.inputs.GetConnectorCustomhealthsourcePlainArgs;
import com.pulumi.harness.platform.inputs.GetConnectorGcpKmsArgs;
import com.pulumi.harness.platform.inputs.GetConnectorGcpKmsPlainArgs;
import com.pulumi.harness.platform.inputs.GetConnectorJdbcArgs;
import com.pulumi.harness.platform.inputs.GetConnectorJdbcPlainArgs;
import com.pulumi.harness.platform.inputs.GetConnectorPdcArgs;
import com.pulumi.harness.platform.inputs.GetConnectorPdcPlainArgs;
import com.pulumi.harness.platform.inputs.GetConnectorRancherArgs;
import com.pulumi.harness.platform.inputs.GetConnectorRancherPlainArgs;
import com.pulumi.harness.platform.inputs.GetCurrentAccountArgs;
import com.pulumi.harness.platform.inputs.GetCurrentAccountPlainArgs;
import com.pulumi.harness.platform.inputs.GetDashboardFoldersArgs;
import com.pulumi.harness.platform.inputs.GetDashboardFoldersPlainArgs;
import com.pulumi.harness.platform.inputs.GetDashboardsArgs;
import com.pulumi.harness.platform.inputs.GetDashboardsPlainArgs;
import com.pulumi.harness.platform.inputs.GetDatadogConnectorArgs;
import com.pulumi.harness.platform.inputs.GetDatadogConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetDbInstanceArgs;
import com.pulumi.harness.platform.inputs.GetDbInstancePlainArgs;
import com.pulumi.harness.platform.inputs.GetDbSchemaArgs;
import com.pulumi.harness.platform.inputs.GetDbSchemaPlainArgs;
import com.pulumi.harness.platform.inputs.GetDelegatetokenArgs;
import com.pulumi.harness.platform.inputs.GetDelegatetokenPlainArgs;
import com.pulumi.harness.platform.inputs.GetDockerConnectorArgs;
import com.pulumi.harness.platform.inputs.GetDockerConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetDynatraceConnectorArgs;
import com.pulumi.harness.platform.inputs.GetDynatraceConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetElasticsearchConnectorArgs;
import com.pulumi.harness.platform.inputs.GetElasticsearchConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetEnvironmentArgs;
import com.pulumi.harness.platform.inputs.GetEnvironmentClustersMappingArgs;
import com.pulumi.harness.platform.inputs.GetEnvironmentClustersMappingPlainArgs;
import com.pulumi.harness.platform.inputs.GetEnvironmentGroupArgs;
import com.pulumi.harness.platform.inputs.GetEnvironmentGroupPlainArgs;
import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
import com.pulumi.harness.platform.inputs.GetEnvironmentListPlainArgs;
import com.pulumi.harness.platform.inputs.GetEnvironmentPlainArgs;
import com.pulumi.harness.platform.inputs.GetEnvironmentServiceOverridesArgs;
import com.pulumi.harness.platform.inputs.GetEnvironmentServiceOverridesPlainArgs;
import com.pulumi.harness.platform.inputs.GetFileStoreFileArgs;
import com.pulumi.harness.platform.inputs.GetFileStoreFilePlainArgs;
import com.pulumi.harness.platform.inputs.GetFileStoreFolderArgs;
import com.pulumi.harness.platform.inputs.GetFileStoreFolderPlainArgs;
import com.pulumi.harness.platform.inputs.GetFiltersArgs;
import com.pulumi.harness.platform.inputs.GetFiltersPlainArgs;
import com.pulumi.harness.platform.inputs.GetGcpCloudCostConnectorArgs;
import com.pulumi.harness.platform.inputs.GetGcpCloudCostConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetGcpConnectorArgs;
import com.pulumi.harness.platform.inputs.GetGcpConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetGcpSecretManagerConnectorArgs;
import com.pulumi.harness.platform.inputs.GetGcpSecretManagerConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetGitConnectorArgs;
import com.pulumi.harness.platform.inputs.GetGitConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetGithubConnectorArgs;
import com.pulumi.harness.platform.inputs.GetGithubConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetGitlabConnectorArgs;
import com.pulumi.harness.platform.inputs.GetGitlabConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetGitopsAgentArgs;
import com.pulumi.harness.platform.inputs.GetGitopsAgentDeployYamlArgs;
import com.pulumi.harness.platform.inputs.GetGitopsAgentDeployYamlPlainArgs;
import com.pulumi.harness.platform.inputs.GetGitopsAgentOperatorYamlArgs;
import com.pulumi.harness.platform.inputs.GetGitopsAgentOperatorYamlPlainArgs;
import com.pulumi.harness.platform.inputs.GetGitopsAgentPlainArgs;
import com.pulumi.harness.platform.inputs.GetGitopsAppProjectArgs;
import com.pulumi.harness.platform.inputs.GetGitopsAppProjectMappingArgs;
import com.pulumi.harness.platform.inputs.GetGitopsAppProjectMappingPlainArgs;
import com.pulumi.harness.platform.inputs.GetGitopsAppProjectPlainArgs;
import com.pulumi.harness.platform.inputs.GetGitopsApplicationsArgs;
import com.pulumi.harness.platform.inputs.GetGitopsApplicationsPlainArgs;
import com.pulumi.harness.platform.inputs.GetGitopsClusterArgs;
import com.pulumi.harness.platform.inputs.GetGitopsClusterPlainArgs;
import com.pulumi.harness.platform.inputs.GetGitopsFiltersArgs;
import com.pulumi.harness.platform.inputs.GetGitopsFiltersPlainArgs;
import com.pulumi.harness.platform.inputs.GetGitopsGnupgArgs;
import com.pulumi.harness.platform.inputs.GetGitopsGnupgPlainArgs;
import com.pulumi.harness.platform.inputs.GetGitopsRepoCertArgs;
import com.pulumi.harness.platform.inputs.GetGitopsRepoCertPlainArgs;
import com.pulumi.harness.platform.inputs.GetGitopsRepoCredArgs;
import com.pulumi.harness.platform.inputs.GetGitopsRepoCredPlainArgs;
import com.pulumi.harness.platform.inputs.GetGitopsRepositoryArgs;
import com.pulumi.harness.platform.inputs.GetGitopsRepositoryPlainArgs;
import com.pulumi.harness.platform.inputs.GetGitxWebhookArgs;
import com.pulumi.harness.platform.inputs.GetGitxWebhookPlainArgs;
import com.pulumi.harness.platform.inputs.GetHarRegistryArgs;
import com.pulumi.harness.platform.inputs.GetHarRegistryPlainArgs;
import com.pulumi.harness.platform.inputs.GetHelmConnectorArgs;
import com.pulumi.harness.platform.inputs.GetHelmConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetIacmDefaultPipelineArgs;
import com.pulumi.harness.platform.inputs.GetIacmDefaultPipelinePlainArgs;
import com.pulumi.harness.platform.inputs.GetInfraModuleArgs;
import com.pulumi.harness.platform.inputs.GetInfraModulePlainArgs;
import com.pulumi.harness.platform.inputs.GetInfraVariableSetArgs;
import com.pulumi.harness.platform.inputs.GetInfraVariableSetPlainArgs;
import com.pulumi.harness.platform.inputs.GetInfrastructureArgs;
import com.pulumi.harness.platform.inputs.GetInfrastructurePlainArgs;
import com.pulumi.harness.platform.inputs.GetInputSetArgs;
import com.pulumi.harness.platform.inputs.GetInputSetPlainArgs;
import com.pulumi.harness.platform.inputs.GetJenkinsConnectorArgs;
import com.pulumi.harness.platform.inputs.GetJenkinsConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetJiraConnectorArgs;
import com.pulumi.harness.platform.inputs.GetJiraConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetKubernetesCloudCostConnectorArgs;
import com.pulumi.harness.platform.inputs.GetKubernetesCloudCostConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetKubernetesConnectorArgs;
import com.pulumi.harness.platform.inputs.GetKubernetesConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetManualFreezeArgs;
import com.pulumi.harness.platform.inputs.GetManualFreezePlainArgs;
import com.pulumi.harness.platform.inputs.GetMonitoredServiceArgs;
import com.pulumi.harness.platform.inputs.GetMonitoredServicePlainArgs;
import com.pulumi.harness.platform.inputs.GetNexusConnectorArgs;
import com.pulumi.harness.platform.inputs.GetNexusConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetNotificationRuleArgs;
import com.pulumi.harness.platform.inputs.GetNotificationRulePlainArgs;
import com.pulumi.harness.platform.inputs.GetOciHelmConnectorArgs;
import com.pulumi.harness.platform.inputs.GetOciHelmConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetOrganizationArgs;
import com.pulumi.harness.platform.inputs.GetOrganizationPlainArgs;
import com.pulumi.harness.platform.inputs.GetOverridesArgs;
import com.pulumi.harness.platform.inputs.GetOverridesPlainArgs;
import com.pulumi.harness.platform.inputs.GetPagerdutyConnectorArgs;
import com.pulumi.harness.platform.inputs.GetPagerdutyConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetPermissionsArgs;
import com.pulumi.harness.platform.inputs.GetPermissionsPlainArgs;
import com.pulumi.harness.platform.inputs.GetPipelineArgs;
import com.pulumi.harness.platform.inputs.GetPipelineFiltersArgs;
import com.pulumi.harness.platform.inputs.GetPipelineFiltersPlainArgs;
import com.pulumi.harness.platform.inputs.GetPipelineListArgs;
import com.pulumi.harness.platform.inputs.GetPipelineListPlainArgs;
import com.pulumi.harness.platform.inputs.GetPipelinePlainArgs;
import com.pulumi.harness.platform.inputs.GetPolicyArgs;
import com.pulumi.harness.platform.inputs.GetPolicyPlainArgs;
import com.pulumi.harness.platform.inputs.GetPolicySetArgs;
import com.pulumi.harness.platform.inputs.GetPolicySetPlainArgs;
import com.pulumi.harness.platform.inputs.GetProjectArgs;
import com.pulumi.harness.platform.inputs.GetProjectListArgs;
import com.pulumi.harness.platform.inputs.GetProjectListPlainArgs;
import com.pulumi.harness.platform.inputs.GetProjectPlainArgs;
import com.pulumi.harness.platform.inputs.GetPrometheusConnectorArgs;
import com.pulumi.harness.platform.inputs.GetPrometheusConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetProviderArgs;
import com.pulumi.harness.platform.inputs.GetProviderPlainArgs;
import com.pulumi.harness.platform.inputs.GetRepoArgs;
import com.pulumi.harness.platform.inputs.GetRepoPlainArgs;
import com.pulumi.harness.platform.inputs.GetRepoRuleBranchArgs;
import com.pulumi.harness.platform.inputs.GetRepoRuleBranchPlainArgs;
import com.pulumi.harness.platform.inputs.GetRepoWebhookArgs;
import com.pulumi.harness.platform.inputs.GetRepoWebhookPlainArgs;
import com.pulumi.harness.platform.inputs.GetResourceGroupArgs;
import com.pulumi.harness.platform.inputs.GetResourceGroupPlainArgs;
import com.pulumi.harness.platform.inputs.GetRoleAssignmentsArgs;
import com.pulumi.harness.platform.inputs.GetRoleAssignmentsPlainArgs;
import com.pulumi.harness.platform.inputs.GetRolesArgs;
import com.pulumi.harness.platform.inputs.GetRolesPlainArgs;
import com.pulumi.harness.platform.inputs.GetSecretFileArgs;
import com.pulumi.harness.platform.inputs.GetSecretFilePlainArgs;
import com.pulumi.harness.platform.inputs.GetSecretSshkeyArgs;
import com.pulumi.harness.platform.inputs.GetSecretSshkeyPlainArgs;
import com.pulumi.harness.platform.inputs.GetSecretTextArgs;
import com.pulumi.harness.platform.inputs.GetSecretTextPlainArgs;
import com.pulumi.harness.platform.inputs.GetServiceAccountArgs;
import com.pulumi.harness.platform.inputs.GetServiceAccountPlainArgs;
import com.pulumi.harness.platform.inputs.GetServiceArgs;
import com.pulumi.harness.platform.inputs.GetServiceListArgs;
import com.pulumi.harness.platform.inputs.GetServiceListPlainArgs;
import com.pulumi.harness.platform.inputs.GetServiceNowConnectorArgs;
import com.pulumi.harness.platform.inputs.GetServiceNowConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetServiceOverridesV2Args;
import com.pulumi.harness.platform.inputs.GetServiceOverridesV2PlainArgs;
import com.pulumi.harness.platform.inputs.GetServicePlainArgs;
import com.pulumi.harness.platform.inputs.GetSloArgs;
import com.pulumi.harness.platform.inputs.GetSloPlainArgs;
import com.pulumi.harness.platform.inputs.GetSplunkConnectorArgs;
import com.pulumi.harness.platform.inputs.GetSplunkConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetSpotConnectorArgs;
import com.pulumi.harness.platform.inputs.GetSpotConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetSumologicConnectorArgs;
import com.pulumi.harness.platform.inputs.GetSumologicConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetTasConnectorArgs;
import com.pulumi.harness.platform.inputs.GetTasConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetTemplateArgs;
import com.pulumi.harness.platform.inputs.GetTemplateFiltersArgs;
import com.pulumi.harness.platform.inputs.GetTemplateFiltersPlainArgs;
import com.pulumi.harness.platform.inputs.GetTemplatePlainArgs;
import com.pulumi.harness.platform.inputs.GetTerraformCloudConnectorArgs;
import com.pulumi.harness.platform.inputs.GetTerraformCloudConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetTokenArgs;
import com.pulumi.harness.platform.inputs.GetTokenPlainArgs;
import com.pulumi.harness.platform.inputs.GetTriggersArgs;
import com.pulumi.harness.platform.inputs.GetTriggersPlainArgs;
import com.pulumi.harness.platform.inputs.GetUserArgs;
import com.pulumi.harness.platform.inputs.GetUserPlainArgs;
import com.pulumi.harness.platform.inputs.GetUsergroupArgs;
import com.pulumi.harness.platform.inputs.GetUsergroupPlainArgs;
import com.pulumi.harness.platform.inputs.GetVariablesArgs;
import com.pulumi.harness.platform.inputs.GetVariablesPlainArgs;
import com.pulumi.harness.platform.inputs.GetVaultConnectorArgs;
import com.pulumi.harness.platform.inputs.GetVaultConnectorPlainArgs;
import com.pulumi.harness.platform.inputs.GetWorkspaceArgs;
import com.pulumi.harness.platform.inputs.GetWorkspaceOutputValueArgs;
import com.pulumi.harness.platform.inputs.GetWorkspaceOutputValuePlainArgs;
import com.pulumi.harness.platform.inputs.GetWorkspacePlainArgs;
import com.pulumi.harness.platform.outputs.GetApiKeyResult;
import com.pulumi.harness.platform.outputs.GetAppDynamicsConnectorResult;
import com.pulumi.harness.platform.outputs.GetArtifactoryConnectorResult;
import com.pulumi.harness.platform.outputs.GetAwsCCConnectorResult;
import com.pulumi.harness.platform.outputs.GetAwsConnectorResult;
import com.pulumi.harness.platform.outputs.GetAwsKmsConnectorResult;
import com.pulumi.harness.platform.outputs.GetAwsSecretManagerConnectorResult;
import com.pulumi.harness.platform.outputs.GetAzureCloudCostConnectorResult;
import com.pulumi.harness.platform.outputs.GetAzureCloudProviderConnectorResult;
import com.pulumi.harness.platform.outputs.GetAzureKeyVaultConnectorResult;
import com.pulumi.harness.platform.outputs.GetBitbucketConnectorResult;
import com.pulumi.harness.platform.outputs.GetCcmFiltersResult;
import com.pulumi.harness.platform.outputs.GetCentralNotificationChannelResult;
import com.pulumi.harness.platform.outputs.GetConnectorAzureRepoResult;
import com.pulumi.harness.platform.outputs.GetConnectorCustomSecretManagerResult;
import com.pulumi.harness.platform.outputs.GetConnectorCustomhealthsourceResult;
import com.pulumi.harness.platform.outputs.GetConnectorGcpKmsResult;
import com.pulumi.harness.platform.outputs.GetConnectorJdbcResult;
import com.pulumi.harness.platform.outputs.GetConnectorPdcResult;
import com.pulumi.harness.platform.outputs.GetConnectorRancherResult;
import com.pulumi.harness.platform.outputs.GetCurrentAccountResult;
import com.pulumi.harness.platform.outputs.GetCurrentUserResult;
import com.pulumi.harness.platform.outputs.GetDashboardFoldersResult;
import com.pulumi.harness.platform.outputs.GetDashboardsResult;
import com.pulumi.harness.platform.outputs.GetDatadogConnectorResult;
import com.pulumi.harness.platform.outputs.GetDbInstanceResult;
import com.pulumi.harness.platform.outputs.GetDbSchemaResult;
import com.pulumi.harness.platform.outputs.GetDelegatetokenResult;
import com.pulumi.harness.platform.outputs.GetDockerConnectorResult;
import com.pulumi.harness.platform.outputs.GetDynatraceConnectorResult;
import com.pulumi.harness.platform.outputs.GetElasticsearchConnectorResult;
import com.pulumi.harness.platform.outputs.GetEnvironmentClustersMappingResult;
import com.pulumi.harness.platform.outputs.GetEnvironmentGroupResult;
import com.pulumi.harness.platform.outputs.GetEnvironmentListResult;
import com.pulumi.harness.platform.outputs.GetEnvironmentResult;
import com.pulumi.harness.platform.outputs.GetEnvironmentServiceOverridesResult;
import com.pulumi.harness.platform.outputs.GetFileStoreFileResult;
import com.pulumi.harness.platform.outputs.GetFileStoreFolderResult;
import com.pulumi.harness.platform.outputs.GetFiltersResult;
import com.pulumi.harness.platform.outputs.GetGcpCloudCostConnectorResult;
import com.pulumi.harness.platform.outputs.GetGcpConnectorResult;
import com.pulumi.harness.platform.outputs.GetGcpSecretManagerConnectorResult;
import com.pulumi.harness.platform.outputs.GetGitConnectorResult;
import com.pulumi.harness.platform.outputs.GetGithubConnectorResult;
import com.pulumi.harness.platform.outputs.GetGitlabConnectorResult;
import com.pulumi.harness.platform.outputs.GetGitopsAgentDeployYamlResult;
import com.pulumi.harness.platform.outputs.GetGitopsAgentOperatorYamlResult;
import com.pulumi.harness.platform.outputs.GetGitopsAgentResult;
import com.pulumi.harness.platform.outputs.GetGitopsAppProjectMappingResult;
import com.pulumi.harness.platform.outputs.GetGitopsAppProjectResult;
import com.pulumi.harness.platform.outputs.GetGitopsApplicationsResult;
import com.pulumi.harness.platform.outputs.GetGitopsClusterResult;
import com.pulumi.harness.platform.outputs.GetGitopsFiltersResult;
import com.pulumi.harness.platform.outputs.GetGitopsGnupgResult;
import com.pulumi.harness.platform.outputs.GetGitopsRepoCertResult;
import com.pulumi.harness.platform.outputs.GetGitopsRepoCredResult;
import com.pulumi.harness.platform.outputs.GetGitopsRepositoryResult;
import com.pulumi.harness.platform.outputs.GetGitxWebhookResult;
import com.pulumi.harness.platform.outputs.GetHarRegistryResult;
import com.pulumi.harness.platform.outputs.GetHelmConnectorResult;
import com.pulumi.harness.platform.outputs.GetIacmDefaultPipelineResult;
import com.pulumi.harness.platform.outputs.GetInfraModuleResult;
import com.pulumi.harness.platform.outputs.GetInfraVariableSetResult;
import com.pulumi.harness.platform.outputs.GetInfrastructureResult;
import com.pulumi.harness.platform.outputs.GetInputSetResult;
import com.pulumi.harness.platform.outputs.GetJenkinsConnectorResult;
import com.pulumi.harness.platform.outputs.GetJiraConnectorResult;
import com.pulumi.harness.platform.outputs.GetKubernetesCloudCostConnectorResult;
import com.pulumi.harness.platform.outputs.GetKubernetesConnectorResult;
import com.pulumi.harness.platform.outputs.GetManualFreezeResult;
import com.pulumi.harness.platform.outputs.GetMonitoredServiceResult;
import com.pulumi.harness.platform.outputs.GetNexusConnectorResult;
import com.pulumi.harness.platform.outputs.GetNotificationRuleResult;
import com.pulumi.harness.platform.outputs.GetOciHelmConnectorResult;
import com.pulumi.harness.platform.outputs.GetOrganizationResult;
import com.pulumi.harness.platform.outputs.GetOverridesResult;
import com.pulumi.harness.platform.outputs.GetPagerdutyConnectorResult;
import com.pulumi.harness.platform.outputs.GetPermissionsResult;
import com.pulumi.harness.platform.outputs.GetPipelineFiltersResult;
import com.pulumi.harness.platform.outputs.GetPipelineListResult;
import com.pulumi.harness.platform.outputs.GetPipelineResult;
import com.pulumi.harness.platform.outputs.GetPolicyResult;
import com.pulumi.harness.platform.outputs.GetPolicySetResult;
import com.pulumi.harness.platform.outputs.GetProjectListResult;
import com.pulumi.harness.platform.outputs.GetProjectResult;
import com.pulumi.harness.platform.outputs.GetPrometheusConnectorResult;
import com.pulumi.harness.platform.outputs.GetProviderResult;
import com.pulumi.harness.platform.outputs.GetRepoResult;
import com.pulumi.harness.platform.outputs.GetRepoRuleBranchResult;
import com.pulumi.harness.platform.outputs.GetRepoWebhookResult;
import com.pulumi.harness.platform.outputs.GetResourceGroupResult;
import com.pulumi.harness.platform.outputs.GetRoleAssignmentsResult;
import com.pulumi.harness.platform.outputs.GetRolesResult;
import com.pulumi.harness.platform.outputs.GetSecretFileResult;
import com.pulumi.harness.platform.outputs.GetSecretSshkeyResult;
import com.pulumi.harness.platform.outputs.GetSecretTextResult;
import com.pulumi.harness.platform.outputs.GetServiceAccountResult;
import com.pulumi.harness.platform.outputs.GetServiceListResult;
import com.pulumi.harness.platform.outputs.GetServiceNowConnectorResult;
import com.pulumi.harness.platform.outputs.GetServiceOverridesV2Result;
import com.pulumi.harness.platform.outputs.GetServiceResult;
import com.pulumi.harness.platform.outputs.GetSloResult;
import com.pulumi.harness.platform.outputs.GetSplunkConnectorResult;
import com.pulumi.harness.platform.outputs.GetSpotConnectorResult;
import com.pulumi.harness.platform.outputs.GetSumologicConnectorResult;
import com.pulumi.harness.platform.outputs.GetTasConnectorResult;
import com.pulumi.harness.platform.outputs.GetTemplateFiltersResult;
import com.pulumi.harness.platform.outputs.GetTemplateResult;
import com.pulumi.harness.platform.outputs.GetTerraformCloudConnectorResult;
import com.pulumi.harness.platform.outputs.GetTokenResult;
import com.pulumi.harness.platform.outputs.GetTriggersResult;
import com.pulumi.harness.platform.outputs.GetUserResult;
import com.pulumi.harness.platform.outputs.GetUsergroupResult;
import com.pulumi.harness.platform.outputs.GetVariablesResult;
import com.pulumi.harness.platform.outputs.GetVaultConnectorResult;
import com.pulumi.harness.platform.outputs.GetWorkspaceOutputValueResult;
import com.pulumi.harness.platform.outputs.GetWorkspaceResult;
import com.pulumi.resources.InvokeArgs;
import java.util.concurrent.CompletableFuture;

public final class PlatformFunctions {
    /**
     * Use this data source to retrieve information about a Harness API Key. API Keys are used to authenticate and authorize access to Harness Platform resources.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetApiKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getApiKey(GetApiKeyArgs.builder()
     *             .identifier("test_apikey")
     *             .name("test_apikey")
     *             .parentId("parent_id")
     *             .apikeyType("USER")
     *             .accountId("account_id")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetApiKeyResult> getApiKey(GetApiKeyArgs args) {
        return getApiKey(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a Harness API Key. API Keys are used to authenticate and authorize access to Harness Platform resources.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetApiKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getApiKey(GetApiKeyArgs.builder()
     *             .identifier("test_apikey")
     *             .name("test_apikey")
     *             .parentId("parent_id")
     *             .apikeyType("USER")
     *             .accountId("account_id")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetApiKeyResult> getApiKeyPlain(GetApiKeyPlainArgs args) {
        return getApiKeyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a Harness API Key. API Keys are used to authenticate and authorize access to Harness Platform resources.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetApiKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getApiKey(GetApiKeyArgs.builder()
     *             .identifier("test_apikey")
     *             .name("test_apikey")
     *             .parentId("parent_id")
     *             .apikeyType("USER")
     *             .accountId("account_id")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetApiKeyResult> getApiKey(GetApiKeyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getApiKey:getApiKey", TypeShape.of(GetApiKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a Harness API Key. API Keys are used to authenticate and authorize access to Harness Platform resources.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetApiKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getApiKey(GetApiKeyArgs.builder()
     *             .identifier("test_apikey")
     *             .name("test_apikey")
     *             .parentId("parent_id")
     *             .apikeyType("USER")
     *             .accountId("account_id")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetApiKeyResult> getApiKey(GetApiKeyArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getApiKey:getApiKey", TypeShape.of(GetApiKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a Harness API Key. API Keys are used to authenticate and authorize access to Harness Platform resources.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetApiKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getApiKey(GetApiKeyArgs.builder()
     *             .identifier("test_apikey")
     *             .name("test_apikey")
     *             .parentId("parent_id")
     *             .apikeyType("USER")
     *             .accountId("account_id")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetApiKeyResult> getApiKeyPlain(GetApiKeyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getApiKey:getApiKey", TypeShape.of(GetApiKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an App Dynamics connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAppDynamicsConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAppDynamicsConnector(GetAppDynamicsConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAppDynamicsConnectorResult> getAppDynamicsConnector(GetAppDynamicsConnectorArgs args) {
        return getAppDynamicsConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up an App Dynamics connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAppDynamicsConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAppDynamicsConnector(GetAppDynamicsConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAppDynamicsConnectorResult> getAppDynamicsConnectorPlain(GetAppDynamicsConnectorPlainArgs args) {
        return getAppDynamicsConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up an App Dynamics connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAppDynamicsConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAppDynamicsConnector(GetAppDynamicsConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAppDynamicsConnectorResult> getAppDynamicsConnector(GetAppDynamicsConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getAppDynamicsConnector:getAppDynamicsConnector", TypeShape.of(GetAppDynamicsConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an App Dynamics connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAppDynamicsConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAppDynamicsConnector(GetAppDynamicsConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAppDynamicsConnectorResult> getAppDynamicsConnector(GetAppDynamicsConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getAppDynamicsConnector:getAppDynamicsConnector", TypeShape.of(GetAppDynamicsConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an App Dynamics connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAppDynamicsConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAppDynamicsConnector(GetAppDynamicsConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAppDynamicsConnectorResult> getAppDynamicsConnectorPlain(GetAppDynamicsConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getAppDynamicsConnector:getAppDynamicsConnector", TypeShape.of(GetAppDynamicsConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Resource for looking up an App Dynamics connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetArtifactoryConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getArtifactoryConnector(GetArtifactoryConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetArtifactoryConnectorResult> getArtifactoryConnector() {
        return getArtifactoryConnector(GetArtifactoryConnectorArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Resource for looking up an App Dynamics connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetArtifactoryConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getArtifactoryConnector(GetArtifactoryConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetArtifactoryConnectorResult> getArtifactoryConnectorPlain() {
        return getArtifactoryConnectorPlain(GetArtifactoryConnectorPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Resource for looking up an App Dynamics connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetArtifactoryConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getArtifactoryConnector(GetArtifactoryConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetArtifactoryConnectorResult> getArtifactoryConnector(GetArtifactoryConnectorArgs args) {
        return getArtifactoryConnector(args, InvokeOptions.Empty);
    }
    /**
     * Resource for looking up an App Dynamics connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetArtifactoryConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getArtifactoryConnector(GetArtifactoryConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetArtifactoryConnectorResult> getArtifactoryConnectorPlain(GetArtifactoryConnectorPlainArgs args) {
        return getArtifactoryConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Resource for looking up an App Dynamics connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetArtifactoryConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getArtifactoryConnector(GetArtifactoryConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetArtifactoryConnectorResult> getArtifactoryConnector(GetArtifactoryConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getArtifactoryConnector:getArtifactoryConnector", TypeShape.of(GetArtifactoryConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Resource for looking up an App Dynamics connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetArtifactoryConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getArtifactoryConnector(GetArtifactoryConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetArtifactoryConnectorResult> getArtifactoryConnector(GetArtifactoryConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getArtifactoryConnector:getArtifactoryConnector", TypeShape.of(GetArtifactoryConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Resource for looking up an App Dynamics connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetArtifactoryConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getArtifactoryConnector(GetArtifactoryConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetArtifactoryConnectorResult> getArtifactoryConnectorPlain(GetArtifactoryConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getArtifactoryConnector:getArtifactoryConnector", TypeShape.of(GetArtifactoryConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an AWS Cloud Cost connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAwsCCConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAwsCCConnector(GetAwsCCConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAwsCCConnectorResult> getAwsCCConnector(GetAwsCCConnectorArgs args) {
        return getAwsCCConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up an AWS Cloud Cost connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAwsCCConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAwsCCConnector(GetAwsCCConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAwsCCConnectorResult> getAwsCCConnectorPlain(GetAwsCCConnectorPlainArgs args) {
        return getAwsCCConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up an AWS Cloud Cost connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAwsCCConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAwsCCConnector(GetAwsCCConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAwsCCConnectorResult> getAwsCCConnector(GetAwsCCConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getAwsCCConnector:getAwsCCConnector", TypeShape.of(GetAwsCCConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an AWS Cloud Cost connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAwsCCConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAwsCCConnector(GetAwsCCConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAwsCCConnectorResult> getAwsCCConnector(GetAwsCCConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getAwsCCConnector:getAwsCCConnector", TypeShape.of(GetAwsCCConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an AWS Cloud Cost connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAwsCCConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAwsCCConnector(GetAwsCCConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAwsCCConnectorResult> getAwsCCConnectorPlain(GetAwsCCConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getAwsCCConnector:getAwsCCConnector", TypeShape.of(GetAwsCCConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an AWS connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAwsConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAwsConnector(GetAwsConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAwsConnectorResult> getAwsConnector(GetAwsConnectorArgs args) {
        return getAwsConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up an AWS connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAwsConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAwsConnector(GetAwsConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAwsConnectorResult> getAwsConnectorPlain(GetAwsConnectorPlainArgs args) {
        return getAwsConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up an AWS connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAwsConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAwsConnector(GetAwsConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAwsConnectorResult> getAwsConnector(GetAwsConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getAwsConnector:getAwsConnector", TypeShape.of(GetAwsConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an AWS connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAwsConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAwsConnector(GetAwsConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAwsConnectorResult> getAwsConnector(GetAwsConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getAwsConnector:getAwsConnector", TypeShape.of(GetAwsConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an AWS connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAwsConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAwsConnector(GetAwsConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAwsConnectorResult> getAwsConnectorPlain(GetAwsConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getAwsConnector:getAwsConnector", TypeShape.of(GetAwsConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAwsKmsConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAwsKmsConnector(GetAwsKmsConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAwsKmsConnectorResult> getAwsKmsConnector(GetAwsKmsConnectorArgs args) {
        return getAwsKmsConnector(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAwsKmsConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAwsKmsConnector(GetAwsKmsConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAwsKmsConnectorResult> getAwsKmsConnectorPlain(GetAwsKmsConnectorPlainArgs args) {
        return getAwsKmsConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAwsKmsConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAwsKmsConnector(GetAwsKmsConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAwsKmsConnectorResult> getAwsKmsConnector(GetAwsKmsConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getAwsKmsConnector:getAwsKmsConnector", TypeShape.of(GetAwsKmsConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAwsKmsConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAwsKmsConnector(GetAwsKmsConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAwsKmsConnectorResult> getAwsKmsConnector(GetAwsKmsConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getAwsKmsConnector:getAwsKmsConnector", TypeShape.of(GetAwsKmsConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAwsKmsConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAwsKmsConnector(GetAwsKmsConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAwsKmsConnectorResult> getAwsKmsConnectorPlain(GetAwsKmsConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getAwsKmsConnector:getAwsKmsConnector", TypeShape.of(GetAwsKmsConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAwsSecretManagerConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAwsSecretManagerConnector(GetAwsSecretManagerConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAwsSecretManagerConnectorResult> getAwsSecretManagerConnector(GetAwsSecretManagerConnectorArgs args) {
        return getAwsSecretManagerConnector(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAwsSecretManagerConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAwsSecretManagerConnector(GetAwsSecretManagerConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAwsSecretManagerConnectorResult> getAwsSecretManagerConnectorPlain(GetAwsSecretManagerConnectorPlainArgs args) {
        return getAwsSecretManagerConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAwsSecretManagerConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAwsSecretManagerConnector(GetAwsSecretManagerConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAwsSecretManagerConnectorResult> getAwsSecretManagerConnector(GetAwsSecretManagerConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getAwsSecretManagerConnector:getAwsSecretManagerConnector", TypeShape.of(GetAwsSecretManagerConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAwsSecretManagerConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAwsSecretManagerConnector(GetAwsSecretManagerConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAwsSecretManagerConnectorResult> getAwsSecretManagerConnector(GetAwsSecretManagerConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getAwsSecretManagerConnector:getAwsSecretManagerConnector", TypeShape.of(GetAwsSecretManagerConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAwsSecretManagerConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAwsSecretManagerConnector(GetAwsSecretManagerConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAwsSecretManagerConnectorResult> getAwsSecretManagerConnectorPlain(GetAwsSecretManagerConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getAwsSecretManagerConnector:getAwsSecretManagerConnector", TypeShape.of(GetAwsSecretManagerConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an Azure Cloud Cost Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAzureCloudCostConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAzureCloudCostConnector(GetAzureCloudCostConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAzureCloudCostConnectorResult> getAzureCloudCostConnector(GetAzureCloudCostConnectorArgs args) {
        return getAzureCloudCostConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up an Azure Cloud Cost Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAzureCloudCostConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAzureCloudCostConnector(GetAzureCloudCostConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAzureCloudCostConnectorResult> getAzureCloudCostConnectorPlain(GetAzureCloudCostConnectorPlainArgs args) {
        return getAzureCloudCostConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up an Azure Cloud Cost Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAzureCloudCostConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAzureCloudCostConnector(GetAzureCloudCostConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAzureCloudCostConnectorResult> getAzureCloudCostConnector(GetAzureCloudCostConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getAzureCloudCostConnector:getAzureCloudCostConnector", TypeShape.of(GetAzureCloudCostConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an Azure Cloud Cost Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAzureCloudCostConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAzureCloudCostConnector(GetAzureCloudCostConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAzureCloudCostConnectorResult> getAzureCloudCostConnector(GetAzureCloudCostConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getAzureCloudCostConnector:getAzureCloudCostConnector", TypeShape.of(GetAzureCloudCostConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an Azure Cloud Cost Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAzureCloudCostConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAzureCloudCostConnector(GetAzureCloudCostConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAzureCloudCostConnectorResult> getAzureCloudCostConnectorPlain(GetAzureCloudCostConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getAzureCloudCostConnector:getAzureCloudCostConnector", TypeShape.of(GetAzureCloudCostConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an Azure Cloud Provider Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAzureCloudProviderConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAzureCloudProviderConnector(GetAzureCloudProviderConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAzureCloudProviderConnectorResult> getAzureCloudProviderConnector(GetAzureCloudProviderConnectorArgs args) {
        return getAzureCloudProviderConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up an Azure Cloud Provider Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAzureCloudProviderConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAzureCloudProviderConnector(GetAzureCloudProviderConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAzureCloudProviderConnectorResult> getAzureCloudProviderConnectorPlain(GetAzureCloudProviderConnectorPlainArgs args) {
        return getAzureCloudProviderConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up an Azure Cloud Provider Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAzureCloudProviderConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAzureCloudProviderConnector(GetAzureCloudProviderConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAzureCloudProviderConnectorResult> getAzureCloudProviderConnector(GetAzureCloudProviderConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getAzureCloudProviderConnector:getAzureCloudProviderConnector", TypeShape.of(GetAzureCloudProviderConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an Azure Cloud Provider Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAzureCloudProviderConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAzureCloudProviderConnector(GetAzureCloudProviderConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAzureCloudProviderConnectorResult> getAzureCloudProviderConnector(GetAzureCloudProviderConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getAzureCloudProviderConnector:getAzureCloudProviderConnector", TypeShape.of(GetAzureCloudProviderConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an Azure Cloud Provider Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAzureCloudProviderConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAzureCloudProviderConnector(GetAzureCloudProviderConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAzureCloudProviderConnectorResult> getAzureCloudProviderConnectorPlain(GetAzureCloudProviderConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getAzureCloudProviderConnector:getAzureCloudProviderConnector", TypeShape.of(GetAzureCloudProviderConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAzureKeyVaultConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAzureKeyVaultConnector(GetAzureKeyVaultConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAzureKeyVaultConnectorResult> getAzureKeyVaultConnector(GetAzureKeyVaultConnectorArgs args) {
        return getAzureKeyVaultConnector(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAzureKeyVaultConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAzureKeyVaultConnector(GetAzureKeyVaultConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAzureKeyVaultConnectorResult> getAzureKeyVaultConnectorPlain(GetAzureKeyVaultConnectorPlainArgs args) {
        return getAzureKeyVaultConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAzureKeyVaultConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAzureKeyVaultConnector(GetAzureKeyVaultConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAzureKeyVaultConnectorResult> getAzureKeyVaultConnector(GetAzureKeyVaultConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getAzureKeyVaultConnector:getAzureKeyVaultConnector", TypeShape.of(GetAzureKeyVaultConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAzureKeyVaultConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAzureKeyVaultConnector(GetAzureKeyVaultConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAzureKeyVaultConnectorResult> getAzureKeyVaultConnector(GetAzureKeyVaultConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getAzureKeyVaultConnector:getAzureKeyVaultConnector", TypeShape.of(GetAzureKeyVaultConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetAzureKeyVaultConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getAzureKeyVaultConnector(GetAzureKeyVaultConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAzureKeyVaultConnectorResult> getAzureKeyVaultConnectorPlain(GetAzureKeyVaultConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getAzureKeyVaultConnector:getAzureKeyVaultConnector", TypeShape.of(GetAzureKeyVaultConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Bitbucket connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetBitbucketConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getBitbucketConnector(GetBitbucketConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetBitbucketConnectorResult> getBitbucketConnector(GetBitbucketConnectorArgs args) {
        return getBitbucketConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Bitbucket connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetBitbucketConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getBitbucketConnector(GetBitbucketConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetBitbucketConnectorResult> getBitbucketConnectorPlain(GetBitbucketConnectorPlainArgs args) {
        return getBitbucketConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Bitbucket connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetBitbucketConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getBitbucketConnector(GetBitbucketConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetBitbucketConnectorResult> getBitbucketConnector(GetBitbucketConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getBitbucketConnector:getBitbucketConnector", TypeShape.of(GetBitbucketConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Bitbucket connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetBitbucketConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getBitbucketConnector(GetBitbucketConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetBitbucketConnectorResult> getBitbucketConnector(GetBitbucketConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getBitbucketConnector:getBitbucketConnector", TypeShape.of(GetBitbucketConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Bitbucket connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetBitbucketConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getBitbucketConnector(GetBitbucketConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetBitbucketConnectorResult> getBitbucketConnectorPlain(GetBitbucketConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getBitbucketConnector:getBitbucketConnector", TypeShape.of(GetBitbucketConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness CCM Filter.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetCcmFiltersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getCcmFilters(GetCcmFiltersArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .type("CCMRecommendation")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCcmFiltersResult> getCcmFilters(GetCcmFiltersArgs args) {
        return getCcmFilters(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness CCM Filter.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetCcmFiltersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getCcmFilters(GetCcmFiltersArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .type("CCMRecommendation")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCcmFiltersResult> getCcmFiltersPlain(GetCcmFiltersPlainArgs args) {
        return getCcmFiltersPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness CCM Filter.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetCcmFiltersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getCcmFilters(GetCcmFiltersArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .type("CCMRecommendation")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCcmFiltersResult> getCcmFilters(GetCcmFiltersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getCcmFilters:getCcmFilters", TypeShape.of(GetCcmFiltersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness CCM Filter.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetCcmFiltersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getCcmFilters(GetCcmFiltersArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .type("CCMRecommendation")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCcmFiltersResult> getCcmFilters(GetCcmFiltersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getCcmFilters:getCcmFilters", TypeShape.of(GetCcmFiltersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness CCM Filter.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetCcmFiltersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getCcmFilters(GetCcmFiltersArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .type("CCMRecommendation")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCcmFiltersResult> getCcmFiltersPlain(GetCcmFiltersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getCcmFilters:getCcmFilters", TypeShape.of(GetCcmFiltersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a central notification channel in Harness.
     * 
     */
    public static Output<GetCentralNotificationChannelResult> getCentralNotificationChannel(GetCentralNotificationChannelArgs args) {
        return getCentralNotificationChannel(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a central notification channel in Harness.
     * 
     */
    public static CompletableFuture<GetCentralNotificationChannelResult> getCentralNotificationChannelPlain(GetCentralNotificationChannelPlainArgs args) {
        return getCentralNotificationChannelPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a central notification channel in Harness.
     * 
     */
    public static Output<GetCentralNotificationChannelResult> getCentralNotificationChannel(GetCentralNotificationChannelArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getCentralNotificationChannel:getCentralNotificationChannel", TypeShape.of(GetCentralNotificationChannelResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a central notification channel in Harness.
     * 
     */
    public static Output<GetCentralNotificationChannelResult> getCentralNotificationChannel(GetCentralNotificationChannelArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getCentralNotificationChannel:getCentralNotificationChannel", TypeShape.of(GetCentralNotificationChannelResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a central notification channel in Harness.
     * 
     */
    public static CompletableFuture<GetCentralNotificationChannelResult> getCentralNotificationChannelPlain(GetCentralNotificationChannelPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getCentralNotificationChannel:getCentralNotificationChannel", TypeShape.of(GetCentralNotificationChannelResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetConnectorAzureRepoResult> getConnectorAzureRepo(GetConnectorAzureRepoArgs args) {
        return getConnectorAzureRepo(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetConnectorAzureRepoResult> getConnectorAzureRepoPlain(GetConnectorAzureRepoPlainArgs args) {
        return getConnectorAzureRepoPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetConnectorAzureRepoResult> getConnectorAzureRepo(GetConnectorAzureRepoArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getConnectorAzureRepo:getConnectorAzureRepo", TypeShape.of(GetConnectorAzureRepoResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetConnectorAzureRepoResult> getConnectorAzureRepo(GetConnectorAzureRepoArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getConnectorAzureRepo:getConnectorAzureRepo", TypeShape.of(GetConnectorAzureRepoResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetConnectorAzureRepoResult> getConnectorAzureRepoPlain(GetConnectorAzureRepoPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getConnectorAzureRepo:getConnectorAzureRepo", TypeShape.of(GetConnectorAzureRepoResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetConnectorCustomSecretManagerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getConnectorCustomSecretManager(GetConnectorCustomSecretManagerArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectorCustomSecretManagerResult> getConnectorCustomSecretManager(GetConnectorCustomSecretManagerArgs args) {
        return getConnectorCustomSecretManager(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetConnectorCustomSecretManagerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getConnectorCustomSecretManager(GetConnectorCustomSecretManagerArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConnectorCustomSecretManagerResult> getConnectorCustomSecretManagerPlain(GetConnectorCustomSecretManagerPlainArgs args) {
        return getConnectorCustomSecretManagerPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetConnectorCustomSecretManagerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getConnectorCustomSecretManager(GetConnectorCustomSecretManagerArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectorCustomSecretManagerResult> getConnectorCustomSecretManager(GetConnectorCustomSecretManagerArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getConnectorCustomSecretManager:getConnectorCustomSecretManager", TypeShape.of(GetConnectorCustomSecretManagerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetConnectorCustomSecretManagerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getConnectorCustomSecretManager(GetConnectorCustomSecretManagerArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectorCustomSecretManagerResult> getConnectorCustomSecretManager(GetConnectorCustomSecretManagerArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getConnectorCustomSecretManager:getConnectorCustomSecretManager", TypeShape.of(GetConnectorCustomSecretManagerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetConnectorCustomSecretManagerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getConnectorCustomSecretManager(GetConnectorCustomSecretManagerArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConnectorCustomSecretManagerResult> getConnectorCustomSecretManagerPlain(GetConnectorCustomSecretManagerPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getConnectorCustomSecretManager:getConnectorCustomSecretManager", TypeShape.of(GetConnectorCustomSecretManagerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Custom Health source connector.
     * 
     */
    public static Output<GetConnectorCustomhealthsourceResult> getConnectorCustomhealthsource(GetConnectorCustomhealthsourceArgs args) {
        return getConnectorCustomhealthsource(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Custom Health source connector.
     * 
     */
    public static CompletableFuture<GetConnectorCustomhealthsourceResult> getConnectorCustomhealthsourcePlain(GetConnectorCustomhealthsourcePlainArgs args) {
        return getConnectorCustomhealthsourcePlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Custom Health source connector.
     * 
     */
    public static Output<GetConnectorCustomhealthsourceResult> getConnectorCustomhealthsource(GetConnectorCustomhealthsourceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getConnectorCustomhealthsource:getConnectorCustomhealthsource", TypeShape.of(GetConnectorCustomhealthsourceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Custom Health source connector.
     * 
     */
    public static Output<GetConnectorCustomhealthsourceResult> getConnectorCustomhealthsource(GetConnectorCustomhealthsourceArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getConnectorCustomhealthsource:getConnectorCustomhealthsource", TypeShape.of(GetConnectorCustomhealthsourceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Custom Health source connector.
     * 
     */
    public static CompletableFuture<GetConnectorCustomhealthsourceResult> getConnectorCustomhealthsourcePlain(GetConnectorCustomhealthsourcePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getConnectorCustomhealthsource:getConnectorCustomhealthsource", TypeShape.of(GetConnectorCustomhealthsourceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up GCP KMS connector.
     * 
     */
    public static Output<GetConnectorGcpKmsResult> getConnectorGcpKms(GetConnectorGcpKmsArgs args) {
        return getConnectorGcpKms(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up GCP KMS connector.
     * 
     */
    public static CompletableFuture<GetConnectorGcpKmsResult> getConnectorGcpKmsPlain(GetConnectorGcpKmsPlainArgs args) {
        return getConnectorGcpKmsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up GCP KMS connector.
     * 
     */
    public static Output<GetConnectorGcpKmsResult> getConnectorGcpKms(GetConnectorGcpKmsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getConnectorGcpKms:getConnectorGcpKms", TypeShape.of(GetConnectorGcpKmsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up GCP KMS connector.
     * 
     */
    public static Output<GetConnectorGcpKmsResult> getConnectorGcpKms(GetConnectorGcpKmsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getConnectorGcpKms:getConnectorGcpKms", TypeShape.of(GetConnectorGcpKmsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up GCP KMS connector.
     * 
     */
    public static CompletableFuture<GetConnectorGcpKmsResult> getConnectorGcpKmsPlain(GetConnectorGcpKmsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getConnectorGcpKms:getConnectorGcpKms", TypeShape.of(GetConnectorGcpKmsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness JDBC Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetConnectorJdbcArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getConnectorJdbc(GetConnectorJdbcArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectorJdbcResult> getConnectorJdbc(GetConnectorJdbcArgs args) {
        return getConnectorJdbc(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness JDBC Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetConnectorJdbcArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getConnectorJdbc(GetConnectorJdbcArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConnectorJdbcResult> getConnectorJdbcPlain(GetConnectorJdbcPlainArgs args) {
        return getConnectorJdbcPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness JDBC Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetConnectorJdbcArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getConnectorJdbc(GetConnectorJdbcArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectorJdbcResult> getConnectorJdbc(GetConnectorJdbcArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getConnectorJdbc:getConnectorJdbc", TypeShape.of(GetConnectorJdbcResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness JDBC Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetConnectorJdbcArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getConnectorJdbc(GetConnectorJdbcArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectorJdbcResult> getConnectorJdbc(GetConnectorJdbcArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getConnectorJdbc:getConnectorJdbc", TypeShape.of(GetConnectorJdbcResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness JDBC Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetConnectorJdbcArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getConnectorJdbc(GetConnectorJdbcArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConnectorJdbcResult> getConnectorJdbcPlain(GetConnectorJdbcPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getConnectorJdbc:getConnectorJdbc", TypeShape.of(GetConnectorJdbcResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Physical data center connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetConnectorPdcArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getConnectorPdc(GetConnectorPdcArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectorPdcResult> getConnectorPdc(GetConnectorPdcArgs args) {
        return getConnectorPdc(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Physical data center connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetConnectorPdcArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getConnectorPdc(GetConnectorPdcArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConnectorPdcResult> getConnectorPdcPlain(GetConnectorPdcPlainArgs args) {
        return getConnectorPdcPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Physical data center connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetConnectorPdcArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getConnectorPdc(GetConnectorPdcArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectorPdcResult> getConnectorPdc(GetConnectorPdcArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getConnectorPdc:getConnectorPdc", TypeShape.of(GetConnectorPdcResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Physical data center connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetConnectorPdcArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getConnectorPdc(GetConnectorPdcArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectorPdcResult> getConnectorPdc(GetConnectorPdcArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getConnectorPdc:getConnectorPdc", TypeShape.of(GetConnectorPdcResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Physical data center connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetConnectorPdcArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getConnectorPdc(GetConnectorPdcArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConnectorPdcResult> getConnectorPdcPlain(GetConnectorPdcPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getConnectorPdc:getConnectorPdc", TypeShape.of(GetConnectorPdcResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for looking up a Rancher connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetConnectorRancherArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getConnectorRancher(GetConnectorRancherArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectorRancherResult> getConnectorRancher(GetConnectorRancherArgs args) {
        return getConnectorRancher(args, InvokeOptions.Empty);
    }
    /**
     * Data source for looking up a Rancher connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetConnectorRancherArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getConnectorRancher(GetConnectorRancherArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConnectorRancherResult> getConnectorRancherPlain(GetConnectorRancherPlainArgs args) {
        return getConnectorRancherPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for looking up a Rancher connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetConnectorRancherArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getConnectorRancher(GetConnectorRancherArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectorRancherResult> getConnectorRancher(GetConnectorRancherArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getConnectorRancher:getConnectorRancher", TypeShape.of(GetConnectorRancherResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for looking up a Rancher connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetConnectorRancherArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getConnectorRancher(GetConnectorRancherArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectorRancherResult> getConnectorRancher(GetConnectorRancherArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getConnectorRancher:getConnectorRancher", TypeShape.of(GetConnectorRancherResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for looking up a Rancher connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetConnectorRancherArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getConnectorRancher(GetConnectorRancherArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConnectorRancherResult> getConnectorRancherPlain(GetConnectorRancherPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getConnectorRancher:getConnectorRancher", TypeShape.of(GetConnectorRancherResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving information on the current Harness account.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetCurrentAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = PlatformFunctions.getCurrentAccount(GetCurrentAccountArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCurrentAccountResult> getCurrentAccount() {
        return getCurrentAccount(GetCurrentAccountArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving information on the current Harness account.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetCurrentAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = PlatformFunctions.getCurrentAccount(GetCurrentAccountArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCurrentAccountResult> getCurrentAccountPlain() {
        return getCurrentAccountPlain(GetCurrentAccountPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving information on the current Harness account.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetCurrentAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = PlatformFunctions.getCurrentAccount(GetCurrentAccountArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCurrentAccountResult> getCurrentAccount(GetCurrentAccountArgs args) {
        return getCurrentAccount(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving information on the current Harness account.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetCurrentAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = PlatformFunctions.getCurrentAccount(GetCurrentAccountArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCurrentAccountResult> getCurrentAccountPlain(GetCurrentAccountPlainArgs args) {
        return getCurrentAccountPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving information on the current Harness account.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetCurrentAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = PlatformFunctions.getCurrentAccount(GetCurrentAccountArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCurrentAccountResult> getCurrentAccount(GetCurrentAccountArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getCurrentAccount:getCurrentAccount", TypeShape.of(GetCurrentAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving information on the current Harness account.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetCurrentAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = PlatformFunctions.getCurrentAccount(GetCurrentAccountArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCurrentAccountResult> getCurrentAccount(GetCurrentAccountArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getCurrentAccount:getCurrentAccount", TypeShape.of(GetCurrentAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving information on the current Harness account.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetCurrentAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = PlatformFunctions.getCurrentAccount(GetCurrentAccountArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCurrentAccountResult> getCurrentAccountPlain(GetCurrentAccountPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getCurrentAccount:getCurrentAccount", TypeShape.of(GetCurrentAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving the current user based on the API key.
     * 
     */
    public static Output<GetCurrentUserResult> getCurrentUser() {
        return getCurrentUser(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving the current user based on the API key.
     * 
     */
    public static CompletableFuture<GetCurrentUserResult> getCurrentUserPlain() {
        return getCurrentUserPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving the current user based on the API key.
     * 
     */
    public static Output<GetCurrentUserResult> getCurrentUser(InvokeArgs args) {
        return getCurrentUser(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving the current user based on the API key.
     * 
     */
    public static CompletableFuture<GetCurrentUserResult> getCurrentUserPlain(InvokeArgs args) {
        return getCurrentUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving the current user based on the API key.
     * 
     */
    public static Output<GetCurrentUserResult> getCurrentUser(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getCurrentUser:getCurrentUser", TypeShape.of(GetCurrentUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving the current user based on the API key.
     * 
     */
    public static Output<GetCurrentUserResult> getCurrentUser(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getCurrentUser:getCurrentUser", TypeShape.of(GetCurrentUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving the current user based on the API key.
     * 
     */
    public static CompletableFuture<GetCurrentUserResult> getCurrentUserPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getCurrentUser:getCurrentUser", TypeShape.of(GetCurrentUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Dashboard Folder.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDashboardFoldersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDashboardFolders(GetDashboardFoldersArgs.builder()
     *             .id("your_folder_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDashboardFoldersResult> getDashboardFolders(GetDashboardFoldersArgs args) {
        return getDashboardFolders(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Dashboard Folder.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDashboardFoldersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDashboardFolders(GetDashboardFoldersArgs.builder()
     *             .id("your_folder_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDashboardFoldersResult> getDashboardFoldersPlain(GetDashboardFoldersPlainArgs args) {
        return getDashboardFoldersPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Dashboard Folder.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDashboardFoldersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDashboardFolders(GetDashboardFoldersArgs.builder()
     *             .id("your_folder_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDashboardFoldersResult> getDashboardFolders(GetDashboardFoldersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getDashboardFolders:getDashboardFolders", TypeShape.of(GetDashboardFoldersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Dashboard Folder.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDashboardFoldersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDashboardFolders(GetDashboardFoldersArgs.builder()
     *             .id("your_folder_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDashboardFoldersResult> getDashboardFolders(GetDashboardFoldersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getDashboardFolders:getDashboardFolders", TypeShape.of(GetDashboardFoldersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Dashboard Folder.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDashboardFoldersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDashboardFolders(GetDashboardFoldersArgs.builder()
     *             .id("your_folder_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDashboardFoldersResult> getDashboardFoldersPlain(GetDashboardFoldersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getDashboardFolders:getDashboardFolders", TypeShape.of(GetDashboardFoldersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Dashboard.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDashboardsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDashboards(GetDashboardsArgs.builder()
     *             .id("48525")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDashboardsResult> getDashboards(GetDashboardsArgs args) {
        return getDashboards(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Dashboard.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDashboardsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDashboards(GetDashboardsArgs.builder()
     *             .id("48525")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDashboardsResult> getDashboardsPlain(GetDashboardsPlainArgs args) {
        return getDashboardsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Dashboard.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDashboardsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDashboards(GetDashboardsArgs.builder()
     *             .id("48525")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDashboardsResult> getDashboards(GetDashboardsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getDashboards:getDashboards", TypeShape.of(GetDashboardsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Dashboard.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDashboardsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDashboards(GetDashboardsArgs.builder()
     *             .id("48525")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDashboardsResult> getDashboards(GetDashboardsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getDashboards:getDashboards", TypeShape.of(GetDashboardsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Dashboard.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDashboardsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDashboards(GetDashboardsArgs.builder()
     *             .id("48525")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDashboardsResult> getDashboardsPlain(GetDashboardsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getDashboards:getDashboards", TypeShape.of(GetDashboardsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Datadog connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDatadogConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDatadogConnector(GetDatadogConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDatadogConnectorResult> getDatadogConnector(GetDatadogConnectorArgs args) {
        return getDatadogConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Datadog connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDatadogConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDatadogConnector(GetDatadogConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDatadogConnectorResult> getDatadogConnectorPlain(GetDatadogConnectorPlainArgs args) {
        return getDatadogConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Datadog connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDatadogConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDatadogConnector(GetDatadogConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDatadogConnectorResult> getDatadogConnector(GetDatadogConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getDatadogConnector:getDatadogConnector", TypeShape.of(GetDatadogConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Datadog connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDatadogConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDatadogConnector(GetDatadogConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDatadogConnectorResult> getDatadogConnector(GetDatadogConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getDatadogConnector:getDatadogConnector", TypeShape.of(GetDatadogConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Datadog connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDatadogConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDatadogConnector(GetDatadogConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDatadogConnectorResult> getDatadogConnectorPlain(GetDatadogConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getDatadogConnector:getDatadogConnector", TypeShape.of(GetDatadogConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness DBDevOps Instance.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDbInstanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDbInstance(GetDbInstanceArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .schema("schema1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDbInstanceResult> getDbInstance(GetDbInstanceArgs args) {
        return getDbInstance(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness DBDevOps Instance.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDbInstanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDbInstance(GetDbInstanceArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .schema("schema1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDbInstanceResult> getDbInstancePlain(GetDbInstancePlainArgs args) {
        return getDbInstancePlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness DBDevOps Instance.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDbInstanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDbInstance(GetDbInstanceArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .schema("schema1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDbInstanceResult> getDbInstance(GetDbInstanceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getDbInstance:getDbInstance", TypeShape.of(GetDbInstanceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness DBDevOps Instance.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDbInstanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDbInstance(GetDbInstanceArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .schema("schema1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDbInstanceResult> getDbInstance(GetDbInstanceArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getDbInstance:getDbInstance", TypeShape.of(GetDbInstanceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness DBDevOps Instance.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDbInstanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDbInstance(GetDbInstanceArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .schema("schema1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDbInstanceResult> getDbInstancePlain(GetDbInstancePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getDbInstance:getDbInstance", TypeShape.of(GetDbInstanceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness DBDevOps Schema.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDbSchemaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDbSchema(GetDbSchemaArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDbSchemaResult> getDbSchema(GetDbSchemaArgs args) {
        return getDbSchema(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness DBDevOps Schema.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDbSchemaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDbSchema(GetDbSchemaArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDbSchemaResult> getDbSchemaPlain(GetDbSchemaPlainArgs args) {
        return getDbSchemaPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness DBDevOps Schema.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDbSchemaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDbSchema(GetDbSchemaArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDbSchemaResult> getDbSchema(GetDbSchemaArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getDbSchema:getDbSchema", TypeShape.of(GetDbSchemaResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness DBDevOps Schema.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDbSchemaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDbSchema(GetDbSchemaArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDbSchemaResult> getDbSchema(GetDbSchemaArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getDbSchema:getDbSchema", TypeShape.of(GetDbSchemaResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness DBDevOps Schema.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDbSchemaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDbSchema(GetDbSchemaArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDbSchemaResult> getDbSchemaPlain(GetDbSchemaPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getDbSchema:getDbSchema", TypeShape.of(GetDbSchemaResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness delegate Token.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDelegatetokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Look up a delegate token at account level by name
     *         final var accountLevel = PlatformFunctions.getDelegatetoken(GetDelegatetokenArgs.builder()
     *             .name("account-delegate-token")
     *             .accountId("account_id")
     *             .build());
     * 
     *         // Look up a delegate token at organization level
     *         final var orgLevel = PlatformFunctions.getDelegatetoken(GetDelegatetokenArgs.builder()
     *             .name("org-delegate-token")
     *             .accountId("account_id")
     *             .orgId("org_id")
     *             .build());
     * 
     *         // Look up a delegate token at project level
     *         final var projectLevel = PlatformFunctions.getDelegatetoken(GetDelegatetokenArgs.builder()
     *             .name("project-delegate-token")
     *             .accountId("account_id")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDelegatetokenResult> getDelegatetoken(GetDelegatetokenArgs args) {
        return getDelegatetoken(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness delegate Token.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDelegatetokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Look up a delegate token at account level by name
     *         final var accountLevel = PlatformFunctions.getDelegatetoken(GetDelegatetokenArgs.builder()
     *             .name("account-delegate-token")
     *             .accountId("account_id")
     *             .build());
     * 
     *         // Look up a delegate token at organization level
     *         final var orgLevel = PlatformFunctions.getDelegatetoken(GetDelegatetokenArgs.builder()
     *             .name("org-delegate-token")
     *             .accountId("account_id")
     *             .orgId("org_id")
     *             .build());
     * 
     *         // Look up a delegate token at project level
     *         final var projectLevel = PlatformFunctions.getDelegatetoken(GetDelegatetokenArgs.builder()
     *             .name("project-delegate-token")
     *             .accountId("account_id")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDelegatetokenResult> getDelegatetokenPlain(GetDelegatetokenPlainArgs args) {
        return getDelegatetokenPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness delegate Token.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDelegatetokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Look up a delegate token at account level by name
     *         final var accountLevel = PlatformFunctions.getDelegatetoken(GetDelegatetokenArgs.builder()
     *             .name("account-delegate-token")
     *             .accountId("account_id")
     *             .build());
     * 
     *         // Look up a delegate token at organization level
     *         final var orgLevel = PlatformFunctions.getDelegatetoken(GetDelegatetokenArgs.builder()
     *             .name("org-delegate-token")
     *             .accountId("account_id")
     *             .orgId("org_id")
     *             .build());
     * 
     *         // Look up a delegate token at project level
     *         final var projectLevel = PlatformFunctions.getDelegatetoken(GetDelegatetokenArgs.builder()
     *             .name("project-delegate-token")
     *             .accountId("account_id")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDelegatetokenResult> getDelegatetoken(GetDelegatetokenArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getDelegatetoken:getDelegatetoken", TypeShape.of(GetDelegatetokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness delegate Token.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDelegatetokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Look up a delegate token at account level by name
     *         final var accountLevel = PlatformFunctions.getDelegatetoken(GetDelegatetokenArgs.builder()
     *             .name("account-delegate-token")
     *             .accountId("account_id")
     *             .build());
     * 
     *         // Look up a delegate token at organization level
     *         final var orgLevel = PlatformFunctions.getDelegatetoken(GetDelegatetokenArgs.builder()
     *             .name("org-delegate-token")
     *             .accountId("account_id")
     *             .orgId("org_id")
     *             .build());
     * 
     *         // Look up a delegate token at project level
     *         final var projectLevel = PlatformFunctions.getDelegatetoken(GetDelegatetokenArgs.builder()
     *             .name("project-delegate-token")
     *             .accountId("account_id")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDelegatetokenResult> getDelegatetoken(GetDelegatetokenArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getDelegatetoken:getDelegatetoken", TypeShape.of(GetDelegatetokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness delegate Token.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDelegatetokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Look up a delegate token at account level by name
     *         final var accountLevel = PlatformFunctions.getDelegatetoken(GetDelegatetokenArgs.builder()
     *             .name("account-delegate-token")
     *             .accountId("account_id")
     *             .build());
     * 
     *         // Look up a delegate token at organization level
     *         final var orgLevel = PlatformFunctions.getDelegatetoken(GetDelegatetokenArgs.builder()
     *             .name("org-delegate-token")
     *             .accountId("account_id")
     *             .orgId("org_id")
     *             .build());
     * 
     *         // Look up a delegate token at project level
     *         final var projectLevel = PlatformFunctions.getDelegatetoken(GetDelegatetokenArgs.builder()
     *             .name("project-delegate-token")
     *             .accountId("account_id")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDelegatetokenResult> getDelegatetokenPlain(GetDelegatetokenPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getDelegatetoken:getDelegatetoken", TypeShape.of(GetDelegatetokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Datadog connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDockerConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDockerConnector(GetDockerConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDockerConnectorResult> getDockerConnector(GetDockerConnectorArgs args) {
        return getDockerConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Datadog connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDockerConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDockerConnector(GetDockerConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDockerConnectorResult> getDockerConnectorPlain(GetDockerConnectorPlainArgs args) {
        return getDockerConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Datadog connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDockerConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDockerConnector(GetDockerConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDockerConnectorResult> getDockerConnector(GetDockerConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getDockerConnector:getDockerConnector", TypeShape.of(GetDockerConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Datadog connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDockerConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDockerConnector(GetDockerConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDockerConnectorResult> getDockerConnector(GetDockerConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getDockerConnector:getDockerConnector", TypeShape.of(GetDockerConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Datadog connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDockerConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDockerConnector(GetDockerConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDockerConnectorResult> getDockerConnectorPlain(GetDockerConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getDockerConnector:getDockerConnector", TypeShape.of(GetDockerConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Dynatrace connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDynatraceConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDynatraceConnector(GetDynatraceConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDynatraceConnectorResult> getDynatraceConnector(GetDynatraceConnectorArgs args) {
        return getDynatraceConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Dynatrace connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDynatraceConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDynatraceConnector(GetDynatraceConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDynatraceConnectorResult> getDynatraceConnectorPlain(GetDynatraceConnectorPlainArgs args) {
        return getDynatraceConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Dynatrace connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDynatraceConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDynatraceConnector(GetDynatraceConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDynatraceConnectorResult> getDynatraceConnector(GetDynatraceConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getDynatraceConnector:getDynatraceConnector", TypeShape.of(GetDynatraceConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Dynatrace connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDynatraceConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDynatraceConnector(GetDynatraceConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDynatraceConnectorResult> getDynatraceConnector(GetDynatraceConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getDynatraceConnector:getDynatraceConnector", TypeShape.of(GetDynatraceConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Dynatrace connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetDynatraceConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getDynatraceConnector(GetDynatraceConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDynatraceConnectorResult> getDynatraceConnectorPlain(GetDynatraceConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getDynatraceConnector:getDynatraceConnector", TypeShape.of(GetDynatraceConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an ElasticSearch connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetElasticsearchConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getElasticsearchConnector(GetElasticsearchConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetElasticsearchConnectorResult> getElasticsearchConnector(GetElasticsearchConnectorArgs args) {
        return getElasticsearchConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up an ElasticSearch connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetElasticsearchConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getElasticsearchConnector(GetElasticsearchConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetElasticsearchConnectorResult> getElasticsearchConnectorPlain(GetElasticsearchConnectorPlainArgs args) {
        return getElasticsearchConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up an ElasticSearch connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetElasticsearchConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getElasticsearchConnector(GetElasticsearchConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetElasticsearchConnectorResult> getElasticsearchConnector(GetElasticsearchConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getElasticsearchConnector:getElasticsearchConnector", TypeShape.of(GetElasticsearchConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an ElasticSearch connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetElasticsearchConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getElasticsearchConnector(GetElasticsearchConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetElasticsearchConnectorResult> getElasticsearchConnector(GetElasticsearchConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getElasticsearchConnector:getElasticsearchConnector", TypeShape.of(GetElasticsearchConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an ElasticSearch connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetElasticsearchConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getElasticsearchConnector(GetElasticsearchConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetElasticsearchConnectorResult> getElasticsearchConnectorPlain(GetElasticsearchConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getElasticsearchConnector:getElasticsearchConnector", TypeShape.of(GetElasticsearchConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness environment.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironment(GetEnvironmentArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEnvironmentResult> getEnvironment(GetEnvironmentArgs args) {
        return getEnvironment(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness environment.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironment(GetEnvironmentArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetEnvironmentResult> getEnvironmentPlain(GetEnvironmentPlainArgs args) {
        return getEnvironmentPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness environment.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironment(GetEnvironmentArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEnvironmentResult> getEnvironment(GetEnvironmentArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getEnvironment:getEnvironment", TypeShape.of(GetEnvironmentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness environment.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironment(GetEnvironmentArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEnvironmentResult> getEnvironment(GetEnvironmentArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getEnvironment:getEnvironment", TypeShape.of(GetEnvironmentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness environment.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironment(GetEnvironmentArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetEnvironmentResult> getEnvironmentPlain(GetEnvironmentPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getEnvironment:getEnvironment", TypeShape.of(GetEnvironmentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving Harness Gitops clusters mapped to Harness Environment.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentClustersMappingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // data source for gitops clusters mapped to a project level env
     *         final var example = PlatformFunctions.getEnvironmentClustersMapping(GetEnvironmentClustersMappingArgs.builder()
     *             .identifier("mycustomidentifier")
     *             .orgId("orgIdentifer")
     *             .projectId("projectIdentifier")
     *             .envId("exampleEnvId")
     *             .clusters(GetEnvironmentClustersMappingClusterArgs.builder()
     *                 .identifier("incluster")
     *                 .name("in-cluster")
     *                 .agentIdentifier("account.gitopsagentdev")
     *                 .scope("ACCOUNT")
     *                 .build())
     *             .build());
     * 
     *         // data source for two gitops clusters mapped to an account level env
     *         final var example2 = PlatformFunctions.getEnvironmentClustersMapping(GetEnvironmentClustersMappingArgs.builder()
     *             .identifier("mycustomidentifier")
     *             .envId("env1")
     *             .clusters(            
     *                 GetEnvironmentClustersMappingClusterArgs.builder()
     *                     .identifier("clusterA")
     *                     .name("cluster-A")
     *                     .agentIdentifier("account.gitopsagentprod")
     *                     .scope("ACCOUNT")
     *                     .build(),
     *                 GetEnvironmentClustersMappingClusterArgs.builder()
     *                     .identifier("clusterB")
     *                     .name("cluster-B")
     *                     .agentIdentifier("account.gitopsagentprod")
     *                     .scope("ACCOUNT")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEnvironmentClustersMappingResult> getEnvironmentClustersMapping(GetEnvironmentClustersMappingArgs args) {
        return getEnvironmentClustersMapping(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving Harness Gitops clusters mapped to Harness Environment.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentClustersMappingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // data source for gitops clusters mapped to a project level env
     *         final var example = PlatformFunctions.getEnvironmentClustersMapping(GetEnvironmentClustersMappingArgs.builder()
     *             .identifier("mycustomidentifier")
     *             .orgId("orgIdentifer")
     *             .projectId("projectIdentifier")
     *             .envId("exampleEnvId")
     *             .clusters(GetEnvironmentClustersMappingClusterArgs.builder()
     *                 .identifier("incluster")
     *                 .name("in-cluster")
     *                 .agentIdentifier("account.gitopsagentdev")
     *                 .scope("ACCOUNT")
     *                 .build())
     *             .build());
     * 
     *         // data source for two gitops clusters mapped to an account level env
     *         final var example2 = PlatformFunctions.getEnvironmentClustersMapping(GetEnvironmentClustersMappingArgs.builder()
     *             .identifier("mycustomidentifier")
     *             .envId("env1")
     *             .clusters(            
     *                 GetEnvironmentClustersMappingClusterArgs.builder()
     *                     .identifier("clusterA")
     *                     .name("cluster-A")
     *                     .agentIdentifier("account.gitopsagentprod")
     *                     .scope("ACCOUNT")
     *                     .build(),
     *                 GetEnvironmentClustersMappingClusterArgs.builder()
     *                     .identifier("clusterB")
     *                     .name("cluster-B")
     *                     .agentIdentifier("account.gitopsagentprod")
     *                     .scope("ACCOUNT")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetEnvironmentClustersMappingResult> getEnvironmentClustersMappingPlain(GetEnvironmentClustersMappingPlainArgs args) {
        return getEnvironmentClustersMappingPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving Harness Gitops clusters mapped to Harness Environment.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentClustersMappingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // data source for gitops clusters mapped to a project level env
     *         final var example = PlatformFunctions.getEnvironmentClustersMapping(GetEnvironmentClustersMappingArgs.builder()
     *             .identifier("mycustomidentifier")
     *             .orgId("orgIdentifer")
     *             .projectId("projectIdentifier")
     *             .envId("exampleEnvId")
     *             .clusters(GetEnvironmentClustersMappingClusterArgs.builder()
     *                 .identifier("incluster")
     *                 .name("in-cluster")
     *                 .agentIdentifier("account.gitopsagentdev")
     *                 .scope("ACCOUNT")
     *                 .build())
     *             .build());
     * 
     *         // data source for two gitops clusters mapped to an account level env
     *         final var example2 = PlatformFunctions.getEnvironmentClustersMapping(GetEnvironmentClustersMappingArgs.builder()
     *             .identifier("mycustomidentifier")
     *             .envId("env1")
     *             .clusters(            
     *                 GetEnvironmentClustersMappingClusterArgs.builder()
     *                     .identifier("clusterA")
     *                     .name("cluster-A")
     *                     .agentIdentifier("account.gitopsagentprod")
     *                     .scope("ACCOUNT")
     *                     .build(),
     *                 GetEnvironmentClustersMappingClusterArgs.builder()
     *                     .identifier("clusterB")
     *                     .name("cluster-B")
     *                     .agentIdentifier("account.gitopsagentprod")
     *                     .scope("ACCOUNT")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEnvironmentClustersMappingResult> getEnvironmentClustersMapping(GetEnvironmentClustersMappingArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getEnvironmentClustersMapping:getEnvironmentClustersMapping", TypeShape.of(GetEnvironmentClustersMappingResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving Harness Gitops clusters mapped to Harness Environment.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentClustersMappingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // data source for gitops clusters mapped to a project level env
     *         final var example = PlatformFunctions.getEnvironmentClustersMapping(GetEnvironmentClustersMappingArgs.builder()
     *             .identifier("mycustomidentifier")
     *             .orgId("orgIdentifer")
     *             .projectId("projectIdentifier")
     *             .envId("exampleEnvId")
     *             .clusters(GetEnvironmentClustersMappingClusterArgs.builder()
     *                 .identifier("incluster")
     *                 .name("in-cluster")
     *                 .agentIdentifier("account.gitopsagentdev")
     *                 .scope("ACCOUNT")
     *                 .build())
     *             .build());
     * 
     *         // data source for two gitops clusters mapped to an account level env
     *         final var example2 = PlatformFunctions.getEnvironmentClustersMapping(GetEnvironmentClustersMappingArgs.builder()
     *             .identifier("mycustomidentifier")
     *             .envId("env1")
     *             .clusters(            
     *                 GetEnvironmentClustersMappingClusterArgs.builder()
     *                     .identifier("clusterA")
     *                     .name("cluster-A")
     *                     .agentIdentifier("account.gitopsagentprod")
     *                     .scope("ACCOUNT")
     *                     .build(),
     *                 GetEnvironmentClustersMappingClusterArgs.builder()
     *                     .identifier("clusterB")
     *                     .name("cluster-B")
     *                     .agentIdentifier("account.gitopsagentprod")
     *                     .scope("ACCOUNT")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEnvironmentClustersMappingResult> getEnvironmentClustersMapping(GetEnvironmentClustersMappingArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getEnvironmentClustersMapping:getEnvironmentClustersMapping", TypeShape.of(GetEnvironmentClustersMappingResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving Harness Gitops clusters mapped to Harness Environment.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentClustersMappingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // data source for gitops clusters mapped to a project level env
     *         final var example = PlatformFunctions.getEnvironmentClustersMapping(GetEnvironmentClustersMappingArgs.builder()
     *             .identifier("mycustomidentifier")
     *             .orgId("orgIdentifer")
     *             .projectId("projectIdentifier")
     *             .envId("exampleEnvId")
     *             .clusters(GetEnvironmentClustersMappingClusterArgs.builder()
     *                 .identifier("incluster")
     *                 .name("in-cluster")
     *                 .agentIdentifier("account.gitopsagentdev")
     *                 .scope("ACCOUNT")
     *                 .build())
     *             .build());
     * 
     *         // data source for two gitops clusters mapped to an account level env
     *         final var example2 = PlatformFunctions.getEnvironmentClustersMapping(GetEnvironmentClustersMappingArgs.builder()
     *             .identifier("mycustomidentifier")
     *             .envId("env1")
     *             .clusters(            
     *                 GetEnvironmentClustersMappingClusterArgs.builder()
     *                     .identifier("clusterA")
     *                     .name("cluster-A")
     *                     .agentIdentifier("account.gitopsagentprod")
     *                     .scope("ACCOUNT")
     *                     .build(),
     *                 GetEnvironmentClustersMappingClusterArgs.builder()
     *                     .identifier("clusterB")
     *                     .name("cluster-B")
     *                     .agentIdentifier("account.gitopsagentprod")
     *                     .scope("ACCOUNT")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetEnvironmentClustersMappingResult> getEnvironmentClustersMappingPlain(GetEnvironmentClustersMappingPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getEnvironmentClustersMapping:getEnvironmentClustersMapping", TypeShape.of(GetEnvironmentClustersMappingResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness environment group.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentGroup(GetEnvironmentGroupArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEnvironmentGroupResult> getEnvironmentGroup(GetEnvironmentGroupArgs args) {
        return getEnvironmentGroup(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness environment group.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentGroup(GetEnvironmentGroupArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetEnvironmentGroupResult> getEnvironmentGroupPlain(GetEnvironmentGroupPlainArgs args) {
        return getEnvironmentGroupPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness environment group.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentGroup(GetEnvironmentGroupArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEnvironmentGroupResult> getEnvironmentGroup(GetEnvironmentGroupArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getEnvironmentGroup:getEnvironmentGroup", TypeShape.of(GetEnvironmentGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness environment group.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentGroup(GetEnvironmentGroupArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEnvironmentGroupResult> getEnvironmentGroup(GetEnvironmentGroupArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getEnvironmentGroup:getEnvironmentGroup", TypeShape.of(GetEnvironmentGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness environment group.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentGroup(GetEnvironmentGroupArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetEnvironmentGroupResult> getEnvironmentGroupPlain(GetEnvironmentGroupPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getEnvironmentGroup:getEnvironmentGroup", TypeShape.of(GetEnvironmentGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving Harness environment list.
     * 
     * ## Example Usage
     * 
     * ### Project Level Environment List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentList(GetEnvironmentListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Organisation Level Environment List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentList(GetEnvironmentListArgs.builder()
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Account Level Environment List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentList(GetEnvironmentListArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEnvironmentListResult> getEnvironmentList() {
        return getEnvironmentList(GetEnvironmentListArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving Harness environment list.
     * 
     * ## Example Usage
     * 
     * ### Project Level Environment List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentList(GetEnvironmentListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Organisation Level Environment List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentList(GetEnvironmentListArgs.builder()
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Account Level Environment List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentList(GetEnvironmentListArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetEnvironmentListResult> getEnvironmentListPlain() {
        return getEnvironmentListPlain(GetEnvironmentListPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving Harness environment list.
     * 
     * ## Example Usage
     * 
     * ### Project Level Environment List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentList(GetEnvironmentListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Organisation Level Environment List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentList(GetEnvironmentListArgs.builder()
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Account Level Environment List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentList(GetEnvironmentListArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEnvironmentListResult> getEnvironmentList(GetEnvironmentListArgs args) {
        return getEnvironmentList(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving Harness environment list.
     * 
     * ## Example Usage
     * 
     * ### Project Level Environment List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentList(GetEnvironmentListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Organisation Level Environment List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentList(GetEnvironmentListArgs.builder()
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Account Level Environment List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentList(GetEnvironmentListArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetEnvironmentListResult> getEnvironmentListPlain(GetEnvironmentListPlainArgs args) {
        return getEnvironmentListPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving Harness environment list.
     * 
     * ## Example Usage
     * 
     * ### Project Level Environment List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentList(GetEnvironmentListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Organisation Level Environment List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentList(GetEnvironmentListArgs.builder()
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Account Level Environment List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentList(GetEnvironmentListArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEnvironmentListResult> getEnvironmentList(GetEnvironmentListArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getEnvironmentList:getEnvironmentList", TypeShape.of(GetEnvironmentListResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving Harness environment list.
     * 
     * ## Example Usage
     * 
     * ### Project Level Environment List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentList(GetEnvironmentListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Organisation Level Environment List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentList(GetEnvironmentListArgs.builder()
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Account Level Environment List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentList(GetEnvironmentListArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEnvironmentListResult> getEnvironmentList(GetEnvironmentListArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getEnvironmentList:getEnvironmentList", TypeShape.of(GetEnvironmentListResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving Harness environment list.
     * 
     * ## Example Usage
     * 
     * ### Project Level Environment List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentList(GetEnvironmentListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Organisation Level Environment List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentList(GetEnvironmentListArgs.builder()
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Account Level Environment List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getEnvironmentList(GetEnvironmentListArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetEnvironmentListResult> getEnvironmentListPlain(GetEnvironmentListPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getEnvironmentList:getEnvironmentList", TypeShape.of(GetEnvironmentListResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for Harness environment service overrides.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentServiceOverridesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getEnvironmentServiceOverrides(GetEnvironmentServiceOverridesArgs.builder()
     *             .orgId("orgIdentifier")
     *             .projectId("projectIdentifier")
     *             .envId("environmentIdentifier")
     *             .serviceId("serviceIdentifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEnvironmentServiceOverridesResult> getEnvironmentServiceOverrides(GetEnvironmentServiceOverridesArgs args) {
        return getEnvironmentServiceOverrides(args, InvokeOptions.Empty);
    }
    /**
     * Data source for Harness environment service overrides.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentServiceOverridesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getEnvironmentServiceOverrides(GetEnvironmentServiceOverridesArgs.builder()
     *             .orgId("orgIdentifier")
     *             .projectId("projectIdentifier")
     *             .envId("environmentIdentifier")
     *             .serviceId("serviceIdentifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetEnvironmentServiceOverridesResult> getEnvironmentServiceOverridesPlain(GetEnvironmentServiceOverridesPlainArgs args) {
        return getEnvironmentServiceOverridesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for Harness environment service overrides.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentServiceOverridesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getEnvironmentServiceOverrides(GetEnvironmentServiceOverridesArgs.builder()
     *             .orgId("orgIdentifier")
     *             .projectId("projectIdentifier")
     *             .envId("environmentIdentifier")
     *             .serviceId("serviceIdentifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEnvironmentServiceOverridesResult> getEnvironmentServiceOverrides(GetEnvironmentServiceOverridesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getEnvironmentServiceOverrides:getEnvironmentServiceOverrides", TypeShape.of(GetEnvironmentServiceOverridesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for Harness environment service overrides.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentServiceOverridesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getEnvironmentServiceOverrides(GetEnvironmentServiceOverridesArgs.builder()
     *             .orgId("orgIdentifier")
     *             .projectId("projectIdentifier")
     *             .envId("environmentIdentifier")
     *             .serviceId("serviceIdentifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEnvironmentServiceOverridesResult> getEnvironmentServiceOverrides(GetEnvironmentServiceOverridesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getEnvironmentServiceOverrides:getEnvironmentServiceOverrides", TypeShape.of(GetEnvironmentServiceOverridesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for Harness environment service overrides.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetEnvironmentServiceOverridesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getEnvironmentServiceOverrides(GetEnvironmentServiceOverridesArgs.builder()
     *             .orgId("orgIdentifier")
     *             .projectId("projectIdentifier")
     *             .envId("environmentIdentifier")
     *             .serviceId("serviceIdentifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetEnvironmentServiceOverridesResult> getEnvironmentServiceOverridesPlain(GetEnvironmentServiceOverridesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getEnvironmentServiceOverrides:getEnvironmentServiceOverrides", TypeShape.of(GetEnvironmentServiceOverridesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving files.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetFileStoreFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getFileStoreFile(GetFileStoreFileArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFileStoreFileResult> getFileStoreFile(GetFileStoreFileArgs args) {
        return getFileStoreFile(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving files.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetFileStoreFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getFileStoreFile(GetFileStoreFileArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFileStoreFileResult> getFileStoreFilePlain(GetFileStoreFilePlainArgs args) {
        return getFileStoreFilePlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving files.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetFileStoreFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getFileStoreFile(GetFileStoreFileArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFileStoreFileResult> getFileStoreFile(GetFileStoreFileArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getFileStoreFile:getFileStoreFile", TypeShape.of(GetFileStoreFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving files.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetFileStoreFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getFileStoreFile(GetFileStoreFileArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFileStoreFileResult> getFileStoreFile(GetFileStoreFileArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getFileStoreFile:getFileStoreFile", TypeShape.of(GetFileStoreFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving files.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetFileStoreFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getFileStoreFile(GetFileStoreFileArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFileStoreFileResult> getFileStoreFilePlain(GetFileStoreFilePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getFileStoreFile:getFileStoreFile", TypeShape.of(GetFileStoreFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving folders.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetFileStoreFolderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getFileStoreFolder(GetFileStoreFolderArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFileStoreFolderResult> getFileStoreFolder(GetFileStoreFolderArgs args) {
        return getFileStoreFolder(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving folders.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetFileStoreFolderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getFileStoreFolder(GetFileStoreFolderArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFileStoreFolderResult> getFileStoreFolderPlain(GetFileStoreFolderPlainArgs args) {
        return getFileStoreFolderPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving folders.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetFileStoreFolderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getFileStoreFolder(GetFileStoreFolderArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFileStoreFolderResult> getFileStoreFolder(GetFileStoreFolderArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getFileStoreFolder:getFileStoreFolder", TypeShape.of(GetFileStoreFolderResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving folders.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetFileStoreFolderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getFileStoreFolder(GetFileStoreFolderArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFileStoreFolderResult> getFileStoreFolder(GetFileStoreFolderArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getFileStoreFolder:getFileStoreFolder", TypeShape.of(GetFileStoreFolderResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving folders.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetFileStoreFolderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getFileStoreFolder(GetFileStoreFolderArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFileStoreFolderResult> getFileStoreFolderPlain(GetFileStoreFolderPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getFileStoreFolder:getFileStoreFolder", TypeShape.of(GetFileStoreFolderResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetFiltersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getFilters(GetFiltersArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .type("Connector")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFiltersResult> getFilters(GetFiltersArgs args) {
        return getFilters(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetFiltersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getFilters(GetFiltersArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .type("Connector")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFiltersResult> getFiltersPlain(GetFiltersPlainArgs args) {
        return getFiltersPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetFiltersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getFilters(GetFiltersArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .type("Connector")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFiltersResult> getFilters(GetFiltersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getFilters:getFilters", TypeShape.of(GetFiltersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetFiltersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getFilters(GetFiltersArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .type("Connector")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFiltersResult> getFilters(GetFiltersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getFilters:getFilters", TypeShape.of(GetFiltersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetFiltersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getFilters(GetFiltersArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .type("Connector")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFiltersResult> getFiltersPlain(GetFiltersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getFilters:getFilters", TypeShape.of(GetFiltersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a GCP Cloud Cost Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGcpCloudCostConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGcpCloudCostConnector(GetGcpCloudCostConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGcpCloudCostConnectorResult> getGcpCloudCostConnector(GetGcpCloudCostConnectorArgs args) {
        return getGcpCloudCostConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a GCP Cloud Cost Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGcpCloudCostConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGcpCloudCostConnector(GetGcpCloudCostConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGcpCloudCostConnectorResult> getGcpCloudCostConnectorPlain(GetGcpCloudCostConnectorPlainArgs args) {
        return getGcpCloudCostConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a GCP Cloud Cost Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGcpCloudCostConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGcpCloudCostConnector(GetGcpCloudCostConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGcpCloudCostConnectorResult> getGcpCloudCostConnector(GetGcpCloudCostConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGcpCloudCostConnector:getGcpCloudCostConnector", TypeShape.of(GetGcpCloudCostConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a GCP Cloud Cost Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGcpCloudCostConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGcpCloudCostConnector(GetGcpCloudCostConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGcpCloudCostConnectorResult> getGcpCloudCostConnector(GetGcpCloudCostConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGcpCloudCostConnector:getGcpCloudCostConnector", TypeShape.of(GetGcpCloudCostConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a GCP Cloud Cost Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGcpCloudCostConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGcpCloudCostConnector(GetGcpCloudCostConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGcpCloudCostConnectorResult> getGcpCloudCostConnectorPlain(GetGcpCloudCostConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getGcpCloudCostConnector:getGcpCloudCostConnector", TypeShape.of(GetGcpCloudCostConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Gcp connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGcpConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGcpConnector(GetGcpConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGcpConnectorResult> getGcpConnector(GetGcpConnectorArgs args) {
        return getGcpConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Gcp connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGcpConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGcpConnector(GetGcpConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGcpConnectorResult> getGcpConnectorPlain(GetGcpConnectorPlainArgs args) {
        return getGcpConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Gcp connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGcpConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGcpConnector(GetGcpConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGcpConnectorResult> getGcpConnector(GetGcpConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGcpConnector:getGcpConnector", TypeShape.of(GetGcpConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Gcp connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGcpConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGcpConnector(GetGcpConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGcpConnectorResult> getGcpConnector(GetGcpConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGcpConnector:getGcpConnector", TypeShape.of(GetGcpConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Gcp connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGcpConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGcpConnector(GetGcpConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGcpConnectorResult> getGcpConnectorPlain(GetGcpConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getGcpConnector:getGcpConnector", TypeShape.of(GetGcpConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGcpSecretManagerConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGcpSecretManagerConnector(GetGcpSecretManagerConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGcpSecretManagerConnectorResult> getGcpSecretManagerConnector(GetGcpSecretManagerConnectorArgs args) {
        return getGcpSecretManagerConnector(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGcpSecretManagerConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGcpSecretManagerConnector(GetGcpSecretManagerConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGcpSecretManagerConnectorResult> getGcpSecretManagerConnectorPlain(GetGcpSecretManagerConnectorPlainArgs args) {
        return getGcpSecretManagerConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGcpSecretManagerConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGcpSecretManagerConnector(GetGcpSecretManagerConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGcpSecretManagerConnectorResult> getGcpSecretManagerConnector(GetGcpSecretManagerConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGcpSecretManagerConnector:getGcpSecretManagerConnector", TypeShape.of(GetGcpSecretManagerConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGcpSecretManagerConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGcpSecretManagerConnector(GetGcpSecretManagerConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGcpSecretManagerConnectorResult> getGcpSecretManagerConnector(GetGcpSecretManagerConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGcpSecretManagerConnector:getGcpSecretManagerConnector", TypeShape.of(GetGcpSecretManagerConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGcpSecretManagerConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGcpSecretManagerConnector(GetGcpSecretManagerConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGcpSecretManagerConnectorResult> getGcpSecretManagerConnectorPlain(GetGcpSecretManagerConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getGcpSecretManagerConnector:getGcpSecretManagerConnector", TypeShape.of(GetGcpSecretManagerConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Git connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitConnector(GetGitConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitConnectorResult> getGitConnector(GetGitConnectorArgs args) {
        return getGitConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Git connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitConnector(GetGitConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitConnectorResult> getGitConnectorPlain(GetGitConnectorPlainArgs args) {
        return getGitConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Git connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitConnector(GetGitConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitConnectorResult> getGitConnector(GetGitConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitConnector:getGitConnector", TypeShape.of(GetGitConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Git connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitConnector(GetGitConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitConnectorResult> getGitConnector(GetGitConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitConnector:getGitConnector", TypeShape.of(GetGitConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Git connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitConnector(GetGitConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitConnectorResult> getGitConnectorPlain(GetGitConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getGitConnector:getGitConnector", TypeShape.of(GetGitConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Github connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGithubConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGithubConnector(GetGithubConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGithubConnectorResult> getGithubConnector(GetGithubConnectorArgs args) {
        return getGithubConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Github connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGithubConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGithubConnector(GetGithubConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGithubConnectorResult> getGithubConnectorPlain(GetGithubConnectorPlainArgs args) {
        return getGithubConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Github connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGithubConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGithubConnector(GetGithubConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGithubConnectorResult> getGithubConnector(GetGithubConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGithubConnector:getGithubConnector", TypeShape.of(GetGithubConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Github connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGithubConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGithubConnector(GetGithubConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGithubConnectorResult> getGithubConnector(GetGithubConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGithubConnector:getGithubConnector", TypeShape.of(GetGithubConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Github connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGithubConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGithubConnector(GetGithubConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGithubConnectorResult> getGithubConnectorPlain(GetGithubConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getGithubConnector:getGithubConnector", TypeShape.of(GetGithubConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Gitlab connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitlabConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitlabConnector(GetGitlabConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitlabConnectorResult> getGitlabConnector(GetGitlabConnectorArgs args) {
        return getGitlabConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Gitlab connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitlabConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitlabConnector(GetGitlabConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitlabConnectorResult> getGitlabConnectorPlain(GetGitlabConnectorPlainArgs args) {
        return getGitlabConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Gitlab connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitlabConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitlabConnector(GetGitlabConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitlabConnectorResult> getGitlabConnector(GetGitlabConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitlabConnector:getGitlabConnector", TypeShape.of(GetGitlabConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Gitlab connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitlabConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitlabConnector(GetGitlabConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitlabConnectorResult> getGitlabConnector(GetGitlabConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitlabConnector:getGitlabConnector", TypeShape.of(GetGitlabConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Gitlab connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitlabConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitlabConnector(GetGitlabConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitlabConnectorResult> getGitlabConnectorPlain(GetGitlabConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getGitlabConnector:getGitlabConnector", TypeShape.of(GetGitlabConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for fetching a Harness GitOps Agent.
     * 
     */
    public static Output<GetGitopsAgentResult> getGitopsAgent(GetGitopsAgentArgs args) {
        return getGitopsAgent(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for fetching a Harness GitOps Agent.
     * 
     */
    public static CompletableFuture<GetGitopsAgentResult> getGitopsAgentPlain(GetGitopsAgentPlainArgs args) {
        return getGitopsAgentPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for fetching a Harness GitOps Agent.
     * 
     */
    public static Output<GetGitopsAgentResult> getGitopsAgent(GetGitopsAgentArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsAgent:getGitopsAgent", TypeShape.of(GetGitopsAgentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for fetching a Harness GitOps Agent.
     * 
     */
    public static Output<GetGitopsAgentResult> getGitopsAgent(GetGitopsAgentArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsAgent:getGitopsAgent", TypeShape.of(GetGitopsAgentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for fetching a Harness GitOps Agent.
     * 
     */
    public static CompletableFuture<GetGitopsAgentResult> getGitopsAgentPlain(GetGitopsAgentPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getGitopsAgent:getGitopsAgent", TypeShape.of(GetGitopsAgentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for fetching a Harness Gitops Agent deployment manifest YAML.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsAgentDeployYamlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsAgentDeployYaml(GetGitopsAgentDeployYamlArgs.builder()
     *             .identifier("identifier")
     *             .accountId("account_id")
     *             .projectId("project_id")
     *             .orgId("org_id")
     *             .namespace("namespace")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsAgentDeployYamlResult> getGitopsAgentDeployYaml(GetGitopsAgentDeployYamlArgs args) {
        return getGitopsAgentDeployYaml(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for fetching a Harness Gitops Agent deployment manifest YAML.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsAgentDeployYamlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsAgentDeployYaml(GetGitopsAgentDeployYamlArgs.builder()
     *             .identifier("identifier")
     *             .accountId("account_id")
     *             .projectId("project_id")
     *             .orgId("org_id")
     *             .namespace("namespace")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitopsAgentDeployYamlResult> getGitopsAgentDeployYamlPlain(GetGitopsAgentDeployYamlPlainArgs args) {
        return getGitopsAgentDeployYamlPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for fetching a Harness Gitops Agent deployment manifest YAML.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsAgentDeployYamlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsAgentDeployYaml(GetGitopsAgentDeployYamlArgs.builder()
     *             .identifier("identifier")
     *             .accountId("account_id")
     *             .projectId("project_id")
     *             .orgId("org_id")
     *             .namespace("namespace")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsAgentDeployYamlResult> getGitopsAgentDeployYaml(GetGitopsAgentDeployYamlArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsAgentDeployYaml:getGitopsAgentDeployYaml", TypeShape.of(GetGitopsAgentDeployYamlResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for fetching a Harness Gitops Agent deployment manifest YAML.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsAgentDeployYamlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsAgentDeployYaml(GetGitopsAgentDeployYamlArgs.builder()
     *             .identifier("identifier")
     *             .accountId("account_id")
     *             .projectId("project_id")
     *             .orgId("org_id")
     *             .namespace("namespace")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsAgentDeployYamlResult> getGitopsAgentDeployYaml(GetGitopsAgentDeployYamlArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsAgentDeployYaml:getGitopsAgentDeployYaml", TypeShape.of(GetGitopsAgentDeployYamlResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for fetching a Harness Gitops Agent deployment manifest YAML.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsAgentDeployYamlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsAgentDeployYaml(GetGitopsAgentDeployYamlArgs.builder()
     *             .identifier("identifier")
     *             .accountId("account_id")
     *             .projectId("project_id")
     *             .orgId("org_id")
     *             .namespace("namespace")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitopsAgentDeployYamlResult> getGitopsAgentDeployYamlPlain(GetGitopsAgentDeployYamlPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getGitopsAgentDeployYaml:getGitopsAgentDeployYaml", TypeShape.of(GetGitopsAgentDeployYamlResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for fetching a Harness Gitops Agent operator manifest YAML.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsAgentOperatorYamlResult> getGitopsAgentOperatorYaml(GetGitopsAgentOperatorYamlArgs args) {
        return getGitopsAgentOperatorYaml(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for fetching a Harness Gitops Agent operator manifest YAML.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitopsAgentOperatorYamlResult> getGitopsAgentOperatorYamlPlain(GetGitopsAgentOperatorYamlPlainArgs args) {
        return getGitopsAgentOperatorYamlPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for fetching a Harness Gitops Agent operator manifest YAML.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsAgentOperatorYamlResult> getGitopsAgentOperatorYaml(GetGitopsAgentOperatorYamlArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsAgentOperatorYaml:getGitopsAgentOperatorYaml", TypeShape.of(GetGitopsAgentOperatorYamlResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for fetching a Harness Gitops Agent operator manifest YAML.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsAgentOperatorYamlResult> getGitopsAgentOperatorYaml(GetGitopsAgentOperatorYamlArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsAgentOperatorYaml:getGitopsAgentOperatorYaml", TypeShape.of(GetGitopsAgentOperatorYamlResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for fetching a Harness Gitops Agent operator manifest YAML.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitopsAgentOperatorYamlResult> getGitopsAgentOperatorYamlPlain(GetGitopsAgentOperatorYamlPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getGitopsAgentOperatorYaml:getGitopsAgentOperatorYaml", TypeShape.of(GetGitopsAgentOperatorYamlResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsAppProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsAppProject(GetGitopsAppProjectArgs.builder()
     *             .agentId("agent_id")
     *             .queryName("query_name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsAppProjectResult> getGitopsAppProject(GetGitopsAppProjectArgs args) {
        return getGitopsAppProject(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsAppProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsAppProject(GetGitopsAppProjectArgs.builder()
     *             .agentId("agent_id")
     *             .queryName("query_name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitopsAppProjectResult> getGitopsAppProjectPlain(GetGitopsAppProjectPlainArgs args) {
        return getGitopsAppProjectPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsAppProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsAppProject(GetGitopsAppProjectArgs.builder()
     *             .agentId("agent_id")
     *             .queryName("query_name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsAppProjectResult> getGitopsAppProject(GetGitopsAppProjectArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsAppProject:getGitopsAppProject", TypeShape.of(GetGitopsAppProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsAppProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsAppProject(GetGitopsAppProjectArgs.builder()
     *             .agentId("agent_id")
     *             .queryName("query_name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsAppProjectResult> getGitopsAppProject(GetGitopsAppProjectArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsAppProject:getGitopsAppProject", TypeShape.of(GetGitopsAppProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsAppProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsAppProject(GetGitopsAppProjectArgs.builder()
     *             .agentId("agent_id")
     *             .queryName("query_name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitopsAppProjectResult> getGitopsAppProjectPlain(GetGitopsAppProjectPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getGitopsAppProject:getGitopsAppProject", TypeShape.of(GetGitopsAppProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Resource for managing the Harness GitOps Application Project Mappings.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsAppProjectMappingResult> getGitopsAppProjectMapping(GetGitopsAppProjectMappingArgs args) {
        return getGitopsAppProjectMapping(args, InvokeOptions.Empty);
    }
    /**
     * Resource for managing the Harness GitOps Application Project Mappings.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitopsAppProjectMappingResult> getGitopsAppProjectMappingPlain(GetGitopsAppProjectMappingPlainArgs args) {
        return getGitopsAppProjectMappingPlain(args, InvokeOptions.Empty);
    }
    /**
     * Resource for managing the Harness GitOps Application Project Mappings.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsAppProjectMappingResult> getGitopsAppProjectMapping(GetGitopsAppProjectMappingArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsAppProjectMapping:getGitopsAppProjectMapping", TypeShape.of(GetGitopsAppProjectMappingResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Resource for managing the Harness GitOps Application Project Mappings.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsAppProjectMappingResult> getGitopsAppProjectMapping(GetGitopsAppProjectMappingArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsAppProjectMapping:getGitopsAppProjectMapping", TypeShape.of(GetGitopsAppProjectMappingResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Resource for managing the Harness GitOps Application Project Mappings.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitopsAppProjectMappingResult> getGitopsAppProjectMappingPlain(GetGitopsAppProjectMappingPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getGitopsAppProjectMapping:getGitopsAppProjectMapping", TypeShape.of(GetGitopsAppProjectMappingResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for fetching a Harness GitOps Application.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsApplicationsResult> getGitopsApplications(GetGitopsApplicationsArgs args) {
        return getGitopsApplications(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for fetching a Harness GitOps Application.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitopsApplicationsResult> getGitopsApplicationsPlain(GetGitopsApplicationsPlainArgs args) {
        return getGitopsApplicationsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for fetching a Harness GitOps Application.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsApplicationsResult> getGitopsApplications(GetGitopsApplicationsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsApplications:getGitopsApplications", TypeShape.of(GetGitopsApplicationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for fetching a Harness GitOps Application.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsApplicationsResult> getGitopsApplications(GetGitopsApplicationsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsApplications:getGitopsApplications", TypeShape.of(GetGitopsApplicationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for fetching a Harness GitOps Application.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitopsApplicationsResult> getGitopsApplicationsPlain(GetGitopsApplicationsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getGitopsApplications:getGitopsApplications", TypeShape.of(GetGitopsApplicationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for fetching a Harness GitOps Cluster.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsCluster(GetGitopsClusterArgs.builder()
     *             .identifier("identifier")
     *             .accountId("account_id")
     *             .projectId("project_id")
     *             .orgId("org_id")
     *             .agentId("agent_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsClusterResult> getGitopsCluster(GetGitopsClusterArgs args) {
        return getGitopsCluster(args, InvokeOptions.Empty);
    }
    /**
     * Data source for fetching a Harness GitOps Cluster.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsCluster(GetGitopsClusterArgs.builder()
     *             .identifier("identifier")
     *             .accountId("account_id")
     *             .projectId("project_id")
     *             .orgId("org_id")
     *             .agentId("agent_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitopsClusterResult> getGitopsClusterPlain(GetGitopsClusterPlainArgs args) {
        return getGitopsClusterPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for fetching a Harness GitOps Cluster.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsCluster(GetGitopsClusterArgs.builder()
     *             .identifier("identifier")
     *             .accountId("account_id")
     *             .projectId("project_id")
     *             .orgId("org_id")
     *             .agentId("agent_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsClusterResult> getGitopsCluster(GetGitopsClusterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsCluster:getGitopsCluster", TypeShape.of(GetGitopsClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for fetching a Harness GitOps Cluster.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsCluster(GetGitopsClusterArgs.builder()
     *             .identifier("identifier")
     *             .accountId("account_id")
     *             .projectId("project_id")
     *             .orgId("org_id")
     *             .agentId("agent_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsClusterResult> getGitopsCluster(GetGitopsClusterArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsCluster:getGitopsCluster", TypeShape.of(GetGitopsClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for fetching a Harness GitOps Cluster.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsCluster(GetGitopsClusterArgs.builder()
     *             .identifier("identifier")
     *             .accountId("account_id")
     *             .projectId("project_id")
     *             .orgId("org_id")
     *             .agentId("agent_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitopsClusterResult> getGitopsClusterPlain(GetGitopsClusterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getGitopsCluster:getGitopsCluster", TypeShape.of(GetGitopsClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness GitOps Filter.
     * 
     */
    public static Output<GetGitopsFiltersResult> getGitopsFilters(GetGitopsFiltersArgs args) {
        return getGitopsFilters(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness GitOps Filter.
     * 
     */
    public static CompletableFuture<GetGitopsFiltersResult> getGitopsFiltersPlain(GetGitopsFiltersPlainArgs args) {
        return getGitopsFiltersPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness GitOps Filter.
     * 
     */
    public static Output<GetGitopsFiltersResult> getGitopsFilters(GetGitopsFiltersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsFilters:getGitopsFilters", TypeShape.of(GetGitopsFiltersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness GitOps Filter.
     * 
     */
    public static Output<GetGitopsFiltersResult> getGitopsFilters(GetGitopsFiltersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsFilters:getGitopsFilters", TypeShape.of(GetGitopsFiltersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness GitOps Filter.
     * 
     */
    public static CompletableFuture<GetGitopsFiltersResult> getGitopsFiltersPlain(GetGitopsFiltersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getGitopsFilters:getGitopsFilters", TypeShape.of(GetGitopsFiltersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for fetching a Harness GitOps GPG public key.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsGnupgArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsGnupg(GetGitopsGnupgArgs.builder()
     *             .accountId("account_id")
     *             .agentId("agent_id")
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsGnupgResult> getGitopsGnupg(GetGitopsGnupgArgs args) {
        return getGitopsGnupg(args, InvokeOptions.Empty);
    }
    /**
     * Data source for fetching a Harness GitOps GPG public key.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsGnupgArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsGnupg(GetGitopsGnupgArgs.builder()
     *             .accountId("account_id")
     *             .agentId("agent_id")
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitopsGnupgResult> getGitopsGnupgPlain(GetGitopsGnupgPlainArgs args) {
        return getGitopsGnupgPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for fetching a Harness GitOps GPG public key.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsGnupgArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsGnupg(GetGitopsGnupgArgs.builder()
     *             .accountId("account_id")
     *             .agentId("agent_id")
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsGnupgResult> getGitopsGnupg(GetGitopsGnupgArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsGnupg:getGitopsGnupg", TypeShape.of(GetGitopsGnupgResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for fetching a Harness GitOps GPG public key.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsGnupgArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsGnupg(GetGitopsGnupgArgs.builder()
     *             .accountId("account_id")
     *             .agentId("agent_id")
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsGnupgResult> getGitopsGnupg(GetGitopsGnupgArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsGnupg:getGitopsGnupg", TypeShape.of(GetGitopsGnupgResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for fetching a Harness GitOps GPG public key.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsGnupgArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsGnupg(GetGitopsGnupgArgs.builder()
     *             .accountId("account_id")
     *             .agentId("agent_id")
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitopsGnupgResult> getGitopsGnupgPlain(GetGitopsGnupgPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getGitopsGnupg:getGitopsGnupg", TypeShape.of(GetGitopsGnupgResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a GitOps Repository Certificate. It fetches all the certificates that are added to the provided agent.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsRepoCertResult> getGitopsRepoCert(GetGitopsRepoCertArgs args) {
        return getGitopsRepoCert(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a GitOps Repository Certificate. It fetches all the certificates that are added to the provided agent.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitopsRepoCertResult> getGitopsRepoCertPlain(GetGitopsRepoCertPlainArgs args) {
        return getGitopsRepoCertPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a GitOps Repository Certificate. It fetches all the certificates that are added to the provided agent.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsRepoCertResult> getGitopsRepoCert(GetGitopsRepoCertArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsRepoCert:getGitopsRepoCert", TypeShape.of(GetGitopsRepoCertResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a GitOps Repository Certificate. It fetches all the certificates that are added to the provided agent.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsRepoCertResult> getGitopsRepoCert(GetGitopsRepoCertArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsRepoCert:getGitopsRepoCert", TypeShape.of(GetGitopsRepoCertResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a GitOps Repository Certificate. It fetches all the certificates that are added to the provided agent.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitopsRepoCertResult> getGitopsRepoCertPlain(GetGitopsRepoCertPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getGitopsRepoCert:getGitopsRepoCert", TypeShape.of(GetGitopsRepoCertResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for fetching a GitOps Repository Credentials.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsRepoCredArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getGitopsRepoCred(GetGitopsRepoCredArgs.builder()
     *             .identifier("identifier")
     *             .accountId("account_id")
     *             .projectId("project_id")
     *             .orgId("org_id")
     *             .agentId("agent_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsRepoCredResult> getGitopsRepoCred(GetGitopsRepoCredArgs args) {
        return getGitopsRepoCred(args, InvokeOptions.Empty);
    }
    /**
     * Data source for fetching a GitOps Repository Credentials.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsRepoCredArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getGitopsRepoCred(GetGitopsRepoCredArgs.builder()
     *             .identifier("identifier")
     *             .accountId("account_id")
     *             .projectId("project_id")
     *             .orgId("org_id")
     *             .agentId("agent_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitopsRepoCredResult> getGitopsRepoCredPlain(GetGitopsRepoCredPlainArgs args) {
        return getGitopsRepoCredPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for fetching a GitOps Repository Credentials.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsRepoCredArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getGitopsRepoCred(GetGitopsRepoCredArgs.builder()
     *             .identifier("identifier")
     *             .accountId("account_id")
     *             .projectId("project_id")
     *             .orgId("org_id")
     *             .agentId("agent_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsRepoCredResult> getGitopsRepoCred(GetGitopsRepoCredArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsRepoCred:getGitopsRepoCred", TypeShape.of(GetGitopsRepoCredResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for fetching a GitOps Repository Credentials.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsRepoCredArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getGitopsRepoCred(GetGitopsRepoCredArgs.builder()
     *             .identifier("identifier")
     *             .accountId("account_id")
     *             .projectId("project_id")
     *             .orgId("org_id")
     *             .agentId("agent_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsRepoCredResult> getGitopsRepoCred(GetGitopsRepoCredArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsRepoCred:getGitopsRepoCred", TypeShape.of(GetGitopsRepoCredResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for fetching a GitOps Repository Credentials.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsRepoCredArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getGitopsRepoCred(GetGitopsRepoCredArgs.builder()
     *             .identifier("identifier")
     *             .accountId("account_id")
     *             .projectId("project_id")
     *             .orgId("org_id")
     *             .agentId("agent_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitopsRepoCredResult> getGitopsRepoCredPlain(GetGitopsRepoCredPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getGitopsRepoCred:getGitopsRepoCred", TypeShape.of(GetGitopsRepoCredResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for fetching a Harness GitOps Repository.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsRepository(GetGitopsRepositoryArgs.builder()
     *             .identifier("identifier")
     *             .accountId("account_id")
     *             .projectId("project_id")
     *             .orgId("org_id")
     *             .agentId("agent_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsRepositoryResult> getGitopsRepository(GetGitopsRepositoryArgs args) {
        return getGitopsRepository(args, InvokeOptions.Empty);
    }
    /**
     * Data source for fetching a Harness GitOps Repository.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsRepository(GetGitopsRepositoryArgs.builder()
     *             .identifier("identifier")
     *             .accountId("account_id")
     *             .projectId("project_id")
     *             .orgId("org_id")
     *             .agentId("agent_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitopsRepositoryResult> getGitopsRepositoryPlain(GetGitopsRepositoryPlainArgs args) {
        return getGitopsRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for fetching a Harness GitOps Repository.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsRepository(GetGitopsRepositoryArgs.builder()
     *             .identifier("identifier")
     *             .accountId("account_id")
     *             .projectId("project_id")
     *             .orgId("org_id")
     *             .agentId("agent_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsRepositoryResult> getGitopsRepository(GetGitopsRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsRepository:getGitopsRepository", TypeShape.of(GetGitopsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for fetching a Harness GitOps Repository.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsRepository(GetGitopsRepositoryArgs.builder()
     *             .identifier("identifier")
     *             .accountId("account_id")
     *             .projectId("project_id")
     *             .orgId("org_id")
     *             .agentId("agent_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGitopsRepositoryResult> getGitopsRepository(GetGitopsRepositoryArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitopsRepository:getGitopsRepository", TypeShape.of(GetGitopsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for fetching a Harness GitOps Repository.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetGitopsRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getGitopsRepository(GetGitopsRepositoryArgs.builder()
     *             .identifier("identifier")
     *             .accountId("account_id")
     *             .projectId("project_id")
     *             .orgId("org_id")
     *             .agentId("agent_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGitopsRepositoryResult> getGitopsRepositoryPlain(GetGitopsRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getGitopsRepository:getGitopsRepository", TypeShape.of(GetGitopsRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Resource for creating a Harness pipeline.
     * 
     */
    public static Output<GetGitxWebhookResult> getGitxWebhook(GetGitxWebhookArgs args) {
        return getGitxWebhook(args, InvokeOptions.Empty);
    }
    /**
     * Resource for creating a Harness pipeline.
     * 
     */
    public static CompletableFuture<GetGitxWebhookResult> getGitxWebhookPlain(GetGitxWebhookPlainArgs args) {
        return getGitxWebhookPlain(args, InvokeOptions.Empty);
    }
    /**
     * Resource for creating a Harness pipeline.
     * 
     */
    public static Output<GetGitxWebhookResult> getGitxWebhook(GetGitxWebhookArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitxWebhook:getGitxWebhook", TypeShape.of(GetGitxWebhookResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Resource for creating a Harness pipeline.
     * 
     */
    public static Output<GetGitxWebhookResult> getGitxWebhook(GetGitxWebhookArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getGitxWebhook:getGitxWebhook", TypeShape.of(GetGitxWebhookResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Resource for creating a Harness pipeline.
     * 
     */
    public static CompletableFuture<GetGitxWebhookResult> getGitxWebhookPlain(GetGitxWebhookPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getGitxWebhook:getGitxWebhook", TypeShape.of(GetGitxWebhookResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data Source for retrieving a Harness Artifact registry
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetHarRegistryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getHarRegistry(GetHarRegistryArgs.builder()
     *             .identifier("test_registry")
     *             .spaceRef("accountId/orgId/projectId")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetHarRegistryResult> getHarRegistry(GetHarRegistryArgs args) {
        return getHarRegistry(args, InvokeOptions.Empty);
    }
    /**
     * Data Source for retrieving a Harness Artifact registry
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetHarRegistryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getHarRegistry(GetHarRegistryArgs.builder()
     *             .identifier("test_registry")
     *             .spaceRef("accountId/orgId/projectId")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetHarRegistryResult> getHarRegistryPlain(GetHarRegistryPlainArgs args) {
        return getHarRegistryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data Source for retrieving a Harness Artifact registry
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetHarRegistryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getHarRegistry(GetHarRegistryArgs.builder()
     *             .identifier("test_registry")
     *             .spaceRef("accountId/orgId/projectId")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetHarRegistryResult> getHarRegistry(GetHarRegistryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getHarRegistry:getHarRegistry", TypeShape.of(GetHarRegistryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data Source for retrieving a Harness Artifact registry
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetHarRegistryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getHarRegistry(GetHarRegistryArgs.builder()
     *             .identifier("test_registry")
     *             .spaceRef("accountId/orgId/projectId")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetHarRegistryResult> getHarRegistry(GetHarRegistryArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getHarRegistry:getHarRegistry", TypeShape.of(GetHarRegistryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data Source for retrieving a Harness Artifact registry
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetHarRegistryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getHarRegistry(GetHarRegistryArgs.builder()
     *             .identifier("test_registry")
     *             .spaceRef("accountId/orgId/projectId")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetHarRegistryResult> getHarRegistryPlain(GetHarRegistryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getHarRegistry:getHarRegistry", TypeShape.of(GetHarRegistryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a HTTP Helm connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetHelmConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getHelmConnector(GetHelmConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetHelmConnectorResult> getHelmConnector(GetHelmConnectorArgs args) {
        return getHelmConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a HTTP Helm connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetHelmConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getHelmConnector(GetHelmConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetHelmConnectorResult> getHelmConnectorPlain(GetHelmConnectorPlainArgs args) {
        return getHelmConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a HTTP Helm connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetHelmConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getHelmConnector(GetHelmConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetHelmConnectorResult> getHelmConnector(GetHelmConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getHelmConnector:getHelmConnector", TypeShape.of(GetHelmConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a HTTP Helm connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetHelmConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getHelmConnector(GetHelmConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetHelmConnectorResult> getHelmConnector(GetHelmConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getHelmConnector:getHelmConnector", TypeShape.of(GetHelmConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a HTTP Helm connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetHelmConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getHelmConnector(GetHelmConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetHelmConnectorResult> getHelmConnectorPlain(GetHelmConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getHelmConnector:getHelmConnector", TypeShape.of(GetHelmConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving IACM default pipelines.
     * 
     */
    public static Output<GetIacmDefaultPipelineResult> getIacmDefaultPipeline(GetIacmDefaultPipelineArgs args) {
        return getIacmDefaultPipeline(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving IACM default pipelines.
     * 
     */
    public static CompletableFuture<GetIacmDefaultPipelineResult> getIacmDefaultPipelinePlain(GetIacmDefaultPipelinePlainArgs args) {
        return getIacmDefaultPipelinePlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving IACM default pipelines.
     * 
     */
    public static Output<GetIacmDefaultPipelineResult> getIacmDefaultPipeline(GetIacmDefaultPipelineArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getIacmDefaultPipeline:getIacmDefaultPipeline", TypeShape.of(GetIacmDefaultPipelineResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving IACM default pipelines.
     * 
     */
    public static Output<GetIacmDefaultPipelineResult> getIacmDefaultPipeline(GetIacmDefaultPipelineArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getIacmDefaultPipeline:getIacmDefaultPipeline", TypeShape.of(GetIacmDefaultPipelineResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving IACM default pipelines.
     * 
     */
    public static CompletableFuture<GetIacmDefaultPipelineResult> getIacmDefaultPipelinePlain(GetIacmDefaultPipelinePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getIacmDefaultPipeline:getIacmDefaultPipeline", TypeShape.of(GetIacmDefaultPipelineResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving modules from the module registry.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInfraModuleResult> getInfraModule(GetInfraModuleArgs args) {
        return getInfraModule(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving modules from the module registry.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetInfraModuleResult> getInfraModulePlain(GetInfraModulePlainArgs args) {
        return getInfraModulePlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving modules from the module registry.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInfraModuleResult> getInfraModule(GetInfraModuleArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getInfraModule:getInfraModule", TypeShape.of(GetInfraModuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving modules from the module registry.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInfraModuleResult> getInfraModule(GetInfraModuleArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getInfraModule:getInfraModule", TypeShape.of(GetInfraModuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving modules from the module registry.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetInfraModuleResult> getInfraModulePlain(GetInfraModulePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getInfraModule:getInfraModule", TypeShape.of(GetInfraModuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving Variable Sets.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetInfraVariableSetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getInfraVariableSet(GetInfraVariableSetArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInfraVariableSetResult> getInfraVariableSet(GetInfraVariableSetArgs args) {
        return getInfraVariableSet(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving Variable Sets.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetInfraVariableSetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getInfraVariableSet(GetInfraVariableSetArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetInfraVariableSetResult> getInfraVariableSetPlain(GetInfraVariableSetPlainArgs args) {
        return getInfraVariableSetPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving Variable Sets.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetInfraVariableSetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getInfraVariableSet(GetInfraVariableSetArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInfraVariableSetResult> getInfraVariableSet(GetInfraVariableSetArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getInfraVariableSet:getInfraVariableSet", TypeShape.of(GetInfraVariableSetResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving Variable Sets.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetInfraVariableSetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getInfraVariableSet(GetInfraVariableSetArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInfraVariableSetResult> getInfraVariableSet(GetInfraVariableSetArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getInfraVariableSet:getInfraVariableSet", TypeShape.of(GetInfraVariableSetResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving Variable Sets.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetInfraVariableSetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getInfraVariableSet(GetInfraVariableSetArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetInfraVariableSetResult> getInfraVariableSetPlain(GetInfraVariableSetPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getInfraVariableSet:getInfraVariableSet", TypeShape.of(GetInfraVariableSetResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Infrastructure.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetInfrastructureArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getInfrastructure(GetInfrastructureArgs.builder()
     *             .identifier("identifier")
     *             .name("name")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .envId("env_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInfrastructureResult> getInfrastructure(GetInfrastructureArgs args) {
        return getInfrastructure(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Infrastructure.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetInfrastructureArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getInfrastructure(GetInfrastructureArgs.builder()
     *             .identifier("identifier")
     *             .name("name")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .envId("env_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetInfrastructureResult> getInfrastructurePlain(GetInfrastructurePlainArgs args) {
        return getInfrastructurePlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Infrastructure.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetInfrastructureArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getInfrastructure(GetInfrastructureArgs.builder()
     *             .identifier("identifier")
     *             .name("name")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .envId("env_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInfrastructureResult> getInfrastructure(GetInfrastructureArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getInfrastructure:getInfrastructure", TypeShape.of(GetInfrastructureResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Infrastructure.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetInfrastructureArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getInfrastructure(GetInfrastructureArgs.builder()
     *             .identifier("identifier")
     *             .name("name")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .envId("env_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInfrastructureResult> getInfrastructure(GetInfrastructureArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getInfrastructure:getInfrastructure", TypeShape.of(GetInfrastructureResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Infrastructure.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetInfrastructureArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getInfrastructure(GetInfrastructureArgs.builder()
     *             .identifier("identifier")
     *             .name("name")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .envId("env_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetInfrastructureResult> getInfrastructurePlain(GetInfrastructurePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getInfrastructure:getInfrastructure", TypeShape.of(GetInfrastructureResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness input set.
     * 
     */
    public static Output<GetInputSetResult> getInputSet(GetInputSetArgs args) {
        return getInputSet(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness input set.
     * 
     */
    public static CompletableFuture<GetInputSetResult> getInputSetPlain(GetInputSetPlainArgs args) {
        return getInputSetPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness input set.
     * 
     */
    public static Output<GetInputSetResult> getInputSet(GetInputSetArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getInputSet:getInputSet", TypeShape.of(GetInputSetResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness input set.
     * 
     */
    public static Output<GetInputSetResult> getInputSet(GetInputSetArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getInputSet:getInputSet", TypeShape.of(GetInputSetResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness input set.
     * 
     */
    public static CompletableFuture<GetInputSetResult> getInputSetPlain(GetInputSetPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getInputSet:getInputSet", TypeShape.of(GetInputSetResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Jenkins connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetJenkinsConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getJenkinsConnector(GetJenkinsConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetJenkinsConnectorResult> getJenkinsConnector(GetJenkinsConnectorArgs args) {
        return getJenkinsConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Jenkins connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetJenkinsConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getJenkinsConnector(GetJenkinsConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetJenkinsConnectorResult> getJenkinsConnectorPlain(GetJenkinsConnectorPlainArgs args) {
        return getJenkinsConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Jenkins connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetJenkinsConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getJenkinsConnector(GetJenkinsConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetJenkinsConnectorResult> getJenkinsConnector(GetJenkinsConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getJenkinsConnector:getJenkinsConnector", TypeShape.of(GetJenkinsConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Jenkins connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetJenkinsConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getJenkinsConnector(GetJenkinsConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetJenkinsConnectorResult> getJenkinsConnector(GetJenkinsConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getJenkinsConnector:getJenkinsConnector", TypeShape.of(GetJenkinsConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Jenkins connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetJenkinsConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getJenkinsConnector(GetJenkinsConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetJenkinsConnectorResult> getJenkinsConnectorPlain(GetJenkinsConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getJenkinsConnector:getJenkinsConnector", TypeShape.of(GetJenkinsConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Jira connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetJiraConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getJiraConnector(GetJiraConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetJiraConnectorResult> getJiraConnector(GetJiraConnectorArgs args) {
        return getJiraConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Jira connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetJiraConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getJiraConnector(GetJiraConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetJiraConnectorResult> getJiraConnectorPlain(GetJiraConnectorPlainArgs args) {
        return getJiraConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Jira connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetJiraConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getJiraConnector(GetJiraConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetJiraConnectorResult> getJiraConnector(GetJiraConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getJiraConnector:getJiraConnector", TypeShape.of(GetJiraConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Jira connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetJiraConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getJiraConnector(GetJiraConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetJiraConnectorResult> getJiraConnector(GetJiraConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getJiraConnector:getJiraConnector", TypeShape.of(GetJiraConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Jira connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetJiraConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getJiraConnector(GetJiraConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetJiraConnectorResult> getJiraConnectorPlain(GetJiraConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getJiraConnector:getJiraConnector", TypeShape.of(GetJiraConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Kubernetes Cloud Cost connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetKubernetesCloudCostConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getKubernetesCloudCostConnector(GetKubernetesCloudCostConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKubernetesCloudCostConnectorResult> getKubernetesCloudCostConnector(GetKubernetesCloudCostConnectorArgs args) {
        return getKubernetesCloudCostConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Kubernetes Cloud Cost connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetKubernetesCloudCostConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getKubernetesCloudCostConnector(GetKubernetesCloudCostConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetKubernetesCloudCostConnectorResult> getKubernetesCloudCostConnectorPlain(GetKubernetesCloudCostConnectorPlainArgs args) {
        return getKubernetesCloudCostConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Kubernetes Cloud Cost connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetKubernetesCloudCostConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getKubernetesCloudCostConnector(GetKubernetesCloudCostConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKubernetesCloudCostConnectorResult> getKubernetesCloudCostConnector(GetKubernetesCloudCostConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getKubernetesCloudCostConnector:getKubernetesCloudCostConnector", TypeShape.of(GetKubernetesCloudCostConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Kubernetes Cloud Cost connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetKubernetesCloudCostConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getKubernetesCloudCostConnector(GetKubernetesCloudCostConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKubernetesCloudCostConnectorResult> getKubernetesCloudCostConnector(GetKubernetesCloudCostConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getKubernetesCloudCostConnector:getKubernetesCloudCostConnector", TypeShape.of(GetKubernetesCloudCostConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Kubernetes Cloud Cost connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetKubernetesCloudCostConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getKubernetesCloudCostConnector(GetKubernetesCloudCostConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetKubernetesCloudCostConnectorResult> getKubernetesCloudCostConnectorPlain(GetKubernetesCloudCostConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getKubernetesCloudCostConnector:getKubernetesCloudCostConnector", TypeShape.of(GetKubernetesCloudCostConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Kubernetes connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetKubernetesConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getKubernetesConnector(GetKubernetesConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKubernetesConnectorResult> getKubernetesConnector(GetKubernetesConnectorArgs args) {
        return getKubernetesConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Kubernetes connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetKubernetesConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getKubernetesConnector(GetKubernetesConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetKubernetesConnectorResult> getKubernetesConnectorPlain(GetKubernetesConnectorPlainArgs args) {
        return getKubernetesConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Kubernetes connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetKubernetesConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getKubernetesConnector(GetKubernetesConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKubernetesConnectorResult> getKubernetesConnector(GetKubernetesConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getKubernetesConnector:getKubernetesConnector", TypeShape.of(GetKubernetesConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Kubernetes connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetKubernetesConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getKubernetesConnector(GetKubernetesConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKubernetesConnectorResult> getKubernetesConnector(GetKubernetesConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getKubernetesConnector:getKubernetesConnector", TypeShape.of(GetKubernetesConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Kubernetes connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetKubernetesConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getKubernetesConnector(GetKubernetesConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetKubernetesConnectorResult> getKubernetesConnectorPlain(GetKubernetesConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getKubernetesConnector:getKubernetesConnector", TypeShape.of(GetKubernetesConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * DataSource for deployment freeze in harness.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetManualFreezeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getManualFreeze(GetManualFreezeArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .accountId("account_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetManualFreezeResult> getManualFreeze(GetManualFreezeArgs args) {
        return getManualFreeze(args, InvokeOptions.Empty);
    }
    /**
     * DataSource for deployment freeze in harness.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetManualFreezeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getManualFreeze(GetManualFreezeArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .accountId("account_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetManualFreezeResult> getManualFreezePlain(GetManualFreezePlainArgs args) {
        return getManualFreezePlain(args, InvokeOptions.Empty);
    }
    /**
     * DataSource for deployment freeze in harness.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetManualFreezeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getManualFreeze(GetManualFreezeArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .accountId("account_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetManualFreezeResult> getManualFreeze(GetManualFreezeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getManualFreeze:getManualFreeze", TypeShape.of(GetManualFreezeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * DataSource for deployment freeze in harness.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetManualFreezeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getManualFreeze(GetManualFreezeArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .accountId("account_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetManualFreezeResult> getManualFreeze(GetManualFreezeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getManualFreeze:getManualFreeze", TypeShape.of(GetManualFreezeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * DataSource for deployment freeze in harness.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetManualFreezeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getManualFreeze(GetManualFreezeArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .accountId("account_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetManualFreezeResult> getManualFreezePlain(GetManualFreezePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getManualFreeze:getManualFreeze", TypeShape.of(GetManualFreezeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a monitored service.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetMonitoredServiceResult> getMonitoredService(GetMonitoredServiceArgs args) {
        return getMonitoredService(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a monitored service.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetMonitoredServiceResult> getMonitoredServicePlain(GetMonitoredServicePlainArgs args) {
        return getMonitoredServicePlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a monitored service.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetMonitoredServiceResult> getMonitoredService(GetMonitoredServiceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getMonitoredService:getMonitoredService", TypeShape.of(GetMonitoredServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a monitored service.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetMonitoredServiceResult> getMonitoredService(GetMonitoredServiceArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getMonitoredService:getMonitoredService", TypeShape.of(GetMonitoredServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a monitored service.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetMonitoredServiceResult> getMonitoredServicePlain(GetMonitoredServicePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getMonitoredService:getMonitoredService", TypeShape.of(GetMonitoredServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Nexus connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetNexusConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getNexusConnector(GetNexusConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNexusConnectorResult> getNexusConnector(GetNexusConnectorArgs args) {
        return getNexusConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Nexus connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetNexusConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getNexusConnector(GetNexusConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNexusConnectorResult> getNexusConnectorPlain(GetNexusConnectorPlainArgs args) {
        return getNexusConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Nexus connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetNexusConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getNexusConnector(GetNexusConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNexusConnectorResult> getNexusConnector(GetNexusConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getNexusConnector:getNexusConnector", TypeShape.of(GetNexusConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Nexus connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetNexusConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getNexusConnector(GetNexusConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNexusConnectorResult> getNexusConnector(GetNexusConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getNexusConnector:getNexusConnector", TypeShape.of(GetNexusConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Nexus connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetNexusConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getNexusConnector(GetNexusConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNexusConnectorResult> getNexusConnectorPlain(GetNexusConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getNexusConnector:getNexusConnector", TypeShape.of(GetNexusConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Notification Rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetNotificationRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getNotificationRule(GetNotificationRuleArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNotificationRuleResult> getNotificationRule(GetNotificationRuleArgs args) {
        return getNotificationRule(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Notification Rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetNotificationRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getNotificationRule(GetNotificationRuleArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNotificationRuleResult> getNotificationRulePlain(GetNotificationRulePlainArgs args) {
        return getNotificationRulePlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Notification Rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetNotificationRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getNotificationRule(GetNotificationRuleArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNotificationRuleResult> getNotificationRule(GetNotificationRuleArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getNotificationRule:getNotificationRule", TypeShape.of(GetNotificationRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Notification Rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetNotificationRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getNotificationRule(GetNotificationRuleArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNotificationRuleResult> getNotificationRule(GetNotificationRuleArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getNotificationRule:getNotificationRule", TypeShape.of(GetNotificationRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Notification Rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetNotificationRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getNotificationRule(GetNotificationRuleArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNotificationRuleResult> getNotificationRulePlain(GetNotificationRulePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getNotificationRule:getNotificationRule", TypeShape.of(GetNotificationRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a OCI Helm connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetOciHelmConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getOciHelmConnector(GetOciHelmConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetOciHelmConnectorResult> getOciHelmConnector(GetOciHelmConnectorArgs args) {
        return getOciHelmConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a OCI Helm connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetOciHelmConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getOciHelmConnector(GetOciHelmConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetOciHelmConnectorResult> getOciHelmConnectorPlain(GetOciHelmConnectorPlainArgs args) {
        return getOciHelmConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a OCI Helm connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetOciHelmConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getOciHelmConnector(GetOciHelmConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetOciHelmConnectorResult> getOciHelmConnector(GetOciHelmConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getOciHelmConnector:getOciHelmConnector", TypeShape.of(GetOciHelmConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a OCI Helm connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetOciHelmConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getOciHelmConnector(GetOciHelmConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetOciHelmConnectorResult> getOciHelmConnector(GetOciHelmConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getOciHelmConnector:getOciHelmConnector", TypeShape.of(GetOciHelmConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a OCI Helm connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetOciHelmConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getOciHelmConnector(GetOciHelmConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetOciHelmConnectorResult> getOciHelmConnectorPlain(GetOciHelmConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getOciHelmConnector:getOciHelmConnector", TypeShape.of(GetOciHelmConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = PlatformFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetOrganizationResult> getOrganization() {
        return getOrganization(GetOrganizationArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = PlatformFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetOrganizationResult> getOrganizationPlain() {
        return getOrganizationPlain(GetOrganizationPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = PlatformFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetOrganizationResult> getOrganization(GetOrganizationArgs args) {
        return getOrganization(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = PlatformFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetOrganizationResult> getOrganizationPlain(GetOrganizationPlainArgs args) {
        return getOrganizationPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = PlatformFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetOrganizationResult> getOrganization(GetOrganizationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getOrganization:getOrganization", TypeShape.of(GetOrganizationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = PlatformFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetOrganizationResult> getOrganization(GetOrganizationArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getOrganization:getOrganization", TypeShape.of(GetOrganizationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = PlatformFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetOrganizationResult> getOrganizationPlain(GetOrganizationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getOrganization:getOrganization", TypeShape.of(GetOrganizationResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetOverridesResult> getOverrides(GetOverridesArgs args) {
        return getOverrides(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetOverridesResult> getOverridesPlain(GetOverridesPlainArgs args) {
        return getOverridesPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetOverridesResult> getOverrides(GetOverridesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getOverrides:getOverrides", TypeShape.of(GetOverridesResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetOverridesResult> getOverrides(GetOverridesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getOverrides:getOverrides", TypeShape.of(GetOverridesResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetOverridesResult> getOverridesPlain(GetOverridesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getOverrides:getOverrides", TypeShape.of(GetOverridesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPagerdutyConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPagerdutyConnector(GetPagerdutyConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPagerdutyConnectorResult> getPagerdutyConnector(GetPagerdutyConnectorArgs args) {
        return getPagerdutyConnector(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPagerdutyConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPagerdutyConnector(GetPagerdutyConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPagerdutyConnectorResult> getPagerdutyConnectorPlain(GetPagerdutyConnectorPlainArgs args) {
        return getPagerdutyConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPagerdutyConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPagerdutyConnector(GetPagerdutyConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPagerdutyConnectorResult> getPagerdutyConnector(GetPagerdutyConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getPagerdutyConnector:getPagerdutyConnector", TypeShape.of(GetPagerdutyConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPagerdutyConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPagerdutyConnector(GetPagerdutyConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPagerdutyConnectorResult> getPagerdutyConnector(GetPagerdutyConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getPagerdutyConnector:getPagerdutyConnector", TypeShape.of(GetPagerdutyConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPagerdutyConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPagerdutyConnector(GetPagerdutyConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPagerdutyConnectorResult> getPagerdutyConnectorPlain(GetPagerdutyConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getPagerdutyConnector:getPagerdutyConnector", TypeShape.of(GetPagerdutyConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving permissions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPermissionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getPermissions(GetPermissionsArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPermissionsResult> getPermissions() {
        return getPermissions(GetPermissionsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving permissions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPermissionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getPermissions(GetPermissionsArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPermissionsResult> getPermissionsPlain() {
        return getPermissionsPlain(GetPermissionsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving permissions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPermissionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getPermissions(GetPermissionsArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPermissionsResult> getPermissions(GetPermissionsArgs args) {
        return getPermissions(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving permissions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPermissionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getPermissions(GetPermissionsArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPermissionsResult> getPermissionsPlain(GetPermissionsPlainArgs args) {
        return getPermissionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving permissions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPermissionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getPermissions(GetPermissionsArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPermissionsResult> getPermissions(GetPermissionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getPermissions:getPermissions", TypeShape.of(GetPermissionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving permissions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPermissionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getPermissions(GetPermissionsArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPermissionsResult> getPermissions(GetPermissionsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getPermissions:getPermissions", TypeShape.of(GetPermissionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving permissions.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPermissionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getPermissions(GetPermissionsArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPermissionsResult> getPermissionsPlain(GetPermissionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getPermissions:getPermissions", TypeShape.of(GetPermissionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness pipeline.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPipelineArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPipeline(GetPipelineArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPipelineResult> getPipeline(GetPipelineArgs args) {
        return getPipeline(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness pipeline.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPipelineArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPipeline(GetPipelineArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPipelineResult> getPipelinePlain(GetPipelinePlainArgs args) {
        return getPipelinePlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness pipeline.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPipelineArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPipeline(GetPipelineArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPipelineResult> getPipeline(GetPipelineArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getPipeline:getPipeline", TypeShape.of(GetPipelineResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness pipeline.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPipelineArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPipeline(GetPipelineArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPipelineResult> getPipeline(GetPipelineArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getPipeline:getPipeline", TypeShape.of(GetPipelineResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness pipeline.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPipelineArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPipeline(GetPipelineArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPipelineResult> getPipelinePlain(GetPipelinePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getPipeline:getPipeline", TypeShape.of(GetPipelineResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Pipeline Filter.
     * 
     */
    public static Output<GetPipelineFiltersResult> getPipelineFilters(GetPipelineFiltersArgs args) {
        return getPipelineFilters(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Pipeline Filter.
     * 
     */
    public static CompletableFuture<GetPipelineFiltersResult> getPipelineFiltersPlain(GetPipelineFiltersPlainArgs args) {
        return getPipelineFiltersPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Pipeline Filter.
     * 
     */
    public static Output<GetPipelineFiltersResult> getPipelineFilters(GetPipelineFiltersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getPipelineFilters:getPipelineFilters", TypeShape.of(GetPipelineFiltersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Pipeline Filter.
     * 
     */
    public static Output<GetPipelineFiltersResult> getPipelineFilters(GetPipelineFiltersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getPipelineFilters:getPipelineFilters", TypeShape.of(GetPipelineFiltersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Pipeline Filter.
     * 
     */
    public static CompletableFuture<GetPipelineFiltersResult> getPipelineFiltersPlain(GetPipelineFiltersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getPipelineFilters:getPipelineFilters", TypeShape.of(GetPipelineFiltersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness pipeline list.
     * 
     * ## Example Usage
     * 
     * ### Without the Pagination
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPipelineListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPipelineList(GetPipelineListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### With Pagination Logic
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPipelineListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPipelineList(GetPipelineListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .page(1)
     *             .limit(4)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPipelineListResult> getPipelineList(GetPipelineListArgs args) {
        return getPipelineList(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness pipeline list.
     * 
     * ## Example Usage
     * 
     * ### Without the Pagination
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPipelineListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPipelineList(GetPipelineListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### With Pagination Logic
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPipelineListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPipelineList(GetPipelineListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .page(1)
     *             .limit(4)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPipelineListResult> getPipelineListPlain(GetPipelineListPlainArgs args) {
        return getPipelineListPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness pipeline list.
     * 
     * ## Example Usage
     * 
     * ### Without the Pagination
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPipelineListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPipelineList(GetPipelineListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### With Pagination Logic
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPipelineListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPipelineList(GetPipelineListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .page(1)
     *             .limit(4)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPipelineListResult> getPipelineList(GetPipelineListArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getPipelineList:getPipelineList", TypeShape.of(GetPipelineListResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness pipeline list.
     * 
     * ## Example Usage
     * 
     * ### Without the Pagination
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPipelineListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPipelineList(GetPipelineListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### With Pagination Logic
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPipelineListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPipelineList(GetPipelineListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .page(1)
     *             .limit(4)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPipelineListResult> getPipelineList(GetPipelineListArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getPipelineList:getPipelineList", TypeShape.of(GetPipelineListResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness pipeline list.
     * 
     * ## Example Usage
     * 
     * ### Without the Pagination
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPipelineListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPipelineList(GetPipelineListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### With Pagination Logic
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPipelineListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPipelineList(GetPipelineListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .page(1)
     *             .limit(4)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPipelineListResult> getPipelineListPlain(GetPipelineListPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getPipelineList:getPipelineList", TypeShape.of(GetPipelineListResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getPolicy(GetPolicyArgs.builder()
     *             .identifier(testHarnessPlatformPolicy.identifier())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPolicyResult> getPolicy() {
        return getPolicy(GetPolicyArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getPolicy(GetPolicyArgs.builder()
     *             .identifier(testHarnessPlatformPolicy.identifier())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPolicyResult> getPolicyPlain() {
        return getPolicyPlain(GetPolicyPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getPolicy(GetPolicyArgs.builder()
     *             .identifier(testHarnessPlatformPolicy.identifier())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPolicyResult> getPolicy(GetPolicyArgs args) {
        return getPolicy(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getPolicy(GetPolicyArgs.builder()
     *             .identifier(testHarnessPlatformPolicy.identifier())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPolicyResult> getPolicyPlain(GetPolicyPlainArgs args) {
        return getPolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getPolicy(GetPolicyArgs.builder()
     *             .identifier(testHarnessPlatformPolicy.identifier())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPolicyResult> getPolicy(GetPolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getPolicy:getPolicy", TypeShape.of(GetPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getPolicy(GetPolicyArgs.builder()
     *             .identifier(testHarnessPlatformPolicy.identifier())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPolicyResult> getPolicy(GetPolicyArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getPolicy:getPolicy", TypeShape.of(GetPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getPolicy(GetPolicyArgs.builder()
     *             .identifier(testHarnessPlatformPolicy.identifier())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPolicyResult> getPolicyPlain(GetPolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getPolicy:getPolicy", TypeShape.of(GetPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness policyset.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPolicySetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getPolicySet(GetPolicySetArgs.builder()
     *             .identifier("harness_platform_policyset.test.identifier")
     *             .name("harness_platform_policyset.test.name")
     *             .action("onrun")
     *             .type("pipeline")
     *             .enabled(true)
     *             .policies(GetPolicySetPolicyArgs.builder()
     *                 .identifier("always_run")
     *                 .severity("warning")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPolicySetResult> getPolicySet(GetPolicySetArgs args) {
        return getPolicySet(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness policyset.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPolicySetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getPolicySet(GetPolicySetArgs.builder()
     *             .identifier("harness_platform_policyset.test.identifier")
     *             .name("harness_platform_policyset.test.name")
     *             .action("onrun")
     *             .type("pipeline")
     *             .enabled(true)
     *             .policies(GetPolicySetPolicyArgs.builder()
     *                 .identifier("always_run")
     *                 .severity("warning")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPolicySetResult> getPolicySetPlain(GetPolicySetPlainArgs args) {
        return getPolicySetPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness policyset.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPolicySetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getPolicySet(GetPolicySetArgs.builder()
     *             .identifier("harness_platform_policyset.test.identifier")
     *             .name("harness_platform_policyset.test.name")
     *             .action("onrun")
     *             .type("pipeline")
     *             .enabled(true)
     *             .policies(GetPolicySetPolicyArgs.builder()
     *                 .identifier("always_run")
     *                 .severity("warning")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPolicySetResult> getPolicySet(GetPolicySetArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getPolicySet:getPolicySet", TypeShape.of(GetPolicySetResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness policyset.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPolicySetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getPolicySet(GetPolicySetArgs.builder()
     *             .identifier("harness_platform_policyset.test.identifier")
     *             .name("harness_platform_policyset.test.name")
     *             .action("onrun")
     *             .type("pipeline")
     *             .enabled(true)
     *             .policies(GetPolicySetPolicyArgs.builder()
     *                 .identifier("always_run")
     *                 .severity("warning")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPolicySetResult> getPolicySet(GetPolicySetArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getPolicySet:getPolicySet", TypeShape.of(GetPolicySetResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness policyset.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPolicySetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getPolicySet(GetPolicySetArgs.builder()
     *             .identifier("harness_platform_policyset.test.identifier")
     *             .name("harness_platform_policyset.test.name")
     *             .action("onrun")
     *             .type("pipeline")
     *             .enabled(true)
     *             .policies(GetPolicySetPolicyArgs.builder()
     *                 .identifier("always_run")
     *                 .severity("warning")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPolicySetResult> getPolicySetPlain(GetPolicySetPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getPolicySet:getPolicySet", TypeShape.of(GetPolicySetResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleById = PlatformFunctions.getProject(GetProjectArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .build());
     * 
     *         final var exampleByName = PlatformFunctions.getProject(GetProjectArgs.builder()
     *             .name("name")
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectResult> getProject(GetProjectArgs args) {
        return getProject(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleById = PlatformFunctions.getProject(GetProjectArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .build());
     * 
     *         final var exampleByName = PlatformFunctions.getProject(GetProjectArgs.builder()
     *             .name("name")
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain(GetProjectPlainArgs args) {
        return getProjectPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleById = PlatformFunctions.getProject(GetProjectArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .build());
     * 
     *         final var exampleByName = PlatformFunctions.getProject(GetProjectArgs.builder()
     *             .name("name")
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectResult> getProject(GetProjectArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getProject:getProject", TypeShape.of(GetProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleById = PlatformFunctions.getProject(GetProjectArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .build());
     * 
     *         final var exampleByName = PlatformFunctions.getProject(GetProjectArgs.builder()
     *             .name("name")
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectResult> getProject(GetProjectArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getProject:getProject", TypeShape.of(GetProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleById = PlatformFunctions.getProject(GetProjectArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .build());
     * 
     *         final var exampleByName = PlatformFunctions.getProject(GetProjectArgs.builder()
     *             .name("name")
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain(GetProjectPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getProject:getProject", TypeShape.of(GetProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving Harness project list.
     * 
     * ## Example Usage
     * 
     * ### Org Level Project List
     * 
     * ### Without the Pagination
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetProjectListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getProjectList(GetProjectListArgs.builder()
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### With Pagination Logic
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetProjectListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getProjectList(GetProjectListArgs.builder()
     *             .orgId("org_id")
     *             .page(1)
     *             .limit(4)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectListResult> getProjectList(GetProjectListArgs args) {
        return getProjectList(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving Harness project list.
     * 
     * ## Example Usage
     * 
     * ### Org Level Project List
     * 
     * ### Without the Pagination
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetProjectListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getProjectList(GetProjectListArgs.builder()
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### With Pagination Logic
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetProjectListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getProjectList(GetProjectListArgs.builder()
     *             .orgId("org_id")
     *             .page(1)
     *             .limit(4)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetProjectListResult> getProjectListPlain(GetProjectListPlainArgs args) {
        return getProjectListPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving Harness project list.
     * 
     * ## Example Usage
     * 
     * ### Org Level Project List
     * 
     * ### Without the Pagination
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetProjectListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getProjectList(GetProjectListArgs.builder()
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### With Pagination Logic
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetProjectListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getProjectList(GetProjectListArgs.builder()
     *             .orgId("org_id")
     *             .page(1)
     *             .limit(4)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectListResult> getProjectList(GetProjectListArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getProjectList:getProjectList", TypeShape.of(GetProjectListResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving Harness project list.
     * 
     * ## Example Usage
     * 
     * ### Org Level Project List
     * 
     * ### Without the Pagination
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetProjectListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getProjectList(GetProjectListArgs.builder()
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### With Pagination Logic
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetProjectListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getProjectList(GetProjectListArgs.builder()
     *             .orgId("org_id")
     *             .page(1)
     *             .limit(4)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectListResult> getProjectList(GetProjectListArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getProjectList:getProjectList", TypeShape.of(GetProjectListResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving Harness project list.
     * 
     * ## Example Usage
     * 
     * ### Org Level Project List
     * 
     * ### Without the Pagination
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetProjectListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getProjectList(GetProjectListArgs.builder()
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### With Pagination Logic
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetProjectListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getProjectList(GetProjectListArgs.builder()
     *             .orgId("org_id")
     *             .page(1)
     *             .limit(4)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetProjectListResult> getProjectListPlain(GetProjectListPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getProjectList:getProjectList", TypeShape.of(GetProjectListResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Prometheus connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPrometheusConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPrometheusConnector(GetPrometheusConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrometheusConnectorResult> getPrometheusConnector(GetPrometheusConnectorArgs args) {
        return getPrometheusConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Prometheus connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPrometheusConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPrometheusConnector(GetPrometheusConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPrometheusConnectorResult> getPrometheusConnectorPlain(GetPrometheusConnectorPlainArgs args) {
        return getPrometheusConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Prometheus connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPrometheusConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPrometheusConnector(GetPrometheusConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrometheusConnectorResult> getPrometheusConnector(GetPrometheusConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getPrometheusConnector:getPrometheusConnector", TypeShape.of(GetPrometheusConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Prometheus connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPrometheusConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPrometheusConnector(GetPrometheusConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrometheusConnectorResult> getPrometheusConnector(GetPrometheusConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getPrometheusConnector:getPrometheusConnector", TypeShape.of(GetPrometheusConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Prometheus connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetPrometheusConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getPrometheusConnector(GetPrometheusConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPrometheusConnectorResult> getPrometheusConnectorPlain(GetPrometheusConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getPrometheusConnector:getPrometheusConnector", TypeShape.of(GetPrometheusConnectorResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetProviderResult> getProvider(GetProviderArgs args) {
        return getProvider(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetProviderResult> getProviderPlain(GetProviderPlainArgs args) {
        return getProviderPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetProviderResult> getProvider(GetProviderArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getProvider:getProvider", TypeShape.of(GetProviderResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetProviderResult> getProvider(GetProviderArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getProvider:getProvider", TypeShape.of(GetProviderResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetProviderResult> getProviderPlain(GetProviderPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getProvider:getProvider", TypeShape.of(GetProviderResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness repo.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetRepoArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleByIdentifier = PlatformFunctions.getRepo(GetRepoArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("proj_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRepoResult> getRepo(GetRepoArgs args) {
        return getRepo(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness repo.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetRepoArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleByIdentifier = PlatformFunctions.getRepo(GetRepoArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("proj_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRepoResult> getRepoPlain(GetRepoPlainArgs args) {
        return getRepoPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness repo.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetRepoArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleByIdentifier = PlatformFunctions.getRepo(GetRepoArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("proj_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRepoResult> getRepo(GetRepoArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getRepo:getRepo", TypeShape.of(GetRepoResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness repo.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetRepoArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleByIdentifier = PlatformFunctions.getRepo(GetRepoArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("proj_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRepoResult> getRepo(GetRepoArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getRepo:getRepo", TypeShape.of(GetRepoResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness repo.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetRepoArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleByIdentifier = PlatformFunctions.getRepo(GetRepoArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("proj_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRepoResult> getRepoPlain(GetRepoPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getRepo:getRepo", TypeShape.of(GetRepoResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness repo branch rule.
     * 
     */
    public static Output<GetRepoRuleBranchResult> getRepoRuleBranch(GetRepoRuleBranchArgs args) {
        return getRepoRuleBranch(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness repo branch rule.
     * 
     */
    public static CompletableFuture<GetRepoRuleBranchResult> getRepoRuleBranchPlain(GetRepoRuleBranchPlainArgs args) {
        return getRepoRuleBranchPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness repo branch rule.
     * 
     */
    public static Output<GetRepoRuleBranchResult> getRepoRuleBranch(GetRepoRuleBranchArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getRepoRuleBranch:getRepoRuleBranch", TypeShape.of(GetRepoRuleBranchResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness repo branch rule.
     * 
     */
    public static Output<GetRepoRuleBranchResult> getRepoRuleBranch(GetRepoRuleBranchArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getRepoRuleBranch:getRepoRuleBranch", TypeShape.of(GetRepoRuleBranchResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness repo branch rule.
     * 
     */
    public static CompletableFuture<GetRepoRuleBranchResult> getRepoRuleBranchPlain(GetRepoRuleBranchPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getRepoRuleBranch:getRepoRuleBranch", TypeShape.of(GetRepoRuleBranchResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Repo Webhook.
     * 
     */
    public static Output<GetRepoWebhookResult> getRepoWebhook(GetRepoWebhookArgs args) {
        return getRepoWebhook(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Repo Webhook.
     * 
     */
    public static CompletableFuture<GetRepoWebhookResult> getRepoWebhookPlain(GetRepoWebhookPlainArgs args) {
        return getRepoWebhookPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Repo Webhook.
     * 
     */
    public static Output<GetRepoWebhookResult> getRepoWebhook(GetRepoWebhookArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getRepoWebhook:getRepoWebhook", TypeShape.of(GetRepoWebhookResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Repo Webhook.
     * 
     */
    public static Output<GetRepoWebhookResult> getRepoWebhook(GetRepoWebhookArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getRepoWebhook:getRepoWebhook", TypeShape.of(GetRepoWebhookResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Repo Webhook.
     * 
     */
    public static CompletableFuture<GetRepoWebhookResult> getRepoWebhookPlain(GetRepoWebhookPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getRepoWebhook:getRepoWebhook", TypeShape.of(GetRepoWebhookResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetResourceGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getResourceGroup(GetResourceGroupArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetResourceGroupResult> getResourceGroup(GetResourceGroupArgs args) {
        return getResourceGroup(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetResourceGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getResourceGroup(GetResourceGroupArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetResourceGroupResult> getResourceGroupPlain(GetResourceGroupPlainArgs args) {
        return getResourceGroupPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetResourceGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getResourceGroup(GetResourceGroupArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetResourceGroupResult> getResourceGroup(GetResourceGroupArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getResourceGroup:getResourceGroup", TypeShape.of(GetResourceGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetResourceGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getResourceGroup(GetResourceGroupArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetResourceGroupResult> getResourceGroup(GetResourceGroupArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getResourceGroup:getResourceGroup", TypeShape.of(GetResourceGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetResourceGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getResourceGroup(GetResourceGroupArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetResourceGroupResult> getResourceGroupPlain(GetResourceGroupPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getResourceGroup:getResourceGroup", TypeShape.of(GetResourceGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetRoleAssignmentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getRoleAssignments(GetRoleAssignmentsArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRoleAssignmentsResult> getRoleAssignments(GetRoleAssignmentsArgs args) {
        return getRoleAssignments(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetRoleAssignmentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getRoleAssignments(GetRoleAssignmentsArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRoleAssignmentsResult> getRoleAssignmentsPlain(GetRoleAssignmentsPlainArgs args) {
        return getRoleAssignmentsPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetRoleAssignmentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getRoleAssignments(GetRoleAssignmentsArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRoleAssignmentsResult> getRoleAssignments(GetRoleAssignmentsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getRoleAssignments:getRoleAssignments", TypeShape.of(GetRoleAssignmentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetRoleAssignmentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getRoleAssignments(GetRoleAssignmentsArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRoleAssignmentsResult> getRoleAssignments(GetRoleAssignmentsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getRoleAssignments:getRoleAssignments", TypeShape.of(GetRoleAssignmentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetRoleAssignmentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getRoleAssignments(GetRoleAssignmentsArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRoleAssignmentsResult> getRoleAssignmentsPlain(GetRoleAssignmentsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getRoleAssignments:getRoleAssignments", TypeShape.of(GetRoleAssignmentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getRoles(GetRolesArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRolesResult> getRoles(GetRolesArgs args) {
        return getRoles(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getRoles(GetRolesArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRolesResult> getRolesPlain(GetRolesPlainArgs args) {
        return getRolesPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getRoles(GetRolesArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRolesResult> getRoles(GetRolesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getRoles:getRoles", TypeShape.of(GetRolesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getRoles(GetRolesArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRolesResult> getRoles(GetRolesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getRoles:getRoles", TypeShape.of(GetRolesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getRoles(GetRolesArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRolesResult> getRolesPlain(GetRolesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getRoles:getRoles", TypeShape.of(GetRolesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSecretFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSecretFile(GetSecretFileArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecretFileResult> getSecretFile(GetSecretFileArgs args) {
        return getSecretFile(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSecretFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSecretFile(GetSecretFileArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSecretFileResult> getSecretFilePlain(GetSecretFilePlainArgs args) {
        return getSecretFilePlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSecretFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSecretFile(GetSecretFileArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecretFileResult> getSecretFile(GetSecretFileArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getSecretFile:getSecretFile", TypeShape.of(GetSecretFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSecretFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSecretFile(GetSecretFileArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecretFileResult> getSecretFile(GetSecretFileArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getSecretFile:getSecretFile", TypeShape.of(GetSecretFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSecretFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSecretFile(GetSecretFileArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSecretFileResult> getSecretFilePlain(GetSecretFilePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getSecretFile:getSecretFile", TypeShape.of(GetSecretFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSecretSshkeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSecretSshkey(GetSecretSshkeyArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecretSshkeyResult> getSecretSshkey(GetSecretSshkeyArgs args) {
        return getSecretSshkey(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSecretSshkeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSecretSshkey(GetSecretSshkeyArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSecretSshkeyResult> getSecretSshkeyPlain(GetSecretSshkeyPlainArgs args) {
        return getSecretSshkeyPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSecretSshkeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSecretSshkey(GetSecretSshkeyArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecretSshkeyResult> getSecretSshkey(GetSecretSshkeyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getSecretSshkey:getSecretSshkey", TypeShape.of(GetSecretSshkeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSecretSshkeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSecretSshkey(GetSecretSshkeyArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecretSshkeyResult> getSecretSshkey(GetSecretSshkeyArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getSecretSshkey:getSecretSshkey", TypeShape.of(GetSecretSshkeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSecretSshkeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSecretSshkey(GetSecretSshkeyArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSecretSshkeyResult> getSecretSshkeyPlain(GetSecretSshkeyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getSecretSshkey:getSecretSshkey", TypeShape.of(GetSecretSshkeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * DataSource for looking up secret of type secret text.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSecretTextArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getSecretText(GetSecretTextArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecretTextResult> getSecretText(GetSecretTextArgs args) {
        return getSecretText(args, InvokeOptions.Empty);
    }
    /**
     * DataSource for looking up secret of type secret text.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSecretTextArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getSecretText(GetSecretTextArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSecretTextResult> getSecretTextPlain(GetSecretTextPlainArgs args) {
        return getSecretTextPlain(args, InvokeOptions.Empty);
    }
    /**
     * DataSource for looking up secret of type secret text.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSecretTextArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getSecretText(GetSecretTextArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecretTextResult> getSecretText(GetSecretTextArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getSecretText:getSecretText", TypeShape.of(GetSecretTextResult.class), args, Utilities.withVersion(options));
    }
    /**
     * DataSource for looking up secret of type secret text.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSecretTextArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getSecretText(GetSecretTextArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecretTextResult> getSecretText(GetSecretTextArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getSecretText:getSecretText", TypeShape.of(GetSecretTextResult.class), args, Utilities.withVersion(options));
    }
    /**
     * DataSource for looking up secret of type secret text.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSecretTextArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getSecretText(GetSecretTextArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSecretTextResult> getSecretTextPlain(GetSecretTextPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getSecretText:getSecretText", TypeShape.of(GetSecretTextResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness service.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getService(GetServiceArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceResult> getService(GetServiceArgs args) {
        return getService(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness service.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getService(GetServiceArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServiceResult> getServicePlain(GetServicePlainArgs args) {
        return getServicePlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness service.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getService(GetServiceArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceResult> getService(GetServiceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getService:getService", TypeShape.of(GetServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness service.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getService(GetServiceArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceResult> getService(GetServiceArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getService:getService", TypeShape.of(GetServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness service.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getService(GetServiceArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServiceResult> getServicePlain(GetServicePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getService:getService", TypeShape.of(GetServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceAccount(GetServiceAccountArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceAccountResult> getServiceAccount() {
        return getServiceAccount(GetServiceAccountArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceAccount(GetServiceAccountArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServiceAccountResult> getServiceAccountPlain() {
        return getServiceAccountPlain(GetServiceAccountPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceAccount(GetServiceAccountArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceAccountResult> getServiceAccount(GetServiceAccountArgs args) {
        return getServiceAccount(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceAccount(GetServiceAccountArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServiceAccountResult> getServiceAccountPlain(GetServiceAccountPlainArgs args) {
        return getServiceAccountPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceAccount(GetServiceAccountArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceAccountResult> getServiceAccount(GetServiceAccountArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getServiceAccount:getServiceAccount", TypeShape.of(GetServiceAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceAccount(GetServiceAccountArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceAccountResult> getServiceAccount(GetServiceAccountArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getServiceAccount:getServiceAccount", TypeShape.of(GetServiceAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceAccount(GetServiceAccountArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServiceAccountResult> getServiceAccountPlain(GetServiceAccountPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getServiceAccount:getServiceAccount", TypeShape.of(GetServiceAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving Harness service list.
     * 
     * ## Example Usage
     * 
     * ### Project Level Service List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceList(GetServiceListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Organisation Level Service List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceList(GetServiceListArgs.builder()
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Account Level Service List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceList(GetServiceListArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceListResult> getServiceList() {
        return getServiceList(GetServiceListArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving Harness service list.
     * 
     * ## Example Usage
     * 
     * ### Project Level Service List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceList(GetServiceListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Organisation Level Service List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceList(GetServiceListArgs.builder()
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Account Level Service List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceList(GetServiceListArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServiceListResult> getServiceListPlain() {
        return getServiceListPlain(GetServiceListPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving Harness service list.
     * 
     * ## Example Usage
     * 
     * ### Project Level Service List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceList(GetServiceListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Organisation Level Service List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceList(GetServiceListArgs.builder()
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Account Level Service List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceList(GetServiceListArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceListResult> getServiceList(GetServiceListArgs args) {
        return getServiceList(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving Harness service list.
     * 
     * ## Example Usage
     * 
     * ### Project Level Service List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceList(GetServiceListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Organisation Level Service List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceList(GetServiceListArgs.builder()
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Account Level Service List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceList(GetServiceListArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServiceListResult> getServiceListPlain(GetServiceListPlainArgs args) {
        return getServiceListPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving Harness service list.
     * 
     * ## Example Usage
     * 
     * ### Project Level Service List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceList(GetServiceListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Organisation Level Service List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceList(GetServiceListArgs.builder()
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Account Level Service List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceList(GetServiceListArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceListResult> getServiceList(GetServiceListArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getServiceList:getServiceList", TypeShape.of(GetServiceListResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving Harness service list.
     * 
     * ## Example Usage
     * 
     * ### Project Level Service List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceList(GetServiceListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Organisation Level Service List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceList(GetServiceListArgs.builder()
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Account Level Service List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceList(GetServiceListArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceListResult> getServiceList(GetServiceListArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getServiceList:getServiceList", TypeShape.of(GetServiceListResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving Harness service list.
     * 
     * ## Example Usage
     * 
     * ### Project Level Service List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceList(GetServiceListArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Organisation Level Service List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceList(GetServiceListArgs.builder()
     *             .orgId("org_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Account Level Service List
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceList(GetServiceListArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServiceListResult> getServiceListPlain(GetServiceListPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getServiceList:getServiceList", TypeShape.of(GetServiceListResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Service Now connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceNowConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceNowConnector(GetServiceNowConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceNowConnectorResult> getServiceNowConnector(GetServiceNowConnectorArgs args) {
        return getServiceNowConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Service Now connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceNowConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceNowConnector(GetServiceNowConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServiceNowConnectorResult> getServiceNowConnectorPlain(GetServiceNowConnectorPlainArgs args) {
        return getServiceNowConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Service Now connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceNowConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceNowConnector(GetServiceNowConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceNowConnectorResult> getServiceNowConnector(GetServiceNowConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getServiceNowConnector:getServiceNowConnector", TypeShape.of(GetServiceNowConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Service Now connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceNowConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceNowConnector(GetServiceNowConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceNowConnectorResult> getServiceNowConnector(GetServiceNowConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getServiceNowConnector:getServiceNowConnector", TypeShape.of(GetServiceNowConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Service Now connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceNowConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getServiceNowConnector(GetServiceNowConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServiceNowConnectorResult> getServiceNowConnectorPlain(GetServiceNowConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getServiceNowConnector:getServiceNowConnector", TypeShape.of(GetServiceNowConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for Harness service overrides V2.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceOverridesV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getServiceOverridesV2(GetServiceOverridesV2Args.builder()
     *             .identifier("identifier")
     *             .orgId("orgIdentifier")
     *             .projectId("projectIdentifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceOverridesV2Result> getServiceOverridesV2(GetServiceOverridesV2Args args) {
        return getServiceOverridesV2(args, InvokeOptions.Empty);
    }
    /**
     * Data source for Harness service overrides V2.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceOverridesV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getServiceOverridesV2(GetServiceOverridesV2Args.builder()
     *             .identifier("identifier")
     *             .orgId("orgIdentifier")
     *             .projectId("projectIdentifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServiceOverridesV2Result> getServiceOverridesV2Plain(GetServiceOverridesV2PlainArgs args) {
        return getServiceOverridesV2Plain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for Harness service overrides V2.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceOverridesV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getServiceOverridesV2(GetServiceOverridesV2Args.builder()
     *             .identifier("identifier")
     *             .orgId("orgIdentifier")
     *             .projectId("projectIdentifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceOverridesV2Result> getServiceOverridesV2(GetServiceOverridesV2Args args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getServiceOverridesV2:getServiceOverridesV2", TypeShape.of(GetServiceOverridesV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for Harness service overrides V2.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceOverridesV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getServiceOverridesV2(GetServiceOverridesV2Args.builder()
     *             .identifier("identifier")
     *             .orgId("orgIdentifier")
     *             .projectId("projectIdentifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceOverridesV2Result> getServiceOverridesV2(GetServiceOverridesV2Args args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getServiceOverridesV2:getServiceOverridesV2", TypeShape.of(GetServiceOverridesV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for Harness service overrides V2.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetServiceOverridesV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getServiceOverridesV2(GetServiceOverridesV2Args.builder()
     *             .identifier("identifier")
     *             .orgId("orgIdentifier")
     *             .projectId("projectIdentifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServiceOverridesV2Result> getServiceOverridesV2Plain(GetServiceOverridesV2PlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getServiceOverridesV2:getServiceOverridesV2", TypeShape.of(GetServiceOverridesV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving an SLO.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSloResult> getSlo(GetSloArgs args) {
        return getSlo(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving an SLO.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSloResult> getSloPlain(GetSloPlainArgs args) {
        return getSloPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving an SLO.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSloResult> getSlo(GetSloArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getSlo:getSlo", TypeShape.of(GetSloResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving an SLO.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSloResult> getSlo(GetSloArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getSlo:getSlo", TypeShape.of(GetSloResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving an SLO.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSloResult> getSloPlain(GetSloPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getSlo:getSlo", TypeShape.of(GetSloResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Splunk connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSplunkConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSplunkConnector(GetSplunkConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSplunkConnectorResult> getSplunkConnector(GetSplunkConnectorArgs args) {
        return getSplunkConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Splunk connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSplunkConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSplunkConnector(GetSplunkConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSplunkConnectorResult> getSplunkConnectorPlain(GetSplunkConnectorPlainArgs args) {
        return getSplunkConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Splunk connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSplunkConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSplunkConnector(GetSplunkConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSplunkConnectorResult> getSplunkConnector(GetSplunkConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getSplunkConnector:getSplunkConnector", TypeShape.of(GetSplunkConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Splunk connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSplunkConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSplunkConnector(GetSplunkConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSplunkConnectorResult> getSplunkConnector(GetSplunkConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getSplunkConnector:getSplunkConnector", TypeShape.of(GetSplunkConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Splunk connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSplunkConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSplunkConnector(GetSplunkConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSplunkConnectorResult> getSplunkConnectorPlain(GetSplunkConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getSplunkConnector:getSplunkConnector", TypeShape.of(GetSplunkConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an Spot connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSpotConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSpotConnector(GetSpotConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSpotConnectorResult> getSpotConnector(GetSpotConnectorArgs args) {
        return getSpotConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up an Spot connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSpotConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSpotConnector(GetSpotConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSpotConnectorResult> getSpotConnectorPlain(GetSpotConnectorPlainArgs args) {
        return getSpotConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up an Spot connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSpotConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSpotConnector(GetSpotConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSpotConnectorResult> getSpotConnector(GetSpotConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getSpotConnector:getSpotConnector", TypeShape.of(GetSpotConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an Spot connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSpotConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSpotConnector(GetSpotConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSpotConnectorResult> getSpotConnector(GetSpotConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getSpotConnector:getSpotConnector", TypeShape.of(GetSpotConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an Spot connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSpotConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSpotConnector(GetSpotConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSpotConnectorResult> getSpotConnectorPlain(GetSpotConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getSpotConnector:getSpotConnector", TypeShape.of(GetSpotConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Sumologic connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSumologicConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSumologicConnector(GetSumologicConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSumologicConnectorResult> getSumologicConnector(GetSumologicConnectorArgs args) {
        return getSumologicConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Sumologic connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSumologicConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSumologicConnector(GetSumologicConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSumologicConnectorResult> getSumologicConnectorPlain(GetSumologicConnectorPlainArgs args) {
        return getSumologicConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up a Sumologic connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSumologicConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSumologicConnector(GetSumologicConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSumologicConnectorResult> getSumologicConnector(GetSumologicConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getSumologicConnector:getSumologicConnector", TypeShape.of(GetSumologicConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Sumologic connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSumologicConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSumologicConnector(GetSumologicConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSumologicConnectorResult> getSumologicConnector(GetSumologicConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getSumologicConnector:getSumologicConnector", TypeShape.of(GetSumologicConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up a Sumologic connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetSumologicConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getSumologicConnector(GetSumologicConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSumologicConnectorResult> getSumologicConnectorPlain(GetSumologicConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getSumologicConnector:getSumologicConnector", TypeShape.of(GetSumologicConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an Tas Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTasConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getTasConnector(GetTasConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTasConnectorResult> getTasConnector(GetTasConnectorArgs args) {
        return getTasConnector(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up an Tas Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTasConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getTasConnector(GetTasConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetTasConnectorResult> getTasConnectorPlain(GetTasConnectorPlainArgs args) {
        return getTasConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for looking up an Tas Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTasConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getTasConnector(GetTasConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTasConnectorResult> getTasConnector(GetTasConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getTasConnector:getTasConnector", TypeShape.of(GetTasConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an Tas Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTasConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getTasConnector(GetTasConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTasConnectorResult> getTasConnector(GetTasConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getTasConnector:getTasConnector", TypeShape.of(GetTasConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for looking up an Tas Connector.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTasConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getTasConnector(GetTasConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetTasConnectorResult> getTasConnectorPlain(GetTasConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getTasConnector:getTasConnector", TypeShape.of(GetTasConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness pipeline.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         //For account level template
     *         final var example = PlatformFunctions.getTemplate(GetTemplateArgs.builder()
     *             .identifier("identifier")
     *             .version("version")
     *             .build());
     * 
     *         //For org level template
     *         final var example1 = PlatformFunctions.getTemplate(GetTemplateArgs.builder()
     *             .identifier("identifier")
     *             .version("version")
     *             .orgId("org_id")
     *             .build());
     * 
     *         //For project level template
     *         final var example2 = PlatformFunctions.getTemplate(GetTemplateArgs.builder()
     *             .identifier("identifier")
     *             .version("version")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTemplateResult> getTemplate() {
        return getTemplate(GetTemplateArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness pipeline.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         //For account level template
     *         final var example = PlatformFunctions.getTemplate(GetTemplateArgs.builder()
     *             .identifier("identifier")
     *             .version("version")
     *             .build());
     * 
     *         //For org level template
     *         final var example1 = PlatformFunctions.getTemplate(GetTemplateArgs.builder()
     *             .identifier("identifier")
     *             .version("version")
     *             .orgId("org_id")
     *             .build());
     * 
     *         //For project level template
     *         final var example2 = PlatformFunctions.getTemplate(GetTemplateArgs.builder()
     *             .identifier("identifier")
     *             .version("version")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetTemplateResult> getTemplatePlain() {
        return getTemplatePlain(GetTemplatePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness pipeline.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         //For account level template
     *         final var example = PlatformFunctions.getTemplate(GetTemplateArgs.builder()
     *             .identifier("identifier")
     *             .version("version")
     *             .build());
     * 
     *         //For org level template
     *         final var example1 = PlatformFunctions.getTemplate(GetTemplateArgs.builder()
     *             .identifier("identifier")
     *             .version("version")
     *             .orgId("org_id")
     *             .build());
     * 
     *         //For project level template
     *         final var example2 = PlatformFunctions.getTemplate(GetTemplateArgs.builder()
     *             .identifier("identifier")
     *             .version("version")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTemplateResult> getTemplate(GetTemplateArgs args) {
        return getTemplate(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness pipeline.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         //For account level template
     *         final var example = PlatformFunctions.getTemplate(GetTemplateArgs.builder()
     *             .identifier("identifier")
     *             .version("version")
     *             .build());
     * 
     *         //For org level template
     *         final var example1 = PlatformFunctions.getTemplate(GetTemplateArgs.builder()
     *             .identifier("identifier")
     *             .version("version")
     *             .orgId("org_id")
     *             .build());
     * 
     *         //For project level template
     *         final var example2 = PlatformFunctions.getTemplate(GetTemplateArgs.builder()
     *             .identifier("identifier")
     *             .version("version")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetTemplateResult> getTemplatePlain(GetTemplatePlainArgs args) {
        return getTemplatePlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness pipeline.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         //For account level template
     *         final var example = PlatformFunctions.getTemplate(GetTemplateArgs.builder()
     *             .identifier("identifier")
     *             .version("version")
     *             .build());
     * 
     *         //For org level template
     *         final var example1 = PlatformFunctions.getTemplate(GetTemplateArgs.builder()
     *             .identifier("identifier")
     *             .version("version")
     *             .orgId("org_id")
     *             .build());
     * 
     *         //For project level template
     *         final var example2 = PlatformFunctions.getTemplate(GetTemplateArgs.builder()
     *             .identifier("identifier")
     *             .version("version")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTemplateResult> getTemplate(GetTemplateArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getTemplate:getTemplate", TypeShape.of(GetTemplateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness pipeline.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         //For account level template
     *         final var example = PlatformFunctions.getTemplate(GetTemplateArgs.builder()
     *             .identifier("identifier")
     *             .version("version")
     *             .build());
     * 
     *         //For org level template
     *         final var example1 = PlatformFunctions.getTemplate(GetTemplateArgs.builder()
     *             .identifier("identifier")
     *             .version("version")
     *             .orgId("org_id")
     *             .build());
     * 
     *         //For project level template
     *         final var example2 = PlatformFunctions.getTemplate(GetTemplateArgs.builder()
     *             .identifier("identifier")
     *             .version("version")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTemplateResult> getTemplate(GetTemplateArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getTemplate:getTemplate", TypeShape.of(GetTemplateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness pipeline.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         //For account level template
     *         final var example = PlatformFunctions.getTemplate(GetTemplateArgs.builder()
     *             .identifier("identifier")
     *             .version("version")
     *             .build());
     * 
     *         //For org level template
     *         final var example1 = PlatformFunctions.getTemplate(GetTemplateArgs.builder()
     *             .identifier("identifier")
     *             .version("version")
     *             .orgId("org_id")
     *             .build());
     * 
     *         //For project level template
     *         final var example2 = PlatformFunctions.getTemplate(GetTemplateArgs.builder()
     *             .identifier("identifier")
     *             .version("version")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetTemplateResult> getTemplatePlain(GetTemplatePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getTemplate:getTemplate", TypeShape.of(GetTemplateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Template Filter.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTemplateFiltersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getTemplateFilters(GetTemplateFiltersArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .type("Template")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTemplateFiltersResult> getTemplateFilters(GetTemplateFiltersArgs args) {
        return getTemplateFilters(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Template Filter.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTemplateFiltersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getTemplateFilters(GetTemplateFiltersArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .type("Template")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetTemplateFiltersResult> getTemplateFiltersPlain(GetTemplateFiltersPlainArgs args) {
        return getTemplateFiltersPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness Template Filter.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTemplateFiltersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getTemplateFilters(GetTemplateFiltersArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .type("Template")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTemplateFiltersResult> getTemplateFilters(GetTemplateFiltersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getTemplateFilters:getTemplateFilters", TypeShape.of(GetTemplateFiltersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Template Filter.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTemplateFiltersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getTemplateFilters(GetTemplateFiltersArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .type("Template")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTemplateFiltersResult> getTemplateFilters(GetTemplateFiltersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getTemplateFilters:getTemplateFilters", TypeShape.of(GetTemplateFiltersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness Template Filter.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTemplateFiltersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getTemplateFilters(GetTemplateFiltersArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .type("Template")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetTemplateFiltersResult> getTemplateFiltersPlain(GetTemplateFiltersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getTemplateFilters:getTemplateFilters", TypeShape.of(GetTemplateFiltersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTerraformCloudConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getTerraformCloudConnector(GetTerraformCloudConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTerraformCloudConnectorResult> getTerraformCloudConnector(GetTerraformCloudConnectorArgs args) {
        return getTerraformCloudConnector(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTerraformCloudConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getTerraformCloudConnector(GetTerraformCloudConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetTerraformCloudConnectorResult> getTerraformCloudConnectorPlain(GetTerraformCloudConnectorPlainArgs args) {
        return getTerraformCloudConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTerraformCloudConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getTerraformCloudConnector(GetTerraformCloudConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTerraformCloudConnectorResult> getTerraformCloudConnector(GetTerraformCloudConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getTerraformCloudConnector:getTerraformCloudConnector", TypeShape.of(GetTerraformCloudConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTerraformCloudConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getTerraformCloudConnector(GetTerraformCloudConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTerraformCloudConnectorResult> getTerraformCloudConnector(GetTerraformCloudConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getTerraformCloudConnector:getTerraformCloudConnector", TypeShape.of(GetTerraformCloudConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTerraformCloudConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getTerraformCloudConnector(GetTerraformCloudConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetTerraformCloudConnectorResult> getTerraformCloudConnectorPlain(GetTerraformCloudConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getTerraformCloudConnector:getTerraformCloudConnector", TypeShape.of(GetTerraformCloudConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness ApiKey Token.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getToken(GetTokenArgs.builder()
     *             .identifier("test_token")
     *             .parentId("apikey_parent_id")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .apikeyId("apikey_id")
     *             .apikeyType("USER")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTokenResult> getToken(GetTokenArgs args) {
        return getToken(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness ApiKey Token.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getToken(GetTokenArgs.builder()
     *             .identifier("test_token")
     *             .parentId("apikey_parent_id")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .apikeyId("apikey_id")
     *             .apikeyType("USER")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetTokenResult> getTokenPlain(GetTokenPlainArgs args) {
        return getTokenPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness ApiKey Token.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getToken(GetTokenArgs.builder()
     *             .identifier("test_token")
     *             .parentId("apikey_parent_id")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .apikeyId("apikey_id")
     *             .apikeyType("USER")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTokenResult> getToken(GetTokenArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getToken:getToken", TypeShape.of(GetTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness ApiKey Token.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getToken(GetTokenArgs.builder()
     *             .identifier("test_token")
     *             .parentId("apikey_parent_id")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .apikeyId("apikey_id")
     *             .apikeyType("USER")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTokenResult> getToken(GetTokenArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getToken:getToken", TypeShape.of(GetTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness ApiKey Token.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getToken(GetTokenArgs.builder()
     *             .identifier("test_token")
     *             .parentId("apikey_parent_id")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .apikeyId("apikey_id")
     *             .apikeyType("USER")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetTokenResult> getTokenPlain(GetTokenPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getToken:getToken", TypeShape.of(GetTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness trigger.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTriggersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getTriggers(GetTriggersArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .targetId("pipeline_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTriggersResult> getTriggers(GetTriggersArgs args) {
        return getTriggers(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness trigger.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTriggersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getTriggers(GetTriggersArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .targetId("pipeline_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetTriggersResult> getTriggersPlain(GetTriggersPlainArgs args) {
        return getTriggersPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a Harness trigger.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTriggersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getTriggers(GetTriggersArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .targetId("pipeline_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTriggersResult> getTriggers(GetTriggersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getTriggers:getTriggers", TypeShape.of(GetTriggersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness trigger.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTriggersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getTriggers(GetTriggersArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .targetId("pipeline_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTriggersResult> getTriggers(GetTriggersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getTriggers:getTriggers", TypeShape.of(GetTriggersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a Harness trigger.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetTriggersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getTriggers(GetTriggersArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .targetId("pipeline_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetTriggersResult> getTriggersPlain(GetTriggersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getTriggers:getTriggers", TypeShape.of(GetTriggersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var example = PlatformFunctions.getUser(GetUserArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .email("john.doe}{@literal @}{@code harness.io")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args) {
        return getUser(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var example = PlatformFunctions.getUser(GetUserArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .email("john.doe}{@literal @}{@code harness.io")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args) {
        return getUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var example = PlatformFunctions.getUser(GetUserArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .email("john.doe}{@literal @}{@code harness.io")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var example = PlatformFunctions.getUser(GetUserArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .email("john.doe}{@literal @}{@code harness.io")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var example = PlatformFunctions.getUser(GetUserArgs.builder()
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .email("john.doe}{@literal @}{@code harness.io")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetUsergroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleById = PlatformFunctions.getUsergroup(GetUsergroupArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *         final var exampleByName = PlatformFunctions.getUsergroup(GetUsergroupArgs.builder()
     *             .name("name")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUsergroupResult> getUsergroup() {
        return getUsergroup(GetUsergroupArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetUsergroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleById = PlatformFunctions.getUsergroup(GetUsergroupArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *         final var exampleByName = PlatformFunctions.getUsergroup(GetUsergroupArgs.builder()
     *             .name("name")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUsergroupResult> getUsergroupPlain() {
        return getUsergroupPlain(GetUsergroupPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetUsergroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleById = PlatformFunctions.getUsergroup(GetUsergroupArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *         final var exampleByName = PlatformFunctions.getUsergroup(GetUsergroupArgs.builder()
     *             .name("name")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUsergroupResult> getUsergroup(GetUsergroupArgs args) {
        return getUsergroup(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetUsergroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleById = PlatformFunctions.getUsergroup(GetUsergroupArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *         final var exampleByName = PlatformFunctions.getUsergroup(GetUsergroupArgs.builder()
     *             .name("name")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUsergroupResult> getUsergroupPlain(GetUsergroupPlainArgs args) {
        return getUsergroupPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetUsergroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleById = PlatformFunctions.getUsergroup(GetUsergroupArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *         final var exampleByName = PlatformFunctions.getUsergroup(GetUsergroupArgs.builder()
     *             .name("name")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUsergroupResult> getUsergroup(GetUsergroupArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getUsergroup:getUsergroup", TypeShape.of(GetUsergroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetUsergroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleById = PlatformFunctions.getUsergroup(GetUsergroupArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *         final var exampleByName = PlatformFunctions.getUsergroup(GetUsergroupArgs.builder()
     *             .name("name")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUsergroupResult> getUsergroup(GetUsergroupArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getUsergroup:getUsergroup", TypeShape.of(GetUsergroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetUsergroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleById = PlatformFunctions.getUsergroup(GetUsergroupArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *         final var exampleByName = PlatformFunctions.getUsergroup(GetUsergroupArgs.builder()
     *             .name("name")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUsergroupResult> getUsergroupPlain(GetUsergroupPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getUsergroup:getUsergroup", TypeShape.of(GetUsergroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getVariables(GetVariablesArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVariablesResult> getVariables(GetVariablesArgs args) {
        return getVariables(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getVariables(GetVariablesArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVariablesResult> getVariablesPlain(GetVariablesPlainArgs args) {
        return getVariablesPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getVariables(GetVariablesArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVariablesResult> getVariables(GetVariablesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getVariables:getVariables", TypeShape.of(GetVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getVariables(GetVariablesArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVariablesResult> getVariables(GetVariablesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getVariables:getVariables", TypeShape.of(GetVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getVariables(GetVariablesArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVariablesResult> getVariablesPlain(GetVariablesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getVariables:getVariables", TypeShape.of(GetVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetVaultConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getVaultConnector(GetVaultConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVaultConnectorResult> getVaultConnector(GetVaultConnectorArgs args) {
        return getVaultConnector(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetVaultConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getVaultConnector(GetVaultConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVaultConnectorResult> getVaultConnectorPlain(GetVaultConnectorPlainArgs args) {
        return getVaultConnectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetVaultConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getVaultConnector(GetVaultConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVaultConnectorResult> getVaultConnector(GetVaultConnectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getVaultConnector:getVaultConnector", TypeShape.of(GetVaultConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetVaultConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getVaultConnector(GetVaultConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVaultConnectorResult> getVaultConnector(GetVaultConnectorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getVaultConnector:getVaultConnector", TypeShape.of(GetVaultConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetVaultConnectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PlatformFunctions.getVaultConnector(GetVaultConnectorArgs.builder()
     *             .identifier("identifier")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVaultConnectorResult> getVaultConnectorPlain(GetVaultConnectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getVaultConnector:getVaultConnector", TypeShape.of(GetVaultConnectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving workspaces.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetWorkspaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getWorkspace(GetWorkspaceArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWorkspaceResult> getWorkspace(GetWorkspaceArgs args) {
        return getWorkspace(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving workspaces.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetWorkspaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getWorkspace(GetWorkspaceArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWorkspaceResult> getWorkspacePlain(GetWorkspacePlainArgs args) {
        return getWorkspacePlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving workspaces.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetWorkspaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getWorkspace(GetWorkspaceArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWorkspaceResult> getWorkspace(GetWorkspaceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getWorkspace:getWorkspace", TypeShape.of(GetWorkspaceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving workspaces.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetWorkspaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getWorkspace(GetWorkspaceArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWorkspaceResult> getWorkspace(GetWorkspaceArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getWorkspace:getWorkspace", TypeShape.of(GetWorkspaceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving workspaces.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetWorkspaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getWorkspace(GetWorkspaceArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWorkspaceResult> getWorkspacePlain(GetWorkspacePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getWorkspace:getWorkspace", TypeShape.of(GetWorkspaceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving workspace outputs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetWorkspaceOutputValueArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getWorkspaceOutputValue(GetWorkspaceOutputValueArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWorkspaceOutputValueResult> getWorkspaceOutputValue(GetWorkspaceOutputValueArgs args) {
        return getWorkspaceOutputValue(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving workspace outputs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetWorkspaceOutputValueArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getWorkspaceOutputValue(GetWorkspaceOutputValueArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWorkspaceOutputValueResult> getWorkspaceOutputValuePlain(GetWorkspaceOutputValuePlainArgs args) {
        return getWorkspaceOutputValuePlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving workspace outputs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetWorkspaceOutputValueArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getWorkspaceOutputValue(GetWorkspaceOutputValueArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWorkspaceOutputValueResult> getWorkspaceOutputValue(GetWorkspaceOutputValueArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getWorkspaceOutputValue:getWorkspaceOutputValue", TypeShape.of(GetWorkspaceOutputValueResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving workspace outputs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetWorkspaceOutputValueArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getWorkspaceOutputValue(GetWorkspaceOutputValueArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWorkspaceOutputValueResult> getWorkspaceOutputValue(GetWorkspaceOutputValueArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("harness:platform/getWorkspaceOutputValue:getWorkspaceOutputValue", TypeShape.of(GetWorkspaceOutputValueResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving workspace outputs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.harness.platform.PlatformFunctions;
     * import com.pulumi.harness.platform.inputs.GetWorkspaceOutputValueArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PlatformFunctions.getWorkspaceOutputValue(GetWorkspaceOutputValueArgs.builder()
     *             .identifier("identifier")
     *             .orgId("org_id")
     *             .projectId("project_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWorkspaceOutputValueResult> getWorkspaceOutputValuePlain(GetWorkspaceOutputValuePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("harness:platform/getWorkspaceOutputValue:getWorkspaceOutputValue", TypeShape.of(GetWorkspaceOutputValueResult.class), args, Utilities.withVersion(options));
    }
}
