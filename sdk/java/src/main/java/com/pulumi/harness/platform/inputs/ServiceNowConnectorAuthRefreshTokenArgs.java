// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceNowConnectorAuthRefreshTokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceNowConnectorAuthRefreshTokenArgs Empty = new ServiceNowConnectorAuthRefreshTokenArgs();

    /**
     * Reference to a secret containing the client id to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    @Import(name="clientIdRef", required=true)
    private Output<String> clientIdRef;

    /**
     * @return Reference to a secret containing the client id to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public Output<String> clientIdRef() {
        return this.clientIdRef;
    }

    /**
     * Reference to a secret containing the client secret to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    @Import(name="clientSecretRef")
    private @Nullable Output<String> clientSecretRef;

    /**
     * @return Reference to a secret containing the client secret to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public Optional<Output<String>> clientSecretRef() {
        return Optional.ofNullable(this.clientSecretRef);
    }

    /**
     * Reference to a secret containing the refresh token to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    @Import(name="refreshTokenRef", required=true)
    private Output<String> refreshTokenRef;

    /**
     * @return Reference to a secret containing the refresh token to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public Output<String> refreshTokenRef() {
        return this.refreshTokenRef;
    }

    /**
     * Scope string to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return Scope string to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Token url to use for authentication.
     * 
     */
    @Import(name="tokenUrl", required=true)
    private Output<String> tokenUrl;

    /**
     * @return Token url to use for authentication.
     * 
     */
    public Output<String> tokenUrl() {
        return this.tokenUrl;
    }

    private ServiceNowConnectorAuthRefreshTokenArgs() {}

    private ServiceNowConnectorAuthRefreshTokenArgs(ServiceNowConnectorAuthRefreshTokenArgs $) {
        this.clientIdRef = $.clientIdRef;
        this.clientSecretRef = $.clientSecretRef;
        this.refreshTokenRef = $.refreshTokenRef;
        this.scope = $.scope;
        this.tokenUrl = $.tokenUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceNowConnectorAuthRefreshTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceNowConnectorAuthRefreshTokenArgs $;

        public Builder() {
            $ = new ServiceNowConnectorAuthRefreshTokenArgs();
        }

        public Builder(ServiceNowConnectorAuthRefreshTokenArgs defaults) {
            $ = new ServiceNowConnectorAuthRefreshTokenArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientIdRef Reference to a secret containing the client id to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder clientIdRef(Output<String> clientIdRef) {
            $.clientIdRef = clientIdRef;
            return this;
        }

        /**
         * @param clientIdRef Reference to a secret containing the client id to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder clientIdRef(String clientIdRef) {
            return clientIdRef(Output.of(clientIdRef));
        }

        /**
         * @param clientSecretRef Reference to a secret containing the client secret to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder clientSecretRef(@Nullable Output<String> clientSecretRef) {
            $.clientSecretRef = clientSecretRef;
            return this;
        }

        /**
         * @param clientSecretRef Reference to a secret containing the client secret to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder clientSecretRef(String clientSecretRef) {
            return clientSecretRef(Output.of(clientSecretRef));
        }

        /**
         * @param refreshTokenRef Reference to a secret containing the refresh token to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder refreshTokenRef(Output<String> refreshTokenRef) {
            $.refreshTokenRef = refreshTokenRef;
            return this;
        }

        /**
         * @param refreshTokenRef Reference to a secret containing the refresh token to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder refreshTokenRef(String refreshTokenRef) {
            return refreshTokenRef(Output.of(refreshTokenRef));
        }

        /**
         * @param scope Scope string to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Scope string to use for authentication. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param tokenUrl Token url to use for authentication.
         * 
         * @return builder
         * 
         */
        public Builder tokenUrl(Output<String> tokenUrl) {
            $.tokenUrl = tokenUrl;
            return this;
        }

        /**
         * @param tokenUrl Token url to use for authentication.
         * 
         * @return builder
         * 
         */
        public Builder tokenUrl(String tokenUrl) {
            return tokenUrl(Output.of(tokenUrl));
        }

        public ServiceNowConnectorAuthRefreshTokenArgs build() {
            if ($.clientIdRef == null) {
                throw new MissingRequiredPropertyException("ServiceNowConnectorAuthRefreshTokenArgs", "clientIdRef");
            }
            if ($.refreshTokenRef == null) {
                throw new MissingRequiredPropertyException("ServiceNowConnectorAuthRefreshTokenArgs", "refreshTokenRef");
            }
            if ($.tokenUrl == null) {
                throw new MissingRequiredPropertyException("ServiceNowConnectorAuthRefreshTokenArgs", "tokenUrl");
            }
            return $;
        }
    }

}
