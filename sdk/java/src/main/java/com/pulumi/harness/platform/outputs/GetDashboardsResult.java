// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDashboardsResult {
    /**
     * @return Created at timestamp of the Dashboard.
     * 
     */
    private String createdAt;
    /**
     * @return Unique identifier of the Dashboard.
     * 
     */
    private String dashboardId;
    /**
     * @return Data Sources within the Dashboard.
     * 
     */
    private List<String> dataSources;
    /**
     * @return Description of the resource.
     * 
     */
    private String description;
    /**
     * @return Unique identifier of the Folder.
     * 
     */
    private String folderId;
    /**
     * @return Identifier of the dashboard.
     * 
     */
    private String id;
    /**
     * @return Unique identifier of the resource.
     * 
     */
    private @Nullable String identifier;
    /**
     * @return Data Models within the Dashboard.
     * 
     */
    private List<String> models;
    /**
     * @return Name of the resource.
     * 
     */
    private @Nullable String name;
    /**
     * @return Resource identifier of the dashboard.
     * 
     */
    private String resourceIdentifier;
    /**
     * @return Tags to associate with the resource.
     * 
     */
    private List<String> tags;
    /**
     * @return Title of the Dashboard.
     * 
     */
    private String title;
    /**
     * @return Resource identifier of the dashboard.
     * 
     */
    private String type;
    /**
     * @return View count of the dashboard.
     * 
     */
    private Integer viewCount;

    private GetDashboardsResult() {}
    /**
     * @return Created at timestamp of the Dashboard.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Unique identifier of the Dashboard.
     * 
     */
    public String dashboardId() {
        return this.dashboardId;
    }
    /**
     * @return Data Sources within the Dashboard.
     * 
     */
    public List<String> dataSources() {
        return this.dataSources;
    }
    /**
     * @return Description of the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Unique identifier of the Folder.
     * 
     */
    public String folderId() {
        return this.folderId;
    }
    /**
     * @return Identifier of the dashboard.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Optional<String> identifier() {
        return Optional.ofNullable(this.identifier);
    }
    /**
     * @return Data Models within the Dashboard.
     * 
     */
    public List<String> models() {
        return this.models;
    }
    /**
     * @return Name of the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Resource identifier of the dashboard.
     * 
     */
    public String resourceIdentifier() {
        return this.resourceIdentifier;
    }
    /**
     * @return Tags to associate with the resource.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return Title of the Dashboard.
     * 
     */
    public String title() {
        return this.title;
    }
    /**
     * @return Resource identifier of the dashboard.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return View count of the dashboard.
     * 
     */
    public Integer viewCount() {
        return this.viewCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDashboardsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdAt;
        private String dashboardId;
        private List<String> dataSources;
        private String description;
        private String folderId;
        private String id;
        private @Nullable String identifier;
        private List<String> models;
        private @Nullable String name;
        private String resourceIdentifier;
        private List<String> tags;
        private String title;
        private String type;
        private Integer viewCount;
        public Builder() {}
        public Builder(GetDashboardsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdAt = defaults.createdAt;
    	      this.dashboardId = defaults.dashboardId;
    	      this.dataSources = defaults.dataSources;
    	      this.description = defaults.description;
    	      this.folderId = defaults.folderId;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.models = defaults.models;
    	      this.name = defaults.name;
    	      this.resourceIdentifier = defaults.resourceIdentifier;
    	      this.tags = defaults.tags;
    	      this.title = defaults.title;
    	      this.type = defaults.type;
    	      this.viewCount = defaults.viewCount;
        }

        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetDashboardsResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder dashboardId(String dashboardId) {
            if (dashboardId == null) {
              throw new MissingRequiredPropertyException("GetDashboardsResult", "dashboardId");
            }
            this.dashboardId = dashboardId;
            return this;
        }
        @CustomType.Setter
        public Builder dataSources(List<String> dataSources) {
            if (dataSources == null) {
              throw new MissingRequiredPropertyException("GetDashboardsResult", "dataSources");
            }
            this.dataSources = dataSources;
            return this;
        }
        public Builder dataSources(String... dataSources) {
            return dataSources(List.of(dataSources));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDashboardsResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder folderId(String folderId) {
            if (folderId == null) {
              throw new MissingRequiredPropertyException("GetDashboardsResult", "folderId");
            }
            this.folderId = folderId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDashboardsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(@Nullable String identifier) {

            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder models(List<String> models) {
            if (models == null) {
              throw new MissingRequiredPropertyException("GetDashboardsResult", "models");
            }
            this.models = models;
            return this;
        }
        public Builder models(String... models) {
            return models(List.of(models));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder resourceIdentifier(String resourceIdentifier) {
            if (resourceIdentifier == null) {
              throw new MissingRequiredPropertyException("GetDashboardsResult", "resourceIdentifier");
            }
            this.resourceIdentifier = resourceIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetDashboardsResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder title(String title) {
            if (title == null) {
              throw new MissingRequiredPropertyException("GetDashboardsResult", "title");
            }
            this.title = title;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetDashboardsResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder viewCount(Integer viewCount) {
            if (viewCount == null) {
              throw new MissingRequiredPropertyException("GetDashboardsResult", "viewCount");
            }
            this.viewCount = viewCount;
            return this;
        }
        public GetDashboardsResult build() {
            final var _resultValue = new GetDashboardsResult();
            _resultValue.createdAt = createdAt;
            _resultValue.dashboardId = dashboardId;
            _resultValue.dataSources = dataSources;
            _resultValue.description = description;
            _resultValue.folderId = folderId;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.models = models;
            _resultValue.name = name;
            _resultValue.resourceIdentifier = resourceIdentifier;
            _resultValue.tags = tags;
            _resultValue.title = title;
            _resultValue.type = type;
            _resultValue.viewCount = viewCount;
            return _resultValue;
        }
    }
}
