// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GetElasticsearchConnectorApiToken;
import com.pulumi.harness.platform.outputs.GetElasticsearchConnectorUsernamePassword;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetElasticsearchConnectorResult {
    /**
     * @return Authenticate to ElasticSearch using api token.
     * 
     */
    private List<GetElasticsearchConnectorApiToken> apiTokens;
    /**
     * @return Tags to filter delegates for connection.
     * 
     */
    private List<String> delegateSelectors;
    /**
     * @return Description of the resource.
     * 
     */
    private String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Unique identifier of the resource.
     * 
     */
    private String identifier;
    /**
     * @return Name of the resource.
     * 
     */
    private @Nullable String name;
    /**
     * @return Unique identifier of the organization.
     * 
     */
    private @Nullable String orgId;
    /**
     * @return Unique identifier of the project.
     * 
     */
    private @Nullable String projectId;
    /**
     * @return Tags to associate with the resource.
     * 
     */
    private List<String> tags;
    /**
     * @return URL of the ElasticSearch controller.
     * 
     */
    private String url;
    /**
     * @return Authenticate to ElasticSearch using username and password.
     * 
     */
    private List<GetElasticsearchConnectorUsernamePassword> usernamePasswords;

    private GetElasticsearchConnectorResult() {}
    /**
     * @return Authenticate to ElasticSearch using api token.
     * 
     */
    public List<GetElasticsearchConnectorApiToken> apiTokens() {
        return this.apiTokens;
    }
    /**
     * @return Tags to filter delegates for connection.
     * 
     */
    public List<String> delegateSelectors() {
        return this.delegateSelectors;
    }
    /**
     * @return Description of the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Unique identifier of the resource.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return Name of the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }
    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return Tags to associate with the resource.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return URL of the ElasticSearch controller.
     * 
     */
    public String url() {
        return this.url;
    }
    /**
     * @return Authenticate to ElasticSearch using username and password.
     * 
     */
    public List<GetElasticsearchConnectorUsernamePassword> usernamePasswords() {
        return this.usernamePasswords;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetElasticsearchConnectorResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetElasticsearchConnectorApiToken> apiTokens;
        private List<String> delegateSelectors;
        private String description;
        private String id;
        private String identifier;
        private @Nullable String name;
        private @Nullable String orgId;
        private @Nullable String projectId;
        private List<String> tags;
        private String url;
        private List<GetElasticsearchConnectorUsernamePassword> usernamePasswords;
        public Builder() {}
        public Builder(GetElasticsearchConnectorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiTokens = defaults.apiTokens;
    	      this.delegateSelectors = defaults.delegateSelectors;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.projectId = defaults.projectId;
    	      this.tags = defaults.tags;
    	      this.url = defaults.url;
    	      this.usernamePasswords = defaults.usernamePasswords;
        }

        @CustomType.Setter
        public Builder apiTokens(List<GetElasticsearchConnectorApiToken> apiTokens) {
            if (apiTokens == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchConnectorResult", "apiTokens");
            }
            this.apiTokens = apiTokens;
            return this;
        }
        public Builder apiTokens(GetElasticsearchConnectorApiToken... apiTokens) {
            return apiTokens(List.of(apiTokens));
        }
        @CustomType.Setter
        public Builder delegateSelectors(List<String> delegateSelectors) {
            if (delegateSelectors == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchConnectorResult", "delegateSelectors");
            }
            this.delegateSelectors = delegateSelectors;
            return this;
        }
        public Builder delegateSelectors(String... delegateSelectors) {
            return delegateSelectors(List.of(delegateSelectors));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchConnectorResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchConnectorResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            if (identifier == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchConnectorResult", "identifier");
            }
            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(@Nullable String orgId) {

            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchConnectorResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchConnectorResult", "url");
            }
            this.url = url;
            return this;
        }
        @CustomType.Setter
        public Builder usernamePasswords(List<GetElasticsearchConnectorUsernamePassword> usernamePasswords) {
            if (usernamePasswords == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchConnectorResult", "usernamePasswords");
            }
            this.usernamePasswords = usernamePasswords;
            return this;
        }
        public Builder usernamePasswords(GetElasticsearchConnectorUsernamePassword... usernamePasswords) {
            return usernamePasswords(List.of(usernamePasswords));
        }
        public GetElasticsearchConnectorResult build() {
            final var _resultValue = new GetElasticsearchConnectorResult();
            _resultValue.apiTokens = apiTokens;
            _resultValue.delegateSelectors = delegateSelectors;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.name = name;
            _resultValue.orgId = orgId;
            _resultValue.projectId = projectId;
            _resultValue.tags = tags;
            _resultValue.url = url;
            _resultValue.usernamePasswords = usernamePasswords;
            return _resultValue;
        }
    }
}
