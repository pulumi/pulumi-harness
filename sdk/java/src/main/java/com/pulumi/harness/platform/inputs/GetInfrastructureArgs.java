// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GetInfrastructureGitDetailsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetInfrastructureArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetInfrastructureArgs Empty = new GetInfrastructureArgs();

    /**
     * environment identifier.
     * 
     */
    @Import(name="envId", required=true)
    private Output<String> envId;

    /**
     * @return environment identifier.
     * 
     */
    public Output<String> envId() {
        return this.envId;
    }

    /**
     * Contains parameters related to Git Experience for remote entities
     * 
     */
    @Import(name="gitDetails")
    private @Nullable Output<GetInfrastructureGitDetailsArgs> gitDetails;

    /**
     * @return Contains parameters related to Git Experience for remote entities
     * 
     */
    public Optional<Output<GetInfrastructureGitDetailsArgs>> gitDetails() {
        return Optional.ofNullable(this.gitDetails);
    }

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    private GetInfrastructureArgs() {}

    private GetInfrastructureArgs(GetInfrastructureArgs $) {
        this.envId = $.envId;
        this.gitDetails = $.gitDetails;
        this.identifier = $.identifier;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInfrastructureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInfrastructureArgs $;

        public Builder() {
            $ = new GetInfrastructureArgs();
        }

        public Builder(GetInfrastructureArgs defaults) {
            $ = new GetInfrastructureArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param envId environment identifier.
         * 
         * @return builder
         * 
         */
        public Builder envId(Output<String> envId) {
            $.envId = envId;
            return this;
        }

        /**
         * @param envId environment identifier.
         * 
         * @return builder
         * 
         */
        public Builder envId(String envId) {
            return envId(Output.of(envId));
        }

        /**
         * @param gitDetails Contains parameters related to Git Experience for remote entities
         * 
         * @return builder
         * 
         */
        public Builder gitDetails(@Nullable Output<GetInfrastructureGitDetailsArgs> gitDetails) {
            $.gitDetails = gitDetails;
            return this;
        }

        /**
         * @param gitDetails Contains parameters related to Git Experience for remote entities
         * 
         * @return builder
         * 
         */
        public Builder gitDetails(GetInfrastructureGitDetailsArgs gitDetails) {
            return gitDetails(Output.of(gitDetails));
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public GetInfrastructureArgs build() {
            if ($.envId == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureArgs", "envId");
            }
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("GetInfrastructureArgs", "identifier");
            }
            return $;
        }
    }

}
