// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HarRegistryConfigAuthArgs extends com.pulumi.resources.ResourceArgs {

    public static final HarRegistryConfigAuthArgs Empty = new HarRegistryConfigAuthArgs();

    @Import(name="accessKey")
    private @Nullable Output<String> accessKey;

    public Optional<Output<String>> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }

    @Import(name="accessKeyIdentifier")
    private @Nullable Output<String> accessKeyIdentifier;

    public Optional<Output<String>> accessKeyIdentifier() {
        return Optional.ofNullable(this.accessKeyIdentifier);
    }

    @Import(name="accessKeySecretPath")
    private @Nullable Output<String> accessKeySecretPath;

    public Optional<Output<String>> accessKeySecretPath() {
        return Optional.ofNullable(this.accessKeySecretPath);
    }

    /**
     * Type of authentication (UserPassword, Anonymous)
     * 
     */
    @Import(name="authType", required=true)
    private Output<String> authType;

    /**
     * @return Type of authentication (UserPassword, Anonymous)
     * 
     */
    public Output<String> authType() {
        return this.authType;
    }

    /**
     * Secret identifier for UserPassword auth type
     * 
     */
    @Import(name="secretIdentifier")
    private @Nullable Output<String> secretIdentifier;

    /**
     * @return Secret identifier for UserPassword auth type
     * 
     */
    public Optional<Output<String>> secretIdentifier() {
        return Optional.ofNullable(this.secretIdentifier);
    }

    @Import(name="secretKeyIdentifier")
    private @Nullable Output<String> secretKeyIdentifier;

    public Optional<Output<String>> secretKeyIdentifier() {
        return Optional.ofNullable(this.secretKeyIdentifier);
    }

    @Import(name="secretKeySecretPath")
    private @Nullable Output<String> secretKeySecretPath;

    public Optional<Output<String>> secretKeySecretPath() {
        return Optional.ofNullable(this.secretKeySecretPath);
    }

    /**
     * Secret space path for UserPassword auth type
     * 
     */
    @Import(name="secretSpacePath")
    private @Nullable Output<String> secretSpacePath;

    /**
     * @return Secret space path for UserPassword auth type
     * 
     */
    public Optional<Output<String>> secretSpacePath() {
        return Optional.ofNullable(this.secretSpacePath);
    }

    /**
     * User name for UserPassword auth type
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return User name for UserPassword auth type
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private HarRegistryConfigAuthArgs() {}

    private HarRegistryConfigAuthArgs(HarRegistryConfigAuthArgs $) {
        this.accessKey = $.accessKey;
        this.accessKeyIdentifier = $.accessKeyIdentifier;
        this.accessKeySecretPath = $.accessKeySecretPath;
        this.authType = $.authType;
        this.secretIdentifier = $.secretIdentifier;
        this.secretKeyIdentifier = $.secretKeyIdentifier;
        this.secretKeySecretPath = $.secretKeySecretPath;
        this.secretSpacePath = $.secretSpacePath;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HarRegistryConfigAuthArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HarRegistryConfigAuthArgs $;

        public Builder() {
            $ = new HarRegistryConfigAuthArgs();
        }

        public Builder(HarRegistryConfigAuthArgs defaults) {
            $ = new HarRegistryConfigAuthArgs(Objects.requireNonNull(defaults));
        }

        public Builder accessKey(@Nullable Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        public Builder accessKeyIdentifier(@Nullable Output<String> accessKeyIdentifier) {
            $.accessKeyIdentifier = accessKeyIdentifier;
            return this;
        }

        public Builder accessKeyIdentifier(String accessKeyIdentifier) {
            return accessKeyIdentifier(Output.of(accessKeyIdentifier));
        }

        public Builder accessKeySecretPath(@Nullable Output<String> accessKeySecretPath) {
            $.accessKeySecretPath = accessKeySecretPath;
            return this;
        }

        public Builder accessKeySecretPath(String accessKeySecretPath) {
            return accessKeySecretPath(Output.of(accessKeySecretPath));
        }

        /**
         * @param authType Type of authentication (UserPassword, Anonymous)
         * 
         * @return builder
         * 
         */
        public Builder authType(Output<String> authType) {
            $.authType = authType;
            return this;
        }

        /**
         * @param authType Type of authentication (UserPassword, Anonymous)
         * 
         * @return builder
         * 
         */
        public Builder authType(String authType) {
            return authType(Output.of(authType));
        }

        /**
         * @param secretIdentifier Secret identifier for UserPassword auth type
         * 
         * @return builder
         * 
         */
        public Builder secretIdentifier(@Nullable Output<String> secretIdentifier) {
            $.secretIdentifier = secretIdentifier;
            return this;
        }

        /**
         * @param secretIdentifier Secret identifier for UserPassword auth type
         * 
         * @return builder
         * 
         */
        public Builder secretIdentifier(String secretIdentifier) {
            return secretIdentifier(Output.of(secretIdentifier));
        }

        public Builder secretKeyIdentifier(@Nullable Output<String> secretKeyIdentifier) {
            $.secretKeyIdentifier = secretKeyIdentifier;
            return this;
        }

        public Builder secretKeyIdentifier(String secretKeyIdentifier) {
            return secretKeyIdentifier(Output.of(secretKeyIdentifier));
        }

        public Builder secretKeySecretPath(@Nullable Output<String> secretKeySecretPath) {
            $.secretKeySecretPath = secretKeySecretPath;
            return this;
        }

        public Builder secretKeySecretPath(String secretKeySecretPath) {
            return secretKeySecretPath(Output.of(secretKeySecretPath));
        }

        /**
         * @param secretSpacePath Secret space path for UserPassword auth type
         * 
         * @return builder
         * 
         */
        public Builder secretSpacePath(@Nullable Output<String> secretSpacePath) {
            $.secretSpacePath = secretSpacePath;
            return this;
        }

        /**
         * @param secretSpacePath Secret space path for UserPassword auth type
         * 
         * @return builder
         * 
         */
        public Builder secretSpacePath(String secretSpacePath) {
            return secretSpacePath(Output.of(secretSpacePath));
        }

        /**
         * @param userName User name for UserPassword auth type
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName User name for UserPassword auth type
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public HarRegistryConfigAuthArgs build() {
            if ($.authType == null) {
                throw new MissingRequiredPropertyException("HarRegistryConfigAuthArgs", "authType");
            }
            return $;
        }
    }

}
