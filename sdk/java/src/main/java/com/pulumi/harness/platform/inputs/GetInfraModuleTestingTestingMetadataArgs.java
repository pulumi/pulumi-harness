// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetInfraModuleTestingTestingMetadataArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetInfraModuleTestingTestingMetadataArgs Empty = new GetInfraModuleTestingTestingMetadataArgs();

    /**
     * Account is the internal customer account ID
     * 
     */
    @Import(name="account", required=true)
    private Output<String> account;

    /**
     * @return Account is the internal customer account ID
     * 
     */
    public Output<String> account() {
        return this.account;
    }

    /**
     * Organization identifier
     * 
     */
    @Import(name="org", required=true)
    private Output<String> org;

    /**
     * @return Organization identifier
     * 
     */
    public Output<String> org() {
        return this.org;
    }

    /**
     * Pipelines where the testing is enabled
     * 
     */
    @Import(name="pipelines", required=true)
    private Output<List<String>> pipelines;

    /**
     * @return Pipelines where the testing is enabled
     * 
     */
    public Output<List<String>> pipelines() {
        return this.pipelines;
    }

    /**
     * Project identifier
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return Project identifier
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Provider connector for testing purposes
     * 
     */
    @Import(name="providerConnector", required=true)
    private Output<String> providerConnector;

    /**
     * @return Provider connector for testing purposes
     * 
     */
    public Output<String> providerConnector() {
        return this.providerConnector;
    }

    /**
     * Provisioner type for testing purposes
     * 
     */
    @Import(name="provisionerType", required=true)
    private Output<String> provisionerType;

    /**
     * @return Provisioner type for testing purposes
     * 
     */
    public Output<String> provisionerType() {
        return this.provisionerType;
    }

    /**
     * Provisioner version for testing purposes
     * 
     */
    @Import(name="provisionerVersion", required=true)
    private Output<String> provisionerVersion;

    /**
     * @return Provisioner version for testing purposes
     * 
     */
    public Output<String> provisionerVersion() {
        return this.provisionerVersion;
    }

    /**
     * Release pipeline
     * 
     */
    @Import(name="releasePipeline", required=true)
    private Output<String> releasePipeline;

    /**
     * @return Release pipeline
     * 
     */
    public Output<String> releasePipeline() {
        return this.releasePipeline;
    }

    private GetInfraModuleTestingTestingMetadataArgs() {}

    private GetInfraModuleTestingTestingMetadataArgs(GetInfraModuleTestingTestingMetadataArgs $) {
        this.account = $.account;
        this.org = $.org;
        this.pipelines = $.pipelines;
        this.project = $.project;
        this.providerConnector = $.providerConnector;
        this.provisionerType = $.provisionerType;
        this.provisionerVersion = $.provisionerVersion;
        this.releasePipeline = $.releasePipeline;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInfraModuleTestingTestingMetadataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInfraModuleTestingTestingMetadataArgs $;

        public Builder() {
            $ = new GetInfraModuleTestingTestingMetadataArgs();
        }

        public Builder(GetInfraModuleTestingTestingMetadataArgs defaults) {
            $ = new GetInfraModuleTestingTestingMetadataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param account Account is the internal customer account ID
         * 
         * @return builder
         * 
         */
        public Builder account(Output<String> account) {
            $.account = account;
            return this;
        }

        /**
         * @param account Account is the internal customer account ID
         * 
         * @return builder
         * 
         */
        public Builder account(String account) {
            return account(Output.of(account));
        }

        /**
         * @param org Organization identifier
         * 
         * @return builder
         * 
         */
        public Builder org(Output<String> org) {
            $.org = org;
            return this;
        }

        /**
         * @param org Organization identifier
         * 
         * @return builder
         * 
         */
        public Builder org(String org) {
            return org(Output.of(org));
        }

        /**
         * @param pipelines Pipelines where the testing is enabled
         * 
         * @return builder
         * 
         */
        public Builder pipelines(Output<List<String>> pipelines) {
            $.pipelines = pipelines;
            return this;
        }

        /**
         * @param pipelines Pipelines where the testing is enabled
         * 
         * @return builder
         * 
         */
        public Builder pipelines(List<String> pipelines) {
            return pipelines(Output.of(pipelines));
        }

        /**
         * @param pipelines Pipelines where the testing is enabled
         * 
         * @return builder
         * 
         */
        public Builder pipelines(String... pipelines) {
            return pipelines(List.of(pipelines));
        }

        /**
         * @param project Project identifier
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Project identifier
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param providerConnector Provider connector for testing purposes
         * 
         * @return builder
         * 
         */
        public Builder providerConnector(Output<String> providerConnector) {
            $.providerConnector = providerConnector;
            return this;
        }

        /**
         * @param providerConnector Provider connector for testing purposes
         * 
         * @return builder
         * 
         */
        public Builder providerConnector(String providerConnector) {
            return providerConnector(Output.of(providerConnector));
        }

        /**
         * @param provisionerType Provisioner type for testing purposes
         * 
         * @return builder
         * 
         */
        public Builder provisionerType(Output<String> provisionerType) {
            $.provisionerType = provisionerType;
            return this;
        }

        /**
         * @param provisionerType Provisioner type for testing purposes
         * 
         * @return builder
         * 
         */
        public Builder provisionerType(String provisionerType) {
            return provisionerType(Output.of(provisionerType));
        }

        /**
         * @param provisionerVersion Provisioner version for testing purposes
         * 
         * @return builder
         * 
         */
        public Builder provisionerVersion(Output<String> provisionerVersion) {
            $.provisionerVersion = provisionerVersion;
            return this;
        }

        /**
         * @param provisionerVersion Provisioner version for testing purposes
         * 
         * @return builder
         * 
         */
        public Builder provisionerVersion(String provisionerVersion) {
            return provisionerVersion(Output.of(provisionerVersion));
        }

        /**
         * @param releasePipeline Release pipeline
         * 
         * @return builder
         * 
         */
        public Builder releasePipeline(Output<String> releasePipeline) {
            $.releasePipeline = releasePipeline;
            return this;
        }

        /**
         * @param releasePipeline Release pipeline
         * 
         * @return builder
         * 
         */
        public Builder releasePipeline(String releasePipeline) {
            return releasePipeline(Output.of(releasePipeline));
        }

        public GetInfraModuleTestingTestingMetadataArgs build() {
            if ($.account == null) {
                throw new MissingRequiredPropertyException("GetInfraModuleTestingTestingMetadataArgs", "account");
            }
            if ($.org == null) {
                throw new MissingRequiredPropertyException("GetInfraModuleTestingTestingMetadataArgs", "org");
            }
            if ($.pipelines == null) {
                throw new MissingRequiredPropertyException("GetInfraModuleTestingTestingMetadataArgs", "pipelines");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("GetInfraModuleTestingTestingMetadataArgs", "project");
            }
            if ($.providerConnector == null) {
                throw new MissingRequiredPropertyException("GetInfraModuleTestingTestingMetadataArgs", "providerConnector");
            }
            if ($.provisionerType == null) {
                throw new MissingRequiredPropertyException("GetInfraModuleTestingTestingMetadataArgs", "provisionerType");
            }
            if ($.provisionerVersion == null) {
                throw new MissingRequiredPropertyException("GetInfraModuleTestingTestingMetadataArgs", "provisionerVersion");
            }
            if ($.releasePipeline == null) {
                throw new MissingRequiredPropertyException("GetInfraModuleTestingTestingMetadataArgs", "releasePipeline");
            }
            return $;
        }
    }

}
