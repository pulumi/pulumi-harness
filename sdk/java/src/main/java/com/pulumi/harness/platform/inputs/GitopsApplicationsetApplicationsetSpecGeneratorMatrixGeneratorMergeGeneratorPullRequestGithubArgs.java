// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubTokenRefArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubArgs Empty = new GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubArgs();

    /**
     * The GitHub API URL to talk to. Default https://api.github.com/.
     * 
     */
    @Import(name="api")
    private @Nullable Output<String> api;

    /**
     * @return The GitHub API URL to talk to. Default https://api.github.com/.
     * 
     */
    public Optional<Output<String>> api() {
        return Optional.ofNullable(this.api);
    }

    /**
     * Reference to a GitHub App repo-creds secret with permission to access pull requests.
     * 
     */
    @Import(name="appSecretName")
    private @Nullable Output<String> appSecretName;

    /**
     * @return Reference to a GitHub App repo-creds secret with permission to access pull requests.
     * 
     */
    public Optional<Output<String>> appSecretName() {
        return Optional.ofNullable(this.appSecretName);
    }

    /**
     * Labels is used to filter the PRs that you want to target.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<String>> labels;

    /**
     * @return Labels is used to filter the PRs that you want to target.
     * 
     */
    public Optional<Output<List<String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * GitHub org or user to scan.
     * 
     */
    @Import(name="owner", required=true)
    private Output<String> owner;

    /**
     * @return GitHub org or user to scan.
     * 
     */
    public Output<String> owner() {
        return this.owner;
    }

    /**
     * GitHub repo name to scan.
     * 
     */
    @Import(name="repo", required=true)
    private Output<String> repo;

    /**
     * @return GitHub repo name to scan.
     * 
     */
    public Output<String> repo() {
        return this.repo;
    }

    /**
     * Authentication token reference.
     * 
     */
    @Import(name="tokenRef")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubTokenRefArgs> tokenRef;

    /**
     * @return Authentication token reference.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubTokenRefArgs>> tokenRef() {
        return Optional.ofNullable(this.tokenRef);
    }

    private GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubArgs() {}

    private GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubArgs(GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubArgs $) {
        this.api = $.api;
        this.appSecretName = $.appSecretName;
        this.labels = $.labels;
        this.owner = $.owner;
        this.repo = $.repo;
        this.tokenRef = $.tokenRef;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubArgs $;

        public Builder() {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubArgs();
        }

        public Builder(GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubArgs defaults) {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param api The GitHub API URL to talk to. Default https://api.github.com/.
         * 
         * @return builder
         * 
         */
        public Builder api(@Nullable Output<String> api) {
            $.api = api;
            return this;
        }

        /**
         * @param api The GitHub API URL to talk to. Default https://api.github.com/.
         * 
         * @return builder
         * 
         */
        public Builder api(String api) {
            return api(Output.of(api));
        }

        /**
         * @param appSecretName Reference to a GitHub App repo-creds secret with permission to access pull requests.
         * 
         * @return builder
         * 
         */
        public Builder appSecretName(@Nullable Output<String> appSecretName) {
            $.appSecretName = appSecretName;
            return this;
        }

        /**
         * @param appSecretName Reference to a GitHub App repo-creds secret with permission to access pull requests.
         * 
         * @return builder
         * 
         */
        public Builder appSecretName(String appSecretName) {
            return appSecretName(Output.of(appSecretName));
        }

        /**
         * @param labels Labels is used to filter the PRs that you want to target.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels is used to filter the PRs that you want to target.
         * 
         * @return builder
         * 
         */
        public Builder labels(List<String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels Labels is used to filter the PRs that you want to target.
         * 
         * @return builder
         * 
         */
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param owner GitHub org or user to scan.
         * 
         * @return builder
         * 
         */
        public Builder owner(Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner GitHub org or user to scan.
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        /**
         * @param repo GitHub repo name to scan.
         * 
         * @return builder
         * 
         */
        public Builder repo(Output<String> repo) {
            $.repo = repo;
            return this;
        }

        /**
         * @param repo GitHub repo name to scan.
         * 
         * @return builder
         * 
         */
        public Builder repo(String repo) {
            return repo(Output.of(repo));
        }

        /**
         * @param tokenRef Authentication token reference.
         * 
         * @return builder
         * 
         */
        public Builder tokenRef(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubTokenRefArgs> tokenRef) {
            $.tokenRef = tokenRef;
            return this;
        }

        /**
         * @param tokenRef Authentication token reference.
         * 
         * @return builder
         * 
         */
        public Builder tokenRef(GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubTokenRefArgs tokenRef) {
            return tokenRef(Output.of(tokenRef));
        }

        public GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubArgs build() {
            if ($.owner == null) {
                throw new MissingRequiredPropertyException("GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubArgs", "owner");
            }
            if ($.repo == null) {
                throw new MissingRequiredPropertyException("GitopsApplicationsetApplicationsetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubArgs", "repo");
            }
            return $;
        }
    }

}
