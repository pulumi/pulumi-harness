// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GetWorkspaceConnectorArgs;
import com.pulumi.harness.platform.inputs.GetWorkspaceEnvironmentVariableArgs;
import com.pulumi.harness.platform.inputs.GetWorkspaceTerraformVariableArgs;
import com.pulumi.harness.platform.inputs.GetWorkspaceTerraformVariableFileArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetWorkspaceArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetWorkspaceArgs Empty = new GetWorkspaceArgs();

    /**
     * Provider connector configured on the workspace
     * 
     */
    @Import(name="connectors")
    private @Nullable Output<List<GetWorkspaceConnectorArgs>> connectors;

    /**
     * @return Provider connector configured on the workspace
     * 
     */
    public Optional<Output<List<GetWorkspaceConnectorArgs>>> connectors() {
        return Optional.ofNullable(this.connectors);
    }

    /**
     * Description of the Workspace
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the Workspace
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Environment variables configured on the workspace
     * 
     */
    @Import(name="environmentVariables")
    private @Nullable Output<List<GetWorkspaceEnvironmentVariableArgs>> environmentVariables;

    /**
     * @return Environment variables configured on the workspace
     * 
     */
    public Optional<Output<List<GetWorkspaceEnvironmentVariableArgs>>> environmentVariables() {
        return Optional.ofNullable(this.environmentVariables);
    }

    /**
     * Identifier of the Workspace
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return Identifier of the Workspace
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * Organization Identifier
     * 
     */
    @Import(name="orgId", required=true)
    private Output<String> orgId;

    /**
     * @return Organization Identifier
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * Project Identifier
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return Project Identifier
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Repository Branch in which the code should be accessed
     * 
     */
    @Import(name="repositoryBranch")
    private @Nullable Output<String> repositoryBranch;

    /**
     * @return Repository Branch in which the code should be accessed
     * 
     */
    public Optional<Output<String>> repositoryBranch() {
        return Optional.ofNullable(this.repositoryBranch);
    }

    /**
     * Repository Tag in which the code should be accessed
     * 
     */
    @Import(name="repositoryCommit")
    private @Nullable Output<String> repositoryCommit;

    /**
     * @return Repository Tag in which the code should be accessed
     * 
     */
    public Optional<Output<String>> repositoryCommit() {
        return Optional.ofNullable(this.repositoryCommit);
    }

    /**
     * Repository Commit SHA in which the code should be accessed
     * 
     */
    @Import(name="repositorySha")
    private @Nullable Output<String> repositorySha;

    /**
     * @return Repository Commit SHA in which the code should be accessed
     * 
     */
    public Optional<Output<String>> repositorySha() {
        return Optional.ofNullable(this.repositorySha);
    }

    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="terraformVariableFiles")
    private @Nullable Output<List<GetWorkspaceTerraformVariableFileArgs>> terraformVariableFiles;

    public Optional<Output<List<GetWorkspaceTerraformVariableFileArgs>>> terraformVariableFiles() {
        return Optional.ofNullable(this.terraformVariableFiles);
    }

    @Import(name="terraformVariables")
    private @Nullable Output<List<GetWorkspaceTerraformVariableArgs>> terraformVariables;

    public Optional<Output<List<GetWorkspaceTerraformVariableArgs>>> terraformVariables() {
        return Optional.ofNullable(this.terraformVariables);
    }

    /**
     * Variable sets to use.
     * 
     */
    @Import(name="variableSets")
    private @Nullable Output<List<String>> variableSets;

    /**
     * @return Variable sets to use.
     * 
     */
    public Optional<Output<List<String>>> variableSets() {
        return Optional.ofNullable(this.variableSets);
    }

    private GetWorkspaceArgs() {}

    private GetWorkspaceArgs(GetWorkspaceArgs $) {
        this.connectors = $.connectors;
        this.description = $.description;
        this.environmentVariables = $.environmentVariables;
        this.identifier = $.identifier;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.repositoryBranch = $.repositoryBranch;
        this.repositoryCommit = $.repositoryCommit;
        this.repositorySha = $.repositorySha;
        this.tags = $.tags;
        this.terraformVariableFiles = $.terraformVariableFiles;
        this.terraformVariables = $.terraformVariables;
        this.variableSets = $.variableSets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetWorkspaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetWorkspaceArgs $;

        public Builder() {
            $ = new GetWorkspaceArgs();
        }

        public Builder(GetWorkspaceArgs defaults) {
            $ = new GetWorkspaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectors Provider connector configured on the workspace
         * 
         * @return builder
         * 
         */
        public Builder connectors(@Nullable Output<List<GetWorkspaceConnectorArgs>> connectors) {
            $.connectors = connectors;
            return this;
        }

        /**
         * @param connectors Provider connector configured on the workspace
         * 
         * @return builder
         * 
         */
        public Builder connectors(List<GetWorkspaceConnectorArgs> connectors) {
            return connectors(Output.of(connectors));
        }

        /**
         * @param connectors Provider connector configured on the workspace
         * 
         * @return builder
         * 
         */
        public Builder connectors(GetWorkspaceConnectorArgs... connectors) {
            return connectors(List.of(connectors));
        }

        /**
         * @param description Description of the Workspace
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the Workspace
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param environmentVariables Environment variables configured on the workspace
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(@Nullable Output<List<GetWorkspaceEnvironmentVariableArgs>> environmentVariables) {
            $.environmentVariables = environmentVariables;
            return this;
        }

        /**
         * @param environmentVariables Environment variables configured on the workspace
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(List<GetWorkspaceEnvironmentVariableArgs> environmentVariables) {
            return environmentVariables(Output.of(environmentVariables));
        }

        /**
         * @param environmentVariables Environment variables configured on the workspace
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(GetWorkspaceEnvironmentVariableArgs... environmentVariables) {
            return environmentVariables(List.of(environmentVariables));
        }

        /**
         * @param identifier Identifier of the Workspace
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Identifier of the Workspace
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param orgId Organization Identifier
         * 
         * @return builder
         * 
         */
        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Organization Identifier
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Project Identifier
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project Identifier
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param repositoryBranch Repository Branch in which the code should be accessed
         * 
         * @return builder
         * 
         */
        public Builder repositoryBranch(@Nullable Output<String> repositoryBranch) {
            $.repositoryBranch = repositoryBranch;
            return this;
        }

        /**
         * @param repositoryBranch Repository Branch in which the code should be accessed
         * 
         * @return builder
         * 
         */
        public Builder repositoryBranch(String repositoryBranch) {
            return repositoryBranch(Output.of(repositoryBranch));
        }

        /**
         * @param repositoryCommit Repository Tag in which the code should be accessed
         * 
         * @return builder
         * 
         */
        public Builder repositoryCommit(@Nullable Output<String> repositoryCommit) {
            $.repositoryCommit = repositoryCommit;
            return this;
        }

        /**
         * @param repositoryCommit Repository Tag in which the code should be accessed
         * 
         * @return builder
         * 
         */
        public Builder repositoryCommit(String repositoryCommit) {
            return repositoryCommit(Output.of(repositoryCommit));
        }

        /**
         * @param repositorySha Repository Commit SHA in which the code should be accessed
         * 
         * @return builder
         * 
         */
        public Builder repositorySha(@Nullable Output<String> repositorySha) {
            $.repositorySha = repositorySha;
            return this;
        }

        /**
         * @param repositorySha Repository Commit SHA in which the code should be accessed
         * 
         * @return builder
         * 
         */
        public Builder repositorySha(String repositorySha) {
            return repositorySha(Output.of(repositorySha));
        }

        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public Builder terraformVariableFiles(@Nullable Output<List<GetWorkspaceTerraformVariableFileArgs>> terraformVariableFiles) {
            $.terraformVariableFiles = terraformVariableFiles;
            return this;
        }

        public Builder terraformVariableFiles(List<GetWorkspaceTerraformVariableFileArgs> terraformVariableFiles) {
            return terraformVariableFiles(Output.of(terraformVariableFiles));
        }

        public Builder terraformVariableFiles(GetWorkspaceTerraformVariableFileArgs... terraformVariableFiles) {
            return terraformVariableFiles(List.of(terraformVariableFiles));
        }

        public Builder terraformVariables(@Nullable Output<List<GetWorkspaceTerraformVariableArgs>> terraformVariables) {
            $.terraformVariables = terraformVariables;
            return this;
        }

        public Builder terraformVariables(List<GetWorkspaceTerraformVariableArgs> terraformVariables) {
            return terraformVariables(Output.of(terraformVariables));
        }

        public Builder terraformVariables(GetWorkspaceTerraformVariableArgs... terraformVariables) {
            return terraformVariables(List.of(terraformVariables));
        }

        /**
         * @param variableSets Variable sets to use.
         * 
         * @return builder
         * 
         */
        public Builder variableSets(@Nullable Output<List<String>> variableSets) {
            $.variableSets = variableSets;
            return this;
        }

        /**
         * @param variableSets Variable sets to use.
         * 
         * @return builder
         * 
         */
        public Builder variableSets(List<String> variableSets) {
            return variableSets(Output.of(variableSets));
        }

        /**
         * @param variableSets Variable sets to use.
         * 
         * @return builder
         * 
         */
        public Builder variableSets(String... variableSets) {
            return variableSets(List.of(variableSets));
        }

        public GetWorkspaceArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("GetWorkspaceArgs", "identifier");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("GetWorkspaceArgs", "orgId");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("GetWorkspaceArgs", "projectId");
            }
            return $;
        }
    }

}
