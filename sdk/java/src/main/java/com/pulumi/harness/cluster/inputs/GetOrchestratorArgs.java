// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cluster.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetOrchestratorArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetOrchestratorArgs Empty = new GetOrchestratorArgs();

    /**
     * Endpoint of the k8s cluster being onboarded under the orchestrator
     * 
     */
    @Import(name="clusterEndpoint", required=true)
    private Output<String> clusterEndpoint;

    /**
     * @return Endpoint of the k8s cluster being onboarded under the orchestrator
     * 
     */
    public Output<String> clusterEndpoint() {
        return this.clusterEndpoint;
    }

    /**
     * ID of the Harness Kubernetes Connector Being used
     * 
     */
    @Import(name="k8sConnectorId")
    private @Nullable Output<String> k8sConnectorId;

    /**
     * @return ID of the Harness Kubernetes Connector Being used
     * 
     */
    public Optional<Output<String>> k8sConnectorId() {
        return Optional.ofNullable(this.k8sConnectorId);
    }

    /**
     * Name of the Orchestrator
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the Orchestrator
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private GetOrchestratorArgs() {}

    private GetOrchestratorArgs(GetOrchestratorArgs $) {
        this.clusterEndpoint = $.clusterEndpoint;
        this.k8sConnectorId = $.k8sConnectorId;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetOrchestratorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetOrchestratorArgs $;

        public Builder() {
            $ = new GetOrchestratorArgs();
        }

        public Builder(GetOrchestratorArgs defaults) {
            $ = new GetOrchestratorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterEndpoint Endpoint of the k8s cluster being onboarded under the orchestrator
         * 
         * @return builder
         * 
         */
        public Builder clusterEndpoint(Output<String> clusterEndpoint) {
            $.clusterEndpoint = clusterEndpoint;
            return this;
        }

        /**
         * @param clusterEndpoint Endpoint of the k8s cluster being onboarded under the orchestrator
         * 
         * @return builder
         * 
         */
        public Builder clusterEndpoint(String clusterEndpoint) {
            return clusterEndpoint(Output.of(clusterEndpoint));
        }

        /**
         * @param k8sConnectorId ID of the Harness Kubernetes Connector Being used
         * 
         * @return builder
         * 
         */
        public Builder k8sConnectorId(@Nullable Output<String> k8sConnectorId) {
            $.k8sConnectorId = k8sConnectorId;
            return this;
        }

        /**
         * @param k8sConnectorId ID of the Harness Kubernetes Connector Being used
         * 
         * @return builder
         * 
         */
        public Builder k8sConnectorId(String k8sConnectorId) {
            return k8sConnectorId(Output.of(k8sConnectorId));
        }

        /**
         * @param name Name of the Orchestrator
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Orchestrator
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public GetOrchestratorArgs build() {
            if ($.clusterEndpoint == null) {
                throw new MissingRequiredPropertyException("GetOrchestratorArgs", "clusterEndpoint");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetOrchestratorArgs", "name");
            }
            return $;
        }
    }

}
