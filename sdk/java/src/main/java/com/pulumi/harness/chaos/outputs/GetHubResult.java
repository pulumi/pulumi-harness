// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetHubResult {
    /**
     * @return ID of the Git connector
     * 
     */
    private String connectorId;
    /**
     * @return Creation timestamp
     * 
     */
    private String createdAt;
    /**
     * @return Description of the chaos hub
     * 
     */
    private String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Whether the chaos hub is available
     * 
     */
    private Boolean isAvailable;
    /**
     * @return Whether this is the default chaos hub
     * 
     */
    private Boolean isDefault;
    /**
     * @return Timestamp of the last sync
     * 
     */
    private String lastSyncedAt;
    /**
     * @return Name of the chaos hub
     * 
     */
    private String name;
    /**
     * @return The organization ID of the chaos hub
     * 
     */
    private @Nullable String orgId;
    /**
     * @return The project ID of the chaos hub
     * 
     */
    private @Nullable String projectId;
    /**
     * @return Git repository branch
     * 
     */
    private String repoBranch;
    /**
     * @return Name of the Git repository
     * 
     */
    private String repoName;
    /**
     * @return Tags associated with the chaos hub
     * 
     */
    private List<String> tags;
    /**
     * @return Total number of experiments in the hub
     * 
     */
    private Integer totalExperiments;
    /**
     * @return Total number of faults in the hub
     * 
     */
    private Integer totalFaults;
    /**
     * @return Last update timestamp
     * 
     */
    private String updatedAt;

    private GetHubResult() {}
    /**
     * @return ID of the Git connector
     * 
     */
    public String connectorId() {
        return this.connectorId;
    }
    /**
     * @return Creation timestamp
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Description of the chaos hub
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether the chaos hub is available
     * 
     */
    public Boolean isAvailable() {
        return this.isAvailable;
    }
    /**
     * @return Whether this is the default chaos hub
     * 
     */
    public Boolean isDefault() {
        return this.isDefault;
    }
    /**
     * @return Timestamp of the last sync
     * 
     */
    public String lastSyncedAt() {
        return this.lastSyncedAt;
    }
    /**
     * @return Name of the chaos hub
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The organization ID of the chaos hub
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }
    /**
     * @return The project ID of the chaos hub
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return Git repository branch
     * 
     */
    public String repoBranch() {
        return this.repoBranch;
    }
    /**
     * @return Name of the Git repository
     * 
     */
    public String repoName() {
        return this.repoName;
    }
    /**
     * @return Tags associated with the chaos hub
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return Total number of experiments in the hub
     * 
     */
    public Integer totalExperiments() {
        return this.totalExperiments;
    }
    /**
     * @return Total number of faults in the hub
     * 
     */
    public Integer totalFaults() {
        return this.totalFaults;
    }
    /**
     * @return Last update timestamp
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHubResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String connectorId;
        private String createdAt;
        private String description;
        private String id;
        private Boolean isAvailable;
        private Boolean isDefault;
        private String lastSyncedAt;
        private String name;
        private @Nullable String orgId;
        private @Nullable String projectId;
        private String repoBranch;
        private String repoName;
        private List<String> tags;
        private Integer totalExperiments;
        private Integer totalFaults;
        private String updatedAt;
        public Builder() {}
        public Builder(GetHubResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectorId = defaults.connectorId;
    	      this.createdAt = defaults.createdAt;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.isAvailable = defaults.isAvailable;
    	      this.isDefault = defaults.isDefault;
    	      this.lastSyncedAt = defaults.lastSyncedAt;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.projectId = defaults.projectId;
    	      this.repoBranch = defaults.repoBranch;
    	      this.repoName = defaults.repoName;
    	      this.tags = defaults.tags;
    	      this.totalExperiments = defaults.totalExperiments;
    	      this.totalFaults = defaults.totalFaults;
    	      this.updatedAt = defaults.updatedAt;
        }

        @CustomType.Setter
        public Builder connectorId(String connectorId) {
            if (connectorId == null) {
              throw new MissingRequiredPropertyException("GetHubResult", "connectorId");
            }
            this.connectorId = connectorId;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetHubResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetHubResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetHubResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isAvailable(Boolean isAvailable) {
            if (isAvailable == null) {
              throw new MissingRequiredPropertyException("GetHubResult", "isAvailable");
            }
            this.isAvailable = isAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder isDefault(Boolean isDefault) {
            if (isDefault == null) {
              throw new MissingRequiredPropertyException("GetHubResult", "isDefault");
            }
            this.isDefault = isDefault;
            return this;
        }
        @CustomType.Setter
        public Builder lastSyncedAt(String lastSyncedAt) {
            if (lastSyncedAt == null) {
              throw new MissingRequiredPropertyException("GetHubResult", "lastSyncedAt");
            }
            this.lastSyncedAt = lastSyncedAt;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetHubResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(@Nullable String orgId) {

            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder repoBranch(String repoBranch) {
            if (repoBranch == null) {
              throw new MissingRequiredPropertyException("GetHubResult", "repoBranch");
            }
            this.repoBranch = repoBranch;
            return this;
        }
        @CustomType.Setter
        public Builder repoName(String repoName) {
            if (repoName == null) {
              throw new MissingRequiredPropertyException("GetHubResult", "repoName");
            }
            this.repoName = repoName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetHubResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder totalExperiments(Integer totalExperiments) {
            if (totalExperiments == null) {
              throw new MissingRequiredPropertyException("GetHubResult", "totalExperiments");
            }
            this.totalExperiments = totalExperiments;
            return this;
        }
        @CustomType.Setter
        public Builder totalFaults(Integer totalFaults) {
            if (totalFaults == null) {
              throw new MissingRequiredPropertyException("GetHubResult", "totalFaults");
            }
            this.totalFaults = totalFaults;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetHubResult", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        public GetHubResult build() {
            final var _resultValue = new GetHubResult();
            _resultValue.connectorId = connectorId;
            _resultValue.createdAt = createdAt;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.isAvailable = isAvailable;
            _resultValue.isDefault = isDefault;
            _resultValue.lastSyncedAt = lastSyncedAt;
            _resultValue.name = name;
            _resultValue.orgId = orgId;
            _resultValue.projectId = projectId;
            _resultValue.repoBranch = repoBranch;
            _resultValue.repoName = repoName;
            _resultValue.tags = tags;
            _resultValue.totalExperiments = totalExperiments;
            _resultValue.totalFaults = totalFaults;
            _resultValue.updatedAt = updatedAt;
            return _resultValue;
        }
    }
}
