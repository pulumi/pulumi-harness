// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitOpsApplicationsApplicationSpecSourceDirectoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitOpsApplicationsApplicationSpecSourceDirectoryArgs Empty = new GitOpsApplicationsApplicationSpecSourceDirectoryArgs();

    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.
     * 
     */
    @Import(name="exclude")
    private @Nullable Output<String> exclude;

    /**
     * @return Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.
     * 
     */
    public Optional<Output<String>> exclude() {
        return Optional.ofNullable(this.exclude);
    }

    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation.
     * 
     */
    @Import(name="include")
    private @Nullable Output<String> include;

    /**
     * @return Glob pattern to match paths against that should be explicitly included during manifest generation.
     * 
     */
    public Optional<Output<String>> include() {
        return Optional.ofNullable(this.include);
    }

    /**
     * Options specific to applications of type Jsonnet.
     * 
     */
    @Import(name="jsonnets")
    private @Nullable Output<List<GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetArgs>> jsonnets;

    /**
     * @return Options specific to applications of type Jsonnet.
     * 
     */
    public Optional<Output<List<GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetArgs>>> jsonnets() {
        return Optional.ofNullable(this.jsonnets);
    }

    /**
     * Indicates to scan a directory recursively for manifests.
     * 
     */
    @Import(name="recurse")
    private @Nullable Output<Boolean> recurse;

    /**
     * @return Indicates to scan a directory recursively for manifests.
     * 
     */
    public Optional<Output<Boolean>> recurse() {
        return Optional.ofNullable(this.recurse);
    }

    private GitOpsApplicationsApplicationSpecSourceDirectoryArgs() {}

    private GitOpsApplicationsApplicationSpecSourceDirectoryArgs(GitOpsApplicationsApplicationSpecSourceDirectoryArgs $) {
        this.exclude = $.exclude;
        this.include = $.include;
        this.jsonnets = $.jsonnets;
        this.recurse = $.recurse;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitOpsApplicationsApplicationSpecSourceDirectoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitOpsApplicationsApplicationSpecSourceDirectoryArgs $;

        public Builder() {
            $ = new GitOpsApplicationsApplicationSpecSourceDirectoryArgs();
        }

        public Builder(GitOpsApplicationsApplicationSpecSourceDirectoryArgs defaults) {
            $ = new GitOpsApplicationsApplicationSpecSourceDirectoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param exclude Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.
         * 
         * @return builder
         * 
         */
        public Builder exclude(@Nullable Output<String> exclude) {
            $.exclude = exclude;
            return this;
        }

        /**
         * @param exclude Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.
         * 
         * @return builder
         * 
         */
        public Builder exclude(String exclude) {
            return exclude(Output.of(exclude));
        }

        /**
         * @param include Glob pattern to match paths against that should be explicitly included during manifest generation.
         * 
         * @return builder
         * 
         */
        public Builder include(@Nullable Output<String> include) {
            $.include = include;
            return this;
        }

        /**
         * @param include Glob pattern to match paths against that should be explicitly included during manifest generation.
         * 
         * @return builder
         * 
         */
        public Builder include(String include) {
            return include(Output.of(include));
        }

        /**
         * @param jsonnets Options specific to applications of type Jsonnet.
         * 
         * @return builder
         * 
         */
        public Builder jsonnets(@Nullable Output<List<GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetArgs>> jsonnets) {
            $.jsonnets = jsonnets;
            return this;
        }

        /**
         * @param jsonnets Options specific to applications of type Jsonnet.
         * 
         * @return builder
         * 
         */
        public Builder jsonnets(List<GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetArgs> jsonnets) {
            return jsonnets(Output.of(jsonnets));
        }

        /**
         * @param jsonnets Options specific to applications of type Jsonnet.
         * 
         * @return builder
         * 
         */
        public Builder jsonnets(GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetArgs... jsonnets) {
            return jsonnets(List.of(jsonnets));
        }

        /**
         * @param recurse Indicates to scan a directory recursively for manifests.
         * 
         * @return builder
         * 
         */
        public Builder recurse(@Nullable Output<Boolean> recurse) {
            $.recurse = recurse;
            return this;
        }

        /**
         * @param recurse Indicates to scan a directory recursively for manifests.
         * 
         * @return builder
         * 
         */
        public Builder recurse(Boolean recurse) {
            return recurse(Output.of(recurse));
        }

        public GitOpsApplicationsApplicationSpecSourceDirectoryArgs build() {
            return $;
        }
    }

}
