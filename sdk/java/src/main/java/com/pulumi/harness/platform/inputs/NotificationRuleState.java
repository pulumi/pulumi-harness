// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.NotificationRuleRequestArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationRuleState extends com.pulumi.resources.ResourceArgs {

    public static final NotificationRuleState Empty = new NotificationRuleState();

    /**
     * Identifier of the Notification Rule.
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return Identifier of the Notification Rule.
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * Identifier of the organization in which the Notification Rule is configured.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Identifier of the organization in which the Notification Rule is configured.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Identifier of the project in which the Notification Rule is configured.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Identifier of the project in which the Notification Rule is configured.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Request for creating or updating Notification Rule.
     * 
     */
    @Import(name="request")
    private @Nullable Output<NotificationRuleRequestArgs> request;

    /**
     * @return Request for creating or updating Notification Rule.
     * 
     */
    public Optional<Output<NotificationRuleRequestArgs>> request() {
        return Optional.ofNullable(this.request);
    }

    private NotificationRuleState() {}

    private NotificationRuleState(NotificationRuleState $) {
        this.identifier = $.identifier;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.request = $.request;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationRuleState $;

        public Builder() {
            $ = new NotificationRuleState();
        }

        public Builder(NotificationRuleState defaults) {
            $ = new NotificationRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param identifier Identifier of the Notification Rule.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Identifier of the Notification Rule.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param orgId Identifier of the organization in which the Notification Rule is configured.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Identifier of the organization in which the Notification Rule is configured.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Identifier of the project in which the Notification Rule is configured.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Identifier of the project in which the Notification Rule is configured.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param request Request for creating or updating Notification Rule.
         * 
         * @return builder
         * 
         */
        public Builder request(@Nullable Output<NotificationRuleRequestArgs> request) {
            $.request = request;
            return this;
        }

        /**
         * @param request Request for creating or updating Notification Rule.
         * 
         * @return builder
         * 
         */
        public Builder request(NotificationRuleRequestArgs request) {
            return request(Output.of(request));
        }

        public NotificationRuleState build() {
            return $;
        }
    }

}
