// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InfrastructureDefinitionAzureVmssArgs extends com.pulumi.resources.ResourceArgs {

    public static final InfrastructureDefinitionAzureVmssArgs Empty = new InfrastructureDefinitionAzureVmssArgs();

    /**
     * The type of authentication to use. Valid options are SSH*PUBLIC*KEY.
     * 
     */
    @Import(name="authType", required=true)
    private Output<String> authType;

    /**
     * @return The type of authentication to use. Valid options are SSH*PUBLIC*KEY.
     * 
     */
    public Output<String> authType() {
        return this.authType;
    }

    /**
     * Base name.
     * 
     */
    @Import(name="baseName", required=true)
    private Output<String> baseName;

    /**
     * @return Base name.
     * 
     */
    public Output<String> baseName() {
        return this.baseName;
    }

    /**
     * The name of the cloud provider to connect with.
     * 
     */
    @Import(name="cloudProviderName", required=true)
    private Output<String> cloudProviderName;

    /**
     * @return The name of the cloud provider to connect with.
     * 
     */
    public Output<String> cloudProviderName() {
        return this.cloudProviderName;
    }

    /**
     * The type of deployment. Valid options are NATIVE_VMSS
     * 
     */
    @Import(name="deploymentType", required=true)
    private Output<String> deploymentType;

    /**
     * @return The type of deployment. Valid options are NATIVE_VMSS
     * 
     */
    public Output<String> deploymentType() {
        return this.deploymentType;
    }

    /**
     * The name of the host connection attributes to use.
     * 
     */
    @Import(name="hostConnectionAttrsName")
    private @Nullable Output<String> hostConnectionAttrsName;

    /**
     * @return The name of the host connection attributes to use.
     * 
     */
    public Optional<Output<String>> hostConnectionAttrsName() {
        return Optional.ofNullable(this.hostConnectionAttrsName);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The unique id of the azure subscription.
     * 
     */
    @Import(name="subscriptionId", required=true)
    private Output<String> subscriptionId;

    /**
     * @return The unique id of the azure subscription.
     * 
     */
    public Output<String> subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * The username to connect with.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The username to connect with.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private InfrastructureDefinitionAzureVmssArgs() {}

    private InfrastructureDefinitionAzureVmssArgs(InfrastructureDefinitionAzureVmssArgs $) {
        this.authType = $.authType;
        this.baseName = $.baseName;
        this.cloudProviderName = $.cloudProviderName;
        this.deploymentType = $.deploymentType;
        this.hostConnectionAttrsName = $.hostConnectionAttrsName;
        this.resourceGroupName = $.resourceGroupName;
        this.subscriptionId = $.subscriptionId;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InfrastructureDefinitionAzureVmssArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InfrastructureDefinitionAzureVmssArgs $;

        public Builder() {
            $ = new InfrastructureDefinitionAzureVmssArgs();
        }

        public Builder(InfrastructureDefinitionAzureVmssArgs defaults) {
            $ = new InfrastructureDefinitionAzureVmssArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authType The type of authentication to use. Valid options are SSH*PUBLIC*KEY.
         * 
         * @return builder
         * 
         */
        public Builder authType(Output<String> authType) {
            $.authType = authType;
            return this;
        }

        /**
         * @param authType The type of authentication to use. Valid options are SSH*PUBLIC*KEY.
         * 
         * @return builder
         * 
         */
        public Builder authType(String authType) {
            return authType(Output.of(authType));
        }

        /**
         * @param baseName Base name.
         * 
         * @return builder
         * 
         */
        public Builder baseName(Output<String> baseName) {
            $.baseName = baseName;
            return this;
        }

        /**
         * @param baseName Base name.
         * 
         * @return builder
         * 
         */
        public Builder baseName(String baseName) {
            return baseName(Output.of(baseName));
        }

        /**
         * @param cloudProviderName The name of the cloud provider to connect with.
         * 
         * @return builder
         * 
         */
        public Builder cloudProviderName(Output<String> cloudProviderName) {
            $.cloudProviderName = cloudProviderName;
            return this;
        }

        /**
         * @param cloudProviderName The name of the cloud provider to connect with.
         * 
         * @return builder
         * 
         */
        public Builder cloudProviderName(String cloudProviderName) {
            return cloudProviderName(Output.of(cloudProviderName));
        }

        /**
         * @param deploymentType The type of deployment. Valid options are NATIVE_VMSS
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(Output<String> deploymentType) {
            $.deploymentType = deploymentType;
            return this;
        }

        /**
         * @param deploymentType The type of deployment. Valid options are NATIVE_VMSS
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(String deploymentType) {
            return deploymentType(Output.of(deploymentType));
        }

        /**
         * @param hostConnectionAttrsName The name of the host connection attributes to use.
         * 
         * @return builder
         * 
         */
        public Builder hostConnectionAttrsName(@Nullable Output<String> hostConnectionAttrsName) {
            $.hostConnectionAttrsName = hostConnectionAttrsName;
            return this;
        }

        /**
         * @param hostConnectionAttrsName The name of the host connection attributes to use.
         * 
         * @return builder
         * 
         */
        public Builder hostConnectionAttrsName(String hostConnectionAttrsName) {
            return hostConnectionAttrsName(Output.of(hostConnectionAttrsName));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param subscriptionId The unique id of the azure subscription.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId The unique id of the azure subscription.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        /**
         * @param username The username to connect with.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username to connect with.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public InfrastructureDefinitionAzureVmssArgs build() {
            if ($.authType == null) {
                throw new MissingRequiredPropertyException("InfrastructureDefinitionAzureVmssArgs", "authType");
            }
            if ($.baseName == null) {
                throw new MissingRequiredPropertyException("InfrastructureDefinitionAzureVmssArgs", "baseName");
            }
            if ($.cloudProviderName == null) {
                throw new MissingRequiredPropertyException("InfrastructureDefinitionAzureVmssArgs", "cloudProviderName");
            }
            if ($.deploymentType == null) {
                throw new MissingRequiredPropertyException("InfrastructureDefinitionAzureVmssArgs", "deploymentType");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("InfrastructureDefinitionAzureVmssArgs", "resourceGroupName");
            }
            if ($.subscriptionId == null) {
                throw new MissingRequiredPropertyException("InfrastructureDefinitionAzureVmssArgs", "subscriptionId");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("InfrastructureDefinitionAzureVmssArgs", "username");
            }
            return $;
        }
    }

}
