// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.ResourceGroupIncludedScopeArgs;
import com.pulumi.harness.platform.inputs.ResourceGroupResourceFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourceGroupState extends com.pulumi.resources.ResourceArgs {

    public static final ResourceGroupState Empty = new ResourceGroupState();

    /**
     * Account Identifier of the account
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Account Identifier of the account
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The scope levels at which this resource group can be used
     * 
     */
    @Import(name="allowedScopeLevels")
    private @Nullable Output<List<String>> allowedScopeLevels;

    /**
     * @return The scope levels at which this resource group can be used
     * 
     */
    public Optional<Output<List<String>>> allowedScopeLevels() {
        return Optional.ofNullable(this.allowedScopeLevels);
    }

    /**
     * Color of the environment.
     * 
     */
    @Import(name="color")
    private @Nullable Output<String> color;

    /**
     * @return Color of the environment.
     * 
     */
    public Optional<Output<String>> color() {
        return Optional.ofNullable(this.color);
    }

    /**
     * Description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * Included scopes; default selected based on resource group scope if not specified.
     * 
     */
    @Import(name="includedScopes")
    private @Nullable Output<List<ResourceGroupIncludedScopeArgs>> includedScopes;

    /**
     * @return Included scopes; default selected based on resource group scope if not specified.
     * 
     */
    public Optional<Output<List<ResourceGroupIncludedScopeArgs>>> includedScopes() {
        return Optional.ofNullable(this.includedScopes);
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Contains resource filter for a resource group
     * 
     */
    @Import(name="resourceFilters")
    private @Nullable Output<List<ResourceGroupResourceFilterArgs>> resourceFilters;

    /**
     * @return Contains resource filter for a resource group
     * 
     */
    public Optional<Output<List<ResourceGroupResourceFilterArgs>>> resourceFilters() {
        return Optional.ofNullable(this.resourceFilters);
    }

    /**
     * Tags to associate with the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags to associate with the resource.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ResourceGroupState() {}

    private ResourceGroupState(ResourceGroupState $) {
        this.accountId = $.accountId;
        this.allowedScopeLevels = $.allowedScopeLevels;
        this.color = $.color;
        this.description = $.description;
        this.identifier = $.identifier;
        this.includedScopes = $.includedScopes;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.resourceFilters = $.resourceFilters;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceGroupState $;

        public Builder() {
            $ = new ResourceGroupState();
        }

        public Builder(ResourceGroupState defaults) {
            $ = new ResourceGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account Identifier of the account
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account Identifier of the account
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param allowedScopeLevels The scope levels at which this resource group can be used
         * 
         * @return builder
         * 
         */
        public Builder allowedScopeLevels(@Nullable Output<List<String>> allowedScopeLevels) {
            $.allowedScopeLevels = allowedScopeLevels;
            return this;
        }

        /**
         * @param allowedScopeLevels The scope levels at which this resource group can be used
         * 
         * @return builder
         * 
         */
        public Builder allowedScopeLevels(List<String> allowedScopeLevels) {
            return allowedScopeLevels(Output.of(allowedScopeLevels));
        }

        /**
         * @param allowedScopeLevels The scope levels at which this resource group can be used
         * 
         * @return builder
         * 
         */
        public Builder allowedScopeLevels(String... allowedScopeLevels) {
            return allowedScopeLevels(List.of(allowedScopeLevels));
        }

        /**
         * @param color Color of the environment.
         * 
         * @return builder
         * 
         */
        public Builder color(@Nullable Output<String> color) {
            $.color = color;
            return this;
        }

        /**
         * @param color Color of the environment.
         * 
         * @return builder
         * 
         */
        public Builder color(String color) {
            return color(Output.of(color));
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param includedScopes Included scopes; default selected based on resource group scope if not specified.
         * 
         * @return builder
         * 
         */
        public Builder includedScopes(@Nullable Output<List<ResourceGroupIncludedScopeArgs>> includedScopes) {
            $.includedScopes = includedScopes;
            return this;
        }

        /**
         * @param includedScopes Included scopes; default selected based on resource group scope if not specified.
         * 
         * @return builder
         * 
         */
        public Builder includedScopes(List<ResourceGroupIncludedScopeArgs> includedScopes) {
            return includedScopes(Output.of(includedScopes));
        }

        /**
         * @param includedScopes Included scopes; default selected based on resource group scope if not specified.
         * 
         * @return builder
         * 
         */
        public Builder includedScopes(ResourceGroupIncludedScopeArgs... includedScopes) {
            return includedScopes(List.of(includedScopes));
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param resourceFilters Contains resource filter for a resource group
         * 
         * @return builder
         * 
         */
        public Builder resourceFilters(@Nullable Output<List<ResourceGroupResourceFilterArgs>> resourceFilters) {
            $.resourceFilters = resourceFilters;
            return this;
        }

        /**
         * @param resourceFilters Contains resource filter for a resource group
         * 
         * @return builder
         * 
         */
        public Builder resourceFilters(List<ResourceGroupResourceFilterArgs> resourceFilters) {
            return resourceFilters(Output.of(resourceFilters));
        }

        /**
         * @param resourceFilters Contains resource filter for a resource group
         * 
         * @return builder
         * 
         */
        public Builder resourceFilters(ResourceGroupResourceFilterArgs... resourceFilters) {
            return resourceFilters(List.of(resourceFilters));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public ResourceGroupState build() {
            return $;
        }
    }

}
