// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GetGitopsApplicationsApplicationSpecDestination;
import com.pulumi.harness.platform.outputs.GetGitopsApplicationsApplicationSpecSource;
import com.pulumi.harness.platform.outputs.GetGitopsApplicationsApplicationSpecSyncPolicy;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGitopsApplicationsApplicationSpec {
    /**
     * @return Information about the GitOps application&#39;s destination.
     * 
     */
    private List<GetGitopsApplicationsApplicationSpecDestination> destinations;
    /**
     * @return The ArgoCD project name corresponding to this GitOps application. Value must match mappings of ArgoCD projects to harness project.
     * 
     */
    private @Nullable String project;
    /**
     * @return Contains all information about the source of a GitOps application.
     * 
     */
    private @Nullable List<GetGitopsApplicationsApplicationSpecSource> source;
    /**
     * @return List of sources for the GitOps application. Multi Source support
     * 
     */
    private List<GetGitopsApplicationsApplicationSpecSource> sources;
    /**
     * @return Controls when a sync will be performed in response to updates in git.
     * 
     */
    private List<GetGitopsApplicationsApplicationSpecSyncPolicy> syncPolicies;

    private GetGitopsApplicationsApplicationSpec() {}
    /**
     * @return Information about the GitOps application&#39;s destination.
     * 
     */
    public List<GetGitopsApplicationsApplicationSpecDestination> destinations() {
        return this.destinations;
    }
    /**
     * @return The ArgoCD project name corresponding to this GitOps application. Value must match mappings of ArgoCD projects to harness project.
     * 
     */
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    /**
     * @return Contains all information about the source of a GitOps application.
     * 
     */
    public List<GetGitopsApplicationsApplicationSpecSource> source() {
        return this.source == null ? List.of() : this.source;
    }
    /**
     * @return List of sources for the GitOps application. Multi Source support
     * 
     */
    public List<GetGitopsApplicationsApplicationSpecSource> sources() {
        return this.sources;
    }
    /**
     * @return Controls when a sync will be performed in response to updates in git.
     * 
     */
    public List<GetGitopsApplicationsApplicationSpecSyncPolicy> syncPolicies() {
        return this.syncPolicies;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGitopsApplicationsApplicationSpec defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetGitopsApplicationsApplicationSpecDestination> destinations;
        private @Nullable String project;
        private @Nullable List<GetGitopsApplicationsApplicationSpecSource> source;
        private List<GetGitopsApplicationsApplicationSpecSource> sources;
        private List<GetGitopsApplicationsApplicationSpecSyncPolicy> syncPolicies;
        public Builder() {}
        public Builder(GetGitopsApplicationsApplicationSpec defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinations = defaults.destinations;
    	      this.project = defaults.project;
    	      this.source = defaults.source;
    	      this.sources = defaults.sources;
    	      this.syncPolicies = defaults.syncPolicies;
        }

        @CustomType.Setter
        public Builder destinations(List<GetGitopsApplicationsApplicationSpecDestination> destinations) {
            if (destinations == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpec", "destinations");
            }
            this.destinations = destinations;
            return this;
        }
        public Builder destinations(GetGitopsApplicationsApplicationSpecDestination... destinations) {
            return destinations(List.of(destinations));
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder source(@Nullable List<GetGitopsApplicationsApplicationSpecSource> source) {

            this.source = source;
            return this;
        }
        public Builder source(GetGitopsApplicationsApplicationSpecSource... source) {
            return source(List.of(source));
        }
        @CustomType.Setter
        public Builder sources(List<GetGitopsApplicationsApplicationSpecSource> sources) {
            if (sources == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpec", "sources");
            }
            this.sources = sources;
            return this;
        }
        public Builder sources(GetGitopsApplicationsApplicationSpecSource... sources) {
            return sources(List.of(sources));
        }
        @CustomType.Setter
        public Builder syncPolicies(List<GetGitopsApplicationsApplicationSpecSyncPolicy> syncPolicies) {
            if (syncPolicies == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpec", "syncPolicies");
            }
            this.syncPolicies = syncPolicies;
            return this;
        }
        public Builder syncPolicies(GetGitopsApplicationsApplicationSpecSyncPolicy... syncPolicies) {
            return syncPolicies(List.of(syncPolicies));
        }
        public GetGitopsApplicationsApplicationSpec build() {
            final var _resultValue = new GetGitopsApplicationsApplicationSpec();
            _resultValue.destinations = destinations;
            _resultValue.project = project;
            _resultValue.source = source;
            _resultValue.sources = sources;
            _resultValue.syncPolicies = syncPolicies;
            return _resultValue;
        }
    }
}
