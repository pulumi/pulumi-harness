// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetCentralNotificationRuleNotificationConditionNotificationEventConfig {
    private String notificationEntity;
    private String notificationEvent;
    private @Nullable Map<String,String> notificationEventData;

    private GetCentralNotificationRuleNotificationConditionNotificationEventConfig() {}
    public String notificationEntity() {
        return this.notificationEntity;
    }
    public String notificationEvent() {
        return this.notificationEvent;
    }
    public Map<String,String> notificationEventData() {
        return this.notificationEventData == null ? Map.of() : this.notificationEventData;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCentralNotificationRuleNotificationConditionNotificationEventConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String notificationEntity;
        private String notificationEvent;
        private @Nullable Map<String,String> notificationEventData;
        public Builder() {}
        public Builder(GetCentralNotificationRuleNotificationConditionNotificationEventConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.notificationEntity = defaults.notificationEntity;
    	      this.notificationEvent = defaults.notificationEvent;
    	      this.notificationEventData = defaults.notificationEventData;
        }

        @CustomType.Setter
        public Builder notificationEntity(String notificationEntity) {
            if (notificationEntity == null) {
              throw new MissingRequiredPropertyException("GetCentralNotificationRuleNotificationConditionNotificationEventConfig", "notificationEntity");
            }
            this.notificationEntity = notificationEntity;
            return this;
        }
        @CustomType.Setter
        public Builder notificationEvent(String notificationEvent) {
            if (notificationEvent == null) {
              throw new MissingRequiredPropertyException("GetCentralNotificationRuleNotificationConditionNotificationEventConfig", "notificationEvent");
            }
            this.notificationEvent = notificationEvent;
            return this;
        }
        @CustomType.Setter
        public Builder notificationEventData(@Nullable Map<String,String> notificationEventData) {

            this.notificationEventData = notificationEventData;
            return this;
        }
        public GetCentralNotificationRuleNotificationConditionNotificationEventConfig build() {
            final var _resultValue = new GetCentralNotificationRuleNotificationConditionNotificationEventConfig();
            _resultValue.notificationEntity = notificationEntity;
            _resultValue.notificationEvent = notificationEvent;
            _resultValue.notificationEventData = notificationEventData;
            return _resultValue;
        }
    }
}
