// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.service.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.service.inputs.DiscoveryAgentInstallationDetailAgentDetailArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiscoveryAgentInstallationDetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiscoveryAgentInstallationDetailArgs Empty = new DiscoveryAgentInstallationDetailArgs();

    /**
     * The account identifier for the installation.
     * 
     */
    @Import(name="accountIdentifier")
    private @Nullable Output<String> accountIdentifier;

    /**
     * @return The account identifier for the installation.
     * 
     */
    public Optional<Output<String>> accountIdentifier() {
        return Optional.ofNullable(this.accountIdentifier);
    }

    /**
     * Details about the installed agent.
     * 
     */
    @Import(name="agentDetails")
    private @Nullable Output<List<DiscoveryAgentInstallationDetailAgentDetailArgs>> agentDetails;

    /**
     * @return Details about the installed agent.
     * 
     */
    public Optional<Output<List<DiscoveryAgentInstallationDetailAgentDetailArgs>>> agentDetails() {
        return Optional.ofNullable(this.agentDetails);
    }

    /**
     * The ID of the installed agent.
     * 
     */
    @Import(name="agentId")
    private @Nullable Output<String> agentId;

    /**
     * @return The ID of the installed agent.
     * 
     */
    public Optional<Output<String>> agentId() {
        return Optional.ofNullable(this.agentId);
    }

    /**
     * The timestamp when the installation was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The timestamp when the installation was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The user who created the installation.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return The user who created the installation.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * The ID of the delegate used for installation.
     * 
     */
    @Import(name="delegateId")
    private @Nullable Output<String> delegateId;

    /**
     * @return The ID of the delegate used for installation.
     * 
     */
    public Optional<Output<String>> delegateId() {
        return Optional.ofNullable(this.delegateId);
    }

    /**
     * The ID of the delegate task for the installation.
     * 
     */
    @Import(name="delegateTaskId")
    private @Nullable Output<String> delegateTaskId;

    /**
     * @return The ID of the delegate task for the installation.
     * 
     */
    public Optional<Output<String>> delegateTaskId() {
        return Optional.ofNullable(this.delegateTaskId);
    }

    /**
     * The status of the delegate task (e.g., &#39;SUCCESS&#39;).
     * 
     */
    @Import(name="delegateTaskStatus")
    private @Nullable Output<String> delegateTaskStatus;

    /**
     * @return The status of the delegate task (e.g., &#39;SUCCESS&#39;).
     * 
     */
    public Optional<Output<String>> delegateTaskStatus() {
        return Optional.ofNullable(this.delegateTaskStatus);
    }

    /**
     * The environment identifier for the installation.
     * 
     */
    @Import(name="environmentIdentifier")
    private @Nullable Output<String> environmentIdentifier;

    /**
     * @return The environment identifier for the installation.
     * 
     */
    public Optional<Output<String>> environmentIdentifier() {
        return Optional.ofNullable(this.environmentIdentifier);
    }

    /**
     * The unique identifier of the installation.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The unique identifier of the installation.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Whether the installation was triggered by a cron job.
     * 
     */
    @Import(name="isCronTriggered")
    private @Nullable Output<Boolean> isCronTriggered;

    /**
     * @return Whether the installation was triggered by a cron job.
     * 
     */
    public Optional<Output<Boolean>> isCronTriggered() {
        return Optional.ofNullable(this.isCronTriggered);
    }

    /**
     * The timestamp when the log stream was created.
     * 
     */
    @Import(name="logStreamCreatedAt")
    private @Nullable Output<String> logStreamCreatedAt;

    /**
     * @return The timestamp when the log stream was created.
     * 
     */
    public Optional<Output<String>> logStreamCreatedAt() {
        return Optional.ofNullable(this.logStreamCreatedAt);
    }

    /**
     * The ID of the log stream for the installation.
     * 
     */
    @Import(name="logStreamId")
    private @Nullable Output<String> logStreamId;

    /**
     * @return The ID of the log stream for the installation.
     * 
     */
    public Optional<Output<String>> logStreamId() {
        return Optional.ofNullable(this.logStreamId);
    }

    /**
     * The organization identifier for the installation.
     * 
     */
    @Import(name="organizationIdentifier")
    private @Nullable Output<String> organizationIdentifier;

    /**
     * @return The organization identifier for the installation.
     * 
     */
    public Optional<Output<String>> organizationIdentifier() {
        return Optional.ofNullable(this.organizationIdentifier);
    }

    /**
     * The project identifier for the installation.
     * 
     */
    @Import(name="projectIdentifier")
    private @Nullable Output<String> projectIdentifier;

    /**
     * @return The project identifier for the installation.
     * 
     */
    public Optional<Output<String>> projectIdentifier() {
        return Optional.ofNullable(this.projectIdentifier);
    }

    /**
     * Whether the installation has been removed.
     * 
     */
    @Import(name="removed")
    private @Nullable Output<Boolean> removed;

    /**
     * @return Whether the installation has been removed.
     * 
     */
    public Optional<Output<Boolean>> removed() {
        return Optional.ofNullable(this.removed);
    }

    /**
     * Whether the installation has been stopped.
     * 
     */
    @Import(name="stopped")
    private @Nullable Output<Boolean> stopped;

    /**
     * @return Whether the installation has been stopped.
     * 
     */
    public Optional<Output<Boolean>> stopped() {
        return Optional.ofNullable(this.stopped);
    }

    /**
     * The timestamp when the installation was last updated.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return The timestamp when the installation was last updated.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * The user who last updated the installation.
     * 
     */
    @Import(name="updatedBy")
    private @Nullable Output<String> updatedBy;

    /**
     * @return The user who last updated the installation.
     * 
     */
    public Optional<Output<String>> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }

    private DiscoveryAgentInstallationDetailArgs() {}

    private DiscoveryAgentInstallationDetailArgs(DiscoveryAgentInstallationDetailArgs $) {
        this.accountIdentifier = $.accountIdentifier;
        this.agentDetails = $.agentDetails;
        this.agentId = $.agentId;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.delegateId = $.delegateId;
        this.delegateTaskId = $.delegateTaskId;
        this.delegateTaskStatus = $.delegateTaskStatus;
        this.environmentIdentifier = $.environmentIdentifier;
        this.id = $.id;
        this.isCronTriggered = $.isCronTriggered;
        this.logStreamCreatedAt = $.logStreamCreatedAt;
        this.logStreamId = $.logStreamId;
        this.organizationIdentifier = $.organizationIdentifier;
        this.projectIdentifier = $.projectIdentifier;
        this.removed = $.removed;
        this.stopped = $.stopped;
        this.updatedAt = $.updatedAt;
        this.updatedBy = $.updatedBy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiscoveryAgentInstallationDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiscoveryAgentInstallationDetailArgs $;

        public Builder() {
            $ = new DiscoveryAgentInstallationDetailArgs();
        }

        public Builder(DiscoveryAgentInstallationDetailArgs defaults) {
            $ = new DiscoveryAgentInstallationDetailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountIdentifier The account identifier for the installation.
         * 
         * @return builder
         * 
         */
        public Builder accountIdentifier(@Nullable Output<String> accountIdentifier) {
            $.accountIdentifier = accountIdentifier;
            return this;
        }

        /**
         * @param accountIdentifier The account identifier for the installation.
         * 
         * @return builder
         * 
         */
        public Builder accountIdentifier(String accountIdentifier) {
            return accountIdentifier(Output.of(accountIdentifier));
        }

        /**
         * @param agentDetails Details about the installed agent.
         * 
         * @return builder
         * 
         */
        public Builder agentDetails(@Nullable Output<List<DiscoveryAgentInstallationDetailAgentDetailArgs>> agentDetails) {
            $.agentDetails = agentDetails;
            return this;
        }

        /**
         * @param agentDetails Details about the installed agent.
         * 
         * @return builder
         * 
         */
        public Builder agentDetails(List<DiscoveryAgentInstallationDetailAgentDetailArgs> agentDetails) {
            return agentDetails(Output.of(agentDetails));
        }

        /**
         * @param agentDetails Details about the installed agent.
         * 
         * @return builder
         * 
         */
        public Builder agentDetails(DiscoveryAgentInstallationDetailAgentDetailArgs... agentDetails) {
            return agentDetails(List.of(agentDetails));
        }

        /**
         * @param agentId The ID of the installed agent.
         * 
         * @return builder
         * 
         */
        public Builder agentId(@Nullable Output<String> agentId) {
            $.agentId = agentId;
            return this;
        }

        /**
         * @param agentId The ID of the installed agent.
         * 
         * @return builder
         * 
         */
        public Builder agentId(String agentId) {
            return agentId(Output.of(agentId));
        }

        /**
         * @param createdAt The timestamp when the installation was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The timestamp when the installation was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param createdBy The user who created the installation.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy The user who created the installation.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param delegateId The ID of the delegate used for installation.
         * 
         * @return builder
         * 
         */
        public Builder delegateId(@Nullable Output<String> delegateId) {
            $.delegateId = delegateId;
            return this;
        }

        /**
         * @param delegateId The ID of the delegate used for installation.
         * 
         * @return builder
         * 
         */
        public Builder delegateId(String delegateId) {
            return delegateId(Output.of(delegateId));
        }

        /**
         * @param delegateTaskId The ID of the delegate task for the installation.
         * 
         * @return builder
         * 
         */
        public Builder delegateTaskId(@Nullable Output<String> delegateTaskId) {
            $.delegateTaskId = delegateTaskId;
            return this;
        }

        /**
         * @param delegateTaskId The ID of the delegate task for the installation.
         * 
         * @return builder
         * 
         */
        public Builder delegateTaskId(String delegateTaskId) {
            return delegateTaskId(Output.of(delegateTaskId));
        }

        /**
         * @param delegateTaskStatus The status of the delegate task (e.g., &#39;SUCCESS&#39;).
         * 
         * @return builder
         * 
         */
        public Builder delegateTaskStatus(@Nullable Output<String> delegateTaskStatus) {
            $.delegateTaskStatus = delegateTaskStatus;
            return this;
        }

        /**
         * @param delegateTaskStatus The status of the delegate task (e.g., &#39;SUCCESS&#39;).
         * 
         * @return builder
         * 
         */
        public Builder delegateTaskStatus(String delegateTaskStatus) {
            return delegateTaskStatus(Output.of(delegateTaskStatus));
        }

        /**
         * @param environmentIdentifier The environment identifier for the installation.
         * 
         * @return builder
         * 
         */
        public Builder environmentIdentifier(@Nullable Output<String> environmentIdentifier) {
            $.environmentIdentifier = environmentIdentifier;
            return this;
        }

        /**
         * @param environmentIdentifier The environment identifier for the installation.
         * 
         * @return builder
         * 
         */
        public Builder environmentIdentifier(String environmentIdentifier) {
            return environmentIdentifier(Output.of(environmentIdentifier));
        }

        /**
         * @param id The unique identifier of the installation.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique identifier of the installation.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param isCronTriggered Whether the installation was triggered by a cron job.
         * 
         * @return builder
         * 
         */
        public Builder isCronTriggered(@Nullable Output<Boolean> isCronTriggered) {
            $.isCronTriggered = isCronTriggered;
            return this;
        }

        /**
         * @param isCronTriggered Whether the installation was triggered by a cron job.
         * 
         * @return builder
         * 
         */
        public Builder isCronTriggered(Boolean isCronTriggered) {
            return isCronTriggered(Output.of(isCronTriggered));
        }

        /**
         * @param logStreamCreatedAt The timestamp when the log stream was created.
         * 
         * @return builder
         * 
         */
        public Builder logStreamCreatedAt(@Nullable Output<String> logStreamCreatedAt) {
            $.logStreamCreatedAt = logStreamCreatedAt;
            return this;
        }

        /**
         * @param logStreamCreatedAt The timestamp when the log stream was created.
         * 
         * @return builder
         * 
         */
        public Builder logStreamCreatedAt(String logStreamCreatedAt) {
            return logStreamCreatedAt(Output.of(logStreamCreatedAt));
        }

        /**
         * @param logStreamId The ID of the log stream for the installation.
         * 
         * @return builder
         * 
         */
        public Builder logStreamId(@Nullable Output<String> logStreamId) {
            $.logStreamId = logStreamId;
            return this;
        }

        /**
         * @param logStreamId The ID of the log stream for the installation.
         * 
         * @return builder
         * 
         */
        public Builder logStreamId(String logStreamId) {
            return logStreamId(Output.of(logStreamId));
        }

        /**
         * @param organizationIdentifier The organization identifier for the installation.
         * 
         * @return builder
         * 
         */
        public Builder organizationIdentifier(@Nullable Output<String> organizationIdentifier) {
            $.organizationIdentifier = organizationIdentifier;
            return this;
        }

        /**
         * @param organizationIdentifier The organization identifier for the installation.
         * 
         * @return builder
         * 
         */
        public Builder organizationIdentifier(String organizationIdentifier) {
            return organizationIdentifier(Output.of(organizationIdentifier));
        }

        /**
         * @param projectIdentifier The project identifier for the installation.
         * 
         * @return builder
         * 
         */
        public Builder projectIdentifier(@Nullable Output<String> projectIdentifier) {
            $.projectIdentifier = projectIdentifier;
            return this;
        }

        /**
         * @param projectIdentifier The project identifier for the installation.
         * 
         * @return builder
         * 
         */
        public Builder projectIdentifier(String projectIdentifier) {
            return projectIdentifier(Output.of(projectIdentifier));
        }

        /**
         * @param removed Whether the installation has been removed.
         * 
         * @return builder
         * 
         */
        public Builder removed(@Nullable Output<Boolean> removed) {
            $.removed = removed;
            return this;
        }

        /**
         * @param removed Whether the installation has been removed.
         * 
         * @return builder
         * 
         */
        public Builder removed(Boolean removed) {
            return removed(Output.of(removed));
        }

        /**
         * @param stopped Whether the installation has been stopped.
         * 
         * @return builder
         * 
         */
        public Builder stopped(@Nullable Output<Boolean> stopped) {
            $.stopped = stopped;
            return this;
        }

        /**
         * @param stopped Whether the installation has been stopped.
         * 
         * @return builder
         * 
         */
        public Builder stopped(Boolean stopped) {
            return stopped(Output.of(stopped));
        }

        /**
         * @param updatedAt The timestamp when the installation was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt The timestamp when the installation was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param updatedBy The user who last updated the installation.
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(@Nullable Output<String> updatedBy) {
            $.updatedBy = updatedBy;
            return this;
        }

        /**
         * @param updatedBy The user who last updated the installation.
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(String updatedBy) {
            return updatedBy(Output.of(updatedBy));
        }

        public DiscoveryAgentInstallationDetailArgs build() {
            return $;
        }
    }

}
