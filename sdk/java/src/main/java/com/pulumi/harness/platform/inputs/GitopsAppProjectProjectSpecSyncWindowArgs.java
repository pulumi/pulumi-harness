// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsAppProjectProjectSpecSyncWindowArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsAppProjectProjectSpecSyncWindowArgs Empty = new GitopsAppProjectProjectSpecSyncWindowArgs();

    /**
     * Applications associated with synchronization window.
     * 
     */
    @Import(name="applications")
    private @Nullable Output<List<String>> applications;

    /**
     * @return Applications associated with synchronization window.
     * 
     */
    public Optional<Output<List<String>>> applications() {
        return Optional.ofNullable(this.applications);
    }

    /**
     * Clusters associated with synchronization window.
     * 
     */
    @Import(name="clusters")
    private @Nullable Output<List<String>> clusters;

    /**
     * @return Clusters associated with synchronization window.
     * 
     */
    public Optional<Output<List<String>>> clusters() {
        return Optional.ofNullable(this.clusters);
    }

    /**
     * Duration of synchronization window.
     * 
     */
    @Import(name="duration")
    private @Nullable Output<String> duration;

    /**
     * @return Duration of synchronization window.
     * 
     */
    public Optional<Output<String>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * Kind of synchronization window.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return Kind of synchronization window.
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Whether manual synchronization is enabled.
     * 
     */
    @Import(name="manualSync")
    private @Nullable Output<Boolean> manualSync;

    /**
     * @return Whether manual synchronization is enabled.
     * 
     */
    public Optional<Output<Boolean>> manualSync() {
        return Optional.ofNullable(this.manualSync);
    }

    /**
     * Namespaces associated with synchronization window.
     * 
     */
    @Import(name="namespaces")
    private @Nullable Output<List<String>> namespaces;

    /**
     * @return Namespaces associated with synchronization window.
     * 
     */
    public Optional<Output<List<String>>> namespaces() {
        return Optional.ofNullable(this.namespaces);
    }

    /**
     * Schedule of synchronization window.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<String> schedule;

    /**
     * @return Schedule of synchronization window.
     * 
     */
    public Optional<Output<String>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * Time zone of synchronization window.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return Time zone of synchronization window.
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    private GitopsAppProjectProjectSpecSyncWindowArgs() {}

    private GitopsAppProjectProjectSpecSyncWindowArgs(GitopsAppProjectProjectSpecSyncWindowArgs $) {
        this.applications = $.applications;
        this.clusters = $.clusters;
        this.duration = $.duration;
        this.kind = $.kind;
        this.manualSync = $.manualSync;
        this.namespaces = $.namespaces;
        this.schedule = $.schedule;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsAppProjectProjectSpecSyncWindowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsAppProjectProjectSpecSyncWindowArgs $;

        public Builder() {
            $ = new GitopsAppProjectProjectSpecSyncWindowArgs();
        }

        public Builder(GitopsAppProjectProjectSpecSyncWindowArgs defaults) {
            $ = new GitopsAppProjectProjectSpecSyncWindowArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applications Applications associated with synchronization window.
         * 
         * @return builder
         * 
         */
        public Builder applications(@Nullable Output<List<String>> applications) {
            $.applications = applications;
            return this;
        }

        /**
         * @param applications Applications associated with synchronization window.
         * 
         * @return builder
         * 
         */
        public Builder applications(List<String> applications) {
            return applications(Output.of(applications));
        }

        /**
         * @param applications Applications associated with synchronization window.
         * 
         * @return builder
         * 
         */
        public Builder applications(String... applications) {
            return applications(List.of(applications));
        }

        /**
         * @param clusters Clusters associated with synchronization window.
         * 
         * @return builder
         * 
         */
        public Builder clusters(@Nullable Output<List<String>> clusters) {
            $.clusters = clusters;
            return this;
        }

        /**
         * @param clusters Clusters associated with synchronization window.
         * 
         * @return builder
         * 
         */
        public Builder clusters(List<String> clusters) {
            return clusters(Output.of(clusters));
        }

        /**
         * @param clusters Clusters associated with synchronization window.
         * 
         * @return builder
         * 
         */
        public Builder clusters(String... clusters) {
            return clusters(List.of(clusters));
        }

        /**
         * @param duration Duration of synchronization window.
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<String> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration Duration of synchronization window.
         * 
         * @return builder
         * 
         */
        public Builder duration(String duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param kind Kind of synchronization window.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind Kind of synchronization window.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param manualSync Whether manual synchronization is enabled.
         * 
         * @return builder
         * 
         */
        public Builder manualSync(@Nullable Output<Boolean> manualSync) {
            $.manualSync = manualSync;
            return this;
        }

        /**
         * @param manualSync Whether manual synchronization is enabled.
         * 
         * @return builder
         * 
         */
        public Builder manualSync(Boolean manualSync) {
            return manualSync(Output.of(manualSync));
        }

        /**
         * @param namespaces Namespaces associated with synchronization window.
         * 
         * @return builder
         * 
         */
        public Builder namespaces(@Nullable Output<List<String>> namespaces) {
            $.namespaces = namespaces;
            return this;
        }

        /**
         * @param namespaces Namespaces associated with synchronization window.
         * 
         * @return builder
         * 
         */
        public Builder namespaces(List<String> namespaces) {
            return namespaces(Output.of(namespaces));
        }

        /**
         * @param namespaces Namespaces associated with synchronization window.
         * 
         * @return builder
         * 
         */
        public Builder namespaces(String... namespaces) {
            return namespaces(List.of(namespaces));
        }

        /**
         * @param schedule Schedule of synchronization window.
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<String> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule Schedule of synchronization window.
         * 
         * @return builder
         * 
         */
        public Builder schedule(String schedule) {
            return schedule(Output.of(schedule));
        }

        /**
         * @param timeZone Time zone of synchronization window.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone Time zone of synchronization window.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public GitopsAppProjectProjectSpecSyncWindowArgs build() {
            return $;
        }
    }

}
