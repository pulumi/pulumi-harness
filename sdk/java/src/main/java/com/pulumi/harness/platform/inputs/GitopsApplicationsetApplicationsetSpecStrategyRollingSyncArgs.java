// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecStrategyRollingSyncStepArgs;
import java.util.List;
import java.util.Objects;


public final class GitopsApplicationsetApplicationsetSpecStrategyRollingSyncArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsApplicationsetApplicationsetSpecStrategyRollingSyncArgs Empty = new GitopsApplicationsetApplicationsetSpecStrategyRollingSyncArgs();

    /**
     * Configuration used to define which applications to include in each stage of the rolling sync. All Applications in each group must become Healthy before the ApplicationSet controller will proceed to update the next group of Applications.
     * 
     */
    @Import(name="steps", required=true)
    private Output<List<GitopsApplicationsetApplicationsetSpecStrategyRollingSyncStepArgs>> steps;

    /**
     * @return Configuration used to define which applications to include in each stage of the rolling sync. All Applications in each group must become Healthy before the ApplicationSet controller will proceed to update the next group of Applications.
     * 
     */
    public Output<List<GitopsApplicationsetApplicationsetSpecStrategyRollingSyncStepArgs>> steps() {
        return this.steps;
    }

    private GitopsApplicationsetApplicationsetSpecStrategyRollingSyncArgs() {}

    private GitopsApplicationsetApplicationsetSpecStrategyRollingSyncArgs(GitopsApplicationsetApplicationsetSpecStrategyRollingSyncArgs $) {
        this.steps = $.steps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsApplicationsetApplicationsetSpecStrategyRollingSyncArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsApplicationsetApplicationsetSpecStrategyRollingSyncArgs $;

        public Builder() {
            $ = new GitopsApplicationsetApplicationsetSpecStrategyRollingSyncArgs();
        }

        public Builder(GitopsApplicationsetApplicationsetSpecStrategyRollingSyncArgs defaults) {
            $ = new GitopsApplicationsetApplicationsetSpecStrategyRollingSyncArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param steps Configuration used to define which applications to include in each stage of the rolling sync. All Applications in each group must become Healthy before the ApplicationSet controller will proceed to update the next group of Applications.
         * 
         * @return builder
         * 
         */
        public Builder steps(Output<List<GitopsApplicationsetApplicationsetSpecStrategyRollingSyncStepArgs>> steps) {
            $.steps = steps;
            return this;
        }

        /**
         * @param steps Configuration used to define which applications to include in each stage of the rolling sync. All Applications in each group must become Healthy before the ApplicationSet controller will proceed to update the next group of Applications.
         * 
         * @return builder
         * 
         */
        public Builder steps(List<GitopsApplicationsetApplicationsetSpecStrategyRollingSyncStepArgs> steps) {
            return steps(Output.of(steps));
        }

        /**
         * @param steps Configuration used to define which applications to include in each stage of the rolling sync. All Applications in each group must become Healthy before the ApplicationSet controller will proceed to update the next group of Applications.
         * 
         * @return builder
         * 
         */
        public Builder steps(GitopsApplicationsetApplicationsetSpecStrategyRollingSyncStepArgs... steps) {
            return steps(List.of(steps));
        }

        public GitopsApplicationsetApplicationsetSpecStrategyRollingSyncArgs build() {
            if ($.steps == null) {
                throw new MissingRequiredPropertyException("GitopsApplicationsetApplicationsetSpecStrategyRollingSyncArgs", "steps");
            }
            return $;
        }
    }

}
