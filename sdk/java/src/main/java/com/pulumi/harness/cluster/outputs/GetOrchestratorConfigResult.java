// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cluster.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.cluster.outputs.GetOrchestratorConfigBinpacking;
import com.pulumi.harness.cluster.outputs.GetOrchestratorConfigCommitmentIntegration;
import com.pulumi.harness.cluster.outputs.GetOrchestratorConfigDistribution;
import com.pulumi.harness.cluster.outputs.GetOrchestratorConfigNodePreferences;
import com.pulumi.harness.cluster.outputs.GetOrchestratorConfigReplacementSchedule;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetOrchestratorConfigResult {
    /**
     * @return Binpacking preferences for Cluster Orchestrator
     * 
     */
    private @Nullable GetOrchestratorConfigBinpacking binpacking;
    /**
     * @return Commitment integration configuration for Cluster Orchestrator
     * 
     */
    private @Nullable GetOrchestratorConfigCommitmentIntegration commitmentIntegration;
    /**
     * @return Spot and Ondemand Distribution Preferences for workload replicas
     * 
     */
    private @Nullable GetOrchestratorConfigDistribution distribution;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Node preferences for Cluster Orchestrator
     * 
     */
    private @Nullable GetOrchestratorConfigNodePreferences nodePreferences;
    /**
     * @return ID of the Cluster Orchestrator Object
     * 
     */
    private String orchestratorId;
    /**
     * @return Replacement schedule for Cluster Orchestrator
     * 
     */
    private @Nullable GetOrchestratorConfigReplacementSchedule replacementSchedule;

    private GetOrchestratorConfigResult() {}
    /**
     * @return Binpacking preferences for Cluster Orchestrator
     * 
     */
    public Optional<GetOrchestratorConfigBinpacking> binpacking() {
        return Optional.ofNullable(this.binpacking);
    }
    /**
     * @return Commitment integration configuration for Cluster Orchestrator
     * 
     */
    public Optional<GetOrchestratorConfigCommitmentIntegration> commitmentIntegration() {
        return Optional.ofNullable(this.commitmentIntegration);
    }
    /**
     * @return Spot and Ondemand Distribution Preferences for workload replicas
     * 
     */
    public Optional<GetOrchestratorConfigDistribution> distribution() {
        return Optional.ofNullable(this.distribution);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Node preferences for Cluster Orchestrator
     * 
     */
    public Optional<GetOrchestratorConfigNodePreferences> nodePreferences() {
        return Optional.ofNullable(this.nodePreferences);
    }
    /**
     * @return ID of the Cluster Orchestrator Object
     * 
     */
    public String orchestratorId() {
        return this.orchestratorId;
    }
    /**
     * @return Replacement schedule for Cluster Orchestrator
     * 
     */
    public Optional<GetOrchestratorConfigReplacementSchedule> replacementSchedule() {
        return Optional.ofNullable(this.replacementSchedule);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOrchestratorConfigResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable GetOrchestratorConfigBinpacking binpacking;
        private @Nullable GetOrchestratorConfigCommitmentIntegration commitmentIntegration;
        private @Nullable GetOrchestratorConfigDistribution distribution;
        private String id;
        private @Nullable GetOrchestratorConfigNodePreferences nodePreferences;
        private String orchestratorId;
        private @Nullable GetOrchestratorConfigReplacementSchedule replacementSchedule;
        public Builder() {}
        public Builder(GetOrchestratorConfigResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.binpacking = defaults.binpacking;
    	      this.commitmentIntegration = defaults.commitmentIntegration;
    	      this.distribution = defaults.distribution;
    	      this.id = defaults.id;
    	      this.nodePreferences = defaults.nodePreferences;
    	      this.orchestratorId = defaults.orchestratorId;
    	      this.replacementSchedule = defaults.replacementSchedule;
        }

        @CustomType.Setter
        public Builder binpacking(@Nullable GetOrchestratorConfigBinpacking binpacking) {

            this.binpacking = binpacking;
            return this;
        }
        @CustomType.Setter
        public Builder commitmentIntegration(@Nullable GetOrchestratorConfigCommitmentIntegration commitmentIntegration) {

            this.commitmentIntegration = commitmentIntegration;
            return this;
        }
        @CustomType.Setter
        public Builder distribution(@Nullable GetOrchestratorConfigDistribution distribution) {

            this.distribution = distribution;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetOrchestratorConfigResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder nodePreferences(@Nullable GetOrchestratorConfigNodePreferences nodePreferences) {

            this.nodePreferences = nodePreferences;
            return this;
        }
        @CustomType.Setter
        public Builder orchestratorId(String orchestratorId) {
            if (orchestratorId == null) {
              throw new MissingRequiredPropertyException("GetOrchestratorConfigResult", "orchestratorId");
            }
            this.orchestratorId = orchestratorId;
            return this;
        }
        @CustomType.Setter
        public Builder replacementSchedule(@Nullable GetOrchestratorConfigReplacementSchedule replacementSchedule) {

            this.replacementSchedule = replacementSchedule;
            return this;
        }
        public GetOrchestratorConfigResult build() {
            final var _resultValue = new GetOrchestratorConfigResult();
            _resultValue.binpacking = binpacking;
            _resultValue.commitmentIntegration = commitmentIntegration;
            _resultValue.distribution = distribution;
            _resultValue.id = id;
            _resultValue.nodePreferences = nodePreferences;
            _resultValue.orchestratorId = orchestratorId;
            _resultValue.replacementSchedule = replacementSchedule;
            return _resultValue;
        }
    }
}
