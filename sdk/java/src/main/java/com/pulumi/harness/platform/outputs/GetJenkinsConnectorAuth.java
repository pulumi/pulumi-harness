// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GetJenkinsConnectorAuthJenkinsBearerToken;
import com.pulumi.harness.platform.outputs.GetJenkinsConnectorAuthJenkinsUserNamePassword;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetJenkinsConnectorAuth {
    /**
     * @return Authenticate to App Dynamics using bearer token.
     * 
     */
    private List<GetJenkinsConnectorAuthJenkinsBearerToken> jenkinsBearerTokens;
    /**
     * @return Authenticate to App Dynamics using user name and password.
     * 
     */
    private List<GetJenkinsConnectorAuthJenkinsUserNamePassword> jenkinsUserNamePasswords;
    /**
     * @return Can be one of UsernamePassword, Anonymous, BearerToken
     * 
     */
    private String type;

    private GetJenkinsConnectorAuth() {}
    /**
     * @return Authenticate to App Dynamics using bearer token.
     * 
     */
    public List<GetJenkinsConnectorAuthJenkinsBearerToken> jenkinsBearerTokens() {
        return this.jenkinsBearerTokens;
    }
    /**
     * @return Authenticate to App Dynamics using user name and password.
     * 
     */
    public List<GetJenkinsConnectorAuthJenkinsUserNamePassword> jenkinsUserNamePasswords() {
        return this.jenkinsUserNamePasswords;
    }
    /**
     * @return Can be one of UsernamePassword, Anonymous, BearerToken
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetJenkinsConnectorAuth defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetJenkinsConnectorAuthJenkinsBearerToken> jenkinsBearerTokens;
        private List<GetJenkinsConnectorAuthJenkinsUserNamePassword> jenkinsUserNamePasswords;
        private String type;
        public Builder() {}
        public Builder(GetJenkinsConnectorAuth defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.jenkinsBearerTokens = defaults.jenkinsBearerTokens;
    	      this.jenkinsUserNamePasswords = defaults.jenkinsUserNamePasswords;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder jenkinsBearerTokens(List<GetJenkinsConnectorAuthJenkinsBearerToken> jenkinsBearerTokens) {
            if (jenkinsBearerTokens == null) {
              throw new MissingRequiredPropertyException("GetJenkinsConnectorAuth", "jenkinsBearerTokens");
            }
            this.jenkinsBearerTokens = jenkinsBearerTokens;
            return this;
        }
        public Builder jenkinsBearerTokens(GetJenkinsConnectorAuthJenkinsBearerToken... jenkinsBearerTokens) {
            return jenkinsBearerTokens(List.of(jenkinsBearerTokens));
        }
        @CustomType.Setter
        public Builder jenkinsUserNamePasswords(List<GetJenkinsConnectorAuthJenkinsUserNamePassword> jenkinsUserNamePasswords) {
            if (jenkinsUserNamePasswords == null) {
              throw new MissingRequiredPropertyException("GetJenkinsConnectorAuth", "jenkinsUserNamePasswords");
            }
            this.jenkinsUserNamePasswords = jenkinsUserNamePasswords;
            return this;
        }
        public Builder jenkinsUserNamePasswords(GetJenkinsConnectorAuthJenkinsUserNamePassword... jenkinsUserNamePasswords) {
            return jenkinsUserNamePasswords(List.of(jenkinsUserNamePasswords));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetJenkinsConnectorAuth", "type");
            }
            this.type = type;
            return this;
        }
        public GetJenkinsConnectorAuth build() {
            final var _resultValue = new GetJenkinsConnectorAuth();
            _resultValue.jenkinsBearerTokens = jenkinsBearerTokens;
            _resultValue.jenkinsUserNamePasswords = jenkinsUserNamePasswords;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
