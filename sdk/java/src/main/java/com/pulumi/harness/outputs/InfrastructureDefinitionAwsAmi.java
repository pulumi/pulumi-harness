// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InfrastructureDefinitionAwsAmi {
    /**
     * @return The ami deployment type to use. Valid options are AWS_ASG, SPOTINST
     * 
     */
    private String amiDeploymentType;
    /**
     * @return Flag to indicate whether the autoscaling group identifies the workload.
     * 
     */
    private @Nullable Boolean asgIdentifiesWorkload;
    /**
     * @return The name of the autoscaling group.
     * 
     */
    private @Nullable String autoscalingGroupName;
    /**
     * @return The classic load balancers to use.
     * 
     */
    private @Nullable List<String> classicLoadbalancers;
    /**
     * @return The name of the cloud provider to connect with.
     * 
     */
    private String cloudProviderName;
    /**
     * @return The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split(&#39;.&#39;)[0]}
     * 
     */
    private @Nullable String hostnameConvention;
    /**
     * @return The region to deploy to.
     * 
     */
    private String region;
    /**
     * @return The name of the SpotInst cloud provider to connect with.
     * 
     */
    private @Nullable String spotinstCloudProviderName;
    /**
     * @return The SpotInst configuration to use.
     * 
     */
    private @Nullable String spotinstConfigJson;
    /**
     * @return The staging classic load balancers to use.
     * 
     */
    private @Nullable List<String> stageClassicLoadbalancers;
    /**
     * @return The staging classic load balancers to use.
     * 
     */
    private @Nullable List<String> stageTargetGroupArns;
    /**
     * @return The ARN&#39;s of the target groups.
     * 
     */
    private @Nullable List<String> targetGroupArns;
    /**
     * @return Flag to enable traffic shifting.
     * 
     */
    private @Nullable Boolean useTrafficShift;

    private InfrastructureDefinitionAwsAmi() {}
    /**
     * @return The ami deployment type to use. Valid options are AWS_ASG, SPOTINST
     * 
     */
    public String amiDeploymentType() {
        return this.amiDeploymentType;
    }
    /**
     * @return Flag to indicate whether the autoscaling group identifies the workload.
     * 
     */
    public Optional<Boolean> asgIdentifiesWorkload() {
        return Optional.ofNullable(this.asgIdentifiesWorkload);
    }
    /**
     * @return The name of the autoscaling group.
     * 
     */
    public Optional<String> autoscalingGroupName() {
        return Optional.ofNullable(this.autoscalingGroupName);
    }
    /**
     * @return The classic load balancers to use.
     * 
     */
    public List<String> classicLoadbalancers() {
        return this.classicLoadbalancers == null ? List.of() : this.classicLoadbalancers;
    }
    /**
     * @return The name of the cloud provider to connect with.
     * 
     */
    public String cloudProviderName() {
        return this.cloudProviderName;
    }
    /**
     * @return The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split(&#39;.&#39;)[0]}
     * 
     */
    public Optional<String> hostnameConvention() {
        return Optional.ofNullable(this.hostnameConvention);
    }
    /**
     * @return The region to deploy to.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return The name of the SpotInst cloud provider to connect with.
     * 
     */
    public Optional<String> spotinstCloudProviderName() {
        return Optional.ofNullable(this.spotinstCloudProviderName);
    }
    /**
     * @return The SpotInst configuration to use.
     * 
     */
    public Optional<String> spotinstConfigJson() {
        return Optional.ofNullable(this.spotinstConfigJson);
    }
    /**
     * @return The staging classic load balancers to use.
     * 
     */
    public List<String> stageClassicLoadbalancers() {
        return this.stageClassicLoadbalancers == null ? List.of() : this.stageClassicLoadbalancers;
    }
    /**
     * @return The staging classic load balancers to use.
     * 
     */
    public List<String> stageTargetGroupArns() {
        return this.stageTargetGroupArns == null ? List.of() : this.stageTargetGroupArns;
    }
    /**
     * @return The ARN&#39;s of the target groups.
     * 
     */
    public List<String> targetGroupArns() {
        return this.targetGroupArns == null ? List.of() : this.targetGroupArns;
    }
    /**
     * @return Flag to enable traffic shifting.
     * 
     */
    public Optional<Boolean> useTrafficShift() {
        return Optional.ofNullable(this.useTrafficShift);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InfrastructureDefinitionAwsAmi defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String amiDeploymentType;
        private @Nullable Boolean asgIdentifiesWorkload;
        private @Nullable String autoscalingGroupName;
        private @Nullable List<String> classicLoadbalancers;
        private String cloudProviderName;
        private @Nullable String hostnameConvention;
        private String region;
        private @Nullable String spotinstCloudProviderName;
        private @Nullable String spotinstConfigJson;
        private @Nullable List<String> stageClassicLoadbalancers;
        private @Nullable List<String> stageTargetGroupArns;
        private @Nullable List<String> targetGroupArns;
        private @Nullable Boolean useTrafficShift;
        public Builder() {}
        public Builder(InfrastructureDefinitionAwsAmi defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.amiDeploymentType = defaults.amiDeploymentType;
    	      this.asgIdentifiesWorkload = defaults.asgIdentifiesWorkload;
    	      this.autoscalingGroupName = defaults.autoscalingGroupName;
    	      this.classicLoadbalancers = defaults.classicLoadbalancers;
    	      this.cloudProviderName = defaults.cloudProviderName;
    	      this.hostnameConvention = defaults.hostnameConvention;
    	      this.region = defaults.region;
    	      this.spotinstCloudProviderName = defaults.spotinstCloudProviderName;
    	      this.spotinstConfigJson = defaults.spotinstConfigJson;
    	      this.stageClassicLoadbalancers = defaults.stageClassicLoadbalancers;
    	      this.stageTargetGroupArns = defaults.stageTargetGroupArns;
    	      this.targetGroupArns = defaults.targetGroupArns;
    	      this.useTrafficShift = defaults.useTrafficShift;
        }

        @CustomType.Setter
        public Builder amiDeploymentType(String amiDeploymentType) {
            if (amiDeploymentType == null) {
              throw new MissingRequiredPropertyException("InfrastructureDefinitionAwsAmi", "amiDeploymentType");
            }
            this.amiDeploymentType = amiDeploymentType;
            return this;
        }
        @CustomType.Setter
        public Builder asgIdentifiesWorkload(@Nullable Boolean asgIdentifiesWorkload) {

            this.asgIdentifiesWorkload = asgIdentifiesWorkload;
            return this;
        }
        @CustomType.Setter
        public Builder autoscalingGroupName(@Nullable String autoscalingGroupName) {

            this.autoscalingGroupName = autoscalingGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder classicLoadbalancers(@Nullable List<String> classicLoadbalancers) {

            this.classicLoadbalancers = classicLoadbalancers;
            return this;
        }
        public Builder classicLoadbalancers(String... classicLoadbalancers) {
            return classicLoadbalancers(List.of(classicLoadbalancers));
        }
        @CustomType.Setter
        public Builder cloudProviderName(String cloudProviderName) {
            if (cloudProviderName == null) {
              throw new MissingRequiredPropertyException("InfrastructureDefinitionAwsAmi", "cloudProviderName");
            }
            this.cloudProviderName = cloudProviderName;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameConvention(@Nullable String hostnameConvention) {

            this.hostnameConvention = hostnameConvention;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("InfrastructureDefinitionAwsAmi", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder spotinstCloudProviderName(@Nullable String spotinstCloudProviderName) {

            this.spotinstCloudProviderName = spotinstCloudProviderName;
            return this;
        }
        @CustomType.Setter
        public Builder spotinstConfigJson(@Nullable String spotinstConfigJson) {

            this.spotinstConfigJson = spotinstConfigJson;
            return this;
        }
        @CustomType.Setter
        public Builder stageClassicLoadbalancers(@Nullable List<String> stageClassicLoadbalancers) {

            this.stageClassicLoadbalancers = stageClassicLoadbalancers;
            return this;
        }
        public Builder stageClassicLoadbalancers(String... stageClassicLoadbalancers) {
            return stageClassicLoadbalancers(List.of(stageClassicLoadbalancers));
        }
        @CustomType.Setter
        public Builder stageTargetGroupArns(@Nullable List<String> stageTargetGroupArns) {

            this.stageTargetGroupArns = stageTargetGroupArns;
            return this;
        }
        public Builder stageTargetGroupArns(String... stageTargetGroupArns) {
            return stageTargetGroupArns(List.of(stageTargetGroupArns));
        }
        @CustomType.Setter
        public Builder targetGroupArns(@Nullable List<String> targetGroupArns) {

            this.targetGroupArns = targetGroupArns;
            return this;
        }
        public Builder targetGroupArns(String... targetGroupArns) {
            return targetGroupArns(List.of(targetGroupArns));
        }
        @CustomType.Setter
        public Builder useTrafficShift(@Nullable Boolean useTrafficShift) {

            this.useTrafficShift = useTrafficShift;
            return this;
        }
        public InfrastructureDefinitionAwsAmi build() {
            final var _resultValue = new InfrastructureDefinitionAwsAmi();
            _resultValue.amiDeploymentType = amiDeploymentType;
            _resultValue.asgIdentifiesWorkload = asgIdentifiesWorkload;
            _resultValue.autoscalingGroupName = autoscalingGroupName;
            _resultValue.classicLoadbalancers = classicLoadbalancers;
            _resultValue.cloudProviderName = cloudProviderName;
            _resultValue.hostnameConvention = hostnameConvention;
            _resultValue.region = region;
            _resultValue.spotinstCloudProviderName = spotinstCloudProviderName;
            _resultValue.spotinstConfigJson = spotinstConfigJson;
            _resultValue.stageClassicLoadbalancers = stageClassicLoadbalancers;
            _resultValue.stageTargetGroupArns = stageTargetGroupArns;
            _resultValue.targetGroupArns = targetGroupArns;
            _resultValue.useTrafficShift = useTrafficShift;
            return _resultValue;
        }
    }
}
