// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.GitConnectorArgs;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.inputs.GitConnectorState;
import com.pulumi.harness.outputs.GitConnectorCommitDetails;
import com.pulumi.harness.outputs.GitConnectorUsageScope;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for creating a git connector
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.HarnessFunctions;
 * import com.pulumi.harness.inputs.GetSecretManagerArgs;
 * import com.pulumi.harness.EncryptedText;
 * import com.pulumi.harness.EncryptedTextArgs;
 * import com.pulumi.harness.GitConnector;
 * import com.pulumi.harness.GitConnectorArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()
 *             .default_(true)
 *             .build());
 * 
 *         var example = new EncryptedText("example", EncryptedTextArgs.builder()
 *             .name("example-secret")
 *             .value("foo")
 *             .secretManagerId(default_.id())
 *             .build());
 * 
 *         var exampleGitConnector = new GitConnector("exampleGitConnector", GitConnectorArgs.builder()
 *             .name("example")
 *             .url("https://github.com/harness/terraform-provider-harness")
 *             .branch("master")
 *             .generateWebhookUrl(true)
 *             .passwordSecretId(example.id())
 *             .urlType("REPO")
 *             .username("someuser")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * The `pulumi import` command can be used, for example:
 * 
 * Import using the Harness git connector id
 * 
 * ```sh
 * $ pulumi import harness:index/gitConnector:GitConnector example &lt;connector_id&gt;
 * ```
 * 
 */
@ResourceType(type="harness:index/gitConnector:GitConnector")
public class GitConnector extends com.pulumi.resources.CustomResource {
    /**
     * The branch of the git connector to use
     * 
     */
    @Export(name="branch", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> branch;

    /**
     * @return The branch of the git connector to use
     * 
     */
    public Output<Optional<String>> branch() {
        return Codegen.optional(this.branch);
    }
    /**
     * Custom details to use when making commits using this git connector
     * 
     */
    @Export(name="commitDetails", refs={GitConnectorCommitDetails.class}, tree="[0]")
    private Output</* @Nullable */ GitConnectorCommitDetails> commitDetails;

    /**
     * @return Custom details to use when making commits using this git connector
     * 
     */
    public Output<Optional<GitConnectorCommitDetails>> commitDetails() {
        return Codegen.optional(this.commitDetails);
    }
    /**
     * The time the git connector was created
     * 
     */
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    /**
     * @return The time the git connector was created
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * Delegate selectors to apply to this git connector.
     * 
     */
    @Export(name="delegateSelectors", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> delegateSelectors;

    /**
     * @return Delegate selectors to apply to this git connector.
     * 
     */
    public Output<Optional<List<String>>> delegateSelectors() {
        return Codegen.optional(this.delegateSelectors);
    }
    /**
     * Boolean indicating whether or not to generate a webhook url.
     * 
     */
    @Export(name="generateWebhookUrl", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> generateWebhookUrl;

    /**
     * @return Boolean indicating whether or not to generate a webhook url.
     * 
     */
    public Output<Optional<Boolean>> generateWebhookUrl() {
        return Codegen.optional(this.generateWebhookUrl);
    }
    /**
     * Name of the git connector.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the git connector.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The id of the secret for connecting to the git repository.
     * 
     */
    @Export(name="passwordSecretId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> passwordSecretId;

    /**
     * @return The id of the secret for connecting to the git repository.
     * 
     */
    public Output<Optional<String>> passwordSecretId() {
        return Codegen.optional(this.passwordSecretId);
    }
    /**
     * The id of the SSH secret to use
     * 
     */
    @Export(name="sshSettingId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sshSettingId;

    /**
     * @return The id of the SSH secret to use
     * 
     */
    public Output<Optional<String>> sshSettingId() {
        return Codegen.optional(this.sshSettingId);
    }
    /**
     * The URL of the git repository or account/organization
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return The URL of the git repository or account/organization
     * 
     */
    public Output<String> url() {
        return this.url;
    }
    /**
     * The type of git url being used. Options are `ACCOUNT`, and `REPO.`
     * 
     */
    @Export(name="urlType", refs={String.class}, tree="[0]")
    private Output<String> urlType;

    /**
     * @return The type of git url being used. Options are `ACCOUNT`, and `REPO.`
     * 
     */
    public Output<String> urlType() {
        return this.urlType;
    }
    /**
     * This block is used for scoping the resource to a specific set of applications or environments.
     * 
     */
    @Export(name="usageScopes", refs={List.class,GitConnectorUsageScope.class}, tree="[0,1]")
    private Output</* @Nullable */ List<GitConnectorUsageScope>> usageScopes;

    /**
     * @return This block is used for scoping the resource to a specific set of applications or environments.
     * 
     */
    public Output<Optional<List<GitConnectorUsageScope>>> usageScopes() {
        return Codegen.optional(this.usageScopes);
    }
    /**
     * The name of the user used to connect to the git repository
     * 
     */
    @Export(name="username", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> username;

    /**
     * @return The name of the user used to connect to the git repository
     * 
     */
    public Output<Optional<String>> username() {
        return Codegen.optional(this.username);
    }
    /**
     * The generated webhook url
     * 
     */
    @Export(name="webhookUrl", refs={String.class}, tree="[0]")
    private Output<String> webhookUrl;

    /**
     * @return The generated webhook url
     * 
     */
    public Output<String> webhookUrl() {
        return this.webhookUrl;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GitConnector(java.lang.String name) {
        this(name, GitConnectorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GitConnector(java.lang.String name, GitConnectorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GitConnector(java.lang.String name, GitConnectorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:index/gitConnector:GitConnector", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private GitConnector(java.lang.String name, Output<java.lang.String> id, @Nullable GitConnectorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:index/gitConnector:GitConnector", name, state, makeResourceOptions(options, id), false);
    }

    private static GitConnectorArgs makeArgs(GitConnectorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? GitConnectorArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GitConnector get(java.lang.String name, Output<java.lang.String> id, @Nullable GitConnectorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GitConnector(name, id, state, options);
    }
}
