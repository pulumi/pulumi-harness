// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabTokenRefArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabArgs Empty = new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabArgs();

    /**
     * If true, scan every branch of every repository. If false, scan only the default branch.
     * 
     */
    @Import(name="allBranches")
    private @Nullable Output<Boolean> allBranches;

    /**
     * @return If true, scan every branch of every repository. If false, scan only the default branch.
     * 
     */
    public Optional<Output<Boolean>> allBranches() {
        return Optional.ofNullable(this.allBranches);
    }

    /**
     * The Gitlab API URL to talk to.
     * 
     */
    @Import(name="api")
    private @Nullable Output<String> api;

    /**
     * @return The Gitlab API URL to talk to.
     * 
     */
    public Optional<Output<String>> api() {
        return Optional.ofNullable(this.api);
    }

    /**
     * Gitlab group to scan. You can use either the project id (recommended) or the full namespaced path.
     * 
     */
    @Import(name="group", required=true)
    private Output<String> group;

    /**
     * @return Gitlab group to scan. You can use either the project id (recommended) or the full namespaced path.
     * 
     */
    public Output<String> group() {
        return this.group;
    }

    /**
     * Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
     * 
     */
    @Import(name="includeSubgroups")
    private @Nullable Output<Boolean> includeSubgroups;

    /**
     * @return Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> includeSubgroups() {
        return Optional.ofNullable(this.includeSubgroups);
    }

    /**
     * Authentication token reference.
     * 
     */
    @Import(name="tokenRef")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabTokenRefArgs> tokenRef;

    /**
     * @return Authentication token reference.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabTokenRefArgs>> tokenRef() {
        return Optional.ofNullable(this.tokenRef);
    }

    private GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabArgs() {}

    private GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabArgs(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabArgs $) {
        this.allBranches = $.allBranches;
        this.api = $.api;
        this.group = $.group;
        this.includeSubgroups = $.includeSubgroups;
        this.tokenRef = $.tokenRef;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabArgs $;

        public Builder() {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabArgs();
        }

        public Builder(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabArgs defaults) {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allBranches If true, scan every branch of every repository. If false, scan only the default branch.
         * 
         * @return builder
         * 
         */
        public Builder allBranches(@Nullable Output<Boolean> allBranches) {
            $.allBranches = allBranches;
            return this;
        }

        /**
         * @param allBranches If true, scan every branch of every repository. If false, scan only the default branch.
         * 
         * @return builder
         * 
         */
        public Builder allBranches(Boolean allBranches) {
            return allBranches(Output.of(allBranches));
        }

        /**
         * @param api The Gitlab API URL to talk to.
         * 
         * @return builder
         * 
         */
        public Builder api(@Nullable Output<String> api) {
            $.api = api;
            return this;
        }

        /**
         * @param api The Gitlab API URL to talk to.
         * 
         * @return builder
         * 
         */
        public Builder api(String api) {
            return api(Output.of(api));
        }

        /**
         * @param group Gitlab group to scan. You can use either the project id (recommended) or the full namespaced path.
         * 
         * @return builder
         * 
         */
        public Builder group(Output<String> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group Gitlab group to scan. You can use either the project id (recommended) or the full namespaced path.
         * 
         * @return builder
         * 
         */
        public Builder group(String group) {
            return group(Output.of(group));
        }

        /**
         * @param includeSubgroups Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder includeSubgroups(@Nullable Output<Boolean> includeSubgroups) {
            $.includeSubgroups = includeSubgroups;
            return this;
        }

        /**
         * @param includeSubgroups Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder includeSubgroups(Boolean includeSubgroups) {
            return includeSubgroups(Output.of(includeSubgroups));
        }

        /**
         * @param tokenRef Authentication token reference.
         * 
         * @return builder
         * 
         */
        public Builder tokenRef(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabTokenRefArgs> tokenRef) {
            $.tokenRef = tokenRef;
            return this;
        }

        /**
         * @param tokenRef Authentication token reference.
         * 
         * @return builder
         * 
         */
        public Builder tokenRef(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabTokenRefArgs tokenRef) {
            return tokenRef(Output.of(tokenRef));
        }

        public GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabArgs build() {
            if ($.group == null) {
                throw new MissingRequiredPropertyException("GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabArgs", "group");
            }
            return $;
        }
    }

}
