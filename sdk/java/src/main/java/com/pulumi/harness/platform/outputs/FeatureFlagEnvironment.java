// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.FeatureFlagEnvironmentAddTargetRule;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FeatureFlagEnvironment {
    /**
     * @return The targeting rules for the flag
     * 
     */
    private @Nullable List<FeatureFlagEnvironmentAddTargetRule> addTargetRules;
    /**
     * @return Default variation to be served when flag is &#39;off&#39;
     * 
     */
    private @Nullable String defaultOffVariation;
    /**
     * @return Default variation to be served when flag is &#39;on&#39;
     * 
     */
    private @Nullable String defaultOnVariation;
    /**
     * @return Identifier of the Environment
     * 
     */
    private String identifier;
    /**
     * @return State of the flag in this environment. Possible values are &#39;on&#39; and &#39;off&#39;
     * 
     */
    private @Nullable String state;

    private FeatureFlagEnvironment() {}
    /**
     * @return The targeting rules for the flag
     * 
     */
    public List<FeatureFlagEnvironmentAddTargetRule> addTargetRules() {
        return this.addTargetRules == null ? List.of() : this.addTargetRules;
    }
    /**
     * @return Default variation to be served when flag is &#39;off&#39;
     * 
     */
    public Optional<String> defaultOffVariation() {
        return Optional.ofNullable(this.defaultOffVariation);
    }
    /**
     * @return Default variation to be served when flag is &#39;on&#39;
     * 
     */
    public Optional<String> defaultOnVariation() {
        return Optional.ofNullable(this.defaultOnVariation);
    }
    /**
     * @return Identifier of the Environment
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return State of the flag in this environment. Possible values are &#39;on&#39; and &#39;off&#39;
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FeatureFlagEnvironment defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<FeatureFlagEnvironmentAddTargetRule> addTargetRules;
        private @Nullable String defaultOffVariation;
        private @Nullable String defaultOnVariation;
        private String identifier;
        private @Nullable String state;
        public Builder() {}
        public Builder(FeatureFlagEnvironment defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addTargetRules = defaults.addTargetRules;
    	      this.defaultOffVariation = defaults.defaultOffVariation;
    	      this.defaultOnVariation = defaults.defaultOnVariation;
    	      this.identifier = defaults.identifier;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder addTargetRules(@Nullable List<FeatureFlagEnvironmentAddTargetRule> addTargetRules) {

            this.addTargetRules = addTargetRules;
            return this;
        }
        public Builder addTargetRules(FeatureFlagEnvironmentAddTargetRule... addTargetRules) {
            return addTargetRules(List.of(addTargetRules));
        }
        @CustomType.Setter
        public Builder defaultOffVariation(@Nullable String defaultOffVariation) {

            this.defaultOffVariation = defaultOffVariation;
            return this;
        }
        @CustomType.Setter
        public Builder defaultOnVariation(@Nullable String defaultOnVariation) {

            this.defaultOnVariation = defaultOnVariation;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            if (identifier == null) {
              throw new MissingRequiredPropertyException("FeatureFlagEnvironment", "identifier");
            }
            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        public FeatureFlagEnvironment build() {
            final var _resultValue = new FeatureFlagEnvironment();
            _resultValue.addTargetRules = addTargetRules;
            _resultValue.defaultOffVariation = defaultOffVariation;
            _resultValue.defaultOnVariation = defaultOnVariation;
            _resultValue.identifier = identifier;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
