// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GetHarRegistryConfig;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetHarRegistryPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetHarRegistryPlainArgs Empty = new GetHarRegistryPlainArgs();

    /**
     * Allowed artifact patterns
     * 
     */
    @Import(name="allowedPatterns")
    private @Nullable List<String> allowedPatterns;

    /**
     * @return Allowed artifact patterns
     * 
     */
    public Optional<List<String>> allowedPatterns() {
        return Optional.ofNullable(this.allowedPatterns);
    }

    /**
     * Blocked artifact patterns
     * 
     */
    @Import(name="blockedPatterns")
    private @Nullable List<String> blockedPatterns;

    /**
     * @return Blocked artifact patterns
     * 
     */
    public Optional<List<String>> blockedPatterns() {
        return Optional.ofNullable(this.blockedPatterns);
    }

    /**
     * Configuration for the registry
     * 
     */
    @Import(name="configs")
    private @Nullable List<GetHarRegistryConfig> configs;

    /**
     * @return Configuration for the registry
     * 
     */
    public Optional<List<GetHarRegistryConfig>> configs() {
        return Optional.ofNullable(this.configs);
    }

    /**
     * Description of the registry
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Description of the registry
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Unique identifier of the registry
     * 
     */
    @Import(name="identifier", required=true)
    private String identifier;

    /**
     * @return Unique identifier of the registry
     * 
     */
    public String identifier() {
        return this.identifier;
    }

    /**
     * Type of package (DOCKER, HELM, MAVEN, etc.)
     * 
     */
    @Import(name="packageType")
    private @Nullable String packageType;

    /**
     * @return Type of package (DOCKER, HELM, MAVEN, etc.)
     * 
     */
    public Optional<String> packageType() {
        return Optional.ofNullable(this.packageType);
    }

    /**
     * Parent reference for the registry
     * 
     */
    @Import(name="parentRef")
    private @Nullable String parentRef;

    /**
     * @return Parent reference for the registry
     * 
     */
    public Optional<String> parentRef() {
        return Optional.ofNullable(this.parentRef);
    }

    /**
     * Space reference for the registry
     * 
     */
    @Import(name="spaceRef")
    private @Nullable String spaceRef;

    /**
     * @return Space reference for the registry
     * 
     */
    public Optional<String> spaceRef() {
        return Optional.ofNullable(this.spaceRef);
    }

    private GetHarRegistryPlainArgs() {}

    private GetHarRegistryPlainArgs(GetHarRegistryPlainArgs $) {
        this.allowedPatterns = $.allowedPatterns;
        this.blockedPatterns = $.blockedPatterns;
        this.configs = $.configs;
        this.description = $.description;
        this.identifier = $.identifier;
        this.packageType = $.packageType;
        this.parentRef = $.parentRef;
        this.spaceRef = $.spaceRef;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetHarRegistryPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetHarRegistryPlainArgs $;

        public Builder() {
            $ = new GetHarRegistryPlainArgs();
        }

        public Builder(GetHarRegistryPlainArgs defaults) {
            $ = new GetHarRegistryPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedPatterns Allowed artifact patterns
         * 
         * @return builder
         * 
         */
        public Builder allowedPatterns(@Nullable List<String> allowedPatterns) {
            $.allowedPatterns = allowedPatterns;
            return this;
        }

        /**
         * @param allowedPatterns Allowed artifact patterns
         * 
         * @return builder
         * 
         */
        public Builder allowedPatterns(String... allowedPatterns) {
            return allowedPatterns(List.of(allowedPatterns));
        }

        /**
         * @param blockedPatterns Blocked artifact patterns
         * 
         * @return builder
         * 
         */
        public Builder blockedPatterns(@Nullable List<String> blockedPatterns) {
            $.blockedPatterns = blockedPatterns;
            return this;
        }

        /**
         * @param blockedPatterns Blocked artifact patterns
         * 
         * @return builder
         * 
         */
        public Builder blockedPatterns(String... blockedPatterns) {
            return blockedPatterns(List.of(blockedPatterns));
        }

        /**
         * @param configs Configuration for the registry
         * 
         * @return builder
         * 
         */
        public Builder configs(@Nullable List<GetHarRegistryConfig> configs) {
            $.configs = configs;
            return this;
        }

        /**
         * @param configs Configuration for the registry
         * 
         * @return builder
         * 
         */
        public Builder configs(GetHarRegistryConfig... configs) {
            return configs(List.of(configs));
        }

        /**
         * @param description Description of the registry
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param identifier Unique identifier of the registry
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param packageType Type of package (DOCKER, HELM, MAVEN, etc.)
         * 
         * @return builder
         * 
         */
        public Builder packageType(@Nullable String packageType) {
            $.packageType = packageType;
            return this;
        }

        /**
         * @param parentRef Parent reference for the registry
         * 
         * @return builder
         * 
         */
        public Builder parentRef(@Nullable String parentRef) {
            $.parentRef = parentRef;
            return this;
        }

        /**
         * @param spaceRef Space reference for the registry
         * 
         * @return builder
         * 
         */
        public Builder spaceRef(@Nullable String spaceRef) {
            $.spaceRef = spaceRef;
            return this;
        }

        public GetHarRegistryPlainArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("GetHarRegistryPlainArgs", "identifier");
            }
            return $;
        }
    }

}
