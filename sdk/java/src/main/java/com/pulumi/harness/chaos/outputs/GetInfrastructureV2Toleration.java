// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInfrastructureV2Toleration {
    /**
     * @return Effect indicates the taint effect to match. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     * 
     */
    private String effect;
    /**
     * @return Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists.
     * 
     */
    private String key;
    /**
     * @return Operator represents a key&#39;s relationship to the value. Valid operators are Exists and Equal. Defaults to Equal.
     * 
     */
    private String operator;
    /**
     * @return TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     * 
     */
    private @Nullable Integer tolerationSeconds;
    /**
     * @return Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     * 
     */
    private @Nullable String value;

    private GetInfrastructureV2Toleration() {}
    /**
     * @return Effect indicates the taint effect to match. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     * 
     */
    public String effect() {
        return this.effect;
    }
    /**
     * @return Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return Operator represents a key&#39;s relationship to the value. Valid operators are Exists and Equal. Defaults to Equal.
     * 
     */
    public String operator() {
        return this.operator;
    }
    /**
     * @return TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     * 
     */
    public Optional<Integer> tolerationSeconds() {
        return Optional.ofNullable(this.tolerationSeconds);
    }
    /**
     * @return Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     * 
     */
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInfrastructureV2Toleration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String effect;
        private String key;
        private String operator;
        private @Nullable Integer tolerationSeconds;
        private @Nullable String value;
        public Builder() {}
        public Builder(GetInfrastructureV2Toleration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.effect = defaults.effect;
    	      this.key = defaults.key;
    	      this.operator = defaults.operator;
    	      this.tolerationSeconds = defaults.tolerationSeconds;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder effect(String effect) {
            if (effect == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Toleration", "effect");
            }
            this.effect = effect;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Toleration", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder operator(String operator) {
            if (operator == null) {
              throw new MissingRequiredPropertyException("GetInfrastructureV2Toleration", "operator");
            }
            this.operator = operator;
            return this;
        }
        @CustomType.Setter
        public Builder tolerationSeconds(@Nullable Integer tolerationSeconds) {

            this.tolerationSeconds = tolerationSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder value(@Nullable String value) {

            this.value = value;
            return this;
        }
        public GetInfrastructureV2Toleration build() {
            final var _resultValue = new GetInfrastructureV2Toleration();
            _resultValue.effect = effect;
            _resultValue.key = key;
            _resultValue.operator = operator;
            _resultValue.tolerationSeconds = tolerationSeconds;
            _resultValue.value = value;
            return _resultValue;
        }
    }
}
