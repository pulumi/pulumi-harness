// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InfrastructureDefinitionAwsAmiArgs extends com.pulumi.resources.ResourceArgs {

    public static final InfrastructureDefinitionAwsAmiArgs Empty = new InfrastructureDefinitionAwsAmiArgs();

    /**
     * The ami deployment type to use. Valid options are AWS_ASG, SPOTINST
     * 
     */
    @Import(name="amiDeploymentType", required=true)
    private Output<String> amiDeploymentType;

    /**
     * @return The ami deployment type to use. Valid options are AWS_ASG, SPOTINST
     * 
     */
    public Output<String> amiDeploymentType() {
        return this.amiDeploymentType;
    }

    /**
     * Flag to indicate whether the autoscaling group identifies the workload.
     * 
     */
    @Import(name="asgIdentifiesWorkload")
    private @Nullable Output<Boolean> asgIdentifiesWorkload;

    /**
     * @return Flag to indicate whether the autoscaling group identifies the workload.
     * 
     */
    public Optional<Output<Boolean>> asgIdentifiesWorkload() {
        return Optional.ofNullable(this.asgIdentifiesWorkload);
    }

    /**
     * The name of the autoscaling group.
     * 
     */
    @Import(name="autoscalingGroupName")
    private @Nullable Output<String> autoscalingGroupName;

    /**
     * @return The name of the autoscaling group.
     * 
     */
    public Optional<Output<String>> autoscalingGroupName() {
        return Optional.ofNullable(this.autoscalingGroupName);
    }

    /**
     * The classic load balancers to use.
     * 
     */
    @Import(name="classicLoadbalancers")
    private @Nullable Output<List<String>> classicLoadbalancers;

    /**
     * @return The classic load balancers to use.
     * 
     */
    public Optional<Output<List<String>>> classicLoadbalancers() {
        return Optional.ofNullable(this.classicLoadbalancers);
    }

    /**
     * The name of the cloud provider to connect with.
     * 
     */
    @Import(name="cloudProviderName", required=true)
    private Output<String> cloudProviderName;

    /**
     * @return The name of the cloud provider to connect with.
     * 
     */
    public Output<String> cloudProviderName() {
        return this.cloudProviderName;
    }

    /**
     * The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split(&#39;.&#39;)[0]}
     * 
     */
    @Import(name="hostnameConvention")
    private @Nullable Output<String> hostnameConvention;

    /**
     * @return The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split(&#39;.&#39;)[0]}
     * 
     */
    public Optional<Output<String>> hostnameConvention() {
        return Optional.ofNullable(this.hostnameConvention);
    }

    /**
     * The region to deploy to.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return The region to deploy to.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * The name of the SpotInst cloud provider to connect with.
     * 
     */
    @Import(name="spotinstCloudProviderName")
    private @Nullable Output<String> spotinstCloudProviderName;

    /**
     * @return The name of the SpotInst cloud provider to connect with.
     * 
     */
    public Optional<Output<String>> spotinstCloudProviderName() {
        return Optional.ofNullable(this.spotinstCloudProviderName);
    }

    /**
     * The SpotInst configuration to use.
     * 
     */
    @Import(name="spotinstConfigJson")
    private @Nullable Output<String> spotinstConfigJson;

    /**
     * @return The SpotInst configuration to use.
     * 
     */
    public Optional<Output<String>> spotinstConfigJson() {
        return Optional.ofNullable(this.spotinstConfigJson);
    }

    /**
     * The staging classic load balancers to use.
     * 
     */
    @Import(name="stageClassicLoadbalancers")
    private @Nullable Output<List<String>> stageClassicLoadbalancers;

    /**
     * @return The staging classic load balancers to use.
     * 
     */
    public Optional<Output<List<String>>> stageClassicLoadbalancers() {
        return Optional.ofNullable(this.stageClassicLoadbalancers);
    }

    /**
     * The staging classic load balancers to use.
     * 
     */
    @Import(name="stageTargetGroupArns")
    private @Nullable Output<List<String>> stageTargetGroupArns;

    /**
     * @return The staging classic load balancers to use.
     * 
     */
    public Optional<Output<List<String>>> stageTargetGroupArns() {
        return Optional.ofNullable(this.stageTargetGroupArns);
    }

    /**
     * The ARN&#39;s of the target groups.
     * 
     */
    @Import(name="targetGroupArns")
    private @Nullable Output<List<String>> targetGroupArns;

    /**
     * @return The ARN&#39;s of the target groups.
     * 
     */
    public Optional<Output<List<String>>> targetGroupArns() {
        return Optional.ofNullable(this.targetGroupArns);
    }

    /**
     * Flag to enable traffic shifting.
     * 
     */
    @Import(name="useTrafficShift")
    private @Nullable Output<Boolean> useTrafficShift;

    /**
     * @return Flag to enable traffic shifting.
     * 
     */
    public Optional<Output<Boolean>> useTrafficShift() {
        return Optional.ofNullable(this.useTrafficShift);
    }

    private InfrastructureDefinitionAwsAmiArgs() {}

    private InfrastructureDefinitionAwsAmiArgs(InfrastructureDefinitionAwsAmiArgs $) {
        this.amiDeploymentType = $.amiDeploymentType;
        this.asgIdentifiesWorkload = $.asgIdentifiesWorkload;
        this.autoscalingGroupName = $.autoscalingGroupName;
        this.classicLoadbalancers = $.classicLoadbalancers;
        this.cloudProviderName = $.cloudProviderName;
        this.hostnameConvention = $.hostnameConvention;
        this.region = $.region;
        this.spotinstCloudProviderName = $.spotinstCloudProviderName;
        this.spotinstConfigJson = $.spotinstConfigJson;
        this.stageClassicLoadbalancers = $.stageClassicLoadbalancers;
        this.stageTargetGroupArns = $.stageTargetGroupArns;
        this.targetGroupArns = $.targetGroupArns;
        this.useTrafficShift = $.useTrafficShift;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InfrastructureDefinitionAwsAmiArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InfrastructureDefinitionAwsAmiArgs $;

        public Builder() {
            $ = new InfrastructureDefinitionAwsAmiArgs();
        }

        public Builder(InfrastructureDefinitionAwsAmiArgs defaults) {
            $ = new InfrastructureDefinitionAwsAmiArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param amiDeploymentType The ami deployment type to use. Valid options are AWS_ASG, SPOTINST
         * 
         * @return builder
         * 
         */
        public Builder amiDeploymentType(Output<String> amiDeploymentType) {
            $.amiDeploymentType = amiDeploymentType;
            return this;
        }

        /**
         * @param amiDeploymentType The ami deployment type to use. Valid options are AWS_ASG, SPOTINST
         * 
         * @return builder
         * 
         */
        public Builder amiDeploymentType(String amiDeploymentType) {
            return amiDeploymentType(Output.of(amiDeploymentType));
        }

        /**
         * @param asgIdentifiesWorkload Flag to indicate whether the autoscaling group identifies the workload.
         * 
         * @return builder
         * 
         */
        public Builder asgIdentifiesWorkload(@Nullable Output<Boolean> asgIdentifiesWorkload) {
            $.asgIdentifiesWorkload = asgIdentifiesWorkload;
            return this;
        }

        /**
         * @param asgIdentifiesWorkload Flag to indicate whether the autoscaling group identifies the workload.
         * 
         * @return builder
         * 
         */
        public Builder asgIdentifiesWorkload(Boolean asgIdentifiesWorkload) {
            return asgIdentifiesWorkload(Output.of(asgIdentifiesWorkload));
        }

        /**
         * @param autoscalingGroupName The name of the autoscaling group.
         * 
         * @return builder
         * 
         */
        public Builder autoscalingGroupName(@Nullable Output<String> autoscalingGroupName) {
            $.autoscalingGroupName = autoscalingGroupName;
            return this;
        }

        /**
         * @param autoscalingGroupName The name of the autoscaling group.
         * 
         * @return builder
         * 
         */
        public Builder autoscalingGroupName(String autoscalingGroupName) {
            return autoscalingGroupName(Output.of(autoscalingGroupName));
        }

        /**
         * @param classicLoadbalancers The classic load balancers to use.
         * 
         * @return builder
         * 
         */
        public Builder classicLoadbalancers(@Nullable Output<List<String>> classicLoadbalancers) {
            $.classicLoadbalancers = classicLoadbalancers;
            return this;
        }

        /**
         * @param classicLoadbalancers The classic load balancers to use.
         * 
         * @return builder
         * 
         */
        public Builder classicLoadbalancers(List<String> classicLoadbalancers) {
            return classicLoadbalancers(Output.of(classicLoadbalancers));
        }

        /**
         * @param classicLoadbalancers The classic load balancers to use.
         * 
         * @return builder
         * 
         */
        public Builder classicLoadbalancers(String... classicLoadbalancers) {
            return classicLoadbalancers(List.of(classicLoadbalancers));
        }

        /**
         * @param cloudProviderName The name of the cloud provider to connect with.
         * 
         * @return builder
         * 
         */
        public Builder cloudProviderName(Output<String> cloudProviderName) {
            $.cloudProviderName = cloudProviderName;
            return this;
        }

        /**
         * @param cloudProviderName The name of the cloud provider to connect with.
         * 
         * @return builder
         * 
         */
        public Builder cloudProviderName(String cloudProviderName) {
            return cloudProviderName(Output.of(cloudProviderName));
        }

        /**
         * @param hostnameConvention The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split(&#39;.&#39;)[0]}
         * 
         * @return builder
         * 
         */
        public Builder hostnameConvention(@Nullable Output<String> hostnameConvention) {
            $.hostnameConvention = hostnameConvention;
            return this;
        }

        /**
         * @param hostnameConvention The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split(&#39;.&#39;)[0]}
         * 
         * @return builder
         * 
         */
        public Builder hostnameConvention(String hostnameConvention) {
            return hostnameConvention(Output.of(hostnameConvention));
        }

        /**
         * @param region The region to deploy to.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region to deploy to.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param spotinstCloudProviderName The name of the SpotInst cloud provider to connect with.
         * 
         * @return builder
         * 
         */
        public Builder spotinstCloudProviderName(@Nullable Output<String> spotinstCloudProviderName) {
            $.spotinstCloudProviderName = spotinstCloudProviderName;
            return this;
        }

        /**
         * @param spotinstCloudProviderName The name of the SpotInst cloud provider to connect with.
         * 
         * @return builder
         * 
         */
        public Builder spotinstCloudProviderName(String spotinstCloudProviderName) {
            return spotinstCloudProviderName(Output.of(spotinstCloudProviderName));
        }

        /**
         * @param spotinstConfigJson The SpotInst configuration to use.
         * 
         * @return builder
         * 
         */
        public Builder spotinstConfigJson(@Nullable Output<String> spotinstConfigJson) {
            $.spotinstConfigJson = spotinstConfigJson;
            return this;
        }

        /**
         * @param spotinstConfigJson The SpotInst configuration to use.
         * 
         * @return builder
         * 
         */
        public Builder spotinstConfigJson(String spotinstConfigJson) {
            return spotinstConfigJson(Output.of(spotinstConfigJson));
        }

        /**
         * @param stageClassicLoadbalancers The staging classic load balancers to use.
         * 
         * @return builder
         * 
         */
        public Builder stageClassicLoadbalancers(@Nullable Output<List<String>> stageClassicLoadbalancers) {
            $.stageClassicLoadbalancers = stageClassicLoadbalancers;
            return this;
        }

        /**
         * @param stageClassicLoadbalancers The staging classic load balancers to use.
         * 
         * @return builder
         * 
         */
        public Builder stageClassicLoadbalancers(List<String> stageClassicLoadbalancers) {
            return stageClassicLoadbalancers(Output.of(stageClassicLoadbalancers));
        }

        /**
         * @param stageClassicLoadbalancers The staging classic load balancers to use.
         * 
         * @return builder
         * 
         */
        public Builder stageClassicLoadbalancers(String... stageClassicLoadbalancers) {
            return stageClassicLoadbalancers(List.of(stageClassicLoadbalancers));
        }

        /**
         * @param stageTargetGroupArns The staging classic load balancers to use.
         * 
         * @return builder
         * 
         */
        public Builder stageTargetGroupArns(@Nullable Output<List<String>> stageTargetGroupArns) {
            $.stageTargetGroupArns = stageTargetGroupArns;
            return this;
        }

        /**
         * @param stageTargetGroupArns The staging classic load balancers to use.
         * 
         * @return builder
         * 
         */
        public Builder stageTargetGroupArns(List<String> stageTargetGroupArns) {
            return stageTargetGroupArns(Output.of(stageTargetGroupArns));
        }

        /**
         * @param stageTargetGroupArns The staging classic load balancers to use.
         * 
         * @return builder
         * 
         */
        public Builder stageTargetGroupArns(String... stageTargetGroupArns) {
            return stageTargetGroupArns(List.of(stageTargetGroupArns));
        }

        /**
         * @param targetGroupArns The ARN&#39;s of the target groups.
         * 
         * @return builder
         * 
         */
        public Builder targetGroupArns(@Nullable Output<List<String>> targetGroupArns) {
            $.targetGroupArns = targetGroupArns;
            return this;
        }

        /**
         * @param targetGroupArns The ARN&#39;s of the target groups.
         * 
         * @return builder
         * 
         */
        public Builder targetGroupArns(List<String> targetGroupArns) {
            return targetGroupArns(Output.of(targetGroupArns));
        }

        /**
         * @param targetGroupArns The ARN&#39;s of the target groups.
         * 
         * @return builder
         * 
         */
        public Builder targetGroupArns(String... targetGroupArns) {
            return targetGroupArns(List.of(targetGroupArns));
        }

        /**
         * @param useTrafficShift Flag to enable traffic shifting.
         * 
         * @return builder
         * 
         */
        public Builder useTrafficShift(@Nullable Output<Boolean> useTrafficShift) {
            $.useTrafficShift = useTrafficShift;
            return this;
        }

        /**
         * @param useTrafficShift Flag to enable traffic shifting.
         * 
         * @return builder
         * 
         */
        public Builder useTrafficShift(Boolean useTrafficShift) {
            return useTrafficShift(Output.of(useTrafficShift));
        }

        public InfrastructureDefinitionAwsAmiArgs build() {
            if ($.amiDeploymentType == null) {
                throw new MissingRequiredPropertyException("InfrastructureDefinitionAwsAmiArgs", "amiDeploymentType");
            }
            if ($.cloudProviderName == null) {
                throw new MissingRequiredPropertyException("InfrastructureDefinitionAwsAmiArgs", "cloudProviderName");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("InfrastructureDefinitionAwsAmiArgs", "region");
            }
            return $;
        }
    }

}
