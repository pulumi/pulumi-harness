// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRepoRuleBranchPolicy extends com.pulumi.resources.InvokeArgs {

    public static final GetRepoRuleBranchPolicy Empty = new GetRepoRuleBranchPolicy();

    /**
     * Limit which merge strategies are available to merge a pull request(Any of squash, rebase, merge).
     * 
     */
    @Import(name="allowMergeStrategies")
    private @Nullable List<String> allowMergeStrategies;

    /**
     * @return Limit which merge strategies are available to merge a pull request(Any of squash, rebase, merge).
     * 
     */
    public Optional<List<String>> allowMergeStrategies() {
        return Optional.ofNullable(this.allowMergeStrategies);
    }

    /**
     * Only allow users with bypass permission to create matching branches.
     * 
     */
    @Import(name="blockBranchCreation")
    private @Nullable Boolean blockBranchCreation;

    /**
     * @return Only allow users with bypass permission to create matching branches.
     * 
     */
    public Optional<Boolean> blockBranchCreation() {
        return Optional.ofNullable(this.blockBranchCreation);
    }

    /**
     * Only allow users with bypass permission to delete matching branches.
     * 
     */
    @Import(name="blockBranchDeletion")
    private @Nullable Boolean blockBranchDeletion;

    /**
     * @return Only allow users with bypass permission to delete matching branches.
     * 
     */
    public Optional<Boolean> blockBranchDeletion() {
        return Optional.ofNullable(this.blockBranchDeletion);
    }

    /**
     * Automatically delete the source branch of a pull request after it is merged.
     * 
     */
    @Import(name="deleteBranchOnMerge")
    private @Nullable Boolean deleteBranchOnMerge;

    /**
     * @return Automatically delete the source branch of a pull request after it is merged.
     * 
     */
    public Optional<Boolean> deleteBranchOnMerge() {
        return Optional.ofNullable(this.deleteBranchOnMerge);
    }

    /**
     * Require approval on pull requests from one reviewer for each codeowner rule.
     * 
     */
    @Import(name="requireCodeOwners")
    private @Nullable Boolean requireCodeOwners;

    /**
     * @return Require approval on pull requests from one reviewer for each codeowner rule.
     * 
     */
    public Optional<Boolean> requireCodeOwners() {
        return Optional.ofNullable(this.requireCodeOwners);
    }

    /**
     * Require re-approval when there are new changes in the pull request.
     * 
     */
    @Import(name="requireLatestCommitApproval")
    private @Nullable Boolean requireLatestCommitApproval;

    /**
     * @return Require re-approval when there are new changes in the pull request.
     * 
     */
    public Optional<Boolean> requireLatestCommitApproval() {
        return Optional.ofNullable(this.requireLatestCommitApproval);
    }

    /**
     * Require approval on pull requests from a minimum number of reviewers.
     * 
     */
    @Import(name="requireMinimumApprovalCount")
    private @Nullable Integer requireMinimumApprovalCount;

    /**
     * @return Require approval on pull requests from a minimum number of reviewers.
     * 
     */
    public Optional<Integer> requireMinimumApprovalCount() {
        return Optional.ofNullable(this.requireMinimumApprovalCount);
    }

    /**
     * Require all request for changes have been resolved.
     * 
     */
    @Import(name="requireNoChangeRequest")
    private @Nullable Boolean requireNoChangeRequest;

    /**
     * @return Require all request for changes have been resolved.
     * 
     */
    public Optional<Boolean> requireNoChangeRequest() {
        return Optional.ofNullable(this.requireNoChangeRequest);
    }

    /**
     * Do not allow any changes to matching branches without a pull request.
     * 
     */
    @Import(name="requirePullRequest")
    private @Nullable Boolean requirePullRequest;

    /**
     * @return Do not allow any changes to matching branches without a pull request.
     * 
     */
    public Optional<Boolean> requirePullRequest() {
        return Optional.ofNullable(this.requirePullRequest);
    }

    /**
     * All comments on a pull request must be resolved before it can be merged.
     * 
     */
    @Import(name="requireResolveAllComments")
    private @Nullable Boolean requireResolveAllComments;

    /**
     * @return All comments on a pull request must be resolved before it can be merged.
     * 
     */
    public Optional<Boolean> requireResolveAllComments() {
        return Optional.ofNullable(this.requireResolveAllComments);
    }

    /**
     * Selected status checks must pass before a pull request can be merged.
     * 
     */
    @Import(name="requireStatusChecks")
    private @Nullable List<String> requireStatusChecks;

    /**
     * @return Selected status checks must pass before a pull request can be merged.
     * 
     */
    public Optional<List<String>> requireStatusChecks() {
        return Optional.ofNullable(this.requireStatusChecks);
    }

    private GetRepoRuleBranchPolicy() {}

    private GetRepoRuleBranchPolicy(GetRepoRuleBranchPolicy $) {
        this.allowMergeStrategies = $.allowMergeStrategies;
        this.blockBranchCreation = $.blockBranchCreation;
        this.blockBranchDeletion = $.blockBranchDeletion;
        this.deleteBranchOnMerge = $.deleteBranchOnMerge;
        this.requireCodeOwners = $.requireCodeOwners;
        this.requireLatestCommitApproval = $.requireLatestCommitApproval;
        this.requireMinimumApprovalCount = $.requireMinimumApprovalCount;
        this.requireNoChangeRequest = $.requireNoChangeRequest;
        this.requirePullRequest = $.requirePullRequest;
        this.requireResolveAllComments = $.requireResolveAllComments;
        this.requireStatusChecks = $.requireStatusChecks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepoRuleBranchPolicy defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepoRuleBranchPolicy $;

        public Builder() {
            $ = new GetRepoRuleBranchPolicy();
        }

        public Builder(GetRepoRuleBranchPolicy defaults) {
            $ = new GetRepoRuleBranchPolicy(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowMergeStrategies Limit which merge strategies are available to merge a pull request(Any of squash, rebase, merge).
         * 
         * @return builder
         * 
         */
        public Builder allowMergeStrategies(@Nullable List<String> allowMergeStrategies) {
            $.allowMergeStrategies = allowMergeStrategies;
            return this;
        }

        /**
         * @param allowMergeStrategies Limit which merge strategies are available to merge a pull request(Any of squash, rebase, merge).
         * 
         * @return builder
         * 
         */
        public Builder allowMergeStrategies(String... allowMergeStrategies) {
            return allowMergeStrategies(List.of(allowMergeStrategies));
        }

        /**
         * @param blockBranchCreation Only allow users with bypass permission to create matching branches.
         * 
         * @return builder
         * 
         */
        public Builder blockBranchCreation(@Nullable Boolean blockBranchCreation) {
            $.blockBranchCreation = blockBranchCreation;
            return this;
        }

        /**
         * @param blockBranchDeletion Only allow users with bypass permission to delete matching branches.
         * 
         * @return builder
         * 
         */
        public Builder blockBranchDeletion(@Nullable Boolean blockBranchDeletion) {
            $.blockBranchDeletion = blockBranchDeletion;
            return this;
        }

        /**
         * @param deleteBranchOnMerge Automatically delete the source branch of a pull request after it is merged.
         * 
         * @return builder
         * 
         */
        public Builder deleteBranchOnMerge(@Nullable Boolean deleteBranchOnMerge) {
            $.deleteBranchOnMerge = deleteBranchOnMerge;
            return this;
        }

        /**
         * @param requireCodeOwners Require approval on pull requests from one reviewer for each codeowner rule.
         * 
         * @return builder
         * 
         */
        public Builder requireCodeOwners(@Nullable Boolean requireCodeOwners) {
            $.requireCodeOwners = requireCodeOwners;
            return this;
        }

        /**
         * @param requireLatestCommitApproval Require re-approval when there are new changes in the pull request.
         * 
         * @return builder
         * 
         */
        public Builder requireLatestCommitApproval(@Nullable Boolean requireLatestCommitApproval) {
            $.requireLatestCommitApproval = requireLatestCommitApproval;
            return this;
        }

        /**
         * @param requireMinimumApprovalCount Require approval on pull requests from a minimum number of reviewers.
         * 
         * @return builder
         * 
         */
        public Builder requireMinimumApprovalCount(@Nullable Integer requireMinimumApprovalCount) {
            $.requireMinimumApprovalCount = requireMinimumApprovalCount;
            return this;
        }

        /**
         * @param requireNoChangeRequest Require all request for changes have been resolved.
         * 
         * @return builder
         * 
         */
        public Builder requireNoChangeRequest(@Nullable Boolean requireNoChangeRequest) {
            $.requireNoChangeRequest = requireNoChangeRequest;
            return this;
        }

        /**
         * @param requirePullRequest Do not allow any changes to matching branches without a pull request.
         * 
         * @return builder
         * 
         */
        public Builder requirePullRequest(@Nullable Boolean requirePullRequest) {
            $.requirePullRequest = requirePullRequest;
            return this;
        }

        /**
         * @param requireResolveAllComments All comments on a pull request must be resolved before it can be merged.
         * 
         * @return builder
         * 
         */
        public Builder requireResolveAllComments(@Nullable Boolean requireResolveAllComments) {
            $.requireResolveAllComments = requireResolveAllComments;
            return this;
        }

        /**
         * @param requireStatusChecks Selected status checks must pass before a pull request can be merged.
         * 
         * @return builder
         * 
         */
        public Builder requireStatusChecks(@Nullable List<String> requireStatusChecks) {
            $.requireStatusChecks = requireStatusChecks;
            return this;
        }

        /**
         * @param requireStatusChecks Selected status checks must pass before a pull request can be merged.
         * 
         * @return builder
         * 
         */
        public Builder requireStatusChecks(String... requireStatusChecks) {
            return requireStatusChecks(List.of(requireStatusChecks));
        }

        public GetRepoRuleBranchPolicy build() {
            return $;
        }
    }

}
