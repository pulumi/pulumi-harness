// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.RepoArgs;
import com.pulumi.harness.platform.inputs.RepoState;
import com.pulumi.harness.platform.outputs.RepoSource;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for creating a Harness Repo.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.platform.Repo;
 * import com.pulumi.harness.platform.RepoArgs;
 * import com.pulumi.harness.platform.inputs.RepoSourceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new Repo("test", RepoArgs.builder()
 *             .identifier("test_repo_123")
 *             .orgId("test_org_123")
 *             .projectId("test_project_123")
 *             .defaultBranch("main")
 *             .description("test_description_123")
 *             .sources(RepoSourceArgs.builder()
 *                 .repo("octocat/hello-worId")
 *                 .type("github")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * The `pulumi import` command can be used, for example:
 * 
 * Import
 * 
 * ```sh
 * $ pulumi import harness:platform/repo:Repo example &lt;identifier&gt;
 * ```
 * 
 * Import using the organization id
 * 
 * ```sh
 * $ pulumi import harness:platform/repo:Repo example &lt;org_id&gt;/&lt;identifier&gt;
 * ```
 * 
 * Import using the organization id and the project id
 * 
 * ```sh
 * $ pulumi import harness:platform/repo:Repo example &lt;org_id&gt;/&lt;project_id&gt;/&lt;identifier&gt;
 * ```
 * 
 */
@ResourceType(type="harness:platform/repo:Repo")
public class Repo extends com.pulumi.resources.CustomResource {
    /**
     * Timestamp when the repository was created.
     * 
     */
    @Export(name="created", refs={Integer.class}, tree="[0]")
    private Output<Integer> created;

    /**
     * @return Timestamp when the repository was created.
     * 
     */
    public Output<Integer> created() {
        return this.created;
    }
    /**
     * ID of the user who created the repository.
     * 
     */
    @Export(name="createdBy", refs={Integer.class}, tree="[0]")
    private Output<Integer> createdBy;

    /**
     * @return ID of the user who created the repository.
     * 
     */
    public Output<Integer> createdBy() {
        return this.createdBy;
    }
    /**
     * Default branch of the repository (Applicate only for create).
     * 
     */
    @Export(name="defaultBranch", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> defaultBranch;

    /**
     * @return Default branch of the repository (Applicate only for create).
     * 
     */
    public Output<Optional<String>> defaultBranch() {
        return Codegen.optional(this.defaultBranch);
    }
    /**
     * Description of the repository.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the repository.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Repository should be created with specified predefined gitignore file.
     * 
     */
    @Export(name="gitIgnore", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> gitIgnore;

    /**
     * @return Repository should be created with specified predefined gitignore file.
     * 
     */
    public Output<Optional<String>> gitIgnore() {
        return Codegen.optional(this.gitIgnore);
    }
    /**
     * Git URL of the repository.
     * 
     */
    @Export(name="gitUrl", refs={String.class}, tree="[0]")
    private Output<String> gitUrl;

    /**
     * @return Git URL of the repository.
     * 
     */
    public Output<String> gitUrl() {
        return this.gitUrl;
    }
    /**
     * Identifier of the repository.
     * 
     */
    @Export(name="identifier", refs={String.class}, tree="[0]")
    private Output<String> identifier;

    /**
     * @return Identifier of the repository.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }
    /**
     * Repository should be created with specified predefined license file.
     * 
     */
    @Export(name="license", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> license;

    /**
     * @return Repository should be created with specified predefined license file.
     * 
     */
    public Output<Optional<String>> license() {
        return Codegen.optional(this.license);
    }
    /**
     * Name of the repository.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the repository.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Unique identifier of the organization.
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Output<Optional<String>> orgId() {
        return Codegen.optional(this.orgId);
    }
    /**
     * Path of the repository.
     * 
     */
    @Export(name="path", refs={String.class}, tree="[0]")
    private Output<String> path;

    /**
     * @return Path of the repository.
     * 
     */
    public Output<String> path() {
        return this.path;
    }
    /**
     * Unique identifier of the project.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Output<Optional<String>> projectId() {
        return Codegen.optional(this.projectId);
    }
    /**
     * Repository should be created with readme file.
     * 
     */
    @Export(name="readme", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> readme;

    /**
     * @return Repository should be created with readme file.
     * 
     */
    public Output<Optional<Boolean>> readme() {
        return Codegen.optional(this.readme);
    }
    /**
     * Configuration for importing an existing repository from SCM provider.
     * 
     */
    @Export(name="sources", refs={List.class,RepoSource.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RepoSource>> sources;

    /**
     * @return Configuration for importing an existing repository from SCM provider.
     * 
     */
    public Output<Optional<List<RepoSource>>> sources() {
        return Codegen.optional(this.sources);
    }
    /**
     * Timestamp when the repository was last updated.
     * 
     */
    @Export(name="updated", refs={Integer.class}, tree="[0]")
    private Output<Integer> updated;

    /**
     * @return Timestamp when the repository was last updated.
     * 
     */
    public Output<Integer> updated() {
        return this.updated;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Repo(java.lang.String name) {
        this(name, RepoArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Repo(java.lang.String name, RepoArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Repo(java.lang.String name, RepoArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/repo:Repo", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Repo(java.lang.String name, Output<java.lang.String> id, @Nullable RepoState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/repo:Repo", name, state, makeResourceOptions(options, id), false);
    }

    private static RepoArgs makeArgs(RepoArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RepoArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Repo get(java.lang.String name, Output<java.lang.String> id, @Nullable RepoState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Repo(name, id, state, options);
    }
}
