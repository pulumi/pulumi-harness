// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManualFreezeFreezeWindowRecurrenceRecurrenceSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManualFreezeFreezeWindowRecurrenceRecurrenceSpecArgs Empty = new ManualFreezeFreezeWindowRecurrenceRecurrenceSpecArgs();

    /**
     * Time till which freeze window recurrs
     * 
     */
    @Import(name="until")
    private @Nullable Output<String> until;

    /**
     * @return Time till which freeze window recurrs
     * 
     */
    public Optional<Output<String>> until() {
        return Optional.ofNullable(this.until);
    }

    /**
     * Every n months recurrence
     * 
     */
    @Import(name="value")
    private @Nullable Output<Integer> value;

    /**
     * @return Every n months recurrence
     * 
     */
    public Optional<Output<Integer>> value() {
        return Optional.ofNullable(this.value);
    }

    private ManualFreezeFreezeWindowRecurrenceRecurrenceSpecArgs() {}

    private ManualFreezeFreezeWindowRecurrenceRecurrenceSpecArgs(ManualFreezeFreezeWindowRecurrenceRecurrenceSpecArgs $) {
        this.until = $.until;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManualFreezeFreezeWindowRecurrenceRecurrenceSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManualFreezeFreezeWindowRecurrenceRecurrenceSpecArgs $;

        public Builder() {
            $ = new ManualFreezeFreezeWindowRecurrenceRecurrenceSpecArgs();
        }

        public Builder(ManualFreezeFreezeWindowRecurrenceRecurrenceSpecArgs defaults) {
            $ = new ManualFreezeFreezeWindowRecurrenceRecurrenceSpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param until Time till which freeze window recurrs
         * 
         * @return builder
         * 
         */
        public Builder until(@Nullable Output<String> until) {
            $.until = until;
            return this;
        }

        /**
         * @param until Time till which freeze window recurrs
         * 
         * @return builder
         * 
         */
        public Builder until(String until) {
            return until(Output.of(until));
        }

        /**
         * @param value Every n months recurrence
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<Integer> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Every n months recurrence
         * 
         * @return builder
         * 
         */
        public Builder value(Integer value) {
            return value(Output.of(value));
        }

        public ManualFreezeFreezeWindowRecurrenceRecurrenceSpecArgs build() {
            return $;
        }
    }

}
