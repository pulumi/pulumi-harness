// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cluster.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrchestratorConfigNodePreferencesArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrchestratorConfigNodePreferencesArgs Empty = new OrchestratorConfigNodePreferencesArgs();

    /**
     * Reverse fallback interval
     * 
     */
    @Import(name="reverseFallbackInterval")
    private @Nullable Output<String> reverseFallbackInterval;

    /**
     * @return Reverse fallback interval
     * 
     */
    public Optional<Output<String>> reverseFallbackInterval() {
        return Optional.ofNullable(this.reverseFallbackInterval);
    }

    /**
     * TTL for nodes
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<String> ttl;

    /**
     * @return TTL for nodes
     * 
     */
    public Optional<Output<String>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    private OrchestratorConfigNodePreferencesArgs() {}

    private OrchestratorConfigNodePreferencesArgs(OrchestratorConfigNodePreferencesArgs $) {
        this.reverseFallbackInterval = $.reverseFallbackInterval;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrchestratorConfigNodePreferencesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrchestratorConfigNodePreferencesArgs $;

        public Builder() {
            $ = new OrchestratorConfigNodePreferencesArgs();
        }

        public Builder(OrchestratorConfigNodePreferencesArgs defaults) {
            $ = new OrchestratorConfigNodePreferencesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param reverseFallbackInterval Reverse fallback interval
         * 
         * @return builder
         * 
         */
        public Builder reverseFallbackInterval(@Nullable Output<String> reverseFallbackInterval) {
            $.reverseFallbackInterval = reverseFallbackInterval;
            return this;
        }

        /**
         * @param reverseFallbackInterval Reverse fallback interval
         * 
         * @return builder
         * 
         */
        public Builder reverseFallbackInterval(String reverseFallbackInterval) {
            return reverseFallbackInterval(Output.of(reverseFallbackInterval));
        }

        /**
         * @param ttl TTL for nodes
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<String> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl TTL for nodes
         * 
         * @return builder
         * 
         */
        public Builder ttl(String ttl) {
            return ttl(Output.of(ttl));
        }

        public OrchestratorConfigNodePreferencesArgs build() {
            return $;
        }
    }

}
