// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.MonitoredServiceArgs;
import com.pulumi.harness.platform.inputs.MonitoredServiceState;
import com.pulumi.harness.platform.outputs.MonitoredServiceRequest;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for creating a monitored service.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.platform.MonitoredService;
 * import com.pulumi.harness.platform.MonitoredServiceArgs;
 * import com.pulumi.harness.platform.inputs.MonitoredServiceRequestArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         //Sample template for Elastic Search Log Health Source
 *         var example = new MonitoredService("example", MonitoredServiceArgs.builder()
 *             .orgId("org_id")
 *             .projectId("project_id")
 *             .identifier("identifier")
 *             .request(MonitoredServiceRequestArgs.builder()
 *                 .name("name")
 *                 .type("Application")
 *                 .description("description")
 *                 .serviceRef("service_ref")
 *                 .environmentRef("environment_ref")
 *                 .tags(                
 *                     "foo:bar",
 *                     "bar:foo")
 *                 .healthSources(MonitoredServiceRequestHealthSourceArgs.builder()
 *                     .name("name")
 *                     .identifier("identifier")
 *                     .type("ElasticSearch")
 *                     .version("v2")
 *                     .spec(serializeJson(
 *                         jsonObject(
 *                             jsonProperty("connectorRef", "connectorRef"),
 *                             jsonProperty("queryDefinitions", jsonArray(
 *                                 jsonObject(
 *                                     jsonProperty("name", "name"),
 *                                     jsonProperty("identifier", "infraquery"),
 *                                     jsonProperty("query", "query"),
 *                                     jsonProperty("index", "index"),
 *                                     jsonProperty("groupName", "Logs_Group"),
 *                                     jsonProperty("queryParams", jsonObject(
 *                                         jsonProperty("index", "index"),
 *                                         jsonProperty("serviceInstanceField", "serviceInstanceIdentifier"),
 *                                         jsonProperty("timeStampIdentifier", "timeStampIdentifier"),
 *                                         jsonProperty("timeStampFormat", "timeStampFormat"),
 *                                         jsonProperty("messageIdentifier", "messageIdentifier")
 *                                     ))
 *                                 ), 
 *                                 jsonObject(
 *                                     jsonProperty("name", "name2"),
 *                                     jsonProperty("identifier", "errorquery"),
 *                                     jsonProperty("query", "query2"),
 *                                     jsonProperty("index", "index2"),
 *                                     jsonProperty("groupName", "Logs_Group"),
 *                                     jsonProperty("queryParams", jsonObject(
 *                                         jsonProperty("index", "index"),
 *                                         jsonProperty("serviceInstanceField", "serviceInstanceIdentifier"),
 *                                         jsonProperty("timeStampIdentifier", "timeStampIdentifier"),
 *                                         jsonProperty("timeStampFormat", "timeStampFormat"),
 *                                         jsonProperty("messageIdentifier", "messageIdentifier")
 *                                     ))
 *                                 )
 *                             ))
 *                         )))
 *                     .build())
 *                 .changeSources(                
 *                     MonitoredServiceRequestChangeSourceArgs.builder()
 *                         .name("BAC")
 *                         .identifier("BAC")
 *                         .type("PagerDuty")
 *                         .enabled(true)
 *                         .spec(serializeJson(
 *                             jsonObject(
 *                                 jsonProperty("connectorRef", "account.pd"),
 *                                 jsonProperty("pagerDutyServiceId", "P0N21OB")
 *                             )))
 *                         .category("Alert")
 *                         .build(),
 *                     MonitoredServiceRequestChangeSourceArgs.builder()
 *                         .name("FH")
 *                         .identifier("FH")
 *                         .type("CustomIncident")
 *                         .enabled(true)
 *                         .spec(serializeJson(
 *                             jsonObject(
 *                                 jsonProperty("name", "FH"),
 *                                 jsonProperty("webhookUrl", "https://harness.io/cv/api/account/sampleAcc/org/sampleOrg/project/sampleProj/webhook/custom-change?monitoredServiceIdentifier=checkout_prod&changeSourceIdentifier=FH"),
 *                                 jsonProperty("webhookCurlCommand", "curl -X POST -H 'content-type: application/json' -H 'X-Api-Key: sample_api_key' --url 'https://harness.io/cv/api/account/sampleAcc/org/sampleOrg/project/sampleProj/webhook/custom-change?monitoredServiceIdentifier=checkout_prod&changeSourceIdentifier=FH' -d '}{{@code  \"eventIdentifier\": \"<string>\" (optional), \"user\": \"user}{@literal @}{@code harness.io\", \"startTime\": timeInMs, \"endTime\": timeInMs, \"eventDetail\": }{{@code  \"description\": \"<String>\", \"changeEventDetailsLink\": \"urlString\" (optional), \"externalLinkToEntity\": \"urlString\" (optional), \"name\": \"changeEventName\" }}{@code  }}{@code '"),
 *                                 jsonProperty("type", "Alert")
 *                             )))
 *                         .category("Alert")
 *                         .build(),
 *                     MonitoredServiceRequestChangeSourceArgs.builder()
 *                         .name("customff")
 *                         .identifier("customff")
 *                         .type("CustomFF")
 *                         .enabled(true)
 *                         .category("FeatureFlag")
 *                         .spec(serializeJson(
 *                             jsonObject(
 *                                 jsonProperty("type", "FeatureFlag")
 *                             )))
 *                         .build(),
 *                     MonitoredServiceRequestChangeSourceArgs.builder()
 *                         .name("customdeploy")
 *                         .identifier("customdeploy")
 *                         .type("CustomDeploy")
 *                         .enabled(true)
 *                         .category("Deployment")
 *                         .spec(serializeJson(
 *                             jsonObject(
 *                                 jsonProperty("type", "Deployment")
 *                             )))
 *                         .build(),
 *                     MonitoredServiceRequestChangeSourceArgs.builder()
 *                         .name("customincident")
 *                         .identifier("customincident")
 *                         .type("CustomIncident")
 *                         .enabled(true)
 *                         .category("Alert")
 *                         .spec(serializeJson(
 *                             jsonObject(
 *                                 jsonProperty("type", "Alert"),
 *                                 jsonProperty("authorizationToken", "abc")
 *                             )))
 *                         .build())
 *                 .notificationRuleRefs(                
 *                     MonitoredServiceRequestNotificationRuleRefArgs.builder()
 *                         .notificationRuleRef("notification_rule_ref")
 *                         .enabled(true)
 *                         .build(),
 *                     MonitoredServiceRequestNotificationRuleRefArgs.builder()
 *                         .notificationRuleRef("notification_rule_ref1")
 *                         .enabled(false)
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *         //Sample template for Sumologic Metrics Health Source
 *         var example1 = new MonitoredService("example1", MonitoredServiceArgs.builder()
 *             .orgId("org_id")
 *             .projectId("project_id")
 *             .identifier("identifier")
 *             .request(MonitoredServiceRequestArgs.builder()
 *                 .name("name")
 *                 .type("Application")
 *                 .description("description")
 *                 .serviceRef("service_ref")
 *                 .environmentRef("environment_ref")
 *                 .tags(                
 *                     "foo:bar",
 *                     "bar:foo")
 *                 .healthSources(MonitoredServiceRequestHealthSourceArgs.builder()
 *                     .name("sumologicmetrics")
 *                     .identifier("sumo_metric_identifier")
 *                     .type("SumologicMetrics")
 *                     .version("v2")
 *                     .spec(serializeJson(
 *                         jsonObject(
 *                             jsonProperty("connectorRef", "connectorRef"),
 *                             jsonProperty("queryDefinitions", jsonArray(
 *                                 jsonObject(
 *                                     jsonProperty("name", "metric_cpu"),
 *                                     jsonProperty("identifier", "metric_cpu"),
 *                                     jsonProperty("query", "metric=cpu"),
 *                                     jsonProperty("groupName", "g1"),
 *                                     jsonProperty("queryParams", jsonObject(
 *                                         jsonProperty("serviceInstanceField", "_sourcehost")
 *                                     )),
 *                                     jsonProperty("riskProfile", jsonObject(
 *                                         jsonProperty("riskCategory", "Performance_Other"),
 *                                         jsonProperty("thresholdTypes", jsonArray("ACT_WHEN_HIGHER"))
 *                                     )),
 *                                     jsonProperty("liveMonitoringEnabled", "true"),
 *                                     jsonProperty("continuousVerificationEnabled", "true"),
 *                                     jsonProperty("sliEnabled", "false"),
 *                                     jsonProperty("metricThresholds", jsonArray(
 *                                         jsonObject(
 *                                             jsonProperty("type", "IgnoreThreshold"),
 *                                             jsonProperty("spec", jsonObject(
 *                                                 jsonProperty("action", "Ignore")
 *                                             )),
 *                                             jsonProperty("criteria", jsonObject(
 *                                                 jsonProperty("type", "Absolute"),
 *                                                 jsonProperty("spec", jsonObject(
 *                                                     jsonProperty("greaterThan", 100)
 *                                                 ))
 *                                             )),
 *                                             jsonProperty("metricType", "Custom"),
 *                                             jsonProperty("metricName", "metric_cpu")
 *                                         ), 
 *                                         jsonObject(
 *                                             jsonProperty("type", "FailImmediately"),
 *                                             jsonProperty("spec", jsonObject(
 *                                                 jsonProperty("action", "FailAfterOccurrence"),
 *                                                 jsonProperty("spec", jsonObject(
 *                                                     jsonProperty("count", 2)
 *                                                 ))
 *                                             )),
 *                                             jsonProperty("criteria", jsonObject(
 *                                                 jsonProperty("type", "Absolute"),
 *                                                 jsonProperty("spec", jsonObject(
 *                                                     jsonProperty("greaterThan", 100)
 *                                                 ))
 *                                             )),
 *                                             jsonProperty("metricType", "Custom"),
 *                                             jsonProperty("metricName", "metric_cpu")
 *                                         )
 *                                     ))
 *                                 ), 
 *                                 jsonObject(
 *                                     jsonProperty("name", "name2"),
 *                                     jsonProperty("identifier", "identifier2"),
 *                                     jsonProperty("groupName", "g2"),
 *                                     jsonProperty("query", "metric=memory"),
 *                                     jsonProperty("queryParams", jsonObject(
 *                                         jsonProperty("serviceInstanceField", "_sourcehost")
 *                                     )),
 *                                     jsonProperty("riskProfile", jsonObject(
 *                                         jsonProperty("riskCategory", "Performance_Other"),
 *                                         jsonProperty("thresholdTypes", jsonArray("ACT_WHEN_HIGHER"))
 *                                     )),
 *                                     jsonProperty("liveMonitoringEnabled", "false"),
 *                                     jsonProperty("continuousVerificationEnabled", "false"),
 *                                     jsonProperty("sliEnabled", "false")
 *                                 )
 *                             ))
 *                         )))
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         //Sample template for Sumologic Log Health Source
 *         var example2 = new MonitoredService("example2", MonitoredServiceArgs.builder()
 *             .orgId("org_id")
 *             .projectId("project_id")
 *             .identifier("identifier")
 *             .request(MonitoredServiceRequestArgs.builder()
 *                 .name("name")
 *                 .type("Application")
 *                 .description("description")
 *                 .serviceRef("service_ref")
 *                 .environmentRef("environment_ref")
 *                 .tags(                
 *                     "foo:bar",
 *                     "bar:foo")
 *                 .healthSources(MonitoredServiceRequestHealthSourceArgs.builder()
 *                     .name("sumologic")
 *                     .identifier("sumo_metric_identifier")
 *                     .type("SumologicLogs")
 *                     .version("v2")
 *                     .spec(serializeJson(
 *                         jsonObject(
 *                             jsonProperty("connectorRef", "connectorRef"),
 *                             jsonProperty("queryDefinitions", jsonArray(
 *                                 jsonObject(
 *                                     jsonProperty("name", "log1"),
 *                                     jsonProperty("identifier", "log1"),
 *                                     jsonProperty("query", "*"),
 *                                     jsonProperty("groupName", "Logs Group"),
 *                                     jsonProperty("queryParams", jsonObject(
 *                                         jsonProperty("serviceInstanceField", "_sourcehost")
 *                                     ))
 *                                 ), 
 *                                 jsonObject(
 *                                     jsonProperty("name", "log2"),
 *                                     jsonProperty("identifier", "identifier2"),
 *                                     jsonProperty("groupName", "g2"),
 *                                     jsonProperty("query", "error"),
 *                                     jsonProperty("queryParams", jsonObject(
 *                                         jsonProperty("serviceInstanceField", "_sourcehost")
 *                                     ))
 *                                 )
 *                             ))
 *                         )))
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         //Sample template for Splunk Signal FX Health Source
 *         var example3 = new MonitoredService("example3", MonitoredServiceArgs.builder()
 *             .orgId("org_id")
 *             .projectId("project_id")
 *             .identifier("identifier")
 *             .request(MonitoredServiceRequestArgs.builder()
 *                 .name("name")
 *                 .type("Application")
 *                 .description("description")
 *                 .serviceRef("service_ref")
 *                 .environmentRef("environment_ref")
 *                 .tags(                
 *                     "foo:bar",
 *                     "bar:foo")
 *                 .healthSources(MonitoredServiceRequestHealthSourceArgs.builder()
 *                     .name("signalfxmetrics")
 *                     .identifier("signalfxmetrics")
 *                     .type("SplunkSignalFXMetrics")
 *                     .version("v2")
 *                     .spec(serializeJson(
 *                         jsonObject(
 *                             jsonProperty("connectorRef", "connectorRef"),
 *                             jsonProperty("queryDefinitions", jsonArray(
 *                                 jsonObject(
 *                                     jsonProperty("name", "metric_infra_cpu"),
 *                                     jsonProperty("identifier", "metric_infra_cpu"),
 *                                     jsonProperty("query", "***"),
 *                                     jsonProperty("groupName", "g"),
 *                                     jsonProperty("riskProfile", jsonObject(
 *                                         jsonProperty("riskCategory", "Errors"),
 *                                         jsonProperty("thresholdTypes", jsonArray(
 *                                             "ACT_WHEN_HIGHER", 
 *                                             "ACT_WHEN_LOWER"
 *                                         ))
 *                                     )),
 *                                     jsonProperty("liveMonitoringEnabled", "true"),
 *                                     jsonProperty("continuousVerificationEnabled", "true"),
 *                                     jsonProperty("sliEnabled", "false")
 *                                 ), 
 *                                 jsonObject(
 *                                     jsonProperty("name", "name2"),
 *                                     jsonProperty("identifier", "identifier2"),
 *                                     jsonProperty("groupName", "g2"),
 *                                     jsonProperty("query", "*"),
 *                                     jsonProperty("riskProfile", jsonObject(
 *                                         jsonProperty("riskCategory", "Performance_Other"),
 *                                         jsonProperty("thresholdTypes", jsonArray("ACT_WHEN_HIGHER"))
 *                                     )),
 *                                     jsonProperty("liveMonitoringEnabled", "true"),
 *                                     jsonProperty("continuousVerificationEnabled", "false"),
 *                                     jsonProperty("sliEnabled", "false"),
 *                                     jsonProperty("metricThresholds", jsonArray(
 *                                         jsonObject(
 *                                             jsonProperty("type", "IgnoreThreshold"),
 *                                             jsonProperty("spec", jsonObject(
 *                                                 jsonProperty("action", "Ignore")
 *                                             )),
 *                                             jsonProperty("criteria", jsonObject(
 *                                                 jsonProperty("type", "Absolute"),
 *                                                 jsonProperty("spec", jsonObject(
 *                                                     jsonProperty("greaterThan", 100)
 *                                                 ))
 *                                             )),
 *                                             jsonProperty("metrictype", "Custom"),
 *                                             jsonProperty("metricName", "identifier2")
 *                                         ), 
 *                                         jsonObject(
 *                                             jsonProperty("type", "FailImmediately"),
 *                                             jsonProperty("spec", jsonObject(
 *                                                 jsonProperty("action", "FailAfterOccurrence"),
 *                                                 jsonProperty("spec", jsonObject(
 *                                                     jsonProperty("count", 2)
 *                                                 ))
 *                                             )),
 *                                             jsonProperty("criteria", jsonObject(
 *                                                 jsonProperty("type", "Absolute"),
 *                                                 jsonProperty("spec", jsonObject(
 *                                                     jsonProperty("greaterThan", 100)
 *                                                 ))
 *                                             )),
 *                                             jsonProperty("metricType", "Custom"),
 *                                             jsonProperty("metricName", "identifier2")
 *                                         )
 *                                     ))
 *                                 )
 *                             ))
 *                         )))
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         //Sample template for Grafana Loki Log Health Source
 *         var example4 = new MonitoredService("example4", MonitoredServiceArgs.builder()
 *             .orgId("org_id")
 *             .projectId("project_id")
 *             .identifier("identifier")
 *             .request(MonitoredServiceRequestArgs.builder()
 *                 .name("name")
 *                 .type("Application")
 *                 .description("description")
 *                 .serviceRef("service_ref")
 *                 .environmentRef("environment_ref")
 *                 .tags(                
 *                     "foo:bar",
 *                     "bar:foo")
 *                 .healthSources(MonitoredServiceRequestHealthSourceArgs.builder()
 *                     .name("Test")
 *                     .identifier("Test")
 *                     .type("GrafanaLokiLogs")
 *                     .version("v2")
 *                     .spec(serializeJson(
 *                         jsonObject(
 *                             jsonProperty("connectorRef", "connectorRef"),
 *                             jsonProperty("queryDefinitions", jsonArray(
 *                                 jsonObject(
 *                                     jsonProperty("name", "Demo"),
 *                                     jsonProperty("identifier", "Demo"),
 *                                     jsonProperty("query", "}{{@code job=~\".+\"}}{@code "),
 *                                     jsonProperty("groupName", "Log_Group"),
 *                                     jsonProperty("queryParams", jsonObject(
 *                                         jsonProperty("serviceInstanceField", "job")
 *                                     ))
 *                                 ), 
 *                                 jsonObject(
 *                                     jsonProperty("name", "log2"),
 *                                     jsonProperty("identifier", "identifier2"),
 *                                     jsonProperty("groupName", "g2"),
 *                                     jsonProperty("query", "error"),
 *                                     jsonProperty("queryParams", jsonObject(
 *                                         jsonProperty("serviceInstanceField", "_sourcehost")
 *                                     )),
 *                                     jsonProperty("liveMonitoringEnabled", "false"),
 *                                     jsonProperty("continuousVerificationEnabled", "false"),
 *                                     jsonProperty("sliEnabled", "false")
 *                                 )
 *                             ))
 *                         )))
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         //Sample template for Azure Metrics Health Source
 *         var example5 = new MonitoredService("example5", MonitoredServiceArgs.builder()
 *             .orgId("org_id")
 *             .projectId("project_id")
 *             .identifier("identifier")
 *             .request(MonitoredServiceRequestArgs.builder()
 *                 .name("name")
 *                 .type("Application")
 *                 .description("description")
 *                 .serviceRef("service_ref")
 *                 .environmentRef("environment_ref")
 *                 .tags(                
 *                     "foo:bar",
 *                     "bar:foo")
 *                 .healthSources(MonitoredServiceRequestHealthSourceArgs.builder()
 *                     .name("azure metrics verify step")
 *                     .identifier("azure_metrics_verify_step")
 *                     .type("AzureMetrics")
 *                     .version("v2")
 *                     .spec(serializeJson(
 *                         jsonObject(
 *                             jsonProperty("connectorRef", "connectorRef"),
 *                             jsonProperty("queryDefinitions", jsonArray(
 *                                 jsonObject(
 *                                     jsonProperty("name", "metric"),
 *                                     jsonProperty("identifier", "metric"),
 *                                     jsonProperty("query", "default"),
 *                                     jsonProperty("groupName", "g1"),
 *                                     jsonProperty("queryParams", jsonObject(
 *                                         jsonProperty("serviceInstanceField", "host"),
 *                                         jsonProperty("index", "/subscriptions/12d2db62-5aa9-471d-84bb-faa489b3e319/resourceGroups/srm-test/providers/Microsoft.ContainerService/managedClusters/srm-test"),
 *                                         jsonProperty("healthSourceMetricName", "cpuUsagePercentage"),
 *                                         jsonProperty("healthSourceMetricNamespace", "insights.container/nodes"),
 *                                         jsonProperty("aggregationType", "average")
 *                                     )),
 *                                     jsonProperty("riskProfile", jsonObject(
 *                                         jsonProperty("riskCategory", "Performance_Other"),
 *                                         jsonProperty("thresholdTypes", jsonArray("ACT_WHEN_HIGHER"))
 *                                     )),
 *                                     jsonProperty("liveMonitoringEnabled", "true"),
 *                                     jsonProperty("continuousVerificationEnabled", "true"),
 *                                     jsonProperty("sliEnabled", "false"),
 *                                     jsonProperty("metricThresholds", jsonArray(
 *                                         jsonObject(
 *                                             jsonProperty("type", "IgnoreThreshold"),
 *                                             jsonProperty("spec", jsonObject(
 *                                                 jsonProperty("action", "Ignore")
 *                                             )),
 *                                             jsonProperty("criteria", jsonObject(
 *                                                 jsonProperty("type", "Absolute"),
 *                                                 jsonProperty("spec", jsonObject(
 *                                                     jsonProperty("greaterThan", 100)
 *                                                 ))
 *                                             )),
 *                                             jsonProperty("metrictype", "Custom"),
 *                                             jsonProperty("metricName", "metric")
 *                                         ), 
 *                                         jsonObject(
 *                                             jsonProperty("type", "FailImmediately"),
 *                                             jsonProperty("spec", jsonObject(
 *                                                 jsonProperty("action", "FailAfterOccurrence"),
 *                                                 jsonProperty("spec", jsonObject(
 *                                                     jsonProperty("count", 2)
 *                                                 ))
 *                                             )),
 *                                             jsonProperty("criteria", jsonObject(
 *                                                 jsonProperty("type", "Absolute"),
 *                                                 jsonProperty("spec", jsonObject(
 *                                                     jsonProperty("greaterThan", 100)
 *                                                 ))
 *                                             )),
 *                                             jsonProperty("metricType", "Custom"),
 *                                             jsonProperty("metricName", "metric")
 *                                         )
 *                                     ))
 *                                 ), 
 *                                 jsonObject(
 *                                     jsonProperty("name", "name2"),
 *                                     jsonProperty("identifier", "identifier2"),
 *                                     jsonProperty("groupName", "g2"),
 *                                     jsonProperty("queryParams", jsonObject(
 *                                         jsonProperty("serviceInstanceField", "host"),
 *                                         jsonProperty("index", "/subscriptions/12d2db62-5aa9-471d-84bb-faa489b3e319/resourceGroups/srm-test/providers/Microsoft.ContainerService/managedClusters/srm-test"),
 *                                         jsonProperty("healthSourceMetricName", "cpuUsagePercentage"),
 *                                         jsonProperty("healthSourceMetricNamespace", "insights.container/nodes"),
 *                                         jsonProperty("aggregationType", "average")
 *                                     )),
 *                                     jsonProperty("riskProfile", jsonObject(
 *                                         jsonProperty("riskCategory", "Performance_Other"),
 *                                         jsonProperty("thresholdTypes", jsonArray("ACT_WHEN_HIGHER"))
 *                                     )),
 *                                     jsonProperty("liveMonitoringEnabled", "false"),
 *                                     jsonProperty("continuousVerificationEnabled", "false"),
 *                                     jsonProperty("sliEnabled", "false")
 *                                 )
 *                             ))
 *                         )))
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         //Sample template for Azure Log Health Source
 *         var example6 = new MonitoredService("example6", MonitoredServiceArgs.builder()
 *             .orgId("org_id")
 *             .projectId("project_id")
 *             .identifier("identifier")
 *             .request(MonitoredServiceRequestArgs.builder()
 *                 .name("name")
 *                 .type("Application")
 *                 .description("description")
 *                 .serviceRef("service_ref")
 *                 .environmentRef("environment_ref")
 *                 .tags(                
 *                     "foo:bar",
 *                     "bar:foo")
 *                 .healthSources(MonitoredServiceRequestHealthSourceArgs.builder()
 *                     .name("Demo azure")
 *                     .identifier("Demo_azure")
 *                     .type("AzureLogs")
 *                     .version("v2")
 *                     .spec(serializeJson(
 *                         jsonObject(
 *                             jsonProperty("connectorRef", "connectorRef"),
 *                             jsonProperty("queryDefinitions", jsonArray(jsonObject(
 *                                 jsonProperty("name", "name2"),
 *                                 jsonProperty("identifier", "identifier2"),
 *                                 jsonProperty("groupName", "g2"),
 *                                 jsonProperty("query", "*"),
 *                                 jsonProperty("queryParams", jsonObject(
 *                                     jsonProperty("serviceInstanceField", "Name"),
 *                                     jsonProperty("timeStampIdentifier", "StartedTime"),
 *                                     jsonProperty("messageIdentifier", "Image"),
 *                                     jsonProperty("index", "/subscriptions/12d2db62-5aa9-471d-84bb-faa489b3e319/resourceGroups/srm-test/providers/Microsoft.ContainerService/managedClusters/srm-test")
 *                                 )),
 *                                 jsonProperty("liveMonitoringEnabled", "false"),
 *                                 jsonProperty("continuousVerificationEnabled", "false")
 *                             )))
 *                         )))
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         //Sample template for Prometheus Metrics Health Source
 *         var example7 = new MonitoredService("example7", MonitoredServiceArgs.builder()
 *             .orgId("org_id")
 *             .projectId("project_id")
 *             .identifier("identifier")
 *             .request(MonitoredServiceRequestArgs.builder()
 *                 .name("name")
 *                 .type("Application")
 *                 .description("description")
 *                 .serviceRef("service_ref")
 *                 .environmentRef("environment_ref")
 *                 .tags(                
 *                     "foo:bar",
 *                     "bar:foo")
 *                 .healthSources(MonitoredServiceRequestHealthSourceArgs.builder()
 *                     .name("prometheus metrics verify step")
 *                     .identifier("prometheus_metrics")
 *                     .type("Prometheus")
 *                     .spec(serializeJson(
 *                         jsonObject(
 *                             jsonProperty("connectorRef", "connectorRef"),
 *                             jsonProperty("metricDefinitions", jsonArray(jsonObject(
 *                                 jsonProperty("identifier", "Prometheus_Metric"),
 *                                 jsonProperty("metricName", "Prometheus Metric"),
 *                                 jsonProperty("riskProfile", jsonObject(
 *                                     jsonProperty("riskCategory", "Performance_Other"),
 *                                     jsonProperty("thresholdTypes", jsonArray("ACT_WHEN_HIGHER"))
 *                                 )),
 *                                 jsonProperty("analysis", jsonObject(
 *                                     jsonProperty("liveMonitoring", jsonObject(
 *                                         jsonProperty("enabled", true)
 *                                     )),
 *                                     jsonProperty("deploymentVerification", jsonObject(
 *                                         jsonProperty("enabled", true),
 *                                         jsonProperty("serviceInstanceFieldName", "pod_name")
 *                                     ))
 *                                 )),
 *                                 jsonProperty("query", "count(up}{{@code group=\"cv\",group=\"cv\"}}{@code )"),
 *                                 jsonProperty("groupName", "met"),
 *                                 jsonProperty("isManualQuery", true)
 *                             ))),
 *                             jsonProperty("metricPacks", jsonArray(jsonObject(
 *                                 jsonProperty("identifier", "Custom"),
 *                                 jsonProperty("metricThresholds", jsonArray(
 *                                     jsonObject(
 *                                         jsonProperty("type", "IgnoreThreshold"),
 *                                         jsonProperty("spec", jsonObject(
 *                                             jsonProperty("action", "Ignore")
 *                                         )),
 *                                         jsonProperty("criteria", jsonObject(
 *                                             jsonProperty("type", "Absolute"),
 *                                             jsonProperty("spec", jsonObject(
 *                                                 jsonProperty("greaterThan", 100)
 *                                             ))
 *                                         )),
 *                                         jsonProperty("metrictype", "Custom"),
 *                                         jsonProperty("metricName", "Prometheus Metric")
 *                                     ), 
 *                                     jsonObject(
 *                                         jsonProperty("type", "FailImmediately"),
 *                                         jsonProperty("spec", jsonObject(
 *                                             jsonProperty("action", "FailAfterOccurrence"),
 *                                             jsonProperty("spec", jsonObject(
 *                                                 jsonProperty("count", 2)
 *                                             ))
 *                                         )),
 *                                         jsonProperty("criteria", jsonObject(
 *                                             jsonProperty("type", "Absolute"),
 *                                             jsonProperty("spec", jsonObject(
 *                                                 jsonProperty("greaterThan", 100)
 *                                             ))
 *                                         )),
 *                                         jsonProperty("metricType", "Custom"),
 *                                         jsonProperty("metricName", "Prometheus Metric")
 *                                     )
 *                                 ))
 *                             )))
 *                         )))
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         //Sample template for Datadog Metrics Health Source
 *         var example8 = new MonitoredService("example8", MonitoredServiceArgs.builder()
 *             .orgId("org_id")
 *             .projectId("project_id")
 *             .identifier("identifier")
 *             .request(MonitoredServiceRequestArgs.builder()
 *                 .name("name")
 *                 .type("Application")
 *                 .description("description")
 *                 .serviceRef("service_ref")
 *                 .environmentRef("environment_ref")
 *                 .tags(                
 *                     "foo:bar",
 *                     "bar:foo")
 *                 .healthSources(MonitoredServiceRequestHealthSourceArgs.builder()
 *                     .name("ddm")
 *                     .identifier("ddm")
 *                     .type("DatadogMetrics")
 *                     .spec(serializeJson(
 *                         jsonObject(
 *                             jsonProperty("connectorRef", "connectorRef"),
 *                             jsonProperty("feature", "Datadog Cloud Metrics"),
 *                             jsonProperty("metricDefinitions", jsonArray(
 *                                 jsonObject(
 *                                     jsonProperty("metricName", "metric"),
 *                                     jsonProperty("metricPath", "M1"),
 *                                     jsonProperty("identifier", "metric"),
 *                                     jsonProperty("query", """
 * avg:kubernetes.cpu.limits}{{@code *}}{@code .rollup(avg, 60);
 * avg:kubernetes.cpu.limits}{{@code *}}{@code .rollup(avg, 30);
 * (a+b)/10                                    """),
 *                                     jsonProperty("isManualQuery", true),
 *                                     jsonProperty("isCustomCreatedMetric", true),
 *                                     jsonProperty("riskProfile", jsonObject(
 *                                         jsonProperty("riskCategory", "Performance_Other"),
 *                                         jsonProperty("thresholdTypes", jsonArray("ACT_WHEN_HIGHER"))
 *                                     )),
 *                                     jsonProperty("analysis", jsonObject(
 *                                         jsonProperty("liveMonitoring", jsonObject(
 *                                             jsonProperty("enabled", true)
 *                                         )),
 *                                         jsonProperty("deploymentVerification", jsonObject(
 *                                             jsonProperty("enabled", true),
 *                                             jsonProperty("serviceInstanceFieldName", "pod")
 *                                         ))
 *                                     ))
 *                                 ), 
 *                                 jsonObject(
 *                                     jsonProperty("metricName", "dashboard_metric_cpu"),
 *                                     jsonProperty("identifier", "metric_cpu"),
 *                                     jsonProperty("query", """
 * avg:kubernetes.cpu.limits}{{@code *}}{@code .rollup(avg, 60);
 * avg:kubernetes.cpu.limits}{{@code *}}{@code .rollup(avg, 30);
 * (a+b)/10                                    """),
 *                                     jsonProperty("isManualQuery", false),
 *                                     jsonProperty("dashboardName", "dashboard"),
 *                                     jsonProperty("metricPath", "M1"),
 *                                     jsonProperty("groupingQuery", "avg:kubernetes.cpu.limits}{{@code *}}{@code  by }{{@code host}}{@code .rollup(avg, 60)"),
 *                                     jsonProperty("metric", "kubernetes.cpu.limits"),
 *                                     jsonProperty("aggregation", "avg"),
 *                                     jsonProperty("isCustomCreatedMetric", true),
 *                                     jsonProperty("riskProfile", jsonObject(
 *                                         jsonProperty("riskCategory", "Performance_Other"),
 *                                         jsonProperty("thresholdTypes", jsonArray("ACT_WHEN_HIGHER"))
 *                                     )),
 *                                     jsonProperty("analysis", jsonObject(
 *                                         jsonProperty("liveMonitoring", jsonObject(
 *                                             jsonProperty("enabled", true)
 *                                         )),
 *                                         jsonProperty("deploymentVerification", jsonObject(
 *                                             jsonProperty("enabled", true),
 *                                             jsonProperty("serviceInstanceFieldName", "pod")
 *                                         ))
 *                                     ))
 *                                 )
 *                             )),
 *                             jsonProperty("metricPacks", jsonArray(jsonObject(
 *                                 jsonProperty("identifier", "Custom"),
 *                                 jsonProperty("metricThresholds", jsonArray(
 *                                     jsonObject(
 *                                         jsonProperty("type", "IgnoreThreshold"),
 *                                         jsonProperty("spec", jsonObject(
 *                                             jsonProperty("action", "Ignore")
 *                                         )),
 *                                         jsonProperty("criteria", jsonObject(
 *                                             jsonProperty("type", "Absolute"),
 *                                             jsonProperty("spec", jsonObject(
 *                                                 jsonProperty("greaterThan", 100)
 *                                             ))
 *                                         )),
 *                                         jsonProperty("metrictype", "Custom"),
 *                                         jsonProperty("metricName", "metric")
 *                                     ), 
 *                                     jsonObject(
 *                                         jsonProperty("type", "FailImmediately"),
 *                                         jsonProperty("spec", jsonObject(
 *                                             jsonProperty("action", "FailAfterOccurrence"),
 *                                             jsonProperty("spec", jsonObject(
 *                                                 jsonProperty("count", 2)
 *                                             ))
 *                                         )),
 *                                         jsonProperty("criteria", jsonObject(
 *                                             jsonProperty("type", "Absolute"),
 *                                             jsonProperty("spec", jsonObject(
 *                                                 jsonProperty("greaterThan", 100)
 *                                             ))
 *                                         )),
 *                                         jsonProperty("metricType", "Custom"),
 *                                         jsonProperty("metricName", "metric")
 *                                     )
 *                                 ))
 *                             )))
 *                         )))
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         //Sample template for New Relic Metrics Health Source
 *         var example9 = new MonitoredService("example9", MonitoredServiceArgs.builder()
 *             .orgId("org_id")
 *             .projectId("project_id")
 *             .identifier("identifier")
 *             .request(MonitoredServiceRequestArgs.builder()
 *                 .name("name")
 *                 .type("Application")
 *                 .description("description")
 *                 .serviceRef("service_ref")
 *                 .environmentRef("environment_ref")
 *                 .tags(                
 *                     "foo:bar",
 *                     "bar:foo")
 *                 .healthSources(MonitoredServiceRequestHealthSourceArgs.builder()
 *                     .name("name")
 *                     .identifier("identifier")
 *                     .type("NewRelic")
 *                     .spec(serializeJson(
 *                         jsonObject(
 *                             jsonProperty("connectorRef", "account.Newrelicautomation_do_not_delete"),
 *                             jsonProperty("feature", "apm"),
 *                             jsonProperty("applicationId", "107019083"),
 *                             jsonProperty("applicationName", "My Application"),
 *                             jsonProperty("metricData", jsonObject(
 *                                 jsonProperty("Performance", true)
 *                             )),
 *                             jsonProperty("metricPacks", jsonArray(jsonObject(
 *                                 jsonProperty("identifier", "Performance")
 *                             ))),
 *                             jsonProperty("newRelicMetricDefinitions", jsonArray(jsonObject(
 *                                 jsonProperty("identifier", "New_Relic_Metric"),
 *                                 jsonProperty("metricName", "New Relic Metric"),
 *                                 jsonProperty("riskProfile", jsonObject(
 *                                     jsonProperty("riskCategory", "Performance_Other"),
 *                                     jsonProperty("thresholdTypes", jsonArray("ACT_WHEN_HIGHER"))
 *                                 )),
 *                                 jsonProperty("analysis", jsonObject(
 *                                     jsonProperty("deploymentVerification", jsonObject(
 *                                         jsonProperty("enabled", true)
 *                                     ))
 *                                 )),
 *                                 jsonProperty("groupName", "group1"),
 *                                 jsonProperty("nrql", "SELECT count(apm.service.instance.count) FROM Metric WHERE appName LIKE 'My Application' TIMESERIES"),
 *                                 jsonProperty("responseMapping", jsonObject(
 *                                     jsonProperty("metricValueJsonPath", "$.['timeSeries'].[*].['results'].[*].['count']"),
 *                                     jsonProperty("timestampJsonPath", "$.['timeSeries'].[*].['beginTimeSeconds']")
 *                                 ))
 *                             ))),
 *                             jsonProperty("metricPacks", jsonArray(jsonObject(
 *                                 jsonProperty("identifier", "Custom"),
 *                                 jsonProperty("metricThresholds", jsonArray(
 *                                     jsonObject(
 *                                         jsonProperty("type", "IgnoreThreshold"),
 *                                         jsonProperty("spec", jsonObject(
 *                                             jsonProperty("action", "Ignore")
 *                                         )),
 *                                         jsonProperty("criteria", jsonObject(
 *                                             jsonProperty("type", "Absolute"),
 *                                             jsonProperty("spec", jsonObject(
 *                                                 jsonProperty("greaterThan", 100)
 *                                             ))
 *                                         )),
 *                                         jsonProperty("metricType", "Custom"),
 *                                         jsonProperty("metricName", "New Relic Metric")
 *                                     ), 
 *                                     jsonObject(
 *                                         jsonProperty("type", "FailImmediately"),
 *                                         jsonProperty("spec", jsonObject(
 *                                             jsonProperty("action", "FailAfterOccurrence"),
 *                                             jsonProperty("spec", jsonObject(
 *                                                 jsonProperty("count", 2)
 *                                             ))
 *                                         )),
 *                                         jsonProperty("criteria", jsonObject(
 *                                             jsonProperty("type", "Absolute"),
 *                                             jsonProperty("spec", jsonObject(
 *                                                 jsonProperty("greaterThan", 100)
 *                                             ))
 *                                         )),
 *                                         jsonProperty("metricType", "Custom"),
 *                                         jsonProperty("metricName", "New Relic Metric")
 *                                     )
 *                                 ))
 *                             )))
 *                         )))
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * 
 * ## Import
 * 
 * The `pulumi import` command can be used, for example:
 * 
 * Import account level monitored_service
 * 
 * ```sh
 * $ pulumi import harness:platform/monitoredService:MonitoredService example &lt;monitored_service_id&gt;
 * ```
 * 
 * Import organization level monitored_service
 * 
 * ```sh
 * $ pulumi import harness:platform/monitoredService:MonitoredService example &lt;org_id&gt;/&lt;monitored_service_id&gt;
 * ```
 * 
 * Import project level monitored_service
 * 
 * ```sh
 * $ pulumi import harness:platform/monitoredService:MonitoredService example &lt;org_id&gt;/&lt;project_id&gt;/&lt;monitored_service_id&gt;
 * ```
 * 
 */
@ResourceType(type="harness:platform/monitoredService:MonitoredService")
public class MonitoredService extends com.pulumi.resources.CustomResource {
    /**
     * Identifier of the monitored service.
     * 
     */
    @Export(name="identifier", refs={String.class}, tree="[0]")
    private Output<String> identifier;

    /**
     * @return Identifier of the monitored service.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }
    /**
     * Identifier of the organization in which the monitored service is configured.
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output<String> orgId;

    /**
     * @return Identifier of the organization in which the monitored service is configured.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }
    /**
     * Identifier of the project in which the monitored service is configured.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return Identifier of the project in which the monitored service is configured.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * Request for creating or updating a monitored service.
     * 
     */
    @Export(name="request", refs={MonitoredServiceRequest.class}, tree="[0]")
    private Output</* @Nullable */ MonitoredServiceRequest> request;

    /**
     * @return Request for creating or updating a monitored service.
     * 
     */
    public Output<Optional<MonitoredServiceRequest>> request() {
        return Codegen.optional(this.request);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MonitoredService(java.lang.String name) {
        this(name, MonitoredServiceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MonitoredService(java.lang.String name, MonitoredServiceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MonitoredService(java.lang.String name, MonitoredServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/monitoredService:MonitoredService", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private MonitoredService(java.lang.String name, Output<java.lang.String> id, @Nullable MonitoredServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/monitoredService:MonitoredService", name, state, makeResourceOptions(options, id), false);
    }

    private static MonitoredServiceArgs makeArgs(MonitoredServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? MonitoredServiceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MonitoredService get(java.lang.String name, Output<java.lang.String> id, @Nullable MonitoredServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MonitoredService(name, id, state, options);
    }
}
