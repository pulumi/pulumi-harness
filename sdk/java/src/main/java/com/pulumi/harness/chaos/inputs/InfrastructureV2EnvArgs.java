// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InfrastructureV2EnvArgs extends com.pulumi.resources.ResourceArgs {

    public static final InfrastructureV2EnvArgs Empty = new InfrastructureV2EnvArgs();

    /**
     * Variable name from a ConfigMap or Secret. Required when valueFrom is configMapKeyRef or secretKeyRef.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return Variable name from a ConfigMap or Secret. Required when valueFrom is configMapKeyRef or secretKeyRef.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * Name of the environment variable. Must be a C_IDENTIFIER.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the environment variable. Must be a C_IDENTIFIER.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Variable references $(VAR*NAME) are expanded using the container&#39;s environment. If the variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to &#34;&#34;.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return Variable references $(VAR*NAME) are expanded using the container&#39;s environment. If the variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to &#34;&#34;.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    /**
     * Source for the environment variable&#39;s value. Cannot be used if value is not empty.
     * 
     */
    @Import(name="valueFrom")
    private @Nullable Output<String> valueFrom;

    /**
     * @return Source for the environment variable&#39;s value. Cannot be used if value is not empty.
     * 
     */
    public Optional<Output<String>> valueFrom() {
        return Optional.ofNullable(this.valueFrom);
    }

    private InfrastructureV2EnvArgs() {}

    private InfrastructureV2EnvArgs(InfrastructureV2EnvArgs $) {
        this.key = $.key;
        this.name = $.name;
        this.value = $.value;
        this.valueFrom = $.valueFrom;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InfrastructureV2EnvArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InfrastructureV2EnvArgs $;

        public Builder() {
            $ = new InfrastructureV2EnvArgs();
        }

        public Builder(InfrastructureV2EnvArgs defaults) {
            $ = new InfrastructureV2EnvArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param key Variable name from a ConfigMap or Secret. Required when valueFrom is configMapKeyRef or secretKeyRef.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Variable name from a ConfigMap or Secret. Required when valueFrom is configMapKeyRef or secretKeyRef.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param name Name of the environment variable. Must be a C_IDENTIFIER.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the environment variable. Must be a C_IDENTIFIER.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param value Variable references $(VAR*NAME) are expanded using the container&#39;s environment. If the variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to &#34;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Variable references $(VAR*NAME) are expanded using the container&#39;s environment. If the variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to &#34;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        /**
         * @param valueFrom Source for the environment variable&#39;s value. Cannot be used if value is not empty.
         * 
         * @return builder
         * 
         */
        public Builder valueFrom(@Nullable Output<String> valueFrom) {
            $.valueFrom = valueFrom;
            return this;
        }

        /**
         * @param valueFrom Source for the environment variable&#39;s value. Cannot be used if value is not empty.
         * 
         * @return builder
         * 
         */
        public Builder valueFrom(String valueFrom) {
            return valueFrom(Output.of(valueFrom));
        }

        public InfrastructureV2EnvArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("InfrastructureV2EnvArgs", "name");
            }
            return $;
        }
    }

}
