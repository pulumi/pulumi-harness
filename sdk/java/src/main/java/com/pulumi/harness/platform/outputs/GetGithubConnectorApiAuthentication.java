// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GetGithubConnectorApiAuthenticationGithubApp;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGithubConnectorApiAuthentication {
    /**
     * @return Configuration for using the github app for interacting with the github api.
     * 
     */
    private List<GetGithubConnectorApiAuthenticationGithubApp> githubApps;
    /**
     * @return Personal access token for interacting with the github api. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    private String tokenRef;

    private GetGithubConnectorApiAuthentication() {}
    /**
     * @return Configuration for using the github app for interacting with the github api.
     * 
     */
    public List<GetGithubConnectorApiAuthenticationGithubApp> githubApps() {
        return this.githubApps;
    }
    /**
     * @return Personal access token for interacting with the github api. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public String tokenRef() {
        return this.tokenRef;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGithubConnectorApiAuthentication defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetGithubConnectorApiAuthenticationGithubApp> githubApps;
        private String tokenRef;
        public Builder() {}
        public Builder(GetGithubConnectorApiAuthentication defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.githubApps = defaults.githubApps;
    	      this.tokenRef = defaults.tokenRef;
        }

        @CustomType.Setter
        public Builder githubApps(List<GetGithubConnectorApiAuthenticationGithubApp> githubApps) {
            if (githubApps == null) {
              throw new MissingRequiredPropertyException("GetGithubConnectorApiAuthentication", "githubApps");
            }
            this.githubApps = githubApps;
            return this;
        }
        public Builder githubApps(GetGithubConnectorApiAuthenticationGithubApp... githubApps) {
            return githubApps(List.of(githubApps));
        }
        @CustomType.Setter
        public Builder tokenRef(String tokenRef) {
            if (tokenRef == null) {
              throw new MissingRequiredPropertyException("GetGithubConnectorApiAuthentication", "tokenRef");
            }
            this.tokenRef = tokenRef;
            return this;
        }
        public GetGithubConnectorApiAuthentication build() {
            final var _resultValue = new GetGithubConnectorApiAuthentication();
            _resultValue.githubApps = githubApps;
            _resultValue.tokenRef = tokenRef;
            return _resultValue;
        }
    }
}
