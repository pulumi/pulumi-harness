// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.chaos.outputs.GetSecurityGovernanceConditionFaultSpec;
import com.pulumi.harness.chaos.outputs.GetSecurityGovernanceConditionK8sSpec;
import com.pulumi.harness.chaos.outputs.GetSecurityGovernanceConditionMachineSpec;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecurityGovernanceConditionResult {
    /**
     * @return The description of the security governance condition
     * 
     */
    private String description;
    /**
     * @return Fault specification for the condition
     * 
     */
    private List<GetSecurityGovernanceConditionFaultSpec> faultSpecs;
    /**
     * @return The ID of the security governance condition. Either `id` or `name` must be specified.
     * 
     */
    private String id;
    /**
     * @return The infrastructure type (KubernetesV2, Linux, Windows)
     * 
     */
    private String infraType;
    /**
     * @return Kubernetes specific configuration
     * 
     */
    private List<GetSecurityGovernanceConditionK8sSpec> k8sSpecs;
    /**
     * @return Machine specific configuration
     * 
     */
    private List<GetSecurityGovernanceConditionMachineSpec> machineSpecs;
    /**
     * @return The name of the security governance condition. Either `id` or `name` must be specified.
     * 
     */
    private String name;
    /**
     * @return The organization ID of the security governance condition
     * 
     */
    private @Nullable String orgId;
    /**
     * @return The project ID of the security governance condition
     * 
     */
    private @Nullable String projectId;
    /**
     * @return Tags associated with the condition
     * 
     */
    private List<String> tags;

    private GetSecurityGovernanceConditionResult() {}
    /**
     * @return The description of the security governance condition
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Fault specification for the condition
     * 
     */
    public List<GetSecurityGovernanceConditionFaultSpec> faultSpecs() {
        return this.faultSpecs;
    }
    /**
     * @return The ID of the security governance condition. Either `id` or `name` must be specified.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The infrastructure type (KubernetesV2, Linux, Windows)
     * 
     */
    public String infraType() {
        return this.infraType;
    }
    /**
     * @return Kubernetes specific configuration
     * 
     */
    public List<GetSecurityGovernanceConditionK8sSpec> k8sSpecs() {
        return this.k8sSpecs;
    }
    /**
     * @return Machine specific configuration
     * 
     */
    public List<GetSecurityGovernanceConditionMachineSpec> machineSpecs() {
        return this.machineSpecs;
    }
    /**
     * @return The name of the security governance condition. Either `id` or `name` must be specified.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The organization ID of the security governance condition
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }
    /**
     * @return The project ID of the security governance condition
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return Tags associated with the condition
     * 
     */
    public List<String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityGovernanceConditionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private List<GetSecurityGovernanceConditionFaultSpec> faultSpecs;
        private String id;
        private String infraType;
        private List<GetSecurityGovernanceConditionK8sSpec> k8sSpecs;
        private List<GetSecurityGovernanceConditionMachineSpec> machineSpecs;
        private String name;
        private @Nullable String orgId;
        private @Nullable String projectId;
        private List<String> tags;
        public Builder() {}
        public Builder(GetSecurityGovernanceConditionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.faultSpecs = defaults.faultSpecs;
    	      this.id = defaults.id;
    	      this.infraType = defaults.infraType;
    	      this.k8sSpecs = defaults.k8sSpecs;
    	      this.machineSpecs = defaults.machineSpecs;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.projectId = defaults.projectId;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSecurityGovernanceConditionResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder faultSpecs(List<GetSecurityGovernanceConditionFaultSpec> faultSpecs) {
            if (faultSpecs == null) {
              throw new MissingRequiredPropertyException("GetSecurityGovernanceConditionResult", "faultSpecs");
            }
            this.faultSpecs = faultSpecs;
            return this;
        }
        public Builder faultSpecs(GetSecurityGovernanceConditionFaultSpec... faultSpecs) {
            return faultSpecs(List.of(faultSpecs));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecurityGovernanceConditionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder infraType(String infraType) {
            if (infraType == null) {
              throw new MissingRequiredPropertyException("GetSecurityGovernanceConditionResult", "infraType");
            }
            this.infraType = infraType;
            return this;
        }
        @CustomType.Setter
        public Builder k8sSpecs(List<GetSecurityGovernanceConditionK8sSpec> k8sSpecs) {
            if (k8sSpecs == null) {
              throw new MissingRequiredPropertyException("GetSecurityGovernanceConditionResult", "k8sSpecs");
            }
            this.k8sSpecs = k8sSpecs;
            return this;
        }
        public Builder k8sSpecs(GetSecurityGovernanceConditionK8sSpec... k8sSpecs) {
            return k8sSpecs(List.of(k8sSpecs));
        }
        @CustomType.Setter
        public Builder machineSpecs(List<GetSecurityGovernanceConditionMachineSpec> machineSpecs) {
            if (machineSpecs == null) {
              throw new MissingRequiredPropertyException("GetSecurityGovernanceConditionResult", "machineSpecs");
            }
            this.machineSpecs = machineSpecs;
            return this;
        }
        public Builder machineSpecs(GetSecurityGovernanceConditionMachineSpec... machineSpecs) {
            return machineSpecs(List.of(machineSpecs));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSecurityGovernanceConditionResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(@Nullable String orgId) {

            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetSecurityGovernanceConditionResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public GetSecurityGovernanceConditionResult build() {
            final var _resultValue = new GetSecurityGovernanceConditionResult();
            _resultValue.description = description;
            _resultValue.faultSpecs = faultSpecs;
            _resultValue.id = id;
            _resultValue.infraType = infraType;
            _resultValue.k8sSpecs = k8sSpecs;
            _resultValue.machineSpecs = machineSpecs;
            _resultValue.name = name;
            _resultValue.orgId = orgId;
            _resultValue.projectId = projectId;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
