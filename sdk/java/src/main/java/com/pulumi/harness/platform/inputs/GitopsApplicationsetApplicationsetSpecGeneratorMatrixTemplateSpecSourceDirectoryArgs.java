// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsApplicationsetApplicationsetSpecGeneratorMatrixTemplateSpecSourceDirectoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsApplicationsetApplicationsetSpecGeneratorMatrixTemplateSpecSourceDirectoryArgs Empty = new GitopsApplicationsetApplicationsetSpecGeneratorMatrixTemplateSpecSourceDirectoryArgs();

    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: &#39;{config.yaml,env-use2/*}&#39;
     * 
     */
    @Import(name="exclude")
    private @Nullable Output<String> exclude;

    /**
     * @return Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: &#39;{config.yaml,env-use2/*}&#39;
     * 
     */
    public Optional<Output<String>> exclude() {
        return Optional.ofNullable(this.exclude);
    }

    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: &#39;{*.yml,*.yaml}&#39;
     * 
     */
    @Import(name="include")
    private @Nullable Output<String> include;

    /**
     * @return Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: &#39;{*.yml,*.yaml}&#39;
     * 
     */
    public Optional<Output<String>> include() {
        return Optional.ofNullable(this.include);
    }

    /**
     * Jsonnet specific options.
     * 
     */
    @Import(name="jsonnet")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetArgs> jsonnet;

    /**
     * @return Jsonnet specific options.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetArgs>> jsonnet() {
        return Optional.ofNullable(this.jsonnet);
    }

    /**
     * Whether to scan a directory recursively for manifests.
     * 
     */
    @Import(name="recurse")
    private @Nullable Output<Boolean> recurse;

    /**
     * @return Whether to scan a directory recursively for manifests.
     * 
     */
    public Optional<Output<Boolean>> recurse() {
        return Optional.ofNullable(this.recurse);
    }

    private GitopsApplicationsetApplicationsetSpecGeneratorMatrixTemplateSpecSourceDirectoryArgs() {}

    private GitopsApplicationsetApplicationsetSpecGeneratorMatrixTemplateSpecSourceDirectoryArgs(GitopsApplicationsetApplicationsetSpecGeneratorMatrixTemplateSpecSourceDirectoryArgs $) {
        this.exclude = $.exclude;
        this.include = $.include;
        this.jsonnet = $.jsonnet;
        this.recurse = $.recurse;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsApplicationsetApplicationsetSpecGeneratorMatrixTemplateSpecSourceDirectoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsApplicationsetApplicationsetSpecGeneratorMatrixTemplateSpecSourceDirectoryArgs $;

        public Builder() {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMatrixTemplateSpecSourceDirectoryArgs();
        }

        public Builder(GitopsApplicationsetApplicationsetSpecGeneratorMatrixTemplateSpecSourceDirectoryArgs defaults) {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMatrixTemplateSpecSourceDirectoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param exclude Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: &#39;{config.yaml,env-use2/*}&#39;
         * 
         * @return builder
         * 
         */
        public Builder exclude(@Nullable Output<String> exclude) {
            $.exclude = exclude;
            return this;
        }

        /**
         * @param exclude Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: &#39;{config.yaml,env-use2/*}&#39;
         * 
         * @return builder
         * 
         */
        public Builder exclude(String exclude) {
            return exclude(Output.of(exclude));
        }

        /**
         * @param include Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: &#39;{*.yml,*.yaml}&#39;
         * 
         * @return builder
         * 
         */
        public Builder include(@Nullable Output<String> include) {
            $.include = include;
            return this;
        }

        /**
         * @param include Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: &#39;{*.yml,*.yaml}&#39;
         * 
         * @return builder
         * 
         */
        public Builder include(String include) {
            return include(Output.of(include));
        }

        /**
         * @param jsonnet Jsonnet specific options.
         * 
         * @return builder
         * 
         */
        public Builder jsonnet(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetArgs> jsonnet) {
            $.jsonnet = jsonnet;
            return this;
        }

        /**
         * @param jsonnet Jsonnet specific options.
         * 
         * @return builder
         * 
         */
        public Builder jsonnet(GitopsApplicationsetApplicationsetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetArgs jsonnet) {
            return jsonnet(Output.of(jsonnet));
        }

        /**
         * @param recurse Whether to scan a directory recursively for manifests.
         * 
         * @return builder
         * 
         */
        public Builder recurse(@Nullable Output<Boolean> recurse) {
            $.recurse = recurse;
            return this;
        }

        /**
         * @param recurse Whether to scan a directory recursively for manifests.
         * 
         * @return builder
         * 
         */
        public Builder recurse(Boolean recurse) {
            return recurse(Output.of(recurse));
        }

        public GitopsApplicationsetApplicationsetSpecGeneratorMatrixTemplateSpecSourceDirectoryArgs build() {
            return $;
        }
    }

}
