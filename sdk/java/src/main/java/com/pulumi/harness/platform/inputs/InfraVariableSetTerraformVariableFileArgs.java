// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InfraVariableSetTerraformVariableFileArgs extends com.pulumi.resources.ResourceArgs {

    public static final InfraVariableSetTerraformVariableFileArgs Empty = new InfraVariableSetTerraformVariableFileArgs();

    /**
     * Repository is the name of the repository to fetch the code from.
     * 
     */
    @Import(name="repository", required=true)
    private Output<String> repository;

    /**
     * @return Repository is the name of the repository to fetch the code from.
     * 
     */
    public Output<String> repository() {
        return this.repository;
    }

    /**
     * Repository branch is the name of the branch to fetch the variables from. This cannot be set if repository commit or sha is set
     * 
     */
    @Import(name="repositoryBranch")
    private @Nullable Output<String> repositoryBranch;

    /**
     * @return Repository branch is the name of the branch to fetch the variables from. This cannot be set if repository commit or sha is set
     * 
     */
    public Optional<Output<String>> repositoryBranch() {
        return Optional.ofNullable(this.repositoryBranch);
    }

    /**
     * Repository commit is tag to fetch the variables from. This cannot be set if repository branch or sha is set.
     * 
     */
    @Import(name="repositoryCommit")
    private @Nullable Output<String> repositoryCommit;

    /**
     * @return Repository commit is tag to fetch the variables from. This cannot be set if repository branch or sha is set.
     * 
     */
    public Optional<Output<String>> repositoryCommit() {
        return Optional.ofNullable(this.repositoryCommit);
    }

    /**
     * Repository connector is the reference to the connector used to fetch the variables.
     * 
     */
    @Import(name="repositoryConnector", required=true)
    private Output<String> repositoryConnector;

    /**
     * @return Repository connector is the reference to the connector used to fetch the variables.
     * 
     */
    public Output<String> repositoryConnector() {
        return this.repositoryConnector;
    }

    /**
     * Repository path is the path in which the variables reside.
     * 
     */
    @Import(name="repositoryPath")
    private @Nullable Output<String> repositoryPath;

    /**
     * @return Repository path is the path in which the variables reside.
     * 
     */
    public Optional<Output<String>> repositoryPath() {
        return Optional.ofNullable(this.repositoryPath);
    }

    /**
     * Repository commit is SHA to fetch the variables from. This cannot be set if repository branch or commit is set.
     * 
     */
    @Import(name="repositorySha")
    private @Nullable Output<String> repositorySha;

    /**
     * @return Repository commit is SHA to fetch the variables from. This cannot be set if repository branch or commit is set.
     * 
     */
    public Optional<Output<String>> repositorySha() {
        return Optional.ofNullable(this.repositorySha);
    }

    private InfraVariableSetTerraformVariableFileArgs() {}

    private InfraVariableSetTerraformVariableFileArgs(InfraVariableSetTerraformVariableFileArgs $) {
        this.repository = $.repository;
        this.repositoryBranch = $.repositoryBranch;
        this.repositoryCommit = $.repositoryCommit;
        this.repositoryConnector = $.repositoryConnector;
        this.repositoryPath = $.repositoryPath;
        this.repositorySha = $.repositorySha;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InfraVariableSetTerraformVariableFileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InfraVariableSetTerraformVariableFileArgs $;

        public Builder() {
            $ = new InfraVariableSetTerraformVariableFileArgs();
        }

        public Builder(InfraVariableSetTerraformVariableFileArgs defaults) {
            $ = new InfraVariableSetTerraformVariableFileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param repository Repository is the name of the repository to fetch the code from.
         * 
         * @return builder
         * 
         */
        public Builder repository(Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository Repository is the name of the repository to fetch the code from.
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        /**
         * @param repositoryBranch Repository branch is the name of the branch to fetch the variables from. This cannot be set if repository commit or sha is set
         * 
         * @return builder
         * 
         */
        public Builder repositoryBranch(@Nullable Output<String> repositoryBranch) {
            $.repositoryBranch = repositoryBranch;
            return this;
        }

        /**
         * @param repositoryBranch Repository branch is the name of the branch to fetch the variables from. This cannot be set if repository commit or sha is set
         * 
         * @return builder
         * 
         */
        public Builder repositoryBranch(String repositoryBranch) {
            return repositoryBranch(Output.of(repositoryBranch));
        }

        /**
         * @param repositoryCommit Repository commit is tag to fetch the variables from. This cannot be set if repository branch or sha is set.
         * 
         * @return builder
         * 
         */
        public Builder repositoryCommit(@Nullable Output<String> repositoryCommit) {
            $.repositoryCommit = repositoryCommit;
            return this;
        }

        /**
         * @param repositoryCommit Repository commit is tag to fetch the variables from. This cannot be set if repository branch or sha is set.
         * 
         * @return builder
         * 
         */
        public Builder repositoryCommit(String repositoryCommit) {
            return repositoryCommit(Output.of(repositoryCommit));
        }

        /**
         * @param repositoryConnector Repository connector is the reference to the connector used to fetch the variables.
         * 
         * @return builder
         * 
         */
        public Builder repositoryConnector(Output<String> repositoryConnector) {
            $.repositoryConnector = repositoryConnector;
            return this;
        }

        /**
         * @param repositoryConnector Repository connector is the reference to the connector used to fetch the variables.
         * 
         * @return builder
         * 
         */
        public Builder repositoryConnector(String repositoryConnector) {
            return repositoryConnector(Output.of(repositoryConnector));
        }

        /**
         * @param repositoryPath Repository path is the path in which the variables reside.
         * 
         * @return builder
         * 
         */
        public Builder repositoryPath(@Nullable Output<String> repositoryPath) {
            $.repositoryPath = repositoryPath;
            return this;
        }

        /**
         * @param repositoryPath Repository path is the path in which the variables reside.
         * 
         * @return builder
         * 
         */
        public Builder repositoryPath(String repositoryPath) {
            return repositoryPath(Output.of(repositoryPath));
        }

        /**
         * @param repositorySha Repository commit is SHA to fetch the variables from. This cannot be set if repository branch or commit is set.
         * 
         * @return builder
         * 
         */
        public Builder repositorySha(@Nullable Output<String> repositorySha) {
            $.repositorySha = repositorySha;
            return this;
        }

        /**
         * @param repositorySha Repository commit is SHA to fetch the variables from. This cannot be set if repository branch or commit is set.
         * 
         * @return builder
         * 
         */
        public Builder repositorySha(String repositorySha) {
            return repositorySha(Output.of(repositorySha));
        }

        public InfraVariableSetTerraformVariableFileArgs build() {
            if ($.repository == null) {
                throw new MissingRequiredPropertyException("InfraVariableSetTerraformVariableFileArgs", "repository");
            }
            if ($.repositoryConnector == null) {
                throw new MissingRequiredPropertyException("InfraVariableSetTerraformVariableFileArgs", "repositoryConnector");
            }
            return $;
        }
    }

}
