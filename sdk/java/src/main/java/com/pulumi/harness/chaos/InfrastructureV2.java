// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.chaos.InfrastructureV2Args;
import com.pulumi.harness.chaos.inputs.InfrastructureV2State;
import com.pulumi.harness.chaos.outputs.InfrastructureV2Env;
import com.pulumi.harness.chaos.outputs.InfrastructureV2Identifier;
import com.pulumi.harness.chaos.outputs.InfrastructureV2ImageRegistry;
import com.pulumi.harness.chaos.outputs.InfrastructureV2Mtls;
import com.pulumi.harness.chaos.outputs.InfrastructureV2Proxy;
import com.pulumi.harness.chaos.outputs.InfrastructureV2Toleration;
import com.pulumi.harness.chaos.outputs.InfrastructureV2Volume;
import com.pulumi.harness.chaos.outputs.InfrastructureV2VolumeMount;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for managing Harness Chaos Infrastructure V2.
 * 
 * ## Import
 * 
 * The `pulumi import` command can be used, for example:
 * 
 * Import Project level Chaos Infrastructure v2
 * 
 * ```sh
 * $ pulumi import harness:chaos/infrastructureV2:InfrastructureV2 example &lt;org_id&gt;/&lt;project_id&gt;/&lt;environment_id&gt;/&lt;infra_id&gt;
 * ```
 * 
 */
@ResourceType(type="harness:chaos/infrastructureV2:InfrastructureV2")
public class InfrastructureV2 extends com.pulumi.resources.CustomResource {
    /**
     * Enable AI features for the infrastructure.
     * 
     */
    @Export(name="aiEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> aiEnabled;

    /**
     * @return Enable AI features for the infrastructure.
     * 
     */
    public Output<Optional<Boolean>> aiEnabled() {
        return Codegen.optional(this.aiEnabled);
    }
    /**
     * Annotations to apply to the infrastructure pods.
     * 
     */
    @Export(name="annotation", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> annotation;

    /**
     * @return Annotations to apply to the infrastructure pods.
     * 
     */
    public Output<Optional<Map<String,String>>> annotation() {
        return Codegen.optional(this.annotation);
    }
    /**
     * Container configurations.
     * 
     */
    @Export(name="containers", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> containers;

    /**
     * @return Container configurations.
     * 
     */
    public Output<Optional<String>> containers() {
        return Codegen.optional(this.containers);
    }
    /**
     * Correlation ID for the request.
     * 
     */
    @Export(name="correlationId", refs={String.class}, tree="[0]")
    private Output<String> correlationId;

    /**
     * @return Correlation ID for the request.
     * 
     */
    public Output<String> correlationId() {
        return this.correlationId;
    }
    /**
     * Creation timestamp.
     * 
     */
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    /**
     * @return Creation timestamp.
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * Description of the infrastructure.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the infrastructure.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * ID of the discovery agent to use.
     * 
     */
    @Export(name="discoveryAgentId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> discoveryAgentId;

    /**
     * @return ID of the discovery agent to use.
     * 
     */
    public Output<Optional<String>> discoveryAgentId() {
        return Codegen.optional(this.discoveryAgentId);
    }
    /**
     * The ID of the environment.
     * 
     */
    @Export(name="environmentId", refs={String.class}, tree="[0]")
    private Output<String> environmentId;

    /**
     * @return The ID of the environment.
     * 
     */
    public Output<String> environmentId() {
        return this.environmentId;
    }
    /**
     * List of environment variables to set in the container.
     * 
     */
    @Export(name="envs", refs={List.class,InfrastructureV2Env.class}, tree="[0,1]")
    private Output</* @Nullable */ List<InfrastructureV2Env>> envs;

    /**
     * @return List of environment variables to set in the container.
     * 
     */
    public Output<Optional<List<InfrastructureV2Env>>> envs() {
        return Codegen.optional(this.envs);
    }
    /**
     * Identifier for the infrastructure.
     * 
     */
    @Export(name="identifiers", refs={List.class,InfrastructureV2Identifier.class}, tree="[0,1]")
    private Output<List<InfrastructureV2Identifier>> identifiers;

    /**
     * @return Identifier for the infrastructure.
     * 
     */
    public Output<List<InfrastructureV2Identifier>> identifiers() {
        return this.identifiers;
    }
    /**
     * Identity for the infrastructure.
     * 
     */
    @Export(name="identity", refs={String.class}, tree="[0]")
    private Output<String> identity;

    /**
     * @return Identity for the infrastructure.
     * 
     */
    public Output<String> identity() {
        return this.identity;
    }
    /**
     * Configuration for the container image registry.
     * 
     */
    @Export(name="imageRegistries", refs={List.class,InfrastructureV2ImageRegistry.class}, tree="[0,1]")
    private Output<List<InfrastructureV2ImageRegistry>> imageRegistries;

    /**
     * @return Configuration for the container image registry.
     * 
     */
    public Output<List<InfrastructureV2ImageRegistry>> imageRegistries() {
        return this.imageRegistries;
    }
    /**
     * ID of the infrastructure.
     * 
     */
    @Export(name="infraId", refs={String.class}, tree="[0]")
    private Output<String> infraId;

    /**
     * @return ID of the infrastructure.
     * 
     */
    public Output<String> infraId() {
        return this.infraId;
    }
    /**
     * Namespace where the infrastructure is installed.
     * 
     */
    @Export(name="infraNamespace", refs={String.class}, tree="[0]")
    private Output<String> infraNamespace;

    /**
     * @return Namespace where the infrastructure is installed.
     * 
     */
    public Output<String> infraNamespace() {
        return this.infraNamespace;
    }
    /**
     * Scope of the infrastructure. Valid values: NAMESPACE, CLUSTER
     * 
     */
    @Export(name="infraScope", refs={String.class}, tree="[0]")
    private Output<String> infraScope;

    /**
     * @return Scope of the infrastructure. Valid values: NAMESPACE, CLUSTER
     * 
     */
    public Output<String> infraScope() {
        return this.infraScope;
    }
    /**
     * Type of the infrastructure. Valid values: KUBERNETES, KUBERNETESV2
     * 
     */
    @Export(name="infraType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> infraType;

    /**
     * @return Type of the infrastructure. Valid values: KUBERNETES, KUBERNETESV2
     * 
     */
    public Output<Optional<String>> infraType() {
        return Codegen.optional(this.infraType);
    }
    /**
     * Skip TLS verification for the infrastructure.
     * 
     */
    @Export(name="insecureSkipVerify", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> insecureSkipVerify;

    /**
     * @return Skip TLS verification for the infrastructure.
     * 
     */
    public Output<Optional<Boolean>> insecureSkipVerify() {
        return Codegen.optional(this.insecureSkipVerify);
    }
    /**
     * Installation command for the infrastructure.
     * 
     */
    @Export(name="installCommand", refs={String.class}, tree="[0]")
    private Output<String> installCommand;

    /**
     * @return Installation command for the infrastructure.
     * 
     */
    public Output<String> installCommand() {
        return this.installCommand;
    }
    /**
     * Kubernetes connector identifier.
     * 
     */
    @Export(name="k8sConnectorId", refs={String.class}, tree="[0]")
    private Output<String> k8sConnectorId;

    /**
     * @return Kubernetes connector identifier.
     * 
     */
    public Output<String> k8sConnectorId() {
        return this.k8sConnectorId;
    }
    /**
     * Labels to apply to the infrastructure pods.
     * 
     */
    @Export(name="label", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> label;

    /**
     * @return Labels to apply to the infrastructure pods.
     * 
     */
    public Output<Optional<Map<String,String>>> label() {
        return Codegen.optional(this.label);
    }
    /**
     * mTLS configuration for the infrastructure.
     * 
     */
    @Export(name="mtls", refs={InfrastructureV2Mtls.class}, tree="[0]")
    private Output</* @Nullable */ InfrastructureV2Mtls> mtls;

    /**
     * @return mTLS configuration for the infrastructure.
     * 
     */
    public Output<Optional<InfrastructureV2Mtls>> mtls() {
        return Codegen.optional(this.mtls);
    }
    /**
     * Name of the infrastructure.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the infrastructure.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Kubernetes namespace where the infrastructure will be installed. Maps to the infrastructure namespace.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> namespace;

    /**
     * @return Kubernetes namespace where the infrastructure will be installed. Maps to the infrastructure namespace.
     * 
     */
    public Output<Optional<String>> namespace() {
        return Codegen.optional(this.namespace);
    }
    /**
     * Node selector for the infrastructure pods.
     * 
     */
    @Export(name="nodeSelector", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> nodeSelector;

    /**
     * @return Node selector for the infrastructure pods.
     * 
     */
    public Output<Optional<Map<String,String>>> nodeSelector() {
        return Codegen.optional(this.nodeSelector);
    }
    /**
     * The ID of the organization.
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output<String> orgId;

    /**
     * @return The ID of the organization.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }
    /**
     * The ID of the project.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return The ID of the project.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * Proxy configuration for the infrastructure.
     * 
     */
    @Export(name="proxy", refs={InfrastructureV2Proxy.class}, tree="[0]")
    private Output</* @Nullable */ InfrastructureV2Proxy> proxy;

    /**
     * @return Proxy configuration for the infrastructure.
     * 
     */
    public Output<Optional<InfrastructureV2Proxy>> proxy() {
        return Codegen.optional(this.proxy);
    }
    /**
     * Group ID to run the infrastructure as.
     * 
     */
    @Export(name="runAsGroup", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> runAsGroup;

    /**
     * @return Group ID to run the infrastructure as.
     * 
     */
    public Output<Optional<Integer>> runAsGroup() {
        return Codegen.optional(this.runAsGroup);
    }
    /**
     * User ID to run the infrastructure as.
     * 
     */
    @Export(name="runAsUser", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> runAsUser;

    /**
     * @return User ID to run the infrastructure as.
     * 
     */
    public Output<Optional<Integer>> runAsUser() {
        return Codegen.optional(this.runAsUser);
    }
    /**
     * Service account used by the infrastructure.
     * 
     */
    @Export(name="serviceAccount", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> serviceAccount;

    /**
     * @return Service account used by the infrastructure.
     * 
     */
    public Output<Optional<String>> serviceAccount() {
        return Codegen.optional(this.serviceAccount);
    }
    /**
     * Status of the infrastructure.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Status of the infrastructure.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * Tags for the infrastructure.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Tags for the infrastructure.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * If specified, the pod&#39;s tolerations.
     * 
     */
    @Export(name="tolerations", refs={List.class,InfrastructureV2Toleration.class}, tree="[0,1]")
    private Output</* @Nullable */ List<InfrastructureV2Toleration>> tolerations;

    /**
     * @return If specified, the pod&#39;s tolerations.
     * 
     */
    public Output<Optional<List<InfrastructureV2Toleration>>> tolerations() {
        return Codegen.optional(this.tolerations);
    }
    /**
     * Last update timestamp.
     * 
     */
    @Export(name="updatedAt", refs={String.class}, tree="[0]")
    private Output<String> updatedAt;

    /**
     * @return Last update timestamp.
     * 
     */
    public Output<String> updatedAt() {
        return this.updatedAt;
    }
    /**
     * Volume mounts for the container.
     * 
     */
    @Export(name="volumeMounts", refs={List.class,InfrastructureV2VolumeMount.class}, tree="[0,1]")
    private Output</* @Nullable */ List<InfrastructureV2VolumeMount>> volumeMounts;

    /**
     * @return Volume mounts for the container.
     * 
     */
    public Output<Optional<List<InfrastructureV2VolumeMount>>> volumeMounts() {
        return Codegen.optional(this.volumeMounts);
    }
    /**
     * Volumes to be created in the infrastructure.
     * 
     */
    @Export(name="volumes", refs={List.class,InfrastructureV2Volume.class}, tree="[0,1]")
    private Output</* @Nullable */ List<InfrastructureV2Volume>> volumes;

    /**
     * @return Volumes to be created in the infrastructure.
     * 
     */
    public Output<Optional<List<InfrastructureV2Volume>>> volumes() {
        return Codegen.optional(this.volumes);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public InfrastructureV2(java.lang.String name) {
        this(name, InfrastructureV2Args.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public InfrastructureV2(java.lang.String name, InfrastructureV2Args args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public InfrastructureV2(java.lang.String name, InfrastructureV2Args args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:chaos/infrastructureV2:InfrastructureV2", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private InfrastructureV2(java.lang.String name, Output<java.lang.String> id, @Nullable InfrastructureV2State state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:chaos/infrastructureV2:InfrastructureV2", name, state, makeResourceOptions(options, id), false);
    }

    private static InfrastructureV2Args makeArgs(InfrastructureV2Args args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? InfrastructureV2Args.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static InfrastructureV2 get(java.lang.String name, Output<java.lang.String> id, @Nullable InfrastructureV2State state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new InfrastructureV2(name, id, state, options);
    }
}
