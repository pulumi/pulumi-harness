// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InfrastructureV2VolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final InfrastructureV2VolumeArgs Empty = new InfrastructureV2VolumeArgs();

    /**
     * Name of the volume. Must be a DNS_LABEL and unique within the pod.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the volume. Must be a DNS_LABEL and unique within the pod.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Size limit of the volume. Example: &#39;10Gi&#39;, &#39;100Mi&#39;
     * 
     */
    @Import(name="sizeLimit")
    private @Nullable Output<String> sizeLimit;

    /**
     * @return Size limit of the volume. Example: &#39;10Gi&#39;, &#39;100Mi&#39;
     * 
     */
    public Optional<Output<String>> sizeLimit() {
        return Optional.ofNullable(this.sizeLimit);
    }

    private InfrastructureV2VolumeArgs() {}

    private InfrastructureV2VolumeArgs(InfrastructureV2VolumeArgs $) {
        this.name = $.name;
        this.sizeLimit = $.sizeLimit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InfrastructureV2VolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InfrastructureV2VolumeArgs $;

        public Builder() {
            $ = new InfrastructureV2VolumeArgs();
        }

        public Builder(InfrastructureV2VolumeArgs defaults) {
            $ = new InfrastructureV2VolumeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the volume. Must be a DNS_LABEL and unique within the pod.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the volume. Must be a DNS_LABEL and unique within the pod.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param sizeLimit Size limit of the volume. Example: &#39;10Gi&#39;, &#39;100Mi&#39;
         * 
         * @return builder
         * 
         */
        public Builder sizeLimit(@Nullable Output<String> sizeLimit) {
            $.sizeLimit = sizeLimit;
            return this;
        }

        /**
         * @param sizeLimit Size limit of the volume. Example: &#39;10Gi&#39;, &#39;100Mi&#39;
         * 
         * @return builder
         * 
         */
        public Builder sizeLimit(String sizeLimit) {
            return sizeLimit(Output.of(sizeLimit));
        }

        public InfrastructureV2VolumeArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("InfrastructureV2VolumeArgs", "name");
            }
            return $;
        }
    }

}
