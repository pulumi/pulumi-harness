// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HubArgs extends com.pulumi.resources.ResourceArgs {

    public static final HubArgs Empty = new HubArgs();

    /**
     * ID of the Git connector
     * 
     */
    @Import(name="connectorId", required=true)
    private Output<String> connectorId;

    /**
     * @return ID of the Git connector
     * 
     */
    public Output<String> connectorId() {
        return this.connectorId;
    }

    /**
     * Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
     * 
     */
    @Import(name="connectorScope")
    private @Nullable Output<String> connectorScope;

    /**
     * @return Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
     * 
     */
    public Optional<Output<String>> connectorScope() {
        return Optional.ofNullable(this.connectorScope);
    }

    /**
     * Description of the chaos hub
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the chaos hub
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether this is the default chaos hub
     * 
     */
    @Import(name="isDefault")
    private @Nullable Output<Boolean> isDefault;

    /**
     * @return Whether this is the default chaos hub
     * 
     */
    public Optional<Output<Boolean>> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    /**
     * Name of the chaos hub
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the chaos hub
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The organization ID of the chaos hub
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return The organization ID of the chaos hub
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * The project ID of the chaos hub
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The project ID of the chaos hub
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Git repository branch
     * 
     */
    @Import(name="repoBranch", required=true)
    private Output<String> repoBranch;

    /**
     * @return Git repository branch
     * 
     */
    public Output<String> repoBranch() {
        return this.repoBranch;
    }

    /**
     * Name of the Git repository (required for account-level connectors)
     * 
     */
    @Import(name="repoName")
    private @Nullable Output<String> repoName;

    /**
     * @return Name of the Git repository (required for account-level connectors)
     * 
     */
    public Optional<Output<String>> repoName() {
        return Optional.ofNullable(this.repoName);
    }

    /**
     * Tags to associate with the chaos hub
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags to associate with the chaos hub
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private HubArgs() {}

    private HubArgs(HubArgs $) {
        this.connectorId = $.connectorId;
        this.connectorScope = $.connectorScope;
        this.description = $.description;
        this.isDefault = $.isDefault;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.repoBranch = $.repoBranch;
        this.repoName = $.repoName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HubArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HubArgs $;

        public Builder() {
            $ = new HubArgs();
        }

        public Builder(HubArgs defaults) {
            $ = new HubArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectorId ID of the Git connector
         * 
         * @return builder
         * 
         */
        public Builder connectorId(Output<String> connectorId) {
            $.connectorId = connectorId;
            return this;
        }

        /**
         * @param connectorId ID of the Git connector
         * 
         * @return builder
         * 
         */
        public Builder connectorId(String connectorId) {
            return connectorId(Output.of(connectorId));
        }

        /**
         * @param connectorScope Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
         * 
         * @return builder
         * 
         */
        public Builder connectorScope(@Nullable Output<String> connectorScope) {
            $.connectorScope = connectorScope;
            return this;
        }

        /**
         * @param connectorScope Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
         * 
         * @return builder
         * 
         */
        public Builder connectorScope(String connectorScope) {
            return connectorScope(Output.of(connectorScope));
        }

        /**
         * @param description Description of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param isDefault Whether this is the default chaos hub
         * 
         * @return builder
         * 
         */
        public Builder isDefault(@Nullable Output<Boolean> isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        /**
         * @param isDefault Whether this is the default chaos hub
         * 
         * @return builder
         * 
         */
        public Builder isDefault(Boolean isDefault) {
            return isDefault(Output.of(isDefault));
        }

        /**
         * @param name Name of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId The organization ID of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The organization ID of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId The project ID of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project ID of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param repoBranch Git repository branch
         * 
         * @return builder
         * 
         */
        public Builder repoBranch(Output<String> repoBranch) {
            $.repoBranch = repoBranch;
            return this;
        }

        /**
         * @param repoBranch Git repository branch
         * 
         * @return builder
         * 
         */
        public Builder repoBranch(String repoBranch) {
            return repoBranch(Output.of(repoBranch));
        }

        /**
         * @param repoName Name of the Git repository (required for account-level connectors)
         * 
         * @return builder
         * 
         */
        public Builder repoName(@Nullable Output<String> repoName) {
            $.repoName = repoName;
            return this;
        }

        /**
         * @param repoName Name of the Git repository (required for account-level connectors)
         * 
         * @return builder
         * 
         */
        public Builder repoName(String repoName) {
            return repoName(Output.of(repoName));
        }

        /**
         * @param tags Tags to associate with the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to associate with the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags to associate with the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public HubArgs build() {
            if ($.connectorId == null) {
                throw new MissingRequiredPropertyException("HubArgs", "connectorId");
            }
            if ($.repoBranch == null) {
                throw new MissingRequiredPropertyException("HubArgs", "repoBranch");
            }
            return $;
        }
    }

}
