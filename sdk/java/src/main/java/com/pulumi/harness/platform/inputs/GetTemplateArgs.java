// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GetTemplateGitDetailsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTemplateArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTemplateArgs Empty = new GetTemplateArgs();

    /**
     * Version Label for Template.
     * 
     */
    @Import(name="branchName")
    private @Nullable Output<String> branchName;

    /**
     * @return Version Label for Template.
     * 
     */
    public Optional<Output<String>> branchName() {
        return Optional.ofNullable(this.branchName);
    }

    /**
     * Defines child template type.
     * 
     */
    @Import(name="childType")
    private @Nullable Output<String> childType;

    /**
     * @return Defines child template type.
     * 
     */
    public Optional<Output<String>> childType() {
        return Optional.ofNullable(this.childType);
    }

    /**
     * Contains parameters related to creating an Entity for Git Experience.
     * 
     */
    @Import(name="gitDetails")
    private @Nullable Output<GetTemplateGitDetailsArgs> gitDetails;

    /**
     * @return Contains parameters related to creating an Entity for Git Experience.
     * 
     */
    public Optional<Output<GetTemplateGitDetailsArgs>> gitDetails() {
        return Optional.ofNullable(this.gitDetails);
    }

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * True if given version for template to be set as stable.
     * 
     */
    @Import(name="isStable")
    private @Nullable Output<Boolean> isStable;

    /**
     * @return True if given version for template to be set as stable.
     * 
     */
    public Optional<Output<Boolean>> isStable() {
        return Optional.ofNullable(this.isStable);
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Scope of template.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return Scope of template.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Version Label for Template.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return Version Label for Template.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private GetTemplateArgs() {}

    private GetTemplateArgs(GetTemplateArgs $) {
        this.branchName = $.branchName;
        this.childType = $.childType;
        this.gitDetails = $.gitDetails;
        this.identifier = $.identifier;
        this.isStable = $.isStable;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.scope = $.scope;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTemplateArgs $;

        public Builder() {
            $ = new GetTemplateArgs();
        }

        public Builder(GetTemplateArgs defaults) {
            $ = new GetTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branchName Version Label for Template.
         * 
         * @return builder
         * 
         */
        public Builder branchName(@Nullable Output<String> branchName) {
            $.branchName = branchName;
            return this;
        }

        /**
         * @param branchName Version Label for Template.
         * 
         * @return builder
         * 
         */
        public Builder branchName(String branchName) {
            return branchName(Output.of(branchName));
        }

        /**
         * @param childType Defines child template type.
         * 
         * @return builder
         * 
         */
        public Builder childType(@Nullable Output<String> childType) {
            $.childType = childType;
            return this;
        }

        /**
         * @param childType Defines child template type.
         * 
         * @return builder
         * 
         */
        public Builder childType(String childType) {
            return childType(Output.of(childType));
        }

        /**
         * @param gitDetails Contains parameters related to creating an Entity for Git Experience.
         * 
         * @return builder
         * 
         */
        public Builder gitDetails(@Nullable Output<GetTemplateGitDetailsArgs> gitDetails) {
            $.gitDetails = gitDetails;
            return this;
        }

        /**
         * @param gitDetails Contains parameters related to creating an Entity for Git Experience.
         * 
         * @return builder
         * 
         */
        public Builder gitDetails(GetTemplateGitDetailsArgs gitDetails) {
            return gitDetails(Output.of(gitDetails));
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param isStable True if given version for template to be set as stable.
         * 
         * @return builder
         * 
         */
        public Builder isStable(@Nullable Output<Boolean> isStable) {
            $.isStable = isStable;
            return this;
        }

        /**
         * @param isStable True if given version for template to be set as stable.
         * 
         * @return builder
         * 
         */
        public Builder isStable(Boolean isStable) {
            return isStable(Output.of(isStable));
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param scope Scope of template.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Scope of template.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param version Version Label for Template.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Version Label for Template.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public GetTemplateArgs build() {
            return $;
        }
    }

}
