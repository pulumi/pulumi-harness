// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KubernetesConnectorOpenidConnectArgs extends com.pulumi.resources.ResourceArgs {

    public static final KubernetesConnectorOpenidConnectArgs Empty = new KubernetesConnectorOpenidConnectArgs();

    /**
     * Reference to the secret containing the client ID for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    @Import(name="clientIdRef", required=true)
    private Output<String> clientIdRef;

    /**
     * @return Reference to the secret containing the client ID for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public Output<String> clientIdRef() {
        return this.clientIdRef;
    }

    /**
     * The URL of the OpenID Connect issuer.
     * 
     */
    @Import(name="issuerUrl", required=true)
    private Output<String> issuerUrl;

    /**
     * @return The URL of the OpenID Connect issuer.
     * 
     */
    public Output<String> issuerUrl() {
        return this.issuerUrl;
    }

    /**
     * The URL of the Kubernetes cluster.
     * 
     */
    @Import(name="masterUrl", required=true)
    private Output<String> masterUrl;

    /**
     * @return The URL of the Kubernetes cluster.
     * 
     */
    public Output<String> masterUrl() {
        return this.masterUrl;
    }

    /**
     * Reference to the secret containing the password for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    @Import(name="passwordRef", required=true)
    private Output<String> passwordRef;

    /**
     * @return Reference to the secret containing the password for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public Output<String> passwordRef() {
        return this.passwordRef;
    }

    /**
     * Scopes to request for the connector.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return Scopes to request for the connector.
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * Reference to the secret containing the client secret for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    @Import(name="secretRef")
    private @Nullable Output<String> secretRef;

    /**
     * @return Reference to the secret containing the client secret for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public Optional<Output<String>> secretRef() {
        return Optional.ofNullable(this.secretRef);
    }

    /**
     * Username for the connector.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Username for the connector.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * Reference to the secret containing the username for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    @Import(name="usernameRef")
    private @Nullable Output<String> usernameRef;

    /**
     * @return Reference to the secret containing the username for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
     * 
     */
    public Optional<Output<String>> usernameRef() {
        return Optional.ofNullable(this.usernameRef);
    }

    private KubernetesConnectorOpenidConnectArgs() {}

    private KubernetesConnectorOpenidConnectArgs(KubernetesConnectorOpenidConnectArgs $) {
        this.clientIdRef = $.clientIdRef;
        this.issuerUrl = $.issuerUrl;
        this.masterUrl = $.masterUrl;
        this.passwordRef = $.passwordRef;
        this.scopes = $.scopes;
        this.secretRef = $.secretRef;
        this.username = $.username;
        this.usernameRef = $.usernameRef;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KubernetesConnectorOpenidConnectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KubernetesConnectorOpenidConnectArgs $;

        public Builder() {
            $ = new KubernetesConnectorOpenidConnectArgs();
        }

        public Builder(KubernetesConnectorOpenidConnectArgs defaults) {
            $ = new KubernetesConnectorOpenidConnectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientIdRef Reference to the secret containing the client ID for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder clientIdRef(Output<String> clientIdRef) {
            $.clientIdRef = clientIdRef;
            return this;
        }

        /**
         * @param clientIdRef Reference to the secret containing the client ID for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder clientIdRef(String clientIdRef) {
            return clientIdRef(Output.of(clientIdRef));
        }

        /**
         * @param issuerUrl The URL of the OpenID Connect issuer.
         * 
         * @return builder
         * 
         */
        public Builder issuerUrl(Output<String> issuerUrl) {
            $.issuerUrl = issuerUrl;
            return this;
        }

        /**
         * @param issuerUrl The URL of the OpenID Connect issuer.
         * 
         * @return builder
         * 
         */
        public Builder issuerUrl(String issuerUrl) {
            return issuerUrl(Output.of(issuerUrl));
        }

        /**
         * @param masterUrl The URL of the Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder masterUrl(Output<String> masterUrl) {
            $.masterUrl = masterUrl;
            return this;
        }

        /**
         * @param masterUrl The URL of the Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder masterUrl(String masterUrl) {
            return masterUrl(Output.of(masterUrl));
        }

        /**
         * @param passwordRef Reference to the secret containing the password for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder passwordRef(Output<String> passwordRef) {
            $.passwordRef = passwordRef;
            return this;
        }

        /**
         * @param passwordRef Reference to the secret containing the password for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder passwordRef(String passwordRef) {
            return passwordRef(Output.of(passwordRef));
        }

        /**
         * @param scopes Scopes to request for the connector.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes Scopes to request for the connector.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes Scopes to request for the connector.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param secretRef Reference to the secret containing the client secret for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder secretRef(@Nullable Output<String> secretRef) {
            $.secretRef = secretRef;
            return this;
        }

        /**
         * @param secretRef Reference to the secret containing the client secret for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder secretRef(String secretRef) {
            return secretRef(Output.of(secretRef));
        }

        /**
         * @param username Username for the connector.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username for the connector.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param usernameRef Reference to the secret containing the username for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder usernameRef(@Nullable Output<String> usernameRef) {
            $.usernameRef = usernameRef;
            return this;
        }

        /**
         * @param usernameRef Reference to the secret containing the username for the connector. To reference a secret at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference a secret at the account scope, prefix &#39;account` to the expression: account.{identifier}.
         * 
         * @return builder
         * 
         */
        public Builder usernameRef(String usernameRef) {
            return usernameRef(Output.of(usernameRef));
        }

        public KubernetesConnectorOpenidConnectArgs build() {
            if ($.clientIdRef == null) {
                throw new MissingRequiredPropertyException("KubernetesConnectorOpenidConnectArgs", "clientIdRef");
            }
            if ($.issuerUrl == null) {
                throw new MissingRequiredPropertyException("KubernetesConnectorOpenidConnectArgs", "issuerUrl");
            }
            if ($.masterUrl == null) {
                throw new MissingRequiredPropertyException("KubernetesConnectorOpenidConnectArgs", "masterUrl");
            }
            if ($.passwordRef == null) {
                throw new MissingRequiredPropertyException("KubernetesConnectorOpenidConnectArgs", "passwordRef");
            }
            return $;
        }
    }

}
