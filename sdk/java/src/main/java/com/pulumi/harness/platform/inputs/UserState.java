// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.UserRoleBindingArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserState extends com.pulumi.resources.ResourceArgs {

    public static final UserState Empty = new UserState();

    /**
     * Whether or not the user account is disabled.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Whether or not the user account is disabled.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * The email of the user.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return The email of the user.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * Whether or not the user account is externally managed.
     * 
     */
    @Import(name="externallyManaged")
    private @Nullable Output<Boolean> externallyManaged;

    /**
     * @return Whether or not the user account is externally managed.
     * 
     */
    public Optional<Output<Boolean>> externallyManaged() {
        return Optional.ofNullable(this.externallyManaged);
    }

    /**
     * Unique identifier of the user.
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return Unique identifier of the user.
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * Whether or not the user account is locked.
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return Whether or not the user account is locked.
     * 
     */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Name of the user.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the user.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Organization identifier of the user.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Organization identifier of the user.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Project identifier of the user.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Project identifier of the user.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Role Bindings of the user. Cannot be updated.
     * 
     */
    @Import(name="roleBindings")
    private @Nullable Output<List<UserRoleBindingArgs>> roleBindings;

    /**
     * @return Role Bindings of the user. Cannot be updated.
     * 
     */
    public Optional<Output<List<UserRoleBindingArgs>>> roleBindings() {
        return Optional.ofNullable(this.roleBindings);
    }

    /**
     * The user group of the user. Cannot be updated.
     * 
     */
    @Import(name="userGroups")
    private @Nullable Output<List<String>> userGroups;

    /**
     * @return The user group of the user. Cannot be updated.
     * 
     */
    public Optional<Output<List<String>>> userGroups() {
        return Optional.ofNullable(this.userGroups);
    }

    private UserState() {}

    private UserState(UserState $) {
        this.disabled = $.disabled;
        this.email = $.email;
        this.externallyManaged = $.externallyManaged;
        this.identifier = $.identifier;
        this.locked = $.locked;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.roleBindings = $.roleBindings;
        this.userGroups = $.userGroups;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserState $;

        public Builder() {
            $ = new UserState();
        }

        public Builder(UserState defaults) {
            $ = new UserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param disabled Whether or not the user account is disabled.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Whether or not the user account is disabled.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param email The email of the user.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email The email of the user.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param externallyManaged Whether or not the user account is externally managed.
         * 
         * @return builder
         * 
         */
        public Builder externallyManaged(@Nullable Output<Boolean> externallyManaged) {
            $.externallyManaged = externallyManaged;
            return this;
        }

        /**
         * @param externallyManaged Whether or not the user account is externally managed.
         * 
         * @return builder
         * 
         */
        public Builder externallyManaged(Boolean externallyManaged) {
            return externallyManaged(Output.of(externallyManaged));
        }

        /**
         * @param identifier Unique identifier of the user.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier of the user.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param locked Whether or not the user account is locked.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked Whether or not the user account is locked.
         * 
         * @return builder
         * 
         */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param name Name of the user.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the user.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId Organization identifier of the user.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Organization identifier of the user.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Project identifier of the user.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project identifier of the user.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param roleBindings Role Bindings of the user. Cannot be updated.
         * 
         * @return builder
         * 
         */
        public Builder roleBindings(@Nullable Output<List<UserRoleBindingArgs>> roleBindings) {
            $.roleBindings = roleBindings;
            return this;
        }

        /**
         * @param roleBindings Role Bindings of the user. Cannot be updated.
         * 
         * @return builder
         * 
         */
        public Builder roleBindings(List<UserRoleBindingArgs> roleBindings) {
            return roleBindings(Output.of(roleBindings));
        }

        /**
         * @param roleBindings Role Bindings of the user. Cannot be updated.
         * 
         * @return builder
         * 
         */
        public Builder roleBindings(UserRoleBindingArgs... roleBindings) {
            return roleBindings(List.of(roleBindings));
        }

        /**
         * @param userGroups The user group of the user. Cannot be updated.
         * 
         * @return builder
         * 
         */
        public Builder userGroups(@Nullable Output<List<String>> userGroups) {
            $.userGroups = userGroups;
            return this;
        }

        /**
         * @param userGroups The user group of the user. Cannot be updated.
         * 
         * @return builder
         * 
         */
        public Builder userGroups(List<String> userGroups) {
            return userGroups(Output.of(userGroups));
        }

        /**
         * @param userGroups The user group of the user. Cannot be updated.
         * 
         * @return builder
         * 
         */
        public Builder userGroups(String... userGroups) {
            return userGroups(List.of(userGroups));
        }

        public UserState build() {
            return $;
        }
    }

}
