// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.harness.platform.outputs.GitOpsApplicationsApplicationSpecDestination;
import com.pulumi.harness.platform.outputs.GitOpsApplicationsApplicationSpecSource;
import com.pulumi.harness.platform.outputs.GitOpsApplicationsApplicationSpecSyncPolicy;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GitOpsApplicationsApplicationSpec {
    /**
     * @return Information about the GitOps application&#39;s destination.
     * 
     */
    private @Nullable List<GitOpsApplicationsApplicationSpecDestination> destinations;
    /**
     * @return The ArgoCD project name corresponding to this GitOps application. Value must match mappings of ArgoCD projects to harness project.
     * 
     */
    private @Nullable String project;
    /**
     * @return Revision history limit for the application.
     * 
     */
    private @Nullable String revisionHistoryLimit;
    /**
     * @return Contains all information about the source of the GitOps application.
     * 
     */
    private @Nullable List<GitOpsApplicationsApplicationSpecSource> source;
    /**
     * @return List of sources for the GitOps application. Multi Source support
     * 
     */
    private @Nullable List<GitOpsApplicationsApplicationSpecSource> sources;
    /**
     * @return Controls when a sync will be performed in response to updates in git.
     * 
     */
    private @Nullable List<GitOpsApplicationsApplicationSpecSyncPolicy> syncPolicies;

    private GitOpsApplicationsApplicationSpec() {}
    /**
     * @return Information about the GitOps application&#39;s destination.
     * 
     */
    public List<GitOpsApplicationsApplicationSpecDestination> destinations() {
        return this.destinations == null ? List.of() : this.destinations;
    }
    /**
     * @return The ArgoCD project name corresponding to this GitOps application. Value must match mappings of ArgoCD projects to harness project.
     * 
     */
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    /**
     * @return Revision history limit for the application.
     * 
     */
    public Optional<String> revisionHistoryLimit() {
        return Optional.ofNullable(this.revisionHistoryLimit);
    }
    /**
     * @return Contains all information about the source of the GitOps application.
     * 
     */
    public List<GitOpsApplicationsApplicationSpecSource> source() {
        return this.source == null ? List.of() : this.source;
    }
    /**
     * @return List of sources for the GitOps application. Multi Source support
     * 
     */
    public List<GitOpsApplicationsApplicationSpecSource> sources() {
        return this.sources == null ? List.of() : this.sources;
    }
    /**
     * @return Controls when a sync will be performed in response to updates in git.
     * 
     */
    public List<GitOpsApplicationsApplicationSpecSyncPolicy> syncPolicies() {
        return this.syncPolicies == null ? List.of() : this.syncPolicies;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GitOpsApplicationsApplicationSpec defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GitOpsApplicationsApplicationSpecDestination> destinations;
        private @Nullable String project;
        private @Nullable String revisionHistoryLimit;
        private @Nullable List<GitOpsApplicationsApplicationSpecSource> source;
        private @Nullable List<GitOpsApplicationsApplicationSpecSource> sources;
        private @Nullable List<GitOpsApplicationsApplicationSpecSyncPolicy> syncPolicies;
        public Builder() {}
        public Builder(GitOpsApplicationsApplicationSpec defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinations = defaults.destinations;
    	      this.project = defaults.project;
    	      this.revisionHistoryLimit = defaults.revisionHistoryLimit;
    	      this.source = defaults.source;
    	      this.sources = defaults.sources;
    	      this.syncPolicies = defaults.syncPolicies;
        }

        @CustomType.Setter
        public Builder destinations(@Nullable List<GitOpsApplicationsApplicationSpecDestination> destinations) {

            this.destinations = destinations;
            return this;
        }
        public Builder destinations(GitOpsApplicationsApplicationSpecDestination... destinations) {
            return destinations(List.of(destinations));
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder revisionHistoryLimit(@Nullable String revisionHistoryLimit) {

            this.revisionHistoryLimit = revisionHistoryLimit;
            return this;
        }
        @CustomType.Setter
        public Builder source(@Nullable List<GitOpsApplicationsApplicationSpecSource> source) {

            this.source = source;
            return this;
        }
        public Builder source(GitOpsApplicationsApplicationSpecSource... source) {
            return source(List.of(source));
        }
        @CustomType.Setter
        public Builder sources(@Nullable List<GitOpsApplicationsApplicationSpecSource> sources) {

            this.sources = sources;
            return this;
        }
        public Builder sources(GitOpsApplicationsApplicationSpecSource... sources) {
            return sources(List.of(sources));
        }
        @CustomType.Setter
        public Builder syncPolicies(@Nullable List<GitOpsApplicationsApplicationSpecSyncPolicy> syncPolicies) {

            this.syncPolicies = syncPolicies;
            return this;
        }
        public Builder syncPolicies(GitOpsApplicationsApplicationSpecSyncPolicy... syncPolicies) {
            return syncPolicies(List.of(syncPolicies));
        }
        public GitOpsApplicationsApplicationSpec build() {
            final var _resultValue = new GitOpsApplicationsApplicationSpec();
            _resultValue.destinations = destinations;
            _resultValue.project = project;
            _resultValue.revisionHistoryLimit = revisionHistoryLimit;
            _resultValue.source = source;
            _resultValue.sources = sources;
            _resultValue.syncPolicies = syncPolicies;
            return _resultValue;
        }
    }
}
