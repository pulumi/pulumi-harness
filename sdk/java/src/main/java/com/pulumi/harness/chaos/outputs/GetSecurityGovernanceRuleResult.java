// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.chaos.outputs.GetSecurityGovernanceRuleTimeWindow;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecurityGovernanceRuleResult {
    /**
     * @return List of condition IDs associated with the rule.
     * 
     */
    private List<String> conditionIds;
    /**
     * @return The description of the rule.
     * 
     */
    private String description;
    /**
     * @return The ID of the rule.
     * 
     */
    private @Nullable String id;
    /**
     * @return Whether the rule is enabled.
     * 
     */
    private Boolean isEnabled;
    /**
     * @return The name of the rule.
     * 
     */
    private @Nullable String name;
    /**
     * @return The organization identifier.
     * 
     */
    private String orgId;
    /**
     * @return The project identifier.
     * 
     */
    private String projectId;
    /**
     * @return Tags associated with the rule.
     * 
     */
    private List<String> tags;
    /**
     * @return Time windows when the rule is active.
     * 
     */
    private List<GetSecurityGovernanceRuleTimeWindow> timeWindows;
    /**
     * @return List of user group IDs associated with the rule.
     * 
     */
    private List<String> userGroupIds;

    private GetSecurityGovernanceRuleResult() {}
    /**
     * @return List of condition IDs associated with the rule.
     * 
     */
    public List<String> conditionIds() {
        return this.conditionIds;
    }
    /**
     * @return The description of the rule.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The ID of the rule.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Whether the rule is enabled.
     * 
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }
    /**
     * @return The name of the rule.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The organization identifier.
     * 
     */
    public String orgId() {
        return this.orgId;
    }
    /**
     * @return The project identifier.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Tags associated with the rule.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return Time windows when the rule is active.
     * 
     */
    public List<GetSecurityGovernanceRuleTimeWindow> timeWindows() {
        return this.timeWindows;
    }
    /**
     * @return List of user group IDs associated with the rule.
     * 
     */
    public List<String> userGroupIds() {
        return this.userGroupIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityGovernanceRuleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> conditionIds;
        private String description;
        private @Nullable String id;
        private Boolean isEnabled;
        private @Nullable String name;
        private String orgId;
        private String projectId;
        private List<String> tags;
        private List<GetSecurityGovernanceRuleTimeWindow> timeWindows;
        private List<String> userGroupIds;
        public Builder() {}
        public Builder(GetSecurityGovernanceRuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditionIds = defaults.conditionIds;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.isEnabled = defaults.isEnabled;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.projectId = defaults.projectId;
    	      this.tags = defaults.tags;
    	      this.timeWindows = defaults.timeWindows;
    	      this.userGroupIds = defaults.userGroupIds;
        }

        @CustomType.Setter
        public Builder conditionIds(List<String> conditionIds) {
            if (conditionIds == null) {
              throw new MissingRequiredPropertyException("GetSecurityGovernanceRuleResult", "conditionIds");
            }
            this.conditionIds = conditionIds;
            return this;
        }
        public Builder conditionIds(String... conditionIds) {
            return conditionIds(List.of(conditionIds));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSecurityGovernanceRuleResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isEnabled(Boolean isEnabled) {
            if (isEnabled == null) {
              throw new MissingRequiredPropertyException("GetSecurityGovernanceRuleResult", "isEnabled");
            }
            this.isEnabled = isEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(String orgId) {
            if (orgId == null) {
              throw new MissingRequiredPropertyException("GetSecurityGovernanceRuleResult", "orgId");
            }
            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetSecurityGovernanceRuleResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetSecurityGovernanceRuleResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder timeWindows(List<GetSecurityGovernanceRuleTimeWindow> timeWindows) {
            if (timeWindows == null) {
              throw new MissingRequiredPropertyException("GetSecurityGovernanceRuleResult", "timeWindows");
            }
            this.timeWindows = timeWindows;
            return this;
        }
        public Builder timeWindows(GetSecurityGovernanceRuleTimeWindow... timeWindows) {
            return timeWindows(List.of(timeWindows));
        }
        @CustomType.Setter
        public Builder userGroupIds(List<String> userGroupIds) {
            if (userGroupIds == null) {
              throw new MissingRequiredPropertyException("GetSecurityGovernanceRuleResult", "userGroupIds");
            }
            this.userGroupIds = userGroupIds;
            return this;
        }
        public Builder userGroupIds(String... userGroupIds) {
            return userGroupIds(List.of(userGroupIds));
        }
        public GetSecurityGovernanceRuleResult build() {
            final var _resultValue = new GetSecurityGovernanceRuleResult();
            _resultValue.conditionIds = conditionIds;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.isEnabled = isEnabled;
            _resultValue.name = name;
            _resultValue.orgId = orgId;
            _resultValue.projectId = projectId;
            _resultValue.tags = tags;
            _resultValue.timeWindows = timeWindows;
            _resultValue.userGroupIds = userGroupIds;
            return _resultValue;
        }
    }
}
