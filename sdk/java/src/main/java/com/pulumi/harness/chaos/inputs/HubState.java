// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HubState extends com.pulumi.resources.ResourceArgs {

    public static final HubState Empty = new HubState();

    /**
     * ID of the Git connector
     * 
     */
    @Import(name="connectorId")
    private @Nullable Output<String> connectorId;

    /**
     * @return ID of the Git connector
     * 
     */
    public Optional<Output<String>> connectorId() {
        return Optional.ofNullable(this.connectorId);
    }

    /**
     * Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
     * 
     */
    @Import(name="connectorScope")
    private @Nullable Output<String> connectorScope;

    /**
     * @return Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
     * 
     */
    public Optional<Output<String>> connectorScope() {
        return Optional.ofNullable(this.connectorScope);
    }

    /**
     * Creation timestamp
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Creation timestamp
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Description of the chaos hub
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the chaos hub
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the chaos hub is available
     * 
     */
    @Import(name="isAvailable")
    private @Nullable Output<Boolean> isAvailable;

    /**
     * @return Whether the chaos hub is available
     * 
     */
    public Optional<Output<Boolean>> isAvailable() {
        return Optional.ofNullable(this.isAvailable);
    }

    /**
     * Whether this is the default chaos hub
     * 
     */
    @Import(name="isDefault")
    private @Nullable Output<Boolean> isDefault;

    /**
     * @return Whether this is the default chaos hub
     * 
     */
    public Optional<Output<Boolean>> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    /**
     * Timestamp of the last sync
     * 
     */
    @Import(name="lastSyncedAt")
    private @Nullable Output<String> lastSyncedAt;

    /**
     * @return Timestamp of the last sync
     * 
     */
    public Optional<Output<String>> lastSyncedAt() {
        return Optional.ofNullable(this.lastSyncedAt);
    }

    /**
     * Name of the chaos hub
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the chaos hub
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The organization ID of the chaos hub
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return The organization ID of the chaos hub
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * The project ID of the chaos hub
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The project ID of the chaos hub
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Git repository branch
     * 
     */
    @Import(name="repoBranch")
    private @Nullable Output<String> repoBranch;

    /**
     * @return Git repository branch
     * 
     */
    public Optional<Output<String>> repoBranch() {
        return Optional.ofNullable(this.repoBranch);
    }

    /**
     * Name of the Git repository (required for account-level connectors)
     * 
     */
    @Import(name="repoName")
    private @Nullable Output<String> repoName;

    /**
     * @return Name of the Git repository (required for account-level connectors)
     * 
     */
    public Optional<Output<String>> repoName() {
        return Optional.ofNullable(this.repoName);
    }

    /**
     * Tags to associate with the chaos hub
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags to associate with the chaos hub
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Total number of experiments in the hub
     * 
     */
    @Import(name="totalExperiments")
    private @Nullable Output<Integer> totalExperiments;

    /**
     * @return Total number of experiments in the hub
     * 
     */
    public Optional<Output<Integer>> totalExperiments() {
        return Optional.ofNullable(this.totalExperiments);
    }

    /**
     * Total number of faults in the hub
     * 
     */
    @Import(name="totalFaults")
    private @Nullable Output<Integer> totalFaults;

    /**
     * @return Total number of faults in the hub
     * 
     */
    public Optional<Output<Integer>> totalFaults() {
        return Optional.ofNullable(this.totalFaults);
    }

    /**
     * Last update timestamp
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return Last update timestamp
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    private HubState() {}

    private HubState(HubState $) {
        this.connectorId = $.connectorId;
        this.connectorScope = $.connectorScope;
        this.createdAt = $.createdAt;
        this.description = $.description;
        this.isAvailable = $.isAvailable;
        this.isDefault = $.isDefault;
        this.lastSyncedAt = $.lastSyncedAt;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.repoBranch = $.repoBranch;
        this.repoName = $.repoName;
        this.tags = $.tags;
        this.totalExperiments = $.totalExperiments;
        this.totalFaults = $.totalFaults;
        this.updatedAt = $.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HubState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HubState $;

        public Builder() {
            $ = new HubState();
        }

        public Builder(HubState defaults) {
            $ = new HubState(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectorId ID of the Git connector
         * 
         * @return builder
         * 
         */
        public Builder connectorId(@Nullable Output<String> connectorId) {
            $.connectorId = connectorId;
            return this;
        }

        /**
         * @param connectorId ID of the Git connector
         * 
         * @return builder
         * 
         */
        public Builder connectorId(String connectorId) {
            return connectorId(Output.of(connectorId));
        }

        /**
         * @param connectorScope Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
         * 
         * @return builder
         * 
         */
        public Builder connectorScope(@Nullable Output<String> connectorScope) {
            $.connectorScope = connectorScope;
            return this;
        }

        /**
         * @param connectorScope Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
         * 
         * @return builder
         * 
         */
        public Builder connectorScope(String connectorScope) {
            return connectorScope(Output.of(connectorScope));
        }

        /**
         * @param createdAt Creation timestamp
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Creation timestamp
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param description Description of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param isAvailable Whether the chaos hub is available
         * 
         * @return builder
         * 
         */
        public Builder isAvailable(@Nullable Output<Boolean> isAvailable) {
            $.isAvailable = isAvailable;
            return this;
        }

        /**
         * @param isAvailable Whether the chaos hub is available
         * 
         * @return builder
         * 
         */
        public Builder isAvailable(Boolean isAvailable) {
            return isAvailable(Output.of(isAvailable));
        }

        /**
         * @param isDefault Whether this is the default chaos hub
         * 
         * @return builder
         * 
         */
        public Builder isDefault(@Nullable Output<Boolean> isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        /**
         * @param isDefault Whether this is the default chaos hub
         * 
         * @return builder
         * 
         */
        public Builder isDefault(Boolean isDefault) {
            return isDefault(Output.of(isDefault));
        }

        /**
         * @param lastSyncedAt Timestamp of the last sync
         * 
         * @return builder
         * 
         */
        public Builder lastSyncedAt(@Nullable Output<String> lastSyncedAt) {
            $.lastSyncedAt = lastSyncedAt;
            return this;
        }

        /**
         * @param lastSyncedAt Timestamp of the last sync
         * 
         * @return builder
         * 
         */
        public Builder lastSyncedAt(String lastSyncedAt) {
            return lastSyncedAt(Output.of(lastSyncedAt));
        }

        /**
         * @param name Name of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId The organization ID of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The organization ID of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId The project ID of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project ID of the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param repoBranch Git repository branch
         * 
         * @return builder
         * 
         */
        public Builder repoBranch(@Nullable Output<String> repoBranch) {
            $.repoBranch = repoBranch;
            return this;
        }

        /**
         * @param repoBranch Git repository branch
         * 
         * @return builder
         * 
         */
        public Builder repoBranch(String repoBranch) {
            return repoBranch(Output.of(repoBranch));
        }

        /**
         * @param repoName Name of the Git repository (required for account-level connectors)
         * 
         * @return builder
         * 
         */
        public Builder repoName(@Nullable Output<String> repoName) {
            $.repoName = repoName;
            return this;
        }

        /**
         * @param repoName Name of the Git repository (required for account-level connectors)
         * 
         * @return builder
         * 
         */
        public Builder repoName(String repoName) {
            return repoName(Output.of(repoName));
        }

        /**
         * @param tags Tags to associate with the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to associate with the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags to associate with the chaos hub
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param totalExperiments Total number of experiments in the hub
         * 
         * @return builder
         * 
         */
        public Builder totalExperiments(@Nullable Output<Integer> totalExperiments) {
            $.totalExperiments = totalExperiments;
            return this;
        }

        /**
         * @param totalExperiments Total number of experiments in the hub
         * 
         * @return builder
         * 
         */
        public Builder totalExperiments(Integer totalExperiments) {
            return totalExperiments(Output.of(totalExperiments));
        }

        /**
         * @param totalFaults Total number of faults in the hub
         * 
         * @return builder
         * 
         */
        public Builder totalFaults(@Nullable Output<Integer> totalFaults) {
            $.totalFaults = totalFaults;
            return this;
        }

        /**
         * @param totalFaults Total number of faults in the hub
         * 
         * @return builder
         * 
         */
        public Builder totalFaults(Integer totalFaults) {
            return totalFaults(Output.of(totalFaults));
        }

        /**
         * @param updatedAt Last update timestamp
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt Last update timestamp
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public HubState build() {
            return $;
        }
    }

}
