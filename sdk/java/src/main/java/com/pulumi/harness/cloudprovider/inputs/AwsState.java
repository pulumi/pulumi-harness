// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cloudprovider.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.cloudprovider.inputs.AwsAssumeCrossAccountRoleArgs;
import com.pulumi.harness.cloudprovider.inputs.AwsUsageScopeArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AwsState extends com.pulumi.resources.ResourceArgs {

    public static final AwsState Empty = new AwsState();

    /**
     * The plain text AWS access key id.
     * 
     */
    @Import(name="accessKeyId")
    private @Nullable Output<String> accessKeyId;

    /**
     * @return The plain text AWS access key id.
     * 
     */
    public Optional<Output<String>> accessKeyId() {
        return Optional.ofNullable(this.accessKeyId);
    }

    /**
     * The name of the Harness secret containing the AWS access key id
     * 
     */
    @Import(name="accessKeyIdSecretName")
    private @Nullable Output<String> accessKeyIdSecretName;

    /**
     * @return The name of the Harness secret containing the AWS access key id
     * 
     */
    public Optional<Output<String>> accessKeyIdSecretName() {
        return Optional.ofNullable(this.accessKeyIdSecretName);
    }

    /**
     * Configuration for assuming a cross account role.
     * 
     */
    @Import(name="assumeCrossAccountRole")
    private @Nullable Output<AwsAssumeCrossAccountRoleArgs> assumeCrossAccountRole;

    /**
     * @return Configuration for assuming a cross account role.
     * 
     */
    public Optional<Output<AwsAssumeCrossAccountRoleArgs>> assumeCrossAccountRole() {
        return Optional.ofNullable(this.assumeCrossAccountRole);
    }

    /**
     * Select the Delegate to use via one of its Selectors.
     * 
     */
    @Import(name="delegateSelector")
    private @Nullable Output<String> delegateSelector;

    /**
     * @return Select the Delegate to use via one of its Selectors.
     * 
     */
    public Optional<Output<String>> delegateSelector() {
        return Optional.ofNullable(this.delegateSelector);
    }

    /**
     * The name of the cloud provider.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the cloud provider.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the Harness secret containing the AWS secret access key.
     * 
     */
    @Import(name="secretAccessKeySecretName")
    private @Nullable Output<String> secretAccessKeySecretName;

    /**
     * @return The name of the Harness secret containing the AWS secret access key.
     * 
     */
    public Optional<Output<String>> secretAccessKeySecretName() {
        return Optional.ofNullable(this.secretAccessKeySecretName);
    }

    /**
     * This block is used for scoping the resource to a specific set of applications or environments.
     * 
     */
    @Import(name="usageScopes")
    private @Nullable Output<List<AwsUsageScopeArgs>> usageScopes;

    /**
     * @return This block is used for scoping the resource to a specific set of applications or environments.
     * 
     */
    public Optional<Output<List<AwsUsageScopeArgs>>> usageScopes() {
        return Optional.ofNullable(this.usageScopes);
    }

    /**
     * Use the EC2 Instance Profile for Service Accounts.
     * 
     */
    @Import(name="useEc2IamCredentials")
    private @Nullable Output<Boolean> useEc2IamCredentials;

    /**
     * @return Use the EC2 Instance Profile for Service Accounts.
     * 
     */
    public Optional<Output<Boolean>> useEc2IamCredentials() {
        return Optional.ofNullable(this.useEc2IamCredentials);
    }

    /**
     * Use the AWS IAM Role for Service Accounts.
     * 
     */
    @Import(name="useIrsa")
    private @Nullable Output<Boolean> useIrsa;

    /**
     * @return Use the AWS IAM Role for Service Accounts.
     * 
     */
    public Optional<Output<Boolean>> useIrsa() {
        return Optional.ofNullable(this.useIrsa);
    }

    private AwsState() {}

    private AwsState(AwsState $) {
        this.accessKeyId = $.accessKeyId;
        this.accessKeyIdSecretName = $.accessKeyIdSecretName;
        this.assumeCrossAccountRole = $.assumeCrossAccountRole;
        this.delegateSelector = $.delegateSelector;
        this.name = $.name;
        this.secretAccessKeySecretName = $.secretAccessKeySecretName;
        this.usageScopes = $.usageScopes;
        this.useEc2IamCredentials = $.useEc2IamCredentials;
        this.useIrsa = $.useIrsa;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AwsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AwsState $;

        public Builder() {
            $ = new AwsState();
        }

        public Builder(AwsState defaults) {
            $ = new AwsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKeyId The plain text AWS access key id.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(@Nullable Output<String> accessKeyId) {
            $.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * @param accessKeyId The plain text AWS access key id.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(String accessKeyId) {
            return accessKeyId(Output.of(accessKeyId));
        }

        /**
         * @param accessKeyIdSecretName The name of the Harness secret containing the AWS access key id
         * 
         * @return builder
         * 
         */
        public Builder accessKeyIdSecretName(@Nullable Output<String> accessKeyIdSecretName) {
            $.accessKeyIdSecretName = accessKeyIdSecretName;
            return this;
        }

        /**
         * @param accessKeyIdSecretName The name of the Harness secret containing the AWS access key id
         * 
         * @return builder
         * 
         */
        public Builder accessKeyIdSecretName(String accessKeyIdSecretName) {
            return accessKeyIdSecretName(Output.of(accessKeyIdSecretName));
        }

        /**
         * @param assumeCrossAccountRole Configuration for assuming a cross account role.
         * 
         * @return builder
         * 
         */
        public Builder assumeCrossAccountRole(@Nullable Output<AwsAssumeCrossAccountRoleArgs> assumeCrossAccountRole) {
            $.assumeCrossAccountRole = assumeCrossAccountRole;
            return this;
        }

        /**
         * @param assumeCrossAccountRole Configuration for assuming a cross account role.
         * 
         * @return builder
         * 
         */
        public Builder assumeCrossAccountRole(AwsAssumeCrossAccountRoleArgs assumeCrossAccountRole) {
            return assumeCrossAccountRole(Output.of(assumeCrossAccountRole));
        }

        /**
         * @param delegateSelector Select the Delegate to use via one of its Selectors.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelector(@Nullable Output<String> delegateSelector) {
            $.delegateSelector = delegateSelector;
            return this;
        }

        /**
         * @param delegateSelector Select the Delegate to use via one of its Selectors.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelector(String delegateSelector) {
            return delegateSelector(Output.of(delegateSelector));
        }

        /**
         * @param name The name of the cloud provider.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the cloud provider.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param secretAccessKeySecretName The name of the Harness secret containing the AWS secret access key.
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKeySecretName(@Nullable Output<String> secretAccessKeySecretName) {
            $.secretAccessKeySecretName = secretAccessKeySecretName;
            return this;
        }

        /**
         * @param secretAccessKeySecretName The name of the Harness secret containing the AWS secret access key.
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKeySecretName(String secretAccessKeySecretName) {
            return secretAccessKeySecretName(Output.of(secretAccessKeySecretName));
        }

        /**
         * @param usageScopes This block is used for scoping the resource to a specific set of applications or environments.
         * 
         * @return builder
         * 
         */
        public Builder usageScopes(@Nullable Output<List<AwsUsageScopeArgs>> usageScopes) {
            $.usageScopes = usageScopes;
            return this;
        }

        /**
         * @param usageScopes This block is used for scoping the resource to a specific set of applications or environments.
         * 
         * @return builder
         * 
         */
        public Builder usageScopes(List<AwsUsageScopeArgs> usageScopes) {
            return usageScopes(Output.of(usageScopes));
        }

        /**
         * @param usageScopes This block is used for scoping the resource to a specific set of applications or environments.
         * 
         * @return builder
         * 
         */
        public Builder usageScopes(AwsUsageScopeArgs... usageScopes) {
            return usageScopes(List.of(usageScopes));
        }

        /**
         * @param useEc2IamCredentials Use the EC2 Instance Profile for Service Accounts.
         * 
         * @return builder
         * 
         */
        public Builder useEc2IamCredentials(@Nullable Output<Boolean> useEc2IamCredentials) {
            $.useEc2IamCredentials = useEc2IamCredentials;
            return this;
        }

        /**
         * @param useEc2IamCredentials Use the EC2 Instance Profile for Service Accounts.
         * 
         * @return builder
         * 
         */
        public Builder useEc2IamCredentials(Boolean useEc2IamCredentials) {
            return useEc2IamCredentials(Output.of(useEc2IamCredentials));
        }

        /**
         * @param useIrsa Use the AWS IAM Role for Service Accounts.
         * 
         * @return builder
         * 
         */
        public Builder useIrsa(@Nullable Output<Boolean> useIrsa) {
            $.useIrsa = useIrsa;
            return this;
        }

        /**
         * @param useIrsa Use the AWS IAM Role for Service Accounts.
         * 
         * @return builder
         * 
         */
        public Builder useIrsa(Boolean useIrsa) {
            return useIrsa(Output.of(useIrsa));
        }

        public AwsState build() {
            return $;
        }
    }

}
