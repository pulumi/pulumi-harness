// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.service.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.service.outputs.GetDiscoveryAgentInstallationDetailAgentDetail;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDiscoveryAgentInstallationDetail {
    /**
     * @return Account identifier of the installation.
     * 
     */
    private String accountIdentifier;
    /**
     * @return Details about the agent installation.
     * 
     */
    private List<GetDiscoveryAgentInstallationDetailAgentDetail> agentDetails;
    /**
     * @return ID of the agent.
     * 
     */
    private String agentId;
    /**
     * @return When the installation was created.
     * 
     */
    private String createdAt;
    /**
     * @return Who created the installation.
     * 
     */
    private String createdBy;
    /**
     * @return ID of the delegate.
     * 
     */
    private String delegateId;
    /**
     * @return ID of the delegate task.
     * 
     */
    private String delegateTaskId;
    /**
     * @return Status of the delegate task.
     * 
     */
    private String delegateTaskStatus;
    /**
     * @return Environment identifier of the installation.
     * 
     */
    private String environmentIdentifier;
    /**
     * @return Installation ID.
     * 
     */
    private String id;
    /**
     * @return Whether the installation was triggered by a cron job.
     * 
     */
    private Boolean isCronTriggered;
    /**
     * @return When the log stream was created.
     * 
     */
    private String logStreamCreatedAt;
    /**
     * @return ID of the log stream.
     * 
     */
    private String logStreamId;
    /**
     * @return Organization identifier of the installation.
     * 
     */
    private String orgIdentifier;
    /**
     * @return Project identifier of the installation.
     * 
     */
    private String projectIdentifier;
    /**
     * @return Whether the installation has been removed.
     * 
     */
    private Boolean removed;
    /**
     * @return When the installation was removed.
     * 
     */
    private String removedAt;
    /**
     * @return Whether the installation has been stopped.
     * 
     */
    private Boolean stopped;
    /**
     * @return When the installation was last updated.
     * 
     */
    private String updatedAt;
    /**
     * @return Who last updated the installation.
     * 
     */
    private String updatedBy;

    private GetDiscoveryAgentInstallationDetail() {}
    /**
     * @return Account identifier of the installation.
     * 
     */
    public String accountIdentifier() {
        return this.accountIdentifier;
    }
    /**
     * @return Details about the agent installation.
     * 
     */
    public List<GetDiscoveryAgentInstallationDetailAgentDetail> agentDetails() {
        return this.agentDetails;
    }
    /**
     * @return ID of the agent.
     * 
     */
    public String agentId() {
        return this.agentId;
    }
    /**
     * @return When the installation was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Who created the installation.
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return ID of the delegate.
     * 
     */
    public String delegateId() {
        return this.delegateId;
    }
    /**
     * @return ID of the delegate task.
     * 
     */
    public String delegateTaskId() {
        return this.delegateTaskId;
    }
    /**
     * @return Status of the delegate task.
     * 
     */
    public String delegateTaskStatus() {
        return this.delegateTaskStatus;
    }
    /**
     * @return Environment identifier of the installation.
     * 
     */
    public String environmentIdentifier() {
        return this.environmentIdentifier;
    }
    /**
     * @return Installation ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether the installation was triggered by a cron job.
     * 
     */
    public Boolean isCronTriggered() {
        return this.isCronTriggered;
    }
    /**
     * @return When the log stream was created.
     * 
     */
    public String logStreamCreatedAt() {
        return this.logStreamCreatedAt;
    }
    /**
     * @return ID of the log stream.
     * 
     */
    public String logStreamId() {
        return this.logStreamId;
    }
    /**
     * @return Organization identifier of the installation.
     * 
     */
    public String orgIdentifier() {
        return this.orgIdentifier;
    }
    /**
     * @return Project identifier of the installation.
     * 
     */
    public String projectIdentifier() {
        return this.projectIdentifier;
    }
    /**
     * @return Whether the installation has been removed.
     * 
     */
    public Boolean removed() {
        return this.removed;
    }
    /**
     * @return When the installation was removed.
     * 
     */
    public String removedAt() {
        return this.removedAt;
    }
    /**
     * @return Whether the installation has been stopped.
     * 
     */
    public Boolean stopped() {
        return this.stopped;
    }
    /**
     * @return When the installation was last updated.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }
    /**
     * @return Who last updated the installation.
     * 
     */
    public String updatedBy() {
        return this.updatedBy;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDiscoveryAgentInstallationDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountIdentifier;
        private List<GetDiscoveryAgentInstallationDetailAgentDetail> agentDetails;
        private String agentId;
        private String createdAt;
        private String createdBy;
        private String delegateId;
        private String delegateTaskId;
        private String delegateTaskStatus;
        private String environmentIdentifier;
        private String id;
        private Boolean isCronTriggered;
        private String logStreamCreatedAt;
        private String logStreamId;
        private String orgIdentifier;
        private String projectIdentifier;
        private Boolean removed;
        private String removedAt;
        private Boolean stopped;
        private String updatedAt;
        private String updatedBy;
        public Builder() {}
        public Builder(GetDiscoveryAgentInstallationDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountIdentifier = defaults.accountIdentifier;
    	      this.agentDetails = defaults.agentDetails;
    	      this.agentId = defaults.agentId;
    	      this.createdAt = defaults.createdAt;
    	      this.createdBy = defaults.createdBy;
    	      this.delegateId = defaults.delegateId;
    	      this.delegateTaskId = defaults.delegateTaskId;
    	      this.delegateTaskStatus = defaults.delegateTaskStatus;
    	      this.environmentIdentifier = defaults.environmentIdentifier;
    	      this.id = defaults.id;
    	      this.isCronTriggered = defaults.isCronTriggered;
    	      this.logStreamCreatedAt = defaults.logStreamCreatedAt;
    	      this.logStreamId = defaults.logStreamId;
    	      this.orgIdentifier = defaults.orgIdentifier;
    	      this.projectIdentifier = defaults.projectIdentifier;
    	      this.removed = defaults.removed;
    	      this.removedAt = defaults.removedAt;
    	      this.stopped = defaults.stopped;
    	      this.updatedAt = defaults.updatedAt;
    	      this.updatedBy = defaults.updatedBy;
        }

        @CustomType.Setter
        public Builder accountIdentifier(String accountIdentifier) {
            if (accountIdentifier == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentInstallationDetail", "accountIdentifier");
            }
            this.accountIdentifier = accountIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder agentDetails(List<GetDiscoveryAgentInstallationDetailAgentDetail> agentDetails) {
            if (agentDetails == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentInstallationDetail", "agentDetails");
            }
            this.agentDetails = agentDetails;
            return this;
        }
        public Builder agentDetails(GetDiscoveryAgentInstallationDetailAgentDetail... agentDetails) {
            return agentDetails(List.of(agentDetails));
        }
        @CustomType.Setter
        public Builder agentId(String agentId) {
            if (agentId == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentInstallationDetail", "agentId");
            }
            this.agentId = agentId;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentInstallationDetail", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentInstallationDetail", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder delegateId(String delegateId) {
            if (delegateId == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentInstallationDetail", "delegateId");
            }
            this.delegateId = delegateId;
            return this;
        }
        @CustomType.Setter
        public Builder delegateTaskId(String delegateTaskId) {
            if (delegateTaskId == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentInstallationDetail", "delegateTaskId");
            }
            this.delegateTaskId = delegateTaskId;
            return this;
        }
        @CustomType.Setter
        public Builder delegateTaskStatus(String delegateTaskStatus) {
            if (delegateTaskStatus == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentInstallationDetail", "delegateTaskStatus");
            }
            this.delegateTaskStatus = delegateTaskStatus;
            return this;
        }
        @CustomType.Setter
        public Builder environmentIdentifier(String environmentIdentifier) {
            if (environmentIdentifier == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentInstallationDetail", "environmentIdentifier");
            }
            this.environmentIdentifier = environmentIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentInstallationDetail", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isCronTriggered(Boolean isCronTriggered) {
            if (isCronTriggered == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentInstallationDetail", "isCronTriggered");
            }
            this.isCronTriggered = isCronTriggered;
            return this;
        }
        @CustomType.Setter
        public Builder logStreamCreatedAt(String logStreamCreatedAt) {
            if (logStreamCreatedAt == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentInstallationDetail", "logStreamCreatedAt");
            }
            this.logStreamCreatedAt = logStreamCreatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder logStreamId(String logStreamId) {
            if (logStreamId == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentInstallationDetail", "logStreamId");
            }
            this.logStreamId = logStreamId;
            return this;
        }
        @CustomType.Setter
        public Builder orgIdentifier(String orgIdentifier) {
            if (orgIdentifier == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentInstallationDetail", "orgIdentifier");
            }
            this.orgIdentifier = orgIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder projectIdentifier(String projectIdentifier) {
            if (projectIdentifier == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentInstallationDetail", "projectIdentifier");
            }
            this.projectIdentifier = projectIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder removed(Boolean removed) {
            if (removed == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentInstallationDetail", "removed");
            }
            this.removed = removed;
            return this;
        }
        @CustomType.Setter
        public Builder removedAt(String removedAt) {
            if (removedAt == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentInstallationDetail", "removedAt");
            }
            this.removedAt = removedAt;
            return this;
        }
        @CustomType.Setter
        public Builder stopped(Boolean stopped) {
            if (stopped == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentInstallationDetail", "stopped");
            }
            this.stopped = stopped;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentInstallationDetail", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder updatedBy(String updatedBy) {
            if (updatedBy == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAgentInstallationDetail", "updatedBy");
            }
            this.updatedBy = updatedBy;
            return this;
        }
        public GetDiscoveryAgentInstallationDetail build() {
            final var _resultValue = new GetDiscoveryAgentInstallationDetail();
            _resultValue.accountIdentifier = accountIdentifier;
            _resultValue.agentDetails = agentDetails;
            _resultValue.agentId = agentId;
            _resultValue.createdAt = createdAt;
            _resultValue.createdBy = createdBy;
            _resultValue.delegateId = delegateId;
            _resultValue.delegateTaskId = delegateTaskId;
            _resultValue.delegateTaskStatus = delegateTaskStatus;
            _resultValue.environmentIdentifier = environmentIdentifier;
            _resultValue.id = id;
            _resultValue.isCronTriggered = isCronTriggered;
            _resultValue.logStreamCreatedAt = logStreamCreatedAt;
            _resultValue.logStreamId = logStreamId;
            _resultValue.orgIdentifier = orgIdentifier;
            _resultValue.projectIdentifier = projectIdentifier;
            _resultValue.removed = removed;
            _resultValue.removedAt = removedAt;
            _resultValue.stopped = stopped;
            _resultValue.updatedAt = updatedAt;
            _resultValue.updatedBy = updatedBy;
            return _resultValue;
        }
    }
}
