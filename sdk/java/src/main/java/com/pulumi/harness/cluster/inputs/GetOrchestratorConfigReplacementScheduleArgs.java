// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cluster.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.cluster.inputs.GetOrchestratorConfigReplacementScheduleAppliesToArgs;
import com.pulumi.harness.cluster.inputs.GetOrchestratorConfigReplacementScheduleWindowDetailsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetOrchestratorConfigReplacementScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetOrchestratorConfigReplacementScheduleArgs Empty = new GetOrchestratorConfigReplacementScheduleArgs();

    /**
     * Defines the scope of the replacement schedule
     * 
     */
    @Import(name="appliesTo", required=true)
    private Output<GetOrchestratorConfigReplacementScheduleAppliesToArgs> appliesTo;

    /**
     * @return Defines the scope of the replacement schedule
     * 
     */
    public Output<GetOrchestratorConfigReplacementScheduleAppliesToArgs> appliesTo() {
        return this.appliesTo;
    }

    @Import(name="windowDetails")
    private @Nullable Output<GetOrchestratorConfigReplacementScheduleWindowDetailsArgs> windowDetails;

    public Optional<Output<GetOrchestratorConfigReplacementScheduleWindowDetailsArgs>> windowDetails() {
        return Optional.ofNullable(this.windowDetails);
    }

    /**
     * Window type for replacement schedule
     * 
     */
    @Import(name="windowType", required=true)
    private Output<String> windowType;

    /**
     * @return Window type for replacement schedule
     * 
     */
    public Output<String> windowType() {
        return this.windowType;
    }

    private GetOrchestratorConfigReplacementScheduleArgs() {}

    private GetOrchestratorConfigReplacementScheduleArgs(GetOrchestratorConfigReplacementScheduleArgs $) {
        this.appliesTo = $.appliesTo;
        this.windowDetails = $.windowDetails;
        this.windowType = $.windowType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetOrchestratorConfigReplacementScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetOrchestratorConfigReplacementScheduleArgs $;

        public Builder() {
            $ = new GetOrchestratorConfigReplacementScheduleArgs();
        }

        public Builder(GetOrchestratorConfigReplacementScheduleArgs defaults) {
            $ = new GetOrchestratorConfigReplacementScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appliesTo Defines the scope of the replacement schedule
         * 
         * @return builder
         * 
         */
        public Builder appliesTo(Output<GetOrchestratorConfigReplacementScheduleAppliesToArgs> appliesTo) {
            $.appliesTo = appliesTo;
            return this;
        }

        /**
         * @param appliesTo Defines the scope of the replacement schedule
         * 
         * @return builder
         * 
         */
        public Builder appliesTo(GetOrchestratorConfigReplacementScheduleAppliesToArgs appliesTo) {
            return appliesTo(Output.of(appliesTo));
        }

        public Builder windowDetails(@Nullable Output<GetOrchestratorConfigReplacementScheduleWindowDetailsArgs> windowDetails) {
            $.windowDetails = windowDetails;
            return this;
        }

        public Builder windowDetails(GetOrchestratorConfigReplacementScheduleWindowDetailsArgs windowDetails) {
            return windowDetails(Output.of(windowDetails));
        }

        /**
         * @param windowType Window type for replacement schedule
         * 
         * @return builder
         * 
         */
        public Builder windowType(Output<String> windowType) {
            $.windowType = windowType;
            return this;
        }

        /**
         * @param windowType Window type for replacement schedule
         * 
         * @return builder
         * 
         */
        public Builder windowType(String windowType) {
            return windowType(Output.of(windowType));
        }

        public GetOrchestratorConfigReplacementScheduleArgs build() {
            if ($.appliesTo == null) {
                throw new MissingRequiredPropertyException("GetOrchestratorConfigReplacementScheduleArgs", "appliesTo");
            }
            if ($.windowType == null) {
                throw new MissingRequiredPropertyException("GetOrchestratorConfigReplacementScheduleArgs", "windowType");
            }
            return $;
        }
    }

}
