// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDbInstanceArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDbInstanceArgs Empty = new GetDbInstanceArgs();

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    @Import(name="liquibaseSubstituteProperties")
    private @Nullable Output<Map<String,String>> liquibaseSubstituteProperties;

    public Optional<Output<Map<String,String>>> liquibaseSubstituteProperties() {
        return Optional.ofNullable(this.liquibaseSubstituteProperties);
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId", required=true)
    private Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * The identifier of the parent database schema
     * 
     */
    @Import(name="schema", required=true)
    private Output<String> schema;

    /**
     * @return The identifier of the parent database schema
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }

    private GetDbInstanceArgs() {}

    private GetDbInstanceArgs(GetDbInstanceArgs $) {
        this.identifier = $.identifier;
        this.liquibaseSubstituteProperties = $.liquibaseSubstituteProperties;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.schema = $.schema;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDbInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDbInstanceArgs $;

        public Builder() {
            $ = new GetDbInstanceArgs();
        }

        public Builder(GetDbInstanceArgs defaults) {
            $ = new GetDbInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        public Builder liquibaseSubstituteProperties(@Nullable Output<Map<String,String>> liquibaseSubstituteProperties) {
            $.liquibaseSubstituteProperties = liquibaseSubstituteProperties;
            return this;
        }

        public Builder liquibaseSubstituteProperties(Map<String,String> liquibaseSubstituteProperties) {
            return liquibaseSubstituteProperties(Output.of(liquibaseSubstituteProperties));
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param schema The identifier of the parent database schema
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The identifier of the parent database schema
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        public GetDbInstanceArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("GetDbInstanceArgs", "identifier");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("GetDbInstanceArgs", "orgId");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("GetDbInstanceArgs", "projectId");
            }
            if ($.schema == null) {
                throw new MissingRequiredPropertyException("GetDbInstanceArgs", "schema");
            }
            return $;
        }
    }

}
