// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.RepoSourceArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepoState extends com.pulumi.resources.ResourceArgs {

    public static final RepoState Empty = new RepoState();

    /**
     * Timestamp when the repository was created.
     * 
     */
    @Import(name="created")
    private @Nullable Output<Integer> created;

    /**
     * @return Timestamp when the repository was created.
     * 
     */
    public Optional<Output<Integer>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * ID of the user who created the repository.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<Integer> createdBy;

    /**
     * @return ID of the user who created the repository.
     * 
     */
    public Optional<Output<Integer>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * Default branch of the repository (Applicate only for create).
     * 
     */
    @Import(name="defaultBranch")
    private @Nullable Output<String> defaultBranch;

    /**
     * @return Default branch of the repository (Applicate only for create).
     * 
     */
    public Optional<Output<String>> defaultBranch() {
        return Optional.ofNullable(this.defaultBranch);
    }

    /**
     * Description of the repository.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the repository.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Repository should be created with specified predefined gitignore file.
     * 
     */
    @Import(name="gitIgnore")
    private @Nullable Output<String> gitIgnore;

    /**
     * @return Repository should be created with specified predefined gitignore file.
     * 
     */
    public Optional<Output<String>> gitIgnore() {
        return Optional.ofNullable(this.gitIgnore);
    }

    /**
     * Git URL of the repository.
     * 
     */
    @Import(name="gitUrl")
    private @Nullable Output<String> gitUrl;

    /**
     * @return Git URL of the repository.
     * 
     */
    public Optional<Output<String>> gitUrl() {
        return Optional.ofNullable(this.gitUrl);
    }

    /**
     * Identifier of the repository.
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return Identifier of the repository.
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * Repository should be created with specified predefined license file.
     * 
     */
    @Import(name="license")
    private @Nullable Output<String> license;

    /**
     * @return Repository should be created with specified predefined license file.
     * 
     */
    public Optional<Output<String>> license() {
        return Optional.ofNullable(this.license);
    }

    /**
     * Name of the repository.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the repository.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Path of the repository.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return Path of the repository.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Repository should be created with readme file.
     * 
     */
    @Import(name="readme")
    private @Nullable Output<Boolean> readme;

    /**
     * @return Repository should be created with readme file.
     * 
     */
    public Optional<Output<Boolean>> readme() {
        return Optional.ofNullable(this.readme);
    }

    /**
     * Configuration for importing an existing repository from SCM provider.
     * 
     */
    @Import(name="sources")
    private @Nullable Output<List<RepoSourceArgs>> sources;

    /**
     * @return Configuration for importing an existing repository from SCM provider.
     * 
     */
    public Optional<Output<List<RepoSourceArgs>>> sources() {
        return Optional.ofNullable(this.sources);
    }

    /**
     * Timestamp when the repository was last updated.
     * 
     */
    @Import(name="updated")
    private @Nullable Output<Integer> updated;

    /**
     * @return Timestamp when the repository was last updated.
     * 
     */
    public Optional<Output<Integer>> updated() {
        return Optional.ofNullable(this.updated);
    }

    private RepoState() {}

    private RepoState(RepoState $) {
        this.created = $.created;
        this.createdBy = $.createdBy;
        this.defaultBranch = $.defaultBranch;
        this.description = $.description;
        this.gitIgnore = $.gitIgnore;
        this.gitUrl = $.gitUrl;
        this.identifier = $.identifier;
        this.license = $.license;
        this.name = $.name;
        this.orgId = $.orgId;
        this.path = $.path;
        this.projectId = $.projectId;
        this.readme = $.readme;
        this.sources = $.sources;
        this.updated = $.updated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepoState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepoState $;

        public Builder() {
            $ = new RepoState();
        }

        public Builder(RepoState defaults) {
            $ = new RepoState(Objects.requireNonNull(defaults));
        }

        /**
         * @param created Timestamp when the repository was created.
         * 
         * @return builder
         * 
         */
        public Builder created(@Nullable Output<Integer> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created Timestamp when the repository was created.
         * 
         * @return builder
         * 
         */
        public Builder created(Integer created) {
            return created(Output.of(created));
        }

        /**
         * @param createdBy ID of the user who created the repository.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<Integer> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy ID of the user who created the repository.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(Integer createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param defaultBranch Default branch of the repository (Applicate only for create).
         * 
         * @return builder
         * 
         */
        public Builder defaultBranch(@Nullable Output<String> defaultBranch) {
            $.defaultBranch = defaultBranch;
            return this;
        }

        /**
         * @param defaultBranch Default branch of the repository (Applicate only for create).
         * 
         * @return builder
         * 
         */
        public Builder defaultBranch(String defaultBranch) {
            return defaultBranch(Output.of(defaultBranch));
        }

        /**
         * @param description Description of the repository.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the repository.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param gitIgnore Repository should be created with specified predefined gitignore file.
         * 
         * @return builder
         * 
         */
        public Builder gitIgnore(@Nullable Output<String> gitIgnore) {
            $.gitIgnore = gitIgnore;
            return this;
        }

        /**
         * @param gitIgnore Repository should be created with specified predefined gitignore file.
         * 
         * @return builder
         * 
         */
        public Builder gitIgnore(String gitIgnore) {
            return gitIgnore(Output.of(gitIgnore));
        }

        /**
         * @param gitUrl Git URL of the repository.
         * 
         * @return builder
         * 
         */
        public Builder gitUrl(@Nullable Output<String> gitUrl) {
            $.gitUrl = gitUrl;
            return this;
        }

        /**
         * @param gitUrl Git URL of the repository.
         * 
         * @return builder
         * 
         */
        public Builder gitUrl(String gitUrl) {
            return gitUrl(Output.of(gitUrl));
        }

        /**
         * @param identifier Identifier of the repository.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Identifier of the repository.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param license Repository should be created with specified predefined license file.
         * 
         * @return builder
         * 
         */
        public Builder license(@Nullable Output<String> license) {
            $.license = license;
            return this;
        }

        /**
         * @param license Repository should be created with specified predefined license file.
         * 
         * @return builder
         * 
         */
        public Builder license(String license) {
            return license(Output.of(license));
        }

        /**
         * @param name Name of the repository.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the repository.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param path Path of the repository.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Path of the repository.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param readme Repository should be created with readme file.
         * 
         * @return builder
         * 
         */
        public Builder readme(@Nullable Output<Boolean> readme) {
            $.readme = readme;
            return this;
        }

        /**
         * @param readme Repository should be created with readme file.
         * 
         * @return builder
         * 
         */
        public Builder readme(Boolean readme) {
            return readme(Output.of(readme));
        }

        /**
         * @param sources Configuration for importing an existing repository from SCM provider.
         * 
         * @return builder
         * 
         */
        public Builder sources(@Nullable Output<List<RepoSourceArgs>> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources Configuration for importing an existing repository from SCM provider.
         * 
         * @return builder
         * 
         */
        public Builder sources(List<RepoSourceArgs> sources) {
            return sources(Output.of(sources));
        }

        /**
         * @param sources Configuration for importing an existing repository from SCM provider.
         * 
         * @return builder
         * 
         */
        public Builder sources(RepoSourceArgs... sources) {
            return sources(List.of(sources));
        }

        /**
         * @param updated Timestamp when the repository was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updated(@Nullable Output<Integer> updated) {
            $.updated = updated;
            return this;
        }

        /**
         * @param updated Timestamp when the repository was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updated(Integer updated) {
            return updated(Output.of(updated));
        }

        public RepoState build() {
            return $;
        }
    }

}
