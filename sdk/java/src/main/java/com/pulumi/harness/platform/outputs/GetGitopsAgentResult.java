// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GetGitopsAgentMetadata;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGitopsAgentResult {
    /**
     * @return Account identifier of the GitOps agent.
     * 
     * @deprecated
     * This field is deprecated and will be removed in a future release.
     * 
     */
    @Deprecated /* This field is deprecated and will be removed in a future release. */
    private String accountId;
    /**
     * @return Agent token to be used for authentication of the agent with Harness.
     * 
     */
    private String agentToken;
    /**
     * @return Description of the GitOps agent.
     * 
     */
    private String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Identifier of the GitOps agent.
     * 
     */
    private String identifier;
    /**
     * @return This computed field specifies if the referenced agent ever successfully connected and was authenticated to harness. Note that this is different from whether the agent is currently connected. \n\nSet withCredentials to true to allow computing of this field.\n\n For retrieval of this information, the user associated to the token being used must have Gitops Agent Edit permissions
     * 
     */
    private Boolean isAuthenticated;
    /**
     * @return Metadata of the agent.
     * 
     */
    private List<GetGitopsAgentMetadata> metadatas;
    /**
     * @return Name of the GitOps agent.
     * 
     */
    private String name;
    /**
     * @return The Operator to use for the Harness GitOps agent. Enum: &#34;ARGO&#34; &#34;FLAMINGO&#34;
     * 
     */
    private String operator;
    /**
     * @return Organization identifier of the GitOps agent.
     * 
     */
    private @Nullable String orgId;
    /**
     * @return Prefixed identifier of the GitOps agent. Agent identifier prefixed with scope of the agent
     * 
     */
    private String prefixedIdentifier;
    /**
     * @return Project identifier of the GitOps agent.
     * 
     */
    private @Nullable String projectId;
    /**
     * @return Tags for the GitOps agents. These can be used to search or filter the GitOps agents.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return Default: &#34;AGENT*TYPE*UNSET&#34;
     * Enum: &#34;AGENT*TYPE*UNSET&#34; &#34;CONNECTED*ARGO*PROVIDER&#34; &#34;MANAGED*ARGO*PROVIDER&#34;
     * 
     */
    private String type;
    /**
     * @return Specify whether to retrieve the gitops agent&#39;s token. (The field agentToken will be populated only if the agent has never connected to Harness before). For retrieval of this information, the user associated to the token being used must have Gitops Agent Edit permissions
     * 
     */
    private @Nullable Boolean withCredentials;

    private GetGitopsAgentResult() {}
    /**
     * @return Account identifier of the GitOps agent.
     * 
     * @deprecated
     * This field is deprecated and will be removed in a future release.
     * 
     */
    @Deprecated /* This field is deprecated and will be removed in a future release. */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Agent token to be used for authentication of the agent with Harness.
     * 
     */
    public String agentToken() {
        return this.agentToken;
    }
    /**
     * @return Description of the GitOps agent.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Identifier of the GitOps agent.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return This computed field specifies if the referenced agent ever successfully connected and was authenticated to harness. Note that this is different from whether the agent is currently connected. \n\nSet withCredentials to true to allow computing of this field.\n\n For retrieval of this information, the user associated to the token being used must have Gitops Agent Edit permissions
     * 
     */
    public Boolean isAuthenticated() {
        return this.isAuthenticated;
    }
    /**
     * @return Metadata of the agent.
     * 
     */
    public List<GetGitopsAgentMetadata> metadatas() {
        return this.metadatas;
    }
    /**
     * @return Name of the GitOps agent.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The Operator to use for the Harness GitOps agent. Enum: &#34;ARGO&#34; &#34;FLAMINGO&#34;
     * 
     */
    public String operator() {
        return this.operator;
    }
    /**
     * @return Organization identifier of the GitOps agent.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }
    /**
     * @return Prefixed identifier of the GitOps agent. Agent identifier prefixed with scope of the agent
     * 
     */
    public String prefixedIdentifier() {
        return this.prefixedIdentifier;
    }
    /**
     * @return Project identifier of the GitOps agent.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return Tags for the GitOps agents. These can be used to search or filter the GitOps agents.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Default: &#34;AGENT*TYPE*UNSET&#34;
     * Enum: &#34;AGENT*TYPE*UNSET&#34; &#34;CONNECTED*ARGO*PROVIDER&#34; &#34;MANAGED*ARGO*PROVIDER&#34;
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Specify whether to retrieve the gitops agent&#39;s token. (The field agentToken will be populated only if the agent has never connected to Harness before). For retrieval of this information, the user associated to the token being used must have Gitops Agent Edit permissions
     * 
     */
    public Optional<Boolean> withCredentials() {
        return Optional.ofNullable(this.withCredentials);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGitopsAgentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String agentToken;
        private String description;
        private String id;
        private String identifier;
        private Boolean isAuthenticated;
        private List<GetGitopsAgentMetadata> metadatas;
        private String name;
        private String operator;
        private @Nullable String orgId;
        private String prefixedIdentifier;
        private @Nullable String projectId;
        private Map<String,String> tags;
        private String type;
        private @Nullable Boolean withCredentials;
        public Builder() {}
        public Builder(GetGitopsAgentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.agentToken = defaults.agentToken;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.isAuthenticated = defaults.isAuthenticated;
    	      this.metadatas = defaults.metadatas;
    	      this.name = defaults.name;
    	      this.operator = defaults.operator;
    	      this.orgId = defaults.orgId;
    	      this.prefixedIdentifier = defaults.prefixedIdentifier;
    	      this.projectId = defaults.projectId;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.withCredentials = defaults.withCredentials;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetGitopsAgentResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder agentToken(String agentToken) {
            if (agentToken == null) {
              throw new MissingRequiredPropertyException("GetGitopsAgentResult", "agentToken");
            }
            this.agentToken = agentToken;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetGitopsAgentResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGitopsAgentResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            if (identifier == null) {
              throw new MissingRequiredPropertyException("GetGitopsAgentResult", "identifier");
            }
            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder isAuthenticated(Boolean isAuthenticated) {
            if (isAuthenticated == null) {
              throw new MissingRequiredPropertyException("GetGitopsAgentResult", "isAuthenticated");
            }
            this.isAuthenticated = isAuthenticated;
            return this;
        }
        @CustomType.Setter
        public Builder metadatas(List<GetGitopsAgentMetadata> metadatas) {
            if (metadatas == null) {
              throw new MissingRequiredPropertyException("GetGitopsAgentResult", "metadatas");
            }
            this.metadatas = metadatas;
            return this;
        }
        public Builder metadatas(GetGitopsAgentMetadata... metadatas) {
            return metadatas(List.of(metadatas));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGitopsAgentResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder operator(String operator) {
            if (operator == null) {
              throw new MissingRequiredPropertyException("GetGitopsAgentResult", "operator");
            }
            this.operator = operator;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(@Nullable String orgId) {

            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder prefixedIdentifier(String prefixedIdentifier) {
            if (prefixedIdentifier == null) {
              throw new MissingRequiredPropertyException("GetGitopsAgentResult", "prefixedIdentifier");
            }
            this.prefixedIdentifier = prefixedIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetGitopsAgentResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetGitopsAgentResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder withCredentials(@Nullable Boolean withCredentials) {

            this.withCredentials = withCredentials;
            return this;
        }
        public GetGitopsAgentResult build() {
            final var _resultValue = new GetGitopsAgentResult();
            _resultValue.accountId = accountId;
            _resultValue.agentToken = agentToken;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.isAuthenticated = isAuthenticated;
            _resultValue.metadatas = metadatas;
            _resultValue.name = name;
            _resultValue.operator = operator;
            _resultValue.orgId = orgId;
            _resultValue.prefixedIdentifier = prefixedIdentifier;
            _resultValue.projectId = projectId;
            _resultValue.tags = tags;
            _resultValue.type = type;
            _resultValue.withCredentials = withCredentials;
            return _resultValue;
        }
    }
}
