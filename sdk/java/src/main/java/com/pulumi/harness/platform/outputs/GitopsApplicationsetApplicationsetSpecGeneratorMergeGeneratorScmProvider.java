// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.harness.platform.outputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderAzureDevops;
import com.pulumi.harness.platform.outputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderBitbucketCloud;
import com.pulumi.harness.platform.outputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderBitbucketServer;
import com.pulumi.harness.platform.outputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderFilter;
import com.pulumi.harness.platform.outputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGitea;
import com.pulumi.harness.platform.outputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGithub;
import com.pulumi.harness.platform.outputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGitlab;
import com.pulumi.harness.platform.outputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderTemplate;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProvider {
    /**
     * @return Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
     * 
     */
    private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderAzureDevops azureDevops;
    /**
     * @return Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
     * 
     */
    private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderBitbucketCloud bitbucketCloud;
    /**
     * @return Use the Bitbucket Server API (1.0) to scan repos in a project.
     * 
     */
    private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderBitbucketServer bitbucketServer;
    /**
     * @return Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
     * 
     */
    private @Nullable String cloneProtocol;
    /**
     * @return Filters for which repos should be considered.
     * 
     */
    private @Nullable List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderFilter> filters;
    /**
     * @return Gitea mode uses the Gitea API to scan organizations in your instance.
     * 
     */
    private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGitea gitea;
    /**
     * @return Uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.
     * 
     */
    private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGithub github;
    /**
     * @return Uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.
     * 
     */
    private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGitlab gitlab;
    /**
     * @return How often to check for changes (in seconds). Default: 3min.
     * 
     */
    private @Nullable String requeueAfterSeconds;
    /**
     * @return Generator template. Used to override the values of the spec-level template.
     * 
     */
    private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderTemplate template;

    private GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProvider() {}
    /**
     * @return Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
     * 
     */
    public Optional<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderAzureDevops> azureDevops() {
        return Optional.ofNullable(this.azureDevops);
    }
    /**
     * @return Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
     * 
     */
    public Optional<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderBitbucketCloud> bitbucketCloud() {
        return Optional.ofNullable(this.bitbucketCloud);
    }
    /**
     * @return Use the Bitbucket Server API (1.0) to scan repos in a project.
     * 
     */
    public Optional<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderBitbucketServer> bitbucketServer() {
        return Optional.ofNullable(this.bitbucketServer);
    }
    /**
     * @return Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
     * 
     */
    public Optional<String> cloneProtocol() {
        return Optional.ofNullable(this.cloneProtocol);
    }
    /**
     * @return Filters for which repos should be considered.
     * 
     */
    public List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return Gitea mode uses the Gitea API to scan organizations in your instance.
     * 
     */
    public Optional<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGitea> gitea() {
        return Optional.ofNullable(this.gitea);
    }
    /**
     * @return Uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.
     * 
     */
    public Optional<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGithub> github() {
        return Optional.ofNullable(this.github);
    }
    /**
     * @return Uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.
     * 
     */
    public Optional<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGitlab> gitlab() {
        return Optional.ofNullable(this.gitlab);
    }
    /**
     * @return How often to check for changes (in seconds). Default: 3min.
     * 
     */
    public Optional<String> requeueAfterSeconds() {
        return Optional.ofNullable(this.requeueAfterSeconds);
    }
    /**
     * @return Generator template. Used to override the values of the spec-level template.
     * 
     */
    public Optional<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderTemplate> template() {
        return Optional.ofNullable(this.template);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProvider defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderAzureDevops azureDevops;
        private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderBitbucketCloud bitbucketCloud;
        private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderBitbucketServer bitbucketServer;
        private @Nullable String cloneProtocol;
        private @Nullable List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderFilter> filters;
        private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGitea gitea;
        private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGithub github;
        private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGitlab gitlab;
        private @Nullable String requeueAfterSeconds;
        private @Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderTemplate template;
        public Builder() {}
        public Builder(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProvider defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.azureDevops = defaults.azureDevops;
    	      this.bitbucketCloud = defaults.bitbucketCloud;
    	      this.bitbucketServer = defaults.bitbucketServer;
    	      this.cloneProtocol = defaults.cloneProtocol;
    	      this.filters = defaults.filters;
    	      this.gitea = defaults.gitea;
    	      this.github = defaults.github;
    	      this.gitlab = defaults.gitlab;
    	      this.requeueAfterSeconds = defaults.requeueAfterSeconds;
    	      this.template = defaults.template;
        }

        @CustomType.Setter
        public Builder azureDevops(@Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderAzureDevops azureDevops) {

            this.azureDevops = azureDevops;
            return this;
        }
        @CustomType.Setter
        public Builder bitbucketCloud(@Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderBitbucketCloud bitbucketCloud) {

            this.bitbucketCloud = bitbucketCloud;
            return this;
        }
        @CustomType.Setter
        public Builder bitbucketServer(@Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderBitbucketServer bitbucketServer) {

            this.bitbucketServer = bitbucketServer;
            return this;
        }
        @CustomType.Setter
        public Builder cloneProtocol(@Nullable String cloneProtocol) {

            this.cloneProtocol = cloneProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder gitea(@Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGitea gitea) {

            this.gitea = gitea;
            return this;
        }
        @CustomType.Setter
        public Builder github(@Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGithub github) {

            this.github = github;
            return this;
        }
        @CustomType.Setter
        public Builder gitlab(@Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderGitlab gitlab) {

            this.gitlab = gitlab;
            return this;
        }
        @CustomType.Setter
        public Builder requeueAfterSeconds(@Nullable String requeueAfterSeconds) {

            this.requeueAfterSeconds = requeueAfterSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder template(@Nullable GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProviderTemplate template) {

            this.template = template;
            return this;
        }
        public GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProvider build() {
            final var _resultValue = new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorScmProvider();
            _resultValue.azureDevops = azureDevops;
            _resultValue.bitbucketCloud = bitbucketCloud;
            _resultValue.bitbucketServer = bitbucketServer;
            _resultValue.cloneProtocol = cloneProtocol;
            _resultValue.filters = filters;
            _resultValue.gitea = gitea;
            _resultValue.github = github;
            _resultValue.gitlab = gitlab;
            _resultValue.requeueAfterSeconds = requeueAfterSeconds;
            _resultValue.template = template;
            return _resultValue;
        }
    }
}
