// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RepoRuleBranchPolicy {
    /**
     * @return Limit which merge strategies are available to merge a pull request(Any of squash, rebase, merge).
     * 
     */
    private @Nullable List<String> allowMergeStrategies;
    /**
     * @return Only allow users with bypass permission to create matching branches.
     * 
     */
    private @Nullable Boolean blockBranchCreation;
    /**
     * @return Only allow users with bypass permission to delete matching branches.
     * 
     */
    private @Nullable Boolean blockBranchDeletion;
    /**
     * @return Automatically delete the source branch of a pull request after it is merged.
     * 
     */
    private @Nullable Boolean deleteBranchOnMerge;
    /**
     * @return Require approval on pull requests from one reviewer for each codeowner rule.
     * 
     */
    private @Nullable Boolean requireCodeOwners;
    /**
     * @return Require re-approval when there are new changes in the pull request.
     * 
     */
    private @Nullable Boolean requireLatestCommitApproval;
    /**
     * @return Require approval on pull requests from a minimum number of reviewers.
     * 
     */
    private @Nullable Integer requireMinimumApprovalCount;
    /**
     * @return Require all request for changes have been resolved.
     * 
     */
    private @Nullable Boolean requireNoChangeRequest;
    /**
     * @return Do not allow any changes to matching branches without a pull request.
     * 
     */
    private @Nullable Boolean requirePullRequest;
    /**
     * @return All comments on a pull request must be resolved before it can be merged.
     * 
     */
    private @Nullable Boolean requireResolveAllComments;
    /**
     * @return Selected status checks must pass before a pull request can be merged.
     * 
     */
    private @Nullable List<String> requireStatusChecks;

    private RepoRuleBranchPolicy() {}
    /**
     * @return Limit which merge strategies are available to merge a pull request(Any of squash, rebase, merge).
     * 
     */
    public List<String> allowMergeStrategies() {
        return this.allowMergeStrategies == null ? List.of() : this.allowMergeStrategies;
    }
    /**
     * @return Only allow users with bypass permission to create matching branches.
     * 
     */
    public Optional<Boolean> blockBranchCreation() {
        return Optional.ofNullable(this.blockBranchCreation);
    }
    /**
     * @return Only allow users with bypass permission to delete matching branches.
     * 
     */
    public Optional<Boolean> blockBranchDeletion() {
        return Optional.ofNullable(this.blockBranchDeletion);
    }
    /**
     * @return Automatically delete the source branch of a pull request after it is merged.
     * 
     */
    public Optional<Boolean> deleteBranchOnMerge() {
        return Optional.ofNullable(this.deleteBranchOnMerge);
    }
    /**
     * @return Require approval on pull requests from one reviewer for each codeowner rule.
     * 
     */
    public Optional<Boolean> requireCodeOwners() {
        return Optional.ofNullable(this.requireCodeOwners);
    }
    /**
     * @return Require re-approval when there are new changes in the pull request.
     * 
     */
    public Optional<Boolean> requireLatestCommitApproval() {
        return Optional.ofNullable(this.requireLatestCommitApproval);
    }
    /**
     * @return Require approval on pull requests from a minimum number of reviewers.
     * 
     */
    public Optional<Integer> requireMinimumApprovalCount() {
        return Optional.ofNullable(this.requireMinimumApprovalCount);
    }
    /**
     * @return Require all request for changes have been resolved.
     * 
     */
    public Optional<Boolean> requireNoChangeRequest() {
        return Optional.ofNullable(this.requireNoChangeRequest);
    }
    /**
     * @return Do not allow any changes to matching branches without a pull request.
     * 
     */
    public Optional<Boolean> requirePullRequest() {
        return Optional.ofNullable(this.requirePullRequest);
    }
    /**
     * @return All comments on a pull request must be resolved before it can be merged.
     * 
     */
    public Optional<Boolean> requireResolveAllComments() {
        return Optional.ofNullable(this.requireResolveAllComments);
    }
    /**
     * @return Selected status checks must pass before a pull request can be merged.
     * 
     */
    public List<String> requireStatusChecks() {
        return this.requireStatusChecks == null ? List.of() : this.requireStatusChecks;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RepoRuleBranchPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> allowMergeStrategies;
        private @Nullable Boolean blockBranchCreation;
        private @Nullable Boolean blockBranchDeletion;
        private @Nullable Boolean deleteBranchOnMerge;
        private @Nullable Boolean requireCodeOwners;
        private @Nullable Boolean requireLatestCommitApproval;
        private @Nullable Integer requireMinimumApprovalCount;
        private @Nullable Boolean requireNoChangeRequest;
        private @Nullable Boolean requirePullRequest;
        private @Nullable Boolean requireResolveAllComments;
        private @Nullable List<String> requireStatusChecks;
        public Builder() {}
        public Builder(RepoRuleBranchPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowMergeStrategies = defaults.allowMergeStrategies;
    	      this.blockBranchCreation = defaults.blockBranchCreation;
    	      this.blockBranchDeletion = defaults.blockBranchDeletion;
    	      this.deleteBranchOnMerge = defaults.deleteBranchOnMerge;
    	      this.requireCodeOwners = defaults.requireCodeOwners;
    	      this.requireLatestCommitApproval = defaults.requireLatestCommitApproval;
    	      this.requireMinimumApprovalCount = defaults.requireMinimumApprovalCount;
    	      this.requireNoChangeRequest = defaults.requireNoChangeRequest;
    	      this.requirePullRequest = defaults.requirePullRequest;
    	      this.requireResolveAllComments = defaults.requireResolveAllComments;
    	      this.requireStatusChecks = defaults.requireStatusChecks;
        }

        @CustomType.Setter
        public Builder allowMergeStrategies(@Nullable List<String> allowMergeStrategies) {

            this.allowMergeStrategies = allowMergeStrategies;
            return this;
        }
        public Builder allowMergeStrategies(String... allowMergeStrategies) {
            return allowMergeStrategies(List.of(allowMergeStrategies));
        }
        @CustomType.Setter
        public Builder blockBranchCreation(@Nullable Boolean blockBranchCreation) {

            this.blockBranchCreation = blockBranchCreation;
            return this;
        }
        @CustomType.Setter
        public Builder blockBranchDeletion(@Nullable Boolean blockBranchDeletion) {

            this.blockBranchDeletion = blockBranchDeletion;
            return this;
        }
        @CustomType.Setter
        public Builder deleteBranchOnMerge(@Nullable Boolean deleteBranchOnMerge) {

            this.deleteBranchOnMerge = deleteBranchOnMerge;
            return this;
        }
        @CustomType.Setter
        public Builder requireCodeOwners(@Nullable Boolean requireCodeOwners) {

            this.requireCodeOwners = requireCodeOwners;
            return this;
        }
        @CustomType.Setter
        public Builder requireLatestCommitApproval(@Nullable Boolean requireLatestCommitApproval) {

            this.requireLatestCommitApproval = requireLatestCommitApproval;
            return this;
        }
        @CustomType.Setter
        public Builder requireMinimumApprovalCount(@Nullable Integer requireMinimumApprovalCount) {

            this.requireMinimumApprovalCount = requireMinimumApprovalCount;
            return this;
        }
        @CustomType.Setter
        public Builder requireNoChangeRequest(@Nullable Boolean requireNoChangeRequest) {

            this.requireNoChangeRequest = requireNoChangeRequest;
            return this;
        }
        @CustomType.Setter
        public Builder requirePullRequest(@Nullable Boolean requirePullRequest) {

            this.requirePullRequest = requirePullRequest;
            return this;
        }
        @CustomType.Setter
        public Builder requireResolveAllComments(@Nullable Boolean requireResolveAllComments) {

            this.requireResolveAllComments = requireResolveAllComments;
            return this;
        }
        @CustomType.Setter
        public Builder requireStatusChecks(@Nullable List<String> requireStatusChecks) {

            this.requireStatusChecks = requireStatusChecks;
            return this;
        }
        public Builder requireStatusChecks(String... requireStatusChecks) {
            return requireStatusChecks(List.of(requireStatusChecks));
        }
        public RepoRuleBranchPolicy build() {
            final var _resultValue = new RepoRuleBranchPolicy();
            _resultValue.allowMergeStrategies = allowMergeStrategies;
            _resultValue.blockBranchCreation = blockBranchCreation;
            _resultValue.blockBranchDeletion = blockBranchDeletion;
            _resultValue.deleteBranchOnMerge = deleteBranchOnMerge;
            _resultValue.requireCodeOwners = requireCodeOwners;
            _resultValue.requireLatestCommitApproval = requireLatestCommitApproval;
            _resultValue.requireMinimumApprovalCount = requireMinimumApprovalCount;
            _resultValue.requireNoChangeRequest = requireNoChangeRequest;
            _resultValue.requirePullRequest = requirePullRequest;
            _resultValue.requireResolveAllComments = requireResolveAllComments;
            _resultValue.requireStatusChecks = requireStatusChecks;
            return _resultValue;
        }
    }
}
