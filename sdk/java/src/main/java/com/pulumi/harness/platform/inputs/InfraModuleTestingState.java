// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.InfraModuleTestingTestingMetadataArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InfraModuleTestingState extends com.pulumi.resources.ResourceArgs {

    public static final InfraModuleTestingState Empty = new InfraModuleTestingState();

    /**
     * Account that owns the module
     * 
     */
    @Import(name="account")
    private @Nullable Output<String> account;

    /**
     * @return Account that owns the module
     * 
     */
    public Optional<Output<String>> account() {
        return Optional.ofNullable(this.account);
    }

    /**
     * Timestamp when the module was created
     * 
     */
    @Import(name="created")
    private @Nullable Output<Integer> created;

    /**
     * @return Timestamp when the module was created
     * 
     */
    public Optional<Output<Integer>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * Description of the module
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the module
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Git Tag Style
     * 
     */
    @Import(name="gitTagStyle")
    private @Nullable Output<String> gitTagStyle;

    /**
     * @return Git Tag Style
     * 
     */
    public Optional<Output<String>> gitTagStyle() {
        return Optional.ofNullable(this.gitTagStyle);
    }

    /**
     * Error while retrieving the module
     * 
     */
    @Import(name="moduleError")
    private @Nullable Output<String> moduleError;

    /**
     * @return Error while retrieving the module
     * 
     */
    public Optional<Output<String>> moduleError() {
        return Optional.ofNullable(this.moduleError);
    }

    /**
     * Identifier of the module to enable testing for
     * 
     */
    @Import(name="moduleId")
    private @Nullable Output<String> moduleId;

    /**
     * @return Identifier of the module to enable testing for
     * 
     */
    public Optional<Output<String>> moduleId() {
        return Optional.ofNullable(this.moduleId);
    }

    /**
     * Name of the module
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the module
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Organization identifier
     * 
     */
    @Import(name="org")
    private @Nullable Output<String> org;

    /**
     * @return Organization identifier
     * 
     */
    public Optional<Output<String>> org() {
        return Optional.ofNullable(this.org);
    }

    /**
     * List of pipeline IDs to create webhooks for triggering test executions
     * 
     */
    @Import(name="pipelines")
    private @Nullable Output<List<String>> pipelines;

    /**
     * @return List of pipeline IDs to create webhooks for triggering test executions
     * 
     */
    public Optional<Output<List<String>>> pipelines() {
        return Optional.ofNullable(this.pipelines);
    }

    /**
     * Project identifier
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return Project identifier
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Provider connector for testing purposes
     * 
     */
    @Import(name="providerConnector")
    private @Nullable Output<String> providerConnector;

    /**
     * @return Provider connector for testing purposes
     * 
     */
    public Optional<Output<String>> providerConnector() {
        return Optional.ofNullable(this.providerConnector);
    }

    @Import(name="provisionerType")
    private @Nullable Output<String> provisionerType;

    public Optional<Output<String>> provisionerType() {
        return Optional.ofNullable(this.provisionerType);
    }

    /**
     * Provisioner version for testing purposes
     * 
     */
    @Import(name="provisionerVersion")
    private @Nullable Output<String> provisionerVersion;

    /**
     * @return Provisioner version for testing purposes
     * 
     */
    public Optional<Output<String>> provisionerVersion() {
        return Optional.ofNullable(this.provisionerVersion);
    }

    /**
     * Pipeline ID to create webhooks for releases
     * 
     */
    @Import(name="releasePipeline")
    private @Nullable Output<String> releasePipeline;

    /**
     * @return Pipeline ID to create webhooks for releases
     * 
     */
    public Optional<Output<String>> releasePipeline() {
        return Optional.ofNullable(this.releasePipeline);
    }

    /**
     * For account connectors, the repository where the module is stored
     * 
     */
    @Import(name="repository")
    private @Nullable Output<String> repository;

    /**
     * @return For account connectors, the repository where the module is stored
     * 
     */
    public Optional<Output<String>> repository() {
        return Optional.ofNullable(this.repository);
    }

    /**
     * Repository Branch in which the module should be accessed
     * 
     */
    @Import(name="repositoryBranch")
    private @Nullable Output<String> repositoryBranch;

    /**
     * @return Repository Branch in which the module should be accessed
     * 
     */
    public Optional<Output<String>> repositoryBranch() {
        return Optional.ofNullable(this.repositoryBranch);
    }

    /**
     * Repository Commit in which the module should be accessed
     * 
     */
    @Import(name="repositoryCommit")
    private @Nullable Output<String> repositoryCommit;

    /**
     * @return Repository Commit in which the module should be accessed
     * 
     */
    public Optional<Output<String>> repositoryCommit() {
        return Optional.ofNullable(this.repositoryCommit);
    }

    /**
     * Repository Connector is the reference to the connector for the repository
     * 
     */
    @Import(name="repositoryConnector")
    private @Nullable Output<String> repositoryConnector;

    /**
     * @return Repository Connector is the reference to the connector for the repository
     * 
     */
    public Optional<Output<String>> repositoryConnector() {
        return Optional.ofNullable(this.repositoryConnector);
    }

    /**
     * Repository Path is the path in which the module resides
     * 
     */
    @Import(name="repositoryPath")
    private @Nullable Output<String> repositoryPath;

    /**
     * @return Repository Path is the path in which the module resides
     * 
     */
    public Optional<Output<String>> repositoryPath() {
        return Optional.ofNullable(this.repositoryPath);
    }

    /**
     * URL where the module is stored
     * 
     */
    @Import(name="repositoryUrl")
    private @Nullable Output<String> repositoryUrl;

    /**
     * @return URL where the module is stored
     * 
     */
    public Optional<Output<String>> repositoryUrl() {
        return Optional.ofNullable(this.repositoryUrl);
    }

    /**
     * Timestamp when the module was last synced
     * 
     */
    @Import(name="synced")
    private @Nullable Output<Integer> synced;

    /**
     * @return Timestamp when the module was last synced
     * 
     */
    public Optional<Output<Integer>> synced() {
        return Optional.ofNullable(this.synced);
    }

    /**
     * Provider of the module
     * 
     */
    @Import(name="system")
    private @Nullable Output<String> system;

    /**
     * @return Provider of the module
     * 
     */
    public Optional<Output<String>> system() {
        return Optional.ofNullable(this.system);
    }

    /**
     * Tags associated with the module
     * 
     */
    @Import(name="tags")
    private @Nullable Output<String> tags;

    /**
     * @return Tags associated with the module
     * 
     */
    public Optional<Output<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Whether testing is enabled for the module
     * 
     */
    @Import(name="testingEnabled")
    private @Nullable Output<Boolean> testingEnabled;

    /**
     * @return Whether testing is enabled for the module
     * 
     */
    public Optional<Output<Boolean>> testingEnabled() {
        return Optional.ofNullable(this.testingEnabled);
    }

    /**
     * Testing metadata for the module
     * 
     */
    @Import(name="testingMetadata")
    private @Nullable Output<InfraModuleTestingTestingMetadataArgs> testingMetadata;

    /**
     * @return Testing metadata for the module
     * 
     */
    public Optional<Output<InfraModuleTestingTestingMetadataArgs>> testingMetadata() {
        return Optional.ofNullable(this.testingMetadata);
    }

    /**
     * Timestamp when the module was last modified
     * 
     */
    @Import(name="updated")
    private @Nullable Output<Integer> updated;

    /**
     * @return Timestamp when the module was last modified
     * 
     */
    public Optional<Output<Integer>> updated() {
        return Optional.ofNullable(this.updated);
    }

    /**
     * Versions of the module
     * 
     */
    @Import(name="versions")
    private @Nullable Output<List<String>> versions;

    /**
     * @return Versions of the module
     * 
     */
    public Optional<Output<List<String>>> versions() {
        return Optional.ofNullable(this.versions);
    }

    private InfraModuleTestingState() {}

    private InfraModuleTestingState(InfraModuleTestingState $) {
        this.account = $.account;
        this.created = $.created;
        this.description = $.description;
        this.gitTagStyle = $.gitTagStyle;
        this.moduleError = $.moduleError;
        this.moduleId = $.moduleId;
        this.name = $.name;
        this.org = $.org;
        this.pipelines = $.pipelines;
        this.project = $.project;
        this.providerConnector = $.providerConnector;
        this.provisionerType = $.provisionerType;
        this.provisionerVersion = $.provisionerVersion;
        this.releasePipeline = $.releasePipeline;
        this.repository = $.repository;
        this.repositoryBranch = $.repositoryBranch;
        this.repositoryCommit = $.repositoryCommit;
        this.repositoryConnector = $.repositoryConnector;
        this.repositoryPath = $.repositoryPath;
        this.repositoryUrl = $.repositoryUrl;
        this.synced = $.synced;
        this.system = $.system;
        this.tags = $.tags;
        this.testingEnabled = $.testingEnabled;
        this.testingMetadata = $.testingMetadata;
        this.updated = $.updated;
        this.versions = $.versions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InfraModuleTestingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InfraModuleTestingState $;

        public Builder() {
            $ = new InfraModuleTestingState();
        }

        public Builder(InfraModuleTestingState defaults) {
            $ = new InfraModuleTestingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param account Account that owns the module
         * 
         * @return builder
         * 
         */
        public Builder account(@Nullable Output<String> account) {
            $.account = account;
            return this;
        }

        /**
         * @param account Account that owns the module
         * 
         * @return builder
         * 
         */
        public Builder account(String account) {
            return account(Output.of(account));
        }

        /**
         * @param created Timestamp when the module was created
         * 
         * @return builder
         * 
         */
        public Builder created(@Nullable Output<Integer> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created Timestamp when the module was created
         * 
         * @return builder
         * 
         */
        public Builder created(Integer created) {
            return created(Output.of(created));
        }

        /**
         * @param description Description of the module
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the module
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param gitTagStyle Git Tag Style
         * 
         * @return builder
         * 
         */
        public Builder gitTagStyle(@Nullable Output<String> gitTagStyle) {
            $.gitTagStyle = gitTagStyle;
            return this;
        }

        /**
         * @param gitTagStyle Git Tag Style
         * 
         * @return builder
         * 
         */
        public Builder gitTagStyle(String gitTagStyle) {
            return gitTagStyle(Output.of(gitTagStyle));
        }

        /**
         * @param moduleError Error while retrieving the module
         * 
         * @return builder
         * 
         */
        public Builder moduleError(@Nullable Output<String> moduleError) {
            $.moduleError = moduleError;
            return this;
        }

        /**
         * @param moduleError Error while retrieving the module
         * 
         * @return builder
         * 
         */
        public Builder moduleError(String moduleError) {
            return moduleError(Output.of(moduleError));
        }

        /**
         * @param moduleId Identifier of the module to enable testing for
         * 
         * @return builder
         * 
         */
        public Builder moduleId(@Nullable Output<String> moduleId) {
            $.moduleId = moduleId;
            return this;
        }

        /**
         * @param moduleId Identifier of the module to enable testing for
         * 
         * @return builder
         * 
         */
        public Builder moduleId(String moduleId) {
            return moduleId(Output.of(moduleId));
        }

        /**
         * @param name Name of the module
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the module
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param org Organization identifier
         * 
         * @return builder
         * 
         */
        public Builder org(@Nullable Output<String> org) {
            $.org = org;
            return this;
        }

        /**
         * @param org Organization identifier
         * 
         * @return builder
         * 
         */
        public Builder org(String org) {
            return org(Output.of(org));
        }

        /**
         * @param pipelines List of pipeline IDs to create webhooks for triggering test executions
         * 
         * @return builder
         * 
         */
        public Builder pipelines(@Nullable Output<List<String>> pipelines) {
            $.pipelines = pipelines;
            return this;
        }

        /**
         * @param pipelines List of pipeline IDs to create webhooks for triggering test executions
         * 
         * @return builder
         * 
         */
        public Builder pipelines(List<String> pipelines) {
            return pipelines(Output.of(pipelines));
        }

        /**
         * @param pipelines List of pipeline IDs to create webhooks for triggering test executions
         * 
         * @return builder
         * 
         */
        public Builder pipelines(String... pipelines) {
            return pipelines(List.of(pipelines));
        }

        /**
         * @param project Project identifier
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Project identifier
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param providerConnector Provider connector for testing purposes
         * 
         * @return builder
         * 
         */
        public Builder providerConnector(@Nullable Output<String> providerConnector) {
            $.providerConnector = providerConnector;
            return this;
        }

        /**
         * @param providerConnector Provider connector for testing purposes
         * 
         * @return builder
         * 
         */
        public Builder providerConnector(String providerConnector) {
            return providerConnector(Output.of(providerConnector));
        }

        public Builder provisionerType(@Nullable Output<String> provisionerType) {
            $.provisionerType = provisionerType;
            return this;
        }

        public Builder provisionerType(String provisionerType) {
            return provisionerType(Output.of(provisionerType));
        }

        /**
         * @param provisionerVersion Provisioner version for testing purposes
         * 
         * @return builder
         * 
         */
        public Builder provisionerVersion(@Nullable Output<String> provisionerVersion) {
            $.provisionerVersion = provisionerVersion;
            return this;
        }

        /**
         * @param provisionerVersion Provisioner version for testing purposes
         * 
         * @return builder
         * 
         */
        public Builder provisionerVersion(String provisionerVersion) {
            return provisionerVersion(Output.of(provisionerVersion));
        }

        /**
         * @param releasePipeline Pipeline ID to create webhooks for releases
         * 
         * @return builder
         * 
         */
        public Builder releasePipeline(@Nullable Output<String> releasePipeline) {
            $.releasePipeline = releasePipeline;
            return this;
        }

        /**
         * @param releasePipeline Pipeline ID to create webhooks for releases
         * 
         * @return builder
         * 
         */
        public Builder releasePipeline(String releasePipeline) {
            return releasePipeline(Output.of(releasePipeline));
        }

        /**
         * @param repository For account connectors, the repository where the module is stored
         * 
         * @return builder
         * 
         */
        public Builder repository(@Nullable Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository For account connectors, the repository where the module is stored
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        /**
         * @param repositoryBranch Repository Branch in which the module should be accessed
         * 
         * @return builder
         * 
         */
        public Builder repositoryBranch(@Nullable Output<String> repositoryBranch) {
            $.repositoryBranch = repositoryBranch;
            return this;
        }

        /**
         * @param repositoryBranch Repository Branch in which the module should be accessed
         * 
         * @return builder
         * 
         */
        public Builder repositoryBranch(String repositoryBranch) {
            return repositoryBranch(Output.of(repositoryBranch));
        }

        /**
         * @param repositoryCommit Repository Commit in which the module should be accessed
         * 
         * @return builder
         * 
         */
        public Builder repositoryCommit(@Nullable Output<String> repositoryCommit) {
            $.repositoryCommit = repositoryCommit;
            return this;
        }

        /**
         * @param repositoryCommit Repository Commit in which the module should be accessed
         * 
         * @return builder
         * 
         */
        public Builder repositoryCommit(String repositoryCommit) {
            return repositoryCommit(Output.of(repositoryCommit));
        }

        /**
         * @param repositoryConnector Repository Connector is the reference to the connector for the repository
         * 
         * @return builder
         * 
         */
        public Builder repositoryConnector(@Nullable Output<String> repositoryConnector) {
            $.repositoryConnector = repositoryConnector;
            return this;
        }

        /**
         * @param repositoryConnector Repository Connector is the reference to the connector for the repository
         * 
         * @return builder
         * 
         */
        public Builder repositoryConnector(String repositoryConnector) {
            return repositoryConnector(Output.of(repositoryConnector));
        }

        /**
         * @param repositoryPath Repository Path is the path in which the module resides
         * 
         * @return builder
         * 
         */
        public Builder repositoryPath(@Nullable Output<String> repositoryPath) {
            $.repositoryPath = repositoryPath;
            return this;
        }

        /**
         * @param repositoryPath Repository Path is the path in which the module resides
         * 
         * @return builder
         * 
         */
        public Builder repositoryPath(String repositoryPath) {
            return repositoryPath(Output.of(repositoryPath));
        }

        /**
         * @param repositoryUrl URL where the module is stored
         * 
         * @return builder
         * 
         */
        public Builder repositoryUrl(@Nullable Output<String> repositoryUrl) {
            $.repositoryUrl = repositoryUrl;
            return this;
        }

        /**
         * @param repositoryUrl URL where the module is stored
         * 
         * @return builder
         * 
         */
        public Builder repositoryUrl(String repositoryUrl) {
            return repositoryUrl(Output.of(repositoryUrl));
        }

        /**
         * @param synced Timestamp when the module was last synced
         * 
         * @return builder
         * 
         */
        public Builder synced(@Nullable Output<Integer> synced) {
            $.synced = synced;
            return this;
        }

        /**
         * @param synced Timestamp when the module was last synced
         * 
         * @return builder
         * 
         */
        public Builder synced(Integer synced) {
            return synced(Output.of(synced));
        }

        /**
         * @param system Provider of the module
         * 
         * @return builder
         * 
         */
        public Builder system(@Nullable Output<String> system) {
            $.system = system;
            return this;
        }

        /**
         * @param system Provider of the module
         * 
         * @return builder
         * 
         */
        public Builder system(String system) {
            return system(Output.of(system));
        }

        /**
         * @param tags Tags associated with the module
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags associated with the module
         * 
         * @return builder
         * 
         */
        public Builder tags(String tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param testingEnabled Whether testing is enabled for the module
         * 
         * @return builder
         * 
         */
        public Builder testingEnabled(@Nullable Output<Boolean> testingEnabled) {
            $.testingEnabled = testingEnabled;
            return this;
        }

        /**
         * @param testingEnabled Whether testing is enabled for the module
         * 
         * @return builder
         * 
         */
        public Builder testingEnabled(Boolean testingEnabled) {
            return testingEnabled(Output.of(testingEnabled));
        }

        /**
         * @param testingMetadata Testing metadata for the module
         * 
         * @return builder
         * 
         */
        public Builder testingMetadata(@Nullable Output<InfraModuleTestingTestingMetadataArgs> testingMetadata) {
            $.testingMetadata = testingMetadata;
            return this;
        }

        /**
         * @param testingMetadata Testing metadata for the module
         * 
         * @return builder
         * 
         */
        public Builder testingMetadata(InfraModuleTestingTestingMetadataArgs testingMetadata) {
            return testingMetadata(Output.of(testingMetadata));
        }

        /**
         * @param updated Timestamp when the module was last modified
         * 
         * @return builder
         * 
         */
        public Builder updated(@Nullable Output<Integer> updated) {
            $.updated = updated;
            return this;
        }

        /**
         * @param updated Timestamp when the module was last modified
         * 
         * @return builder
         * 
         */
        public Builder updated(Integer updated) {
            return updated(Output.of(updated));
        }

        /**
         * @param versions Versions of the module
         * 
         * @return builder
         * 
         */
        public Builder versions(@Nullable Output<List<String>> versions) {
            $.versions = versions;
            return this;
        }

        /**
         * @param versions Versions of the module
         * 
         * @return builder
         * 
         */
        public Builder versions(List<String> versions) {
            return versions(Output.of(versions));
        }

        /**
         * @param versions Versions of the module
         * 
         * @return builder
         * 
         */
        public Builder versions(String... versions) {
            return versions(List.of(versions));
        }

        public InfraModuleTestingState build() {
            return $;
        }
    }

}
