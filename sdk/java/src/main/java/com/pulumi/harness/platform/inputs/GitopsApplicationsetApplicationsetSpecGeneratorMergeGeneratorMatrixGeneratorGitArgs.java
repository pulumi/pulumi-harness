// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitDirectoryArgs;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitFileArgs;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitArgs Empty = new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitArgs();

    /**
     * List of directories in the source repository to use when template the Application..
     * 
     */
    @Import(name="directories")
    private @Nullable Output<List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitDirectoryArgs>> directories;

    /**
     * @return List of directories in the source repository to use when template the Application..
     * 
     */
    public Optional<Output<List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitDirectoryArgs>>> directories() {
        return Optional.ofNullable(this.directories);
    }

    /**
     * List of files in the source repository to use when template the Application.
     * 
     */
    @Import(name="files")
    private @Nullable Output<List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitFileArgs>> files;

    /**
     * @return List of files in the source repository to use when template the Application.
     * 
     */
    public Optional<Output<List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitFileArgs>>> files() {
        return Optional.ofNullable(this.files);
    }

    /**
     * Prefix for all path-related parameter names.
     * 
     */
    @Import(name="pathParamPrefix")
    private @Nullable Output<String> pathParamPrefix;

    /**
     * @return Prefix for all path-related parameter names.
     * 
     */
    public Optional<Output<String>> pathParamPrefix() {
        return Optional.ofNullable(this.pathParamPrefix);
    }

    /**
     * URL to the repository to use.
     * 
     */
    @Import(name="repoUrl", required=true)
    private Output<String> repoUrl;

    /**
     * @return URL to the repository to use.
     * 
     */
    public Output<String> repoUrl() {
        return this.repoUrl;
    }

    /**
     * Revision of the source repository to use.
     * 
     */
    @Import(name="revision")
    private @Nullable Output<String> revision;

    /**
     * @return Revision of the source repository to use.
     * 
     */
    public Optional<Output<String>> revision() {
        return Optional.ofNullable(this.revision);
    }

    /**
     * Generator template. Used to override the values of the spec-level template.
     * 
     */
    @Import(name="template")
    private @Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateArgs> template;

    /**
     * @return Generator template. Used to override the values of the spec-level template.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateArgs>> template() {
        return Optional.ofNullable(this.template);
    }

    private GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitArgs() {}

    private GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitArgs(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitArgs $) {
        this.directories = $.directories;
        this.files = $.files;
        this.pathParamPrefix = $.pathParamPrefix;
        this.repoUrl = $.repoUrl;
        this.revision = $.revision;
        this.template = $.template;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitArgs $;

        public Builder() {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitArgs();
        }

        public Builder(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitArgs defaults) {
            $ = new GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param directories List of directories in the source repository to use when template the Application..
         * 
         * @return builder
         * 
         */
        public Builder directories(@Nullable Output<List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitDirectoryArgs>> directories) {
            $.directories = directories;
            return this;
        }

        /**
         * @param directories List of directories in the source repository to use when template the Application..
         * 
         * @return builder
         * 
         */
        public Builder directories(List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitDirectoryArgs> directories) {
            return directories(Output.of(directories));
        }

        /**
         * @param directories List of directories in the source repository to use when template the Application..
         * 
         * @return builder
         * 
         */
        public Builder directories(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitDirectoryArgs... directories) {
            return directories(List.of(directories));
        }

        /**
         * @param files List of files in the source repository to use when template the Application.
         * 
         * @return builder
         * 
         */
        public Builder files(@Nullable Output<List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitFileArgs>> files) {
            $.files = files;
            return this;
        }

        /**
         * @param files List of files in the source repository to use when template the Application.
         * 
         * @return builder
         * 
         */
        public Builder files(List<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitFileArgs> files) {
            return files(Output.of(files));
        }

        /**
         * @param files List of files in the source repository to use when template the Application.
         * 
         * @return builder
         * 
         */
        public Builder files(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitFileArgs... files) {
            return files(List.of(files));
        }

        /**
         * @param pathParamPrefix Prefix for all path-related parameter names.
         * 
         * @return builder
         * 
         */
        public Builder pathParamPrefix(@Nullable Output<String> pathParamPrefix) {
            $.pathParamPrefix = pathParamPrefix;
            return this;
        }

        /**
         * @param pathParamPrefix Prefix for all path-related parameter names.
         * 
         * @return builder
         * 
         */
        public Builder pathParamPrefix(String pathParamPrefix) {
            return pathParamPrefix(Output.of(pathParamPrefix));
        }

        /**
         * @param repoUrl URL to the repository to use.
         * 
         * @return builder
         * 
         */
        public Builder repoUrl(Output<String> repoUrl) {
            $.repoUrl = repoUrl;
            return this;
        }

        /**
         * @param repoUrl URL to the repository to use.
         * 
         * @return builder
         * 
         */
        public Builder repoUrl(String repoUrl) {
            return repoUrl(Output.of(repoUrl));
        }

        /**
         * @param revision Revision of the source repository to use.
         * 
         * @return builder
         * 
         */
        public Builder revision(@Nullable Output<String> revision) {
            $.revision = revision;
            return this;
        }

        /**
         * @param revision Revision of the source repository to use.
         * 
         * @return builder
         * 
         */
        public Builder revision(String revision) {
            return revision(Output.of(revision));
        }

        /**
         * @param template Generator template. Used to override the values of the spec-level template.
         * 
         * @return builder
         * 
         */
        public Builder template(@Nullable Output<GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateArgs> template) {
            $.template = template;
            return this;
        }

        /**
         * @param template Generator template. Used to override the values of the spec-level template.
         * 
         * @return builder
         * 
         */
        public Builder template(GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateArgs template) {
            return template(Output.of(template));
        }

        public GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitArgs build() {
            if ($.repoUrl == null) {
                throw new MissingRequiredPropertyException("GitopsApplicationsetApplicationsetSpecGeneratorMergeGeneratorMatrixGeneratorGitArgs", "repoUrl");
            }
            return $;
        }
    }

}
