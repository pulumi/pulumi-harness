// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.chaos;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.chaos.HubArgs;
import com.pulumi.harness.chaos.inputs.HubState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for managing a Harness Chaos Hub
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.chaos.Hub;
 * import com.pulumi.harness.chaos.HubArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Hub("example", HubArgs.builder()
 *             .orgId("<org_id>")
 *             .projectId("<project_id>")
 *             .name("<name>")
 *             .description("<description>")
 *             .connectorId("<connector_id>")
 *             .repoBranch("<repo_branch>")
 *             .repoName("<repo_name>")
 *             .isDefault(false)
 *             .tags(            
 *                 "<tag1>",
 *                 "<tag2>")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * The `pulumi import` command can be used, for example:
 * 
 * Import Project level Chaos Hub
 * 
 * ```sh
 * $ pulumi import harness:chaos/hub:Hub example &lt;org_id&gt;/&lt;project_id&gt;/&lt;hub_id&gt;
 * ```
 * 
 */
@ResourceType(type="harness:chaos/hub:Hub")
public class Hub extends com.pulumi.resources.CustomResource {
    /**
     * ID of the Git connector
     * 
     */
    @Export(name="connectorId", refs={String.class}, tree="[0]")
    private Output<String> connectorId;

    /**
     * @return ID of the Git connector
     * 
     */
    public Output<String> connectorId() {
        return this.connectorId;
    }
    /**
     * Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
     * 
     */
    @Export(name="connectorScope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> connectorScope;

    /**
     * @return Scope of the Git connector (PROJECT, ORGANISATION, or ACCOUNT)
     * 
     */
    public Output<Optional<String>> connectorScope() {
        return Codegen.optional(this.connectorScope);
    }
    /**
     * Creation timestamp
     * 
     */
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    /**
     * @return Creation timestamp
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * Description of the chaos hub
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the chaos hub
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Whether the chaos hub is available
     * 
     */
    @Export(name="isAvailable", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isAvailable;

    /**
     * @return Whether the chaos hub is available
     * 
     */
    public Output<Boolean> isAvailable() {
        return this.isAvailable;
    }
    /**
     * Whether this is the default chaos hub
     * 
     */
    @Export(name="isDefault", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isDefault;

    /**
     * @return Whether this is the default chaos hub
     * 
     */
    public Output<Optional<Boolean>> isDefault() {
        return Codegen.optional(this.isDefault);
    }
    /**
     * Timestamp of the last sync
     * 
     */
    @Export(name="lastSyncedAt", refs={String.class}, tree="[0]")
    private Output<String> lastSyncedAt;

    /**
     * @return Timestamp of the last sync
     * 
     */
    public Output<String> lastSyncedAt() {
        return this.lastSyncedAt;
    }
    /**
     * Name of the chaos hub
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the chaos hub
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The organization ID of the chaos hub
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> orgId;

    /**
     * @return The organization ID of the chaos hub
     * 
     */
    public Output<Optional<String>> orgId() {
        return Codegen.optional(this.orgId);
    }
    /**
     * The project ID of the chaos hub
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> projectId;

    /**
     * @return The project ID of the chaos hub
     * 
     */
    public Output<Optional<String>> projectId() {
        return Codegen.optional(this.projectId);
    }
    /**
     * Git repository branch
     * 
     */
    @Export(name="repoBranch", refs={String.class}, tree="[0]")
    private Output<String> repoBranch;

    /**
     * @return Git repository branch
     * 
     */
    public Output<String> repoBranch() {
        return this.repoBranch;
    }
    /**
     * Name of the Git repository (required for account-level connectors)
     * 
     */
    @Export(name="repoName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> repoName;

    /**
     * @return Name of the Git repository (required for account-level connectors)
     * 
     */
    public Output<Optional<String>> repoName() {
        return Codegen.optional(this.repoName);
    }
    /**
     * Tags to associate with the chaos hub
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Tags to associate with the chaos hub
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Total number of experiments in the hub
     * 
     */
    @Export(name="totalExperiments", refs={Integer.class}, tree="[0]")
    private Output<Integer> totalExperiments;

    /**
     * @return Total number of experiments in the hub
     * 
     */
    public Output<Integer> totalExperiments() {
        return this.totalExperiments;
    }
    /**
     * Total number of faults in the hub
     * 
     */
    @Export(name="totalFaults", refs={Integer.class}, tree="[0]")
    private Output<Integer> totalFaults;

    /**
     * @return Total number of faults in the hub
     * 
     */
    public Output<Integer> totalFaults() {
        return this.totalFaults;
    }
    /**
     * Last update timestamp
     * 
     */
    @Export(name="updatedAt", refs={String.class}, tree="[0]")
    private Output<String> updatedAt;

    /**
     * @return Last update timestamp
     * 
     */
    public Output<String> updatedAt() {
        return this.updatedAt;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Hub(java.lang.String name) {
        this(name, HubArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Hub(java.lang.String name, HubArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Hub(java.lang.String name, HubArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:chaos/hub:Hub", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Hub(java.lang.String name, Output<java.lang.String> id, @Nullable HubState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:chaos/hub:Hub", name, state, makeResourceOptions(options, id), false);
    }

    private static HubArgs makeArgs(HubArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? HubArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Hub get(java.lang.String name, Output<java.lang.String> id, @Nullable HubState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Hub(name, id, state, options);
    }
}
