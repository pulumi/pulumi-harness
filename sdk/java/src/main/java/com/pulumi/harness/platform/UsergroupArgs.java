// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.UsergroupNotificationConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UsergroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final UsergroupArgs Empty = new UsergroupArgs();

    /**
     * Description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the user group is externally managed.
     * 
     */
    @Import(name="externallyManaged")
    private @Nullable Output<Boolean> externallyManaged;

    /**
     * @return Whether the user group is externally managed.
     * 
     */
    public Optional<Output<Boolean>> externallyManaged() {
        return Optional.ofNullable(this.externallyManaged);
    }

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * Name of the linked SSO.
     * 
     */
    @Import(name="linkedSsoDisplayName")
    private @Nullable Output<String> linkedSsoDisplayName;

    /**
     * @return Name of the linked SSO.
     * 
     */
    public Optional<Output<String>> linkedSsoDisplayName() {
        return Optional.ofNullable(this.linkedSsoDisplayName);
    }

    /**
     * The SSO account ID that the user group is linked to.
     * 
     */
    @Import(name="linkedSsoId")
    private @Nullable Output<String> linkedSsoId;

    /**
     * @return The SSO account ID that the user group is linked to.
     * 
     */
    public Optional<Output<String>> linkedSsoId() {
        return Optional.ofNullable(this.linkedSsoId);
    }

    /**
     * Type of linked SSO.
     * 
     */
    @Import(name="linkedSsoType")
    private @Nullable Output<String> linkedSsoType;

    /**
     * @return Type of linked SSO.
     * 
     */
    public Optional<Output<String>> linkedSsoType() {
        return Optional.ofNullable(this.linkedSsoType);
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of notification settings.
     * 
     */
    @Import(name="notificationConfigs")
    private @Nullable Output<List<UsergroupNotificationConfigArgs>> notificationConfigs;

    /**
     * @return List of notification settings.
     * 
     */
    public Optional<Output<List<UsergroupNotificationConfigArgs>>> notificationConfigs() {
        return Optional.ofNullable(this.notificationConfigs);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Identifier of the userGroup in SSO.
     * 
     */
    @Import(name="ssoGroupId")
    private @Nullable Output<String> ssoGroupId;

    /**
     * @return Identifier of the userGroup in SSO.
     * 
     */
    public Optional<Output<String>> ssoGroupId() {
        return Optional.ofNullable(this.ssoGroupId);
    }

    /**
     * Name of the SSO userGroup.
     * 
     */
    @Import(name="ssoGroupName")
    private @Nullable Output<String> ssoGroupName;

    /**
     * @return Name of the SSO userGroup.
     * 
     */
    public Optional<Output<String>> ssoGroupName() {
        return Optional.ofNullable(this.ssoGroupName);
    }

    /**
     * Whether sso is linked or not.
     * 
     */
    @Import(name="ssoLinked")
    private @Nullable Output<Boolean> ssoLinked;

    /**
     * @return Whether sso is linked or not.
     * 
     */
    public Optional<Output<Boolean>> ssoLinked() {
        return Optional.ofNullable(this.ssoLinked);
    }

    /**
     * Tags to associate with the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags to associate with the resource.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * List of user emails in the UserGroup. Either provide list of users or list of user emails.
     * 
     */
    @Import(name="userEmails")
    private @Nullable Output<List<String>> userEmails;

    /**
     * @return List of user emails in the UserGroup. Either provide list of users or list of user emails.
     * 
     */
    public Optional<Output<List<String>>> userEmails() {
        return Optional.ofNullable(this.userEmails);
    }

    /**
     * List of users in the UserGroup. Either provide list of users or list of user emails. (Should be null for SSO managed)
     * 
     */
    @Import(name="users")
    private @Nullable Output<List<String>> users;

    /**
     * @return List of users in the UserGroup. Either provide list of users or list of user emails. (Should be null for SSO managed)
     * 
     */
    public Optional<Output<List<String>>> users() {
        return Optional.ofNullable(this.users);
    }

    private UsergroupArgs() {}

    private UsergroupArgs(UsergroupArgs $) {
        this.description = $.description;
        this.externallyManaged = $.externallyManaged;
        this.identifier = $.identifier;
        this.linkedSsoDisplayName = $.linkedSsoDisplayName;
        this.linkedSsoId = $.linkedSsoId;
        this.linkedSsoType = $.linkedSsoType;
        this.name = $.name;
        this.notificationConfigs = $.notificationConfigs;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.ssoGroupId = $.ssoGroupId;
        this.ssoGroupName = $.ssoGroupName;
        this.ssoLinked = $.ssoLinked;
        this.tags = $.tags;
        this.userEmails = $.userEmails;
        this.users = $.users;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UsergroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UsergroupArgs $;

        public Builder() {
            $ = new UsergroupArgs();
        }

        public Builder(UsergroupArgs defaults) {
            $ = new UsergroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param externallyManaged Whether the user group is externally managed.
         * 
         * @return builder
         * 
         */
        public Builder externallyManaged(@Nullable Output<Boolean> externallyManaged) {
            $.externallyManaged = externallyManaged;
            return this;
        }

        /**
         * @param externallyManaged Whether the user group is externally managed.
         * 
         * @return builder
         * 
         */
        public Builder externallyManaged(Boolean externallyManaged) {
            return externallyManaged(Output.of(externallyManaged));
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param linkedSsoDisplayName Name of the linked SSO.
         * 
         * @return builder
         * 
         */
        public Builder linkedSsoDisplayName(@Nullable Output<String> linkedSsoDisplayName) {
            $.linkedSsoDisplayName = linkedSsoDisplayName;
            return this;
        }

        /**
         * @param linkedSsoDisplayName Name of the linked SSO.
         * 
         * @return builder
         * 
         */
        public Builder linkedSsoDisplayName(String linkedSsoDisplayName) {
            return linkedSsoDisplayName(Output.of(linkedSsoDisplayName));
        }

        /**
         * @param linkedSsoId The SSO account ID that the user group is linked to.
         * 
         * @return builder
         * 
         */
        public Builder linkedSsoId(@Nullable Output<String> linkedSsoId) {
            $.linkedSsoId = linkedSsoId;
            return this;
        }

        /**
         * @param linkedSsoId The SSO account ID that the user group is linked to.
         * 
         * @return builder
         * 
         */
        public Builder linkedSsoId(String linkedSsoId) {
            return linkedSsoId(Output.of(linkedSsoId));
        }

        /**
         * @param linkedSsoType Type of linked SSO.
         * 
         * @return builder
         * 
         */
        public Builder linkedSsoType(@Nullable Output<String> linkedSsoType) {
            $.linkedSsoType = linkedSsoType;
            return this;
        }

        /**
         * @param linkedSsoType Type of linked SSO.
         * 
         * @return builder
         * 
         */
        public Builder linkedSsoType(String linkedSsoType) {
            return linkedSsoType(Output.of(linkedSsoType));
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notificationConfigs List of notification settings.
         * 
         * @return builder
         * 
         */
        public Builder notificationConfigs(@Nullable Output<List<UsergroupNotificationConfigArgs>> notificationConfigs) {
            $.notificationConfigs = notificationConfigs;
            return this;
        }

        /**
         * @param notificationConfigs List of notification settings.
         * 
         * @return builder
         * 
         */
        public Builder notificationConfigs(List<UsergroupNotificationConfigArgs> notificationConfigs) {
            return notificationConfigs(Output.of(notificationConfigs));
        }

        /**
         * @param notificationConfigs List of notification settings.
         * 
         * @return builder
         * 
         */
        public Builder notificationConfigs(UsergroupNotificationConfigArgs... notificationConfigs) {
            return notificationConfigs(List.of(notificationConfigs));
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param ssoGroupId Identifier of the userGroup in SSO.
         * 
         * @return builder
         * 
         */
        public Builder ssoGroupId(@Nullable Output<String> ssoGroupId) {
            $.ssoGroupId = ssoGroupId;
            return this;
        }

        /**
         * @param ssoGroupId Identifier of the userGroup in SSO.
         * 
         * @return builder
         * 
         */
        public Builder ssoGroupId(String ssoGroupId) {
            return ssoGroupId(Output.of(ssoGroupId));
        }

        /**
         * @param ssoGroupName Name of the SSO userGroup.
         * 
         * @return builder
         * 
         */
        public Builder ssoGroupName(@Nullable Output<String> ssoGroupName) {
            $.ssoGroupName = ssoGroupName;
            return this;
        }

        /**
         * @param ssoGroupName Name of the SSO userGroup.
         * 
         * @return builder
         * 
         */
        public Builder ssoGroupName(String ssoGroupName) {
            return ssoGroupName(Output.of(ssoGroupName));
        }

        /**
         * @param ssoLinked Whether sso is linked or not.
         * 
         * @return builder
         * 
         */
        public Builder ssoLinked(@Nullable Output<Boolean> ssoLinked) {
            $.ssoLinked = ssoLinked;
            return this;
        }

        /**
         * @param ssoLinked Whether sso is linked or not.
         * 
         * @return builder
         * 
         */
        public Builder ssoLinked(Boolean ssoLinked) {
            return ssoLinked(Output.of(ssoLinked));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param userEmails List of user emails in the UserGroup. Either provide list of users or list of user emails.
         * 
         * @return builder
         * 
         */
        public Builder userEmails(@Nullable Output<List<String>> userEmails) {
            $.userEmails = userEmails;
            return this;
        }

        /**
         * @param userEmails List of user emails in the UserGroup. Either provide list of users or list of user emails.
         * 
         * @return builder
         * 
         */
        public Builder userEmails(List<String> userEmails) {
            return userEmails(Output.of(userEmails));
        }

        /**
         * @param userEmails List of user emails in the UserGroup. Either provide list of users or list of user emails.
         * 
         * @return builder
         * 
         */
        public Builder userEmails(String... userEmails) {
            return userEmails(List.of(userEmails));
        }

        /**
         * @param users List of users in the UserGroup. Either provide list of users or list of user emails. (Should be null for SSO managed)
         * 
         * @return builder
         * 
         */
        public Builder users(@Nullable Output<List<String>> users) {
            $.users = users;
            return this;
        }

        /**
         * @param users List of users in the UserGroup. Either provide list of users or list of user emails. (Should be null for SSO managed)
         * 
         * @return builder
         * 
         */
        public Builder users(List<String> users) {
            return users(Output.of(users));
        }

        /**
         * @param users List of users in the UserGroup. Either provide list of users or list of user emails. (Should be null for SSO managed)
         * 
         * @return builder
         * 
         */
        public Builder users(String... users) {
            return users(List.of(users));
        }

        public UsergroupArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("UsergroupArgs", "identifier");
            }
            return $;
        }
    }

}
