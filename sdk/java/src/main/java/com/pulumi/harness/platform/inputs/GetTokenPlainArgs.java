// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTokenPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTokenPlainArgs Empty = new GetTokenPlainArgs();

    /**
     * Account Identifier for the Entity
     * 
     */
    @Import(name="accountId", required=true)
    private String accountId;

    /**
     * @return Account Identifier for the Entity
     * 
     */
    public String accountId() {
        return this.accountId;
    }

    /**
     * Identifier of the API Key
     * 
     */
    @Import(name="apikeyId", required=true)
    private String apikeyId;

    /**
     * @return Identifier of the API Key
     * 
     */
    public String apikeyId() {
        return this.apikeyId;
    }

    /**
     * Type of the API Key
     * 
     */
    @Import(name="apikeyType", required=true)
    private String apikeyType;

    /**
     * @return Type of the API Key
     * 
     */
    public String apikeyType() {
        return this.apikeyType;
    }

    /**
     * Email Id of the user who created the Token
     * 
     */
    @Import(name="email")
    private @Nullable String email;

    /**
     * @return Email Id of the user who created the Token
     * 
     */
    public Optional<String> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * Encoded password of the Token
     * 
     */
    @Import(name="encodedPassword")
    private @Nullable String encodedPassword;

    /**
     * @return Encoded password of the Token
     * 
     */
    public Optional<String> encodedPassword() {
        return Optional.ofNullable(this.encodedPassword);
    }

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier", required=true)
    private String identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public String identifier() {
        return this.identifier;
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable String orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Parent Entity Identifier of the API Key
     * 
     */
    @Import(name="parentId", required=true)
    private String parentId;

    /**
     * @return Parent Entity Identifier of the API Key
     * 
     */
    public String parentId() {
        return this.parentId;
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable String projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Scheduled expiry time in milliseconds
     * 
     */
    @Import(name="scheduledExpireTime")
    private @Nullable Integer scheduledExpireTime;

    /**
     * @return Scheduled expiry time in milliseconds
     * 
     */
    public Optional<Integer> scheduledExpireTime() {
        return Optional.ofNullable(this.scheduledExpireTime);
    }

    /**
     * Name of the user who created the Token
     * 
     */
    @Import(name="username")
    private @Nullable String username;

    /**
     * @return Name of the user who created the Token
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * Boolean value to indicate if Token is valid or not.
     * 
     */
    @Import(name="valid")
    private @Nullable Boolean valid;

    /**
     * @return Boolean value to indicate if Token is valid or not.
     * 
     */
    public Optional<Boolean> valid() {
        return Optional.ofNullable(this.valid);
    }

    /**
     * This is the time from which the Token is valid. The time is in milliseconds
     * 
     */
    @Import(name="validFrom")
    private @Nullable Integer validFrom;

    /**
     * @return This is the time from which the Token is valid. The time is in milliseconds
     * 
     */
    public Optional<Integer> validFrom() {
        return Optional.ofNullable(this.validFrom);
    }

    /**
     * This is the time till which the Token is valid. The time is in milliseconds
     * 
     */
    @Import(name="validTo")
    private @Nullable Integer validTo;

    /**
     * @return This is the time till which the Token is valid. The time is in milliseconds
     * 
     */
    public Optional<Integer> validTo() {
        return Optional.ofNullable(this.validTo);
    }

    private GetTokenPlainArgs() {}

    private GetTokenPlainArgs(GetTokenPlainArgs $) {
        this.accountId = $.accountId;
        this.apikeyId = $.apikeyId;
        this.apikeyType = $.apikeyType;
        this.email = $.email;
        this.encodedPassword = $.encodedPassword;
        this.identifier = $.identifier;
        this.name = $.name;
        this.orgId = $.orgId;
        this.parentId = $.parentId;
        this.projectId = $.projectId;
        this.scheduledExpireTime = $.scheduledExpireTime;
        this.username = $.username;
        this.valid = $.valid;
        this.validFrom = $.validFrom;
        this.validTo = $.validTo;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTokenPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTokenPlainArgs $;

        public Builder() {
            $ = new GetTokenPlainArgs();
        }

        public Builder(GetTokenPlainArgs defaults) {
            $ = new GetTokenPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account Identifier for the Entity
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param apikeyId Identifier of the API Key
         * 
         * @return builder
         * 
         */
        public Builder apikeyId(String apikeyId) {
            $.apikeyId = apikeyId;
            return this;
        }

        /**
         * @param apikeyType Type of the API Key
         * 
         * @return builder
         * 
         */
        public Builder apikeyType(String apikeyType) {
            $.apikeyType = apikeyType;
            return this;
        }

        /**
         * @param email Email Id of the user who created the Token
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable String email) {
            $.email = email;
            return this;
        }

        /**
         * @param encodedPassword Encoded password of the Token
         * 
         * @return builder
         * 
         */
        public Builder encodedPassword(@Nullable String encodedPassword) {
            $.encodedPassword = encodedPassword;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable String orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param parentId Parent Entity Identifier of the API Key
         * 
         * @return builder
         * 
         */
        public Builder parentId(String parentId) {
            $.parentId = parentId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable String projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param scheduledExpireTime Scheduled expiry time in milliseconds
         * 
         * @return builder
         * 
         */
        public Builder scheduledExpireTime(@Nullable Integer scheduledExpireTime) {
            $.scheduledExpireTime = scheduledExpireTime;
            return this;
        }

        /**
         * @param username Name of the user who created the Token
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable String username) {
            $.username = username;
            return this;
        }

        /**
         * @param valid Boolean value to indicate if Token is valid or not.
         * 
         * @return builder
         * 
         */
        public Builder valid(@Nullable Boolean valid) {
            $.valid = valid;
            return this;
        }

        /**
         * @param validFrom This is the time from which the Token is valid. The time is in milliseconds
         * 
         * @return builder
         * 
         */
        public Builder validFrom(@Nullable Integer validFrom) {
            $.validFrom = validFrom;
            return this;
        }

        /**
         * @param validTo This is the time till which the Token is valid. The time is in milliseconds
         * 
         * @return builder
         * 
         */
        public Builder validTo(@Nullable Integer validTo) {
            $.validTo = validTo;
            return this;
        }

        public GetTokenPlainArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("GetTokenPlainArgs", "accountId");
            }
            if ($.apikeyId == null) {
                throw new MissingRequiredPropertyException("GetTokenPlainArgs", "apikeyId");
            }
            if ($.apikeyType == null) {
                throw new MissingRequiredPropertyException("GetTokenPlainArgs", "apikeyType");
            }
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("GetTokenPlainArgs", "identifier");
            }
            if ($.parentId == null) {
                throw new MissingRequiredPropertyException("GetTokenPlainArgs", "parentId");
            }
            return $;
        }
    }

}
