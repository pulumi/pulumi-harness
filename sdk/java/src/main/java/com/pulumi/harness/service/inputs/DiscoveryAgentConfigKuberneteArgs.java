// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.service.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.service.inputs.DiscoveryAgentConfigKuberneteResourceArgs;
import com.pulumi.harness.service.inputs.DiscoveryAgentConfigKuberneteTolerationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiscoveryAgentConfigKuberneteArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiscoveryAgentConfigKuberneteArgs Empty = new DiscoveryAgentConfigKuberneteArgs();

    /**
     * Annotations to add to all resources.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Annotations to add to all resources.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Whether to disable namespace creation.
     * 
     */
    @Import(name="disableNamespaceCreation")
    private @Nullable Output<Boolean> disableNamespaceCreation;

    /**
     * @return Whether to disable namespace creation.
     * 
     */
    public Optional<Output<Boolean>> disableNamespaceCreation() {
        return Optional.ofNullable(this.disableNamespaceCreation);
    }

    /**
     * The image pull policy.
     * 
     */
    @Import(name="imagePullPolicy")
    private @Nullable Output<String> imagePullPolicy;

    /**
     * @return The image pull policy.
     * 
     */
    public Optional<Output<String>> imagePullPolicy() {
        return Optional.ofNullable(this.imagePullPolicy);
    }

    /**
     * Labels to add to all resources.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels to add to all resources.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Kubernetes namespace to use
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return Kubernetes namespace to use
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * Whether the agent is namespaced.
     * 
     */
    @Import(name="namespaced")
    private @Nullable Output<Boolean> namespaced;

    /**
     * @return Whether the agent is namespaced.
     * 
     */
    public Optional<Output<Boolean>> namespaced() {
        return Optional.ofNullable(this.namespaced);
    }

    /**
     * Node selector labels.
     * 
     */
    @Import(name="nodeSelector")
    private @Nullable Output<Map<String,String>> nodeSelector;

    /**
     * @return Node selector labels.
     * 
     */
    public Optional<Output<Map<String,String>>> nodeSelector() {
        return Optional.ofNullable(this.nodeSelector);
    }

    /**
     * Compute resource requirements for the agent container.
     * 
     */
    @Import(name="resources")
    private @Nullable Output<List<DiscoveryAgentConfigKuberneteResourceArgs>> resources;

    /**
     * @return Compute resource requirements for the agent container.
     * 
     */
    public Optional<Output<List<DiscoveryAgentConfigKuberneteResourceArgs>>> resources() {
        return Optional.ofNullable(this.resources);
    }

    /**
     * The group ID to run as.
     * 
     */
    @Import(name="runAsGroup")
    private @Nullable Output<Integer> runAsGroup;

    /**
     * @return The group ID to run as.
     * 
     */
    public Optional<Output<Integer>> runAsGroup() {
        return Optional.ofNullable(this.runAsGroup);
    }

    /**
     * The user ID to run as.
     * 
     */
    @Import(name="runAsUser")
    private @Nullable Output<Integer> runAsUser;

    /**
     * @return The user ID to run as.
     * 
     */
    public Optional<Output<Integer>> runAsUser() {
        return Optional.ofNullable(this.runAsUser);
    }

    /**
     * Service account to use
     * 
     */
    @Import(name="serviceAccount")
    private @Nullable Output<String> serviceAccount;

    /**
     * @return Service account to use
     * 
     */
    public Optional<Output<String>> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    /**
     * Tolerations for pod assignment.
     * 
     */
    @Import(name="tolerations")
    private @Nullable Output<List<DiscoveryAgentConfigKuberneteTolerationArgs>> tolerations;

    /**
     * @return Tolerations for pod assignment.
     * 
     */
    public Optional<Output<List<DiscoveryAgentConfigKuberneteTolerationArgs>>> tolerations() {
        return Optional.ofNullable(this.tolerations);
    }

    private DiscoveryAgentConfigKuberneteArgs() {}

    private DiscoveryAgentConfigKuberneteArgs(DiscoveryAgentConfigKuberneteArgs $) {
        this.annotations = $.annotations;
        this.disableNamespaceCreation = $.disableNamespaceCreation;
        this.imagePullPolicy = $.imagePullPolicy;
        this.labels = $.labels;
        this.namespace = $.namespace;
        this.namespaced = $.namespaced;
        this.nodeSelector = $.nodeSelector;
        this.resources = $.resources;
        this.runAsGroup = $.runAsGroup;
        this.runAsUser = $.runAsUser;
        this.serviceAccount = $.serviceAccount;
        this.tolerations = $.tolerations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiscoveryAgentConfigKuberneteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiscoveryAgentConfigKuberneteArgs $;

        public Builder() {
            $ = new DiscoveryAgentConfigKuberneteArgs();
        }

        public Builder(DiscoveryAgentConfigKuberneteArgs defaults) {
            $ = new DiscoveryAgentConfigKuberneteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Annotations to add to all resources.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Annotations to add to all resources.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param disableNamespaceCreation Whether to disable namespace creation.
         * 
         * @return builder
         * 
         */
        public Builder disableNamespaceCreation(@Nullable Output<Boolean> disableNamespaceCreation) {
            $.disableNamespaceCreation = disableNamespaceCreation;
            return this;
        }

        /**
         * @param disableNamespaceCreation Whether to disable namespace creation.
         * 
         * @return builder
         * 
         */
        public Builder disableNamespaceCreation(Boolean disableNamespaceCreation) {
            return disableNamespaceCreation(Output.of(disableNamespaceCreation));
        }

        /**
         * @param imagePullPolicy The image pull policy.
         * 
         * @return builder
         * 
         */
        public Builder imagePullPolicy(@Nullable Output<String> imagePullPolicy) {
            $.imagePullPolicy = imagePullPolicy;
            return this;
        }

        /**
         * @param imagePullPolicy The image pull policy.
         * 
         * @return builder
         * 
         */
        public Builder imagePullPolicy(String imagePullPolicy) {
            return imagePullPolicy(Output.of(imagePullPolicy));
        }

        /**
         * @param labels Labels to add to all resources.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels to add to all resources.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param namespace Kubernetes namespace to use
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Kubernetes namespace to use
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param namespaced Whether the agent is namespaced.
         * 
         * @return builder
         * 
         */
        public Builder namespaced(@Nullable Output<Boolean> namespaced) {
            $.namespaced = namespaced;
            return this;
        }

        /**
         * @param namespaced Whether the agent is namespaced.
         * 
         * @return builder
         * 
         */
        public Builder namespaced(Boolean namespaced) {
            return namespaced(Output.of(namespaced));
        }

        /**
         * @param nodeSelector Node selector labels.
         * 
         * @return builder
         * 
         */
        public Builder nodeSelector(@Nullable Output<Map<String,String>> nodeSelector) {
            $.nodeSelector = nodeSelector;
            return this;
        }

        /**
         * @param nodeSelector Node selector labels.
         * 
         * @return builder
         * 
         */
        public Builder nodeSelector(Map<String,String> nodeSelector) {
            return nodeSelector(Output.of(nodeSelector));
        }

        /**
         * @param resources Compute resource requirements for the agent container.
         * 
         * @return builder
         * 
         */
        public Builder resources(@Nullable Output<List<DiscoveryAgentConfigKuberneteResourceArgs>> resources) {
            $.resources = resources;
            return this;
        }

        /**
         * @param resources Compute resource requirements for the agent container.
         * 
         * @return builder
         * 
         */
        public Builder resources(List<DiscoveryAgentConfigKuberneteResourceArgs> resources) {
            return resources(Output.of(resources));
        }

        /**
         * @param resources Compute resource requirements for the agent container.
         * 
         * @return builder
         * 
         */
        public Builder resources(DiscoveryAgentConfigKuberneteResourceArgs... resources) {
            return resources(List.of(resources));
        }

        /**
         * @param runAsGroup The group ID to run as.
         * 
         * @return builder
         * 
         */
        public Builder runAsGroup(@Nullable Output<Integer> runAsGroup) {
            $.runAsGroup = runAsGroup;
            return this;
        }

        /**
         * @param runAsGroup The group ID to run as.
         * 
         * @return builder
         * 
         */
        public Builder runAsGroup(Integer runAsGroup) {
            return runAsGroup(Output.of(runAsGroup));
        }

        /**
         * @param runAsUser The user ID to run as.
         * 
         * @return builder
         * 
         */
        public Builder runAsUser(@Nullable Output<Integer> runAsUser) {
            $.runAsUser = runAsUser;
            return this;
        }

        /**
         * @param runAsUser The user ID to run as.
         * 
         * @return builder
         * 
         */
        public Builder runAsUser(Integer runAsUser) {
            return runAsUser(Output.of(runAsUser));
        }

        /**
         * @param serviceAccount Service account to use
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param serviceAccount Service account to use
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        /**
         * @param tolerations Tolerations for pod assignment.
         * 
         * @return builder
         * 
         */
        public Builder tolerations(@Nullable Output<List<DiscoveryAgentConfigKuberneteTolerationArgs>> tolerations) {
            $.tolerations = tolerations;
            return this;
        }

        /**
         * @param tolerations Tolerations for pod assignment.
         * 
         * @return builder
         * 
         */
        public Builder tolerations(List<DiscoveryAgentConfigKuberneteTolerationArgs> tolerations) {
            return tolerations(Output.of(tolerations));
        }

        /**
         * @param tolerations Tolerations for pod assignment.
         * 
         * @return builder
         * 
         */
        public Builder tolerations(DiscoveryAgentConfigKuberneteTolerationArgs... tolerations) {
            return tolerations(List.of(tolerations));
        }

        public DiscoveryAgentConfigKuberneteArgs build() {
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("DiscoveryAgentConfigKuberneteArgs", "namespace");
            }
            return $;
        }
    }

}
