// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AzureKeyVaultConnectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final AzureKeyVaultConnectorArgs Empty = new AzureKeyVaultConnectorArgs();

    /**
     * Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE
     * 
     */
    @Import(name="azureEnvironmentType")
    private @Nullable Output<String> azureEnvironmentType;

    /**
     * @return Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE
     * 
     */
    public Optional<Output<String>> azureEnvironmentType() {
        return Optional.ofNullable(this.azureEnvironmentType);
    }

    /**
     * Application ID of the Azure App.
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return Application ID of the Azure App.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * Tags to filter delegates for connection.
     * 
     */
    @Import(name="delegateSelectors")
    private @Nullable Output<List<String>> delegateSelectors;

    /**
     * @return Tags to filter delegates for connection.
     * 
     */
    public Optional<Output<List<String>>> delegateSelectors() {
        return Optional.ofNullable(this.delegateSelectors);
    }

    /**
     * Description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * Specifies whether or not is the default value.
     * 
     */
    @Import(name="isDefault")
    private @Nullable Output<Boolean> isDefault;

    /**
     * @return Specifies whether or not is the default value.
     * 
     */
    public Optional<Output<Boolean>> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The Harness text secret with the Azure authentication key as its value.
     * 
     */
    @Import(name="secretKey", required=true)
    private Output<String> secretKey;

    /**
     * @return The Harness text secret with the Azure authentication key as its value.
     * 
     */
    public Output<String> secretKey() {
        return this.secretKey;
    }

    /**
     * Azure subscription ID.
     * 
     */
    @Import(name="subscription", required=true)
    private Output<String> subscription;

    /**
     * @return Azure subscription ID.
     * 
     */
    public Output<String> subscription() {
        return this.subscription;
    }

    /**
     * Tags to associate with the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags to associate with the resource.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The Azure Active Directory (Azure AD) directory ID where you created your application.
     * 
     */
    @Import(name="tenantId", required=true)
    private Output<String> tenantId;

    /**
     * @return The Azure Active Directory (Azure AD) directory ID where you created your application.
     * 
     */
    public Output<String> tenantId() {
        return this.tenantId;
    }

    /**
     * Name of the vault.
     * 
     */
    @Import(name="vaultName", required=true)
    private Output<String> vaultName;

    /**
     * @return Name of the vault.
     * 
     */
    public Output<String> vaultName() {
        return this.vaultName;
    }

    private AzureKeyVaultConnectorArgs() {}

    private AzureKeyVaultConnectorArgs(AzureKeyVaultConnectorArgs $) {
        this.azureEnvironmentType = $.azureEnvironmentType;
        this.clientId = $.clientId;
        this.delegateSelectors = $.delegateSelectors;
        this.description = $.description;
        this.identifier = $.identifier;
        this.isDefault = $.isDefault;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.secretKey = $.secretKey;
        this.subscription = $.subscription;
        this.tags = $.tags;
        this.tenantId = $.tenantId;
        this.vaultName = $.vaultName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureKeyVaultConnectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureKeyVaultConnectorArgs $;

        public Builder() {
            $ = new AzureKeyVaultConnectorArgs();
        }

        public Builder(AzureKeyVaultConnectorArgs defaults) {
            $ = new AzureKeyVaultConnectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param azureEnvironmentType Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE
         * 
         * @return builder
         * 
         */
        public Builder azureEnvironmentType(@Nullable Output<String> azureEnvironmentType) {
            $.azureEnvironmentType = azureEnvironmentType;
            return this;
        }

        /**
         * @param azureEnvironmentType Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE
         * 
         * @return builder
         * 
         */
        public Builder azureEnvironmentType(String azureEnvironmentType) {
            return azureEnvironmentType(Output.of(azureEnvironmentType));
        }

        /**
         * @param clientId Application ID of the Azure App.
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId Application ID of the Azure App.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param delegateSelectors Tags to filter delegates for connection.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(@Nullable Output<List<String>> delegateSelectors) {
            $.delegateSelectors = delegateSelectors;
            return this;
        }

        /**
         * @param delegateSelectors Tags to filter delegates for connection.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(List<String> delegateSelectors) {
            return delegateSelectors(Output.of(delegateSelectors));
        }

        /**
         * @param delegateSelectors Tags to filter delegates for connection.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(String... delegateSelectors) {
            return delegateSelectors(List.of(delegateSelectors));
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param isDefault Specifies whether or not is the default value.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(@Nullable Output<Boolean> isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        /**
         * @param isDefault Specifies whether or not is the default value.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(Boolean isDefault) {
            return isDefault(Output.of(isDefault));
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param secretKey The Harness text secret with the Azure authentication key as its value.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey The Harness text secret with the Azure authentication key as its value.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        /**
         * @param subscription Azure subscription ID.
         * 
         * @return builder
         * 
         */
        public Builder subscription(Output<String> subscription) {
            $.subscription = subscription;
            return this;
        }

        /**
         * @param subscription Azure subscription ID.
         * 
         * @return builder
         * 
         */
        public Builder subscription(String subscription) {
            return subscription(Output.of(subscription));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tenantId The Azure Active Directory (Azure AD) directory ID where you created your application.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId The Azure Active Directory (Azure AD) directory ID where you created your application.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        /**
         * @param vaultName Name of the vault.
         * 
         * @return builder
         * 
         */
        public Builder vaultName(Output<String> vaultName) {
            $.vaultName = vaultName;
            return this;
        }

        /**
         * @param vaultName Name of the vault.
         * 
         * @return builder
         * 
         */
        public Builder vaultName(String vaultName) {
            return vaultName(Output.of(vaultName));
        }

        public AzureKeyVaultConnectorArgs build() {
            if ($.clientId == null) {
                throw new MissingRequiredPropertyException("AzureKeyVaultConnectorArgs", "clientId");
            }
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("AzureKeyVaultConnectorArgs", "identifier");
            }
            if ($.secretKey == null) {
                throw new MissingRequiredPropertyException("AzureKeyVaultConnectorArgs", "secretKey");
            }
            if ($.subscription == null) {
                throw new MissingRequiredPropertyException("AzureKeyVaultConnectorArgs", "subscription");
            }
            if ($.tenantId == null) {
                throw new MissingRequiredPropertyException("AzureKeyVaultConnectorArgs", "tenantId");
            }
            if ($.vaultName == null) {
                throw new MissingRequiredPropertyException("AzureKeyVaultConnectorArgs", "vaultName");
            }
            return $;
        }
    }

}
