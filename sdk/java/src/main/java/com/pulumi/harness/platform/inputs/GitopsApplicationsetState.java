// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GitopsApplicationsetApplicationsetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsApplicationsetState extends com.pulumi.resources.ResourceArgs {

    public static final GitopsApplicationsetState Empty = new GitopsApplicationsetState();

    /**
     * Agent identifier of the GitOps applicationset.
     * 
     */
    @Import(name="agentId")
    private @Nullable Output<String> agentId;

    /**
     * @return Agent identifier of the GitOps applicationset.
     * 
     */
    public Optional<Output<String>> agentId() {
        return Optional.ofNullable(this.agentId);
    }

    /**
     * Definition of the GitOps applicationset resource.
     * 
     */
    @Import(name="applicationset")
    private @Nullable Output<GitopsApplicationsetApplicationsetArgs> applicationset;

    /**
     * @return Definition of the GitOps applicationset resource.
     * 
     */
    public Optional<Output<GitopsApplicationsetApplicationsetArgs>> applicationset() {
        return Optional.ofNullable(this.applicationset);
    }

    /**
     * Identifier of the GitOps applicationset. This is a unique identifier for the applicationset generated automatically.
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return Identifier of the GitOps applicationset. This is a unique identifier for the applicationset generated automatically.
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * Organization identifier of the GitOps applicationset.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Organization identifier of the GitOps applicationset.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Project identifier of the GitOps applicationset.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Project identifier of the GitOps applicationset.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Indicates if the GitOps application should be updated if existing and inserted if not.
     * 
     */
    @Import(name="upsert")
    private @Nullable Output<Boolean> upsert;

    /**
     * @return Indicates if the GitOps application should be updated if existing and inserted if not.
     * 
     */
    public Optional<Output<Boolean>> upsert() {
        return Optional.ofNullable(this.upsert);
    }

    private GitopsApplicationsetState() {}

    private GitopsApplicationsetState(GitopsApplicationsetState $) {
        this.agentId = $.agentId;
        this.applicationset = $.applicationset;
        this.identifier = $.identifier;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.upsert = $.upsert;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsApplicationsetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsApplicationsetState $;

        public Builder() {
            $ = new GitopsApplicationsetState();
        }

        public Builder(GitopsApplicationsetState defaults) {
            $ = new GitopsApplicationsetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentId Agent identifier of the GitOps applicationset.
         * 
         * @return builder
         * 
         */
        public Builder agentId(@Nullable Output<String> agentId) {
            $.agentId = agentId;
            return this;
        }

        /**
         * @param agentId Agent identifier of the GitOps applicationset.
         * 
         * @return builder
         * 
         */
        public Builder agentId(String agentId) {
            return agentId(Output.of(agentId));
        }

        /**
         * @param applicationset Definition of the GitOps applicationset resource.
         * 
         * @return builder
         * 
         */
        public Builder applicationset(@Nullable Output<GitopsApplicationsetApplicationsetArgs> applicationset) {
            $.applicationset = applicationset;
            return this;
        }

        /**
         * @param applicationset Definition of the GitOps applicationset resource.
         * 
         * @return builder
         * 
         */
        public Builder applicationset(GitopsApplicationsetApplicationsetArgs applicationset) {
            return applicationset(Output.of(applicationset));
        }

        /**
         * @param identifier Identifier of the GitOps applicationset. This is a unique identifier for the applicationset generated automatically.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Identifier of the GitOps applicationset. This is a unique identifier for the applicationset generated automatically.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param orgId Organization identifier of the GitOps applicationset.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Organization identifier of the GitOps applicationset.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Project identifier of the GitOps applicationset.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project identifier of the GitOps applicationset.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param upsert Indicates if the GitOps application should be updated if existing and inserted if not.
         * 
         * @return builder
         * 
         */
        public Builder upsert(@Nullable Output<Boolean> upsert) {
            $.upsert = upsert;
            return this;
        }

        /**
         * @param upsert Indicates if the GitOps application should be updated if existing and inserted if not.
         * 
         * @return builder
         * 
         */
        public Builder upsert(Boolean upsert) {
            return upsert(Output.of(upsert));
        }

        public GitopsApplicationsetState build() {
            return $;
        }
    }

}
