// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.cluster.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.cluster.inputs.OrchestratorConfigReplacementScheduleAppliesToArgs;
import com.pulumi.harness.cluster.inputs.OrchestratorConfigReplacementScheduleWindowDetailsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrchestratorConfigReplacementScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrchestratorConfigReplacementScheduleArgs Empty = new OrchestratorConfigReplacementScheduleArgs();

    /**
     * Defines the scope of the replacement schedule
     * 
     */
    @Import(name="appliesTo", required=true)
    private Output<OrchestratorConfigReplacementScheduleAppliesToArgs> appliesTo;

    /**
     * @return Defines the scope of the replacement schedule
     * 
     */
    public Output<OrchestratorConfigReplacementScheduleAppliesToArgs> appliesTo() {
        return this.appliesTo;
    }

    @Import(name="windowDetails")
    private @Nullable Output<OrchestratorConfigReplacementScheduleWindowDetailsArgs> windowDetails;

    public Optional<Output<OrchestratorConfigReplacementScheduleWindowDetailsArgs>> windowDetails() {
        return Optional.ofNullable(this.windowDetails);
    }

    /**
     * Window type for replacement schedule
     * 
     */
    @Import(name="windowType", required=true)
    private Output<String> windowType;

    /**
     * @return Window type for replacement schedule
     * 
     */
    public Output<String> windowType() {
        return this.windowType;
    }

    private OrchestratorConfigReplacementScheduleArgs() {}

    private OrchestratorConfigReplacementScheduleArgs(OrchestratorConfigReplacementScheduleArgs $) {
        this.appliesTo = $.appliesTo;
        this.windowDetails = $.windowDetails;
        this.windowType = $.windowType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrchestratorConfigReplacementScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrchestratorConfigReplacementScheduleArgs $;

        public Builder() {
            $ = new OrchestratorConfigReplacementScheduleArgs();
        }

        public Builder(OrchestratorConfigReplacementScheduleArgs defaults) {
            $ = new OrchestratorConfigReplacementScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appliesTo Defines the scope of the replacement schedule
         * 
         * @return builder
         * 
         */
        public Builder appliesTo(Output<OrchestratorConfigReplacementScheduleAppliesToArgs> appliesTo) {
            $.appliesTo = appliesTo;
            return this;
        }

        /**
         * @param appliesTo Defines the scope of the replacement schedule
         * 
         * @return builder
         * 
         */
        public Builder appliesTo(OrchestratorConfigReplacementScheduleAppliesToArgs appliesTo) {
            return appliesTo(Output.of(appliesTo));
        }

        public Builder windowDetails(@Nullable Output<OrchestratorConfigReplacementScheduleWindowDetailsArgs> windowDetails) {
            $.windowDetails = windowDetails;
            return this;
        }

        public Builder windowDetails(OrchestratorConfigReplacementScheduleWindowDetailsArgs windowDetails) {
            return windowDetails(Output.of(windowDetails));
        }

        /**
         * @param windowType Window type for replacement schedule
         * 
         * @return builder
         * 
         */
        public Builder windowType(Output<String> windowType) {
            $.windowType = windowType;
            return this;
        }

        /**
         * @param windowType Window type for replacement schedule
         * 
         * @return builder
         * 
         */
        public Builder windowType(String windowType) {
            return windowType(Output.of(windowType));
        }

        public OrchestratorConfigReplacementScheduleArgs build() {
            if ($.appliesTo == null) {
                throw new MissingRequiredPropertyException("OrchestratorConfigReplacementScheduleArgs", "appliesTo");
            }
            if ($.windowType == null) {
                throw new MissingRequiredPropertyException("OrchestratorConfigReplacementScheduleArgs", "windowType");
            }
            return $;
        }
    }

}
