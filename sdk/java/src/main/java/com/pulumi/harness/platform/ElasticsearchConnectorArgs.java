// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.ElasticsearchConnectorApiTokenArgs;
import com.pulumi.harness.platform.inputs.ElasticsearchConnectorNoAuthenticationArgs;
import com.pulumi.harness.platform.inputs.ElasticsearchConnectorUsernamePasswordArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ElasticsearchConnectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ElasticsearchConnectorArgs Empty = new ElasticsearchConnectorArgs();

    /**
     * Authenticate to ElasticSearch using api token.
     * 
     */
    @Import(name="apiToken")
    private @Nullable Output<ElasticsearchConnectorApiTokenArgs> apiToken;

    /**
     * @return Authenticate to ElasticSearch using api token.
     * 
     */
    public Optional<Output<ElasticsearchConnectorApiTokenArgs>> apiToken() {
        return Optional.ofNullable(this.apiToken);
    }

    /**
     * Tags to filter delegates for connection.
     * 
     */
    @Import(name="delegateSelectors")
    private @Nullable Output<List<String>> delegateSelectors;

    /**
     * @return Tags to filter delegates for connection.
     * 
     */
    public Optional<Output<List<String>>> delegateSelectors() {
        return Optional.ofNullable(this.delegateSelectors);
    }

    /**
     * Description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * No Authentication to ElasticSearch
     * 
     */
    @Import(name="noAuthentication")
    private @Nullable Output<ElasticsearchConnectorNoAuthenticationArgs> noAuthentication;

    /**
     * @return No Authentication to ElasticSearch
     * 
     */
    public Optional<Output<ElasticsearchConnectorNoAuthenticationArgs>> noAuthentication() {
        return Optional.ofNullable(this.noAuthentication);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Tags to associate with the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags to associate with the resource.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * URL of the elasticsearch
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return URL of the elasticsearch
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     * Authenticate to ElasticSearch using username and password.
     * 
     */
    @Import(name="usernamePassword")
    private @Nullable Output<ElasticsearchConnectorUsernamePasswordArgs> usernamePassword;

    /**
     * @return Authenticate to ElasticSearch using username and password.
     * 
     */
    public Optional<Output<ElasticsearchConnectorUsernamePasswordArgs>> usernamePassword() {
        return Optional.ofNullable(this.usernamePassword);
    }

    private ElasticsearchConnectorArgs() {}

    private ElasticsearchConnectorArgs(ElasticsearchConnectorArgs $) {
        this.apiToken = $.apiToken;
        this.delegateSelectors = $.delegateSelectors;
        this.description = $.description;
        this.identifier = $.identifier;
        this.name = $.name;
        this.noAuthentication = $.noAuthentication;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.tags = $.tags;
        this.url = $.url;
        this.usernamePassword = $.usernamePassword;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ElasticsearchConnectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ElasticsearchConnectorArgs $;

        public Builder() {
            $ = new ElasticsearchConnectorArgs();
        }

        public Builder(ElasticsearchConnectorArgs defaults) {
            $ = new ElasticsearchConnectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiToken Authenticate to ElasticSearch using api token.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(@Nullable Output<ElasticsearchConnectorApiTokenArgs> apiToken) {
            $.apiToken = apiToken;
            return this;
        }

        /**
         * @param apiToken Authenticate to ElasticSearch using api token.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(ElasticsearchConnectorApiTokenArgs apiToken) {
            return apiToken(Output.of(apiToken));
        }

        /**
         * @param delegateSelectors Tags to filter delegates for connection.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(@Nullable Output<List<String>> delegateSelectors) {
            $.delegateSelectors = delegateSelectors;
            return this;
        }

        /**
         * @param delegateSelectors Tags to filter delegates for connection.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(List<String> delegateSelectors) {
            return delegateSelectors(Output.of(delegateSelectors));
        }

        /**
         * @param delegateSelectors Tags to filter delegates for connection.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(String... delegateSelectors) {
            return delegateSelectors(List.of(delegateSelectors));
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param noAuthentication No Authentication to ElasticSearch
         * 
         * @return builder
         * 
         */
        public Builder noAuthentication(@Nullable Output<ElasticsearchConnectorNoAuthenticationArgs> noAuthentication) {
            $.noAuthentication = noAuthentication;
            return this;
        }

        /**
         * @param noAuthentication No Authentication to ElasticSearch
         * 
         * @return builder
         * 
         */
        public Builder noAuthentication(ElasticsearchConnectorNoAuthenticationArgs noAuthentication) {
            return noAuthentication(Output.of(noAuthentication));
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param url URL of the elasticsearch
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url URL of the elasticsearch
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param usernamePassword Authenticate to ElasticSearch using username and password.
         * 
         * @return builder
         * 
         */
        public Builder usernamePassword(@Nullable Output<ElasticsearchConnectorUsernamePasswordArgs> usernamePassword) {
            $.usernamePassword = usernamePassword;
            return this;
        }

        /**
         * @param usernamePassword Authenticate to ElasticSearch using username and password.
         * 
         * @return builder
         * 
         */
        public Builder usernamePassword(ElasticsearchConnectorUsernamePasswordArgs usernamePassword) {
            return usernamePassword(Output.of(usernamePassword));
        }

        public ElasticsearchConnectorArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("ElasticsearchConnectorArgs", "identifier");
            }
            if ($.url == null) {
                throw new MissingRequiredPropertyException("ElasticsearchConnectorArgs", "url");
            }
            return $;
        }
    }

}
